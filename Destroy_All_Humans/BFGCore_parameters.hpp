#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFGCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "BFGCore_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function BFGCore.BFGScriptedSequence_Task.OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGScriptedSequence_Task_OnActorDestroyed final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_Task_OnActorDestroyed) == 0x000008, "Wrong alignment on BFGScriptedSequence_Task_OnActorDestroyed");
static_assert(sizeof(BFGScriptedSequence_Task_OnActorDestroyed) == 0x000008, "Wrong size on BFGScriptedSequence_Task_OnActorDestroyed");
static_assert(offsetof(BFGScriptedSequence_Task_OnActorDestroyed, _pActor) == 0x000000, "Member 'BFGScriptedSequence_Task_OnActorDestroyed::_pActor' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_Task.OnActorIsDeadStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGScriptedSequence_Task_OnActorIsDeadStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pDeathStat;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_Task_OnActorIsDeadStatChanged) == 0x000008, "Wrong alignment on BFGScriptedSequence_Task_OnActorIsDeadStatChanged");
static_assert(sizeof(BFGScriptedSequence_Task_OnActorIsDeadStatChanged) == 0x000010, "Wrong size on BFGScriptedSequence_Task_OnActorIsDeadStatChanged");
static_assert(offsetof(BFGScriptedSequence_Task_OnActorIsDeadStatChanged, _pActor) == 0x000000, "Member 'BFGScriptedSequence_Task_OnActorIsDeadStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_Task_OnActorIsDeadStatChanged, _pDeathStat) == 0x000008, "Member 'BFGScriptedSequence_Task_OnActorIsDeadStatChanged::_pDeathStat' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_Task.OnAITaskAborted
// 0x0008 (0x0008 - 0x0000)
struct BFGScriptedSequence_Task_OnAITaskAborted final
{
public:
	class UBFGNetworkPathAgent_AIStateBase*       _pTask;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_Task_OnAITaskAborted) == 0x000008, "Wrong alignment on BFGScriptedSequence_Task_OnAITaskAborted");
static_assert(sizeof(BFGScriptedSequence_Task_OnAITaskAborted) == 0x000008, "Wrong size on BFGScriptedSequence_Task_OnAITaskAborted");
static_assert(offsetof(BFGScriptedSequence_Task_OnAITaskAborted, _pTask) == 0x000000, "Member 'BFGScriptedSequence_Task_OnAITaskAborted::_pTask' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_Task.OnAITaskFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGScriptedSequence_Task_OnAITaskFinished final
{
public:
	class UBFGNetworkPathAgent_AIStateBase*       _pTask;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_Task_OnAITaskFinished) == 0x000008, "Wrong alignment on BFGScriptedSequence_Task_OnAITaskFinished");
static_assert(sizeof(BFGScriptedSequence_Task_OnAITaskFinished) == 0x000008, "Wrong size on BFGScriptedSequence_Task_OnAITaskFinished");
static_assert(offsetof(BFGScriptedSequence_Task_OnAITaskFinished, _pTask) == 0x000000, "Member 'BFGScriptedSequence_Task_OnAITaskFinished::_pTask' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_Task.OnAITaskStarted
// 0x0008 (0x0008 - 0x0000)
struct BFGScriptedSequence_Task_OnAITaskStarted final
{
public:
	class UBFGNetworkPathAgent_AIStateBase*       _pTask;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_Task_OnAITaskStarted) == 0x000008, "Wrong alignment on BFGScriptedSequence_Task_OnAITaskStarted");
static_assert(sizeof(BFGScriptedSequence_Task_OnAITaskStarted) == 0x000008, "Wrong size on BFGScriptedSequence_Task_OnAITaskStarted");
static_assert(offsetof(BFGScriptedSequence_Task_OnAITaskStarted, _pTask) == 0x000000, "Member 'BFGScriptedSequence_Task_OnAITaskStarted::_pTask' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_DestroyedStaticObject.OnStaticObjectDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_DestroyedStaticObject_OnStaticObjectDestroyed final
{
public:
	class ABFGObject_StaticWithPhysics*           _pDestroyedObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_DestroyedStaticObject_OnStaticObjectDestroyed) == 0x000008, "Wrong alignment on BFGEventTrigger_DestroyedStaticObject_OnStaticObjectDestroyed");
static_assert(sizeof(BFGEventTrigger_DestroyedStaticObject_OnStaticObjectDestroyed) == 0x000008, "Wrong size on BFGEventTrigger_DestroyedStaticObject_OnStaticObjectDestroyed");
static_assert(offsetof(BFGEventTrigger_DestroyedStaticObject_OnStaticObjectDestroyed, _pDestroyedObject) == 0x000000, "Member 'BFGEventTrigger_DestroyedStaticObject_OnStaticObjectDestroyed::_pDestroyedObject' has a wrong offset!");

// Function BFGCore.BFGWidgetSceneObjectHighlighter.GetContainerOffscreenPointer
// 0x0008 (0x0008 - 0x0000)
struct BFGWidgetSceneObjectHighlighter_GetContainerOffscreenPointer final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetSceneObjectHighlighter_GetContainerOffscreenPointer) == 0x000008, "Wrong alignment on BFGWidgetSceneObjectHighlighter_GetContainerOffscreenPointer");
static_assert(sizeof(BFGWidgetSceneObjectHighlighter_GetContainerOffscreenPointer) == 0x000008, "Wrong size on BFGWidgetSceneObjectHighlighter_GetContainerOffscreenPointer");
static_assert(offsetof(BFGWidgetSceneObjectHighlighter_GetContainerOffscreenPointer, ReturnValue) == 0x000000, "Member 'BFGWidgetSceneObjectHighlighter_GetContainerOffscreenPointer::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidgetSceneObjectHighlighter.GetImageIcon
// 0x0008 (0x0008 - 0x0000)
struct BFGWidgetSceneObjectHighlighter_GetImageIcon final
{
public:
	class UImage*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetSceneObjectHighlighter_GetImageIcon) == 0x000008, "Wrong alignment on BFGWidgetSceneObjectHighlighter_GetImageIcon");
static_assert(sizeof(BFGWidgetSceneObjectHighlighter_GetImageIcon) == 0x000008, "Wrong size on BFGWidgetSceneObjectHighlighter_GetImageIcon");
static_assert(offsetof(BFGWidgetSceneObjectHighlighter_GetImageIcon, ReturnValue) == 0x000000, "Member 'BFGWidgetSceneObjectHighlighter_GetImageIcon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidgetSceneObjectHighlighter.GetImageOffscreenPointer
// 0x0008 (0x0008 - 0x0000)
struct BFGWidgetSceneObjectHighlighter_GetImageOffscreenPointer final
{
public:
	class UImage*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetSceneObjectHighlighter_GetImageOffscreenPointer) == 0x000008, "Wrong alignment on BFGWidgetSceneObjectHighlighter_GetImageOffscreenPointer");
static_assert(sizeof(BFGWidgetSceneObjectHighlighter_GetImageOffscreenPointer) == 0x000008, "Wrong size on BFGWidgetSceneObjectHighlighter_GetImageOffscreenPointer");
static_assert(offsetof(BFGWidgetSceneObjectHighlighter_GetImageOffscreenPointer, ReturnValue) == 0x000000, "Member 'BFGWidgetSceneObjectHighlighter_GetImageOffscreenPointer::ReturnValue' has a wrong offset!");

// Function BFGCore.BFG_AISenseAgression.ReportAgressiveEvent
// 0x0038 (0x0038 - 0x0000)
struct BFG_AISenseAgression_ReportAgressiveEvent final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _pAggressiveEventLocation;                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pInstigator;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pVictim;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fMaxRange;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFG_AISenseAgression_ReportAgressiveEvent) == 0x000008, "Wrong alignment on BFG_AISenseAgression_ReportAgressiveEvent");
static_assert(sizeof(BFG_AISenseAgression_ReportAgressiveEvent) == 0x000038, "Wrong size on BFG_AISenseAgression_ReportAgressiveEvent");
static_assert(offsetof(BFG_AISenseAgression_ReportAgressiveEvent, _pWorldContextObject) == 0x000000, "Member 'BFG_AISenseAgression_ReportAgressiveEvent::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFG_AISenseAgression_ReportAgressiveEvent, _pAggressiveEventLocation) == 0x000008, "Member 'BFG_AISenseAgression_ReportAgressiveEvent::_pAggressiveEventLocation' has a wrong offset!");
static_assert(offsetof(BFG_AISenseAgression_ReportAgressiveEvent, _pInstigator) == 0x000018, "Member 'BFG_AISenseAgression_ReportAgressiveEvent::_pInstigator' has a wrong offset!");
static_assert(offsetof(BFG_AISenseAgression_ReportAgressiveEvent, _pVictim) == 0x000020, "Member 'BFG_AISenseAgression_ReportAgressiveEvent::_pVictim' has a wrong offset!");
static_assert(offsetof(BFG_AISenseAgression_ReportAgressiveEvent, Tag) == 0x000028, "Member 'BFG_AISenseAgression_ReportAgressiveEvent::Tag' has a wrong offset!");
static_assert(offsetof(BFG_AISenseAgression_ReportAgressiveEvent, _fMaxRange) == 0x000030, "Member 'BFG_AISenseAgression_ReportAgressiveEvent::_fMaxRange' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.DecrementGameplayEffectTag
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTag final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTag) == 0x000004, "Wrong alignment on BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTag");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTag) == 0x000008, "Wrong size on BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTag");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTag, _rTag) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTag::_rTag' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.DecrementGameplayEffectTags
// 0x0020 (0x0020 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTags final
{
public:
	struct FGameplayTagContainer                  _rTags;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTags) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTags");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTags) == 0x000020, "Wrong size on BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTags");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTags, _rTags) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_DecrementGameplayEffectTags::_rTags' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.GetTagCount
// 0x000C (0x000C - 0x0000)
struct BFGActorComponent_GameplayEffectTags_GetTagCount final
{
public:
	struct FGameplayTag                           _oTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_GetTagCount) == 0x000004, "Wrong alignment on BFGActorComponent_GameplayEffectTags_GetTagCount");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_GetTagCount) == 0x00000C, "Wrong size on BFGActorComponent_GameplayEffectTags_GetTagCount");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_GetTagCount, _oTag) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_GetTagCount::_oTag' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_GetTagCount, ReturnValue) == 0x000008, "Member 'BFGActorComponent_GameplayEffectTags_GetTagCount::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.IncrementGameplayEffectTag
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTag final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTag) == 0x000004, "Wrong alignment on BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTag");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTag) == 0x000008, "Wrong size on BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTag");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTag, _rTag) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTag::_rTag' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.IncrementGameplayEffectTags
// 0x0020 (0x0020 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTags final
{
public:
	struct FGameplayTagContainer                  _rTags;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTags) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTags");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTags) == 0x000020, "Wrong size on BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTags");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTags, _rTags) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTags::_rTags' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.IncrementGameplayEffectTagsTimer
// 0x0028 (0x0028 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTagsTimer final
{
public:
	struct FGameplayEffectTagsTimer               _rTagsTimer;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTagsTimer) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTagsTimer");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTagsTimer) == 0x000028, "Wrong size on BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTagsTimer");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTagsTimer, _rTagsTimer) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_IncrementGameplayEffectTagsTimer::_rTagsTimer' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.IsAffectedByAllTags
// 0x0028 (0x0028 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags final
{
public:
	struct FGameplayTagContainer                  _rTags;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags) == 0x000028, "Wrong size on BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags, _rTags) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags::_rTags' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags, ReturnValue) == 0x000020, "Member 'BFGActorComponent_GameplayEffectTags_IsAffectedByAllTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.IsAffectedByAnyTags
// 0x0028 (0x0028 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags final
{
public:
	struct FGameplayTagContainer                  _rTags;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags) == 0x000028, "Wrong size on BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags, _rTags) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags::_rTags' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags, ReturnValue) == 0x000020, "Member 'BFGActorComponent_GameplayEffectTags_IsAffectedByAnyTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.IsAffectedByTag
// 0x000C (0x000C - 0x0000)
struct BFGActorComponent_GameplayEffectTags_IsAffectedByTag final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_IsAffectedByTag) == 0x000004, "Wrong alignment on BFGActorComponent_GameplayEffectTags_IsAffectedByTag");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_IsAffectedByTag) == 0x00000C, "Wrong size on BFGActorComponent_GameplayEffectTags_IsAffectedByTag");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IsAffectedByTag, _rTag) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_IsAffectedByTag::_rTag' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IsAffectedByTag, ReturnValue) == 0x000008, "Member 'BFGActorComponent_GameplayEffectTags_IsAffectedByTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.RemoveGameplayEffectTag
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTag final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTag) == 0x000004, "Wrong alignment on BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTag");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTag) == 0x000008, "Wrong size on BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTag");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTag, _rTag) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTag::_rTag' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.RemoveGameplayEffectTags
// 0x0020 (0x0020 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTags final
{
public:
	struct FGameplayTagContainer                  _rTags;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTags) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTags");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTags) == 0x000020, "Wrong size on BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTags");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTags, _rTags) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_RemoveGameplayEffectTags::_rTags' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.AffectedTimeLeftForQuery
// 0x0070 (0x0070 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery final
{
public:
	struct FGameplayTagQuery                      _rQuery;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayEffectTagsTimer               ReturnValue;                                       // 0x0048(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery) == 0x000070, "Wrong size on BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery, _rQuery) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery::_rQuery' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery, ReturnValue) == 0x000048, "Member 'BFGActorComponent_GameplayEffectTags_AffectedTimeLeftForQuery::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectTags.IsAffectedByQuery
// 0x0050 (0x0050 - 0x0000)
struct BFGActorComponent_GameplayEffectTags_IsAffectedByQuery final
{
public:
	struct FGameplayTagQuery                      _rQuery;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_GameplayEffectTags_IsAffectedByQuery) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectTags_IsAffectedByQuery");
static_assert(sizeof(BFGActorComponent_GameplayEffectTags_IsAffectedByQuery) == 0x000050, "Wrong size on BFGActorComponent_GameplayEffectTags_IsAffectedByQuery");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IsAffectedByQuery, _rQuery) == 0x000000, "Member 'BFGActorComponent_GameplayEffectTags_IsAffectedByQuery::_rQuery' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_GameplayEffectTags_IsAffectedByQuery, ReturnValue) == 0x000048, "Member 'BFGActorComponent_GameplayEffectTags_IsAffectedByQuery::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputUserWidget.UpdateAxis1
// 0x0004 (0x0004 - 0x0000)
struct BFGInputUserWidget_UpdateAxis1 final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputUserWidget_UpdateAxis1) == 0x000004, "Wrong alignment on BFGInputUserWidget_UpdateAxis1");
static_assert(sizeof(BFGInputUserWidget_UpdateAxis1) == 0x000004, "Wrong size on BFGInputUserWidget_UpdateAxis1");
static_assert(offsetof(BFGInputUserWidget_UpdateAxis1, _fValue) == 0x000000, "Member 'BFGInputUserWidget_UpdateAxis1::_fValue' has a wrong offset!");

// Function BFGCore.BFGInputUserWidget.UpdateAxis2
// 0x0004 (0x0004 - 0x0000)
struct BFGInputUserWidget_UpdateAxis2 final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputUserWidget_UpdateAxis2) == 0x000004, "Wrong alignment on BFGInputUserWidget_UpdateAxis2");
static_assert(sizeof(BFGInputUserWidget_UpdateAxis2) == 0x000004, "Wrong size on BFGInputUserWidget_UpdateAxis2");
static_assert(offsetof(BFGInputUserWidget_UpdateAxis2, _fValue) == 0x000000, "Member 'BFGInputUserWidget_UpdateAxis2::_fValue' has a wrong offset!");

// Function BFGCore.BFGInputUserWidget.UpdateAxis3
// 0x0004 (0x0004 - 0x0000)
struct BFGInputUserWidget_UpdateAxis3 final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputUserWidget_UpdateAxis3) == 0x000004, "Wrong alignment on BFGInputUserWidget_UpdateAxis3");
static_assert(sizeof(BFGInputUserWidget_UpdateAxis3) == 0x000004, "Wrong size on BFGInputUserWidget_UpdateAxis3");
static_assert(offsetof(BFGInputUserWidget_UpdateAxis3, _fValue) == 0x000000, "Member 'BFGInputUserWidget_UpdateAxis3::_fValue' has a wrong offset!");

// Function BFGCore.BFGInputUserWidget.UpdateAxis4
// 0x0004 (0x0004 - 0x0000)
struct BFGInputUserWidget_UpdateAxis4 final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputUserWidget_UpdateAxis4) == 0x000004, "Wrong alignment on BFGInputUserWidget_UpdateAxis4");
static_assert(sizeof(BFGInputUserWidget_UpdateAxis4) == 0x000004, "Wrong size on BFGInputUserWidget_UpdateAxis4");
static_assert(offsetof(BFGInputUserWidget_UpdateAxis4, _fValue) == 0x000000, "Member 'BFGInputUserWidget_UpdateAxis4::_fValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_MenuBase.Action__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_MenuBase_Action__DelegateSignature final
{
public:
	class UBFGWidget_MenuBase*                    _pMenu;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MenuBase_Action__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_MenuBase_Action__DelegateSignature");
static_assert(sizeof(BFGWidget_MenuBase_Action__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_MenuBase_Action__DelegateSignature");
static_assert(offsetof(BFGWidget_MenuBase_Action__DelegateSignature, _pMenu) == 0x000000, "Member 'BFGWidget_MenuBase_Action__DelegateSignature::_pMenu' has a wrong offset!");

// Function BFGCore.BFGWidget_MenuBase.OnInputDeviceChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MenuBase_OnInputDeviceChanged final
{
public:
	bool                                          _bIsGamepad;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MenuBase_OnInputDeviceChanged) == 0x000001, "Wrong alignment on BFGWidget_MenuBase_OnInputDeviceChanged");
static_assert(sizeof(BFGWidget_MenuBase_OnInputDeviceChanged) == 0x000001, "Wrong size on BFGWidget_MenuBase_OnInputDeviceChanged");
static_assert(offsetof(BFGWidget_MenuBase_OnInputDeviceChanged, _bIsGamepad) == 0x000000, "Member 'BFGWidget_MenuBase_OnInputDeviceChanged::_bIsGamepad' has a wrong offset!");

// Function BFGCore.BFGWidget_MenuBase.ComputeFadingSpeed
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_MenuBase_ComputeFadingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MenuBase_ComputeFadingSpeed) == 0x000004, "Wrong alignment on BFGWidget_MenuBase_ComputeFadingSpeed");
static_assert(sizeof(BFGWidget_MenuBase_ComputeFadingSpeed) == 0x000004, "Wrong size on BFGWidget_MenuBase_ComputeFadingSpeed");
static_assert(offsetof(BFGWidget_MenuBase_ComputeFadingSpeed, ReturnValue) == 0x000000, "Member 'BFGWidget_MenuBase_ComputeFadingSpeed::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_GenericDialog.ActionIndex__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_GenericDialog_ActionIndex__DelegateSignature final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_ActionIndex__DelegateSignature) == 0x000004, "Wrong alignment on BFGWidget_GenericDialog_ActionIndex__DelegateSignature");
static_assert(sizeof(BFGWidget_GenericDialog_ActionIndex__DelegateSignature) == 0x000004, "Wrong size on BFGWidget_GenericDialog_ActionIndex__DelegateSignature");
static_assert(offsetof(BFGWidget_GenericDialog_ActionIndex__DelegateSignature, _iIndex) == 0x000000, "Member 'BFGWidget_GenericDialog_ActionIndex__DelegateSignature::_iIndex' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_GenericDialog.ActionName__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_ActionName__DelegateSignature final
{
public:
	class FName                                   _oName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_ActionName__DelegateSignature) == 0x000004, "Wrong alignment on BFGWidget_GenericDialog_ActionName__DelegateSignature");
static_assert(sizeof(BFGWidget_GenericDialog_ActionName__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_GenericDialog_ActionName__DelegateSignature");
static_assert(offsetof(BFGWidget_GenericDialog_ActionName__DelegateSignature, _oName) == 0x000000, "Member 'BFGWidget_GenericDialog_ActionName__DelegateSignature::_oName' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.DisableOption
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_GenericDialog_DisableOption final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDisabled;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_GenericDialog_DisableOption) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_DisableOption");
static_assert(sizeof(BFGWidget_GenericDialog_DisableOption) == 0x000010, "Wrong size on BFGWidget_GenericDialog_DisableOption");
static_assert(offsetof(BFGWidget_GenericDialog_DisableOption, _pOption) == 0x000000, "Member 'BFGWidget_GenericDialog_DisableOption::_pOption' has a wrong offset!");
static_assert(offsetof(BFGWidget_GenericDialog_DisableOption, _bDisabled) == 0x000008, "Member 'BFGWidget_GenericDialog_DisableOption::_bDisabled' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.GetAcceptButton
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_GetAcceptButton final
{
public:
	class UBFGWidget_DialogOption*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_GetAcceptButton) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_GetAcceptButton");
static_assert(sizeof(BFGWidget_GenericDialog_GetAcceptButton) == 0x000008, "Wrong size on BFGWidget_GenericDialog_GetAcceptButton");
static_assert(offsetof(BFGWidget_GenericDialog_GetAcceptButton, ReturnValue) == 0x000000, "Member 'BFGWidget_GenericDialog_GetAcceptButton::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.GetBackButton
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_GetBackButton final
{
public:
	class UBFGWidget_DialogOption*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_GetBackButton) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_GetBackButton");
static_assert(sizeof(BFGWidget_GenericDialog_GetBackButton) == 0x000008, "Wrong size on BFGWidget_GenericDialog_GetBackButton");
static_assert(offsetof(BFGWidget_GenericDialog_GetBackButton, ReturnValue) == 0x000000, "Member 'BFGWidget_GenericDialog_GetBackButton::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.GetOption1Button
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_GetOption1Button final
{
public:
	class UBFGWidget_DialogOption*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_GetOption1Button) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_GetOption1Button");
static_assert(sizeof(BFGWidget_GenericDialog_GetOption1Button) == 0x000008, "Wrong size on BFGWidget_GenericDialog_GetOption1Button");
static_assert(offsetof(BFGWidget_GenericDialog_GetOption1Button, ReturnValue) == 0x000000, "Member 'BFGWidget_GenericDialog_GetOption1Button::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.OnOptionHover
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_OnOptionHover final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_OnOptionHover) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_OnOptionHover");
static_assert(sizeof(BFGWidget_GenericDialog_OnOptionHover) == 0x000008, "Wrong size on BFGWidget_GenericDialog_OnOptionHover");
static_assert(offsetof(BFGWidget_GenericDialog_OnOptionHover, _pOption) == 0x000000, "Member 'BFGWidget_GenericDialog_OnOptionHover::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.OnOptionPressed
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_OnOptionPressed final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_OnOptionPressed) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_OnOptionPressed");
static_assert(sizeof(BFGWidget_GenericDialog_OnOptionPressed) == 0x000008, "Wrong size on BFGWidget_GenericDialog_OnOptionPressed");
static_assert(offsetof(BFGWidget_GenericDialog_OnOptionPressed, _pOption) == 0x000000, "Member 'BFGWidget_GenericDialog_OnOptionPressed::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.OnOptionReleased
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_OnOptionReleased final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_OnOptionReleased) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_OnOptionReleased");
static_assert(sizeof(BFGWidget_GenericDialog_OnOptionReleased) == 0x000008, "Wrong size on BFGWidget_GenericDialog_OnOptionReleased");
static_assert(offsetof(BFGWidget_GenericDialog_OnOptionReleased, _pOption) == 0x000000, "Member 'BFGWidget_GenericDialog_OnOptionReleased::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.OnOptionUnhover
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_OnOptionUnhover final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_OnOptionUnhover) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_OnOptionUnhover");
static_assert(sizeof(BFGWidget_GenericDialog_OnOptionUnhover) == 0x000008, "Wrong size on BFGWidget_GenericDialog_OnOptionUnhover");
static_assert(offsetof(BFGWidget_GenericDialog_OnOptionUnhover, _pOption) == 0x000000, "Member 'BFGWidget_GenericDialog_OnOptionUnhover::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.RegisterOption
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_GenericDialog_RegisterOption final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _targetHandlerName;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_RegisterOption) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_RegisterOption");
static_assert(sizeof(BFGWidget_GenericDialog_RegisterOption) == 0x000010, "Wrong size on BFGWidget_GenericDialog_RegisterOption");
static_assert(offsetof(BFGWidget_GenericDialog_RegisterOption, _pOption) == 0x000000, "Member 'BFGWidget_GenericDialog_RegisterOption::_pOption' has a wrong offset!");
static_assert(offsetof(BFGWidget_GenericDialog_RegisterOption, _targetHandlerName) == 0x000008, "Member 'BFGWidget_GenericDialog_RegisterOption::_targetHandlerName' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.RemoveOption
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_GenericDialog_RemoveOption final
{
public:
	int32                                         _iIndexOption;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_RemoveOption) == 0x000004, "Wrong alignment on BFGWidget_GenericDialog_RemoveOption");
static_assert(sizeof(BFGWidget_GenericDialog_RemoveOption) == 0x000004, "Wrong size on BFGWidget_GenericDialog_RemoveOption");
static_assert(offsetof(BFGWidget_GenericDialog_RemoveOption, _iIndexOption) == 0x000000, "Member 'BFGWidget_GenericDialog_RemoveOption::_iIndexOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.SelectOption
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_SelectOption final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_SelectOption) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_SelectOption");
static_assert(sizeof(BFGWidget_GenericDialog_SelectOption) == 0x000008, "Wrong size on BFGWidget_GenericDialog_SelectOption");
static_assert(offsetof(BFGWidget_GenericDialog_SelectOption, _pOption) == 0x000000, "Member 'BFGWidget_GenericDialog_SelectOption::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.GetNumOptions
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_GenericDialog_GetNumOptions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_GetNumOptions) == 0x000004, "Wrong alignment on BFGWidget_GenericDialog_GetNumOptions");
static_assert(sizeof(BFGWidget_GenericDialog_GetNumOptions) == 0x000004, "Wrong size on BFGWidget_GenericDialog_GetNumOptions");
static_assert(offsetof(BFGWidget_GenericDialog_GetNumOptions, ReturnValue) == 0x000000, "Member 'BFGWidget_GenericDialog_GetNumOptions::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.GetOptionAtIndex
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_GenericDialog_GetOptionAtIndex final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGWidget_DialogOption*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_GetOptionAtIndex) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_GetOptionAtIndex");
static_assert(sizeof(BFGWidget_GenericDialog_GetOptionAtIndex) == 0x000010, "Wrong size on BFGWidget_GenericDialog_GetOptionAtIndex");
static_assert(offsetof(BFGWidget_GenericDialog_GetOptionAtIndex, _iIndex) == 0x000000, "Member 'BFGWidget_GenericDialog_GetOptionAtIndex::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGWidget_GenericDialog_GetOptionAtIndex, ReturnValue) == 0x000008, "Member 'BFGWidget_GenericDialog_GetOptionAtIndex::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.GetOptionByHandlerName
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_GenericDialog_GetOptionByHandlerName final
{
public:
	class FName                                   _oHandlerName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGWidget_DialogOption*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_GetOptionByHandlerName) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_GetOptionByHandlerName");
static_assert(sizeof(BFGWidget_GenericDialog_GetOptionByHandlerName) == 0x000010, "Wrong size on BFGWidget_GenericDialog_GetOptionByHandlerName");
static_assert(offsetof(BFGWidget_GenericDialog_GetOptionByHandlerName, _oHandlerName) == 0x000000, "Member 'BFGWidget_GenericDialog_GetOptionByHandlerName::_oHandlerName' has a wrong offset!");
static_assert(offsetof(BFGWidget_GenericDialog_GetOptionByHandlerName, ReturnValue) == 0x000008, "Member 'BFGWidget_GenericDialog_GetOptionByHandlerName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericDialog.GetSelectedOption
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericDialog_GetSelectedOption final
{
public:
	class UBFGWidget_DialogOption*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericDialog_GetSelectedOption) == 0x000008, "Wrong alignment on BFGWidget_GenericDialog_GetSelectedOption");
static_assert(sizeof(BFGWidget_GenericDialog_GetSelectedOption) == 0x000008, "Wrong size on BFGWidget_GenericDialog_GetSelectedOption");
static_assert(offsetof(BFGWidget_GenericDialog_GetSelectedOption, ReturnValue) == 0x000000, "Member 'BFGWidget_GenericDialog_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialHandbook.EnsureChapter
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_TutorialHandbook_EnsureChapter final
{
public:
	class UBFGDataAsset_TutorialChapter*          _pDataAssetChapter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGWidget_TutorialHandbookChapter*     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialHandbook_EnsureChapter) == 0x000008, "Wrong alignment on BFGWidget_TutorialHandbook_EnsureChapter");
static_assert(sizeof(BFGWidget_TutorialHandbook_EnsureChapter) == 0x000010, "Wrong size on BFGWidget_TutorialHandbook_EnsureChapter");
static_assert(offsetof(BFGWidget_TutorialHandbook_EnsureChapter, _pDataAssetChapter) == 0x000000, "Member 'BFGWidget_TutorialHandbook_EnsureChapter::_pDataAssetChapter' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialHandbook_EnsureChapter, ReturnValue) == 0x000008, "Member 'BFGWidget_TutorialHandbook_EnsureChapter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialHandbook.SetHandbookEntry
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_TutorialHandbook_SetHandbookEntry final
{
public:
	class FName                                   _targetHandlerName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGWidget_DialogOption*                POptions;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDataAsset_TutorialPage*             _pDataAssetPage;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDataAsset_TutorialChapter*          _pDataAssetChapter;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialHandbook_SetHandbookEntry) == 0x000008, "Wrong alignment on BFGWidget_TutorialHandbook_SetHandbookEntry");
static_assert(sizeof(BFGWidget_TutorialHandbook_SetHandbookEntry) == 0x000020, "Wrong size on BFGWidget_TutorialHandbook_SetHandbookEntry");
static_assert(offsetof(BFGWidget_TutorialHandbook_SetHandbookEntry, _targetHandlerName) == 0x000000, "Member 'BFGWidget_TutorialHandbook_SetHandbookEntry::_targetHandlerName' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialHandbook_SetHandbookEntry, POptions) == 0x000008, "Member 'BFGWidget_TutorialHandbook_SetHandbookEntry::POptions' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialHandbook_SetHandbookEntry, _pDataAssetPage) == 0x000010, "Member 'BFGWidget_TutorialHandbook_SetHandbookEntry::_pDataAssetPage' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialHandbook_SetHandbookEntry, _pDataAssetChapter) == 0x000018, "Member 'BFGWidget_TutorialHandbook_SetHandbookEntry::_pDataAssetChapter' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialHandbook.GetPoolManager
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialHandbook_GetPoolManager final
{
public:
	class UBFGWidgetPoolManager*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialHandbook_GetPoolManager) == 0x000008, "Wrong alignment on BFGWidget_TutorialHandbook_GetPoolManager");
static_assert(sizeof(BFGWidget_TutorialHandbook_GetPoolManager) == 0x000008, "Wrong size on BFGWidget_TutorialHandbook_GetPoolManager");
static_assert(offsetof(BFGWidget_TutorialHandbook_GetPoolManager, ReturnValue) == 0x000000, "Member 'BFGWidget_TutorialHandbook_GetPoolManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacter.GetMainMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacter_GetMainMeshComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacter_GetMainMeshComponent) == 0x000008, "Wrong alignment on BFGNPCCharacter_GetMainMeshComponent");
static_assert(sizeof(BFGNPCCharacter_GetMainMeshComponent) == 0x000008, "Wrong size on BFGNPCCharacter_GetMainMeshComponent");
static_assert(offsetof(BFGNPCCharacter_GetMainMeshComponent, ReturnValue) == 0x000000, "Member 'BFGNPCCharacter_GetMainMeshComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacter.TriggerVO
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacter_TriggerVO final
{
public:
	class FName                                   _event;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacter_TriggerVO) == 0x000004, "Wrong alignment on BFGNPCCharacter_TriggerVO");
static_assert(sizeof(BFGNPCCharacter_TriggerVO) == 0x000008, "Wrong size on BFGNPCCharacter_TriggerVO");
static_assert(offsetof(BFGNPCCharacter_TriggerVO, _event) == 0x000000, "Member 'BFGNPCCharacter_TriggerVO::_event' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericMenuTree.AddOptionToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericMenuTree_AddOptionToLayout final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericMenuTree_AddOptionToLayout) == 0x000008, "Wrong alignment on BFGWidget_GenericMenuTree_AddOptionToLayout");
static_assert(sizeof(BFGWidget_GenericMenuTree_AddOptionToLayout) == 0x000008, "Wrong size on BFGWidget_GenericMenuTree_AddOptionToLayout");
static_assert(offsetof(BFGWidget_GenericMenuTree_AddOptionToLayout, _pOption) == 0x000000, "Member 'BFGWidget_GenericMenuTree_AddOptionToLayout::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericMenuTree.AddWidgetToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericMenuTree_AddWidgetToLayout final
{
public:
	class UBFGWidget_GenericMenuTree*             _pWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericMenuTree_AddWidgetToLayout) == 0x000008, "Wrong alignment on BFGWidget_GenericMenuTree_AddWidgetToLayout");
static_assert(sizeof(BFGWidget_GenericMenuTree_AddWidgetToLayout) == 0x000008, "Wrong size on BFGWidget_GenericMenuTree_AddWidgetToLayout");
static_assert(offsetof(BFGWidget_GenericMenuTree_AddWidgetToLayout, _pWidget) == 0x000000, "Member 'BFGWidget_GenericMenuTree_AddWidgetToLayout::_pWidget' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericMenuTree.HideSelf
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_GenericMenuTree_HideSelf final
{
public:
	bool                                          _bDown;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericMenuTree_HideSelf) == 0x000001, "Wrong alignment on BFGWidget_GenericMenuTree_HideSelf");
static_assert(sizeof(BFGWidget_GenericMenuTree_HideSelf) == 0x000001, "Wrong size on BFGWidget_GenericMenuTree_HideSelf");
static_assert(offsetof(BFGWidget_GenericMenuTree_HideSelf, _bDown) == 0x000000, "Member 'BFGWidget_GenericMenuTree_HideSelf::_bDown' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericMenuTree.OnChildNotificationSeen
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericMenuTree_OnChildNotificationSeen final
{
public:
	class FName                                   _oHandlerName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericMenuTree_OnChildNotificationSeen) == 0x000004, "Wrong alignment on BFGWidget_GenericMenuTree_OnChildNotificationSeen");
static_assert(sizeof(BFGWidget_GenericMenuTree_OnChildNotificationSeen) == 0x000008, "Wrong size on BFGWidget_GenericMenuTree_OnChildNotificationSeen");
static_assert(offsetof(BFGWidget_GenericMenuTree_OnChildNotificationSeen, _oHandlerName) == 0x000000, "Member 'BFGWidget_GenericMenuTree_OnChildNotificationSeen::_oHandlerName' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericMenuTree.OnDialogOption
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_GenericMenuTree_OnDialogOption final
{
public:
	int32                                         IIndex;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericMenuTree_OnDialogOption) == 0x000004, "Wrong alignment on BFGWidget_GenericMenuTree_OnDialogOption");
static_assert(sizeof(BFGWidget_GenericMenuTree_OnDialogOption) == 0x000004, "Wrong size on BFGWidget_GenericMenuTree_OnDialogOption");
static_assert(offsetof(BFGWidget_GenericMenuTree_OnDialogOption, IIndex) == 0x000000, "Member 'BFGWidget_GenericMenuTree_OnDialogOption::IIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericMenuTree.ShowSelf
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_GenericMenuTree_ShowSelf final
{
public:
	bool                                          _bDown;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericMenuTree_ShowSelf) == 0x000001, "Wrong alignment on BFGWidget_GenericMenuTree_ShowSelf");
static_assert(sizeof(BFGWidget_GenericMenuTree_ShowSelf) == 0x000001, "Wrong size on BFGWidget_GenericMenuTree_ShowSelf");
static_assert(offsetof(BFGWidget_GenericMenuTree_ShowSelf, _bDown) == 0x000000, "Member 'BFGWidget_GenericMenuTree_ShowSelf::_bDown' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericMenuTree.GetInternalName
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GenericMenuTree_GetInternalName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericMenuTree_GetInternalName) == 0x000004, "Wrong alignment on BFGWidget_GenericMenuTree_GetInternalName");
static_assert(sizeof(BFGWidget_GenericMenuTree_GetInternalName) == 0x000008, "Wrong size on BFGWidget_GenericMenuTree_GetInternalName");
static_assert(offsetof(BFGWidget_GenericMenuTree_GetInternalName, ReturnValue) == 0x000000, "Member 'BFGWidget_GenericMenuTree_GetInternalName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericMenuTree.GetNiceName
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_GenericMenuTree_GetNiceName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericMenuTree_GetNiceName) == 0x000008, "Wrong alignment on BFGWidget_GenericMenuTree_GetNiceName");
static_assert(sizeof(BFGWidget_GenericMenuTree_GetNiceName) == 0x000018, "Wrong size on BFGWidget_GenericMenuTree_GetNiceName");
static_assert(offsetof(BFGWidget_GenericMenuTree_GetNiceName, ReturnValue) == 0x000000, "Member 'BFGWidget_GenericMenuTree_GetNiceName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_SubMenu.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Archive_SubMenu_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_SubMenu_GetDescription) == 0x000008, "Wrong alignment on BFGWidget_Archive_SubMenu_GetDescription");
static_assert(sizeof(BFGWidget_Archive_SubMenu_GetDescription) == 0x000018, "Wrong size on BFGWidget_Archive_SubMenu_GetDescription");
static_assert(offsetof(BFGWidget_Archive_SubMenu_GetDescription, ReturnValue) == 0x000000, "Member 'BFGWidget_Archive_SubMenu_GetDescription::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_SubMenu.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Archive_SubMenu_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_SubMenu_GetTitle) == 0x000008, "Wrong alignment on BFGWidget_Archive_SubMenu_GetTitle");
static_assert(sizeof(BFGWidget_Archive_SubMenu_GetTitle) == 0x000018, "Wrong size on BFGWidget_Archive_SubMenu_GetTitle");
static_assert(offsetof(BFGWidget_Archive_SubMenu_GetTitle, ReturnValue) == 0x000000, "Member 'BFGWidget_Archive_SubMenu_GetTitle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_SubMenu.GetTopic
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Archive_SubMenu_GetTopic final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_SubMenu_GetTopic) == 0x000008, "Wrong alignment on BFGWidget_Archive_SubMenu_GetTopic");
static_assert(sizeof(BFGWidget_Archive_SubMenu_GetTopic) == 0x000018, "Wrong size on BFGWidget_Archive_SubMenu_GetTopic");
static_assert(offsetof(BFGWidget_Archive_SubMenu_GetTopic, ReturnValue) == 0x000000, "Member 'BFGWidget_Archive_SubMenu_GetTopic::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_Furonigami.GetSpinningWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_Furonigami_GetSpinningWidget final
{
public:
	class UBFGSpinningWidget*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_Furonigami_GetSpinningWidget) == 0x000008, "Wrong alignment on BFGWidget_Archive_Furonigami_GetSpinningWidget");
static_assert(sizeof(BFGWidget_Archive_Furonigami_GetSpinningWidget) == 0x000008, "Wrong size on BFGWidget_Archive_Furonigami_GetSpinningWidget");
static_assert(offsetof(BFGWidget_Archive_Furonigami_GetSpinningWidget, ReturnValue) == 0x000000, "Member 'BFGWidget_Archive_Furonigami_GetSpinningWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_Furonigami.HasSpinningWidget
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Archive_Furonigami_HasSpinningWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_Furonigami_HasSpinningWidget) == 0x000001, "Wrong alignment on BFGWidget_Archive_Furonigami_HasSpinningWidget");
static_assert(sizeof(BFGWidget_Archive_Furonigami_HasSpinningWidget) == 0x000001, "Wrong size on BFGWidget_Archive_Furonigami_HasSpinningWidget");
static_assert(offsetof(BFGWidget_Archive_Furonigami_HasSpinningWidget, ReturnValue) == 0x000000, "Member 'BFGWidget_Archive_Furonigami_HasSpinningWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_Furonigami.OnMediaPlaybackFinished
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Archive_Furonigami_OnMediaPlaybackFinished final
{
public:
	EBFGDialogMessage                             _eMessage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_Furonigami_OnMediaPlaybackFinished) == 0x000001, "Wrong alignment on BFGWidget_Archive_Furonigami_OnMediaPlaybackFinished");
static_assert(sizeof(BFGWidget_Archive_Furonigami_OnMediaPlaybackFinished) == 0x000001, "Wrong size on BFGWidget_Archive_Furonigami_OnMediaPlaybackFinished");
static_assert(offsetof(BFGWidget_Archive_Furonigami_OnMediaPlaybackFinished, _eMessage) == 0x000000, "Member 'BFGWidget_Archive_Furonigami_OnMediaPlaybackFinished::_eMessage' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_Furonigami.OnMediaWidgetOpened
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_Furonigami_OnMediaWidgetOpened final
{
public:
	class UBFGWidget_GenericDialog*               _pDialog;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_Furonigami_OnMediaWidgetOpened) == 0x000008, "Wrong alignment on BFGWidget_Archive_Furonigami_OnMediaWidgetOpened");
static_assert(sizeof(BFGWidget_Archive_Furonigami_OnMediaWidgetOpened) == 0x000008, "Wrong size on BFGWidget_Archive_Furonigami_OnMediaWidgetOpened");
static_assert(offsetof(BFGWidget_Archive_Furonigami_OnMediaWidgetOpened, _pDialog) == 0x000000, "Member 'BFGWidget_Archive_Furonigami_OnMediaWidgetOpened::_pDialog' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_Furonigami.OnSpinningWidgetIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Archive_Furonigami_OnSpinningWidgetIndexChanged final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_Furonigami_OnSpinningWidgetIndexChanged) == 0x000004, "Wrong alignment on BFGWidget_Archive_Furonigami_OnSpinningWidgetIndexChanged");
static_assert(sizeof(BFGWidget_Archive_Furonigami_OnSpinningWidgetIndexChanged) == 0x000004, "Wrong size on BFGWidget_Archive_Furonigami_OnSpinningWidgetIndexChanged");
static_assert(offsetof(BFGWidget_Archive_Furonigami_OnSpinningWidgetIndexChanged, _iIndex) == 0x000000, "Member 'BFGWidget_Archive_Furonigami_OnSpinningWidgetIndexChanged::_iIndex' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.ChangePhysicsAsset
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterGameplay_ChangePhysicsAsset final
{
public:
	class UPhysicsAsset*                          _pNewPhysicsAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAttemptToKeepRagdollTransform;                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNPCCharacterGameplay_ChangePhysicsAsset) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_ChangePhysicsAsset");
static_assert(sizeof(BFGNPCCharacterGameplay_ChangePhysicsAsset) == 0x000010, "Wrong size on BFGNPCCharacterGameplay_ChangePhysicsAsset");
static_assert(offsetof(BFGNPCCharacterGameplay_ChangePhysicsAsset, _pNewPhysicsAsset) == 0x000000, "Member 'BFGNPCCharacterGameplay_ChangePhysicsAsset::_pNewPhysicsAsset' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterGameplay_ChangePhysicsAsset, _bAttemptToKeepRagdollTransform) == 0x000008, "Member 'BFGNPCCharacterGameplay_ChangePhysicsAsset::_bAttemptToKeepRagdollTransform' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.FreezeMeshShowSkeleton
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_FreezeMeshShowSkeleton final
{
public:
	bool                                          M_bHideMesh;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_FreezeMeshShowSkeleton) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_FreezeMeshShowSkeleton");
static_assert(sizeof(BFGNPCCharacterGameplay_FreezeMeshShowSkeleton) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_FreezeMeshShowSkeleton");
static_assert(offsetof(BFGNPCCharacterGameplay_FreezeMeshShowSkeleton, M_bHideMesh) == 0x000000, "Member 'BFGNPCCharacterGameplay_FreezeMeshShowSkeleton::M_bHideMesh' has a wrong offset!");

// DelegateFunction BFGCore.BFGNPCCharacterGameplay.GameplayCharacterOnPickupSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterGameplay_GameplayCharacterOnPickupSignature__DelegateSignature final
{
public:
	class AActor*                                 _pSourceActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GameplayCharacterOnPickupSignature__DelegateSignature) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_GameplayCharacterOnPickupSignature__DelegateSignature");
static_assert(sizeof(BFGNPCCharacterGameplay_GameplayCharacterOnPickupSignature__DelegateSignature) == 0x000008, "Wrong size on BFGNPCCharacterGameplay_GameplayCharacterOnPickupSignature__DelegateSignature");
static_assert(offsetof(BFGNPCCharacterGameplay_GameplayCharacterOnPickupSignature__DelegateSignature, _pSourceActor) == 0x000000, "Member 'BFGNPCCharacterGameplay_GameplayCharacterOnPickupSignature__DelegateSignature::_pSourceActor' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetCustomMovementVelocity
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterGameplay_GetCustomMovementVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetCustomMovementVelocity) == 0x000004, "Wrong alignment on BFGNPCCharacterGameplay_GetCustomMovementVelocity");
static_assert(sizeof(BFGNPCCharacterGameplay_GetCustomMovementVelocity) == 0x00000C, "Wrong size on BFGNPCCharacterGameplay_GetCustomMovementVelocity");
static_assert(offsetof(BFGNPCCharacterGameplay_GetCustomMovementVelocity, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetCustomMovementVelocity::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetStandupAnimationDuration
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterGameplay_GetStandupAnimationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetStandupAnimationDuration) == 0x000004, "Wrong alignment on BFGNPCCharacterGameplay_GetStandupAnimationDuration");
static_assert(sizeof(BFGNPCCharacterGameplay_GetStandupAnimationDuration) == 0x000004, "Wrong size on BFGNPCCharacterGameplay_GetStandupAnimationDuration");
static_assert(offsetof(BFGNPCCharacterGameplay_GetStandupAnimationDuration, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetStandupAnimationDuration::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetStandupProgress
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterGameplay_GetStandupProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetStandupProgress) == 0x000004, "Wrong alignment on BFGNPCCharacterGameplay_GetStandupProgress");
static_assert(sizeof(BFGNPCCharacterGameplay_GetStandupProgress) == 0x000004, "Wrong size on BFGNPCCharacterGameplay_GetStandupProgress");
static_assert(offsetof(BFGNPCCharacterGameplay_GetStandupProgress, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetStandupProgress::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.OnDeathStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterGameplay_OnDeathStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_OnDeathStatChanged) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_OnDeathStatChanged");
static_assert(sizeof(BFGNPCCharacterGameplay_OnDeathStatChanged) == 0x000010, "Wrong size on BFGNPCCharacterGameplay_OnDeathStatChanged");
static_assert(offsetof(BFGNPCCharacterGameplay_OnDeathStatChanged, _pActor) == 0x000000, "Member 'BFGNPCCharacterGameplay_OnDeathStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterGameplay_OnDeathStatChanged, _pStat) == 0x000008, "Member 'BFGNPCCharacterGameplay_OnDeathStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.OnReadyToStandUp
// 0x0040 (0x0040 - 0x0000)
struct BFGNPCCharacterGameplay_OnReadyToStandUp final
{
public:
	bool                                          _bIsFaceDown;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSnapshot                          _oAnimationSnapshot;                               // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_OnReadyToStandUp) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_OnReadyToStandUp");
static_assert(sizeof(BFGNPCCharacterGameplay_OnReadyToStandUp) == 0x000040, "Wrong size on BFGNPCCharacterGameplay_OnReadyToStandUp");
static_assert(offsetof(BFGNPCCharacterGameplay_OnReadyToStandUp, _bIsFaceDown) == 0x000000, "Member 'BFGNPCCharacterGameplay_OnReadyToStandUp::_bIsFaceDown' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterGameplay_OnReadyToStandUp, _oAnimationSnapshot) == 0x000008, "Member 'BFGNPCCharacterGameplay_OnReadyToStandUp::_oAnimationSnapshot' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.OnWeaponEquipChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterGameplay_OnWeaponEquipChanged final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNPCCharacterGameplay_OnWeaponEquipChanged) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_OnWeaponEquipChanged");
static_assert(sizeof(BFGNPCCharacterGameplay_OnWeaponEquipChanged) == 0x000010, "Wrong size on BFGNPCCharacterGameplay_OnWeaponEquipChanged");
static_assert(offsetof(BFGNPCCharacterGameplay_OnWeaponEquipChanged, _pWeapon) == 0x000000, "Member 'BFGNPCCharacterGameplay_OnWeaponEquipChanged::_pWeapon' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterGameplay_OnWeaponEquipChanged, _bEnabled) == 0x000008, "Member 'BFGNPCCharacterGameplay_OnWeaponEquipChanged::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.OnWeaponFireChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterGameplay_OnWeaponFireChanged final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNPCCharacterGameplay_OnWeaponFireChanged) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_OnWeaponFireChanged");
static_assert(sizeof(BFGNPCCharacterGameplay_OnWeaponFireChanged) == 0x000010, "Wrong size on BFGNPCCharacterGameplay_OnWeaponFireChanged");
static_assert(offsetof(BFGNPCCharacterGameplay_OnWeaponFireChanged, _pWeapon) == 0x000000, "Member 'BFGNPCCharacterGameplay_OnWeaponFireChanged::_pWeapon' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterGameplay_OnWeaponFireChanged, _bEnabled) == 0x000008, "Member 'BFGNPCCharacterGameplay_OnWeaponFireChanged::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.OnWeaponReloadDone
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterGameplay_OnWeaponReloadDone final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_OnWeaponReloadDone) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_OnWeaponReloadDone");
static_assert(sizeof(BFGNPCCharacterGameplay_OnWeaponReloadDone) == 0x000008, "Wrong size on BFGNPCCharacterGameplay_OnWeaponReloadDone");
static_assert(offsetof(BFGNPCCharacterGameplay_OnWeaponReloadDone, _pWeapon) == 0x000000, "Member 'BFGNPCCharacterGameplay_OnWeaponReloadDone::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.OnWeaponReloadStarted
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterGameplay_OnWeaponReloadStarted final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_OnWeaponReloadStarted) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_OnWeaponReloadStarted");
static_assert(sizeof(BFGNPCCharacterGameplay_OnWeaponReloadStarted) == 0x000008, "Wrong size on BFGNPCCharacterGameplay_OnWeaponReloadStarted");
static_assert(offsetof(BFGNPCCharacterGameplay_OnWeaponReloadStarted, _pWeapon) == 0x000000, "Member 'BFGNPCCharacterGameplay_OnWeaponReloadStarted::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.SetCuriosityReason
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_SetCuriosityReason final
{
public:
	EBFGCuriosityReason_NPC                       _curiosityReason;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_SetCuriosityReason) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_SetCuriosityReason");
static_assert(sizeof(BFGNPCCharacterGameplay_SetCuriosityReason) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_SetCuriosityReason");
static_assert(offsetof(BFGNPCCharacterGameplay_SetCuriosityReason, _curiosityReason) == 0x000000, "Member 'BFGNPCCharacterGameplay_SetCuriosityReason::_curiosityReason' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.SetCurrentMissionTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterGameplay_SetCurrentMissionTarget final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_SetCurrentMissionTarget) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_SetCurrentMissionTarget");
static_assert(sizeof(BFGNPCCharacterGameplay_SetCurrentMissionTarget) == 0x000008, "Wrong size on BFGNPCCharacterGameplay_SetCurrentMissionTarget");
static_assert(offsetof(BFGNPCCharacterGameplay_SetCurrentMissionTarget, _pActor) == 0x000000, "Member 'BFGNPCCharacterGameplay_SetCurrentMissionTarget::_pActor' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.SetCurrentMissionTargetAction
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_SetCurrentMissionTargetAction final
{
public:
	EBFGMissionTargetAction_NPC                   _eMissionTargetAction;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_SetCurrentMissionTargetAction) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_SetCurrentMissionTargetAction");
static_assert(sizeof(BFGNPCCharacterGameplay_SetCurrentMissionTargetAction) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_SetCurrentMissionTargetAction");
static_assert(offsetof(BFGNPCCharacterGameplay_SetCurrentMissionTargetAction, _eMissionTargetAction) == 0x000000, "Member 'BFGNPCCharacterGameplay_SetCurrentMissionTargetAction::_eMissionTargetAction' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.SetCurrentSusciousTargetAndLocation
// 0x0018 (0x0018 - 0x0000)
struct BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vLocation;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation");
static_assert(sizeof(BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation) == 0x000018, "Wrong size on BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation");
static_assert(offsetof(BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation, _pTarget) == 0x000000, "Member 'BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation, _vLocation) == 0x000008, "Member 'BFGNPCCharacterGameplay_SetCurrentSusciousTargetAndLocation::_vLocation' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.SetCurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterGameplay_SetCurrentTarget final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_SetCurrentTarget) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_SetCurrentTarget");
static_assert(sizeof(BFGNPCCharacterGameplay_SetCurrentTarget) == 0x000008, "Wrong size on BFGNPCCharacterGameplay_SetCurrentTarget");
static_assert(offsetof(BFGNPCCharacterGameplay_SetCurrentTarget, _pTarget) == 0x000000, "Member 'BFGNPCCharacterGameplay_SetCurrentTarget::_pTarget' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.SetForceTargetEvenIfDisguised
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_SetForceTargetEvenIfDisguised final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_SetForceTargetEvenIfDisguised) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_SetForceTargetEvenIfDisguised");
static_assert(sizeof(BFGNPCCharacterGameplay_SetForceTargetEvenIfDisguised) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_SetForceTargetEvenIfDisguised");
static_assert(offsetof(BFGNPCCharacterGameplay_SetForceTargetEvenIfDisguised, _bValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_SetForceTargetEvenIfDisguised::_bValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.SetForceTargetEvenIfNotInPerceptionRange
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_SetForceTargetEvenIfNotInPerceptionRange final
{
public:
	bool                                          _bForceTargetEvenIfNotInPerceptionRange;           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_SetForceTargetEvenIfNotInPerceptionRange) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_SetForceTargetEvenIfNotInPerceptionRange");
static_assert(sizeof(BFGNPCCharacterGameplay_SetForceTargetEvenIfNotInPerceptionRange) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_SetForceTargetEvenIfNotInPerceptionRange");
static_assert(offsetof(BFGNPCCharacterGameplay_SetForceTargetEvenIfNotInPerceptionRange, _bForceTargetEvenIfNotInPerceptionRange) == 0x000000, "Member 'BFGNPCCharacterGameplay_SetForceTargetEvenIfNotInPerceptionRange::_bForceTargetEvenIfNotInPerceptionRange' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetCuriosityReason
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_GetCuriosityReason final
{
public:
	EBFGCuriosityReason_NPC                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetCuriosityReason) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_GetCuriosityReason");
static_assert(sizeof(BFGNPCCharacterGameplay_GetCuriosityReason) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_GetCuriosityReason");
static_assert(offsetof(BFGNPCCharacterGameplay_GetCuriosityReason, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetCuriosityReason::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetCurrentMissionTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterGameplay_GetCurrentMissionTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetCurrentMissionTarget) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_GetCurrentMissionTarget");
static_assert(sizeof(BFGNPCCharacterGameplay_GetCurrentMissionTarget) == 0x000008, "Wrong size on BFGNPCCharacterGameplay_GetCurrentMissionTarget");
static_assert(offsetof(BFGNPCCharacterGameplay_GetCurrentMissionTarget, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetCurrentMissionTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetCurrentMissionTargetAction
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_GetCurrentMissionTargetAction final
{
public:
	EBFGMissionTargetAction_NPC                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetCurrentMissionTargetAction) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_GetCurrentMissionTargetAction");
static_assert(sizeof(BFGNPCCharacterGameplay_GetCurrentMissionTargetAction) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_GetCurrentMissionTargetAction");
static_assert(offsetof(BFGNPCCharacterGameplay_GetCurrentMissionTargetAction, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetCurrentMissionTargetAction::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetCurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterGameplay_GetCurrentTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetCurrentTarget) == 0x000008, "Wrong alignment on BFGNPCCharacterGameplay_GetCurrentTarget");
static_assert(sizeof(BFGNPCCharacterGameplay_GetCurrentTarget) == 0x000008, "Wrong size on BFGNPCCharacterGameplay_GetCurrentTarget");
static_assert(offsetof(BFGNPCCharacterGameplay_GetCurrentTarget, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetCurrentTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetCurrentVectorToSuspiciousLocation
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterGameplay_GetCurrentVectorToSuspiciousLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetCurrentVectorToSuspiciousLocation) == 0x000004, "Wrong alignment on BFGNPCCharacterGameplay_GetCurrentVectorToSuspiciousLocation");
static_assert(sizeof(BFGNPCCharacterGameplay_GetCurrentVectorToSuspiciousLocation) == 0x00000C, "Wrong size on BFGNPCCharacterGameplay_GetCurrentVectorToSuspiciousLocation");
static_assert(offsetof(BFGNPCCharacterGameplay_GetCurrentVectorToSuspiciousLocation, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetCurrentVectorToSuspiciousLocation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetCurrentVectorToTarget
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterGameplay_GetCurrentVectorToTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetCurrentVectorToTarget) == 0x000004, "Wrong alignment on BFGNPCCharacterGameplay_GetCurrentVectorToTarget");
static_assert(sizeof(BFGNPCCharacterGameplay_GetCurrentVectorToTarget) == 0x00000C, "Wrong size on BFGNPCCharacterGameplay_GetCurrentVectorToTarget");
static_assert(offsetof(BFGNPCCharacterGameplay_GetCurrentVectorToTarget, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetCurrentVectorToTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetForceTargetEvenIfDisguised
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_GetForceTargetEvenIfDisguised final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetForceTargetEvenIfDisguised) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_GetForceTargetEvenIfDisguised");
static_assert(sizeof(BFGNPCCharacterGameplay_GetForceTargetEvenIfDisguised) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_GetForceTargetEvenIfDisguised");
static_assert(offsetof(BFGNPCCharacterGameplay_GetForceTargetEvenIfDisguised, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetForceTargetEvenIfDisguised::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.GetForceTargetEvenIfNotInPerceptionRange
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_GetForceTargetEvenIfNotInPerceptionRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_GetForceTargetEvenIfNotInPerceptionRange) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_GetForceTargetEvenIfNotInPerceptionRange");
static_assert(sizeof(BFGNPCCharacterGameplay_GetForceTargetEvenIfNotInPerceptionRange) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_GetForceTargetEvenIfNotInPerceptionRange");
static_assert(offsetof(BFGNPCCharacterGameplay_GetForceTargetEvenIfNotInPerceptionRange, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_GetForceTargetEvenIfNotInPerceptionRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.IsOnFire
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_IsOnFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_IsOnFire) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_IsOnFire");
static_assert(sizeof(BFGNPCCharacterGameplay_IsOnFire) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_IsOnFire");
static_assert(offsetof(BFGNPCCharacterGameplay_IsOnFire, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_IsOnFire::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterGameplay.IsPKed
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterGameplay_IsPKed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterGameplay_IsPKed) == 0x000001, "Wrong alignment on BFGNPCCharacterGameplay_IsPKed");
static_assert(sizeof(BFGNPCCharacterGameplay_IsPKed) == 0x000001, "Wrong size on BFGNPCCharacterGameplay_IsPKed");
static_assert(offsetof(BFGNPCCharacterGameplay_IsPKed, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterGameplay_IsPKed::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_HolobobSuppressionAura.SetupRadarComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_HolobobSuppressionAura_SetupRadarComponent final
{
public:
	class UBFGActorComponent_RadarObject_ExactRadius* _pRadarComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_HolobobSuppressionAura_SetupRadarComponent) == 0x000008, "Wrong alignment on BFGActorComponent_HolobobSuppressionAura_SetupRadarComponent");
static_assert(sizeof(BFGActorComponent_HolobobSuppressionAura_SetupRadarComponent) == 0x000008, "Wrong size on BFGActorComponent_HolobobSuppressionAura_SetupRadarComponent");
static_assert(offsetof(BFGActorComponent_HolobobSuppressionAura_SetupRadarComponent, _pRadarComponent) == 0x000000, "Member 'BFGActorComponent_HolobobSuppressionAura_SetupRadarComponent::_pRadarComponent' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_FadeFinished.OnFadeFinished
// 0x000C (0x000C - 0x0000)
struct BFGEventTrigger_FadeFinished_OnFadeFinished final
{
public:
	class FName                                   _strFadeIdentifier;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFadeOut;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEventTrigger_FadeFinished_OnFadeFinished) == 0x000004, "Wrong alignment on BFGEventTrigger_FadeFinished_OnFadeFinished");
static_assert(sizeof(BFGEventTrigger_FadeFinished_OnFadeFinished) == 0x00000C, "Wrong size on BFGEventTrigger_FadeFinished_OnFadeFinished");
static_assert(offsetof(BFGEventTrigger_FadeFinished_OnFadeFinished, _strFadeIdentifier) == 0x000000, "Member 'BFGEventTrigger_FadeFinished_OnFadeFinished::_strFadeIdentifier' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_FadeFinished_OnFadeFinished, _bFadeOut) == 0x000008, "Member 'BFGEventTrigger_FadeFinished_OnFadeFinished::_bFadeOut' has a wrong offset!");

// DelegateFunction BFGCore.BFGNPCCharacterHuman.ActionBehaviourState__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterHuman_ActionBehaviourState__DelegateSignature final
{
public:
	EBFGBehaviourState_NPC                        _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterHuman_ActionBehaviourState__DelegateSignature) == 0x000001, "Wrong alignment on BFGNPCCharacterHuman_ActionBehaviourState__DelegateSignature");
static_assert(sizeof(BFGNPCCharacterHuman_ActionBehaviourState__DelegateSignature) == 0x000001, "Wrong size on BFGNPCCharacterHuman_ActionBehaviourState__DelegateSignature");
static_assert(offsetof(BFGNPCCharacterHuman_ActionBehaviourState__DelegateSignature, _eState) == 0x000000, "Member 'BFGNPCCharacterHuman_ActionBehaviourState__DelegateSignature::_eState' has a wrong offset!");

// DelegateFunction BFGCore.BFGNPCCharacterHuman.ActionBool__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterHuman_ActionBool__DelegateSignature final
{
public:
	bool                                          _bState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterHuman_ActionBool__DelegateSignature) == 0x000001, "Wrong alignment on BFGNPCCharacterHuman_ActionBool__DelegateSignature");
static_assert(sizeof(BFGNPCCharacterHuman_ActionBool__DelegateSignature) == 0x000001, "Wrong size on BFGNPCCharacterHuman_ActionBool__DelegateSignature");
static_assert(offsetof(BFGNPCCharacterHuman_ActionBool__DelegateSignature, _bState) == 0x000000, "Member 'BFGNPCCharacterHuman_ActionBool__DelegateSignature::_bState' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterHuman.OnAIStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterHuman_OnAIStateChanged final
{
public:
	EBFGBehaviourState_NPC                        _newState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterHuman_OnAIStateChanged) == 0x000001, "Wrong alignment on BFGNPCCharacterHuman_OnAIStateChanged");
static_assert(sizeof(BFGNPCCharacterHuman_OnAIStateChanged) == 0x000001, "Wrong size on BFGNPCCharacterHuman_OnAIStateChanged");
static_assert(offsetof(BFGNPCCharacterHuman_OnAIStateChanged, _newState) == 0x000000, "Member 'BFGNPCCharacterHuman_OnAIStateChanged::_newState' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterHuman.OnDeadStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterHuman_OnDeadStateChanged final
{
public:
	bool                                          _bNewState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterHuman_OnDeadStateChanged) == 0x000001, "Wrong alignment on BFGNPCCharacterHuman_OnDeadStateChanged");
static_assert(sizeof(BFGNPCCharacterHuman_OnDeadStateChanged) == 0x000001, "Wrong size on BFGNPCCharacterHuman_OnDeadStateChanged");
static_assert(offsetof(BFGNPCCharacterHuman_OnDeadStateChanged, _bNewState) == 0x000000, "Member 'BFGNPCCharacterHuman_OnDeadStateChanged::_bNewState' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterHuman.OnStatDeadStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterHuman_OnStatDeadStateChanged final
{
public:
	class AActor*                                 _pTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterHuman_OnStatDeadStateChanged) == 0x000008, "Wrong alignment on BFGNPCCharacterHuman_OnStatDeadStateChanged");
static_assert(sizeof(BFGNPCCharacterHuman_OnStatDeadStateChanged) == 0x000010, "Wrong size on BFGNPCCharacterHuman_OnStatDeadStateChanged");
static_assert(offsetof(BFGNPCCharacterHuman_OnStatDeadStateChanged, _pTargetActor) == 0x000000, "Member 'BFGNPCCharacterHuman_OnStatDeadStateChanged::_pTargetActor' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterHuman_OnStatDeadStateChanged, _pStat) == 0x000008, "Member 'BFGNPCCharacterHuman_OnStatDeadStateChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterHuman.TriggerEventAIStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterHuman_TriggerEventAIStateChanged final
{
public:
	EBFGBehaviourState_NPC                        _newState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterHuman_TriggerEventAIStateChanged) == 0x000001, "Wrong alignment on BFGNPCCharacterHuman_TriggerEventAIStateChanged");
static_assert(sizeof(BFGNPCCharacterHuman_TriggerEventAIStateChanged) == 0x000001, "Wrong size on BFGNPCCharacterHuman_TriggerEventAIStateChanged");
static_assert(offsetof(BFGNPCCharacterHuman_TriggerEventAIStateChanged, _newState) == 0x000000, "Member 'BFGNPCCharacterHuman_TriggerEventAIStateChanged::_newState' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterHuman.GetBrainSpawnLocation
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterHuman_GetBrainSpawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterHuman_GetBrainSpawnLocation) == 0x000004, "Wrong alignment on BFGNPCCharacterHuman_GetBrainSpawnLocation");
static_assert(sizeof(BFGNPCCharacterHuman_GetBrainSpawnLocation) == 0x00000C, "Wrong size on BFGNPCCharacterHuman_GetBrainSpawnLocation");
static_assert(offsetof(BFGNPCCharacterHuman_GetBrainSpawnLocation, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterHuman_GetBrainSpawnLocation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_ConfirmUpgrade.Setup
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_ConfirmUpgrade_Setup final
{
public:
	class FText                                   _strUpgradeName;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _iUpgradeCost;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_ConfirmUpgrade_Setup) == 0x000008, "Wrong alignment on BFGWidget_ConfirmUpgrade_Setup");
static_assert(sizeof(BFGWidget_ConfirmUpgrade_Setup) == 0x000020, "Wrong size on BFGWidget_ConfirmUpgrade_Setup");
static_assert(offsetof(BFGWidget_ConfirmUpgrade_Setup, _strUpgradeName) == 0x000000, "Member 'BFGWidget_ConfirmUpgrade_Setup::_strUpgradeName' has a wrong offset!");
static_assert(offsetof(BFGWidget_ConfirmUpgrade_Setup, _iUpgradeCost) == 0x000018, "Member 'BFGWidget_ConfirmUpgrade_Setup::_iUpgradeCost' has a wrong offset!");

// Function BFGCore.BFGHUDVisibilityStateCapable.ComputeDesiredVisibility
// 0x0001 (0x0001 - 0x0000)
struct BFGHUDVisibilityStateCapable_ComputeDesiredVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGHUDVisibilityStateCapable_ComputeDesiredVisibility) == 0x000001, "Wrong alignment on BFGHUDVisibilityStateCapable_ComputeDesiredVisibility");
static_assert(sizeof(BFGHUDVisibilityStateCapable_ComputeDesiredVisibility) == 0x000001, "Wrong size on BFGHUDVisibilityStateCapable_ComputeDesiredVisibility");
static_assert(offsetof(BFGHUDVisibilityStateCapable_ComputeDesiredVisibility, ReturnValue) == 0x000000, "Member 'BFGHUDVisibilityStateCapable_ComputeDesiredVisibility::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGHUDVisibilityStateCapable.SetManagedVisibilityState
// 0x0001 (0x0001 - 0x0000)
struct BFGHUDVisibilityStateCapable_SetManagedVisibilityState final
{
public:
	bool                                          _bVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGHUDVisibilityStateCapable_SetManagedVisibilityState) == 0x000001, "Wrong alignment on BFGHUDVisibilityStateCapable_SetManagedVisibilityState");
static_assert(sizeof(BFGHUDVisibilityStateCapable_SetManagedVisibilityState) == 0x000001, "Wrong size on BFGHUDVisibilityStateCapable_SetManagedVisibilityState");
static_assert(offsetof(BFGHUDVisibilityStateCapable_SetManagedVisibilityState, _bVisible) == 0x000000, "Member 'BFGHUDVisibilityStateCapable_SetManagedVisibilityState::_bVisible' has a wrong offset!");

// Function BFGCore.BFGHUDVisibilityStateCapable.SetRegistered
// 0x0001 (0x0001 - 0x0000)
struct BFGHUDVisibilityStateCapable_SetRegistered final
{
public:
	bool                                          _bRegistered;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGHUDVisibilityStateCapable_SetRegistered) == 0x000001, "Wrong alignment on BFGHUDVisibilityStateCapable_SetRegistered");
static_assert(sizeof(BFGHUDVisibilityStateCapable_SetRegistered) == 0x000001, "Wrong size on BFGHUDVisibilityStateCapable_SetRegistered");
static_assert(offsetof(BFGHUDVisibilityStateCapable_SetRegistered, _bRegistered) == 0x000000, "Member 'BFGHUDVisibilityStateCapable_SetRegistered::_bRegistered' has a wrong offset!");

// Function BFGCore.BFGActorComponent_HUDVisibilityStateManager.AddState
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_HUDVisibilityStateManager_AddState final
{
public:
	EBFGHUDVisibilityState                        _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_HUDVisibilityStateManager_AddState) == 0x000001, "Wrong alignment on BFGActorComponent_HUDVisibilityStateManager_AddState");
static_assert(sizeof(BFGActorComponent_HUDVisibilityStateManager_AddState) == 0x000001, "Wrong size on BFGActorComponent_HUDVisibilityStateManager_AddState");
static_assert(offsetof(BFGActorComponent_HUDVisibilityStateManager_AddState, _eState) == 0x000000, "Member 'BFGActorComponent_HUDVisibilityStateManager_AddState::_eState' has a wrong offset!");

// Function BFGCore.BFGActorComponent_HUDVisibilityStateManager.RegisterObject
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_HUDVisibilityStateManager_RegisterObject final
{
public:
	TScriptInterface<class IBFGHUDVisibilityStateCapable> _pObject;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_HUDVisibilityStateManager_RegisterObject) == 0x000008, "Wrong alignment on BFGActorComponent_HUDVisibilityStateManager_RegisterObject");
static_assert(sizeof(BFGActorComponent_HUDVisibilityStateManager_RegisterObject) == 0x000010, "Wrong size on BFGActorComponent_HUDVisibilityStateManager_RegisterObject");
static_assert(offsetof(BFGActorComponent_HUDVisibilityStateManager_RegisterObject, _pObject) == 0x000000, "Member 'BFGActorComponent_HUDVisibilityStateManager_RegisterObject::_pObject' has a wrong offset!");

// Function BFGCore.BFGActorComponent_HUDVisibilityStateManager.RemoveState
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_HUDVisibilityStateManager_RemoveState final
{
public:
	EBFGHUDVisibilityState                        _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_HUDVisibilityStateManager_RemoveState) == 0x000001, "Wrong alignment on BFGActorComponent_HUDVisibilityStateManager_RemoveState");
static_assert(sizeof(BFGActorComponent_HUDVisibilityStateManager_RemoveState) == 0x000001, "Wrong size on BFGActorComponent_HUDVisibilityStateManager_RemoveState");
static_assert(offsetof(BFGActorComponent_HUDVisibilityStateManager_RemoveState, _eState) == 0x000000, "Member 'BFGActorComponent_HUDVisibilityStateManager_RemoveState::_eState' has a wrong offset!");

// Function BFGCore.BFGActorComponent_HUDVisibilityStateManager.UnregisterObject
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_HUDVisibilityStateManager_UnregisterObject final
{
public:
	TScriptInterface<class IBFGHUDVisibilityStateCapable> _pObject;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_HUDVisibilityStateManager_UnregisterObject) == 0x000008, "Wrong alignment on BFGActorComponent_HUDVisibilityStateManager_UnregisterObject");
static_assert(sizeof(BFGActorComponent_HUDVisibilityStateManager_UnregisterObject) == 0x000010, "Wrong size on BFGActorComponent_HUDVisibilityStateManager_UnregisterObject");
static_assert(offsetof(BFGActorComponent_HUDVisibilityStateManager_UnregisterObject, _pObject) == 0x000000, "Member 'BFGActorComponent_HUDVisibilityStateManager_UnregisterObject::_pObject' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AIStateBase.OnAgentAttachedActorResetCallback
// 0x0008 (0x0008 - 0x0000)
struct BFGNetworkPathAgent_AIStateBase_OnAgentAttachedActorResetCallback final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_AIStateBase_OnAgentAttachedActorResetCallback) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AIStateBase_OnAgentAttachedActorResetCallback");
static_assert(sizeof(BFGNetworkPathAgent_AIStateBase_OnAgentAttachedActorResetCallback) == 0x000008, "Wrong size on BFGNetworkPathAgent_AIStateBase_OnAgentAttachedActorResetCallback");
static_assert(offsetof(BFGNetworkPathAgent_AIStateBase_OnAgentAttachedActorResetCallback, _pAgent) == 0x000000, "Member 'BFGNetworkPathAgent_AIStateBase_OnAgentAttachedActorResetCallback::_pAgent' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AIStateCrowdLife.OnAnimationSequenceChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGNetworkPathAgent_AIStateCrowdLife_OnAnimationSequenceChanged final
{
public:
	class UBFGCrowdLifeStationComponent*          _pStation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_AIStateCrowdLife_OnAnimationSequenceChanged) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AIStateCrowdLife_OnAnimationSequenceChanged");
static_assert(sizeof(BFGNetworkPathAgent_AIStateCrowdLife_OnAnimationSequenceChanged) == 0x000008, "Wrong size on BFGNetworkPathAgent_AIStateCrowdLife_OnAnimationSequenceChanged");
static_assert(offsetof(BFGNetworkPathAgent_AIStateCrowdLife_OnAnimationSequenceChanged, _pStation) == 0x000000, "Member 'BFGNetworkPathAgent_AIStateCrowdLife_OnAnimationSequenceChanged::_pStation' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AIStateCrowdLife.OnAttachedACtorChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsAttached;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged");
static_assert(sizeof(BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged) == 0x000018, "Wrong size on BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged");
static_assert(offsetof(BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged, _pAgent) == 0x000000, "Member 'BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged, _pActor) == 0x000008, "Member 'BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged, _bIsAttached) == 0x000010, "Member 'BFGNetworkPathAgent_AIStateCrowdLife_OnAttachedACtorChanged::_bIsAttached' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_AITaskFinished.OnFinishedTask
// 0x0018 (0x0018 - 0x0000)
struct BFGEventTrigger_AITaskFinished_OnFinishedTask final
{
public:
	class APawn*                                  _pPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _pController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFG_AITask*                            _pTask;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_AITaskFinished_OnFinishedTask) == 0x000008, "Wrong alignment on BFGEventTrigger_AITaskFinished_OnFinishedTask");
static_assert(sizeof(BFGEventTrigger_AITaskFinished_OnFinishedTask) == 0x000018, "Wrong size on BFGEventTrigger_AITaskFinished_OnFinishedTask");
static_assert(offsetof(BFGEventTrigger_AITaskFinished_OnFinishedTask, _pPawn) == 0x000000, "Member 'BFGEventTrigger_AITaskFinished_OnFinishedTask::_pPawn' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_AITaskFinished_OnFinishedTask, _pController) == 0x000008, "Member 'BFGEventTrigger_AITaskFinished_OnFinishedTask::_pController' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_AITaskFinished_OnFinishedTask, _pTask) == 0x000010, "Member 'BFGEventTrigger_AITaskFinished_OnFinishedTask::_pTask' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_Turret_Roboprez.StartCountdownIfPhaseMatches
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterEnemy_Turret_Roboprez_StartCountdownIfPhaseMatches final
{
public:
	int32                                         M_iPhase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_Turret_Roboprez_StartCountdownIfPhaseMatches) == 0x000004, "Wrong alignment on BFGNPCCharacterEnemy_Turret_Roboprez_StartCountdownIfPhaseMatches");
static_assert(sizeof(BFGNPCCharacterEnemy_Turret_Roboprez_StartCountdownIfPhaseMatches) == 0x000004, "Wrong size on BFGNPCCharacterEnemy_Turret_Roboprez_StartCountdownIfPhaseMatches");
static_assert(offsetof(BFGNPCCharacterEnemy_Turret_Roboprez_StartCountdownIfPhaseMatches, M_iPhase) == 0x000000, "Member 'BFGNPCCharacterEnemy_Turret_Roboprez_StartCountdownIfPhaseMatches::M_iPhase' has a wrong offset!");

// Function BFGCore.BFGMaterialUtils.GetCurrentPostProcessVolume
// 0x0010 (0x0010 - 0x0000)
struct BFGMaterialUtils_GetCurrentPostProcessVolume final
{
public:
	class UWorld*                                 _pWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APostProcessVolume*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMaterialUtils_GetCurrentPostProcessVolume) == 0x000008, "Wrong alignment on BFGMaterialUtils_GetCurrentPostProcessVolume");
static_assert(sizeof(BFGMaterialUtils_GetCurrentPostProcessVolume) == 0x000010, "Wrong size on BFGMaterialUtils_GetCurrentPostProcessVolume");
static_assert(offsetof(BFGMaterialUtils_GetCurrentPostProcessVolume, _pWorld) == 0x000000, "Member 'BFGMaterialUtils_GetCurrentPostProcessVolume::_pWorld' has a wrong offset!");
static_assert(offsetof(BFGMaterialUtils_GetCurrentPostProcessVolume, ReturnValue) == 0x000008, "Member 'BFGMaterialUtils_GetCurrentPostProcessVolume::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMaterialUtils.SetTextureParameterValueBySprite
// 0x0018 (0x0018 - 0x0000)
struct BFGMaterialUtils_SetTextureParameterValueBySprite final
{
public:
	class UMaterialInstanceDynamic*               _pMaterialInstance;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _parameterName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           _pSprite;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMaterialUtils_SetTextureParameterValueBySprite) == 0x000008, "Wrong alignment on BFGMaterialUtils_SetTextureParameterValueBySprite");
static_assert(sizeof(BFGMaterialUtils_SetTextureParameterValueBySprite) == 0x000018, "Wrong size on BFGMaterialUtils_SetTextureParameterValueBySprite");
static_assert(offsetof(BFGMaterialUtils_SetTextureParameterValueBySprite, _pMaterialInstance) == 0x000000, "Member 'BFGMaterialUtils_SetTextureParameterValueBySprite::_pMaterialInstance' has a wrong offset!");
static_assert(offsetof(BFGMaterialUtils_SetTextureParameterValueBySprite, _parameterName) == 0x000008, "Member 'BFGMaterialUtils_SetTextureParameterValueBySprite::_parameterName' has a wrong offset!");
static_assert(offsetof(BFGMaterialUtils_SetTextureParameterValueBySprite, _pSprite) == 0x000010, "Member 'BFGMaterialUtils_SetTextureParameterValueBySprite::_pSprite' has a wrong offset!");

// Function BFGCore.BFGMaterialUtils.SetVectorParameterValueBySprite
// 0x0018 (0x0018 - 0x0000)
struct BFGMaterialUtils_SetVectorParameterValueBySprite final
{
public:
	class UMaterialInstanceDynamic*               _pMaterialInstance;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _parameterName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           _pSprite;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMaterialUtils_SetVectorParameterValueBySprite) == 0x000008, "Wrong alignment on BFGMaterialUtils_SetVectorParameterValueBySprite");
static_assert(sizeof(BFGMaterialUtils_SetVectorParameterValueBySprite) == 0x000018, "Wrong size on BFGMaterialUtils_SetVectorParameterValueBySprite");
static_assert(offsetof(BFGMaterialUtils_SetVectorParameterValueBySprite, _pMaterialInstance) == 0x000000, "Member 'BFGMaterialUtils_SetVectorParameterValueBySprite::_pMaterialInstance' has a wrong offset!");
static_assert(offsetof(BFGMaterialUtils_SetVectorParameterValueBySprite, _parameterName) == 0x000008, "Member 'BFGMaterialUtils_SetVectorParameterValueBySprite::_parameterName' has a wrong offset!");
static_assert(offsetof(BFGMaterialUtils_SetVectorParameterValueBySprite, _pSprite) == 0x000010, "Member 'BFGMaterialUtils_SetVectorParameterValueBySprite::_pSprite' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD.GetGameState
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_GetGameState final
{
public:
	class ABFGGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_GetGameState) == 0x000008, "Wrong alignment on BFGWidget_HUD_GetGameState");
static_assert(sizeof(BFGWidget_HUD_GetGameState) == 0x000008, "Wrong size on BFGWidget_HUD_GetGameState");
static_assert(offsetof(BFGWidget_HUD_GetGameState, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_GetGameState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD.GetOwningGameplayToHud
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_GetOwningGameplayToHud final
{
public:
	class UBFGActorComponent_GameplayToHud*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_GetOwningGameplayToHud) == 0x000008, "Wrong alignment on BFGWidget_HUD_GetOwningGameplayToHud");
static_assert(sizeof(BFGWidget_HUD_GetOwningGameplayToHud) == 0x000008, "Wrong size on BFGWidget_HUD_GetOwningGameplayToHud");
static_assert(offsetof(BFGWidget_HUD_GetOwningGameplayToHud, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_GetOwningGameplayToHud::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_Subtitle.ShowWidget
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_Subtitle_ShowWidget final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_Subtitle_ShowWidget) == 0x000001, "Wrong alignment on BFGWidget_HUD_Subtitle_ShowWidget");
static_assert(sizeof(BFGWidget_HUD_Subtitle_ShowWidget) == 0x000001, "Wrong size on BFGWidget_HUD_Subtitle_ShowWidget");
static_assert(offsetof(BFGWidget_HUD_Subtitle_ShowWidget, _bShow) == 0x000000, "Member 'BFGWidget_HUD_Subtitle_ShowWidget::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_QuestTracker.BeforeQuestRemove
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_QuestTracker_BeforeQuestRemove final
{
public:
	class UBFGWidget_QuestEntry*                  _pQuestEntry;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_QuestTracker_BeforeQuestRemove) == 0x000008, "Wrong alignment on BFGWidget_HUD_QuestTracker_BeforeQuestRemove");
static_assert(sizeof(BFGWidget_HUD_QuestTracker_BeforeQuestRemove) == 0x000008, "Wrong size on BFGWidget_HUD_QuestTracker_BeforeQuestRemove");
static_assert(offsetof(BFGWidget_HUD_QuestTracker_BeforeQuestRemove, _pQuestEntry) == 0x000000, "Member 'BFGWidget_HUD_QuestTracker_BeforeQuestRemove::_pQuestEntry' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_QuestTracker.GetContainer
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_QuestTracker_GetContainer final
{
public:
	class UCanvasPanel*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_QuestTracker_GetContainer) == 0x000008, "Wrong alignment on BFGWidget_HUD_QuestTracker_GetContainer");
static_assert(sizeof(BFGWidget_HUD_QuestTracker_GetContainer) == 0x000008, "Wrong size on BFGWidget_HUD_QuestTracker_GetContainer");
static_assert(offsetof(BFGWidget_HUD_QuestTracker_GetContainer, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_QuestTracker_GetContainer::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_QuestTracker.OnNewQuestAdded
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_QuestTracker_OnNewQuestAdded final
{
public:
	class UBFGWidget_QuestEntry*                  _pQuestEntry;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_QuestTracker_OnNewQuestAdded) == 0x000008, "Wrong alignment on BFGWidget_HUD_QuestTracker_OnNewQuestAdded");
static_assert(sizeof(BFGWidget_HUD_QuestTracker_OnNewQuestAdded) == 0x000008, "Wrong size on BFGWidget_HUD_QuestTracker_OnNewQuestAdded");
static_assert(offsetof(BFGWidget_HUD_QuestTracker_OnNewQuestAdded, _pQuestEntry) == 0x000000, "Member 'BFGWidget_HUD_QuestTracker_OnNewQuestAdded::_pQuestEntry' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_QuestTracker.OnQuestEntryHideAnimationFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_QuestTracker_OnQuestEntryHideAnimationFinished final
{
public:
	class UBFGWidget_QuestEntry*                  _pQuestEntry;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_QuestTracker_OnQuestEntryHideAnimationFinished) == 0x000008, "Wrong alignment on BFGWidget_HUD_QuestTracker_OnQuestEntryHideAnimationFinished");
static_assert(sizeof(BFGWidget_HUD_QuestTracker_OnQuestEntryHideAnimationFinished) == 0x000008, "Wrong size on BFGWidget_HUD_QuestTracker_OnQuestEntryHideAnimationFinished");
static_assert(offsetof(BFGWidget_HUD_QuestTracker_OnQuestEntryHideAnimationFinished, _pQuestEntry) == 0x000000, "Member 'BFGWidget_HUD_QuestTracker_OnQuestEntryHideAnimationFinished::_pQuestEntry' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_QuestTracker.SetSpacerSize
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_QuestTracker_SetSpacerSize final
{
public:
	struct FVector2D                              _vSize;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_QuestTracker_SetSpacerSize) == 0x000004, "Wrong alignment on BFGWidget_HUD_QuestTracker_SetSpacerSize");
static_assert(sizeof(BFGWidget_HUD_QuestTracker_SetSpacerSize) == 0x000008, "Wrong size on BFGWidget_HUD_QuestTracker_SetSpacerSize");
static_assert(offsetof(BFGWidget_HUD_QuestTracker_SetSpacerSize, _vSize) == 0x000000, "Member 'BFGWidget_HUD_QuestTracker_SetSpacerSize::_vSize' has a wrong offset!");

// Function BFGCore.BFGAchievementAwardActor.OnAchievementAwarded
// 0x0018 (0x0018 - 0x0000)
struct BFGAchievementAwardActor_OnAchievementAwarded final
{
public:
	class APlayerController*                      _pPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _nAchievementID;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAchievementProgress;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShouldSaved;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAchievementAwardActor_OnAchievementAwarded) == 0x000008, "Wrong alignment on BFGAchievementAwardActor_OnAchievementAwarded");
static_assert(sizeof(BFGAchievementAwardActor_OnAchievementAwarded) == 0x000018, "Wrong size on BFGAchievementAwardActor_OnAchievementAwarded");
static_assert(offsetof(BFGAchievementAwardActor_OnAchievementAwarded, _pPlayerController) == 0x000000, "Member 'BFGAchievementAwardActor_OnAchievementAwarded::_pPlayerController' has a wrong offset!");
static_assert(offsetof(BFGAchievementAwardActor_OnAchievementAwarded, _nAchievementID) == 0x000008, "Member 'BFGAchievementAwardActor_OnAchievementAwarded::_nAchievementID' has a wrong offset!");
static_assert(offsetof(BFGAchievementAwardActor_OnAchievementAwarded, _fAchievementProgress) == 0x000010, "Member 'BFGAchievementAwardActor_OnAchievementAwarded::_fAchievementProgress' has a wrong offset!");
static_assert(offsetof(BFGAchievementAwardActor_OnAchievementAwarded, _bShouldSaved) == 0x000014, "Member 'BFGAchievementAwardActor_OnAchievementAwarded::_bShouldSaved' has a wrong offset!");

// Function BFGCore.BFGInteractable.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BFGInteractable_OnInteract final
{
public:
	class AActor*                                 _pOtherActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInteractable_OnInteract) == 0x000008, "Wrong alignment on BFGInteractable_OnInteract");
static_assert(sizeof(BFGInteractable_OnInteract) == 0x000008, "Wrong size on BFGInteractable_OnInteract");
static_assert(offsetof(BFGInteractable_OnInteract, _pOtherActor) == 0x000000, "Member 'BFGInteractable_OnInteract::_pOtherActor' has a wrong offset!");

// Function BFGCore.BFGQuest_Element.GetChallenge
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_Element_GetChallenge final
{
public:
	class UBFGQuest_Challenge*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Element_GetChallenge) == 0x000008, "Wrong alignment on BFGQuest_Element_GetChallenge");
static_assert(sizeof(BFGQuest_Element_GetChallenge) == 0x000008, "Wrong size on BFGQuest_Element_GetChallenge");
static_assert(offsetof(BFGQuest_Element_GetChallenge, ReturnValue) == 0x000000, "Member 'BFGQuest_Element_GetChallenge::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementCheckpoint.OnEnterdQuestStep
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_ElementCheckpoint_OnEnterdQuestStep final
{
public:
	class UBFGQuest_Element*                      _pElement;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementCheckpoint_OnEnterdQuestStep) == 0x000008, "Wrong alignment on BFGQuest_ElementCheckpoint_OnEnterdQuestStep");
static_assert(sizeof(BFGQuest_ElementCheckpoint_OnEnterdQuestStep) == 0x000008, "Wrong size on BFGQuest_ElementCheckpoint_OnEnterdQuestStep");
static_assert(offsetof(BFGQuest_ElementCheckpoint_OnEnterdQuestStep, _pElement) == 0x000000, "Member 'BFGQuest_ElementCheckpoint_OnEnterdQuestStep::_pElement' has a wrong offset!");

// Function BFGCore.BFGAchievementManager.AwardAchievement
// 0x0018 (0x0018 - 0x0000)
struct BFGAchievementManager_AwardAchievement final
{
public:
	class UWorld*                                 _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _nAchievementID;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAchievementProgress;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShouldSave;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAchievementManager_AwardAchievement) == 0x000008, "Wrong alignment on BFGAchievementManager_AwardAchievement");
static_assert(sizeof(BFGAchievementManager_AwardAchievement) == 0x000018, "Wrong size on BFGAchievementManager_AwardAchievement");
static_assert(offsetof(BFGAchievementManager_AwardAchievement, _pWorldContext) == 0x000000, "Member 'BFGAchievementManager_AwardAchievement::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievement, _nAchievementID) == 0x000008, "Member 'BFGAchievementManager_AwardAchievement::_nAchievementID' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievement, _fAchievementProgress) == 0x000010, "Member 'BFGAchievementManager_AwardAchievement::_fAchievementProgress' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievement, _bShouldSave) == 0x000014, "Member 'BFGAchievementManager_AwardAchievement::_bShouldSave' has a wrong offset!");

// Function BFGCore.BFGAchievementManager.AwardAchievementsFailed
// 0x0018 (0x0018 - 0x0000)
struct BFGAchievementManager_AwardAchievementsFailed final
{
public:
	class UWorld*                                 _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _nAchievementID;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAchievementProgress;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShouldSave;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAchievementManager_AwardAchievementsFailed) == 0x000008, "Wrong alignment on BFGAchievementManager_AwardAchievementsFailed");
static_assert(sizeof(BFGAchievementManager_AwardAchievementsFailed) == 0x000018, "Wrong size on BFGAchievementManager_AwardAchievementsFailed");
static_assert(offsetof(BFGAchievementManager_AwardAchievementsFailed, _pWorldContext) == 0x000000, "Member 'BFGAchievementManager_AwardAchievementsFailed::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievementsFailed, _nAchievementID) == 0x000008, "Member 'BFGAchievementManager_AwardAchievementsFailed::_nAchievementID' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievementsFailed, _fAchievementProgress) == 0x000010, "Member 'BFGAchievementManager_AwardAchievementsFailed::_fAchievementProgress' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievementsFailed, _bShouldSave) == 0x000014, "Member 'BFGAchievementManager_AwardAchievementsFailed::_bShouldSave' has a wrong offset!");

// Function BFGCore.BFGAchievementManager.AwardAchievementsSuccess
// 0x0018 (0x0018 - 0x0000)
struct BFGAchievementManager_AwardAchievementsSuccess final
{
public:
	class UWorld*                                 _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _nAchievementID;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAchievementProgress;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShouldSave;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAchievementManager_AwardAchievementsSuccess) == 0x000008, "Wrong alignment on BFGAchievementManager_AwardAchievementsSuccess");
static_assert(sizeof(BFGAchievementManager_AwardAchievementsSuccess) == 0x000018, "Wrong size on BFGAchievementManager_AwardAchievementsSuccess");
static_assert(offsetof(BFGAchievementManager_AwardAchievementsSuccess, _pWorldContext) == 0x000000, "Member 'BFGAchievementManager_AwardAchievementsSuccess::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievementsSuccess, _nAchievementID) == 0x000008, "Member 'BFGAchievementManager_AwardAchievementsSuccess::_nAchievementID' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievementsSuccess, _fAchievementProgress) == 0x000010, "Member 'BFGAchievementManager_AwardAchievementsSuccess::_fAchievementProgress' has a wrong offset!");
static_assert(offsetof(BFGAchievementManager_AwardAchievementsSuccess, _bShouldSave) == 0x000014, "Member 'BFGAchievementManager_AwardAchievementsSuccess::_bShouldSave' has a wrong offset!");

// Function BFGCore.BFGAchievementManager.ReApplyAchievements
// 0x0008 (0x0008 - 0x0000)
struct BFGAchievementManager_ReApplyAchievements final
{
public:
	class UWorld*                                 _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAchievementManager_ReApplyAchievements) == 0x000008, "Wrong alignment on BFGAchievementManager_ReApplyAchievements");
static_assert(sizeof(BFGAchievementManager_ReApplyAchievements) == 0x000008, "Wrong size on BFGAchievementManager_ReApplyAchievements");
static_assert(offsetof(BFGAchievementManager_ReApplyAchievements, _pWorldContext) == 0x000000, "Member 'BFGAchievementManager_ReApplyAchievements::_pWorldContext' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskEnterVehicle.CreateAndAddScriptedSequence_TaskEnterVehicle
// 0x0058 (0x0058 - 0x0000)
struct BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _vehicleTag;                                       // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
	EBFGVehiclePassenger_Spot                     _eSpot;                                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle");
static_assert(sizeof(BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle) == 0x000058, "Wrong size on BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle");
static_assert(offsetof(BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle, _vehicleTag) == 0x000008, "Member 'BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle::_vehicleTag' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle, _eSpot) == 0x000050, "Member 'BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle::_eSpot' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle, ReturnValue) == 0x000051, "Member 'BFGScriptedSequence_TaskEnterVehicle_CreateAndAddScriptedSequence_TaskEnterVehicle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskPlayAnim.CreateAndAddScriptedSequence_TaskPlayAnim
// 0x0058 (0x0058 - 0x0000)
struct BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _softDestination;                                  // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationSequence          _animSequenceData;                                 // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          _bLooping;                                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fDuration;                                        // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFinishTaskWhenAnimStarted;                       // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim");
static_assert(sizeof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim) == 0x000058, "Wrong size on BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim");
static_assert(offsetof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim, _softDestination) == 0x000008, "Member 'BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim::_softDestination' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim, _animSequenceData) == 0x000030, "Member 'BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim::_animSequenceData' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim, _bLooping) == 0x000048, "Member 'BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim::_bLooping' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim, _fDuration) == 0x00004C, "Member 'BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim::_fDuration' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim, _bFinishTaskWhenAnimStarted) == 0x000050, "Member 'BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim::_bFinishTaskWhenAnimStarted' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim, ReturnValue) == 0x000051, "Member 'BFGScriptedSequence_TaskPlayAnim_CreateAndAddScriptedSequence_TaskPlayAnim::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActor_Silhouette_SpinTornado.ShootBeam
// 0x0020 (0x0020 - 0x0000)
struct BFGActor_Silhouette_SpinTornado_ShootBeam final
{
public:
	struct FVector                                _vSpawnLocation;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _vSpawnRotation;                                   // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABFGProjectile_Object*                  _pOwnerProjectile;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActor_Silhouette_SpinTornado_ShootBeam) == 0x000008, "Wrong alignment on BFGActor_Silhouette_SpinTornado_ShootBeam");
static_assert(sizeof(BFGActor_Silhouette_SpinTornado_ShootBeam) == 0x000020, "Wrong size on BFGActor_Silhouette_SpinTornado_ShootBeam");
static_assert(offsetof(BFGActor_Silhouette_SpinTornado_ShootBeam, _vSpawnLocation) == 0x000000, "Member 'BFGActor_Silhouette_SpinTornado_ShootBeam::_vSpawnLocation' has a wrong offset!");
static_assert(offsetof(BFGActor_Silhouette_SpinTornado_ShootBeam, _vSpawnRotation) == 0x00000C, "Member 'BFGActor_Silhouette_SpinTornado_ShootBeam::_vSpawnRotation' has a wrong offset!");
static_assert(offsetof(BFGActor_Silhouette_SpinTornado_ShootBeam, _pOwnerProjectile) == 0x000018, "Member 'BFGActor_Silhouette_SpinTornado_ShootBeam::_pOwnerProjectile' has a wrong offset!");

// DelegateFunction BFGCore.BFGMentalAbilityBase.BoolEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGMentalAbilityBase_BoolEvent__DelegateSignature final
{
public:
	class UBFGMentalAbilityBase*                  _pAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMentalAbilityBase_BoolEvent__DelegateSignature) == 0x000008, "Wrong alignment on BFGMentalAbilityBase_BoolEvent__DelegateSignature");
static_assert(sizeof(BFGMentalAbilityBase_BoolEvent__DelegateSignature) == 0x000010, "Wrong size on BFGMentalAbilityBase_BoolEvent__DelegateSignature");
static_assert(offsetof(BFGMentalAbilityBase_BoolEvent__DelegateSignature, _pAbility) == 0x000000, "Member 'BFGMentalAbilityBase_BoolEvent__DelegateSignature::_pAbility' has a wrong offset!");
static_assert(offsetof(BFGMentalAbilityBase_BoolEvent__DelegateSignature, _bEnabled) == 0x000008, "Member 'BFGMentalAbilityBase_BoolEvent__DelegateSignature::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.OnAbilityActivationFailed
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbilityBase_OnAbilityActivationFailed final
{
public:
	EAbilityActivationResult                      _abilityFailReason;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_OnAbilityActivationFailed) == 0x000001, "Wrong alignment on BFGMentalAbilityBase_OnAbilityActivationFailed");
static_assert(sizeof(BFGMentalAbilityBase_OnAbilityActivationFailed) == 0x000001, "Wrong size on BFGMentalAbilityBase_OnAbilityActivationFailed");
static_assert(offsetof(BFGMentalAbilityBase_OnAbilityActivationFailed, _abilityFailReason) == 0x000000, "Member 'BFGMentalAbilityBase_OnAbilityActivationFailed::_abilityFailReason' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.OnTick
// 0x0004 (0x0004 - 0x0000)
struct BFGMentalAbilityBase_OnTick final
{
public:
	float                                         _fDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_OnTick) == 0x000004, "Wrong alignment on BFGMentalAbilityBase_OnTick");
static_assert(sizeof(BFGMentalAbilityBase_OnTick) == 0x000004, "Wrong size on BFGMentalAbilityBase_OnTick");
static_assert(offsetof(BFGMentalAbilityBase_OnTick, _fDeltaTime) == 0x000000, "Member 'BFGMentalAbilityBase_OnTick::_fDeltaTime' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.SetState
// 0x0002 (0x0002 - 0x0000)
struct BFGMentalAbilityBase_SetState final
{
public:
	EAbilityState                                 _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceBroadcast;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_SetState) == 0x000001, "Wrong alignment on BFGMentalAbilityBase_SetState");
static_assert(sizeof(BFGMentalAbilityBase_SetState) == 0x000002, "Wrong size on BFGMentalAbilityBase_SetState");
static_assert(offsetof(BFGMentalAbilityBase_SetState, _eState) == 0x000000, "Member 'BFGMentalAbilityBase_SetState::_eState' has a wrong offset!");
static_assert(offsetof(BFGMentalAbilityBase_SetState, _bForceBroadcast) == 0x000001, "Member 'BFGMentalAbilityBase_SetState::_bForceBroadcast' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.StoppedMentalLink
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbilityBase_StoppedMentalLink final
{
public:
	bool                                          _wasSuccessfull;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_StoppedMentalLink) == 0x000001, "Wrong alignment on BFGMentalAbilityBase_StoppedMentalLink");
static_assert(sizeof(BFGMentalAbilityBase_StoppedMentalLink) == 0x000001, "Wrong size on BFGMentalAbilityBase_StoppedMentalLink");
static_assert(offsetof(BFGMentalAbilityBase_StoppedMentalLink, _wasSuccessfull) == 0x000000, "Member 'BFGMentalAbilityBase_StoppedMentalLink::_wasSuccessfull' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.UpdateAbilityDressing
// 0x0004 (0x0004 - 0x0000)
struct BFGMentalAbilityBase_UpdateAbilityDressing final
{
public:
	float                                         _fDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_UpdateAbilityDressing) == 0x000004, "Wrong alignment on BFGMentalAbilityBase_UpdateAbilityDressing");
static_assert(sizeof(BFGMentalAbilityBase_UpdateAbilityDressing) == 0x000004, "Wrong size on BFGMentalAbilityBase_UpdateAbilityDressing");
static_assert(offsetof(BFGMentalAbilityBase_UpdateAbilityDressing, _fDeltaTime) == 0x000000, "Member 'BFGMentalAbilityBase_UpdateAbilityDressing::_fDeltaTime' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.CheckIsUpgradeUnlocked
// 0x000C (0x000C - 0x0000)
struct BFGMentalAbilityBase_CheckIsUpgradeUnlocked final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMentalAbilityBase_CheckIsUpgradeUnlocked) == 0x000004, "Wrong alignment on BFGMentalAbilityBase_CheckIsUpgradeUnlocked");
static_assert(sizeof(BFGMentalAbilityBase_CheckIsUpgradeUnlocked) == 0x00000C, "Wrong size on BFGMentalAbilityBase_CheckIsUpgradeUnlocked");
static_assert(offsetof(BFGMentalAbilityBase_CheckIsUpgradeUnlocked, _rTag) == 0x000000, "Member 'BFGMentalAbilityBase_CheckIsUpgradeUnlocked::_rTag' has a wrong offset!");
static_assert(offsetof(BFGMentalAbilityBase_CheckIsUpgradeUnlocked, ReturnValue) == 0x000008, "Member 'BFGMentalAbilityBase_CheckIsUpgradeUnlocked::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.GetActiveTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbilityBase_GetActiveTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_GetActiveTarget) == 0x000008, "Wrong alignment on BFGMentalAbilityBase_GetActiveTarget");
static_assert(sizeof(BFGMentalAbilityBase_GetActiveTarget) == 0x000008, "Wrong size on BFGMentalAbilityBase_GetActiveTarget");
static_assert(offsetof(BFGMentalAbilityBase_GetActiveTarget, ReturnValue) == 0x000000, "Member 'BFGMentalAbilityBase_GetActiveTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.GetAnimationPosture
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbilityBase_GetAnimationPosture final
{
public:
	EBFGAnimation_MentalAbilityPosture            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_GetAnimationPosture) == 0x000001, "Wrong alignment on BFGMentalAbilityBase_GetAnimationPosture");
static_assert(sizeof(BFGMentalAbilityBase_GetAnimationPosture) == 0x000001, "Wrong size on BFGMentalAbilityBase_GetAnimationPosture");
static_assert(offsetof(BFGMentalAbilityBase_GetAnimationPosture, ReturnValue) == 0x000000, "Member 'BFGMentalAbilityBase_GetAnimationPosture::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.GetBFGGameState
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbilityBase_GetBFGGameState final
{
public:
	class ABFGGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_GetBFGGameState) == 0x000008, "Wrong alignment on BFGMentalAbilityBase_GetBFGGameState");
static_assert(sizeof(BFGMentalAbilityBase_GetBFGGameState) == 0x000008, "Wrong size on BFGMentalAbilityBase_GetBFGGameState");
static_assert(offsetof(BFGMentalAbilityBase_GetBFGGameState, ReturnValue) == 0x000000, "Member 'BFGMentalAbilityBase_GetBFGGameState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.GetCurrentChannelPercent
// 0x0004 (0x0004 - 0x0000)
struct BFGMentalAbilityBase_GetCurrentChannelPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_GetCurrentChannelPercent) == 0x000004, "Wrong alignment on BFGMentalAbilityBase_GetCurrentChannelPercent");
static_assert(sizeof(BFGMentalAbilityBase_GetCurrentChannelPercent) == 0x000004, "Wrong size on BFGMentalAbilityBase_GetCurrentChannelPercent");
static_assert(offsetof(BFGMentalAbilityBase_GetCurrentChannelPercent, ReturnValue) == 0x000000, "Member 'BFGMentalAbilityBase_GetCurrentChannelPercent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.GetCurrentEffectProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct BFGMentalAbilityBase_GetCurrentEffectProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_GetCurrentEffectProgressPercent) == 0x000004, "Wrong alignment on BFGMentalAbilityBase_GetCurrentEffectProgressPercent");
static_assert(sizeof(BFGMentalAbilityBase_GetCurrentEffectProgressPercent) == 0x000004, "Wrong size on BFGMentalAbilityBase_GetCurrentEffectProgressPercent");
static_assert(offsetof(BFGMentalAbilityBase_GetCurrentEffectProgressPercent, ReturnValue) == 0x000000, "Member 'BFGMentalAbilityBase_GetCurrentEffectProgressPercent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.GetState
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbilityBase_GetState final
{
public:
	EAbilityState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_GetState) == 0x000001, "Wrong alignment on BFGMentalAbilityBase_GetState");
static_assert(sizeof(BFGMentalAbilityBase_GetState) == 0x000001, "Wrong size on BFGMentalAbilityBase_GetState");
static_assert(offsetof(BFGMentalAbilityBase_GetState, ReturnValue) == 0x000000, "Member 'BFGMentalAbilityBase_GetState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.GetUser
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbilityBase_GetUser final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_GetUser) == 0x000008, "Wrong alignment on BFGMentalAbilityBase_GetUser");
static_assert(sizeof(BFGMentalAbilityBase_GetUser) == 0x000008, "Wrong size on BFGMentalAbilityBase_GetUser");
static_assert(offsetof(BFGMentalAbilityBase_GetUser, ReturnValue) == 0x000000, "Member 'BFGMentalAbilityBase_GetUser::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbilityBase.IsAvailable
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbilityBase_IsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbilityBase_IsAvailable) == 0x000001, "Wrong alignment on BFGMentalAbilityBase_IsAvailable");
static_assert(sizeof(BFGMentalAbilityBase_IsAvailable) == 0x000001, "Wrong size on BFGMentalAbilityBase_IsAvailable");
static_assert(offsetof(BFGMentalAbilityBase_IsAvailable, ReturnValue) == 0x000000, "Member 'BFGMentalAbilityBase_IsAvailable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Hypnotize.HandleTargetTakeDamage
// 0x00B8 (0x00B8 - 0x0000)
struct BFGMentalAbility_Hypnotize_HandleTargetTakeDamage final
{
public:
	class UBFGActorComponent_PawnDamage*          _pPawnDamage;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pDamageCauser;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDamageType*                         _pDamageType;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rShotDirection;                                   // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _oHitResult;                                       // 0x002C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMentalAbility_Hypnotize_HandleTargetTakeDamage) == 0x000008, "Wrong alignment on BFGMentalAbility_Hypnotize_HandleTargetTakeDamage");
static_assert(sizeof(BFGMentalAbility_Hypnotize_HandleTargetTakeDamage) == 0x0000B8, "Wrong size on BFGMentalAbility_Hypnotize_HandleTargetTakeDamage");
static_assert(offsetof(BFGMentalAbility_Hypnotize_HandleTargetTakeDamage, _pPawnDamage) == 0x000000, "Member 'BFGMentalAbility_Hypnotize_HandleTargetTakeDamage::_pPawnDamage' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Hypnotize_HandleTargetTakeDamage, _fDamage) == 0x000008, "Member 'BFGMentalAbility_Hypnotize_HandleTargetTakeDamage::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Hypnotize_HandleTargetTakeDamage, _pDamageCauser) == 0x000010, "Member 'BFGMentalAbility_Hypnotize_HandleTargetTakeDamage::_pDamageCauser' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Hypnotize_HandleTargetTakeDamage, _pDamageType) == 0x000018, "Member 'BFGMentalAbility_Hypnotize_HandleTargetTakeDamage::_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Hypnotize_HandleTargetTakeDamage, _rShotDirection) == 0x000020, "Member 'BFGMentalAbility_Hypnotize_HandleTargetTakeDamage::_rShotDirection' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Hypnotize_HandleTargetTakeDamage, _oHitResult) == 0x00002C, "Member 'BFGMentalAbility_Hypnotize_HandleTargetTakeDamage::_oHitResult' has a wrong offset!");

// Function BFGCore.BFGWidget_IngameMainMenu.SetChallengeDisabled
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_IngameMainMenu_SetChallengeDisabled final
{
public:
	EBFGChallengeType                             _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDisabled;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_IngameMainMenu_SetChallengeDisabled) == 0x000001, "Wrong alignment on BFGWidget_IngameMainMenu_SetChallengeDisabled");
static_assert(sizeof(BFGWidget_IngameMainMenu_SetChallengeDisabled) == 0x000002, "Wrong size on BFGWidget_IngameMainMenu_SetChallengeDisabled");
static_assert(offsetof(BFGWidget_IngameMainMenu_SetChallengeDisabled, _eType) == 0x000000, "Member 'BFGWidget_IngameMainMenu_SetChallengeDisabled::_eType' has a wrong offset!");
static_assert(offsetof(BFGWidget_IngameMainMenu_SetChallengeDisabled, _bDisabled) == 0x000001, "Member 'BFGWidget_IngameMainMenu_SetChallengeDisabled::_bDisabled' has a wrong offset!");

// Function BFGCore.BFGWidget_IngameMainMenu.SetChallengeRating
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_IngameMainMenu_SetChallengeRating final
{
public:
	EBFGChallengeType                             _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iRating;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_IngameMainMenu_SetChallengeRating) == 0x000004, "Wrong alignment on BFGWidget_IngameMainMenu_SetChallengeRating");
static_assert(sizeof(BFGWidget_IngameMainMenu_SetChallengeRating) == 0x000008, "Wrong size on BFGWidget_IngameMainMenu_SetChallengeRating");
static_assert(offsetof(BFGWidget_IngameMainMenu_SetChallengeRating, _eType) == 0x000000, "Member 'BFGWidget_IngameMainMenu_SetChallengeRating::_eType' has a wrong offset!");
static_assert(offsetof(BFGWidget_IngameMainMenu_SetChallengeRating, _iRating) == 0x000004, "Member 'BFGWidget_IngameMainMenu_SetChallengeRating::_iRating' has a wrong offset!");

// Function BFGCore.BFGWidget_IngameMainMenu.SetDNAAmount
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_IngameMainMenu_SetDNAAmount final
{
public:
	int32                                         _iDNAAmount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_IngameMainMenu_SetDNAAmount) == 0x000004, "Wrong alignment on BFGWidget_IngameMainMenu_SetDNAAmount");
static_assert(sizeof(BFGWidget_IngameMainMenu_SetDNAAmount) == 0x000004, "Wrong size on BFGWidget_IngameMainMenu_SetDNAAmount");
static_assert(offsetof(BFGWidget_IngameMainMenu_SetDNAAmount, _iDNAAmount) == 0x000000, "Member 'BFGWidget_IngameMainMenu_SetDNAAmount::_iDNAAmount' has a wrong offset!");

// Function BFGCore.BFGWidget_IngameMainMenu.SetDroneCount
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_IngameMainMenu_SetDroneCount final
{
public:
	int32                                         _iMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iCurrent;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_IngameMainMenu_SetDroneCount) == 0x000004, "Wrong alignment on BFGWidget_IngameMainMenu_SetDroneCount");
static_assert(sizeof(BFGWidget_IngameMainMenu_SetDroneCount) == 0x000008, "Wrong size on BFGWidget_IngameMainMenu_SetDroneCount");
static_assert(offsetof(BFGWidget_IngameMainMenu_SetDroneCount, _iMax) == 0x000000, "Member 'BFGWidget_IngameMainMenu_SetDroneCount::_iMax' has a wrong offset!");
static_assert(offsetof(BFGWidget_IngameMainMenu_SetDroneCount, _iCurrent) == 0x000004, "Member 'BFGWidget_IngameMainMenu_SetDroneCount::_iCurrent' has a wrong offset!");

// Function BFGCore.BFGWidget_IngameMainMenu.SetWorldInfoEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_IngameMainMenu_SetWorldInfoEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_IngameMainMenu_SetWorldInfoEnabled) == 0x000001, "Wrong alignment on BFGWidget_IngameMainMenu_SetWorldInfoEnabled");
static_assert(sizeof(BFGWidget_IngameMainMenu_SetWorldInfoEnabled) == 0x000001, "Wrong size on BFGWidget_IngameMainMenu_SetWorldInfoEnabled");
static_assert(offsetof(BFGWidget_IngameMainMenu_SetWorldInfoEnabled, _bEnabled) == 0x000000, "Member 'BFGWidget_IngameMainMenu_SetWorldInfoEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGWidget_IngameMainMenu.UpdateWorldDescription
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_IngameMainMenu_UpdateWorldDescription final
{
public:
	class FText                                   _oDescription;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_IngameMainMenu_UpdateWorldDescription) == 0x000008, "Wrong alignment on BFGWidget_IngameMainMenu_UpdateWorldDescription");
static_assert(sizeof(BFGWidget_IngameMainMenu_UpdateWorldDescription) == 0x000018, "Wrong size on BFGWidget_IngameMainMenu_UpdateWorldDescription");
static_assert(offsetof(BFGWidget_IngameMainMenu_UpdateWorldDescription, _oDescription) == 0x000000, "Member 'BFGWidget_IngameMainMenu_UpdateWorldDescription::_oDescription' has a wrong offset!");

// Function BFGCore.BFGActorAlertSystem.EnableAlertSystem
// 0x0001 (0x0001 - 0x0000)
struct BFGActorAlertSystem_EnableAlertSystem final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorAlertSystem_EnableAlertSystem) == 0x000001, "Wrong alignment on BFGActorAlertSystem_EnableAlertSystem");
static_assert(sizeof(BFGActorAlertSystem_EnableAlertSystem) == 0x000001, "Wrong size on BFGActorAlertSystem_EnableAlertSystem");
static_assert(offsetof(BFGActorAlertSystem_EnableAlertSystem, Enable) == 0x000000, "Member 'BFGActorAlertSystem_EnableAlertSystem::Enable' has a wrong offset!");

// Function BFGCore.BFGActorAlertSystem.IsAlertSystemEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorAlertSystem_IsAlertSystemEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorAlertSystem_IsAlertSystemEnabled) == 0x000001, "Wrong alignment on BFGActorAlertSystem_IsAlertSystemEnabled");
static_assert(sizeof(BFGActorAlertSystem_IsAlertSystemEnabled) == 0x000001, "Wrong size on BFGActorAlertSystem_IsAlertSystemEnabled");
static_assert(offsetof(BFGActorAlertSystem_IsAlertSystemEnabled, ReturnValue) == 0x000000, "Member 'BFGActorAlertSystem_IsAlertSystemEnabled::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_HUD_TutorialIndicator.ActionTutorialIndictorAnimationState__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_TutorialIndicator_ActionTutorialIndictorAnimationState__DelegateSignature final
{
public:
	EBFGTutorialIndicatorAnimationState           _eCurrentState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_TutorialIndicator_ActionTutorialIndictorAnimationState__DelegateSignature) == 0x000001, "Wrong alignment on BFGWidget_HUD_TutorialIndicator_ActionTutorialIndictorAnimationState__DelegateSignature");
static_assert(sizeof(BFGWidget_HUD_TutorialIndicator_ActionTutorialIndictorAnimationState__DelegateSignature) == 0x000001, "Wrong size on BFGWidget_HUD_TutorialIndicator_ActionTutorialIndictorAnimationState__DelegateSignature");
static_assert(offsetof(BFGWidget_HUD_TutorialIndicator_ActionTutorialIndictorAnimationState__DelegateSignature, _eCurrentState) == 0x000000, "Member 'BFGWidget_HUD_TutorialIndicator_ActionTutorialIndictorAnimationState__DelegateSignature::_eCurrentState' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_TutorialIndicator.ComputeSpeedInterpolate
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_TutorialIndicator_ComputeSpeedInterpolate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedInterpolate) == 0x000004, "Wrong alignment on BFGWidget_HUD_TutorialIndicator_ComputeSpeedInterpolate");
static_assert(sizeof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedInterpolate) == 0x000004, "Wrong size on BFGWidget_HUD_TutorialIndicator_ComputeSpeedInterpolate");
static_assert(offsetof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedInterpolate, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_TutorialIndicator_ComputeSpeedInterpolate::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_TutorialIndicator.ComputeSpeedPopup
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_TutorialIndicator_ComputeSpeedPopup final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedPopup) == 0x000004, "Wrong alignment on BFGWidget_HUD_TutorialIndicator_ComputeSpeedPopup");
static_assert(sizeof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedPopup) == 0x000004, "Wrong size on BFGWidget_HUD_TutorialIndicator_ComputeSpeedPopup");
static_assert(offsetof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedPopup, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_TutorialIndicator_ComputeSpeedPopup::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_TutorialIndicator.ComputeSpeedVanish
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_TutorialIndicator_ComputeSpeedVanish final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedVanish) == 0x000004, "Wrong alignment on BFGWidget_HUD_TutorialIndicator_ComputeSpeedVanish");
static_assert(sizeof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedVanish) == 0x000004, "Wrong size on BFGWidget_HUD_TutorialIndicator_ComputeSpeedVanish");
static_assert(offsetof(BFGWidget_HUD_TutorialIndicator_ComputeSpeedVanish, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_TutorialIndicator_ComputeSpeedVanish::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_TutorialIndicator.SetIndicatorIcon
// 0x0088 (0x0088 - 0x0000)
struct BFGWidget_HUD_TutorialIndicator_SetIndicatorIcon final
{
public:
	struct FSlateBrush                            _slateBrush;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_TutorialIndicator_SetIndicatorIcon) == 0x000008, "Wrong alignment on BFGWidget_HUD_TutorialIndicator_SetIndicatorIcon");
static_assert(sizeof(BFGWidget_HUD_TutorialIndicator_SetIndicatorIcon) == 0x000088, "Wrong size on BFGWidget_HUD_TutorialIndicator_SetIndicatorIcon");
static_assert(offsetof(BFGWidget_HUD_TutorialIndicator_SetIndicatorIcon, _slateBrush) == 0x000000, "Member 'BFGWidget_HUD_TutorialIndicator_SetIndicatorIcon::_slateBrush' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_TutorialIndicator.SetIndicatorVisibility
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_TutorialIndicator_SetIndicatorVisibility final
{
public:
	bool                                          _bVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_TutorialIndicator_SetIndicatorVisibility) == 0x000001, "Wrong alignment on BFGWidget_HUD_TutorialIndicator_SetIndicatorVisibility");
static_assert(sizeof(BFGWidget_HUD_TutorialIndicator_SetIndicatorVisibility) == 0x000001, "Wrong size on BFGWidget_HUD_TutorialIndicator_SetIndicatorVisibility");
static_assert(offsetof(BFGWidget_HUD_TutorialIndicator_SetIndicatorVisibility, _bVisible) == 0x000000, "Member 'BFGWidget_HUD_TutorialIndicator_SetIndicatorVisibility::_bVisible' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_TutorialIndicator.UpdateIndicatorPosition
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_TutorialIndicator_UpdateIndicatorPosition final
{
public:
	struct FVector2D                              _vPosition;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_TutorialIndicator_UpdateIndicatorPosition) == 0x000004, "Wrong alignment on BFGWidget_HUD_TutorialIndicator_UpdateIndicatorPosition");
static_assert(sizeof(BFGWidget_HUD_TutorialIndicator_UpdateIndicatorPosition) == 0x000008, "Wrong size on BFGWidget_HUD_TutorialIndicator_UpdateIndicatorPosition");
static_assert(offsetof(BFGWidget_HUD_TutorialIndicator_UpdateIndicatorPosition, _vPosition) == 0x000000, "Member 'BFGWidget_HUD_TutorialIndicator_UpdateIndicatorPosition::_vPosition' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.AddEffect_CS
// 0x0060 (0x0060 - 0x0000)
struct BFGActorBuilding_AddEffect_CS final
{
public:
	struct FBFGBuildingDestructionCloudEffects    _effect;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_AddEffect_CS) == 0x000010, "Wrong alignment on BFGActorBuilding_AddEffect_CS");
static_assert(sizeof(BFGActorBuilding_AddEffect_CS) == 0x000060, "Wrong size on BFGActorBuilding_AddEffect_CS");
static_assert(offsetof(BFGActorBuilding_AddEffect_CS, _effect) == 0x000000, "Member 'BFGActorBuilding_AddEffect_CS::_effect' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.AddEffect_DS
// 0x0080 (0x0080 - 0x0000)
struct BFGActorBuilding_AddEffect_DS final
{
public:
	struct FBFGBuildingDestructionDetailEffects   _effect;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_AddEffect_DS) == 0x000010, "Wrong alignment on BFGActorBuilding_AddEffect_DS");
static_assert(sizeof(BFGActorBuilding_AddEffect_DS) == 0x000080, "Wrong size on BFGActorBuilding_AddEffect_DS");
static_assert(offsetof(BFGActorBuilding_AddEffect_DS, _effect) == 0x000000, "Member 'BFGActorBuilding_AddEffect_DS::_effect' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.AddEffect_FS
// 0x0060 (0x0060 - 0x0000)
struct BFGActorBuilding_AddEffect_FS final
{
public:
	struct FBFGBuildingFluffEffects               _effect;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_AddEffect_FS) == 0x000010, "Wrong alignment on BFGActorBuilding_AddEffect_FS");
static_assert(sizeof(BFGActorBuilding_AddEffect_FS) == 0x000060, "Wrong size on BFGActorBuilding_AddEffect_FS");
static_assert(offsetof(BFGActorBuilding_AddEffect_FS, _effect) == 0x000000, "Member 'BFGActorBuilding_AddEffect_FS::_effect' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.AddEffect_PS
// 0x0070 (0x0070 - 0x0000)
struct BFGActorBuilding_AddEffect_PS final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGBuildingDestructionPropagationEffects _effect;                                           // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_AddEffect_PS) == 0x000010, "Wrong alignment on BFGActorBuilding_AddEffect_PS");
static_assert(sizeof(BFGActorBuilding_AddEffect_PS) == 0x000070, "Wrong size on BFGActorBuilding_AddEffect_PS");
static_assert(offsetof(BFGActorBuilding_AddEffect_PS, _ePhase) == 0x000000, "Member 'BFGActorBuilding_AddEffect_PS::_ePhase' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_AddEffect_PS, _effect) == 0x000010, "Member 'BFGActorBuilding_AddEffect_PS::_effect' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.AddRuinElement
// 0x0060 (0x0060 - 0x0000)
struct BFGActorBuilding_AddRuinElement final
{
public:
	struct FTransform                             _Transform;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        _pPFX;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            _pStaticMesh;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 _aMaterialVariationKeys;                           // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             _aMaterialVariationValues;                         // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_AddRuinElement) == 0x000010, "Wrong alignment on BFGActorBuilding_AddRuinElement");
static_assert(sizeof(BFGActorBuilding_AddRuinElement) == 0x000060, "Wrong size on BFGActorBuilding_AddRuinElement");
static_assert(offsetof(BFGActorBuilding_AddRuinElement, _Transform) == 0x000000, "Member 'BFGActorBuilding_AddRuinElement::_Transform' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_AddRuinElement, _pPFX) == 0x000030, "Member 'BFGActorBuilding_AddRuinElement::_pPFX' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_AddRuinElement, _pStaticMesh) == 0x000038, "Member 'BFGActorBuilding_AddRuinElement::_pStaticMesh' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_AddRuinElement, _aMaterialVariationKeys) == 0x000040, "Member 'BFGActorBuilding_AddRuinElement::_aMaterialVariationKeys' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_AddRuinElement, _aMaterialVariationValues) == 0x000050, "Member 'BFGActorBuilding_AddRuinElement::_aMaterialVariationValues' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.ApplyRadialDamageToBuilding
// 0x0060 (0x0060 - 0x0000)
struct BFGActorBuilding_ApplyRadialDamageToBuilding final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _effectTransform;                                  // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_ApplyRadialDamageToBuilding) == 0x000010, "Wrong alignment on BFGActorBuilding_ApplyRadialDamageToBuilding");
static_assert(sizeof(BFGActorBuilding_ApplyRadialDamageToBuilding) == 0x000060, "Wrong size on BFGActorBuilding_ApplyRadialDamageToBuilding");
static_assert(offsetof(BFGActorBuilding_ApplyRadialDamageToBuilding, _ePhase) == 0x000000, "Member 'BFGActorBuilding_ApplyRadialDamageToBuilding::_ePhase' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_ApplyRadialDamageToBuilding, _effectTransform) == 0x000010, "Member 'BFGActorBuilding_ApplyRadialDamageToBuilding::_effectTransform' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_ApplyRadialDamageToBuilding, LatentInfo) == 0x000040, "Member 'BFGActorBuilding_ApplyRadialDamageToBuilding::LatentInfo' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.BuildLevel
// 0x0060 (0x0060 - 0x0000)
struct BFGActorBuilding_BuildLevel final
{
public:
	struct FBFGBuilding_Level                     _levelData;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_BuildLevel) == 0x000010, "Wrong alignment on BFGActorBuilding_BuildLevel");
static_assert(sizeof(BFGActorBuilding_BuildLevel) == 0x000060, "Wrong size on BFGActorBuilding_BuildLevel");
static_assert(offsetof(BFGActorBuilding_BuildLevel, _levelData) == 0x000000, "Member 'BFGActorBuilding_BuildLevel::_levelData' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_BuildLevel, ReturnValue) == 0x000050, "Member 'BFGActorBuilding_BuildLevel::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.BuildLevelWithFloorHeight
// 0x0070 (0x0070 - 0x0000)
struct BFGActorBuilding_BuildLevelWithFloorHeight final
{
public:
	float                                         _fFloorHeightInOut;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGBuilding_Level                     _levelData;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_BuildLevelWithFloorHeight) == 0x000010, "Wrong alignment on BFGActorBuilding_BuildLevelWithFloorHeight");
static_assert(sizeof(BFGActorBuilding_BuildLevelWithFloorHeight) == 0x000070, "Wrong size on BFGActorBuilding_BuildLevelWithFloorHeight");
static_assert(offsetof(BFGActorBuilding_BuildLevelWithFloorHeight, _fFloorHeightInOut) == 0x000000, "Member 'BFGActorBuilding_BuildLevelWithFloorHeight::_fFloorHeightInOut' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_BuildLevelWithFloorHeight, _levelData) == 0x000010, "Member 'BFGActorBuilding_BuildLevelWithFloorHeight::_levelData' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_BuildLevelWithFloorHeight, ReturnValue) == 0x000060, "Member 'BFGActorBuilding_BuildLevelWithFloorHeight::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.IncDestructionPropagationIndexUseCount
// 0x0008 (0x0008 - 0x0000)
struct BFGActorBuilding_IncDestructionPropagationIndexUseCount final
{
public:
	int32                                         _iDPI;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_IncDestructionPropagationIndexUseCount) == 0x000004, "Wrong alignment on BFGActorBuilding_IncDestructionPropagationIndexUseCount");
static_assert(sizeof(BFGActorBuilding_IncDestructionPropagationIndexUseCount) == 0x000008, "Wrong size on BFGActorBuilding_IncDestructionPropagationIndexUseCount");
static_assert(offsetof(BFGActorBuilding_IncDestructionPropagationIndexUseCount, _iDPI) == 0x000000, "Member 'BFGActorBuilding_IncDestructionPropagationIndexUseCount::_iDPI' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_IncDestructionPropagationIndexUseCount, ReturnValue) == 0x000004, "Member 'BFGActorBuilding_IncDestructionPropagationIndexUseCount::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.InitializeRecording
// 0x0004 (0x0004 - 0x0000)
struct BFGActorBuilding_InitializeRecording final
{
public:
	float                                         _fTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_InitializeRecording) == 0x000004, "Wrong alignment on BFGActorBuilding_InitializeRecording");
static_assert(sizeof(BFGActorBuilding_InitializeRecording) == 0x000004, "Wrong size on BFGActorBuilding_InitializeRecording");
static_assert(offsetof(BFGActorBuilding_InitializeRecording, _fTime) == 0x000000, "Member 'BFGActorBuilding_InitializeRecording::_fTime' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.IsRecording
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_IsRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_IsRecording) == 0x000001, "Wrong alignment on BFGActorBuilding_IsRecording");
static_assert(sizeof(BFGActorBuilding_IsRecording) == 0x000001, "Wrong size on BFGActorBuilding_IsRecording");
static_assert(offsetof(BFGActorBuilding_IsRecording, ReturnValue) == 0x000000, "Member 'BFGActorBuilding_IsRecording::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.OnBuildingNotHitSinceElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct BFGActorBuilding_OnBuildingNotHitSinceElapsedTime final
{
public:
	float                                         _fElapsedTimeWithoutAHit;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_OnBuildingNotHitSinceElapsedTime) == 0x000004, "Wrong alignment on BFGActorBuilding_OnBuildingNotHitSinceElapsedTime");
static_assert(sizeof(BFGActorBuilding_OnBuildingNotHitSinceElapsedTime) == 0x000004, "Wrong size on BFGActorBuilding_OnBuildingNotHitSinceElapsedTime");
static_assert(offsetof(BFGActorBuilding_OnBuildingNotHitSinceElapsedTime, _fElapsedTimeWithoutAHit) == 0x000000, "Member 'BFGActorBuilding_OnBuildingNotHitSinceElapsedTime::_fElapsedTimeWithoutAHit' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.OnCreateBlastMeshComponent
// 0x00A0 (0x00A0 - 0x0000)
struct BFGActorBuilding_OnCreateBlastMeshComponent final
{
public:
	struct FTransform                             _relativeTransform;                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UBlastMesh*                             _pBlastMesh;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGBuildingElement                    _Element;                                          // 0x0040(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UBlastMeshComponent*                    ReturnValue;                                       // 0x0090(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_OnCreateBlastMeshComponent) == 0x000010, "Wrong alignment on BFGActorBuilding_OnCreateBlastMeshComponent");
static_assert(sizeof(BFGActorBuilding_OnCreateBlastMeshComponent) == 0x0000A0, "Wrong size on BFGActorBuilding_OnCreateBlastMeshComponent");
static_assert(offsetof(BFGActorBuilding_OnCreateBlastMeshComponent, _relativeTransform) == 0x000000, "Member 'BFGActorBuilding_OnCreateBlastMeshComponent::_relativeTransform' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_OnCreateBlastMeshComponent, _pBlastMesh) == 0x000030, "Member 'BFGActorBuilding_OnCreateBlastMeshComponent::_pBlastMesh' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_OnCreateBlastMeshComponent, _Element) == 0x000040, "Member 'BFGActorBuilding_OnCreateBlastMeshComponent::_Element' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_OnCreateBlastMeshComponent, ReturnValue) == 0x000090, "Member 'BFGActorBuilding_OnCreateBlastMeshComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.OnCreateGeometryCacheComponent
// 0x00A0 (0x00A0 - 0x0000)
struct BFGActorBuilding_OnCreateGeometryCacheComponent final
{
public:
	struct FTransform                             _relativeTransform;                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UGeometryCache*                         _pGeometryCache;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGBuildingElement                    _Element;                                          // 0x0040(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGeometryCacheComponent*                ReturnValue;                                       // 0x0090(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_OnCreateGeometryCacheComponent) == 0x000010, "Wrong alignment on BFGActorBuilding_OnCreateGeometryCacheComponent");
static_assert(sizeof(BFGActorBuilding_OnCreateGeometryCacheComponent) == 0x0000A0, "Wrong size on BFGActorBuilding_OnCreateGeometryCacheComponent");
static_assert(offsetof(BFGActorBuilding_OnCreateGeometryCacheComponent, _relativeTransform) == 0x000000, "Member 'BFGActorBuilding_OnCreateGeometryCacheComponent::_relativeTransform' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_OnCreateGeometryCacheComponent, _pGeometryCache) == 0x000030, "Member 'BFGActorBuilding_OnCreateGeometryCacheComponent::_pGeometryCache' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_OnCreateGeometryCacheComponent, _Element) == 0x000040, "Member 'BFGActorBuilding_OnCreateGeometryCacheComponent::_Element' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_OnCreateGeometryCacheComponent, ReturnValue) == 0x000090, "Member 'BFGActorBuilding_OnCreateGeometryCacheComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.OnTriggerExtraEffectsOnStateChange
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_OnTriggerExtraEffectsOnStateChange final
{
public:
	EBFGBuilding_DestructionState                 _eNewState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_OnTriggerExtraEffectsOnStateChange) == 0x000001, "Wrong alignment on BFGActorBuilding_OnTriggerExtraEffectsOnStateChange");
static_assert(sizeof(BFGActorBuilding_OnTriggerExtraEffectsOnStateChange) == 0x000001, "Wrong size on BFGActorBuilding_OnTriggerExtraEffectsOnStateChange");
static_assert(offsetof(BFGActorBuilding_OnTriggerExtraEffectsOnStateChange, _eNewState) == 0x000000, "Member 'BFGActorBuilding_OnTriggerExtraEffectsOnStateChange::_eNewState' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.ResetBuildingForCheckpoint
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_ResetBuildingForCheckpoint final
{
public:
	bool                                          _bDestroyed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_ResetBuildingForCheckpoint) == 0x000001, "Wrong alignment on BFGActorBuilding_ResetBuildingForCheckpoint");
static_assert(sizeof(BFGActorBuilding_ResetBuildingForCheckpoint) == 0x000001, "Wrong size on BFGActorBuilding_ResetBuildingForCheckpoint");
static_assert(offsetof(BFGActorBuilding_ResetBuildingForCheckpoint, _bDestroyed) == 0x000000, "Member 'BFGActorBuilding_ResetBuildingForCheckpoint::_bDestroyed' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SetAttachedActorVisibilityState
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_SetAttachedActorVisibilityState final
{
public:
	bool                                          _bVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SetAttachedActorVisibilityState) == 0x000001, "Wrong alignment on BFGActorBuilding_SetAttachedActorVisibilityState");
static_assert(sizeof(BFGActorBuilding_SetAttachedActorVisibilityState) == 0x000001, "Wrong size on BFGActorBuilding_SetAttachedActorVisibilityState");
static_assert(offsetof(BFGActorBuilding_SetAttachedActorVisibilityState, _bVisible) == 0x000000, "Member 'BFGActorBuilding_SetAttachedActorVisibilityState::_bVisible' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SetDestructionState
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_SetDestructionState final
{
public:
	EBFGBuilding_DestructionState                 _eDestructionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SetDestructionState) == 0x000001, "Wrong alignment on BFGActorBuilding_SetDestructionState");
static_assert(sizeof(BFGActorBuilding_SetDestructionState) == 0x000001, "Wrong size on BFGActorBuilding_SetDestructionState");
static_assert(offsetof(BFGActorBuilding_SetDestructionState, _eDestructionState) == 0x000000, "Member 'BFGActorBuilding_SetDestructionState::_eDestructionState' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SortEffects_PS
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_SortEffects_PS final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SortEffects_PS) == 0x000001, "Wrong alignment on BFGActorBuilding_SortEffects_PS");
static_assert(sizeof(BFGActorBuilding_SortEffects_PS) == 0x000001, "Wrong size on BFGActorBuilding_SortEffects_PS");
static_assert(offsetof(BFGActorBuilding_SortEffects_PS, _ePhase) == 0x000000, "Member 'BFGActorBuilding_SortEffects_PS::_ePhase' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SortEffects_PS_RefLocation
// 0x0010 (0x0010 - 0x0000)
struct BFGActorBuilding_SortEffects_PS_RefLocation final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _vReferenceLocation;                               // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SortEffects_PS_RefLocation) == 0x000004, "Wrong alignment on BFGActorBuilding_SortEffects_PS_RefLocation");
static_assert(sizeof(BFGActorBuilding_SortEffects_PS_RefLocation) == 0x000010, "Wrong size on BFGActorBuilding_SortEffects_PS_RefLocation");
static_assert(offsetof(BFGActorBuilding_SortEffects_PS_RefLocation, _ePhase) == 0x000000, "Member 'BFGActorBuilding_SortEffects_PS_RefLocation::_ePhase' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_SortEffects_PS_RefLocation, _vReferenceLocation) == 0x000004, "Member 'BFGActorBuilding_SortEffects_PS_RefLocation::_vReferenceLocation' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SpawnDestructionEffect_Detail
// 0x0004 (0x0004 - 0x0000)
struct BFGActorBuilding_SpawnDestructionEffect_Detail final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SpawnDestructionEffect_Detail) == 0x000004, "Wrong alignment on BFGActorBuilding_SpawnDestructionEffect_Detail");
static_assert(sizeof(BFGActorBuilding_SpawnDestructionEffect_Detail) == 0x000004, "Wrong size on BFGActorBuilding_SpawnDestructionEffect_Detail");
static_assert(offsetof(BFGActorBuilding_SpawnDestructionEffect_Detail, _iIndex) == 0x000000, "Member 'BFGActorBuilding_SpawnDestructionEffect_Detail::_iIndex' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SpawnDestructionEffects_Propagation
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_SpawnDestructionEffects_Propagation final
{
public:
	EBFGBuilding_DestructionPhase                 _eDestructionPhase;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SpawnDestructionEffects_Propagation) == 0x000001, "Wrong alignment on BFGActorBuilding_SpawnDestructionEffects_Propagation");
static_assert(sizeof(BFGActorBuilding_SpawnDestructionEffects_Propagation) == 0x000001, "Wrong size on BFGActorBuilding_SpawnDestructionEffects_Propagation");
static_assert(offsetof(BFGActorBuilding_SpawnDestructionEffects_Propagation, _eDestructionPhase) == 0x000000, "Member 'BFGActorBuilding_SpawnDestructionEffects_Propagation::_eDestructionPhase' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SpawnDestructionMeshes
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_SpawnDestructionMeshes final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SpawnDestructionMeshes) == 0x000001, "Wrong alignment on BFGActorBuilding_SpawnDestructionMeshes");
static_assert(sizeof(BFGActorBuilding_SpawnDestructionMeshes) == 0x000001, "Wrong size on BFGActorBuilding_SpawnDestructionMeshes");
static_assert(offsetof(BFGActorBuilding_SpawnDestructionMeshes, _ePhase) == 0x000000, "Member 'BFGActorBuilding_SpawnDestructionMeshes::_ePhase' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SpawnDestructionMeshes_Latent
// 0x0020 (0x0020 - 0x0000)
struct BFGActorBuilding_SpawnDestructionMeshes_Latent final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SpawnDestructionMeshes_Latent) == 0x000008, "Wrong alignment on BFGActorBuilding_SpawnDestructionMeshes_Latent");
static_assert(sizeof(BFGActorBuilding_SpawnDestructionMeshes_Latent) == 0x000020, "Wrong size on BFGActorBuilding_SpawnDestructionMeshes_Latent");
static_assert(offsetof(BFGActorBuilding_SpawnDestructionMeshes_Latent, _ePhase) == 0x000000, "Member 'BFGActorBuilding_SpawnDestructionMeshes_Latent::_ePhase' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_SpawnDestructionMeshes_Latent, LatentInfo) == 0x000008, "Member 'BFGActorBuilding_SpawnDestructionMeshes_Latent::LatentInfo' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.StartDamageEffects
// 0x000C (0x000C - 0x0000)
struct BFGActorBuilding_StartDamageEffects final
{
public:
	struct FVector                                _vHitAt;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_StartDamageEffects) == 0x000004, "Wrong alignment on BFGActorBuilding_StartDamageEffects");
static_assert(sizeof(BFGActorBuilding_StartDamageEffects) == 0x00000C, "Wrong size on BFGActorBuilding_StartDamageEffects");
static_assert(offsetof(BFGActorBuilding_StartDamageEffects, _vHitAt) == 0x000000, "Member 'BFGActorBuilding_StartDamageEffects::_vHitAt' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.Stat_IsDeadChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorBuilding_Stat_IsDeadChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_Stat_IsDeadChanged) == 0x000008, "Wrong alignment on BFGActorBuilding_Stat_IsDeadChanged");
static_assert(sizeof(BFGActorBuilding_Stat_IsDeadChanged) == 0x000010, "Wrong size on BFGActorBuilding_Stat_IsDeadChanged");
static_assert(offsetof(BFGActorBuilding_Stat_IsDeadChanged, _pActor) == 0x000000, "Member 'BFGActorBuilding_Stat_IsDeadChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_Stat_IsDeadChanged, _pStat) == 0x000008, "Member 'BFGActorBuilding_Stat_IsDeadChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.UpdateDamageEffects
// 0x000C (0x000C - 0x0000)
struct BFGActorBuilding_UpdateDamageEffects final
{
public:
	struct FVector                                _vHitAt;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_UpdateDamageEffects) == 0x000004, "Wrong alignment on BFGActorBuilding_UpdateDamageEffects");
static_assert(sizeof(BFGActorBuilding_UpdateDamageEffects) == 0x00000C, "Wrong size on BFGActorBuilding_UpdateDamageEffects");
static_assert(offsetof(BFGActorBuilding_UpdateDamageEffects, _vHitAt) == 0x000000, "Member 'BFGActorBuilding_UpdateDamageEffects::_vHitAt' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.UpdateRecordingComponent
// 0x0004 (0x0004 - 0x0000)
struct BFGActorBuilding_UpdateRecordingComponent final
{
public:
	float                                         _fTimeDelta;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_UpdateRecordingComponent) == 0x000004, "Wrong alignment on BFGActorBuilding_UpdateRecordingComponent");
static_assert(sizeof(BFGActorBuilding_UpdateRecordingComponent) == 0x000004, "Wrong size on BFGActorBuilding_UpdateRecordingComponent");
static_assert(offsetof(BFGActorBuilding_UpdateRecordingComponent, _fTimeDelta) == 0x000000, "Member 'BFGActorBuilding_UpdateRecordingComponent::_fTimeDelta' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.UpdateRuntimeDestructState
// 0x0004 (0x0004 - 0x0000)
struct BFGActorBuilding_UpdateRuntimeDestructState final
{
public:
	float                                         _fDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_UpdateRuntimeDestructState) == 0x000004, "Wrong alignment on BFGActorBuilding_UpdateRuntimeDestructState");
static_assert(sizeof(BFGActorBuilding_UpdateRuntimeDestructState) == 0x000004, "Wrong size on BFGActorBuilding_UpdateRuntimeDestructState");
static_assert(offsetof(BFGActorBuilding_UpdateRuntimeDestructState, _fDeltaTime) == 0x000000, "Member 'BFGActorBuilding_UpdateRuntimeDestructState::_fDeltaTime' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.CalcSumDestructionPropagationIndexUseCounts
// 0x0004 (0x0004 - 0x0000)
struct BFGActorBuilding_CalcSumDestructionPropagationIndexUseCounts final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_CalcSumDestructionPropagationIndexUseCounts) == 0x000004, "Wrong alignment on BFGActorBuilding_CalcSumDestructionPropagationIndexUseCounts");
static_assert(sizeof(BFGActorBuilding_CalcSumDestructionPropagationIndexUseCounts) == 0x000004, "Wrong size on BFGActorBuilding_CalcSumDestructionPropagationIndexUseCounts");
static_assert(offsetof(BFGActorBuilding_CalcSumDestructionPropagationIndexUseCounts, ReturnValue) == 0x000000, "Member 'BFGActorBuilding_CalcSumDestructionPropagationIndexUseCounts::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.GetDestructionPropagationIndexUseCount
// 0x0008 (0x0008 - 0x0000)
struct BFGActorBuilding_GetDestructionPropagationIndexUseCount final
{
public:
	int32                                         _iDPI;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_GetDestructionPropagationIndexUseCount) == 0x000004, "Wrong alignment on BFGActorBuilding_GetDestructionPropagationIndexUseCount");
static_assert(sizeof(BFGActorBuilding_GetDestructionPropagationIndexUseCount) == 0x000008, "Wrong size on BFGActorBuilding_GetDestructionPropagationIndexUseCount");
static_assert(offsetof(BFGActorBuilding_GetDestructionPropagationIndexUseCount, _iDPI) == 0x000000, "Member 'BFGActorBuilding_GetDestructionPropagationIndexUseCount::_iDPI' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_GetDestructionPropagationIndexUseCount, ReturnValue) == 0x000004, "Member 'BFGActorBuilding_GetDestructionPropagationIndexUseCount::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.GetDestructionState
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_GetDestructionState final
{
public:
	EBFGBuilding_DestructionState                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_GetDestructionState) == 0x000001, "Wrong alignment on BFGActorBuilding_GetDestructionState");
static_assert(sizeof(BFGActorBuilding_GetDestructionState) == 0x000001, "Wrong size on BFGActorBuilding_GetDestructionState");
static_assert(offsetof(BFGActorBuilding_GetDestructionState, ReturnValue) == 0x000000, "Member 'BFGActorBuilding_GetDestructionState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.GetEffects_PS
// 0x0018 (0x0018 - 0x0000)
struct BFGActorBuilding_GetEffects_PS final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBFGBuildingDestructionPropagationEffects> ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_GetEffects_PS) == 0x000008, "Wrong alignment on BFGActorBuilding_GetEffects_PS");
static_assert(sizeof(BFGActorBuilding_GetEffects_PS) == 0x000018, "Wrong size on BFGActorBuilding_GetEffects_PS");
static_assert(offsetof(BFGActorBuilding_GetEffects_PS, _ePhase) == 0x000000, "Member 'BFGActorBuilding_GetEffects_PS::_ePhase' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_GetEffects_PS, ReturnValue) == 0x000008, "Member 'BFGActorBuilding_GetEffects_PS::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.GetLastHitResult
// 0x0088 (0x0088 - 0x0000)
struct BFGActorBuilding_GetLastHitResult final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_GetLastHitResult) == 0x000004, "Wrong alignment on BFGActorBuilding_GetLastHitResult");
static_assert(sizeof(BFGActorBuilding_GetLastHitResult) == 0x000088, "Wrong size on BFGActorBuilding_GetLastHitResult");
static_assert(offsetof(BFGActorBuilding_GetLastHitResult, ReturnValue) == 0x000000, "Member 'BFGActorBuilding_GetLastHitResult::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.GetOrLoadBuildingHelperClass
// 0x0008 (0x0008 - 0x0000)
struct BFGActorBuilding_GetOrLoadBuildingHelperClass final
{
public:
	TSubclassOf<class ABFGBuildingHelper>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_GetOrLoadBuildingHelperClass) == 0x000008, "Wrong alignment on BFGActorBuilding_GetOrLoadBuildingHelperClass");
static_assert(sizeof(BFGActorBuilding_GetOrLoadBuildingHelperClass) == 0x000008, "Wrong size on BFGActorBuilding_GetOrLoadBuildingHelperClass");
static_assert(offsetof(BFGActorBuilding_GetOrLoadBuildingHelperClass, ReturnValue) == 0x000000, "Member 'BFGActorBuilding_GetOrLoadBuildingHelperClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.GetOrLoadRuinsHelperClass
// 0x0008 (0x0008 - 0x0000)
struct BFGActorBuilding_GetOrLoadRuinsHelperClass final
{
public:
	TSubclassOf<class ABFGBuildingHelper>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_GetOrLoadRuinsHelperClass) == 0x000008, "Wrong alignment on BFGActorBuilding_GetOrLoadRuinsHelperClass");
static_assert(sizeof(BFGActorBuilding_GetOrLoadRuinsHelperClass) == 0x000008, "Wrong size on BFGActorBuilding_GetOrLoadRuinsHelperClass");
static_assert(offsetof(BFGActorBuilding_GetOrLoadRuinsHelperClass, ReturnValue) == 0x000000, "Member 'BFGActorBuilding_GetOrLoadRuinsHelperClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.HasEffectWithSocketName_CS
// 0x000C (0x000C - 0x0000)
struct BFGActorBuilding_HasEffectWithSocketName_CS final
{
public:
	class FName                                   _socketName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_HasEffectWithSocketName_CS) == 0x000004, "Wrong alignment on BFGActorBuilding_HasEffectWithSocketName_CS");
static_assert(sizeof(BFGActorBuilding_HasEffectWithSocketName_CS) == 0x00000C, "Wrong size on BFGActorBuilding_HasEffectWithSocketName_CS");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_CS, _socketName) == 0x000000, "Member 'BFGActorBuilding_HasEffectWithSocketName_CS::_socketName' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_CS, ReturnValue) == 0x000008, "Member 'BFGActorBuilding_HasEffectWithSocketName_CS::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.HasEffectWithSocketName_DS
// 0x000C (0x000C - 0x0000)
struct BFGActorBuilding_HasEffectWithSocketName_DS final
{
public:
	class FName                                   _socketName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_HasEffectWithSocketName_DS) == 0x000004, "Wrong alignment on BFGActorBuilding_HasEffectWithSocketName_DS");
static_assert(sizeof(BFGActorBuilding_HasEffectWithSocketName_DS) == 0x00000C, "Wrong size on BFGActorBuilding_HasEffectWithSocketName_DS");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_DS, _socketName) == 0x000000, "Member 'BFGActorBuilding_HasEffectWithSocketName_DS::_socketName' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_DS, ReturnValue) == 0x000008, "Member 'BFGActorBuilding_HasEffectWithSocketName_DS::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.HasEffectWithSocketName_FS
// 0x000C (0x000C - 0x0000)
struct BFGActorBuilding_HasEffectWithSocketName_FS final
{
public:
	class FName                                   _socketName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_HasEffectWithSocketName_FS) == 0x000004, "Wrong alignment on BFGActorBuilding_HasEffectWithSocketName_FS");
static_assert(sizeof(BFGActorBuilding_HasEffectWithSocketName_FS) == 0x00000C, "Wrong size on BFGActorBuilding_HasEffectWithSocketName_FS");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_FS, _socketName) == 0x000000, "Member 'BFGActorBuilding_HasEffectWithSocketName_FS::_socketName' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_FS, ReturnValue) == 0x000008, "Member 'BFGActorBuilding_HasEffectWithSocketName_FS::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.HasEffectWithSocketName_PS
// 0x0010 (0x0010 - 0x0000)
struct BFGActorBuilding_HasEffectWithSocketName_PS final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _socketName;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorBuilding_HasEffectWithSocketName_PS) == 0x000004, "Wrong alignment on BFGActorBuilding_HasEffectWithSocketName_PS");
static_assert(sizeof(BFGActorBuilding_HasEffectWithSocketName_PS) == 0x000010, "Wrong size on BFGActorBuilding_HasEffectWithSocketName_PS");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_PS, _ePhase) == 0x000000, "Member 'BFGActorBuilding_HasEffectWithSocketName_PS::_ePhase' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_PS, _socketName) == 0x000004, "Member 'BFGActorBuilding_HasEffectWithSocketName_PS::_socketName' has a wrong offset!");
static_assert(offsetof(BFGActorBuilding_HasEffectWithSocketName_PS, ReturnValue) == 0x00000C, "Member 'BFGActorBuilding_HasEffectWithSocketName_PS::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.IsDead
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_IsDead) == 0x000001, "Wrong alignment on BFGActorBuilding_IsDead");
static_assert(sizeof(BFGActorBuilding_IsDead) == 0x000001, "Wrong size on BFGActorBuilding_IsDead");
static_assert(offsetof(BFGActorBuilding_IsDead, ReturnValue) == 0x000000, "Member 'BFGActorBuilding_IsDead::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorBuilding.SetPropsShouldBeVisible
// 0x0001 (0x0001 - 0x0000)
struct BFGActorBuilding_SetPropsShouldBeVisible final
{
public:
	bool                                          _bShouldBeVisible;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorBuilding_SetPropsShouldBeVisible) == 0x000001, "Wrong alignment on BFGActorBuilding_SetPropsShouldBeVisible");
static_assert(sizeof(BFGActorBuilding_SetPropsShouldBeVisible) == 0x000001, "Wrong size on BFGActorBuilding_SetPropsShouldBeVisible");
static_assert(offsetof(BFGActorBuilding_SetPropsShouldBeVisible, _bShouldBeVisible) == 0x000000, "Member 'BFGActorBuilding_SetPropsShouldBeVisible::_bShouldBeVisible' has a wrong offset!");

// Function BFGCore.BFGAutoPickupItem.OnCollected
// 0x0008 (0x0008 - 0x0000)
struct BFGAutoPickupItem_OnCollected final
{
public:
	class AActor*                                 PCollectedBy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAutoPickupItem_OnCollected) == 0x000008, "Wrong alignment on BFGAutoPickupItem_OnCollected");
static_assert(sizeof(BFGAutoPickupItem_OnCollected) == 0x000008, "Wrong size on BFGAutoPickupItem_OnCollected");
static_assert(offsetof(BFGAutoPickupItem_OnCollected, PCollectedBy) == 0x000000, "Member 'BFGAutoPickupItem_OnCollected::PCollectedBy' has a wrong offset!");

// Function BFGCore.BFGAutoPickupItem.OnInteractableBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct BFGAutoPickupItem_OnInteractableBeginOverlap final
{
public:
	class UPrimitiveComponent*                    _pOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _pOtherComponent;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFromSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             _sweepResult;                                      // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAutoPickupItem_OnInteractableBeginOverlap) == 0x000008, "Wrong alignment on BFGAutoPickupItem_OnInteractableBeginOverlap");
static_assert(sizeof(BFGAutoPickupItem_OnInteractableBeginOverlap) == 0x0000A8, "Wrong size on BFGAutoPickupItem_OnInteractableBeginOverlap");
static_assert(offsetof(BFGAutoPickupItem_OnInteractableBeginOverlap, _pOverlappedComponent) == 0x000000, "Member 'BFGAutoPickupItem_OnInteractableBeginOverlap::_pOverlappedComponent' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_OnInteractableBeginOverlap, _pOtherActor) == 0x000008, "Member 'BFGAutoPickupItem_OnInteractableBeginOverlap::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_OnInteractableBeginOverlap, _pOtherComponent) == 0x000010, "Member 'BFGAutoPickupItem_OnInteractableBeginOverlap::_pOtherComponent' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_OnInteractableBeginOverlap, _iOtherBodyIndex) == 0x000018, "Member 'BFGAutoPickupItem_OnInteractableBeginOverlap::_iOtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_OnInteractableBeginOverlap, _bFromSweep) == 0x00001C, "Member 'BFGAutoPickupItem_OnInteractableBeginOverlap::_bFromSweep' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_OnInteractableBeginOverlap, _sweepResult) == 0x000020, "Member 'BFGAutoPickupItem_OnInteractableBeginOverlap::_sweepResult' has a wrong offset!");

// Function BFGCore.BFGAutoPickupItem.OnPlayerPawnChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGAutoPickupItem_OnPlayerPawnChanged final
{
public:
	class APawn*                                  _pPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAutoPickupItem_OnPlayerPawnChanged) == 0x000008, "Wrong alignment on BFGAutoPickupItem_OnPlayerPawnChanged");
static_assert(sizeof(BFGAutoPickupItem_OnPlayerPawnChanged) == 0x000008, "Wrong size on BFGAutoPickupItem_OnPlayerPawnChanged");
static_assert(offsetof(BFGAutoPickupItem_OnPlayerPawnChanged, _pPawn) == 0x000000, "Member 'BFGAutoPickupItem_OnPlayerPawnChanged::_pPawn' has a wrong offset!");

// Function BFGCore.BFGAutoPickupItem.SetFalling
// 0x0020 (0x0020 - 0x0000)
struct BFGAutoPickupItem_SetFalling final
{
public:
	bool                                          _bFalling;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         _apFallIgnoreActors;                               // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         _fFallDelay;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fHeightOffset;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAutoPickupItem_SetFalling) == 0x000008, "Wrong alignment on BFGAutoPickupItem_SetFalling");
static_assert(sizeof(BFGAutoPickupItem_SetFalling) == 0x000020, "Wrong size on BFGAutoPickupItem_SetFalling");
static_assert(offsetof(BFGAutoPickupItem_SetFalling, _bFalling) == 0x000000, "Member 'BFGAutoPickupItem_SetFalling::_bFalling' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_SetFalling, _apFallIgnoreActors) == 0x000008, "Member 'BFGAutoPickupItem_SetFalling::_apFallIgnoreActors' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_SetFalling, _fFallDelay) == 0x000018, "Member 'BFGAutoPickupItem_SetFalling::_fFallDelay' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_SetFalling, _fHeightOffset) == 0x00001C, "Member 'BFGAutoPickupItem_SetFalling::_fHeightOffset' has a wrong offset!");

// Function BFGCore.BFGAutoPickupItem.SetFlying
// 0x000C (0x000C - 0x0000)
struct BFGAutoPickupItem_SetFlying final
{
public:
	bool                                          _bFlying;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fFlyHeight;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fFlyDelay;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAutoPickupItem_SetFlying) == 0x000004, "Wrong alignment on BFGAutoPickupItem_SetFlying");
static_assert(sizeof(BFGAutoPickupItem_SetFlying) == 0x00000C, "Wrong size on BFGAutoPickupItem_SetFlying");
static_assert(offsetof(BFGAutoPickupItem_SetFlying, _bFlying) == 0x000000, "Member 'BFGAutoPickupItem_SetFlying::_bFlying' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_SetFlying, _fFlyHeight) == 0x000004, "Member 'BFGAutoPickupItem_SetFlying::_fFlyHeight' has a wrong offset!");
static_assert(offsetof(BFGAutoPickupItem_SetFlying, _fFlyDelay) == 0x000008, "Member 'BFGAutoPickupItem_SetFlying::_fFlyDelay' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AIReactions.OnActorHit
// 0x00A8 (0x00A8 - 0x0000)
struct BFGActorComponent_AIReactions_OnActorHit final
{
public:
	class AActor*                                 _pSelfActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vNormalImpulse;                                   // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _hitResult;                                        // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_AIReactions_OnActorHit) == 0x000008, "Wrong alignment on BFGActorComponent_AIReactions_OnActorHit");
static_assert(sizeof(BFGActorComponent_AIReactions_OnActorHit) == 0x0000A8, "Wrong size on BFGActorComponent_AIReactions_OnActorHit");
static_assert(offsetof(BFGActorComponent_AIReactions_OnActorHit, _pSelfActor) == 0x000000, "Member 'BFGActorComponent_AIReactions_OnActorHit::_pSelfActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AIReactions_OnActorHit, _pOtherActor) == 0x000008, "Member 'BFGActorComponent_AIReactions_OnActorHit::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AIReactions_OnActorHit, _vNormalImpulse) == 0x000010, "Member 'BFGActorComponent_AIReactions_OnActorHit::_vNormalImpulse' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AIReactions_OnActorHit, _hitResult) == 0x00001C, "Member 'BFGActorComponent_AIReactions_OnActorHit::_hitResult' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AIReactions.OnTagsChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_AIReactions_OnTagsChanged final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_AIReactions_OnTagsChanged) == 0x000004, "Wrong alignment on BFGActorComponent_AIReactions_OnTagsChanged");
static_assert(sizeof(BFGActorComponent_AIReactions_OnTagsChanged) == 0x000008, "Wrong size on BFGActorComponent_AIReactions_OnTagsChanged");
static_assert(offsetof(BFGActorComponent_AIReactions_OnTagsChanged, _rTag) == 0x000000, "Member 'BFGActorComponent_AIReactions_OnTagsChanged::_rTag' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AITarget.OnDeadStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_AITarget_OnDeadStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_AITarget_OnDeadStatChanged) == 0x000008, "Wrong alignment on BFGActorComponent_AITarget_OnDeadStatChanged");
static_assert(sizeof(BFGActorComponent_AITarget_OnDeadStatChanged) == 0x000010, "Wrong size on BFGActorComponent_AITarget_OnDeadStatChanged");
static_assert(offsetof(BFGActorComponent_AITarget_OnDeadStatChanged, _pActor) == 0x000000, "Member 'BFGActorComponent_AITarget_OnDeadStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AITarget_OnDeadStatChanged, _pStat) == 0x000008, "Member 'BFGActorComponent_AITarget_OnDeadStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AITarget.OnHolobobDisrupted
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_AITarget_OnHolobobDisrupted final
{
public:
	class UBFGMentalAbilityBase*                  _pAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDisrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_AITarget_OnHolobobDisrupted) == 0x000008, "Wrong alignment on BFGActorComponent_AITarget_OnHolobobDisrupted");
static_assert(sizeof(BFGActorComponent_AITarget_OnHolobobDisrupted) == 0x000010, "Wrong size on BFGActorComponent_AITarget_OnHolobobDisrupted");
static_assert(offsetof(BFGActorComponent_AITarget_OnHolobobDisrupted, _pAbility) == 0x000000, "Member 'BFGActorComponent_AITarget_OnHolobobDisrupted::_pAbility' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AITarget_OnHolobobDisrupted, _bDisrupted) == 0x000008, "Member 'BFGActorComponent_AITarget_OnHolobobDisrupted::_bDisrupted' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AITarget.OnInvisibleStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_AITarget_OnInvisibleStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_AITarget_OnInvisibleStatChanged) == 0x000008, "Wrong alignment on BFGActorComponent_AITarget_OnInvisibleStatChanged");
static_assert(sizeof(BFGActorComponent_AITarget_OnInvisibleStatChanged) == 0x000010, "Wrong size on BFGActorComponent_AITarget_OnInvisibleStatChanged");
static_assert(offsetof(BFGActorComponent_AITarget_OnInvisibleStatChanged, _pActor) == 0x000000, "Member 'BFGActorComponent_AITarget_OnInvisibleStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AITarget_OnInvisibleStatChanged, _pStat) == 0x000008, "Member 'BFGActorComponent_AITarget_OnInvisibleStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AITarget.OnTagsChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_AITarget_OnTagsChanged final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_AITarget_OnTagsChanged) == 0x000004, "Wrong alignment on BFGActorComponent_AITarget_OnTagsChanged");
static_assert(sizeof(BFGActorComponent_AITarget_OnTagsChanged) == 0x000008, "Wrong size on BFGActorComponent_AITarget_OnTagsChanged");
static_assert(offsetof(BFGActorComponent_AITarget_OnTagsChanged, _rTag) == 0x000000, "Member 'BFGActorComponent_AITarget_OnTagsChanged::_rTag' has a wrong offset!");

// Function BFGCore.BFGProjectile.OnImpact
// 0x0030 (0x0030 - 0x0000)
struct BFGProjectile_OnImpact final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vDirection;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vNormal;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      _pMaterial;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_OnImpact) == 0x000008, "Wrong alignment on BFGProjectile_OnImpact");
static_assert(sizeof(BFGProjectile_OnImpact) == 0x000030, "Wrong size on BFGProjectile_OnImpact");
static_assert(offsetof(BFGProjectile_OnImpact, _vLocation) == 0x000000, "Member 'BFGProjectile_OnImpact::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_OnImpact, _vDirection) == 0x00000C, "Member 'BFGProjectile_OnImpact::_vDirection' has a wrong offset!");
static_assert(offsetof(BFGProjectile_OnImpact, _vNormal) == 0x000018, "Member 'BFGProjectile_OnImpact::_vNormal' has a wrong offset!");
static_assert(offsetof(BFGProjectile_OnImpact, _pMaterial) == 0x000028, "Member 'BFGProjectile_OnImpact::_pMaterial' has a wrong offset!");

// Function BFGCore.BFGProjectile.SetWeapon
// 0x0008 (0x0008 - 0x0000)
struct BFGProjectile_SetWeapon final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_SetWeapon) == 0x000008, "Wrong alignment on BFGProjectile_SetWeapon");
static_assert(sizeof(BFGProjectile_SetWeapon) == 0x000008, "Wrong size on BFGProjectile_SetWeapon");
static_assert(offsetof(BFGProjectile_SetWeapon, _pWeapon) == 0x000000, "Member 'BFGProjectile_SetWeapon::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGProjectile.GetHolderSafe
// 0x0008 (0x0008 - 0x0000)
struct BFGProjectile_GetHolderSafe final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_GetHolderSafe) == 0x000008, "Wrong alignment on BFGProjectile_GetHolderSafe");
static_assert(sizeof(BFGProjectile_GetHolderSafe) == 0x000008, "Wrong size on BFGProjectile_GetHolderSafe");
static_assert(offsetof(BFGProjectile_GetHolderSafe, ReturnValue) == 0x000000, "Member 'BFGProjectile_GetHolderSafe::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile.GetWeaponSafe
// 0x0008 (0x0008 - 0x0000)
struct BFGProjectile_GetWeaponSafe final
{
public:
	class ABFGWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_GetWeaponSafe) == 0x000008, "Wrong alignment on BFGProjectile_GetWeaponSafe");
static_assert(sizeof(BFGProjectile_GetWeaponSafe) == 0x000008, "Wrong size on BFGProjectile_GetWeaponSafe");
static_assert(offsetof(BFGProjectile_GetWeaponSafe, ReturnValue) == 0x000000, "Member 'BFGProjectile_GetWeaponSafe::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_Object.FireProjectile
// 0x0020 (0x0020 - 0x0000)
struct BFGProjectile_Object_FireProjectile final
{
public:
	float                                         _fMaximumTravelDistance;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        _pHomingTargetComponent;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rInitialDirection;                                // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGProjectile_Object_FireProjectile) == 0x000008, "Wrong alignment on BFGProjectile_Object_FireProjectile");
static_assert(sizeof(BFGProjectile_Object_FireProjectile) == 0x000020, "Wrong size on BFGProjectile_Object_FireProjectile");
static_assert(offsetof(BFGProjectile_Object_FireProjectile, _fMaximumTravelDistance) == 0x000000, "Member 'BFGProjectile_Object_FireProjectile::_fMaximumTravelDistance' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Object_FireProjectile, _pHomingTargetComponent) == 0x000008, "Member 'BFGProjectile_Object_FireProjectile::_pHomingTargetComponent' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Object_FireProjectile, _rInitialDirection) == 0x000010, "Member 'BFGProjectile_Object_FireProjectile::_rInitialDirection' has a wrong offset!");

// Function BFGCore.BFGProjectile_Object.OnPKHit
// 0x00B0 (0x00B0 - 0x0000)
struct BFGProjectile_Object_OnPKHit final
{
public:
	class UPrimitiveComponent*                    _pHitComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _pOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vNormalImpulse;                                   // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _rHit;                                             // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGProjectile_Object_OnPKHit) == 0x000008, "Wrong alignment on BFGProjectile_Object_OnPKHit");
static_assert(sizeof(BFGProjectile_Object_OnPKHit) == 0x0000B0, "Wrong size on BFGProjectile_Object_OnPKHit");
static_assert(offsetof(BFGProjectile_Object_OnPKHit, _pHitComponent) == 0x000000, "Member 'BFGProjectile_Object_OnPKHit::_pHitComponent' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Object_OnPKHit, _pOtherActor) == 0x000008, "Member 'BFGProjectile_Object_OnPKHit::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Object_OnPKHit, _pOtherComp) == 0x000010, "Member 'BFGProjectile_Object_OnPKHit::_pOtherComp' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Object_OnPKHit, _vNormalImpulse) == 0x000018, "Member 'BFGProjectile_Object_OnPKHit::_vNormalImpulse' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Object_OnPKHit, _rHit) == 0x000024, "Member 'BFGProjectile_Object_OnPKHit::_rHit' has a wrong offset!");

// Function BFGCore.BFGProjectile_Object.OnProjectileBounce
// 0x0088 (0x0088 - 0x0000)
struct BFGProjectile_Object_OnProjectileBounce final
{
public:
	struct FHitResult                             _vHitResult;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Object_OnProjectileBounce) == 0x000004, "Wrong alignment on BFGProjectile_Object_OnProjectileBounce");
static_assert(sizeof(BFGProjectile_Object_OnProjectileBounce) == 0x000088, "Wrong size on BFGProjectile_Object_OnProjectileBounce");
static_assert(offsetof(BFGProjectile_Object_OnProjectileBounce, _vHitResult) == 0x000000, "Member 'BFGProjectile_Object_OnProjectileBounce::_vHitResult' has a wrong offset!");

// Function BFGCore.BFGProjectile_Object.OnProjectileExplosion
// 0x0010 (0x0010 - 0x0000)
struct BFGProjectile_Object_OnProjectileExplosion final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Object_OnProjectileExplosion) == 0x000004, "Wrong alignment on BFGProjectile_Object_OnProjectileExplosion");
static_assert(sizeof(BFGProjectile_Object_OnProjectileExplosion) == 0x000010, "Wrong size on BFGProjectile_Object_OnProjectileExplosion");
static_assert(offsetof(BFGProjectile_Object_OnProjectileExplosion, _vLocation) == 0x000000, "Member 'BFGProjectile_Object_OnProjectileExplosion::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Object_OnProjectileExplosion, _fRadius) == 0x00000C, "Member 'BFGProjectile_Object_OnProjectileExplosion::_fRadius' has a wrong offset!");

// Function BFGCore.BFGProjectile_Object.OnProjectileFireDelayStarted
// 0x0004 (0x0004 - 0x0000)
struct BFGProjectile_Object_OnProjectileFireDelayStarted final
{
public:
	float                                         _fDelayDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Object_OnProjectileFireDelayStarted) == 0x000004, "Wrong alignment on BFGProjectile_Object_OnProjectileFireDelayStarted");
static_assert(sizeof(BFGProjectile_Object_OnProjectileFireDelayStarted) == 0x000004, "Wrong size on BFGProjectile_Object_OnProjectileFireDelayStarted");
static_assert(offsetof(BFGProjectile_Object_OnProjectileFireDelayStarted, _fDelayDuration) == 0x000000, "Member 'BFGProjectile_Object_OnProjectileFireDelayStarted::_fDelayDuration' has a wrong offset!");

// Function BFGCore.BFGProjectile_Object.OnProjectileSimulationStop
// 0x0088 (0x0088 - 0x0000)
struct BFGProjectile_Object_OnProjectileSimulationStop final
{
public:
	struct FHitResult                             HitRes;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Object_OnProjectileSimulationStop) == 0x000004, "Wrong alignment on BFGProjectile_Object_OnProjectileSimulationStop");
static_assert(sizeof(BFGProjectile_Object_OnProjectileSimulationStop) == 0x000088, "Wrong size on BFGProjectile_Object_OnProjectileSimulationStop");
static_assert(offsetof(BFGProjectile_Object_OnProjectileSimulationStop, HitRes) == 0x000000, "Member 'BFGProjectile_Object_OnProjectileSimulationStop::HitRes' has a wrong offset!");

// Function BFGCore.BFGProjectile_Object.IsTargetPlayer
// 0x0001 (0x0001 - 0x0000)
struct BFGProjectile_Object_IsTargetPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Object_IsTargetPlayer) == 0x000001, "Wrong alignment on BFGProjectile_Object_IsTargetPlayer");
static_assert(sizeof(BFGProjectile_Object_IsTargetPlayer) == 0x000001, "Wrong size on BFGProjectile_Object_IsTargetPlayer");
static_assert(offsetof(BFGProjectile_Object_IsTargetPlayer, ReturnValue) == 0x000000, "Member 'BFGProjectile_Object_IsTargetPlayer::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Animation.BindEventsAndVariables
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_Animation_BindEventsAndVariables final
{
public:
	class USkeletalMeshComponent*                 _pCustomMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Animation_BindEventsAndVariables) == 0x000008, "Wrong alignment on BFGActorComponent_Animation_BindEventsAndVariables");
static_assert(sizeof(BFGActorComponent_Animation_BindEventsAndVariables) == 0x000008, "Wrong size on BFGActorComponent_Animation_BindEventsAndVariables");
static_assert(offsetof(BFGActorComponent_Animation_BindEventsAndVariables, _pCustomMesh) == 0x000000, "Member 'BFGActorComponent_Animation_BindEventsAndVariables::_pCustomMesh' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Animation.GetAnimationEvents
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_Animation_GetAnimationEvents final
{
public:
	TArray<class UBFGAnimation_Events*>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Animation_GetAnimationEvents) == 0x000008, "Wrong alignment on BFGActorComponent_Animation_GetAnimationEvents");
static_assert(sizeof(BFGActorComponent_Animation_GetAnimationEvents) == 0x000010, "Wrong size on BFGActorComponent_Animation_GetAnimationEvents");
static_assert(offsetof(BFGActorComponent_Animation_GetAnimationEvents, ReturnValue) == 0x000000, "Member 'BFGActorComponent_Animation_GetAnimationEvents::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_ExtractBrain.OnBrainWasExtracted
// 0x0010 (0x0010 - 0x0000)
struct BFGMentalAbility_ExtractBrain_OnBrainWasExtracted final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PBrain;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_ExtractBrain_OnBrainWasExtracted) == 0x000008, "Wrong alignment on BFGMentalAbility_ExtractBrain_OnBrainWasExtracted");
static_assert(sizeof(BFGMentalAbility_ExtractBrain_OnBrainWasExtracted) == 0x000010, "Wrong size on BFGMentalAbility_ExtractBrain_OnBrainWasExtracted");
static_assert(offsetof(BFGMentalAbility_ExtractBrain_OnBrainWasExtracted, _pTarget) == 0x000000, "Member 'BFGMentalAbility_ExtractBrain_OnBrainWasExtracted::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_ExtractBrain_OnBrainWasExtracted, PBrain) == 0x000008, "Member 'BFGMentalAbility_ExtractBrain_OnBrainWasExtracted::PBrain' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleActorChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectActor_HandleActorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _iValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleActorChanged) == 0x000008, "Wrong alignment on BFGEffectActor_HandleActorChanged");
static_assert(sizeof(BFGEffectActor_HandleActorChanged) == 0x000010, "Wrong size on BFGEffectActor_HandleActorChanged");
static_assert(offsetof(BFGEffectActor_HandleActorChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleActorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleActorChanged, _iValue) == 0x000008, "Member 'BFGEffectActor_HandleActorChanged::_iValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleBoolChanged
// 0x000C (0x000C - 0x0000)
struct BFGEffectActor_HandleBoolChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectActor_HandleBoolChanged) == 0x000004, "Wrong alignment on BFGEffectActor_HandleBoolChanged");
static_assert(sizeof(BFGEffectActor_HandleBoolChanged) == 0x00000C, "Wrong size on BFGEffectActor_HandleBoolChanged");
static_assert(offsetof(BFGEffectActor_HandleBoolChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleBoolChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleBoolChanged, _bValue) == 0x000008, "Member 'BFGEffectActor_HandleBoolChanged::_bValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleColorChanged
// 0x000C (0x000C - 0x0000)
struct BFGEffectActor_HandleColorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 _rValue;                                           // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleColorChanged) == 0x000004, "Wrong alignment on BFGEffectActor_HandleColorChanged");
static_assert(sizeof(BFGEffectActor_HandleColorChanged) == 0x00000C, "Wrong size on BFGEffectActor_HandleColorChanged");
static_assert(offsetof(BFGEffectActor_HandleColorChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleColorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleColorChanged, _rValue) == 0x000008, "Member 'BFGEffectActor_HandleColorChanged::_rValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleDataTableChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectActor_HandleDataTableChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _pValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleDataTableChanged) == 0x000008, "Wrong alignment on BFGEffectActor_HandleDataTableChanged");
static_assert(sizeof(BFGEffectActor_HandleDataTableChanged) == 0x000010, "Wrong size on BFGEffectActor_HandleDataTableChanged");
static_assert(offsetof(BFGEffectActor_HandleDataTableChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleDataTableChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleDataTableChanged, _pValue) == 0x000008, "Member 'BFGEffectActor_HandleDataTableChanged::_pValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleFloatChanged
// 0x000C (0x000C - 0x0000)
struct BFGEffectActor_HandleFloatChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleFloatChanged) == 0x000004, "Wrong alignment on BFGEffectActor_HandleFloatChanged");
static_assert(sizeof(BFGEffectActor_HandleFloatChanged) == 0x00000C, "Wrong size on BFGEffectActor_HandleFloatChanged");
static_assert(offsetof(BFGEffectActor_HandleFloatChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleFloatChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleFloatChanged, _fValue) == 0x000008, "Member 'BFGEffectActor_HandleFloatChanged::_fValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleIntChanged
// 0x000C (0x000C - 0x0000)
struct BFGEffectActor_HandleIntChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleIntChanged) == 0x000004, "Wrong alignment on BFGEffectActor_HandleIntChanged");
static_assert(sizeof(BFGEffectActor_HandleIntChanged) == 0x00000C, "Wrong size on BFGEffectActor_HandleIntChanged");
static_assert(offsetof(BFGEffectActor_HandleIntChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleIntChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleIntChanged, _iValue) == 0x000008, "Member 'BFGEffectActor_HandleIntChanged::_iValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleNameChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectActor_HandleNameChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _iValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleNameChanged) == 0x000004, "Wrong alignment on BFGEffectActor_HandleNameChanged");
static_assert(sizeof(BFGEffectActor_HandleNameChanged) == 0x000010, "Wrong size on BFGEffectActor_HandleNameChanged");
static_assert(offsetof(BFGEffectActor_HandleNameChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleNameChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleNameChanged, _iValue) == 0x000008, "Member 'BFGEffectActor_HandleNameChanged::_iValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleObjectChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectActor_HandleObjectChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _pValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleObjectChanged) == 0x000008, "Wrong alignment on BFGEffectActor_HandleObjectChanged");
static_assert(sizeof(BFGEffectActor_HandleObjectChanged) == 0x000010, "Wrong size on BFGEffectActor_HandleObjectChanged");
static_assert(offsetof(BFGEffectActor_HandleObjectChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleObjectChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleObjectChanged, _pValue) == 0x000008, "Member 'BFGEffectActor_HandleObjectChanged::_pValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleRotatorChanged
// 0x0014 (0x0014 - 0x0000)
struct BFGEffectActor_HandleRotatorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleRotatorChanged) == 0x000004, "Wrong alignment on BFGEffectActor_HandleRotatorChanged");
static_assert(sizeof(BFGEffectActor_HandleRotatorChanged) == 0x000014, "Wrong size on BFGEffectActor_HandleRotatorChanged");
static_assert(offsetof(BFGEffectActor_HandleRotatorChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleRotatorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleRotatorChanged, _rValue) == 0x000008, "Member 'BFGEffectActor_HandleRotatorChanged::_rValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.HandleVectorChanged
// 0x0014 (0x0014 - 0x0000)
struct BFGEffectActor_HandleVectorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_HandleVectorChanged) == 0x000004, "Wrong alignment on BFGEffectActor_HandleVectorChanged");
static_assert(sizeof(BFGEffectActor_HandleVectorChanged) == 0x000014, "Wrong size on BFGEffectActor_HandleVectorChanged");
static_assert(offsetof(BFGEffectActor_HandleVectorChanged, _rName) == 0x000000, "Member 'BFGEffectActor_HandleVectorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_HandleVectorChanged, _rValue) == 0x000008, "Member 'BFGEffectActor_HandleVectorChanged::_rValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.IsEffectActive
// 0x0001 (0x0001 - 0x0000)
struct BFGEffectActor_IsEffectActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_IsEffectActive) == 0x000001, "Wrong alignment on BFGEffectActor_IsEffectActive");
static_assert(sizeof(BFGEffectActor_IsEffectActive) == 0x000001, "Wrong size on BFGEffectActor_IsEffectActive");
static_assert(offsetof(BFGEffectActor_IsEffectActive, ReturnValue) == 0x000000, "Member 'BFGEffectActor_IsEffectActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.IsEffectFinished
// 0x0001 (0x0001 - 0x0000)
struct BFGEffectActor_IsEffectFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_IsEffectFinished) == 0x000001, "Wrong alignment on BFGEffectActor_IsEffectFinished");
static_assert(sizeof(BFGEffectActor_IsEffectFinished) == 0x000001, "Wrong size on BFGEffectActor_IsEffectFinished");
static_assert(offsetof(BFGEffectActor_IsEffectFinished, ReturnValue) == 0x000000, "Member 'BFGEffectActor_IsEffectFinished::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.SetBlackboard
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectActor_SetBlackboard final
{
public:
	class UBFGEffectBlackboard*                   _pBlackboard;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_SetBlackboard) == 0x000008, "Wrong alignment on BFGEffectActor_SetBlackboard");
static_assert(sizeof(BFGEffectActor_SetBlackboard) == 0x000008, "Wrong size on BFGEffectActor_SetBlackboard");
static_assert(offsetof(BFGEffectActor_SetBlackboard, _pBlackboard) == 0x000000, "Member 'BFGEffectActor_SetBlackboard::_pBlackboard' has a wrong offset!");

// Function BFGCore.BFGEffectActor.GetBlackboard
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectActor_GetBlackboard final
{
public:
	class UBFGEffectBlackboard*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_GetBlackboard) == 0x000008, "Wrong alignment on BFGEffectActor_GetBlackboard");
static_assert(sizeof(BFGEffectActor_GetBlackboard) == 0x000008, "Wrong size on BFGEffectActor_GetBlackboard");
static_assert(offsetof(BFGEffectActor_GetBlackboard, ReturnValue) == 0x000000, "Member 'BFGEffectActor_GetBlackboard::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.GetContainerDescriptor
// 0x0060 (0x0060 - 0x0000)
struct BFGEffectActor_GetContainerDescriptor final
{
public:
	struct FBFGEffectContainerDescriptor          ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_GetContainerDescriptor) == 0x000010, "Wrong alignment on BFGEffectActor_GetContainerDescriptor");
static_assert(sizeof(BFGEffectActor_GetContainerDescriptor) == 0x000060, "Wrong size on BFGEffectActor_GetContainerDescriptor");
static_assert(offsetof(BFGEffectActor_GetContainerDescriptor, ReturnValue) == 0x000000, "Member 'BFGEffectActor_GetContainerDescriptor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor.GetEffectComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectActor_GetEffectComponent final
{
public:
	class UBFGActorComponent_Effect*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_GetEffectComponent) == 0x000008, "Wrong alignment on BFGEffectActor_GetEffectComponent");
static_assert(sizeof(BFGEffectActor_GetEffectComponent) == 0x000008, "Wrong size on BFGEffectActor_GetEffectComponent");
static_assert(offsetof(BFGEffectActor_GetEffectComponent, ReturnValue) == 0x000000, "Member 'BFGEffectActor_GetEffectComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor_Beam.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectActor_Beam_SetTargetActor final
{
public:
	class AActor*                                 _TargetActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_Beam_SetTargetActor) == 0x000008, "Wrong alignment on BFGEffectActor_Beam_SetTargetActor");
static_assert(sizeof(BFGEffectActor_Beam_SetTargetActor) == 0x000008, "Wrong size on BFGEffectActor_Beam_SetTargetActor");
static_assert(offsetof(BFGEffectActor_Beam_SetTargetActor, _TargetActor) == 0x000000, "Member 'BFGEffectActor_Beam_SetTargetActor::_TargetActor' has a wrong offset!");

// Function BFGCore.BFGEffectActor_Beam.SetTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectActor_Beam_SetTargetLocation final
{
public:
	struct FVector                                _vTargetLocation;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vTargetNormal;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_Beam_SetTargetLocation) == 0x000004, "Wrong alignment on BFGEffectActor_Beam_SetTargetLocation");
static_assert(sizeof(BFGEffectActor_Beam_SetTargetLocation) == 0x000018, "Wrong size on BFGEffectActor_Beam_SetTargetLocation");
static_assert(offsetof(BFGEffectActor_Beam_SetTargetLocation, _vTargetLocation) == 0x000000, "Member 'BFGEffectActor_Beam_SetTargetLocation::_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_Beam_SetTargetLocation, _vTargetNormal) == 0x00000C, "Member 'BFGEffectActor_Beam_SetTargetLocation::_vTargetNormal' has a wrong offset!");

// Function BFGCore.BFGEffectActor_Beam.UpdateBeam
// 0x0020 (0x0020 - 0x0000)
struct BFGEffectActor_Beam_UpdateBeam final
{
public:
	class AActor*                                 _pTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vTargetLocation;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vTargetNormal;                                    // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_Beam_UpdateBeam) == 0x000008, "Wrong alignment on BFGEffectActor_Beam_UpdateBeam");
static_assert(sizeof(BFGEffectActor_Beam_UpdateBeam) == 0x000020, "Wrong size on BFGEffectActor_Beam_UpdateBeam");
static_assert(offsetof(BFGEffectActor_Beam_UpdateBeam, _pTargetActor) == 0x000000, "Member 'BFGEffectActor_Beam_UpdateBeam::_pTargetActor' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_Beam_UpdateBeam, _vTargetLocation) == 0x000008, "Member 'BFGEffectActor_Beam_UpdateBeam::_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BFGEffectActor_Beam_UpdateBeam, _vTargetNormal) == 0x000014, "Member 'BFGEffectActor_Beam_UpdateBeam::_vTargetNormal' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AOEWarningMarker.SetMarkersHidden
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_AOEWarningMarker_SetMarkersHidden final
{
public:
	bool                                          _bHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_AOEWarningMarker_SetMarkersHidden) == 0x000001, "Wrong alignment on BFGActorComponent_AOEWarningMarker_SetMarkersHidden");
static_assert(sizeof(BFGActorComponent_AOEWarningMarker_SetMarkersHidden) == 0x000001, "Wrong size on BFGActorComponent_AOEWarningMarker_SetMarkersHidden");
static_assert(offsetof(BFGActorComponent_AOEWarningMarker_SetMarkersHidden, _bHidden) == 0x000000, "Member 'BFGActorComponent_AOEWarningMarker_SetMarkersHidden::_bHidden' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AOEWarningMarker.SetupWarningMarkerComponents
// 0x0020 (0x0020 - 0x0000)
struct BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents final
{
public:
	float                                         _fWarningMarkerRadius;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fWarningMarkerDuration;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vWarningMarkerLocation;                           // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rWarningMarkerRotation;                           // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents) == 0x000004, "Wrong alignment on BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents");
static_assert(sizeof(BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents) == 0x000020, "Wrong size on BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents");
static_assert(offsetof(BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents, _fWarningMarkerRadius) == 0x000000, "Member 'BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents::_fWarningMarkerRadius' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents, _fWarningMarkerDuration) == 0x000004, "Member 'BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents::_fWarningMarkerDuration' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents, _vWarningMarkerLocation) == 0x000008, "Member 'BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents::_vWarningMarkerLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents, _rWarningMarkerRotation) == 0x000014, "Member 'BFGActorComponent_AOEWarningMarker_SetupWarningMarkerComponents::_rWarningMarkerRotation' has a wrong offset!");

// Function BFGCore.BFGActorComponent_AOEWarningMarker.WarningTimeline_Interpolation
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_AOEWarningMarker_WarningTimeline_Interpolation final
{
public:
	float                                         _fAlpha;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_AOEWarningMarker_WarningTimeline_Interpolation) == 0x000004, "Wrong alignment on BFGActorComponent_AOEWarningMarker_WarningTimeline_Interpolation");
static_assert(sizeof(BFGActorComponent_AOEWarningMarker_WarningTimeline_Interpolation) == 0x000004, "Wrong size on BFGActorComponent_AOEWarningMarker_WarningTimeline_Interpolation");
static_assert(offsetof(BFGActorComponent_AOEWarningMarker_WarningTimeline_Interpolation, _fAlpha) == 0x000000, "Member 'BFGActorComponent_AOEWarningMarker_WarningTimeline_Interpolation::_fAlpha' has a wrong offset!");

// Function BFGCore.BFGEffectActor_RBPWreckBeam.OnStopTelegraph
// 0x0001 (0x0001 - 0x0000)
struct BFGEffectActor_RBPWreckBeam_OnStopTelegraph final
{
public:
	bool                                          _bAborted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_RBPWreckBeam_OnStopTelegraph) == 0x000001, "Wrong alignment on BFGEffectActor_RBPWreckBeam_OnStopTelegraph");
static_assert(sizeof(BFGEffectActor_RBPWreckBeam_OnStopTelegraph) == 0x000001, "Wrong size on BFGEffectActor_RBPWreckBeam_OnStopTelegraph");
static_assert(offsetof(BFGEffectActor_RBPWreckBeam_OnStopTelegraph, _bAborted) == 0x000000, "Member 'BFGEffectActor_RBPWreckBeam_OnStopTelegraph::_bAborted' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.BuildDecor
// 0x0040 (0x0040 - 0x0000)
struct BFGActorComponent_BuildingLevel_BuildDecor final
{
public:
	struct FBFGBuilding_LevelDecor                CurrDecorLayout;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_BuildDecor) == 0x000010, "Wrong alignment on BFGActorComponent_BuildingLevel_BuildDecor");
static_assert(sizeof(BFGActorComponent_BuildingLevel_BuildDecor) == 0x000040, "Wrong size on BFGActorComponent_BuildingLevel_BuildDecor");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildDecor, CurrDecorLayout) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_BuildDecor::CurrDecorLayout' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.BuildLevel
// 0x00C0 (0x00C0 - 0x0000)
struct BFGActorComponent_BuildingLevel_BuildLevel final
{
public:
	class USceneComponent*                        _pParent;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _relativeTranform;                                 // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGBuilding_FloorData                 _floorData;                                        // 0x0040(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBFGBuilding_LevelDecor>        _aDecorLayouts;                                    // 0x00A8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_BuildingLevel_BuildLevel) == 0x000010, "Wrong alignment on BFGActorComponent_BuildingLevel_BuildLevel");
static_assert(sizeof(BFGActorComponent_BuildingLevel_BuildLevel) == 0x0000C0, "Wrong size on BFGActorComponent_BuildingLevel_BuildLevel");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildLevel, _pParent) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_BuildLevel::_pParent' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildLevel, _relativeTranform) == 0x000010, "Member 'BFGActorComponent_BuildingLevel_BuildLevel::_relativeTranform' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildLevel, _floorData) == 0x000040, "Member 'BFGActorComponent_BuildingLevel_BuildLevel::_floorData' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildLevel, _aDecorLayouts) == 0x0000A8, "Member 'BFGActorComponent_BuildingLevel_BuildLevel::_aDecorLayouts' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildLevel, ReturnValue) == 0x0000B8, "Member 'BFGActorComponent_BuildingLevel_BuildLevel::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.BuildLevelFromElement
// 0x0060 (0x0060 - 0x0000)
struct BFGActorComponent_BuildingLevel_BuildLevelFromElement final
{
public:
	struct FBFGBuildingElement                    _Element;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USceneComponent*                        _pParent;                                          // 0x0050(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_BuildingLevel_BuildLevelFromElement) == 0x000010, "Wrong alignment on BFGActorComponent_BuildingLevel_BuildLevelFromElement");
static_assert(sizeof(BFGActorComponent_BuildingLevel_BuildLevelFromElement) == 0x000060, "Wrong size on BFGActorComponent_BuildingLevel_BuildLevelFromElement");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildLevelFromElement, _Element) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_BuildLevelFromElement::_Element' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildLevelFromElement, _pParent) == 0x000050, "Member 'BFGActorComponent_BuildingLevel_BuildLevelFromElement::_pParent' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_BuildLevelFromElement, ReturnValue) == 0x000058, "Member 'BFGActorComponent_BuildingLevel_BuildLevelFromElement::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.MoveRubble
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_BuildingLevel_MoveRubble final
{
public:
	float                                         _fRubbleSinkRate;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_MoveRubble) == 0x000004, "Wrong alignment on BFGActorComponent_BuildingLevel_MoveRubble");
static_assert(sizeof(BFGActorComponent_BuildingLevel_MoveRubble) == 0x000004, "Wrong size on BFGActorComponent_BuildingLevel_MoveRubble");
static_assert(offsetof(BFGActorComponent_BuildingLevel_MoveRubble, _fRubbleSinkRate) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_MoveRubble::_fRubbleSinkRate' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.SwapDecorForDestruct
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_BuildingLevel_SwapDecorForDestruct final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_SwapDecorForDestruct) == 0x000001, "Wrong alignment on BFGActorComponent_BuildingLevel_SwapDecorForDestruct");
static_assert(sizeof(BFGActorComponent_BuildingLevel_SwapDecorForDestruct) == 0x000001, "Wrong size on BFGActorComponent_BuildingLevel_SwapDecorForDestruct");
static_assert(offsetof(BFGActorComponent_BuildingLevel_SwapDecorForDestruct, _ePhase) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_SwapDecorForDestruct::_ePhase' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.SwapMainForDestruct
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_BuildingLevel_SwapMainForDestruct final
{
public:
	EBFGBuilding_DestructionPhase                 _ePhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_SwapMainForDestruct) == 0x000001, "Wrong alignment on BFGActorComponent_BuildingLevel_SwapMainForDestruct");
static_assert(sizeof(BFGActorComponent_BuildingLevel_SwapMainForDestruct) == 0x000001, "Wrong size on BFGActorComponent_BuildingLevel_SwapMainForDestruct");
static_assert(offsetof(BFGActorComponent_BuildingLevel_SwapMainForDestruct, _ePhase) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_SwapMainForDestruct::_ePhase' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.GetDecorDestructionComponent
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_BuildingLevel_GetDecorDestructionComponent final
{
public:
	int32                                         _iDecorIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBlastMeshComponent*>            ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_GetDecorDestructionComponent) == 0x000008, "Wrong alignment on BFGActorComponent_BuildingLevel_GetDecorDestructionComponent");
static_assert(sizeof(BFGActorComponent_BuildingLevel_GetDecorDestructionComponent) == 0x000018, "Wrong size on BFGActorComponent_BuildingLevel_GetDecorDestructionComponent");
static_assert(offsetof(BFGActorComponent_BuildingLevel_GetDecorDestructionComponent, _iDecorIndex) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_GetDecorDestructionComponent::_iDecorIndex' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_GetDecorDestructionComponent, ReturnValue) == 0x000008, "Member 'BFGActorComponent_BuildingLevel_GetDecorDestructionComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.GetDecorMeshComponent
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_BuildingLevel_GetDecorMeshComponent final
{
public:
	int32                                         _iDecorIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_GetDecorMeshComponent) == 0x000008, "Wrong alignment on BFGActorComponent_BuildingLevel_GetDecorMeshComponent");
static_assert(sizeof(BFGActorComponent_BuildingLevel_GetDecorMeshComponent) == 0x000018, "Wrong size on BFGActorComponent_BuildingLevel_GetDecorMeshComponent");
static_assert(offsetof(BFGActorComponent_BuildingLevel_GetDecorMeshComponent, _iDecorIndex) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_GetDecorMeshComponent::_iDecorIndex' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_GetDecorMeshComponent, ReturnValue) == 0x000008, "Member 'BFGActorComponent_BuildingLevel_GetDecorMeshComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.GetMainDestructionComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_BuildingLevel_GetMainDestructionComponent final
{
public:
	class UBlastMeshComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_GetMainDestructionComponent) == 0x000008, "Wrong alignment on BFGActorComponent_BuildingLevel_GetMainDestructionComponent");
static_assert(sizeof(BFGActorComponent_BuildingLevel_GetMainDestructionComponent) == 0x000008, "Wrong size on BFGActorComponent_BuildingLevel_GetMainDestructionComponent");
static_assert(offsetof(BFGActorComponent_BuildingLevel_GetMainDestructionComponent, ReturnValue) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_GetMainDestructionComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.GetMainMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_BuildingLevel_GetMainMeshComponent final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_GetMainMeshComponent) == 0x000008, "Wrong alignment on BFGActorComponent_BuildingLevel_GetMainMeshComponent");
static_assert(sizeof(BFGActorComponent_BuildingLevel_GetMainMeshComponent) == 0x000008, "Wrong size on BFGActorComponent_BuildingLevel_GetMainMeshComponent");
static_assert(offsetof(BFGActorComponent_BuildingLevel_GetMainMeshComponent, ReturnValue) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_GetMainMeshComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_BuildingLevel.GetNumDecorMeshComponents
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents final
{
public:
	bool                                          _bDestruction;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents) == 0x000004, "Wrong alignment on BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents");
static_assert(sizeof(BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents) == 0x000008, "Wrong size on BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents");
static_assert(offsetof(BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents, _bDestruction) == 0x000000, "Member 'BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents::_bDestruction' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents, ReturnValue) == 0x000004, "Member 'BFGActorComponent_BuildingLevel_GetNumDecorMeshComponents::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.HandleInputPackChanged
// 0x0004 (0x0004 - 0x0000)
struct BFGMentalAbility_Holobob_HandleInputPackChanged final
{
public:
	int32                                         _iInputPackIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_HandleInputPackChanged) == 0x000004, "Wrong alignment on BFGMentalAbility_Holobob_HandleInputPackChanged");
static_assert(sizeof(BFGMentalAbility_Holobob_HandleInputPackChanged) == 0x000004, "Wrong size on BFGMentalAbility_Holobob_HandleInputPackChanged");
static_assert(offsetof(BFGMentalAbility_Holobob_HandleInputPackChanged, _iInputPackIndex) == 0x000000, "Member 'BFGMentalAbility_Holobob_HandleInputPackChanged::_iInputPackIndex' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.OnActorAttachedToPK
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbility_Holobob_OnActorAttachedToPK final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_OnActorAttachedToPK) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_OnActorAttachedToPK");
static_assert(sizeof(BFGMentalAbility_Holobob_OnActorAttachedToPK) == 0x000008, "Wrong size on BFGMentalAbility_Holobob_OnActorAttachedToPK");
static_assert(offsetof(BFGMentalAbility_Holobob_OnActorAttachedToPK, _pTarget) == 0x000000, "Member 'BFGMentalAbility_Holobob_OnActorAttachedToPK::_pTarget' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.OnActorReleasedFromPK
// 0x0010 (0x0010 - 0x0000)
struct BFGMentalAbility_Holobob_OnActorReleasedFromPK final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bThrownOrDropped;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMentalAbility_Holobob_OnActorReleasedFromPK) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_OnActorReleasedFromPK");
static_assert(sizeof(BFGMentalAbility_Holobob_OnActorReleasedFromPK) == 0x000010, "Wrong size on BFGMentalAbility_Holobob_OnActorReleasedFromPK");
static_assert(offsetof(BFGMentalAbility_Holobob_OnActorReleasedFromPK, _pActor) == 0x000000, "Member 'BFGMentalAbility_Holobob_OnActorReleasedFromPK::_pActor' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Holobob_OnActorReleasedFromPK, _bThrownOrDropped) == 0x000008, "Member 'BFGMentalAbility_Holobob_OnActorReleasedFromPK::_bThrownOrDropped' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.OnBrainExtracted
// 0x0018 (0x0018 - 0x0000)
struct BFGMentalAbility_Holobob_OnBrainExtracted final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pBrain;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsFromInfection;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMentalAbility_Holobob_OnBrainExtracted) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_OnBrainExtracted");
static_assert(sizeof(BFGMentalAbility_Holobob_OnBrainExtracted) == 0x000018, "Wrong size on BFGMentalAbility_Holobob_OnBrainExtracted");
static_assert(offsetof(BFGMentalAbility_Holobob_OnBrainExtracted, _pTarget) == 0x000000, "Member 'BFGMentalAbility_Holobob_OnBrainExtracted::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Holobob_OnBrainExtracted, _pBrain) == 0x000008, "Member 'BFGMentalAbility_Holobob_OnBrainExtracted::_pBrain' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Holobob_OnBrainExtracted, _bIsFromInfection) == 0x000010, "Member 'BFGMentalAbility_Holobob_OnBrainExtracted::_bIsFromInfection' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.OnTransmogAbilityEffect
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbility_Holobob_OnTransmogAbilityEffect final
{
public:
	class UBFGMentalAbilityBase*                  _pMentalAbility;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_OnTransmogAbilityEffect) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_OnTransmogAbilityEffect");
static_assert(sizeof(BFGMentalAbility_Holobob_OnTransmogAbilityEffect) == 0x000008, "Wrong size on BFGMentalAbility_Holobob_OnTransmogAbilityEffect");
static_assert(offsetof(BFGMentalAbility_Holobob_OnTransmogAbilityEffect, _pMentalAbility) == 0x000000, "Member 'BFGMentalAbility_Holobob_OnTransmogAbilityEffect::_pMentalAbility' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetConcentrationDrainedPerSecond
// 0x0004 (0x0004 - 0x0000)
struct BFGMentalAbility_Holobob_GetConcentrationDrainedPerSecond final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetConcentrationDrainedPerSecond) == 0x000004, "Wrong alignment on BFGMentalAbility_Holobob_GetConcentrationDrainedPerSecond");
static_assert(sizeof(BFGMentalAbility_Holobob_GetConcentrationDrainedPerSecond) == 0x000004, "Wrong size on BFGMentalAbility_Holobob_GetConcentrationDrainedPerSecond");
static_assert(offsetof(BFGMentalAbility_Holobob_GetConcentrationDrainedPerSecond, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetConcentrationDrainedPerSecond::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetCurrentConcentrationPercent
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbility_Holobob_GetCurrentConcentrationPercent final
{
public:
	bool                                          _bAnimateWhenDisrupted;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetCurrentConcentrationPercent) == 0x000004, "Wrong alignment on BFGMentalAbility_Holobob_GetCurrentConcentrationPercent");
static_assert(sizeof(BFGMentalAbility_Holobob_GetCurrentConcentrationPercent) == 0x000008, "Wrong size on BFGMentalAbility_Holobob_GetCurrentConcentrationPercent");
static_assert(offsetof(BFGMentalAbility_Holobob_GetCurrentConcentrationPercent, _bAnimateWhenDisrupted) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetCurrentConcentrationPercent::_bAnimateWhenDisrupted' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Holobob_GetCurrentConcentrationPercent, ReturnValue) == 0x000004, "Member 'BFGMentalAbility_Holobob_GetCurrentConcentrationPercent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetFakeAccessories
// 0x0010 (0x0010 - 0x0000)
struct BFGMentalAbility_Holobob_GetFakeAccessories final
{
public:
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetFakeAccessories) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_GetFakeAccessories");
static_assert(sizeof(BFGMentalAbility_Holobob_GetFakeAccessories) == 0x000010, "Wrong size on BFGMentalAbility_Holobob_GetFakeAccessories");
static_assert(offsetof(BFGMentalAbility_Holobob_GetFakeAccessories, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetFakeAccessories::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetFakeMesh
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbility_Holobob_GetFakeMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetFakeMesh) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_GetFakeMesh");
static_assert(sizeof(BFGMentalAbility_Holobob_GetFakeMesh) == 0x000008, "Wrong size on BFGMentalAbility_Holobob_GetFakeMesh");
static_assert(offsetof(BFGMentalAbility_Holobob_GetFakeMesh, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetFakeMesh::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetHoloPlayerMesh
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbility_Holobob_GetHoloPlayerMesh final
{
public:
	class UPoseableMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetHoloPlayerMesh) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_GetHoloPlayerMesh");
static_assert(sizeof(BFGMentalAbility_Holobob_GetHoloPlayerMesh) == 0x000008, "Wrong size on BFGMentalAbility_Holobob_GetHoloPlayerMesh");
static_assert(offsetof(BFGMentalAbility_Holobob_GetHoloPlayerMesh, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetHoloPlayerMesh::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetIsCorrupted
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbility_Holobob_GetIsCorrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetIsCorrupted) == 0x000001, "Wrong alignment on BFGMentalAbility_Holobob_GetIsCorrupted");
static_assert(sizeof(BFGMentalAbility_Holobob_GetIsCorrupted) == 0x000001, "Wrong size on BFGMentalAbility_Holobob_GetIsCorrupted");
static_assert(offsetof(BFGMentalAbility_Holobob_GetIsCorrupted, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetIsCorrupted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetLastTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbility_Holobob_GetLastTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetLastTarget) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_GetLastTarget");
static_assert(sizeof(BFGMentalAbility_Holobob_GetLastTarget) == 0x000008, "Wrong size on BFGMentalAbility_Holobob_GetLastTarget");
static_assert(offsetof(BFGMentalAbility_Holobob_GetLastTarget, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetLastTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetMaxConcentration
// 0x0004 (0x0004 - 0x0000)
struct BFGMentalAbility_Holobob_GetMaxConcentration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetMaxConcentration) == 0x000004, "Wrong alignment on BFGMentalAbility_Holobob_GetMaxConcentration");
static_assert(sizeof(BFGMentalAbility_Holobob_GetMaxConcentration) == 0x000004, "Wrong size on BFGMentalAbility_Holobob_GetMaxConcentration");
static_assert(offsetof(BFGMentalAbility_Holobob_GetMaxConcentration, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetMaxConcentration::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.GetTargetAccessories
// 0x0010 (0x0010 - 0x0000)
struct BFGMentalAbility_Holobob_GetTargetAccessories final
{
public:
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_GetTargetAccessories) == 0x000008, "Wrong alignment on BFGMentalAbility_Holobob_GetTargetAccessories");
static_assert(sizeof(BFGMentalAbility_Holobob_GetTargetAccessories) == 0x000010, "Wrong size on BFGMentalAbility_Holobob_GetTargetAccessories");
static_assert(offsetof(BFGMentalAbility_Holobob_GetTargetAccessories, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_GetTargetAccessories::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.IsAbilityDisrupted
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbility_Holobob_IsAbilityDisrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_IsAbilityDisrupted) == 0x000001, "Wrong alignment on BFGMentalAbility_Holobob_IsAbilityDisrupted");
static_assert(sizeof(BFGMentalAbility_Holobob_IsAbilityDisrupted) == 0x000001, "Wrong size on BFGMentalAbility_Holobob_IsAbilityDisrupted");
static_assert(offsetof(BFGMentalAbility_Holobob_IsAbilityDisrupted, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_IsAbilityDisrupted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Holobob.IsHolobobSuppressionAuraActive
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbility_Holobob_IsHolobobSuppressionAuraActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Holobob_IsHolobobSuppressionAuraActive) == 0x000001, "Wrong alignment on BFGMentalAbility_Holobob_IsHolobobSuppressionAuraActive");
static_assert(sizeof(BFGMentalAbility_Holobob_IsHolobobSuppressionAuraActive) == 0x000001, "Wrong size on BFGMentalAbility_Holobob_IsHolobobSuppressionAuraActive");
static_assert(offsetof(BFGMentalAbility_Holobob_IsHolobobSuppressionAuraActive, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Holobob_IsHolobobSuppressionAuraActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CameraHandle.AddTimeCurve
// 0x0020 (0x0020 - 0x0000)
struct BFGActorComponent_CameraHandle_AddTimeCurve final
{
public:
	EBFGCameraTimeCurveFunction                   _eFunction;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _pCurve;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDuration;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bKeepLastValue;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_CameraHandle_AddTimeCurve) == 0x000008, "Wrong alignment on BFGActorComponent_CameraHandle_AddTimeCurve");
static_assert(sizeof(BFGActorComponent_CameraHandle_AddTimeCurve) == 0x000020, "Wrong size on BFGActorComponent_CameraHandle_AddTimeCurve");
static_assert(offsetof(BFGActorComponent_CameraHandle_AddTimeCurve, _eFunction) == 0x000000, "Member 'BFGActorComponent_CameraHandle_AddTimeCurve::_eFunction' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CameraHandle_AddTimeCurve, _pCurve) == 0x000008, "Member 'BFGActorComponent_CameraHandle_AddTimeCurve::_pCurve' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CameraHandle_AddTimeCurve, _fStartTime) == 0x000010, "Member 'BFGActorComponent_CameraHandle_AddTimeCurve::_fStartTime' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CameraHandle_AddTimeCurve, _fDuration) == 0x000014, "Member 'BFGActorComponent_CameraHandle_AddTimeCurve::_fDuration' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CameraHandle_AddTimeCurve, _bKeepLastValue) == 0x000018, "Member 'BFGActorComponent_CameraHandle_AddTimeCurve::_bKeepLastValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CameraHandle.ClearTimeCurvesByFunction
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_CameraHandle_ClearTimeCurvesByFunction final
{
public:
	EBFGCameraTimeCurveFunction                   _eFunction;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CameraHandle_ClearTimeCurvesByFunction) == 0x000001, "Wrong alignment on BFGActorComponent_CameraHandle_ClearTimeCurvesByFunction");
static_assert(sizeof(BFGActorComponent_CameraHandle_ClearTimeCurvesByFunction) == 0x000001, "Wrong size on BFGActorComponent_CameraHandle_ClearTimeCurvesByFunction");
static_assert(offsetof(BFGActorComponent_CameraHandle_ClearTimeCurvesByFunction, _eFunction) == 0x000000, "Member 'BFGActorComponent_CameraHandle_ClearTimeCurvesByFunction::_eFunction' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CameraHandle.ReplaceTimeCurve
// 0x0020 (0x0020 - 0x0000)
struct BFGActorComponent_CameraHandle_ReplaceTimeCurve final
{
public:
	EBFGCameraTimeCurveFunction                   _eFunction;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _pCurve;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDuration;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bKeepLastValue;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_CameraHandle_ReplaceTimeCurve) == 0x000008, "Wrong alignment on BFGActorComponent_CameraHandle_ReplaceTimeCurve");
static_assert(sizeof(BFGActorComponent_CameraHandle_ReplaceTimeCurve) == 0x000020, "Wrong size on BFGActorComponent_CameraHandle_ReplaceTimeCurve");
static_assert(offsetof(BFGActorComponent_CameraHandle_ReplaceTimeCurve, _eFunction) == 0x000000, "Member 'BFGActorComponent_CameraHandle_ReplaceTimeCurve::_eFunction' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CameraHandle_ReplaceTimeCurve, _pCurve) == 0x000008, "Member 'BFGActorComponent_CameraHandle_ReplaceTimeCurve::_pCurve' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CameraHandle_ReplaceTimeCurve, _fStartTime) == 0x000010, "Member 'BFGActorComponent_CameraHandle_ReplaceTimeCurve::_fStartTime' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CameraHandle_ReplaceTimeCurve, _fDuration) == 0x000014, "Member 'BFGActorComponent_CameraHandle_ReplaceTimeCurve::_fDuration' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CameraHandle_ReplaceTimeCurve, _bKeepLastValue) == 0x000018, "Member 'BFGActorComponent_CameraHandle_ReplaceTimeCurve::_bKeepLastValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CharacterPhysics.AddImpulse
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_CharacterPhysics_AddImpulse final
{
public:
	struct FVector                                _vVector;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _strBoneName;                                      // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bVelChange;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_CharacterPhysics_AddImpulse) == 0x000004, "Wrong alignment on BFGActorComponent_CharacterPhysics_AddImpulse");
static_assert(sizeof(BFGActorComponent_CharacterPhysics_AddImpulse) == 0x000018, "Wrong size on BFGActorComponent_CharacterPhysics_AddImpulse");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_AddImpulse, _vVector) == 0x000000, "Member 'BFGActorComponent_CharacterPhysics_AddImpulse::_vVector' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_AddImpulse, _strBoneName) == 0x00000C, "Member 'BFGActorComponent_CharacterPhysics_AddImpulse::_strBoneName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_AddImpulse, _bVelChange) == 0x000014, "Member 'BFGActorComponent_CharacterPhysics_AddImpulse::_bVelChange' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_AddImpulse, ReturnValue) == 0x000015, "Member 'BFGActorComponent_CharacterPhysics_AddImpulse::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CharacterPhysics.AddImpulseDefault
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_CharacterPhysics_AddImpulseDefault final
{
public:
	struct FVector                                _vVector;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_CharacterPhysics_AddImpulseDefault) == 0x000004, "Wrong alignment on BFGActorComponent_CharacterPhysics_AddImpulseDefault");
static_assert(sizeof(BFGActorComponent_CharacterPhysics_AddImpulseDefault) == 0x000010, "Wrong size on BFGActorComponent_CharacterPhysics_AddImpulseDefault");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_AddImpulseDefault, _vVector) == 0x000000, "Member 'BFGActorComponent_CharacterPhysics_AddImpulseDefault::_vVector' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_AddImpulseDefault, ReturnValue) == 0x00000C, "Member 'BFGActorComponent_CharacterPhysics_AddImpulseDefault::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CharacterPhysics.SetPhysicsSimulationState
// 0x0002 (0x0002 - 0x0000)
struct BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bResetToNonPhysicsActorWhenDone;                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState) == 0x000001, "Wrong alignment on BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState");
static_assert(sizeof(BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState) == 0x000002, "Wrong size on BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState, _bEnabled) == 0x000000, "Member 'BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState::_bEnabled' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState, _bResetToNonPhysicsActorWhenDone) == 0x000001, "Member 'BFGActorComponent_CharacterPhysics_SetPhysicsSimulationState::_bResetToNonPhysicsActorWhenDone' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CharacterPhysics.GetEstimatedCapsuleVelocity
// 0x000C (0x000C - 0x0000)
struct BFGActorComponent_CharacterPhysics_GetEstimatedCapsuleVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CharacterPhysics_GetEstimatedCapsuleVelocity) == 0x000004, "Wrong alignment on BFGActorComponent_CharacterPhysics_GetEstimatedCapsuleVelocity");
static_assert(sizeof(BFGActorComponent_CharacterPhysics_GetEstimatedCapsuleVelocity) == 0x00000C, "Wrong size on BFGActorComponent_CharacterPhysics_GetEstimatedCapsuleVelocity");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_GetEstimatedCapsuleVelocity, ReturnValue) == 0x000000, "Member 'BFGActorComponent_CharacterPhysics_GetEstimatedCapsuleVelocity::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CharacterPhysics.GetSimulatingComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_CharacterPhysics_GetSimulatingComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CharacterPhysics_GetSimulatingComponent) == 0x000008, "Wrong alignment on BFGActorComponent_CharacterPhysics_GetSimulatingComponent");
static_assert(sizeof(BFGActorComponent_CharacterPhysics_GetSimulatingComponent) == 0x000008, "Wrong size on BFGActorComponent_CharacterPhysics_GetSimulatingComponent");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_GetSimulatingComponent, ReturnValue) == 0x000000, "Member 'BFGActorComponent_CharacterPhysics_GetSimulatingComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CharacterPhysics.IsSimulatingPhysics
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_CharacterPhysics_IsSimulatingPhysics final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CharacterPhysics_IsSimulatingPhysics) == 0x000001, "Wrong alignment on BFGActorComponent_CharacterPhysics_IsSimulatingPhysics");
static_assert(sizeof(BFGActorComponent_CharacterPhysics_IsSimulatingPhysics) == 0x000001, "Wrong size on BFGActorComponent_CharacterPhysics_IsSimulatingPhysics");
static_assert(offsetof(BFGActorComponent_CharacterPhysics_IsSimulatingPhysics, ReturnValue) == 0x000000, "Member 'BFGActorComponent_CharacterPhysics_IsSimulatingPhysics::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_StatsBase.ToString
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_StatsBase_ToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_StatsBase_ToString) == 0x000008, "Wrong alignment on BFGActorComponent_StatsBase_ToString");
static_assert(sizeof(BFGActorComponent_StatsBase_ToString) == 0x000010, "Wrong size on BFGActorComponent_StatsBase_ToString");
static_assert(offsetof(BFGActorComponent_StatsBase_ToString, ReturnValue) == 0x000000, "Member 'BFGActorComponent_StatsBase_ToString::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.OnAIAlertStateStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_PawnStats_OnAIAlertStateStatChanged final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_uint8*                    _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_OnAIAlertStateStatChanged) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_OnAIAlertStateStatChanged");
static_assert(sizeof(BFGActorComponent_PawnStats_OnAIAlertStateStatChanged) == 0x000010, "Wrong size on BFGActorComponent_PawnStats_OnAIAlertStateStatChanged");
static_assert(offsetof(BFGActorComponent_PawnStats_OnAIAlertStateStatChanged, _pOwner) == 0x000000, "Member 'BFGActorComponent_PawnStats_OnAIAlertStateStatChanged::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnStats_OnAIAlertStateStatChanged, _pStat) == 0x000008, "Member 'BFGActorComponent_PawnStats_OnAIAlertStateStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.OnHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_PawnStats_OnHealthChanged final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Float*                    _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_OnHealthChanged) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_OnHealthChanged");
static_assert(sizeof(BFGActorComponent_PawnStats_OnHealthChanged) == 0x000010, "Wrong size on BFGActorComponent_PawnStats_OnHealthChanged");
static_assert(offsetof(BFGActorComponent_PawnStats_OnHealthChanged, _pOwner) == 0x000000, "Member 'BFGActorComponent_PawnStats_OnHealthChanged::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnStats_OnHealthChanged, _pStat) == 0x000008, "Member 'BFGActorComponent_PawnStats_OnHealthChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.OnShieldChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_PawnStats_OnShieldChanged final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Float*                    _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_OnShieldChanged) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_OnShieldChanged");
static_assert(sizeof(BFGActorComponent_PawnStats_OnShieldChanged) == 0x000010, "Wrong size on BFGActorComponent_PawnStats_OnShieldChanged");
static_assert(offsetof(BFGActorComponent_PawnStats_OnShieldChanged, _pOwner) == 0x000000, "Member 'BFGActorComponent_PawnStats_OnShieldChanged::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnStats_OnShieldChanged, _pStat) == 0x000008, "Member 'BFGActorComponent_PawnStats_OnShieldChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.GetCurrentAIAlertState
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PawnStats_GetCurrentAIAlertState final
{
public:
	class UBFGActorStat_EnumBehaviourState_NPC*   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_GetCurrentAIAlertState) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_GetCurrentAIAlertState");
static_assert(sizeof(BFGActorComponent_PawnStats_GetCurrentAIAlertState) == 0x000008, "Wrong size on BFGActorComponent_PawnStats_GetCurrentAIAlertState");
static_assert(offsetof(BFGActorComponent_PawnStats_GetCurrentAIAlertState, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PawnStats_GetCurrentAIAlertState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.GetHealthStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PawnStats_GetHealthStat final
{
public:
	class UBFGActorStat_Float*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_GetHealthStat) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_GetHealthStat");
static_assert(sizeof(BFGActorComponent_PawnStats_GetHealthStat) == 0x000008, "Wrong size on BFGActorComponent_PawnStats_GetHealthStat");
static_assert(offsetof(BFGActorComponent_PawnStats_GetHealthStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PawnStats_GetHealthStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.GetIsDeadStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PawnStats_GetIsDeadStat final
{
public:
	class UBFGActorStat_Bool*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_GetIsDeadStat) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_GetIsDeadStat");
static_assert(sizeof(BFGActorComponent_PawnStats_GetIsDeadStat) == 0x000008, "Wrong size on BFGActorComponent_PawnStats_GetIsDeadStat");
static_assert(offsetof(BFGActorComponent_PawnStats_GetIsDeadStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PawnStats_GetIsDeadStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.GetIsInvisibleStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PawnStats_GetIsInvisibleStat final
{
public:
	class UBFGActorStat_Bool*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_GetIsInvisibleStat) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_GetIsInvisibleStat");
static_assert(sizeof(BFGActorComponent_PawnStats_GetIsInvisibleStat) == 0x000008, "Wrong size on BFGActorComponent_PawnStats_GetIsInvisibleStat");
static_assert(offsetof(BFGActorComponent_PawnStats_GetIsInvisibleStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PawnStats_GetIsInvisibleStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.GetIsInWaterStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PawnStats_GetIsInWaterStat final
{
public:
	class UBFGActorStat_Bool*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_GetIsInWaterStat) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_GetIsInWaterStat");
static_assert(sizeof(BFGActorComponent_PawnStats_GetIsInWaterStat) == 0x000008, "Wrong size on BFGActorComponent_PawnStats_GetIsInWaterStat");
static_assert(offsetof(BFGActorComponent_PawnStats_GetIsInWaterStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PawnStats_GetIsInWaterStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnStats.GetShieldStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PawnStats_GetShieldStat final
{
public:
	class UBFGActorStat_Float*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnStats_GetShieldStat) == 0x000008, "Wrong alignment on BFGActorComponent_PawnStats_GetShieldStat");
static_assert(sizeof(BFGActorComponent_PawnStats_GetShieldStat) == 0x000008, "Wrong size on BFGActorComponent_PawnStats_GetShieldStat");
static_assert(offsetof(BFGActorComponent_PawnStats_GetShieldStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PawnStats_GetShieldStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CharacterStats.GetWillpowerStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_CharacterStats_GetWillpowerStat final
{
public:
	class UBFGActorStat_Float*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CharacterStats_GetWillpowerStat) == 0x000008, "Wrong alignment on BFGActorComponent_CharacterStats_GetWillpowerStat");
static_assert(sizeof(BFGActorComponent_CharacterStats_GetWillpowerStat) == 0x000008, "Wrong size on BFGActorComponent_CharacterStats_GetWillpowerStat");
static_assert(offsetof(BFGActorComponent_CharacterStats_GetWillpowerStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_CharacterStats_GetWillpowerStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_UIUpdateRequest.GetDescriptions
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_UIUpdateRequest_GetDescriptions final
{
public:
	TArray<struct FBFGQuest_UIData_Description>   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_UIUpdateRequest_GetDescriptions) == 0x000008, "Wrong alignment on BFGQuest_UIUpdateRequest_GetDescriptions");
static_assert(sizeof(BFGQuest_UIUpdateRequest_GetDescriptions) == 0x000010, "Wrong size on BFGQuest_UIUpdateRequest_GetDescriptions");
static_assert(offsetof(BFGQuest_UIUpdateRequest_GetDescriptions, ReturnValue) == 0x000000, "Member 'BFGQuest_UIUpdateRequest_GetDescriptions::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_UIUpdateRequest.GetIdentifier
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_UIUpdateRequest_GetIdentifier final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_UIUpdateRequest_GetIdentifier) == 0x000004, "Wrong alignment on BFGQuest_UIUpdateRequest_GetIdentifier");
static_assert(sizeof(BFGQuest_UIUpdateRequest_GetIdentifier) == 0x000008, "Wrong size on BFGQuest_UIUpdateRequest_GetIdentifier");
static_assert(offsetof(BFGQuest_UIUpdateRequest_GetIdentifier, ReturnValue) == 0x000000, "Member 'BFGQuest_UIUpdateRequest_GetIdentifier::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_UIUpdateRequest.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_UIUpdateRequest_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_UIUpdateRequest_GetTitle) == 0x000008, "Wrong alignment on BFGQuest_UIUpdateRequest_GetTitle");
static_assert(sizeof(BFGQuest_UIUpdateRequest_GetTitle) == 0x000018, "Wrong size on BFGQuest_UIUpdateRequest_GetTitle");
static_assert(offsetof(BFGQuest_UIUpdateRequest_GetTitle, ReturnValue) == 0x000000, "Member 'BFGQuest_UIUpdateRequest_GetTitle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_UIUpdateRequest.IsEmptyOrWhitespace
// 0x0001 (0x0001 - 0x0000)
struct BFGQuest_UIUpdateRequest_IsEmptyOrWhitespace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_UIUpdateRequest_IsEmptyOrWhitespace) == 0x000001, "Wrong alignment on BFGQuest_UIUpdateRequest_IsEmptyOrWhitespace");
static_assert(sizeof(BFGQuest_UIUpdateRequest_IsEmptyOrWhitespace) == 0x000001, "Wrong size on BFGQuest_UIUpdateRequest_IsEmptyOrWhitespace");
static_assert(offsetof(BFGQuest_UIUpdateRequest_IsEmptyOrWhitespace, ReturnValue) == 0x000000, "Member 'BFGQuest_UIUpdateRequest_IsEmptyOrWhitespace::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_UIUpdateRequest.IsMainQuest
// 0x0001 (0x0001 - 0x0000)
struct BFGQuest_UIUpdateRequest_IsMainQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_UIUpdateRequest_IsMainQuest) == 0x000001, "Wrong alignment on BFGQuest_UIUpdateRequest_IsMainQuest");
static_assert(sizeof(BFGQuest_UIUpdateRequest_IsMainQuest) == 0x000001, "Wrong size on BFGQuest_UIUpdateRequest_IsMainQuest");
static_assert(offsetof(BFGQuest_UIUpdateRequest_IsMainQuest, ReturnValue) == 0x000000, "Member 'BFGQuest_UIUpdateRequest_IsMainQuest::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.ABFGVoiceoverPlaybackActor_OnItemPlaybackStopped_Server
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerController_ABFGVoiceoverPlaybackActor_OnItemPlaybackStopped_Server final
{
public:
	class ABFGVoiceoverPlaybackActor*             _pCallback;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_ABFGVoiceoverPlaybackActor_OnItemPlaybackStopped_Server) == 0x000008, "Wrong alignment on BFGPlayerController_ABFGVoiceoverPlaybackActor_OnItemPlaybackStopped_Server");
static_assert(sizeof(BFGPlayerController_ABFGVoiceoverPlaybackActor_OnItemPlaybackStopped_Server) == 0x000008, "Wrong size on BFGPlayerController_ABFGVoiceoverPlaybackActor_OnItemPlaybackStopped_Server");
static_assert(offsetof(BFGPlayerController_ABFGVoiceoverPlaybackActor_OnItemPlaybackStopped_Server, _pCallback) == 0x000000, "Member 'BFGPlayerController_ABFGVoiceoverPlaybackActor_OnItemPlaybackStopped_Server::_pCallback' has a wrong offset!");

// Function BFGCore.BFGPlayerController.GetCheatManager
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerController_GetCheatManager final
{
public:
	class UBFGCheatManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_GetCheatManager) == 0x000008, "Wrong alignment on BFGPlayerController_GetCheatManager");
static_assert(sizeof(BFGPlayerController_GetCheatManager) == 0x000008, "Wrong size on BFGPlayerController_GetCheatManager");
static_assert(offsetof(BFGPlayerController_GetCheatManager, ReturnValue) == 0x000000, "Member 'BFGPlayerController_GetCheatManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.SwitchToGroundMode
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerController_SwitchToGroundMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_SwitchToGroundMode) == 0x000001, "Wrong alignment on BFGPlayerController_SwitchToGroundMode");
static_assert(sizeof(BFGPlayerController_SwitchToGroundMode) == 0x000001, "Wrong size on BFGPlayerController_SwitchToGroundMode");
static_assert(offsetof(BFGPlayerController_SwitchToGroundMode, ReturnValue) == 0x000000, "Member 'BFGPlayerController_SwitchToGroundMode::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.SwitchToUFOMode
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerController_SwitchToUFOMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_SwitchToUFOMode) == 0x000001, "Wrong alignment on BFGPlayerController_SwitchToUFOMode");
static_assert(sizeof(BFGPlayerController_SwitchToUFOMode) == 0x000001, "Wrong size on BFGPlayerController_SwitchToUFOMode");
static_assert(offsetof(BFGPlayerController_SwitchToUFOMode, ReturnValue) == 0x000000, "Member 'BFGPlayerController_SwitchToUFOMode::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.GetLastPressedKey
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerController_GetLastPressedKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_GetLastPressedKey) == 0x000008, "Wrong alignment on BFGPlayerController_GetLastPressedKey");
static_assert(sizeof(BFGPlayerController_GetLastPressedKey) == 0x000018, "Wrong size on BFGPlayerController_GetLastPressedKey");
static_assert(offsetof(BFGPlayerController_GetLastPressedKey, ReturnValue) == 0x000000, "Member 'BFGPlayerController_GetLastPressedKey::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerController_GetSettings final
{
public:
	class UBFGPlayerCharacter_Settings*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_GetSettings) == 0x000008, "Wrong alignment on BFGPlayerController_GetSettings");
static_assert(sizeof(BFGPlayerController_GetSettings) == 0x000008, "Wrong size on BFGPlayerController_GetSettings");
static_assert(offsetof(BFGPlayerController_GetSettings, ReturnValue) == 0x000000, "Member 'BFGPlayerController_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.IsAnyKeyPressed
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerController_IsAnyKeyPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_IsAnyKeyPressed) == 0x000001, "Wrong alignment on BFGPlayerController_IsAnyKeyPressed");
static_assert(sizeof(BFGPlayerController_IsAnyKeyPressed) == 0x000001, "Wrong size on BFGPlayerController_IsAnyKeyPressed");
static_assert(offsetof(BFGPlayerController_IsAnyKeyPressed, ReturnValue) == 0x000000, "Member 'BFGPlayerController_IsAnyKeyPressed::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.IsGameplayController
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerController_IsGameplayController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_IsGameplayController) == 0x000001, "Wrong alignment on BFGPlayerController_IsGameplayController");
static_assert(sizeof(BFGPlayerController_IsGameplayController) == 0x000001, "Wrong size on BFGPlayerController_IsGameplayController");
static_assert(offsetof(BFGPlayerController_IsGameplayController, ReturnValue) == 0x000000, "Member 'BFGPlayerController_IsGameplayController::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.IsGroundMode
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerController_IsGroundMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_IsGroundMode) == 0x000001, "Wrong alignment on BFGPlayerController_IsGroundMode");
static_assert(sizeof(BFGPlayerController_IsGroundMode) == 0x000001, "Wrong size on BFGPlayerController_IsGroundMode");
static_assert(offsetof(BFGPlayerController_IsGroundMode, ReturnValue) == 0x000000, "Member 'BFGPlayerController_IsGroundMode::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerController.IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerController_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerController_IsUsingGamepad) == 0x000001, "Wrong alignment on BFGPlayerController_IsUsingGamepad");
static_assert(sizeof(BFGPlayerController_IsUsingGamepad) == 0x000001, "Wrong size on BFGPlayerController_IsUsingGamepad");
static_assert(offsetof(BFGPlayerController_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'BFGPlayerController_IsUsingGamepad::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGUI_RadialMenu_Option.Action__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGUI_RadialMenu_Option_Action__DelegateSignature final
{
public:
	class UBFGUI_RadialMenu_Option*               _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUI_RadialMenu_Option_Action__DelegateSignature) == 0x000008, "Wrong alignment on BFGUI_RadialMenu_Option_Action__DelegateSignature");
static_assert(sizeof(BFGUI_RadialMenu_Option_Action__DelegateSignature) == 0x000008, "Wrong size on BFGUI_RadialMenu_Option_Action__DelegateSignature");
static_assert(offsetof(BFGUI_RadialMenu_Option_Action__DelegateSignature, _pOption) == 0x000000, "Member 'BFGUI_RadialMenu_Option_Action__DelegateSignature::_pOption' has a wrong offset!");

// Function BFGCore.BFGUI_RadialMenu_Option.GetMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGUI_RadialMenu_Option_GetMenuWidget final
{
public:
	class UBFGRadialMenuUserWidget*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUI_RadialMenu_Option_GetMenuWidget) == 0x000008, "Wrong alignment on BFGUI_RadialMenu_Option_GetMenuWidget");
static_assert(sizeof(BFGUI_RadialMenu_Option_GetMenuWidget) == 0x000008, "Wrong size on BFGUI_RadialMenu_Option_GetMenuWidget");
static_assert(offsetof(BFGUI_RadialMenu_Option_GetMenuWidget, ReturnValue) == 0x000000, "Member 'BFGUI_RadialMenu_Option_GetMenuWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUI_RadialMenu_Option.Highlight
// 0x0001 (0x0001 - 0x0000)
struct BFGUI_RadialMenu_Option_Highlight final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUI_RadialMenu_Option_Highlight) == 0x000001, "Wrong alignment on BFGUI_RadialMenu_Option_Highlight");
static_assert(sizeof(BFGUI_RadialMenu_Option_Highlight) == 0x000001, "Wrong size on BFGUI_RadialMenu_Option_Highlight");
static_assert(offsetof(BFGUI_RadialMenu_Option_Highlight, _bEnabled) == 0x000000, "Member 'BFGUI_RadialMenu_Option_Highlight::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGUI_RadialMenu_Option.InitializeOption
// 0x0050 (0x0050 - 0x0000)
struct BFGUI_RadialMenu_Option_InitializeOption final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _strTooltip;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _strDescription;                                   // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                _pObject;                                          // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUI_RadialMenu_Option_InitializeOption) == 0x000008, "Wrong alignment on BFGUI_RadialMenu_Option_InitializeOption");
static_assert(sizeof(BFGUI_RadialMenu_Option_InitializeOption) == 0x000050, "Wrong size on BFGUI_RadialMenu_Option_InitializeOption");
static_assert(offsetof(BFGUI_RadialMenu_Option_InitializeOption, _strText) == 0x000000, "Member 'BFGUI_RadialMenu_Option_InitializeOption::_strText' has a wrong offset!");
static_assert(offsetof(BFGUI_RadialMenu_Option_InitializeOption, _strTooltip) == 0x000018, "Member 'BFGUI_RadialMenu_Option_InitializeOption::_strTooltip' has a wrong offset!");
static_assert(offsetof(BFGUI_RadialMenu_Option_InitializeOption, _strDescription) == 0x000030, "Member 'BFGUI_RadialMenu_Option_InitializeOption::_strDescription' has a wrong offset!");
static_assert(offsetof(BFGUI_RadialMenu_Option_InitializeOption, _pObject) == 0x000048, "Member 'BFGUI_RadialMenu_Option_InitializeOption::_pObject' has a wrong offset!");

// Function BFGCore.BFGUI_RadialMenu_Option.SetIconTextures
// 0x0010 (0x0010 - 0x0000)
struct BFGUI_RadialMenu_Option_SetIconTextures final
{
public:
	class UTexture2D*                             _pDefault;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             _pHighlighted;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUI_RadialMenu_Option_SetIconTextures) == 0x000008, "Wrong alignment on BFGUI_RadialMenu_Option_SetIconTextures");
static_assert(sizeof(BFGUI_RadialMenu_Option_SetIconTextures) == 0x000010, "Wrong size on BFGUI_RadialMenu_Option_SetIconTextures");
static_assert(offsetof(BFGUI_RadialMenu_Option_SetIconTextures, _pDefault) == 0x000000, "Member 'BFGUI_RadialMenu_Option_SetIconTextures::_pDefault' has a wrong offset!");
static_assert(offsetof(BFGUI_RadialMenu_Option_SetIconTextures, _pHighlighted) == 0x000008, "Member 'BFGUI_RadialMenu_Option_SetIconTextures::_pHighlighted' has a wrong offset!");

// Function BFGCore.BFGUI_RadialMenu_Option.SetOptionWidgets
// 0x0008 (0x0008 - 0x0000)
struct BFGUI_RadialMenu_Option_SetOptionWidgets final
{
public:
	class UBFGWidget_RadialMenu_OptionIcon*       _pWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUI_RadialMenu_Option_SetOptionWidgets) == 0x000008, "Wrong alignment on BFGUI_RadialMenu_Option_SetOptionWidgets");
static_assert(sizeof(BFGUI_RadialMenu_Option_SetOptionWidgets) == 0x000008, "Wrong size on BFGUI_RadialMenu_Option_SetOptionWidgets");
static_assert(offsetof(BFGUI_RadialMenu_Option_SetOptionWidgets, _pWidget) == 0x000000, "Member 'BFGUI_RadialMenu_Option_SetOptionWidgets::_pWidget' has a wrong offset!");

// Function BFGCore.BFGUI_RadialMenu_Option.GetOptionWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGUI_RadialMenu_Option_GetOptionWidget final
{
public:
	class UBFGWidget_RadialMenu_OptionIcon*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUI_RadialMenu_Option_GetOptionWidget) == 0x000008, "Wrong alignment on BFGUI_RadialMenu_Option_GetOptionWidget");
static_assert(sizeof(BFGUI_RadialMenu_Option_GetOptionWidget) == 0x000008, "Wrong size on BFGUI_RadialMenu_Option_GetOptionWidget");
static_assert(offsetof(BFGUI_RadialMenu_Option_GetOptionWidget, ReturnValue) == 0x000000, "Member 'BFGUI_RadialMenu_Option_GetOptionWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CheatHelper.CheckCheatCommandInput
// 0x00E0 (0x00E0 - 0x0000)
struct BFGActorComponent_CheatHelper_CheckCheatCommandInput final
{
public:
	struct FBFGCheatTableEntry                    _pEntry;                                           // 0x0000(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CheatHelper_CheckCheatCommandInput) == 0x000008, "Wrong alignment on BFGActorComponent_CheatHelper_CheckCheatCommandInput");
static_assert(sizeof(BFGActorComponent_CheatHelper_CheckCheatCommandInput) == 0x0000E0, "Wrong size on BFGActorComponent_CheatHelper_CheckCheatCommandInput");
static_assert(offsetof(BFGActorComponent_CheatHelper_CheckCheatCommandInput, _pEntry) == 0x000000, "Member 'BFGActorComponent_CheatHelper_CheckCheatCommandInput::_pEntry' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CheatHelper.UIISShown
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_CheatHelper_UIISShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CheatHelper_UIISShown) == 0x000001, "Wrong alignment on BFGActorComponent_CheatHelper_UIISShown");
static_assert(sizeof(BFGActorComponent_CheatHelper_UIISShown) == 0x000001, "Wrong size on BFGActorComponent_CheatHelper_UIISShown");
static_assert(offsetof(BFGActorComponent_CheatHelper_UIISShown, ReturnValue) == 0x000000, "Member 'BFGActorComponent_CheatHelper_UIISShown::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_CortexScanResponse.OnOwnerDead
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_CortexScanResponse_OnOwnerDead final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_CortexScanResponse_OnOwnerDead) == 0x000008, "Wrong alignment on BFGActorComponent_CortexScanResponse_OnOwnerDead");
static_assert(sizeof(BFGActorComponent_CortexScanResponse_OnOwnerDead) == 0x000010, "Wrong size on BFGActorComponent_CortexScanResponse_OnOwnerDead");
static_assert(offsetof(BFGActorComponent_CortexScanResponse_OnOwnerDead, _pActor) == 0x000000, "Member 'BFGActorComponent_CortexScanResponse_OnOwnerDead::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_CortexScanResponse_OnOwnerDead, _pStat) == 0x000008, "Member 'BFGActorComponent_CortexScanResponse_OnOwnerDead::_pStat' has a wrong offset!");

// DelegateFunction BFGCore.BFGUserSignInManager.BFGUserSignInManagerEvent_Busy__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_BFGUserSignInManagerEvent_Busy__DelegateSignature final
{
public:
	bool                                          _bIsBusy;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_BFGUserSignInManagerEvent_Busy__DelegateSignature) == 0x000001, "Wrong alignment on BFGUserSignInManager_BFGUserSignInManagerEvent_Busy__DelegateSignature");
static_assert(sizeof(BFGUserSignInManager_BFGUserSignInManagerEvent_Busy__DelegateSignature) == 0x000001, "Wrong size on BFGUserSignInManager_BFGUserSignInManagerEvent_Busy__DelegateSignature");
static_assert(offsetof(BFGUserSignInManager_BFGUserSignInManagerEvent_Busy__DelegateSignature, _bIsBusy) == 0x000000, "Member 'BFGUserSignInManager_BFGUserSignInManagerEvent_Busy__DelegateSignature::_bIsBusy' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.HandleGameFlowChanges
// 0x0002 (0x0002 - 0x0000)
struct BFGUserSignInManager_HandleGameFlowChanges final
{
public:
	bool                                          _bIsGameplay;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_HandleGameFlowChanges) == 0x000001, "Wrong alignment on BFGUserSignInManager_HandleGameFlowChanges");
static_assert(sizeof(BFGUserSignInManager_HandleGameFlowChanges) == 0x000002, "Wrong size on BFGUserSignInManager_HandleGameFlowChanges");
static_assert(offsetof(BFGUserSignInManager_HandleGameFlowChanges, _bIsGameplay) == 0x000000, "Member 'BFGUserSignInManager_HandleGameFlowChanges::_bIsGameplay' has a wrong offset!");
static_assert(offsetof(BFGUserSignInManager_HandleGameFlowChanges, ReturnValue) == 0x000001, "Member 'BFGUserSignInManager_HandleGameFlowChanges::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.OnControllerDisconnectedButtonPressed
// 0x0004 (0x0004 - 0x0000)
struct BFGUserSignInManager_OnControllerDisconnectedButtonPressed final
{
public:
	int32                                         _iStableUserIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_OnControllerDisconnectedButtonPressed) == 0x000004, "Wrong alignment on BFGUserSignInManager_OnControllerDisconnectedButtonPressed");
static_assert(sizeof(BFGUserSignInManager_OnControllerDisconnectedButtonPressed) == 0x000004, "Wrong size on BFGUserSignInManager_OnControllerDisconnectedButtonPressed");
static_assert(offsetof(BFGUserSignInManager_OnControllerDisconnectedButtonPressed, _iStableUserIndex) == 0x000000, "Member 'BFGUserSignInManager_OnControllerDisconnectedButtonPressed::_iStableUserIndex' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.OnUserSignedOutButtonPressed
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_OnUserSignedOutButtonPressed final
{
public:
	bool                                          _bAcceptSignOut;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_OnUserSignedOutButtonPressed) == 0x000001, "Wrong alignment on BFGUserSignInManager_OnUserSignedOutButtonPressed");
static_assert(sizeof(BFGUserSignInManager_OnUserSignedOutButtonPressed) == 0x000001, "Wrong size on BFGUserSignInManager_OnUserSignedOutButtonPressed");
static_assert(offsetof(BFGUserSignInManager_OnUserSignedOutButtonPressed, _bAcceptSignOut) == 0x000000, "Member 'BFGUserSignInManager_OnUserSignedOutButtonPressed::_bAcceptSignOut' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.SetControllerConnected
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_SetControllerConnected final
{
public:
	bool                                          _bDisconnected;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_SetControllerConnected) == 0x000001, "Wrong alignment on BFGUserSignInManager_SetControllerConnected");
static_assert(sizeof(BFGUserSignInManager_SetControllerConnected) == 0x000001, "Wrong size on BFGUserSignInManager_SetControllerConnected");
static_assert(offsetof(BFGUserSignInManager_SetControllerConnected, _bDisconnected) == 0x000000, "Member 'BFGUserSignInManager_SetControllerConnected::_bDisconnected' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.SetNeedIIS
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_SetNeedIIS final
{
public:
	bool                                          _bForceIIS;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_SetNeedIIS) == 0x000001, "Wrong alignment on BFGUserSignInManager_SetNeedIIS");
static_assert(sizeof(BFGUserSignInManager_SetNeedIIS) == 0x000001, "Wrong size on BFGUserSignInManager_SetNeedIIS");
static_assert(offsetof(BFGUserSignInManager_SetNeedIIS, _bForceIIS) == 0x000000, "Member 'BFGUserSignInManager_SetNeedIIS::_bForceIIS' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.SetUserSignedIn
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_SetUserSignedIn final
{
public:
	bool                                          _bLoggedOut;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_SetUserSignedIn) == 0x000001, "Wrong alignment on BFGUserSignInManager_SetUserSignedIn");
static_assert(sizeof(BFGUserSignInManager_SetUserSignedIn) == 0x000001, "Wrong size on BFGUserSignInManager_SetUserSignedIn");
static_assert(offsetof(BFGUserSignInManager_SetUserSignedIn, _bLoggedOut) == 0x000000, "Member 'BFGUserSignInManager_SetUserSignedIn::_bLoggedOut' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.ShouldShowControllerDisconnectedPopup
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_ShouldShowControllerDisconnectedPopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_ShouldShowControllerDisconnectedPopup) == 0x000001, "Wrong alignment on BFGUserSignInManager_ShouldShowControllerDisconnectedPopup");
static_assert(sizeof(BFGUserSignInManager_ShouldShowControllerDisconnectedPopup) == 0x000001, "Wrong size on BFGUserSignInManager_ShouldShowControllerDisconnectedPopup");
static_assert(offsetof(BFGUserSignInManager_ShouldShowControllerDisconnectedPopup, ReturnValue) == 0x000000, "Member 'BFGUserSignInManager_ShouldShowControllerDisconnectedPopup::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.ShouldShowSwitchProfileButton
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_ShouldShowSwitchProfileButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_ShouldShowSwitchProfileButton) == 0x000001, "Wrong alignment on BFGUserSignInManager_ShouldShowSwitchProfileButton");
static_assert(sizeof(BFGUserSignInManager_ShouldShowSwitchProfileButton) == 0x000001, "Wrong size on BFGUserSignInManager_ShouldShowSwitchProfileButton");
static_assert(offsetof(BFGUserSignInManager_ShouldShowSwitchProfileButton, ReturnValue) == 0x000000, "Member 'BFGUserSignInManager_ShouldShowSwitchProfileButton::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.ShouldShowUserSignedOutPopup
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_ShouldShowUserSignedOutPopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_ShouldShowUserSignedOutPopup) == 0x000001, "Wrong alignment on BFGUserSignInManager_ShouldShowUserSignedOutPopup");
static_assert(sizeof(BFGUserSignInManager_ShouldShowUserSignedOutPopup) == 0x000001, "Wrong size on BFGUserSignInManager_ShouldShowUserSignedOutPopup");
static_assert(offsetof(BFGUserSignInManager_ShouldShowUserSignedOutPopup, ReturnValue) == 0x000000, "Member 'BFGUserSignInManager_ShouldShowUserSignedOutPopup::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.ShowMessageBox
// 0x0010 (0x0010 - 0x0000)
struct BFGUserSignInManager_ShowMessageBox final
{
public:
	class FString                                 _strParam;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_ShowMessageBox) == 0x000008, "Wrong alignment on BFGUserSignInManager_ShowMessageBox");
static_assert(sizeof(BFGUserSignInManager_ShowMessageBox) == 0x000010, "Wrong size on BFGUserSignInManager_ShowMessageBox");
static_assert(offsetof(BFGUserSignInManager_ShowMessageBox, _strParam) == 0x000000, "Member 'BFGUserSignInManager_ShowMessageBox::_strParam' has a wrong offset!");

// Function BFGCore.BFGUserSignInManager.IsBusyWithSignIn
// 0x0001 (0x0001 - 0x0000)
struct BFGUserSignInManager_IsBusyWithSignIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUserSignInManager_IsBusyWithSignIn) == 0x000001, "Wrong alignment on BFGUserSignInManager_IsBusyWithSignIn");
static_assert(sizeof(BFGUserSignInManager_IsBusyWithSignIn) == 0x000001, "Wrong size on BFGUserSignInManager_IsBusyWithSignIn");
static_assert(offsetof(BFGUserSignInManager_IsBusyWithSignIn, ReturnValue) == 0x000000, "Member 'BFGUserSignInManager_IsBusyWithSignIn::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_Dash.BFGActorComponent_Dash_Event__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_Dash_BFGActorComponent_Dash_Event__DelegateSignature final
{
public:
	class UBFGActorComponent_Dash*                _pDashComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Dash_BFGActorComponent_Dash_Event__DelegateSignature) == 0x000008, "Wrong alignment on BFGActorComponent_Dash_BFGActorComponent_Dash_Event__DelegateSignature");
static_assert(sizeof(BFGActorComponent_Dash_BFGActorComponent_Dash_Event__DelegateSignature) == 0x000008, "Wrong size on BFGActorComponent_Dash_BFGActorComponent_Dash_Event__DelegateSignature");
static_assert(offsetof(BFGActorComponent_Dash_BFGActorComponent_Dash_Event__DelegateSignature, _pDashComponent) == 0x000000, "Member 'BFGActorComponent_Dash_BFGActorComponent_Dash_Event__DelegateSignature::_pDashComponent' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_Dash.BFGActorComponent_DashPhase_Event__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature final
{
public:
	class UBFGActorComponent_Dash*                _pDashComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iPhase;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature) == 0x000008, "Wrong alignment on BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature");
static_assert(sizeof(BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature) == 0x000010, "Wrong size on BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature");
static_assert(offsetof(BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature, _pDashComponent) == 0x000000, "Member 'BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature::_pDashComponent' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature, _iPhase) == 0x000008, "Member 'BFGActorComponent_Dash_BFGActorComponent_DashPhase_Event__DelegateSignature::_iPhase' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Dash.OnOwnerDamage
// 0x0028 (0x0028 - 0x0000)
struct BFGActorComponent_Dash_OnOwnerDamage final
{
public:
	class AActor*                                 _DamagedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      _pDamageType;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _pInstigatedBy;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pDamageCauser;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Dash_OnOwnerDamage) == 0x000008, "Wrong alignment on BFGActorComponent_Dash_OnOwnerDamage");
static_assert(sizeof(BFGActorComponent_Dash_OnOwnerDamage) == 0x000028, "Wrong size on BFGActorComponent_Dash_OnOwnerDamage");
static_assert(offsetof(BFGActorComponent_Dash_OnOwnerDamage, _DamagedActor) == 0x000000, "Member 'BFGActorComponent_Dash_OnOwnerDamage::_DamagedActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Dash_OnOwnerDamage, _fDamage) == 0x000008, "Member 'BFGActorComponent_Dash_OnOwnerDamage::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Dash_OnOwnerDamage, _pDamageType) == 0x000010, "Member 'BFGActorComponent_Dash_OnOwnerDamage::_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Dash_OnOwnerDamage, _pInstigatedBy) == 0x000018, "Member 'BFGActorComponent_Dash_OnOwnerDamage::_pInstigatedBy' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Dash_OnOwnerDamage, _pDamageCauser) == 0x000020, "Member 'BFGActorComponent_Dash_OnOwnerDamage::_pDamageCauser' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Dash.IsDashEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_Dash_IsDashEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Dash_IsDashEnabled) == 0x000001, "Wrong alignment on BFGActorComponent_Dash_IsDashEnabled");
static_assert(sizeof(BFGActorComponent_Dash_IsDashEnabled) == 0x000001, "Wrong size on BFGActorComponent_Dash_IsDashEnabled");
static_assert(offsetof(BFGActorComponent_Dash_IsDashEnabled, ReturnValue) == 0x000000, "Member 'BFGActorComponent_Dash_IsDashEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Dash.IsEchotronRamjetsUnlocked
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_Dash_IsEchotronRamjetsUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Dash_IsEchotronRamjetsUnlocked) == 0x000001, "Wrong alignment on BFGActorComponent_Dash_IsEchotronRamjetsUnlocked");
static_assert(sizeof(BFGActorComponent_Dash_IsEchotronRamjetsUnlocked) == 0x000001, "Wrong size on BFGActorComponent_Dash_IsEchotronRamjetsUnlocked");
static_assert(offsetof(BFGActorComponent_Dash_IsEchotronRamjetsUnlocked, ReturnValue) == 0x000000, "Member 'BFGActorComponent_Dash_IsEchotronRamjetsUnlocked::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Dash.IsThrustATron2000Unlocked
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_Dash_IsThrustATron2000Unlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Dash_IsThrustATron2000Unlocked) == 0x000001, "Wrong alignment on BFGActorComponent_Dash_IsThrustATron2000Unlocked");
static_assert(sizeof(BFGActorComponent_Dash_IsThrustATron2000Unlocked) == 0x000001, "Wrong size on BFGActorComponent_Dash_IsThrustATron2000Unlocked");
static_assert(offsetof(BFGActorComponent_Dash_IsThrustATron2000Unlocked, ReturnValue) == 0x000000, "Member 'BFGActorComponent_Dash_IsThrustATron2000Unlocked::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Dash.IsThrustATron5000Unlocked
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_Dash_IsThrustATron5000Unlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Dash_IsThrustATron5000Unlocked) == 0x000001, "Wrong alignment on BFGActorComponent_Dash_IsThrustATron5000Unlocked");
static_assert(sizeof(BFGActorComponent_Dash_IsThrustATron5000Unlocked) == 0x000001, "Wrong size on BFGActorComponent_Dash_IsThrustATron5000Unlocked");
static_assert(offsetof(BFGActorComponent_Dash_IsThrustATron5000Unlocked, ReturnValue) == 0x000000, "Member 'BFGActorComponent_Dash_IsThrustATron5000Unlocked::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.IsDisguised
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_DetectionHelper_IsDisguised final
{
public:
	class AActor*                                 _pDisguisedActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHandleConsequences;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIgnoreChangingDisguiseFlag;                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_DetectionHelper_IsDisguised) == 0x000008, "Wrong alignment on BFGActorComponent_DetectionHelper_IsDisguised");
static_assert(sizeof(BFGActorComponent_DetectionHelper_IsDisguised) == 0x000010, "Wrong size on BFGActorComponent_DetectionHelper_IsDisguised");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsDisguised, _pDisguisedActor) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_IsDisguised::_pDisguisedActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsDisguised, _bHandleConsequences) == 0x000008, "Member 'BFGActorComponent_DetectionHelper_IsDisguised::_bHandleConsequences' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsDisguised, _bIgnoreChangingDisguiseFlag) == 0x000009, "Member 'BFGActorComponent_DetectionHelper_IsDisguised::_bIgnoreChangingDisguiseFlag' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsDisguised, ReturnValue) == 0x00000A, "Member 'BFGActorComponent_DetectionHelper_IsDisguised::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.OnAIAlertStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_DetectionHelper_OnAIAlertStateChanged final
{
public:
	EBFGBehaviourState_NPC                        _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_DetectionHelper_OnAIAlertStateChanged) == 0x000001, "Wrong alignment on BFGActorComponent_DetectionHelper_OnAIAlertStateChanged");
static_assert(sizeof(BFGActorComponent_DetectionHelper_OnAIAlertStateChanged) == 0x000001, "Wrong size on BFGActorComponent_DetectionHelper_OnAIAlertStateChanged");
static_assert(offsetof(BFGActorComponent_DetectionHelper_OnAIAlertStateChanged, _eState) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_OnAIAlertStateChanged::_eState' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.SetLastSensorUpdateTime
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_DetectionHelper_SetLastSensorUpdateTime final
{
public:
	float                                         _fLastSensorUpdateTime;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_DetectionHelper_SetLastSensorUpdateTime) == 0x000004, "Wrong alignment on BFGActorComponent_DetectionHelper_SetLastSensorUpdateTime");
static_assert(sizeof(BFGActorComponent_DetectionHelper_SetLastSensorUpdateTime) == 0x000004, "Wrong size on BFGActorComponent_DetectionHelper_SetLastSensorUpdateTime");
static_assert(offsetof(BFGActorComponent_DetectionHelper_SetLastSensorUpdateTime, _fLastSensorUpdateTime) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_SetLastSensorUpdateTime::_fLastSensorUpdateTime' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.GetShareKnowledge
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_DetectionHelper_GetShareKnowledge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_DetectionHelper_GetShareKnowledge) == 0x000001, "Wrong alignment on BFGActorComponent_DetectionHelper_GetShareKnowledge");
static_assert(sizeof(BFGActorComponent_DetectionHelper_GetShareKnowledge) == 0x000001, "Wrong size on BFGActorComponent_DetectionHelper_GetShareKnowledge");
static_assert(offsetof(BFGActorComponent_DetectionHelper_GetShareKnowledge, ReturnValue) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_GetShareKnowledge::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.IsDetectable
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_DetectionHelper_IsDetectable final
{
public:
	class AActor*                                 _pTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_DetectionHelper_IsDetectable) == 0x000008, "Wrong alignment on BFGActorComponent_DetectionHelper_IsDetectable");
static_assert(sizeof(BFGActorComponent_DetectionHelper_IsDetectable) == 0x000010, "Wrong size on BFGActorComponent_DetectionHelper_IsDetectable");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsDetectable, _pTargetActor) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_IsDetectable::_pTargetActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsDetectable, ReturnValue) == 0x000008, "Member 'BFGActorComponent_DetectionHelper_IsDetectable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.IsHypnotized
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_DetectionHelper_IsHypnotized final
{
public:
	class AActor*                                 _pTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_DetectionHelper_IsHypnotized) == 0x000008, "Wrong alignment on BFGActorComponent_DetectionHelper_IsHypnotized");
static_assert(sizeof(BFGActorComponent_DetectionHelper_IsHypnotized) == 0x000010, "Wrong size on BFGActorComponent_DetectionHelper_IsHypnotized");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsHypnotized, _pTargetActor) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_IsHypnotized::_pTargetActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsHypnotized, ReturnValue) == 0x000008, "Member 'BFGActorComponent_DetectionHelper_IsHypnotized::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.IsInProtectiveBubble
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_DetectionHelper_IsInProtectiveBubble final
{
public:
	class AActor*                                 _pTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_DetectionHelper_IsInProtectiveBubble) == 0x000008, "Wrong alignment on BFGActorComponent_DetectionHelper_IsInProtectiveBubble");
static_assert(sizeof(BFGActorComponent_DetectionHelper_IsInProtectiveBubble) == 0x000010, "Wrong size on BFGActorComponent_DetectionHelper_IsInProtectiveBubble");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsInProtectiveBubble, _pTargetActor) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_IsInProtectiveBubble::_pTargetActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsInProtectiveBubble, ReturnValue) == 0x000008, "Member 'BFGActorComponent_DetectionHelper_IsInProtectiveBubble::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.IsStunned
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_DetectionHelper_IsStunned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_DetectionHelper_IsStunned) == 0x000001, "Wrong alignment on BFGActorComponent_DetectionHelper_IsStunned");
static_assert(sizeof(BFGActorComponent_DetectionHelper_IsStunned) == 0x000001, "Wrong size on BFGActorComponent_DetectionHelper_IsStunned");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsStunned, ReturnValue) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_IsStunned::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_DetectionHelper.IsTargetable
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_DetectionHelper_IsTargetable final
{
public:
	class AActor*                                 _pTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_DetectionHelper_IsTargetable) == 0x000008, "Wrong alignment on BFGActorComponent_DetectionHelper_IsTargetable");
static_assert(sizeof(BFGActorComponent_DetectionHelper_IsTargetable) == 0x000010, "Wrong size on BFGActorComponent_DetectionHelper_IsTargetable");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsTargetable, _pTargetActor) == 0x000000, "Member 'BFGActorComponent_DetectionHelper_IsTargetable::_pTargetActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_DetectionHelper_IsTargetable, ReturnValue) == 0x000008, "Member 'BFGActorComponent_DetectionHelper_IsTargetable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.ActivateEffectAttachToActor
// 0x0058 (0x0058 - 0x0000)
struct BFGActorComponent_Effect_ActivateEffectAttachToActor final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pAttachTo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _oSocketName;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eLocationAttachRule;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eRotationAttachRule;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eScaleAttachRule;                                 // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGPlayerController*                   _pPlayerController;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rRelativeLocation;                                // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rRelativeRotation;                                // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bAbsoluteLocation;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAbsoluteRotation;                                // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGEffectContainer*>            ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_ActivateEffectAttachToActor) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_ActivateEffectAttachToActor");
static_assert(sizeof(BFGActorComponent_Effect_ActivateEffectAttachToActor) == 0x000058, "Wrong size on BFGActorComponent_Effect_ActivateEffectAttachToActor");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _pAttachTo) == 0x000008, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_pAttachTo' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _oSocketName) == 0x000010, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_oSocketName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _eLocationAttachRule) == 0x000018, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_eLocationAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _eRotationAttachRule) == 0x000019, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_eRotationAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _eScaleAttachRule) == 0x00001A, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_eScaleAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _pPlayerController) == 0x000020, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_pPlayerController' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _rRelativeLocation) == 0x000028, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_rRelativeLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _rRelativeRotation) == 0x000034, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_rRelativeRotation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _bAbsoluteLocation) == 0x000040, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_bAbsoluteLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, _bAbsoluteRotation) == 0x000041, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::_bAbsoluteRotation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToActor, ReturnValue) == 0x000048, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.ActivateEffectAttachToComponent
// 0x0058 (0x0058 - 0x0000)
struct BFGActorComponent_Effect_ActivateEffectAttachToComponent final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        _pAttachTo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _oSocketName;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eLocationAttachRule;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eRotationAttachRule;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eScaleAttachRule;                                 // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGPlayerController*                   _pPlayerController;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rRelativeLocation;                                // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rRelativeRotation;                                // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bAbsoluteLocation;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAbsoluteRotation;                                // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGEffectContainer*>            ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_ActivateEffectAttachToComponent) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_ActivateEffectAttachToComponent");
static_assert(sizeof(BFGActorComponent_Effect_ActivateEffectAttachToComponent) == 0x000058, "Wrong size on BFGActorComponent_Effect_ActivateEffectAttachToComponent");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _pAttachTo) == 0x000008, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_pAttachTo' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _oSocketName) == 0x000010, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_oSocketName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _eLocationAttachRule) == 0x000018, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_eLocationAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _eRotationAttachRule) == 0x000019, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_eRotationAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _eScaleAttachRule) == 0x00001A, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_eScaleAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _pPlayerController) == 0x000020, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_pPlayerController' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _rRelativeLocation) == 0x000028, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_rRelativeLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _rRelativeRotation) == 0x000034, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_rRelativeRotation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _bAbsoluteLocation) == 0x000040, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_bAbsoluteLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, _bAbsoluteRotation) == 0x000041, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::_bAbsoluteRotation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectAttachToComponent, ReturnValue) == 0x000048, "Member 'BFGActorComponent_Effect_ActivateEffectAttachToComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.ActivateEffectWithTransform
// 0x0060 (0x0060 - 0x0000)
struct BFGActorComponent_Effect_ActivateEffectWithTransform final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _rTransform;                                       // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABFGPlayerController*                   _pPlayerController;                                // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBFGEffectContainer*>            ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_Effect_ActivateEffectWithTransform) == 0x000010, "Wrong alignment on BFGActorComponent_Effect_ActivateEffectWithTransform");
static_assert(sizeof(BFGActorComponent_Effect_ActivateEffectWithTransform) == 0x000060, "Wrong size on BFGActorComponent_Effect_ActivateEffectWithTransform");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectWithTransform, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_ActivateEffectWithTransform::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectWithTransform, _rTransform) == 0x000010, "Member 'BFGActorComponent_Effect_ActivateEffectWithTransform::_rTransform' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectWithTransform, _pPlayerController) == 0x000040, "Member 'BFGActorComponent_Effect_ActivateEffectWithTransform::_pPlayerController' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateEffectWithTransform, ReturnValue) == 0x000048, "Member 'BFGActorComponent_Effect_ActivateEffectWithTransform::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.ActivateSlotEffectAttachToActor
// 0x0058 (0x0058 - 0x0000)
struct BFGActorComponent_Effect_ActivateSlotEffectAttachToActor final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pAttachTo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _oSocketName;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eLocationAttachRule;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eRotationAttachRule;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eScaleAttachRule;                                 // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGPlayerController*                   _pPlayerController;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rRelativeLocation;                                // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rRelativeRotation;                                // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bAbsoluteLocation;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAbsoluteRotation;                                // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGEffectContainer*>            ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_ActivateSlotEffectAttachToActor");
static_assert(sizeof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor) == 0x000058, "Wrong size on BFGActorComponent_Effect_ActivateSlotEffectAttachToActor");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _iSlot) == 0x000004, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _pAttachTo) == 0x000008, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_pAttachTo' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _oSocketName) == 0x000010, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_oSocketName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _eLocationAttachRule) == 0x000018, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_eLocationAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _eRotationAttachRule) == 0x000019, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_eRotationAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _eScaleAttachRule) == 0x00001A, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_eScaleAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _pPlayerController) == 0x000020, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_pPlayerController' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _rRelativeLocation) == 0x000028, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_rRelativeLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _rRelativeRotation) == 0x000034, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_rRelativeRotation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _bAbsoluteLocation) == 0x000040, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_bAbsoluteLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, _bAbsoluteRotation) == 0x000041, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::_bAbsoluteRotation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToActor, ReturnValue) == 0x000048, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.ActivateSlotEffectAttachToComponent
// 0x0058 (0x0058 - 0x0000)
struct BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        _pAttachTo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _oSocketName;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eLocationAttachRule;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eRotationAttachRule;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               _eScaleAttachRule;                                 // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGPlayerController*                   _pPlayerController;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rRelativeLocation;                                // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rRelativeRotation;                                // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bAbsoluteLocation;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAbsoluteRotation;                                // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGEffectContainer*>            ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent");
static_assert(sizeof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent) == 0x000058, "Wrong size on BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _iSlot) == 0x000004, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _pAttachTo) == 0x000008, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_pAttachTo' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _oSocketName) == 0x000010, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_oSocketName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _eLocationAttachRule) == 0x000018, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_eLocationAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _eRotationAttachRule) == 0x000019, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_eRotationAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _eScaleAttachRule) == 0x00001A, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_eScaleAttachRule' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _pPlayerController) == 0x000020, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_pPlayerController' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _rRelativeLocation) == 0x000028, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_rRelativeLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _rRelativeRotation) == 0x000034, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_rRelativeRotation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _bAbsoluteLocation) == 0x000040, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_bAbsoluteLocation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, _bAbsoluteRotation) == 0x000041, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::_bAbsoluteRotation' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent, ReturnValue) == 0x000048, "Member 'BFGActorComponent_Effect_ActivateSlotEffectAttachToComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.ActivateSlotEffectWithTransform
// 0x0060 (0x0060 - 0x0000)
struct BFGActorComponent_Effect_ActivateSlotEffectWithTransform final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _rTransform;                                       // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABFGPlayerController*                   _pPlayerController;                                // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBFGEffectContainer*>            ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_Effect_ActivateSlotEffectWithTransform) == 0x000010, "Wrong alignment on BFGActorComponent_Effect_ActivateSlotEffectWithTransform");
static_assert(sizeof(BFGActorComponent_Effect_ActivateSlotEffectWithTransform) == 0x000060, "Wrong size on BFGActorComponent_Effect_ActivateSlotEffectWithTransform");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectWithTransform, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_ActivateSlotEffectWithTransform::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectWithTransform, _iSlot) == 0x000004, "Member 'BFGActorComponent_Effect_ActivateSlotEffectWithTransform::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectWithTransform, _rTransform) == 0x000010, "Member 'BFGActorComponent_Effect_ActivateSlotEffectWithTransform::_rTransform' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectWithTransform, _pPlayerController) == 0x000040, "Member 'BFGActorComponent_Effect_ActivateSlotEffectWithTransform::_pPlayerController' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_ActivateSlotEffectWithTransform, ReturnValue) == 0x000048, "Member 'BFGActorComponent_Effect_ActivateSlotEffectWithTransform::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.AddEffectBank
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_Effect_AddEffectBank final
{
public:
	class UBFGEffectBank*                         _pEffectBank;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_AddEffectBank) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_AddEffectBank");
static_assert(sizeof(BFGActorComponent_Effect_AddEffectBank) == 0x000008, "Wrong size on BFGActorComponent_Effect_AddEffectBank");
static_assert(offsetof(BFGActorComponent_Effect_AddEffectBank, _pEffectBank) == 0x000000, "Member 'BFGActorComponent_Effect_AddEffectBank::_pEffectBank' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.ComputeFreeSlot
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_Effect_ComputeFreeSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_ComputeFreeSlot) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_ComputeFreeSlot");
static_assert(sizeof(BFGActorComponent_Effect_ComputeFreeSlot) == 0x000004, "Wrong size on BFGActorComponent_Effect_ComputeFreeSlot");
static_assert(offsetof(BFGActorComponent_Effect_ComputeFreeSlot, ReturnValue) == 0x000000, "Member 'BFGActorComponent_Effect_ComputeFreeSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.DeactivateAllEffects
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_Effect_DeactivateAllEffects final
{
public:
	bool                                          _bIncludeNonPersistent;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_DeactivateAllEffects) == 0x000001, "Wrong alignment on BFGActorComponent_Effect_DeactivateAllEffects");
static_assert(sizeof(BFGActorComponent_Effect_DeactivateAllEffects) == 0x000001, "Wrong size on BFGActorComponent_Effect_DeactivateAllEffects");
static_assert(offsetof(BFGActorComponent_Effect_DeactivateAllEffects, _bIncludeNonPersistent) == 0x000000, "Member 'BFGActorComponent_Effect_DeactivateAllEffects::_bIncludeNonPersistent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.DeactivateEffect
// 0x0002 (0x0002 - 0x0000)
struct BFGActorComponent_Effect_DeactivateEffect final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIncludeNonPersistent;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_DeactivateEffect) == 0x000001, "Wrong alignment on BFGActorComponent_Effect_DeactivateEffect");
static_assert(sizeof(BFGActorComponent_Effect_DeactivateEffect) == 0x000002, "Wrong size on BFGActorComponent_Effect_DeactivateEffect");
static_assert(offsetof(BFGActorComponent_Effect_DeactivateEffect, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_DeactivateEffect::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_DeactivateEffect, _bIncludeNonPersistent) == 0x000001, "Member 'BFGActorComponent_Effect_DeactivateEffect::_bIncludeNonPersistent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.DeactivateSlotEffect
// 0x000C (0x000C - 0x0000)
struct BFGActorComponent_Effect_DeactivateSlotEffect final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIncludeNonPersistent;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_Effect_DeactivateSlotEffect) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_DeactivateSlotEffect");
static_assert(sizeof(BFGActorComponent_Effect_DeactivateSlotEffect) == 0x00000C, "Wrong size on BFGActorComponent_Effect_DeactivateSlotEffect");
static_assert(offsetof(BFGActorComponent_Effect_DeactivateSlotEffect, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_DeactivateSlotEffect::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_DeactivateSlotEffect, _iSlot) == 0x000004, "Member 'BFGActorComponent_Effect_DeactivateSlotEffect::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_DeactivateSlotEffect, _bIncludeNonPersistent) == 0x000008, "Member 'BFGActorComponent_Effect_DeactivateSlotEffect::_bIncludeNonPersistent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.DestroyAllEffects
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_Effect_DestroyAllEffects final
{
public:
	bool                                          _bIncludeNonPersistent;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_DestroyAllEffects) == 0x000001, "Wrong alignment on BFGActorComponent_Effect_DestroyAllEffects");
static_assert(sizeof(BFGActorComponent_Effect_DestroyAllEffects) == 0x000001, "Wrong size on BFGActorComponent_Effect_DestroyAllEffects");
static_assert(offsetof(BFGActorComponent_Effect_DestroyAllEffects, _bIncludeNonPersistent) == 0x000000, "Member 'BFGActorComponent_Effect_DestroyAllEffects::_bIncludeNonPersistent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.DestroyEffect
// 0x0002 (0x0002 - 0x0000)
struct BFGActorComponent_Effect_DestroyEffect final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIncludeNonPersistent;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_DestroyEffect) == 0x000001, "Wrong alignment on BFGActorComponent_Effect_DestroyEffect");
static_assert(sizeof(BFGActorComponent_Effect_DestroyEffect) == 0x000002, "Wrong size on BFGActorComponent_Effect_DestroyEffect");
static_assert(offsetof(BFGActorComponent_Effect_DestroyEffect, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_DestroyEffect::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_DestroyEffect, _bIncludeNonPersistent) == 0x000001, "Member 'BFGActorComponent_Effect_DestroyEffect::_bIncludeNonPersistent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.DestroySlotEffect
// 0x000C (0x000C - 0x0000)
struct BFGActorComponent_Effect_DestroySlotEffect final
{
public:
	EBFGEffect_Identifier                         _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iSlot;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIncludeNonPersistent;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_Effect_DestroySlotEffect) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_DestroySlotEffect");
static_assert(sizeof(BFGActorComponent_Effect_DestroySlotEffect) == 0x00000C, "Wrong size on BFGActorComponent_Effect_DestroySlotEffect");
static_assert(offsetof(BFGActorComponent_Effect_DestroySlotEffect, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_Effect_DestroySlotEffect::_eIdentifier' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_DestroySlotEffect, _iSlot) == 0x000004, "Member 'BFGActorComponent_Effect_DestroySlotEffect::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_DestroySlotEffect, _bIncludeNonPersistent) == 0x000008, "Member 'BFGActorComponent_Effect_DestroySlotEffect::_bIncludeNonPersistent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleActorChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_Effect_HandleActorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _iValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_Effect_HandleActorChanged) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_HandleActorChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleActorChanged) == 0x000018, "Wrong size on BFGActorComponent_Effect_HandleActorChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleActorChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleActorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleActorChanged, _iValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleActorChanged::_iValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleActorChanged, _iSlot) == 0x000010, "Member 'BFGActorComponent_Effect_HandleActorChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleBoolChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_Effect_HandleBoolChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iSlot;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleBoolChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleBoolChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleBoolChanged) == 0x000010, "Wrong size on BFGActorComponent_Effect_HandleBoolChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleBoolChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleBoolChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleBoolChanged, _bValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleBoolChanged::_bValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleBoolChanged, _iSlot) == 0x00000C, "Member 'BFGActorComponent_Effect_HandleBoolChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleColorChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_Effect_HandleColorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 _rValue;                                           // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleColorChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleColorChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleColorChanged) == 0x000010, "Wrong size on BFGActorComponent_Effect_HandleColorChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleColorChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleColorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleColorChanged, _rValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleColorChanged::_rValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleColorChanged, _iSlot) == 0x00000C, "Member 'BFGActorComponent_Effect_HandleColorChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleContainerDeath
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_Effect_HandleContainerDeath final
{
public:
	class UBFGEffectContainer*                    _pContainer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleContainerDeath) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_HandleContainerDeath");
static_assert(sizeof(BFGActorComponent_Effect_HandleContainerDeath) == 0x000008, "Wrong size on BFGActorComponent_Effect_HandleContainerDeath");
static_assert(offsetof(BFGActorComponent_Effect_HandleContainerDeath, _pContainer) == 0x000000, "Member 'BFGActorComponent_Effect_HandleContainerDeath::_pContainer' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleDataTableChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_Effect_HandleDataTableChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _pValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_Effect_HandleDataTableChanged) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_HandleDataTableChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleDataTableChanged) == 0x000018, "Wrong size on BFGActorComponent_Effect_HandleDataTableChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleDataTableChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleDataTableChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleDataTableChanged, _pValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleDataTableChanged::_pValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleDataTableChanged, _iSlot) == 0x000010, "Member 'BFGActorComponent_Effect_HandleDataTableChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleFloatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_Effect_HandleFloatChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleFloatChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleFloatChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleFloatChanged) == 0x000010, "Wrong size on BFGActorComponent_Effect_HandleFloatChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleFloatChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleFloatChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleFloatChanged, _fValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleFloatChanged::_fValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleFloatChanged, _iSlot) == 0x00000C, "Member 'BFGActorComponent_Effect_HandleFloatChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleIntChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_Effect_HandleIntChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleIntChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleIntChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleIntChanged) == 0x000010, "Wrong size on BFGActorComponent_Effect_HandleIntChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleIntChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleIntChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleIntChanged, _iValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleIntChanged::_iValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleIntChanged, _iSlot) == 0x00000C, "Member 'BFGActorComponent_Effect_HandleIntChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleNameChanged
// 0x0014 (0x0014 - 0x0000)
struct BFGActorComponent_Effect_HandleNameChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _iValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleNameChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleNameChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleNameChanged) == 0x000014, "Wrong size on BFGActorComponent_Effect_HandleNameChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleNameChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleNameChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleNameChanged, _iValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleNameChanged::_iValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleNameChanged, _iSlot) == 0x000010, "Member 'BFGActorComponent_Effect_HandleNameChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleObjectChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_Effect_HandleObjectChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _pValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_Effect_HandleObjectChanged) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_HandleObjectChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleObjectChanged) == 0x000018, "Wrong size on BFGActorComponent_Effect_HandleObjectChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleObjectChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleObjectChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleObjectChanged, _pValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleObjectChanged::_pValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleObjectChanged, _iSlot) == 0x000010, "Member 'BFGActorComponent_Effect_HandleObjectChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleRandFloatChanged
// 0x0014 (0x0014 - 0x0000)
struct BFGActorComponent_Effect_HandleRandFloatChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGEffectBlackboardParameter_RandFloat _rValue;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleRandFloatChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleRandFloatChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleRandFloatChanged) == 0x000014, "Wrong size on BFGActorComponent_Effect_HandleRandFloatChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleRandFloatChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleRandFloatChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleRandFloatChanged, _rValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleRandFloatChanged::_rValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleRandFloatChanged, _iSlot) == 0x000010, "Member 'BFGActorComponent_Effect_HandleRandFloatChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleRandVectorChanged
// 0x0024 (0x0024 - 0x0000)
struct BFGActorComponent_Effect_HandleRandVectorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGEffectBlackboardParameter_RandVector _rValue;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleRandVectorChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleRandVectorChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleRandVectorChanged) == 0x000024, "Wrong size on BFGActorComponent_Effect_HandleRandVectorChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleRandVectorChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleRandVectorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleRandVectorChanged, _rValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleRandVectorChanged::_rValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleRandVectorChanged, _iSlot) == 0x000020, "Member 'BFGActorComponent_Effect_HandleRandVectorChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleRotatorChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_Effect_HandleRotatorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleRotatorChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleRotatorChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleRotatorChanged) == 0x000018, "Wrong size on BFGActorComponent_Effect_HandleRotatorChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleRotatorChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleRotatorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleRotatorChanged, _rValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleRotatorChanged::_rValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleRotatorChanged, _iSlot) == 0x000014, "Member 'BFGActorComponent_Effect_HandleRotatorChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.HandleVectorChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_Effect_HandleVectorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_HandleVectorChanged) == 0x000004, "Wrong alignment on BFGActorComponent_Effect_HandleVectorChanged");
static_assert(sizeof(BFGActorComponent_Effect_HandleVectorChanged) == 0x000018, "Wrong size on BFGActorComponent_Effect_HandleVectorChanged");
static_assert(offsetof(BFGActorComponent_Effect_HandleVectorChanged, _rName) == 0x000000, "Member 'BFGActorComponent_Effect_HandleVectorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleVectorChanged, _rValue) == 0x000008, "Member 'BFGActorComponent_Effect_HandleVectorChanged::_rValue' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_Effect_HandleVectorChanged, _iSlot) == 0x000014, "Member 'BFGActorComponent_Effect_HandleVectorChanged::_iSlot' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.RemoveEffectBank
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_Effect_RemoveEffectBank final
{
public:
	class UBFGEffectBank*                         _pEffectBank;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_RemoveEffectBank) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_RemoveEffectBank");
static_assert(sizeof(BFGActorComponent_Effect_RemoveEffectBank) == 0x000008, "Wrong size on BFGActorComponent_Effect_RemoveEffectBank");
static_assert(offsetof(BFGActorComponent_Effect_RemoveEffectBank, _pEffectBank) == 0x000000, "Member 'BFGActorComponent_Effect_RemoveEffectBank::_pEffectBank' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Effect.GetBlackboard
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_Effect_GetBlackboard final
{
public:
	class UBFGEffectBlackboard*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Effect_GetBlackboard) == 0x000008, "Wrong alignment on BFGActorComponent_Effect_GetBlackboard");
static_assert(sizeof(BFGActorComponent_Effect_GetBlackboard) == 0x000008, "Wrong size on BFGActorComponent_Effect_GetBlackboard");
static_assert(offsetof(BFGActorComponent_Effect_GetBlackboard, ReturnValue) == 0x000000, "Member 'BFGActorComponent_Effect_GetBlackboard::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Boolean_SetFalse.GetActionName_BooleanSetFalse
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Boolean_SetFalse_GetActionName_BooleanSetFalse final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Boolean_SetFalse_GetActionName_BooleanSetFalse) == 0x000004, "Wrong alignment on BFGVariableAction_Boolean_SetFalse_GetActionName_BooleanSetFalse");
static_assert(sizeof(BFGVariableAction_Boolean_SetFalse_GetActionName_BooleanSetFalse) == 0x000008, "Wrong size on BFGVariableAction_Boolean_SetFalse_GetActionName_BooleanSetFalse");
static_assert(offsetof(BFGVariableAction_Boolean_SetFalse_GetActionName_BooleanSetFalse, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Boolean_SetFalse_GetActionName_BooleanSetFalse::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.HandleSecondaryAxisChange
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_HandleSecondaryAxisChange final
{
public:
	bool                                          _bToRight;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_HandleSecondaryAxisChange) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_HandleSecondaryAxisChange");
static_assert(sizeof(BFGWidget_DialogOption_HandleSecondaryAxisChange) == 0x000001, "Wrong size on BFGWidget_DialogOption_HandleSecondaryAxisChange");
static_assert(offsetof(BFGWidget_DialogOption_HandleSecondaryAxisChange, _bToRight) == 0x000000, "Member 'BFGWidget_DialogOption_HandleSecondaryAxisChange::_bToRight' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.OnHasNotification
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_OnHasNotification final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_OnHasNotification) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_OnHasNotification");
static_assert(sizeof(BFGWidget_DialogOption_OnHasNotification) == 0x000001, "Wrong size on BFGWidget_DialogOption_OnHasNotification");
static_assert(offsetof(BFGWidget_DialogOption_OnHasNotification, _bShow) == 0x000000, "Member 'BFGWidget_DialogOption_OnHasNotification::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.OnOptionStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_OnOptionStateChanged final
{
public:
	EBFGDialogOptionSelectionState                _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_OnOptionStateChanged) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_OnOptionStateChanged");
static_assert(sizeof(BFGWidget_DialogOption_OnOptionStateChanged) == 0x000001, "Wrong size on BFGWidget_DialogOption_OnOptionStateChanged");
static_assert(offsetof(BFGWidget_DialogOption_OnOptionStateChanged, _eState) == 0x000000, "Member 'BFGWidget_DialogOption_OnOptionStateChanged::_eState' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.SetNotificationFlag
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_SetNotificationFlag final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_SetNotificationFlag) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_SetNotificationFlag");
static_assert(sizeof(BFGWidget_DialogOption_SetNotificationFlag) == 0x000001, "Wrong size on BFGWidget_DialogOption_SetNotificationFlag");
static_assert(offsetof(BFGWidget_DialogOption_SetNotificationFlag, _bValue) == 0x000000, "Member 'BFGWidget_DialogOption_SetNotificationFlag::_bValue' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.SetTargetHandlerName
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_DialogOption_SetTargetHandlerName final
{
public:
	class FName                                   _targetHandlerName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_SetTargetHandlerName) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_SetTargetHandlerName");
static_assert(sizeof(BFGWidget_DialogOption_SetTargetHandlerName) == 0x000008, "Wrong size on BFGWidget_DialogOption_SetTargetHandlerName");
static_assert(offsetof(BFGWidget_DialogOption_SetTargetHandlerName, _targetHandlerName) == 0x000000, "Member 'BFGWidget_DialogOption_SetTargetHandlerName::_targetHandlerName' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.UpdateTimescaledSecondaryAxisValue
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_DialogOption_UpdateTimescaledSecondaryAxisValue final
{
public:
	float                                         _fAxis;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_UpdateTimescaledSecondaryAxisValue) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_UpdateTimescaledSecondaryAxisValue");
static_assert(sizeof(BFGWidget_DialogOption_UpdateTimescaledSecondaryAxisValue) == 0x000004, "Wrong size on BFGWidget_DialogOption_UpdateTimescaledSecondaryAxisValue");
static_assert(offsetof(BFGWidget_DialogOption_UpdateTimescaledSecondaryAxisValue, _fAxis) == 0x000000, "Member 'BFGWidget_DialogOption_UpdateTimescaledSecondaryAxisValue::_fAxis' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.UpdateValueBool
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_UpdateValueBool final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_UpdateValueBool) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_UpdateValueBool");
static_assert(sizeof(BFGWidget_DialogOption_UpdateValueBool) == 0x000001, "Wrong size on BFGWidget_DialogOption_UpdateValueBool");
static_assert(offsetof(BFGWidget_DialogOption_UpdateValueBool, _bValue) == 0x000000, "Member 'BFGWidget_DialogOption_UpdateValueBool::_bValue' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.HasNotificationFlag
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_HasNotificationFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_HasNotificationFlag) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_HasNotificationFlag");
static_assert(sizeof(BFGWidget_DialogOption_HasNotificationFlag) == 0x000001, "Wrong size on BFGWidget_DialogOption_HasNotificationFlag");
static_assert(offsetof(BFGWidget_DialogOption_HasNotificationFlag, ReturnValue) == 0x000000, "Member 'BFGWidget_DialogOption_HasNotificationFlag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption.SupportsAccept
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_SupportsAccept final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_SupportsAccept) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_SupportsAccept");
static_assert(sizeof(BFGWidget_DialogOption_SupportsAccept) == 0x000001, "Wrong size on BFGWidget_DialogOption_SupportsAccept");
static_assert(offsetof(BFGWidget_DialogOption_SupportsAccept, ReturnValue) == 0x000000, "Member 'BFGWidget_DialogOption_SupportsAccept::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Customizable.SetDialogOptionText
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_DialogOption_Customizable_SetDialogOptionText final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          _isDirty;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_DialogOption_Customizable_SetDialogOptionText) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_Customizable_SetDialogOptionText");
static_assert(sizeof(BFGWidget_DialogOption_Customizable_SetDialogOptionText) == 0x000020, "Wrong size on BFGWidget_DialogOption_Customizable_SetDialogOptionText");
static_assert(offsetof(BFGWidget_DialogOption_Customizable_SetDialogOptionText, _strText) == 0x000000, "Member 'BFGWidget_DialogOption_Customizable_SetDialogOptionText::_strText' has a wrong offset!");
static_assert(offsetof(BFGWidget_DialogOption_Customizable_SetDialogOptionText, _isDirty) == 0x000018, "Member 'BFGWidget_DialogOption_Customizable_SetDialogOptionText::_isDirty' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Customizable.GetDialogOptionText
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_DialogOption_Customizable_GetDialogOptionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Customizable_GetDialogOptionText) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_Customizable_GetDialogOptionText");
static_assert(sizeof(BFGWidget_DialogOption_Customizable_GetDialogOptionText) == 0x000018, "Wrong size on BFGWidget_DialogOption_Customizable_GetDialogOptionText");
static_assert(offsetof(BFGWidget_DialogOption_Customizable_GetDialogOptionText, ReturnValue) == 0x000000, "Member 'BFGWidget_DialogOption_Customizable_GetDialogOptionText::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Customizable.IsDialogOptionTextCustomized
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_Customizable_IsDialogOptionTextCustomized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Customizable_IsDialogOptionTextCustomized) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_Customizable_IsDialogOptionTextCustomized");
static_assert(sizeof(BFGWidget_DialogOption_Customizable_IsDialogOptionTextCustomized) == 0x000001, "Wrong size on BFGWidget_DialogOption_Customizable_IsDialogOptionTextCustomized");
static_assert(offsetof(BFGWidget_DialogOption_Customizable_IsDialogOptionTextCustomized, ReturnValue) == 0x000000, "Member 'BFGWidget_DialogOption_Customizable_IsDialogOptionTextCustomized::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_HoloPoxEntry.OnSetupData
// 0x0130 (0x0130 - 0x0000)
struct BFGWidget_DialogOption_HoloPoxEntry_OnSetupData final
{
public:
	struct FBFGHolobobDeckSelectionInfo           _oOptionData;                                      // 0x0000(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_HoloPoxEntry_OnSetupData) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_HoloPoxEntry_OnSetupData");
static_assert(sizeof(BFGWidget_DialogOption_HoloPoxEntry_OnSetupData) == 0x000130, "Wrong size on BFGWidget_DialogOption_HoloPoxEntry_OnSetupData");
static_assert(offsetof(BFGWidget_DialogOption_HoloPoxEntry_OnSetupData, _oOptionData) == 0x000000, "Member 'BFGWidget_DialogOption_HoloPoxEntry_OnSetupData::_oOptionData' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.GetCurrentWeaponAmmo
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo final
{
public:
	TSubclassOf<class ABFGWeapon>                 _rWeaponClass;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo");
static_assert(sizeof(BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo) == 0x000010, "Wrong size on BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo, _rWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo::_rWeaponClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo, ReturnValue) == 0x000008, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeaponAmmo::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.GetCurrentWeaponMaxAmmo
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo final
{
public:
	TSubclassOf<class ABFGWeapon>                 _rWeaponClass;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo");
static_assert(sizeof(BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo) == 0x000010, "Wrong size on BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo, _rWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo::_rWeaponClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo, ReturnValue) == 0x000008, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeaponMaxAmmo::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.GetCurrentWeaponOverheated
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated final
{
public:
	TSubclassOf<class ABFGWeapon>                 _rWeaponClass;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated");
static_assert(sizeof(BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated) == 0x000010, "Wrong size on BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated, _rWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated::_rWeaponClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated, ReturnValue) == 0x000008, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeaponOverheated::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.OnWeaponAmmoChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_EquipmentManager_OnWeaponAmmoChanged final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_OnWeaponAmmoChanged) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_OnWeaponAmmoChanged");
static_assert(sizeof(BFGActorComponent_EquipmentManager_OnWeaponAmmoChanged) == 0x000008, "Wrong size on BFGActorComponent_EquipmentManager_OnWeaponAmmoChanged");
static_assert(offsetof(BFGActorComponent_EquipmentManager_OnWeaponAmmoChanged, _pWeapon) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_OnWeaponAmmoChanged::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.OnWeaponNotReady
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_EquipmentManager_OnWeaponNotReady final
{
public:
	class UClass*                                 _pWeaponClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_OnWeaponNotReady) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_OnWeaponNotReady");
static_assert(sizeof(BFGActorComponent_EquipmentManager_OnWeaponNotReady) == 0x000008, "Wrong size on BFGActorComponent_EquipmentManager_OnWeaponNotReady");
static_assert(offsetof(BFGActorComponent_EquipmentManager_OnWeaponNotReady, _pWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_OnWeaponNotReady::_pWeaponClass' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.OnWeaponNotVisibile
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_EquipmentManager_OnWeaponNotVisibile final
{
public:
	class UClass*                                 _pWeaponClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_OnWeaponNotVisibile) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_OnWeaponNotVisibile");
static_assert(sizeof(BFGActorComponent_EquipmentManager_OnWeaponNotVisibile) == 0x000008, "Wrong size on BFGActorComponent_EquipmentManager_OnWeaponNotVisibile");
static_assert(offsetof(BFGActorComponent_EquipmentManager_OnWeaponNotVisibile, _pWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_OnWeaponNotVisibile::_pWeaponClass' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.OnWeaponReady
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_EquipmentManager_OnWeaponReady final
{
public:
	class UClass*                                 _pWeaponClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_OnWeaponReady) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_OnWeaponReady");
static_assert(sizeof(BFGActorComponent_EquipmentManager_OnWeaponReady) == 0x000008, "Wrong size on BFGActorComponent_EquipmentManager_OnWeaponReady");
static_assert(offsetof(BFGActorComponent_EquipmentManager_OnWeaponReady, _pWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_OnWeaponReady::_pWeaponClass' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.OnWeaponVisibile
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_EquipmentManager_OnWeaponVisibile final
{
public:
	class UClass*                                 _pWeaponClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_OnWeaponVisibile) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_OnWeaponVisibile");
static_assert(sizeof(BFGActorComponent_EquipmentManager_OnWeaponVisibile) == 0x000008, "Wrong size on BFGActorComponent_EquipmentManager_OnWeaponVisibile");
static_assert(offsetof(BFGActorComponent_EquipmentManager_OnWeaponVisibile, _pWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_OnWeaponVisibile::_pWeaponClass' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.RequestFirstWeaponEquipped
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped final
{
public:
	int32                                         _iStartIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bSwapDirection;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped) == 0x000004, "Wrong alignment on BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped");
static_assert(sizeof(BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped) == 0x000008, "Wrong size on BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped");
static_assert(offsetof(BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped, _iStartIndex) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped::_iStartIndex' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped, _bSwapDirection) == 0x000004, "Member 'BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped::_bSwapDirection' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped, ReturnValue) == 0x000005, "Member 'BFGActorComponent_EquipmentManager_RequestFirstWeaponEquipped::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.RequestWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_EquipmentManager_RequestWeaponEquipped final
{
public:
	class ABFGWeapon*                             _pWeaponClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_EquipmentManager_RequestWeaponEquipped) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_RequestWeaponEquipped");
static_assert(sizeof(BFGActorComponent_EquipmentManager_RequestWeaponEquipped) == 0x000010, "Wrong size on BFGActorComponent_EquipmentManager_RequestWeaponEquipped");
static_assert(offsetof(BFGActorComponent_EquipmentManager_RequestWeaponEquipped, _pWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_RequestWeaponEquipped::_pWeaponClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_RequestWeaponEquipped, ReturnValue) == 0x000008, "Member 'BFGActorComponent_EquipmentManager_RequestWeaponEquipped::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.RequestWeaponEquippedByClass
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass final
{
public:
	TSubclassOf<class ABFGWeapon>                 _rWeaponClass;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass");
static_assert(sizeof(BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass) == 0x000010, "Wrong size on BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass");
static_assert(offsetof(BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass, _rWeaponClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass::_rWeaponClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass, ReturnValue) == 0x000008, "Member 'BFGActorComponent_EquipmentManager_RequestWeaponEquippedByClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.SetWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_EquipmentManager_SetWidgetVisibility final
{
public:
	ESlateVisibility                              _eVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_SetWidgetVisibility) == 0x000001, "Wrong alignment on BFGActorComponent_EquipmentManager_SetWidgetVisibility");
static_assert(sizeof(BFGActorComponent_EquipmentManager_SetWidgetVisibility) == 0x000001, "Wrong size on BFGActorComponent_EquipmentManager_SetWidgetVisibility");
static_assert(offsetof(BFGActorComponent_EquipmentManager_SetWidgetVisibility, _eVisibility) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_SetWidgetVisibility::_eVisibility' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.GetCurrentWeapon
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_EquipmentManager_GetCurrentWeapon final
{
public:
	class UClass*                                 _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGWeapon*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_GetCurrentWeapon) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_GetCurrentWeapon");
static_assert(sizeof(BFGActorComponent_EquipmentManager_GetCurrentWeapon) == 0x000010, "Wrong size on BFGActorComponent_EquipmentManager_GetCurrentWeapon");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeapon, _pClass) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeapon::_pClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeapon, ReturnValue) == 0x000008, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.GetCurrentWeapons
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_EquipmentManager_GetCurrentWeapons final
{
public:
	TArray<class ABFGWeapon*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_GetCurrentWeapons) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_GetCurrentWeapons");
static_assert(sizeof(BFGActorComponent_EquipmentManager_GetCurrentWeapons) == 0x000010, "Wrong size on BFGActorComponent_EquipmentManager_GetCurrentWeapons");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetCurrentWeapons, ReturnValue) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_GetCurrentWeapons::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_EquipmentManager.GetWeapon
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_EquipmentManager_GetWeapon final
{
public:
	int32                                         _iWeaponID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGWeapon*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_EquipmentManager_GetWeapon) == 0x000008, "Wrong alignment on BFGActorComponent_EquipmentManager_GetWeapon");
static_assert(sizeof(BFGActorComponent_EquipmentManager_GetWeapon) == 0x000010, "Wrong size on BFGActorComponent_EquipmentManager_GetWeapon");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetWeapon, _iWeaponID) == 0x000000, "Member 'BFGActorComponent_EquipmentManager_GetWeapon::_iWeaponID' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_EquipmentManager_GetWeapon, ReturnValue) == 0x000008, "Member 'BFGActorComponent_EquipmentManager_GetWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_MissionGroup_MakeAvailable.GetActionName_MissionGroupMakeAvailble
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_MissionGroup_MakeAvailable_GetActionName_MissionGroupMakeAvailble final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_MissionGroup_MakeAvailable_GetActionName_MissionGroupMakeAvailble) == 0x000004, "Wrong alignment on BFGVariableAction_MissionGroup_MakeAvailable_GetActionName_MissionGroupMakeAvailble");
static_assert(sizeof(BFGVariableAction_MissionGroup_MakeAvailable_GetActionName_MissionGroupMakeAvailble) == 0x000008, "Wrong size on BFGVariableAction_MissionGroup_MakeAvailable_GetActionName_MissionGroupMakeAvailble");
static_assert(offsetof(BFGVariableAction_MissionGroup_MakeAvailable_GetActionName_MissionGroupMakeAvailble, ReturnValue) == 0x000000, "Member 'BFGVariableAction_MissionGroup_MakeAvailable_GetActionName_MissionGroupMakeAvailble::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_ExplosiveItem.ActorComponent_ExplosiveItemExplosion__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_ExplosiveItem_ActorComponent_ExplosiveItemExplosion__DelegateSignature final
{
public:
	TArray<class AActor*>                         _aHitActorList;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ExplosiveItem_ActorComponent_ExplosiveItemExplosion__DelegateSignature) == 0x000008, "Wrong alignment on BFGActorComponent_ExplosiveItem_ActorComponent_ExplosiveItemExplosion__DelegateSignature");
static_assert(sizeof(BFGActorComponent_ExplosiveItem_ActorComponent_ExplosiveItemExplosion__DelegateSignature) == 0x000010, "Wrong size on BFGActorComponent_ExplosiveItem_ActorComponent_ExplosiveItemExplosion__DelegateSignature");
static_assert(offsetof(BFGActorComponent_ExplosiveItem_ActorComponent_ExplosiveItemExplosion__DelegateSignature, _aHitActorList) == 0x000000, "Member 'BFGActorComponent_ExplosiveItem_ActorComponent_ExplosiveItemExplosion__DelegateSignature::_aHitActorList' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ExplosiveItem.OnEventExplosion
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_ExplosiveItem_OnEventExplosion final
{
public:
	bool                                          _bWithDelay;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ExplosiveItem_OnEventExplosion) == 0x000001, "Wrong alignment on BFGActorComponent_ExplosiveItem_OnEventExplosion");
static_assert(sizeof(BFGActorComponent_ExplosiveItem_OnEventExplosion) == 0x000001, "Wrong size on BFGActorComponent_ExplosiveItem_OnEventExplosion");
static_assert(offsetof(BFGActorComponent_ExplosiveItem_OnEventExplosion, _bWithDelay) == 0x000000, "Member 'BFGActorComponent_ExplosiveItem_OnEventExplosion::_bWithDelay' has a wrong offset!");

// Function BFGCore.BFGActorComponent_FallDamage.Actor_OnHit
// 0x00A8 (0x00A8 - 0x0000)
struct BFGActorComponent_FallDamage_Actor_OnHit final
{
public:
	class AActor*                                 _pSelfActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vNormalImpulse;                                   // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _hit;                                              // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_FallDamage_Actor_OnHit) == 0x000008, "Wrong alignment on BFGActorComponent_FallDamage_Actor_OnHit");
static_assert(sizeof(BFGActorComponent_FallDamage_Actor_OnHit) == 0x0000A8, "Wrong size on BFGActorComponent_FallDamage_Actor_OnHit");
static_assert(offsetof(BFGActorComponent_FallDamage_Actor_OnHit, _pSelfActor) == 0x000000, "Member 'BFGActorComponent_FallDamage_Actor_OnHit::_pSelfActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_FallDamage_Actor_OnHit, _pOtherActor) == 0x000008, "Member 'BFGActorComponent_FallDamage_Actor_OnHit::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_FallDamage_Actor_OnHit, _vNormalImpulse) == 0x000010, "Member 'BFGActorComponent_FallDamage_Actor_OnHit::_vNormalImpulse' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_FallDamage_Actor_OnHit, _hit) == 0x00001C, "Member 'BFGActorComponent_FallDamage_Actor_OnHit::_hit' has a wrong offset!");

// Function BFGCore.BFGActorComponent_FallDamage.GetIsFalling
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_FallDamage_GetIsFalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_FallDamage_GetIsFalling) == 0x000001, "Wrong alignment on BFGActorComponent_FallDamage_GetIsFalling");
static_assert(sizeof(BFGActorComponent_FallDamage_GetIsFalling) == 0x000001, "Wrong size on BFGActorComponent_FallDamage_GetIsFalling");
static_assert(offsetof(BFGActorComponent_FallDamage_GetIsFalling, ReturnValue) == 0x000000, "Member 'BFGActorComponent_FallDamage_GetIsFalling::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_GameplayEffectResponses.HasActiveResponseOfType
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType final
{
public:
	TSubclassOf<class UBFGGameplayEffectResponse> _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType) == 0x000008, "Wrong alignment on BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType");
static_assert(sizeof(BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType) == 0x000010, "Wrong size on BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType");
static_assert(offsetof(BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType, _pClass) == 0x000000, "Member 'BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType::_pClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType, ReturnValue) == 0x000008, "Member 'BFGActorComponent_GameplayEffectResponses_HasActiveResponseOfType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_HumanoidStats.GetHasBrainStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_HumanoidStats_GetHasBrainStat final
{
public:
	class UBFGActorStat_Bool*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_HumanoidStats_GetHasBrainStat) == 0x000008, "Wrong alignment on BFGActorComponent_HumanoidStats_GetHasBrainStat");
static_assert(sizeof(BFGActorComponent_HumanoidStats_GetHasBrainStat) == 0x000008, "Wrong size on BFGActorComponent_HumanoidStats_GetHasBrainStat");
static_assert(offsetof(BFGActorComponent_HumanoidStats_GetHasBrainStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_HumanoidStats_GetHasBrainStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.EnableInput
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_InputActions_EnableInput final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_EnableInput) == 0x000001, "Wrong alignment on BFGActorComponent_InputActions_EnableInput");
static_assert(sizeof(BFGActorComponent_InputActions_EnableInput) == 0x000001, "Wrong size on BFGActorComponent_InputActions_EnableInput");
static_assert(offsetof(BFGActorComponent_InputActions_EnableInput, _bEnable) == 0x000000, "Member 'BFGActorComponent_InputActions_EnableInput::_bEnable' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.IsLastInputGamepad
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_InputActions_IsLastInputGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_IsLastInputGamepad) == 0x000001, "Wrong alignment on BFGActorComponent_InputActions_IsLastInputGamepad");
static_assert(sizeof(BFGActorComponent_InputActions_IsLastInputGamepad) == 0x000001, "Wrong size on BFGActorComponent_InputActions_IsLastInputGamepad");
static_assert(offsetof(BFGActorComponent_InputActions_IsLastInputGamepad, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InputActions_IsLastInputGamepad::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.RefreshCacheFromCallback
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_InputActions_RefreshCacheFromCallback final
{
public:
	int32                                         _iDunnoWhat;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_RefreshCacheFromCallback) == 0x000004, "Wrong alignment on BFGActorComponent_InputActions_RefreshCacheFromCallback");
static_assert(sizeof(BFGActorComponent_InputActions_RefreshCacheFromCallback) == 0x000004, "Wrong size on BFGActorComponent_InputActions_RefreshCacheFromCallback");
static_assert(offsetof(BFGActorComponent_InputActions_RefreshCacheFromCallback, _iDunnoWhat) == 0x000000, "Member 'BFGActorComponent_InputActions_RefreshCacheFromCallback::_iDunnoWhat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.SetCurrentInputSchemeIdentifier
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_InputActions_SetCurrentInputSchemeIdentifier final
{
public:
	EInputSchemeIdentifier                        _eIdentifier;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_SetCurrentInputSchemeIdentifier) == 0x000001, "Wrong alignment on BFGActorComponent_InputActions_SetCurrentInputSchemeIdentifier");
static_assert(sizeof(BFGActorComponent_InputActions_SetCurrentInputSchemeIdentifier) == 0x000001, "Wrong size on BFGActorComponent_InputActions_SetCurrentInputSchemeIdentifier");
static_assert(offsetof(BFGActorComponent_InputActions_SetCurrentInputSchemeIdentifier, _eIdentifier) == 0x000000, "Member 'BFGActorComponent_InputActions_SetCurrentInputSchemeIdentifier::_eIdentifier' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.FindInputActionsMatchingPattern
// 0x0028 (0x0028 - 0x0000)
struct BFGActorComponent_InputActions_FindInputActionsMatchingPattern final
{
public:
	struct FBFGInputPattern                       _rPattern;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bOnlyKeyAndState;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGInputAction*>                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_FindInputActionsMatchingPattern) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_FindInputActionsMatchingPattern");
static_assert(sizeof(BFGActorComponent_InputActions_FindInputActionsMatchingPattern) == 0x000028, "Wrong size on BFGActorComponent_InputActions_FindInputActionsMatchingPattern");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPattern, _rPattern) == 0x000000, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPattern::_rPattern' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPattern, _bOnlyKeyAndState) == 0x000010, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPattern::_bOnlyKeyAndState' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPattern, ReturnValue) == 0x000018, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPattern::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.FindInputActionsMatchingPatternByKey
// 0x0028 (0x0028 - 0x0000)
struct BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey final
{
public:
	struct FBFGInputPattern                       _rPattern;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bOnlyKey;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGInputAction*>                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey");
static_assert(sizeof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey) == 0x000028, "Wrong size on BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey, _rPattern) == 0x000000, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey::_rPattern' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey, _bOnlyKey) == 0x000010, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey::_bOnlyKey' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey, ReturnValue) == 0x000018, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPatternByKey::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.FindInputActionsMatchingPatternElement
// 0x0060 (0x0060 - 0x0000)
struct BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement final
{
public:
	struct FBFGInputPatternElement                _rPatternElement;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bOnlyKeyAndState;                                 // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGInputAction*>                ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement");
static_assert(sizeof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement) == 0x000060, "Wrong size on BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement, _rPatternElement) == 0x000000, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement::_rPatternElement' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement, _bOnlyKeyAndState) == 0x000048, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement::_bOnlyKeyAndState' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement, ReturnValue) == 0x000050, "Member 'BFGActorComponent_InputActions_FindInputActionsMatchingPatternElement::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.GetCurrentInputScheme
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InputActions_GetCurrentInputScheme final
{
public:
	class UBFGInputScheme*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_GetCurrentInputScheme) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_GetCurrentInputScheme");
static_assert(sizeof(BFGActorComponent_InputActions_GetCurrentInputScheme) == 0x000008, "Wrong size on BFGActorComponent_InputActions_GetCurrentInputScheme");
static_assert(offsetof(BFGActorComponent_InputActions_GetCurrentInputScheme, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InputActions_GetCurrentInputScheme::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.TryGetCharacterOwner
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InputActions_TryGetCharacterOwner final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_TryGetCharacterOwner) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_TryGetCharacterOwner");
static_assert(sizeof(BFGActorComponent_InputActions_TryGetCharacterOwner) == 0x000008, "Wrong size on BFGActorComponent_InputActions_TryGetCharacterOwner");
static_assert(offsetof(BFGActorComponent_InputActions_TryGetCharacterOwner, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InputActions_TryGetCharacterOwner::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.TryGetGameState
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InputActions_TryGetGameState final
{
public:
	class ABFGGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_TryGetGameState) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_TryGetGameState");
static_assert(sizeof(BFGActorComponent_InputActions_TryGetGameState) == 0x000008, "Wrong size on BFGActorComponent_InputActions_TryGetGameState");
static_assert(offsetof(BFGActorComponent_InputActions_TryGetGameState, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InputActions_TryGetGameState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.TryGetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InputActions_TryGetPawnOwner final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_TryGetPawnOwner) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_TryGetPawnOwner");
static_assert(sizeof(BFGActorComponent_InputActions_TryGetPawnOwner) == 0x000008, "Wrong size on BFGActorComponent_InputActions_TryGetPawnOwner");
static_assert(offsetof(BFGActorComponent_InputActions_TryGetPawnOwner, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InputActions_TryGetPawnOwner::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.TryGetPlayerControllerOwner
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InputActions_TryGetPlayerControllerOwner final
{
public:
	class ABFGPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_TryGetPlayerControllerOwner) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_TryGetPlayerControllerOwner");
static_assert(sizeof(BFGActorComponent_InputActions_TryGetPlayerControllerOwner) == 0x000008, "Wrong size on BFGActorComponent_InputActions_TryGetPlayerControllerOwner");
static_assert(offsetof(BFGActorComponent_InputActions_TryGetPlayerControllerOwner, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InputActions_TryGetPlayerControllerOwner::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.TryGetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InputActions_TryGetPlayerOwner final
{
public:
	class ABFGPlayerCharacter*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_TryGetPlayerOwner) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_TryGetPlayerOwner");
static_assert(sizeof(BFGActorComponent_InputActions_TryGetPlayerOwner) == 0x000008, "Wrong size on BFGActorComponent_InputActions_TryGetPlayerOwner");
static_assert(offsetof(BFGActorComponent_InputActions_TryGetPlayerOwner, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InputActions_TryGetPlayerOwner::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InputActions.TryGetUFOOwner
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InputActions_TryGetUFOOwner final
{
public:
	class ABFGPlayerUFO*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InputActions_TryGetUFOOwner) == 0x000008, "Wrong alignment on BFGActorComponent_InputActions_TryGetUFOOwner");
static_assert(sizeof(BFGActorComponent_InputActions_TryGetUFOOwner) == 0x000008, "Wrong size on BFGActorComponent_InputActions_TryGetUFOOwner");
static_assert(offsetof(BFGActorComponent_InputActions_TryGetUFOOwner, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InputActions_TryGetUFOOwner::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InteractableCharacterStats.GetCanBeInteractedWith
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InteractableCharacterStats_GetCanBeInteractedWith final
{
public:
	class UBFGActorStat_Bool*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InteractableCharacterStats_GetCanBeInteractedWith) == 0x000008, "Wrong alignment on BFGActorComponent_InteractableCharacterStats_GetCanBeInteractedWith");
static_assert(sizeof(BFGActorComponent_InteractableCharacterStats_GetCanBeInteractedWith) == 0x000008, "Wrong size on BFGActorComponent_InteractableCharacterStats_GetCanBeInteractedWith");
static_assert(offsetof(BFGActorComponent_InteractableCharacterStats_GetCanBeInteractedWith, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InteractableCharacterStats_GetCanBeInteractedWith::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_InteractableCharacterStats.GetIsInteractedWithStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_InteractableCharacterStats_GetIsInteractedWithStat final
{
public:
	class UBFGActorStat_Bool*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_InteractableCharacterStats_GetIsInteractedWithStat) == 0x000008, "Wrong alignment on BFGActorComponent_InteractableCharacterStats_GetIsInteractedWithStat");
static_assert(sizeof(BFGActorComponent_InteractableCharacterStats_GetIsInteractedWithStat) == 0x000008, "Wrong size on BFGActorComponent_InteractableCharacterStats_GetIsInteractedWithStat");
static_assert(offsetof(BFGActorComponent_InteractableCharacterStats_GetIsInteractedWithStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_InteractableCharacterStats_GetIsInteractedWithStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.AddFuel
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_JetpackPilot_AddFuel final
{
public:
	float                                         _fAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_AddFuel) == 0x000004, "Wrong alignment on BFGActorComponent_JetpackPilot_AddFuel");
static_assert(sizeof(BFGActorComponent_JetpackPilot_AddFuel) == 0x000004, "Wrong size on BFGActorComponent_JetpackPilot_AddFuel");
static_assert(offsetof(BFGActorComponent_JetpackPilot_AddFuel, _fAmount) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_AddFuel::_fAmount' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_JetpackPilot.BFGActorComponent_Jetpack_Event__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_JetpackPilot_BFGActorComponent_Jetpack_Event__DelegateSignature final
{
public:
	class UBFGActorComponent_JetpackPilot*        _pJetpackComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_BFGActorComponent_Jetpack_Event__DelegateSignature) == 0x000008, "Wrong alignment on BFGActorComponent_JetpackPilot_BFGActorComponent_Jetpack_Event__DelegateSignature");
static_assert(sizeof(BFGActorComponent_JetpackPilot_BFGActorComponent_Jetpack_Event__DelegateSignature) == 0x000008, "Wrong size on BFGActorComponent_JetpackPilot_BFGActorComponent_Jetpack_Event__DelegateSignature");
static_assert(offsetof(BFGActorComponent_JetpackPilot_BFGActorComponent_Jetpack_Event__DelegateSignature, _pJetpackComponent) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_BFGActorComponent_Jetpack_Event__DelegateSignature::_pJetpackComponent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.ConsumeFuel
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_JetpackPilot_ConsumeFuel final
{
public:
	float                                         _fAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_ConsumeFuel) == 0x000004, "Wrong alignment on BFGActorComponent_JetpackPilot_ConsumeFuel");
static_assert(sizeof(BFGActorComponent_JetpackPilot_ConsumeFuel) == 0x000004, "Wrong size on BFGActorComponent_JetpackPilot_ConsumeFuel");
static_assert(offsetof(BFGActorComponent_JetpackPilot_ConsumeFuel, _fAmount) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_ConsumeFuel::_fAmount' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.GetCurrentFuel
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_JetpackPilot_GetCurrentFuel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_GetCurrentFuel) == 0x000004, "Wrong alignment on BFGActorComponent_JetpackPilot_GetCurrentFuel");
static_assert(sizeof(BFGActorComponent_JetpackPilot_GetCurrentFuel) == 0x000004, "Wrong size on BFGActorComponent_JetpackPilot_GetCurrentFuel");
static_assert(offsetof(BFGActorComponent_JetpackPilot_GetCurrentFuel, ReturnValue) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_GetCurrentFuel::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.GetCurrentFuelRatio
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_JetpackPilot_GetCurrentFuelRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_GetCurrentFuelRatio) == 0x000004, "Wrong alignment on BFGActorComponent_JetpackPilot_GetCurrentFuelRatio");
static_assert(sizeof(BFGActorComponent_JetpackPilot_GetCurrentFuelRatio) == 0x000004, "Wrong size on BFGActorComponent_JetpackPilot_GetCurrentFuelRatio");
static_assert(offsetof(BFGActorComponent_JetpackPilot_GetCurrentFuelRatio, ReturnValue) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_GetCurrentFuelRatio::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.GetHoverActive
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_JetpackPilot_GetHoverActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_GetHoverActive) == 0x000001, "Wrong alignment on BFGActorComponent_JetpackPilot_GetHoverActive");
static_assert(sizeof(BFGActorComponent_JetpackPilot_GetHoverActive) == 0x000001, "Wrong size on BFGActorComponent_JetpackPilot_GetHoverActive");
static_assert(offsetof(BFGActorComponent_JetpackPilot_GetHoverActive, ReturnValue) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_GetHoverActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.GetJetpackDeployed
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_JetpackPilot_GetJetpackDeployed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_GetJetpackDeployed) == 0x000001, "Wrong alignment on BFGActorComponent_JetpackPilot_GetJetpackDeployed");
static_assert(sizeof(BFGActorComponent_JetpackPilot_GetJetpackDeployed) == 0x000001, "Wrong size on BFGActorComponent_JetpackPilot_GetJetpackDeployed");
static_assert(offsetof(BFGActorComponent_JetpackPilot_GetJetpackDeployed, ReturnValue) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_GetJetpackDeployed::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.GetSkateActive
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_JetpackPilot_GetSkateActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_GetSkateActive) == 0x000001, "Wrong alignment on BFGActorComponent_JetpackPilot_GetSkateActive");
static_assert(sizeof(BFGActorComponent_JetpackPilot_GetSkateActive) == 0x000001, "Wrong size on BFGActorComponent_JetpackPilot_GetSkateActive");
static_assert(offsetof(BFGActorComponent_JetpackPilot_GetSkateActive, ReturnValue) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_GetSkateActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.GetThrottleActive
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_JetpackPilot_GetThrottleActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_GetThrottleActive) == 0x000001, "Wrong alignment on BFGActorComponent_JetpackPilot_GetThrottleActive");
static_assert(sizeof(BFGActorComponent_JetpackPilot_GetThrottleActive) == 0x000001, "Wrong size on BFGActorComponent_JetpackPilot_GetThrottleActive");
static_assert(offsetof(BFGActorComponent_JetpackPilot_GetThrottleActive, ReturnValue) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_GetThrottleActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_JetpackPilot.IsJetpackEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_JetpackPilot_IsJetpackEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_JetpackPilot_IsJetpackEnabled) == 0x000001, "Wrong alignment on BFGActorComponent_JetpackPilot_IsJetpackEnabled");
static_assert(sizeof(BFGActorComponent_JetpackPilot_IsJetpackEnabled) == 0x000001, "Wrong size on BFGActorComponent_JetpackPilot_IsJetpackEnabled");
static_assert(offsetof(BFGActorComponent_JetpackPilot_IsJetpackEnabled, ReturnValue) == 0x000000, "Member 'BFGActorComponent_JetpackPilot_IsJetpackEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_ChallengeEnd.GetChallengeObject
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_ChallengeEnd_GetChallengeObject final
{
public:
	class UBFGQuest_Challenge*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_ChallengeEnd_GetChallengeObject) == 0x000008, "Wrong alignment on BFGWidget_ChallengeEnd_GetChallengeObject");
static_assert(sizeof(BFGWidget_ChallengeEnd_GetChallengeObject) == 0x000008, "Wrong size on BFGWidget_ChallengeEnd_GetChallengeObject");
static_assert(offsetof(BFGWidget_ChallengeEnd_GetChallengeObject, ReturnValue) == 0x000000, "Member 'BFGWidget_ChallengeEnd_GetChallengeObject::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_ChallengeEnd.SetContext
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_ChallengeEnd_SetContext final
{
public:
	class UObject*                                _pContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_ChallengeEnd_SetContext) == 0x000008, "Wrong alignment on BFGWidget_ChallengeEnd_SetContext");
static_assert(sizeof(BFGWidget_ChallengeEnd_SetContext) == 0x000008, "Wrong size on BFGWidget_ChallengeEnd_SetContext");
static_assert(offsetof(BFGWidget_ChallengeEnd_SetContext, _pContext) == 0x000000, "Member 'BFGWidget_ChallengeEnd_SetContext::_pContext' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Levitate.EndLevitation
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_Levitate_EndLevitation final
{
public:
	bool                                          _bForced;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Levitate_EndLevitation) == 0x000001, "Wrong alignment on BFGActorComponent_Levitate_EndLevitation");
static_assert(sizeof(BFGActorComponent_Levitate_EndLevitation) == 0x000001, "Wrong size on BFGActorComponent_Levitate_EndLevitation");
static_assert(offsetof(BFGActorComponent_Levitate_EndLevitation, _bForced) == 0x000000, "Member 'BFGActorComponent_Levitate_EndLevitation::_bForced' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Levitate.Timeline_Levitate_DOWN_Interpolation
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_Levitate_Timeline_Levitate_DOWN_Interpolation final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Levitate_Timeline_Levitate_DOWN_Interpolation) == 0x000004, "Wrong alignment on BFGActorComponent_Levitate_Timeline_Levitate_DOWN_Interpolation");
static_assert(sizeof(BFGActorComponent_Levitate_Timeline_Levitate_DOWN_Interpolation) == 0x000004, "Wrong size on BFGActorComponent_Levitate_Timeline_Levitate_DOWN_Interpolation");
static_assert(offsetof(BFGActorComponent_Levitate_Timeline_Levitate_DOWN_Interpolation, Val) == 0x000000, "Member 'BFGActorComponent_Levitate_Timeline_Levitate_DOWN_Interpolation::Val' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Levitate.Timeline_Levitate_UP_Interpolation
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_Levitate_Timeline_Levitate_UP_Interpolation final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Levitate_Timeline_Levitate_UP_Interpolation) == 0x000004, "Wrong alignment on BFGActorComponent_Levitate_Timeline_Levitate_UP_Interpolation");
static_assert(sizeof(BFGActorComponent_Levitate_Timeline_Levitate_UP_Interpolation) == 0x000004, "Wrong size on BFGActorComponent_Levitate_Timeline_Levitate_UP_Interpolation");
static_assert(offsetof(BFGActorComponent_Levitate_Timeline_Levitate_UP_Interpolation, Val) == 0x000000, "Member 'BFGActorComponent_Levitate_Timeline_Levitate_UP_Interpolation::Val' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_MonetaryValue.ValueChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_MonetaryValue_ValueChanged final
{
public:
	class ABFGPlayerState*                        _pState;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_MonetaryValue_ValueChanged) == 0x000008, "Wrong alignment on BFGEventTrigger_MonetaryValue_ValueChanged");
static_assert(sizeof(BFGEventTrigger_MonetaryValue_ValueChanged) == 0x000008, "Wrong size on BFGEventTrigger_MonetaryValue_ValueChanged");
static_assert(offsetof(BFGEventTrigger_MonetaryValue_ValueChanged, _pState) == 0x000000, "Member 'BFGEventTrigger_MonetaryValue_ValueChanged::_pState' has a wrong offset!");

// Function BFGCore.BFGActorComponent_LockOn.GetLockOnTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_LockOn_GetLockOnTarget final
{
public:
	class UBFGActorComponent_LockOnTarget*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_LockOn_GetLockOnTarget) == 0x000008, "Wrong alignment on BFGActorComponent_LockOn_GetLockOnTarget");
static_assert(sizeof(BFGActorComponent_LockOn_GetLockOnTarget) == 0x000008, "Wrong size on BFGActorComponent_LockOn_GetLockOnTarget");
static_assert(offsetof(BFGActorComponent_LockOn_GetLockOnTarget, ReturnValue) == 0x000000, "Member 'BFGActorComponent_LockOn_GetLockOnTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_LockOn.HasValidLockOnTarget
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_LockOn_HasValidLockOnTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_LockOn_HasValidLockOnTarget) == 0x000001, "Wrong alignment on BFGActorComponent_LockOn_HasValidLockOnTarget");
static_assert(sizeof(BFGActorComponent_LockOn_HasValidLockOnTarget) == 0x000001, "Wrong size on BFGActorComponent_LockOn_HasValidLockOnTarget");
static_assert(offsetof(BFGActorComponent_LockOn_HasValidLockOnTarget, ReturnValue) == 0x000000, "Member 'BFGActorComponent_LockOn_HasValidLockOnTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_HealthChanged.OnHealthChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_HealthChanged_OnHealthChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_HealthChanged_OnHealthChanged) == 0x000008, "Wrong alignment on BFGEventTrigger_HealthChanged_OnHealthChanged");
static_assert(sizeof(BFGEventTrigger_HealthChanged_OnHealthChanged) == 0x000008, "Wrong size on BFGEventTrigger_HealthChanged_OnHealthChanged");
static_assert(offsetof(BFGEventTrigger_HealthChanged_OnHealthChanged, _pActor) == 0x000000, "Member 'BFGEventTrigger_HealthChanged_OnHealthChanged::_pActor' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.ActivateAbilityEffectOnTarget
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget final
{
public:
	TSubclassOf<class UBFGMentalAbilityBase>      _rClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget) == 0x000008, "Wrong alignment on BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget");
static_assert(sizeof(BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget) == 0x000010, "Wrong size on BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget");
static_assert(offsetof(BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget, _rClass) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget::_rClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget, _pTarget) == 0x000008, "Member 'BFGActorComponent_MentalAbilities_ActivateAbilityEffectOnTarget::_pTarget' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.DeactivateAbilityEffectOnTarget
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget final
{
public:
	TSubclassOf<class UBFGMentalAbilityBase>      _rClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget) == 0x000008, "Wrong alignment on BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget");
static_assert(sizeof(BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget) == 0x000010, "Wrong size on BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget");
static_assert(offsetof(BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget, _rClass) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget::_rClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget, _pTarget) == 0x000008, "Member 'BFGActorComponent_MentalAbilities_DeactivateAbilityEffectOnTarget::_pTarget' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.Input_InteractState
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_MentalAbilities_Input_InteractState final
{
public:
	bool                                          _bPressed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBFGMentalAbilityBase>      _rClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPlayInvalidTargetEffects;                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_MentalAbilities_Input_InteractState) == 0x000008, "Wrong alignment on BFGActorComponent_MentalAbilities_Input_InteractState");
static_assert(sizeof(BFGActorComponent_MentalAbilities_Input_InteractState) == 0x000018, "Wrong size on BFGActorComponent_MentalAbilities_Input_InteractState");
static_assert(offsetof(BFGActorComponent_MentalAbilities_Input_InteractState, _bPressed) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_Input_InteractState::_bPressed' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentalAbilities_Input_InteractState, _rClass) == 0x000008, "Member 'BFGActorComponent_MentalAbilities_Input_InteractState::_rClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentalAbilities_Input_InteractState, _bPlayInvalidTargetEffects) == 0x000010, "Member 'BFGActorComponent_MentalAbilities_Input_InteractState::_bPlayInvalidTargetEffects' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentalAbilities_Input_InteractState, ReturnValue) == 0x000011, "Member 'BFGActorComponent_MentalAbilities_Input_InteractState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.IsAnyAbilityActive
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MentalAbilities_IsAnyAbilityActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentalAbilities_IsAnyAbilityActive) == 0x000001, "Wrong alignment on BFGActorComponent_MentalAbilities_IsAnyAbilityActive");
static_assert(sizeof(BFGActorComponent_MentalAbilities_IsAnyAbilityActive) == 0x000001, "Wrong size on BFGActorComponent_MentalAbilities_IsAnyAbilityActive");
static_assert(offsetof(BFGActorComponent_MentalAbilities_IsAnyAbilityActive, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_IsAnyAbilityActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.IsAnyMentalLinkActive
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MentalAbilities_IsAnyMentalLinkActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentalAbilities_IsAnyMentalLinkActive) == 0x000001, "Wrong alignment on BFGActorComponent_MentalAbilities_IsAnyMentalLinkActive");
static_assert(sizeof(BFGActorComponent_MentalAbilities_IsAnyMentalLinkActive) == 0x000001, "Wrong size on BFGActorComponent_MentalAbilities_IsAnyMentalLinkActive");
static_assert(offsetof(BFGActorComponent_MentalAbilities_IsAnyMentalLinkActive, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_IsAnyMentalLinkActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.SetWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MentalAbilities_SetWidgetVisibility final
{
public:
	ESlateVisibility                              _eVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentalAbilities_SetWidgetVisibility) == 0x000001, "Wrong alignment on BFGActorComponent_MentalAbilities_SetWidgetVisibility");
static_assert(sizeof(BFGActorComponent_MentalAbilities_SetWidgetVisibility) == 0x000001, "Wrong size on BFGActorComponent_MentalAbilities_SetWidgetVisibility");
static_assert(offsetof(BFGActorComponent_MentalAbilities_SetWidgetVisibility, _eVisibility) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_SetWidgetVisibility::_eVisibility' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.GetAbilityByClass
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MentalAbilities_GetAbilityByClass final
{
public:
	TSubclassOf<class UBFGMentalAbilityBase>      _rClass;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGMentalAbilityBase*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentalAbilities_GetAbilityByClass) == 0x000008, "Wrong alignment on BFGActorComponent_MentalAbilities_GetAbilityByClass");
static_assert(sizeof(BFGActorComponent_MentalAbilities_GetAbilityByClass) == 0x000010, "Wrong size on BFGActorComponent_MentalAbilities_GetAbilityByClass");
static_assert(offsetof(BFGActorComponent_MentalAbilities_GetAbilityByClass, _rClass) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_GetAbilityByClass::_rClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentalAbilities_GetAbilityByClass, ReturnValue) == 0x000008, "Member 'BFGActorComponent_MentalAbilities_GetAbilityByClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.GetAllAbilities
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MentalAbilities_GetAllAbilities final
{
public:
	TArray<class UBFGMentalAbilityBase*>          _apAbilitiesOut;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentalAbilities_GetAllAbilities) == 0x000008, "Wrong alignment on BFGActorComponent_MentalAbilities_GetAllAbilities");
static_assert(sizeof(BFGActorComponent_MentalAbilities_GetAllAbilities) == 0x000010, "Wrong size on BFGActorComponent_MentalAbilities_GetAllAbilities");
static_assert(offsetof(BFGActorComponent_MentalAbilities_GetAllAbilities, _apAbilitiesOut) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_GetAllAbilities::_apAbilitiesOut' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentalAbilities.GetCurrentAimTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_MentalAbilities_GetCurrentAimTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentalAbilities_GetCurrentAimTarget) == 0x000008, "Wrong alignment on BFGActorComponent_MentalAbilities_GetCurrentAimTarget");
static_assert(sizeof(BFGActorComponent_MentalAbilities_GetCurrentAimTarget) == 0x000008, "Wrong size on BFGActorComponent_MentalAbilities_GetCurrentAimTarget");
static_assert(offsetof(BFGActorComponent_MentalAbilities_GetCurrentAimTarget, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentalAbilities_GetCurrentAimTarget::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGPlayerBase.BFGPlayerBase_DamageCausedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature final
{
public:
	class AActor*                                 _pDamagedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasFatal;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                _damageType;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature) == 0x000008, "Wrong alignment on BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature");
static_assert(sizeof(BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature) == 0x000018, "Wrong size on BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature");
static_assert(offsetof(BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature, _pDamagedActor) == 0x000000, "Member 'BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature::_pDamagedActor' has a wrong offset!");
static_assert(offsetof(BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature, _fDamage) == 0x000008, "Member 'BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature, _bWasFatal) == 0x00000C, "Member 'BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature::_bWasFatal' has a wrong offset!");
static_assert(offsetof(BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature, _damageType) == 0x000010, "Member 'BFGPlayerBase_BFGPlayerBase_DamageCausedEvent__DelegateSignature::_damageType' has a wrong offset!");

// Function BFGCore.BFGPlayerBase.DeactivateAllActiveWeaponsAndAbilities
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerBase_DeactivateAllActiveWeaponsAndAbilities final
{
public:
	class UClass*                                 _pKeepAbilityActiveByClass;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerBase_DeactivateAllActiveWeaponsAndAbilities) == 0x000008, "Wrong alignment on BFGPlayerBase_DeactivateAllActiveWeaponsAndAbilities");
static_assert(sizeof(BFGPlayerBase_DeactivateAllActiveWeaponsAndAbilities) == 0x000008, "Wrong size on BFGPlayerBase_DeactivateAllActiveWeaponsAndAbilities");
static_assert(offsetof(BFGPlayerBase_DeactivateAllActiveWeaponsAndAbilities, _pKeepAbilityActiveByClass) == 0x000000, "Member 'BFGPlayerBase_DeactivateAllActiveWeaponsAndAbilities::_pKeepAbilityActiveByClass' has a wrong offset!");

// Function BFGCore.BFGPlayerBase.EnterGracePeriod
// 0x000C (0x000C - 0x0000)
struct BFGPlayerBase_EnterGracePeriod final
{
public:
	class FName                                   _strFadeIdentifier;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFadeOut;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerBase_EnterGracePeriod) == 0x000004, "Wrong alignment on BFGPlayerBase_EnterGracePeriod");
static_assert(sizeof(BFGPlayerBase_EnterGracePeriod) == 0x00000C, "Wrong size on BFGPlayerBase_EnterGracePeriod");
static_assert(offsetof(BFGPlayerBase_EnterGracePeriod, _strFadeIdentifier) == 0x000000, "Member 'BFGPlayerBase_EnterGracePeriod::_strFadeIdentifier' has a wrong offset!");
static_assert(offsetof(BFGPlayerBase_EnterGracePeriod, _bFadeOut) == 0x000008, "Member 'BFGPlayerBase_EnterGracePeriod::_bFadeOut' has a wrong offset!");

// Function BFGCore.BFGPlayerBase.VisibilityHiddenIngameChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerBase_VisibilityHiddenIngameChanged final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerBase_VisibilityHiddenIngameChanged) == 0x000001, "Wrong alignment on BFGPlayerBase_VisibilityHiddenIngameChanged");
static_assert(sizeof(BFGPlayerBase_VisibilityHiddenIngameChanged) == 0x000001, "Wrong size on BFGPlayerBase_VisibilityHiddenIngameChanged");
static_assert(offsetof(BFGPlayerBase_VisibilityHiddenIngameChanged, _bValue) == 0x000000, "Member 'BFGPlayerBase_VisibilityHiddenIngameChanged::_bValue' has a wrong offset!");

// Function BFGCore.BFGPlayerBase.GetDefaultCameraSpeedCoefCurve
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerBase_GetDefaultCameraSpeedCoefCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerBase_GetDefaultCameraSpeedCoefCurve) == 0x000008, "Wrong alignment on BFGPlayerBase_GetDefaultCameraSpeedCoefCurve");
static_assert(sizeof(BFGPlayerBase_GetDefaultCameraSpeedCoefCurve) == 0x000008, "Wrong size on BFGPlayerBase_GetDefaultCameraSpeedCoefCurve");
static_assert(offsetof(BFGPlayerBase_GetDefaultCameraSpeedCoefCurve, ReturnValue) == 0x000000, "Member 'BFGPlayerBase_GetDefaultCameraSpeedCoefCurve::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.AssignPilotMesh
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerUFO_AssignPilotMesh final
{
public:
	class USkeletalMeshComponent*                 _pSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_AssignPilotMesh) == 0x000008, "Wrong alignment on BFGPlayerUFO_AssignPilotMesh");
static_assert(sizeof(BFGPlayerUFO_AssignPilotMesh) == 0x000008, "Wrong size on BFGPlayerUFO_AssignPilotMesh");
static_assert(offsetof(BFGPlayerUFO_AssignPilotMesh, _pSkeletalMeshComponent) == 0x000000, "Member 'BFGPlayerUFO_AssignPilotMesh::_pSkeletalMeshComponent' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.IsAllowedToTriggerShieldImpact
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerUFO_IsAllowedToTriggerShieldImpact final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_IsAllowedToTriggerShieldImpact) == 0x000001, "Wrong alignment on BFGPlayerUFO_IsAllowedToTriggerShieldImpact");
static_assert(sizeof(BFGPlayerUFO_IsAllowedToTriggerShieldImpact) == 0x000001, "Wrong size on BFGPlayerUFO_IsAllowedToTriggerShieldImpact");
static_assert(offsetof(BFGPlayerUFO_IsAllowedToTriggerShieldImpact, ReturnValue) == 0x000000, "Member 'BFGPlayerUFO_IsAllowedToTriggerShieldImpact::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.OnDeathStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGPlayerUFO_OnDeathStateChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_OnDeathStateChanged) == 0x000008, "Wrong alignment on BFGPlayerUFO_OnDeathStateChanged");
static_assert(sizeof(BFGPlayerUFO_OnDeathStateChanged) == 0x000010, "Wrong size on BFGPlayerUFO_OnDeathStateChanged");
static_assert(offsetof(BFGPlayerUFO_OnDeathStateChanged, _pActor) == 0x000000, "Member 'BFGPlayerUFO_OnDeathStateChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGPlayerUFO_OnDeathStateChanged, _pStat) == 0x000008, "Member 'BFGPlayerUFO_OnDeathStateChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.OnShowTriggerZoneMessage
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerUFO_OnShowTriggerZoneMessage final
{
public:
	bool                                          _bIsOutside;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_OnShowTriggerZoneMessage) == 0x000001, "Wrong alignment on BFGPlayerUFO_OnShowTriggerZoneMessage");
static_assert(sizeof(BFGPlayerUFO_OnShowTriggerZoneMessage) == 0x000001, "Wrong size on BFGPlayerUFO_OnShowTriggerZoneMessage");
static_assert(offsetof(BFGPlayerUFO_OnShowTriggerZoneMessage, _bIsOutside) == 0x000000, "Member 'BFGPlayerUFO_OnShowTriggerZoneMessage::_bIsOutside' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.TriggerBeamEffect
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerUFO_TriggerBeamEffect final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_TriggerBeamEffect) == 0x000001, "Wrong alignment on BFGPlayerUFO_TriggerBeamEffect");
static_assert(sizeof(BFGPlayerUFO_TriggerBeamEffect) == 0x000001, "Wrong size on BFGPlayerUFO_TriggerBeamEffect");
static_assert(offsetof(BFGPlayerUFO_TriggerBeamEffect, _bEnable) == 0x000000, "Member 'BFGPlayerUFO_TriggerBeamEffect::_bEnable' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.ComputeCurrentHeight
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerUFO_ComputeCurrentHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_ComputeCurrentHeight) == 0x000004, "Wrong alignment on BFGPlayerUFO_ComputeCurrentHeight");
static_assert(sizeof(BFGPlayerUFO_ComputeCurrentHeight) == 0x000004, "Wrong size on BFGPlayerUFO_ComputeCurrentHeight");
static_assert(offsetof(BFGPlayerUFO_ComputeCurrentHeight, ReturnValue) == 0x000000, "Member 'BFGPlayerUFO_ComputeCurrentHeight::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerUFO_GetSettings final
{
public:
	class UBFGPlayerUFO_Settings*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_GetSettings) == 0x000008, "Wrong alignment on BFGPlayerUFO_GetSettings");
static_assert(sizeof(BFGPlayerUFO_GetSettings) == 0x000008, "Wrong size on BFGPlayerUFO_GetSettings");
static_assert(offsetof(BFGPlayerUFO_GetSettings, ReturnValue) == 0x000000, "Member 'BFGPlayerUFO_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.PlayerCanTakeControl
// 0x0002 (0x0002 - 0x0000)
struct BFGPlayerUFO_PlayerCanTakeControl final
{
public:
	bool                                          _bIgnoreDistance;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_PlayerCanTakeControl) == 0x000001, "Wrong alignment on BFGPlayerUFO_PlayerCanTakeControl");
static_assert(sizeof(BFGPlayerUFO_PlayerCanTakeControl) == 0x000002, "Wrong size on BFGPlayerUFO_PlayerCanTakeControl");
static_assert(offsetof(BFGPlayerUFO_PlayerCanTakeControl, _bIgnoreDistance) == 0x000000, "Member 'BFGPlayerUFO_PlayerCanTakeControl::_bIgnoreDistance' has a wrong offset!");
static_assert(offsetof(BFGPlayerUFO_PlayerCanTakeControl, ReturnValue) == 0x000001, "Member 'BFGPlayerUFO_PlayerCanTakeControl::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerUFO.PlayerHasControl
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerUFO_PlayerHasControl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerUFO_PlayerHasControl) == 0x000001, "Wrong alignment on BFGPlayerUFO_PlayerHasControl");
static_assert(sizeof(BFGPlayerUFO_PlayerHasControl) == 0x000001, "Wrong size on BFGPlayerUFO_PlayerHasControl");
static_assert(offsetof(BFGPlayerUFO_PlayerHasControl, ReturnValue) == 0x000000, "Member 'BFGPlayerUFO_PlayerHasControl::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskMoveTo.CreateAndAddScriptedSequence_TaskMoveTo
// 0x0040 (0x0040 - 0x0000)
struct BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _pActorToReach;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGNPCCharacter_MoveSpeed                    _moveSpeed;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fTolerance;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ShouldGoIntoStandby;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo");
static_assert(sizeof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo) == 0x000040, "Wrong size on BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo, _pActorToReach) == 0x000008, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo::_pActorToReach' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo, _moveSpeed) == 0x000030, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo::_moveSpeed' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo, _fTolerance) == 0x000034, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo::_fTolerance' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo, _ShouldGoIntoStandby) == 0x000038, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo::_ShouldGoIntoStandby' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo, ReturnValue) == 0x000039, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveTo::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskMoveTo.CreateAndAddScriptedSequence_TaskMoveToForVehicle
// 0x0048 (0x0048 - 0x0000)
struct BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _pActorToReach;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShouldStopAtEnd;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShouldReleasePassenger;                          // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fTolerance;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _doWaitInStandby;                                  // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _doIgnoreAvailabilityFlag;                         // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fOverrideSpeed;                                   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle");
static_assert(sizeof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle) == 0x000048, "Wrong size on BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, _pActorToReach) == 0x000008, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::_pActorToReach' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, _bShouldStopAtEnd) == 0x000030, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::_bShouldStopAtEnd' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, _bShouldReleasePassenger) == 0x000031, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::_bShouldReleasePassenger' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, _fTolerance) == 0x000034, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::_fTolerance' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, _doWaitInStandby) == 0x000038, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::_doWaitInStandby' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, _doIgnoreAvailabilityFlag) == 0x000039, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::_doIgnoreAvailabilityFlag' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, _fOverrideSpeed) == 0x00003C, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::_fOverrideSpeed' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle, ReturnValue) == 0x000040, "Member 'BFGScriptedSequence_TaskMoveTo_CreateAndAddScriptedSequence_TaskMoveToForVehicle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_BossObjective.OnBossObjectiveReached
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_BossObjective_OnBossObjectiveReached final
{
public:
	class AActor*                                 _pBoss;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGQuest_BossObjective                       _objective;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEventTrigger_BossObjective_OnBossObjectiveReached) == 0x000008, "Wrong alignment on BFGEventTrigger_BossObjective_OnBossObjectiveReached");
static_assert(sizeof(BFGEventTrigger_BossObjective_OnBossObjectiveReached) == 0x000010, "Wrong size on BFGEventTrigger_BossObjective_OnBossObjectiveReached");
static_assert(offsetof(BFGEventTrigger_BossObjective_OnBossObjectiveReached, _pBoss) == 0x000000, "Member 'BFGEventTrigger_BossObjective_OnBossObjectiveReached::_pBoss' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_BossObjective_OnBossObjectiveReached, _objective) == 0x000008, "Member 'BFGEventTrigger_BossObjective_OnBossObjectiveReached::_objective' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_MentallyInteractable.Action_Focused__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature final
{
public:
	class UBFGActorComponent_MentallyInteractable* _pMentallyInteractable;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _pController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature) == 0x000008, "Wrong alignment on BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature) == 0x000010, "Wrong size on BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature, _pMentallyInteractable) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature::_pMentallyInteractable' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature, _pController) == 0x000008, "Member 'BFGActorComponent_MentallyInteractable_Action_Focused__DelegateSignature::_pController' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_MentallyInteractable.Action_InteractAction__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature final
{
public:
	class UBFGActorComponent_MentallyInteractable* _pMentallyInteractable;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _pController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature) == 0x000008, "Wrong alignment on BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature) == 0x000010, "Wrong size on BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature, _pMentallyInteractable) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature::_pMentallyInteractable' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature, _pController) == 0x000008, "Member 'BFGActorComponent_MentallyInteractable_Action_InteractAction__DelegateSignature::_pController' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_MentallyInteractable.Action_Unfocused__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_MentallyInteractable_Action_Unfocused__DelegateSignature final
{
public:
	class UBFGActorComponent_MentallyInteractable* _pMentallyInteractable;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_Action_Unfocused__DelegateSignature) == 0x000008, "Wrong alignment on BFGActorComponent_MentallyInteractable_Action_Unfocused__DelegateSignature");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_Action_Unfocused__DelegateSignature) == 0x000008, "Wrong size on BFGActorComponent_MentallyInteractable_Action_Unfocused__DelegateSignature");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_Action_Unfocused__DelegateSignature, _pMentallyInteractable) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_Action_Unfocused__DelegateSignature::_pMentallyInteractable' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentallyInteractable.IsInteractable
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MentallyInteractable_IsInteractable final
{
public:
	class ABFGPlayerCharacter*                    _pPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_IsInteractable) == 0x000008, "Wrong alignment on BFGActorComponent_MentallyInteractable_IsInteractable");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_IsInteractable) == 0x000010, "Wrong size on BFGActorComponent_MentallyInteractable_IsInteractable");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_IsInteractable, _pPlayer) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_IsInteractable::_pPlayer' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_IsInteractable, ReturnValue) == 0x000008, "Member 'BFGActorComponent_MentallyInteractable_IsInteractable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentallyInteractable.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MentallyInteractable_SetEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_SetEnabled) == 0x000001, "Wrong alignment on BFGActorComponent_MentallyInteractable_SetEnabled");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_SetEnabled) == 0x000001, "Wrong size on BFGActorComponent_MentallyInteractable_SetEnabled");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_SetEnabled, _bEnabled) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_SetEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentallyInteractable.GetHoldTime
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_MentallyInteractable_GetHoldTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_GetHoldTime) == 0x000004, "Wrong alignment on BFGActorComponent_MentallyInteractable_GetHoldTime");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_GetHoldTime) == 0x000004, "Wrong size on BFGActorComponent_MentallyInteractable_GetHoldTime");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_GetHoldTime, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_GetHoldTime::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentallyInteractable.GetInteractTime
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_MentallyInteractable_GetInteractTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_GetInteractTime) == 0x000004, "Wrong alignment on BFGActorComponent_MentallyInteractable_GetInteractTime");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_GetInteractTime) == 0x000004, "Wrong size on BFGActorComponent_MentallyInteractable_GetInteractTime");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_GetInteractTime, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_GetInteractTime::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentallyInteractable.GetLastFailText
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_MentallyInteractable_GetLastFailText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_GetLastFailText) == 0x000008, "Wrong alignment on BFGActorComponent_MentallyInteractable_GetLastFailText");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_GetLastFailText) == 0x000018, "Wrong size on BFGActorComponent_MentallyInteractable_GetLastFailText");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_GetLastFailText, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_GetLastFailText::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentallyInteractable.GetPosture
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MentallyInteractable_GetPosture final
{
public:
	EBFGAnimation_MentalAbilityPosture            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_GetPosture) == 0x000001, "Wrong alignment on BFGActorComponent_MentallyInteractable_GetPosture");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_GetPosture) == 0x000001, "Wrong size on BFGActorComponent_MentallyInteractable_GetPosture");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_GetPosture, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_GetPosture::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentallyInteractable.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MentallyInteractable_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_IsEnabled) == 0x000001, "Wrong alignment on BFGActorComponent_MentallyInteractable_IsEnabled");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_IsEnabled) == 0x000001, "Wrong size on BFGActorComponent_MentallyInteractable_IsEnabled");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_IsEnabled, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_IsEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MentallyInteractable.IsFocused
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MentallyInteractable_IsFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MentallyInteractable_IsFocused) == 0x000001, "Wrong alignment on BFGActorComponent_MentallyInteractable_IsFocused");
static_assert(sizeof(BFGActorComponent_MentallyInteractable_IsFocused) == 0x000001, "Wrong size on BFGActorComponent_MentallyInteractable_IsFocused");
static_assert(offsetof(BFGActorComponent_MentallyInteractable_IsFocused, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MentallyInteractable_IsFocused::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MissionGameplay.GetRestrictedAreaOverlapping
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MissionGameplay_GetRestrictedAreaOverlapping final
{
public:
	TArray<class ABFGRestrictedArea*>             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MissionGameplay_GetRestrictedAreaOverlapping) == 0x000008, "Wrong alignment on BFGActorComponent_MissionGameplay_GetRestrictedAreaOverlapping");
static_assert(sizeof(BFGActorComponent_MissionGameplay_GetRestrictedAreaOverlapping) == 0x000010, "Wrong size on BFGActorComponent_MissionGameplay_GetRestrictedAreaOverlapping");
static_assert(offsetof(BFGActorComponent_MissionGameplay_GetRestrictedAreaOverlapping, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MissionGameplay_GetRestrictedAreaOverlapping::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MissionGameplay.GetRestrictedAreaViolated
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_MissionGameplay_GetRestrictedAreaViolated final
{
public:
	TArray<class ABFGRestrictedArea*>             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MissionGameplay_GetRestrictedAreaViolated) == 0x000008, "Wrong alignment on BFGActorComponent_MissionGameplay_GetRestrictedAreaViolated");
static_assert(sizeof(BFGActorComponent_MissionGameplay_GetRestrictedAreaViolated) == 0x000010, "Wrong size on BFGActorComponent_MissionGameplay_GetRestrictedAreaViolated");
static_assert(offsetof(BFGActorComponent_MissionGameplay_GetRestrictedAreaViolated, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MissionGameplay_GetRestrictedAreaViolated::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MissionGameplay.IsVisitingAnyRestrictedArea
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MissionGameplay_IsVisitingAnyRestrictedArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MissionGameplay_IsVisitingAnyRestrictedArea) == 0x000001, "Wrong alignment on BFGActorComponent_MissionGameplay_IsVisitingAnyRestrictedArea");
static_assert(sizeof(BFGActorComponent_MissionGameplay_IsVisitingAnyRestrictedArea) == 0x000001, "Wrong size on BFGActorComponent_MissionGameplay_IsVisitingAnyRestrictedArea");
static_assert(offsetof(BFGActorComponent_MissionGameplay_IsVisitingAnyRestrictedArea, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MissionGameplay_IsVisitingAnyRestrictedArea::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence.OnAgentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGScriptedSequence_OnAgentDestroyed final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_OnAgentDestroyed) == 0x000008, "Wrong alignment on BFGScriptedSequence_OnAgentDestroyed");
static_assert(sizeof(BFGScriptedSequence_OnAgentDestroyed) == 0x000008, "Wrong size on BFGScriptedSequence_OnAgentDestroyed");
static_assert(offsetof(BFGScriptedSequence_OnAgentDestroyed, _pAgent) == 0x000000, "Member 'BFGScriptedSequence_OnAgentDestroyed::_pAgent' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence.SetActivationAction
// 0x0001 (0x0001 - 0x0000)
struct BFGScriptedSequence_SetActivationAction final
{
public:
	EBFGScriptedSequence_ActivationAction         _action;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_SetActivationAction) == 0x000001, "Wrong alignment on BFGScriptedSequence_SetActivationAction");
static_assert(sizeof(BFGScriptedSequence_SetActivationAction) == 0x000001, "Wrong size on BFGScriptedSequence_SetActivationAction");
static_assert(offsetof(BFGScriptedSequence_SetActivationAction, _action) == 0x000000, "Member 'BFGScriptedSequence_SetActivationAction::_action' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence.GetAgent
// 0x0008 (0x0008 - 0x0000)
struct BFGScriptedSequence_GetAgent final
{
public:
	class UBFGNetworkPathAgent*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_GetAgent) == 0x000008, "Wrong alignment on BFGScriptedSequence_GetAgent");
static_assert(sizeof(BFGScriptedSequence_GetAgent) == 0x000008, "Wrong size on BFGScriptedSequence_GetAgent");
static_assert(offsetof(BFGScriptedSequence_GetAgent, ReturnValue) == 0x000000, "Member 'BFGScriptedSequence_GetAgent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence.GetCurrentTaskIndex
// 0x0004 (0x0004 - 0x0000)
struct BFGScriptedSequence_GetCurrentTaskIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_GetCurrentTaskIndex) == 0x000004, "Wrong alignment on BFGScriptedSequence_GetCurrentTaskIndex");
static_assert(sizeof(BFGScriptedSequence_GetCurrentTaskIndex) == 0x000004, "Wrong size on BFGScriptedSequence_GetCurrentTaskIndex");
static_assert(offsetof(BFGScriptedSequence_GetCurrentTaskIndex, ReturnValue) == 0x000000, "Member 'BFGScriptedSequence_GetCurrentTaskIndex::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MonetaryValue.SetMonetaryValue
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_MonetaryValue_SetMonetaryValue final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MonetaryValue_SetMonetaryValue) == 0x000004, "Wrong alignment on BFGActorComponent_MonetaryValue_SetMonetaryValue");
static_assert(sizeof(BFGActorComponent_MonetaryValue_SetMonetaryValue) == 0x000004, "Wrong size on BFGActorComponent_MonetaryValue_SetMonetaryValue");
static_assert(offsetof(BFGActorComponent_MonetaryValue_SetMonetaryValue, _fValue) == 0x000000, "Member 'BFGActorComponent_MonetaryValue_SetMonetaryValue::_fValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MonetaryValue.GetMonetaryValue
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_MonetaryValue_GetMonetaryValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MonetaryValue_GetMonetaryValue) == 0x000004, "Wrong alignment on BFGActorComponent_MonetaryValue_GetMonetaryValue");
static_assert(sizeof(BFGActorComponent_MonetaryValue_GetMonetaryValue) == 0x000004, "Wrong size on BFGActorComponent_MonetaryValue_GetMonetaryValue");
static_assert(offsetof(BFGActorComponent_MonetaryValue_GetMonetaryValue, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MonetaryValue_GetMonetaryValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MonetaryValue.HasMonetaryValue
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_MonetaryValue_HasMonetaryValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MonetaryValue_HasMonetaryValue) == 0x000001, "Wrong alignment on BFGActorComponent_MonetaryValue_HasMonetaryValue");
static_assert(sizeof(BFGActorComponent_MonetaryValue_HasMonetaryValue) == 0x000001, "Wrong size on BFGActorComponent_MonetaryValue_HasMonetaryValue");
static_assert(offsetof(BFGActorComponent_MonetaryValue_HasMonetaryValue, ReturnValue) == 0x000000, "Member 'BFGActorComponent_MonetaryValue_HasMonetaryValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_MonetaryValue.InitEffectComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_MonetaryValue_InitEffectComponent final
{
public:
	class UBFGActorComponent_Effect*              _pEffectComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_MonetaryValue_InitEffectComponent) == 0x000008, "Wrong alignment on BFGActorComponent_MonetaryValue_InitEffectComponent");
static_assert(sizeof(BFGActorComponent_MonetaryValue_InitEffectComponent) == 0x000008, "Wrong size on BFGActorComponent_MonetaryValue_InitEffectComponent");
static_assert(offsetof(BFGActorComponent_MonetaryValue_InitEffectComponent, _pEffectComponent) == 0x000000, "Member 'BFGActorComponent_MonetaryValue_InitEffectComponent::_pEffectComponent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.Internal_OnAIAlertStateStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_uint8*                    _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged) == 0x000008, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged) == 0x000010, "Wrong size on BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged, _pOwner) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged, _pStat) == 0x000008, "Member 'BFGActorComponent_NPCBehaviorVO_Internal_OnAIAlertStateStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.Internal_OnPawnDamage
// 0x00B8 (0x00B8 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage final
{
public:
	class UBFGActorComponent_PawnDamage*          _pPawnDamage;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pDamageCauser;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDamageType*                         _pDamageType;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rShotDirection;                                   // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _oHitResult;                                       // 0x002C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage) == 0x000008, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage) == 0x0000B8, "Wrong size on BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage, _pPawnDamage) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage::_pPawnDamage' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage, _fDamage) == 0x000008, "Member 'BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage, _pDamageCauser) == 0x000010, "Member 'BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage::_pDamageCauser' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage, _pDamageType) == 0x000018, "Member 'BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage::_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage, _rShotDirection) == 0x000020, "Member 'BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage::_rShotDirection' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage, _oHitResult) == 0x00002C, "Member 'BFGActorComponent_NPCBehaviorVO_Internal_OnPawnDamage::_oHitResult' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.OnAIStateChanged
// 0x0003 (0x0003 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_OnAIStateChanged final
{
public:
	EBFGBehaviourState_NPC                        _previousState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGBehaviourState_NPC                        _newState;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGCuriosityReason_NPC                       _curiosityReason;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_OnAIStateChanged) == 0x000001, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_OnAIStateChanged");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_OnAIStateChanged) == 0x000003, "Wrong size on BFGActorComponent_NPCBehaviorVO_OnAIStateChanged");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnAIStateChanged, _previousState) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_OnAIStateChanged::_previousState' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnAIStateChanged, _newState) == 0x000001, "Member 'BFGActorComponent_NPCBehaviorVO_OnAIStateChanged::_newState' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnAIStateChanged, _curiosityReason) == 0x000002, "Member 'BFGActorComponent_NPCBehaviorVO_OnAIStateChanged::_curiosityReason' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.OnEvade
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_OnEvade final
{
public:
	EBFGEvadeDirection                            _direction;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pEvadeFromActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_OnEvade) == 0x000008, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_OnEvade");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_OnEvade) == 0x000010, "Wrong size on BFGActorComponent_NPCBehaviorVO_OnEvade");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnEvade, _direction) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_OnEvade::_direction' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnEvade, _pEvadeFromActor) == 0x000008, "Member 'BFGActorComponent_NPCBehaviorVO_OnEvade::_pEvadeFromActor' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.OnGameplayEffectTagActive
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagActive final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagActive) == 0x000004, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagActive");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagActive) == 0x000008, "Wrong size on BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagActive");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagActive, _rTag) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagActive::_rTag' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.OnGameplayEffectTagInactive
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagInactive final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagInactive) == 0x000004, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagInactive");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagInactive) == 0x000008, "Wrong size on BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagInactive");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagInactive, _rTag) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_OnGameplayEffectTagInactive::_rTag' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.OnHealthDamage
// 0x00B0 (0x00B0 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_OnHealthDamage final
{
public:
	float                                         _fDamage;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pDamageCauser;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGDamageType*                   _pDamageType;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rShotDirection;                                   // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _oHitResult;                                       // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          _bWasFriendlyFire;                                 // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_OnHealthDamage) == 0x000008, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_OnHealthDamage");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_OnHealthDamage) == 0x0000B0, "Wrong size on BFGActorComponent_NPCBehaviorVO_OnHealthDamage");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnHealthDamage, _fDamage) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_OnHealthDamage::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnHealthDamage, _pDamageCauser) == 0x000008, "Member 'BFGActorComponent_NPCBehaviorVO_OnHealthDamage::_pDamageCauser' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnHealthDamage, _pDamageType) == 0x000010, "Member 'BFGActorComponent_NPCBehaviorVO_OnHealthDamage::_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnHealthDamage, _rShotDirection) == 0x000018, "Member 'BFGActorComponent_NPCBehaviorVO_OnHealthDamage::_rShotDirection' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnHealthDamage, _oHitResult) == 0x000024, "Member 'BFGActorComponent_NPCBehaviorVO_OnHealthDamage::_oHitResult' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnHealthDamage, _bWasFriendlyFire) == 0x0000AC, "Member 'BFGActorComponent_NPCBehaviorVO_OnHealthDamage::_bWasFriendlyFire' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.OnPlayerBumped
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_OnPlayerBumped final
{
public:
	struct FVector                                _vHitDirection;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fVelocity;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pHitByActor;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_OnPlayerBumped) == 0x000008, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_OnPlayerBumped");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_OnPlayerBumped) == 0x000018, "Wrong size on BFGActorComponent_NPCBehaviorVO_OnPlayerBumped");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnPlayerBumped, _vHitDirection) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_OnPlayerBumped::_vHitDirection' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnPlayerBumped, _fVelocity) == 0x00000C, "Member 'BFGActorComponent_NPCBehaviorVO_OnPlayerBumped::_fVelocity' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnPlayerBumped, _pHitByActor) == 0x000010, "Member 'BFGActorComponent_NPCBehaviorVO_OnPlayerBumped::_pHitByActor' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.OnRanInFireline
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_OnRanInFireline final
{
public:
	class AActor*                                 _pFirelineActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_OnRanInFireline) == 0x000008, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_OnRanInFireline");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_OnRanInFireline) == 0x000008, "Wrong size on BFGActorComponent_NPCBehaviorVO_OnRanInFireline");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnRanInFireline, _pFirelineActor) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_OnRanInFireline::_pFirelineActor' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCBehaviorVO.OnSawPlayerDisguise
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_NPCBehaviorVO_OnSawPlayerDisguise final
{
public:
	class AActor*                                 _pPlayerActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCBehaviorVO_OnSawPlayerDisguise) == 0x000008, "Wrong alignment on BFGActorComponent_NPCBehaviorVO_OnSawPlayerDisguise");
static_assert(sizeof(BFGActorComponent_NPCBehaviorVO_OnSawPlayerDisguise) == 0x000008, "Wrong size on BFGActorComponent_NPCBehaviorVO_OnSawPlayerDisguise");
static_assert(offsetof(BFGActorComponent_NPCBehaviorVO_OnSawPlayerDisguise, _pPlayerActor) == 0x000000, "Member 'BFGActorComponent_NPCBehaviorVO_OnSawPlayerDisguise::_pPlayerActor' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_SaveSystem.OnLoadDone
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_SaveSystem_OnLoadDone final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_SaveSystem_OnLoadDone) == 0x000008, "Wrong alignment on BFGEventTrigger_SaveSystem_OnLoadDone");
static_assert(sizeof(BFGEventTrigger_SaveSystem_OnLoadDone) == 0x000010, "Wrong size on BFGEventTrigger_SaveSystem_OnLoadDone");
static_assert(offsetof(BFGEventTrigger_SaveSystem_OnLoadDone, _pSaveSystem) == 0x000000, "Member 'BFGEventTrigger_SaveSystem_OnLoadDone::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_SaveSystem_OnLoadDone, _pAction) == 0x000008, "Member 'BFGEventTrigger_SaveSystem_OnLoadDone::_pAction' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_SaveSystem.OnSaveDone
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_SaveSystem_OnSaveDone final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_SaveSystem_OnSaveDone) == 0x000008, "Wrong alignment on BFGEventTrigger_SaveSystem_OnSaveDone");
static_assert(sizeof(BFGEventTrigger_SaveSystem_OnSaveDone) == 0x000010, "Wrong size on BFGEventTrigger_SaveSystem_OnSaveDone");
static_assert(offsetof(BFGEventTrigger_SaveSystem_OnSaveDone, _pSaveSystem) == 0x000000, "Member 'BFGEventTrigger_SaveSystem_OnSaveDone::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_SaveSystem_OnSaveDone, _pAction) == 0x000008, "Member 'BFGEventTrigger_SaveSystem_OnSaveDone::_pAction' has a wrong offset!");

// Function BFGCore.BFGActorComponent_NPCCharacterMovement.GetMoveSpeed
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_NPCCharacterMovement_GetMoveSpeed final
{
public:
	EBFGNPCCharacter_MoveSpeed                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_NPCCharacterMovement_GetMoveSpeed) == 0x000001, "Wrong alignment on BFGActorComponent_NPCCharacterMovement_GetMoveSpeed");
static_assert(sizeof(BFGActorComponent_NPCCharacterMovement_GetMoveSpeed) == 0x000001, "Wrong size on BFGActorComponent_NPCCharacterMovement_GetMoveSpeed");
static_assert(offsetof(BFGActorComponent_NPCCharacterMovement_GetMoveSpeed, ReturnValue) == 0x000000, "Member 'BFGActorComponent_NPCCharacterMovement_GetMoveSpeed::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_OverlapActor.OnOverlapActor
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_OverlapActor_OnOverlapActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOverlapsWith;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_OverlapActor_OnOverlapActor) == 0x000008, "Wrong alignment on BFGEventTrigger_OverlapActor_OnOverlapActor");
static_assert(sizeof(BFGEventTrigger_OverlapActor_OnOverlapActor) == 0x000010, "Wrong size on BFGEventTrigger_OverlapActor_OnOverlapActor");
static_assert(offsetof(BFGEventTrigger_OverlapActor_OnOverlapActor, _pActor) == 0x000000, "Member 'BFGEventTrigger_OverlapActor_OnOverlapActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_OverlapActor_OnOverlapActor, _pOverlapsWith) == 0x000008, "Member 'BFGEventTrigger_OverlapActor_OnOverlapActor::_pOverlapsWith' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ObjectiveMarkerScreen.OnMarkerAttached
// 0x0040 (0x0040 - 0x0000)
struct BFGActorComponent_ObjectiveMarkerScreen_OnMarkerAttached final
{
public:
	struct FBFGObjectiveMarkerInfoEntry           _info;                                             // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ObjectiveMarkerScreen_OnMarkerAttached) == 0x000008, "Wrong alignment on BFGActorComponent_ObjectiveMarkerScreen_OnMarkerAttached");
static_assert(sizeof(BFGActorComponent_ObjectiveMarkerScreen_OnMarkerAttached) == 0x000040, "Wrong size on BFGActorComponent_ObjectiveMarkerScreen_OnMarkerAttached");
static_assert(offsetof(BFGActorComponent_ObjectiveMarkerScreen_OnMarkerAttached, _info) == 0x000000, "Member 'BFGActorComponent_ObjectiveMarkerScreen_OnMarkerAttached::_info' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ObjectiveMarkerScreen.SetMarkerEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_ObjectiveMarkerScreen_SetMarkerEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerEnabled) == 0x000001, "Wrong alignment on BFGActorComponent_ObjectiveMarkerScreen_SetMarkerEnabled");
static_assert(sizeof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerEnabled) == 0x000001, "Wrong size on BFGActorComponent_ObjectiveMarkerScreen_SetMarkerEnabled");
static_assert(offsetof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerEnabled, _bEnabled) == 0x000000, "Member 'BFGActorComponent_ObjectiveMarkerScreen_SetMarkerEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ObjectiveMarkerScreen.SetMarkerFadedInDistance
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedInDistance final
{
public:
	float                                         _fRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedInDistance) == 0x000004, "Wrong alignment on BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedInDistance");
static_assert(sizeof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedInDistance) == 0x000004, "Wrong size on BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedInDistance");
static_assert(offsetof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedInDistance, _fRadius) == 0x000000, "Member 'BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedInDistance::_fRadius' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ObjectiveMarkerScreen.SetMarkerFadedOutDistance
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedOutDistance final
{
public:
	float                                         _fRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedOutDistance) == 0x000004, "Wrong alignment on BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedOutDistance");
static_assert(sizeof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedOutDistance) == 0x000004, "Wrong size on BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedOutDistance");
static_assert(offsetof(BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedOutDistance, _fRadius) == 0x000000, "Member 'BFGActorComponent_ObjectiveMarkerScreen_SetMarkerFadedOutDistance::_fRadius' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam.OnBeamDelayStarted
// 0x001C (0x001C - 0x0000)
struct BFGProjectile_Beam_OnBeamDelayStarted final
{
public:
	struct FVector                                _vTargetLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHitTarget;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHitEnvironment;                                  // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _vImpactNormal;                                    // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_OnBeamDelayStarted) == 0x000004, "Wrong alignment on BFGProjectile_Beam_OnBeamDelayStarted");
static_assert(sizeof(BFGProjectile_Beam_OnBeamDelayStarted) == 0x00001C, "Wrong size on BFGProjectile_Beam_OnBeamDelayStarted");
static_assert(offsetof(BFGProjectile_Beam_OnBeamDelayStarted, _vTargetLocation) == 0x000000, "Member 'BFGProjectile_Beam_OnBeamDelayStarted::_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_OnBeamDelayStarted, _bHitTarget) == 0x00000C, "Member 'BFGProjectile_Beam_OnBeamDelayStarted::_bHitTarget' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_OnBeamDelayStarted, _bHitEnvironment) == 0x00000D, "Member 'BFGProjectile_Beam_OnBeamDelayStarted::_bHitEnvironment' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_OnBeamDelayStarted, _vImpactNormal) == 0x000010, "Member 'BFGProjectile_Beam_OnBeamDelayStarted::_vImpactNormal' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam.StartBeam
// 0x001C (0x001C - 0x0000)
struct BFGProjectile_Beam_StartBeam final
{
public:
	struct FVector                                _vTargetLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHitTarget;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHitEnvironment;                                  // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _vImpactNormal;                                    // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_StartBeam) == 0x000004, "Wrong alignment on BFGProjectile_Beam_StartBeam");
static_assert(sizeof(BFGProjectile_Beam_StartBeam) == 0x00001C, "Wrong size on BFGProjectile_Beam_StartBeam");
static_assert(offsetof(BFGProjectile_Beam_StartBeam, _vTargetLocation) == 0x000000, "Member 'BFGProjectile_Beam_StartBeam::_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_StartBeam, _bHitTarget) == 0x00000C, "Member 'BFGProjectile_Beam_StartBeam::_bHitTarget' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_StartBeam, _bHitEnvironment) == 0x00000D, "Member 'BFGProjectile_Beam_StartBeam::_bHitEnvironment' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_StartBeam, _vImpactNormal) == 0x000010, "Member 'BFGProjectile_Beam_StartBeam::_vImpactNormal' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam.UpdateBeam
// 0x001C (0x001C - 0x0000)
struct BFGProjectile_Beam_UpdateBeam final
{
public:
	struct FVector                                _vTargetLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHitTarget;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _vImpactNormal;                                    // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_UpdateBeam) == 0x000004, "Wrong alignment on BFGProjectile_Beam_UpdateBeam");
static_assert(sizeof(BFGProjectile_Beam_UpdateBeam) == 0x00001C, "Wrong size on BFGProjectile_Beam_UpdateBeam");
static_assert(offsetof(BFGProjectile_Beam_UpdateBeam, _vTargetLocation) == 0x000000, "Member 'BFGProjectile_Beam_UpdateBeam::_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_UpdateBeam, _bHitTarget) == 0x00000C, "Member 'BFGProjectile_Beam_UpdateBeam::_bHitTarget' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_UpdateBeam, _vImpactNormal) == 0x000010, "Member 'BFGProjectile_Beam_UpdateBeam::_vImpactNormal' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam.UpdateBeamWhileInactive
// 0x001C (0x001C - 0x0000)
struct BFGProjectile_Beam_UpdateBeamWhileInactive final
{
public:
	struct FVector                                _vTargetLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHitTarget;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _vImpactNormal;                                    // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_UpdateBeamWhileInactive) == 0x000004, "Wrong alignment on BFGProjectile_Beam_UpdateBeamWhileInactive");
static_assert(sizeof(BFGProjectile_Beam_UpdateBeamWhileInactive) == 0x00001C, "Wrong size on BFGProjectile_Beam_UpdateBeamWhileInactive");
static_assert(offsetof(BFGProjectile_Beam_UpdateBeamWhileInactive, _vTargetLocation) == 0x000000, "Member 'BFGProjectile_Beam_UpdateBeamWhileInactive::_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_UpdateBeamWhileInactive, _bHitTarget) == 0x00000C, "Member 'BFGProjectile_Beam_UpdateBeamWhileInactive::_bHitTarget' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_UpdateBeamWhileInactive, _vImpactNormal) == 0x000010, "Member 'BFGProjectile_Beam_UpdateBeamWhileInactive::_vImpactNormal' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam.GetCurrentAimData
// 0x00CC (0x00CC - 0x0000)
struct BFGProjectile_Beam_GetCurrentAimData final
{
public:
	struct FCharacterAimData                      ReturnValue;                                       // 0x0000(0x00CC)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_GetCurrentAimData) == 0x000004, "Wrong alignment on BFGProjectile_Beam_GetCurrentAimData");
static_assert(sizeof(BFGProjectile_Beam_GetCurrentAimData) == 0x0000CC, "Wrong size on BFGProjectile_Beam_GetCurrentAimData");
static_assert(offsetof(BFGProjectile_Beam_GetCurrentAimData, ReturnValue) == 0x000000, "Member 'BFGProjectile_Beam_GetCurrentAimData::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam.GetStartupTimer
// 0x0004 (0x0004 - 0x0000)
struct BFGProjectile_Beam_GetStartupTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_GetStartupTimer) == 0x000004, "Wrong alignment on BFGProjectile_Beam_GetStartupTimer");
static_assert(sizeof(BFGProjectile_Beam_GetStartupTimer) == 0x000004, "Wrong size on BFGProjectile_Beam_GetStartupTimer");
static_assert(offsetof(BFGProjectile_Beam_GetStartupTimer, ReturnValue) == 0x000000, "Member 'BFGProjectile_Beam_GetStartupTimer::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam_Roboprez.OnBeamDamageTick
// 0x0008 (0x0008 - 0x0000)
struct BFGProjectile_Beam_Roboprez_OnBeamDamageTick final
{
public:
	class AActor*                                 _pActorToDamage;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_Roboprez_OnBeamDamageTick) == 0x000008, "Wrong alignment on BFGProjectile_Beam_Roboprez_OnBeamDamageTick");
static_assert(sizeof(BFGProjectile_Beam_Roboprez_OnBeamDamageTick) == 0x000008, "Wrong size on BFGProjectile_Beam_Roboprez_OnBeamDamageTick");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamDamageTick, _pActorToDamage) == 0x000000, "Member 'BFGProjectile_Beam_Roboprez_OnBeamDamageTick::_pActorToDamage' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam_Roboprez.OnBeamOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin) == 0x000008, "Wrong alignment on BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin");
static_assert(sizeof(BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin) == 0x0000A8, "Wrong size on BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin, OverlappedComp) == 0x000000, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin, OtherActor) == 0x000008, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin, OtherComp) == 0x000010, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin, bFromSweep) == 0x00001C, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin, SweepResult) == 0x000020, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapBegin::SweepResult' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam_Roboprez.OnBeamOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd) == 0x000008, "Wrong alignment on BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd");
static_assert(sizeof(BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd) == 0x000020, "Wrong size on BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd, OverlappedComp) == 0x000000, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd, OtherActor) == 0x000008, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd, OtherComp) == 0x000010, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'BFGProjectile_Beam_Roboprez_OnBeamOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function BFGCore.BFGProjectile_Beam_Roboprez.GetBeamAngle
// 0x0004 (0x0004 - 0x0000)
struct BFGProjectile_Beam_Roboprez_GetBeamAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_Beam_Roboprez_GetBeamAngle) == 0x000004, "Wrong alignment on BFGProjectile_Beam_Roboprez_GetBeamAngle");
static_assert(sizeof(BFGProjectile_Beam_Roboprez_GetBeamAngle) == 0x000004, "Wrong size on BFGProjectile_Beam_Roboprez_GetBeamAngle");
static_assert(offsetof(BFGProjectile_Beam_Roboprez_GetBeamAngle, ReturnValue) == 0x000000, "Member 'BFGProjectile_Beam_Roboprez_GetBeamAngle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_KilledActor.OnKilledActor
// 0x0020 (0x0020 - 0x0000)
struct BFGEventTrigger_KilledActor_OnKilledActor final
{
public:
	class AController*                            _pInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pDamageSource;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pKilled;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                _damageType;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_KilledActor_OnKilledActor) == 0x000008, "Wrong alignment on BFGEventTrigger_KilledActor_OnKilledActor");
static_assert(sizeof(BFGEventTrigger_KilledActor_OnKilledActor) == 0x000020, "Wrong size on BFGEventTrigger_KilledActor_OnKilledActor");
static_assert(offsetof(BFGEventTrigger_KilledActor_OnKilledActor, _pInstigator) == 0x000000, "Member 'BFGEventTrigger_KilledActor_OnKilledActor::_pInstigator' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_KilledActor_OnKilledActor, _pDamageSource) == 0x000008, "Member 'BFGEventTrigger_KilledActor_OnKilledActor::_pDamageSource' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_KilledActor_OnKilledActor, _pKilled) == 0x000010, "Member 'BFGEventTrigger_KilledActor_OnKilledActor::_pKilled' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_KilledActor_OnKilledActor, _damageType) == 0x000018, "Member 'BFGEventTrigger_KilledActor_OnKilledActor::_damageType' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_ResourceValue.ValueChanged
// 0x000C (0x000C - 0x0000)
struct BFGEventTrigger_ResourceValue_ValueChanged final
{
public:
	EItemValueTypeEnum                            _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fNewValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fOldValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_ResourceValue_ValueChanged) == 0x000004, "Wrong alignment on BFGEventTrigger_ResourceValue_ValueChanged");
static_assert(sizeof(BFGEventTrigger_ResourceValue_ValueChanged) == 0x00000C, "Wrong size on BFGEventTrigger_ResourceValue_ValueChanged");
static_assert(offsetof(BFGEventTrigger_ResourceValue_ValueChanged, _eType) == 0x000000, "Member 'BFGEventTrigger_ResourceValue_ValueChanged::_eType' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_ResourceValue_ValueChanged, _fNewValue) == 0x000004, "Member 'BFGEventTrigger_ResourceValue_ValueChanged::_fNewValue' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_ResourceValue_ValueChanged, _fOldValue) == 0x000008, "Member 'BFGEventTrigger_ResourceValue_ValueChanged::_fOldValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_OpportunityComponent.ShouldShowOnBeginPlay
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_OpportunityComponent_ShouldShowOnBeginPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_OpportunityComponent_ShouldShowOnBeginPlay) == 0x000001, "Wrong alignment on BFGActorComponent_OpportunityComponent_ShouldShowOnBeginPlay");
static_assert(sizeof(BFGActorComponent_OpportunityComponent_ShouldShowOnBeginPlay) == 0x000001, "Wrong size on BFGActorComponent_OpportunityComponent_ShouldShowOnBeginPlay");
static_assert(offsetof(BFGActorComponent_OpportunityComponent_ShouldShowOnBeginPlay, ReturnValue) == 0x000000, "Member 'BFGActorComponent_OpportunityComponent_ShouldShowOnBeginPlay::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_OpportunityComponent.ShowWidget
// 0x00C8 (0x00C8 - 0x0000)
struct BFGActorComponent_OpportunityComponent_ShowWidget final
{
public:
	struct FBFGAgentInstanceOpportunityData       _data;                                             // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_OpportunityComponent_ShowWidget) == 0x000008, "Wrong alignment on BFGActorComponent_OpportunityComponent_ShowWidget");
static_assert(sizeof(BFGActorComponent_OpportunityComponent_ShowWidget) == 0x0000C8, "Wrong size on BFGActorComponent_OpportunityComponent_ShowWidget");
static_assert(offsetof(BFGActorComponent_OpportunityComponent_ShowWidget, _data) == 0x000000, "Member 'BFGActorComponent_OpportunityComponent_ShowWidget::_data' has a wrong offset!");

// Function BFGCore.BFGActorComponent_OverheatManager.OverheatGlow_Interpolation
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_OverheatManager_OverheatGlow_Interpolation final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_OverheatManager_OverheatGlow_Interpolation) == 0x000004, "Wrong alignment on BFGActorComponent_OverheatManager_OverheatGlow_Interpolation");
static_assert(sizeof(BFGActorComponent_OverheatManager_OverheatGlow_Interpolation) == 0x000004, "Wrong size on BFGActorComponent_OverheatManager_OverheatGlow_Interpolation");
static_assert(offsetof(BFGActorComponent_OverheatManager_OverheatGlow_Interpolation, Val) == 0x000000, "Member 'BFGActorComponent_OverheatManager_OverheatGlow_Interpolation::Val' has a wrong offset!");

// Function BFGCore.BFGActorComponent_OverheatManager.GetOverheatGlowState
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_OverheatManager_GetOverheatGlowState final
{
public:
	EBFGOverheatGlow                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_OverheatManager_GetOverheatGlowState) == 0x000001, "Wrong alignment on BFGActorComponent_OverheatManager_GetOverheatGlowState");
static_assert(sizeof(BFGActorComponent_OverheatManager_GetOverheatGlowState) == 0x000001, "Wrong size on BFGActorComponent_OverheatManager_GetOverheatGlowState");
static_assert(offsetof(BFGActorComponent_OverheatManager_GetOverheatGlowState, ReturnValue) == 0x000000, "Member 'BFGActorComponent_OverheatManager_GetOverheatGlowState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_OverheatManager.GetOverheatValue
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_OverheatManager_GetOverheatValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_OverheatManager_GetOverheatValue) == 0x000004, "Wrong alignment on BFGActorComponent_OverheatManager_GetOverheatValue");
static_assert(sizeof(BFGActorComponent_OverheatManager_GetOverheatValue) == 0x000004, "Wrong size on BFGActorComponent_OverheatManager_GetOverheatValue");
static_assert(offsetof(BFGActorComponent_OverheatManager_GetOverheatValue, ReturnValue) == 0x000000, "Member 'BFGActorComponent_OverheatManager_GetOverheatValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_VariableChange.OnVariableValueChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGEventTrigger_VariableChange_OnVariableValueChanged final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _oldValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _newValue;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_VariableChange_OnVariableValueChanged) == 0x000008, "Wrong alignment on BFGEventTrigger_VariableChange_OnVariableValueChanged");
static_assert(sizeof(BFGEventTrigger_VariableChange_OnVariableValueChanged) == 0x000018, "Wrong size on BFGEventTrigger_VariableChange_OnVariableValueChanged");
static_assert(offsetof(BFGEventTrigger_VariableChange_OnVariableValueChanged, _pVarMirror) == 0x000000, "Member 'BFGEventTrigger_VariableChange_OnVariableValueChanged::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_VariableChange_OnVariableValueChanged, _pVariable) == 0x000008, "Member 'BFGEventTrigger_VariableChange_OnVariableValueChanged::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_VariableChange_OnVariableValueChanged, _oldValue) == 0x000010, "Member 'BFGEventTrigger_VariableChange_OnVariableValueChanged::_oldValue' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_VariableChange_OnVariableValueChanged, _newValue) == 0x000014, "Member 'BFGEventTrigger_VariableChange_OnVariableValueChanged::_newValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnDamage.ApplyAndReportDamage
// 0x0030 (0x0030 - 0x0000)
struct BFGActorComponent_PawnDamage_ApplyAndReportDamage final
{
public:
	class AActor*                                 _pDamagedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _pInstigator;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pDamageSource;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                _damageType;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAllowFriendlyFire;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnDamage_ApplyAndReportDamage) == 0x000008, "Wrong alignment on BFGActorComponent_PawnDamage_ApplyAndReportDamage");
static_assert(sizeof(BFGActorComponent_PawnDamage_ApplyAndReportDamage) == 0x000030, "Wrong size on BFGActorComponent_PawnDamage_ApplyAndReportDamage");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportDamage, _pDamagedActor) == 0x000000, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportDamage::_pDamagedActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportDamage, _fDamage) == 0x000008, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportDamage::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportDamage, _pInstigator) == 0x000010, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportDamage::_pInstigator' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportDamage, _pDamageSource) == 0x000018, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportDamage::_pDamageSource' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportDamage, _damageType) == 0x000020, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportDamage::_damageType' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportDamage, _bAllowFriendlyFire) == 0x000028, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportDamage::_bAllowFriendlyFire' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportDamage, ReturnValue) == 0x00002C, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportDamage::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnDamage.ApplyAndReportPointDamage
// 0x00C0 (0x00C0 - 0x0000)
struct BFGActorComponent_PawnDamage_ApplyAndReportPointDamage final
{
public:
	class AActor*                                 _pDamagedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitFromDirection;                                  // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0018(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            _pInstigator;                                      // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pDamageSource;                                    // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                _damageType;                                       // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAllowFriendlyFire;                               // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x00BC(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage) == 0x000008, "Wrong alignment on BFGActorComponent_PawnDamage_ApplyAndReportPointDamage");
static_assert(sizeof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage) == 0x0000C0, "Wrong size on BFGActorComponent_PawnDamage_ApplyAndReportPointDamage");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, _pDamagedActor) == 0x000000, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::_pDamagedActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, _fDamage) == 0x000008, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, HitFromDirection) == 0x00000C, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::HitFromDirection' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, HitInfo) == 0x000018, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::HitInfo' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, _pInstigator) == 0x0000A0, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::_pInstigator' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, _pDamageSource) == 0x0000A8, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::_pDamageSource' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, _damageType) == 0x0000B0, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::_damageType' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, _bAllowFriendlyFire) == 0x0000B8, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::_bAllowFriendlyFire' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_ApplyAndReportPointDamage, ReturnValue) == 0x0000BC, "Member 'BFGActorComponent_PawnDamage_ApplyAndReportPointDamage::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_PawnDamage.BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature
// 0x00B8 (0x00B8 - 0x0000)
struct BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature final
{
public:
	class UBFGActorComponent_PawnDamage*          _pPawnDamage;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pDamageCauser;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDamageType*                         _pDamageType;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rShotDirection;                                   // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _oHitResult;                                       // 0x002C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature) == 0x000008, "Wrong alignment on BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature");
static_assert(sizeof(BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature) == 0x0000B8, "Wrong size on BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature");
static_assert(offsetof(BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature, _pPawnDamage) == 0x000000, "Member 'BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature::_pPawnDamage' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature, _fDamage) == 0x000008, "Member 'BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature, _pDamageCauser) == 0x000010, "Member 'BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature::_pDamageCauser' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature, _pDamageType) == 0x000018, "Member 'BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature::_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature, _rShotDirection) == 0x000020, "Member 'BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature::_rShotDirection' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature, _oHitResult) == 0x00002C, "Member 'BFGActorComponent_PawnDamage_BFGActorComponent_PawnDamage_PointDamageEvent__DelegateSignature::_oHitResult' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnDamage.ComputeCurrentShieldInvulnerabilityWindow
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_PawnDamage_ComputeCurrentShieldInvulnerabilityWindow final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnDamage_ComputeCurrentShieldInvulnerabilityWindow) == 0x000004, "Wrong alignment on BFGActorComponent_PawnDamage_ComputeCurrentShieldInvulnerabilityWindow");
static_assert(sizeof(BFGActorComponent_PawnDamage_ComputeCurrentShieldInvulnerabilityWindow) == 0x000004, "Wrong size on BFGActorComponent_PawnDamage_ComputeCurrentShieldInvulnerabilityWindow");
static_assert(offsetof(BFGActorComponent_PawnDamage_ComputeCurrentShieldInvulnerabilityWindow, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PawnDamage_ComputeCurrentShieldInvulnerabilityWindow::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PawnDamage.GetDamageTakenSince
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PawnDamage_GetDamageTakenSince final
{
public:
	float                                         _fMaxAgeSeconds;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PawnDamage_GetDamageTakenSince) == 0x000004, "Wrong alignment on BFGActorComponent_PawnDamage_GetDamageTakenSince");
static_assert(sizeof(BFGActorComponent_PawnDamage_GetDamageTakenSince) == 0x000008, "Wrong size on BFGActorComponent_PawnDamage_GetDamageTakenSince");
static_assert(offsetof(BFGActorComponent_PawnDamage_GetDamageTakenSince, _fMaxAgeSeconds) == 0x000000, "Member 'BFGActorComponent_PawnDamage_GetDamageTakenSince::_fMaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PawnDamage_GetDamageTakenSince, ReturnValue) == 0x000004, "Member 'BFGActorComponent_PawnDamage_GetDamageTakenSince::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_SequenceFinished.OnNarrativeSequenceFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_SequenceFinished_OnNarrativeSequenceFinished final
{
public:
	class UBFGNarrativeSequence*                  _pSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_SequenceFinished_OnNarrativeSequenceFinished) == 0x000008, "Wrong alignment on BFGEventTrigger_SequenceFinished_OnNarrativeSequenceFinished");
static_assert(sizeof(BFGEventTrigger_SequenceFinished_OnNarrativeSequenceFinished) == 0x000008, "Wrong size on BFGEventTrigger_SequenceFinished_OnNarrativeSequenceFinished");
static_assert(offsetof(BFGEventTrigger_SequenceFinished_OnNarrativeSequenceFinished, _pSequence) == 0x000000, "Member 'BFGEventTrigger_SequenceFinished_OnNarrativeSequenceFinished::_pSequence' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_SequenceFinished.OnSequenceFinished
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_SequenceFinished_OnSequenceFinished final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEventTrigger_SequenceFinished_OnSequenceFinished) == 0x000008, "Wrong alignment on BFGEventTrigger_SequenceFinished_OnSequenceFinished");
static_assert(sizeof(BFGEventTrigger_SequenceFinished_OnSequenceFinished) == 0x000010, "Wrong size on BFGEventTrigger_SequenceFinished_OnSequenceFinished");
static_assert(offsetof(BFGEventTrigger_SequenceFinished_OnSequenceFinished, _pActor) == 0x000000, "Member 'BFGEventTrigger_SequenceFinished_OnSequenceFinished::_pActor' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_SequenceFinished_OnSequenceFinished, _bWasCutscene) == 0x000008, "Member 'BFGEventTrigger_SequenceFinished_OnSequenceFinished::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerCharacterMovement.GetJetpackUpVelocity
// 0x000C (0x000C - 0x0000)
struct BFGActorComponent_PlayerCharacterMovement_GetJetpackUpVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerCharacterMovement_GetJetpackUpVelocity) == 0x000004, "Wrong alignment on BFGActorComponent_PlayerCharacterMovement_GetJetpackUpVelocity");
static_assert(sizeof(BFGActorComponent_PlayerCharacterMovement_GetJetpackUpVelocity) == 0x00000C, "Wrong size on BFGActorComponent_PlayerCharacterMovement_GetJetpackUpVelocity");
static_assert(offsetof(BFGActorComponent_PlayerCharacterMovement_GetJetpackUpVelocity, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PlayerCharacterMovement_GetJetpackUpVelocity::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerCharacterMovement.IsTouchingGround
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_PlayerCharacterMovement_IsTouchingGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerCharacterMovement_IsTouchingGround) == 0x000001, "Wrong alignment on BFGActorComponent_PlayerCharacterMovement_IsTouchingGround");
static_assert(sizeof(BFGActorComponent_PlayerCharacterMovement_IsTouchingGround) == 0x000001, "Wrong size on BFGActorComponent_PlayerCharacterMovement_IsTouchingGround");
static_assert(offsetof(BFGActorComponent_PlayerCharacterMovement_IsTouchingGround, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PlayerCharacterMovement_IsTouchingGround::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_ProximityGoalReached.OnProximityGoalReached
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_ProximityGoalReached_OnProximityGoalReached final
{
public:
	const class UBFGQuest_ProximityMonitor*       _pProximityMonitor;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_ProximityGoalReached_OnProximityGoalReached) == 0x000008, "Wrong alignment on BFGEventTrigger_ProximityGoalReached_OnProximityGoalReached");
static_assert(sizeof(BFGEventTrigger_ProximityGoalReached_OnProximityGoalReached) == 0x000008, "Wrong size on BFGEventTrigger_ProximityGoalReached_OnProximityGoalReached");
static_assert(offsetof(BFGEventTrigger_ProximityGoalReached_OnProximityGoalReached, _pProximityMonitor) == 0x000000, "Member 'BFGEventTrigger_ProximityGoalReached_OnProximityGoalReached::_pProximityMonitor' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerInteractions.CanInteract
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_PlayerInteractions_CanInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerInteractions_CanInteract) == 0x000001, "Wrong alignment on BFGActorComponent_PlayerInteractions_CanInteract");
static_assert(sizeof(BFGActorComponent_PlayerInteractions_CanInteract) == 0x000001, "Wrong size on BFGActorComponent_PlayerInteractions_CanInteract");
static_assert(offsetof(BFGActorComponent_PlayerInteractions_CanInteract, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PlayerInteractions_CanInteract::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerInteractions.CheckStillInteracting
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_PlayerInteractions_CheckStillInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerInteractions_CheckStillInteracting) == 0x000001, "Wrong alignment on BFGActorComponent_PlayerInteractions_CheckStillInteracting");
static_assert(sizeof(BFGActorComponent_PlayerInteractions_CheckStillInteracting) == 0x000001, "Wrong size on BFGActorComponent_PlayerInteractions_CheckStillInteracting");
static_assert(offsetof(BFGActorComponent_PlayerInteractions_CheckStillInteracting, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PlayerInteractions_CheckStillInteracting::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_StreamingLevelState.Streaming_OnStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged final
{
public:
	class UBFGStreamingLevelHandle*               _pHandle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bState;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged) == 0x000008, "Wrong alignment on BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged");
static_assert(sizeof(BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged) == 0x000010, "Wrong size on BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged");
static_assert(offsetof(BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged, _pHandle) == 0x000000, "Member 'BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged::_pHandle' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged, _bState) == 0x000008, "Member 'BFGEventTrigger_StreamingLevelState_Streaming_OnStateChanged::_bState' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementReach.FindObjectiveTargetActors
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_ElementReach_FindObjectiveTargetActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementReach_FindObjectiveTargetActors) == 0x000008, "Wrong alignment on BFGQuest_ElementReach_FindObjectiveTargetActors");
static_assert(sizeof(BFGQuest_ElementReach_FindObjectiveTargetActors) == 0x000010, "Wrong size on BFGQuest_ElementReach_FindObjectiveTargetActors");
static_assert(offsetof(BFGQuest_ElementReach_FindObjectiveTargetActors, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementReach_FindObjectiveTargetActors::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementReach.GetObjectiveTargetVariable
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_ElementReach_GetObjectiveTargetVariable final
{
public:
	class UBFGVariable*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementReach_GetObjectiveTargetVariable) == 0x000008, "Wrong alignment on BFGQuest_ElementReach_GetObjectiveTargetVariable");
static_assert(sizeof(BFGQuest_ElementReach_GetObjectiveTargetVariable) == 0x000008, "Wrong size on BFGQuest_ElementReach_GetObjectiveTargetVariable");
static_assert(offsetof(BFGQuest_ElementReach_GetObjectiveTargetVariable, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementReach_GetObjectiveTargetVariable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.OnWeaponAmmoChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PlayerWeapon_OnWeaponAmmoChanged final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_OnWeaponAmmoChanged) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeapon_OnWeaponAmmoChanged");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_OnWeaponAmmoChanged) == 0x000008, "Wrong size on BFGActorComponent_PlayerWeapon_OnWeaponAmmoChanged");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_OnWeaponAmmoChanged, _pWeapon) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_OnWeaponAmmoChanged::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.OnWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_PlayerWeapon_OnWeaponChanged final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_OnWeaponChanged) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeapon_OnWeaponChanged");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_OnWeaponChanged) == 0x000010, "Wrong size on BFGActorComponent_PlayerWeapon_OnWeaponChanged");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_OnWeaponChanged, _pWeapon) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_OnWeaponChanged::_pWeapon' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_OnWeaponChanged, _bEnabled) == 0x000008, "Member 'BFGActorComponent_PlayerWeapon_OnWeaponChanged::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.OnWeaponFireChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_PlayerWeapon_OnWeaponFireChanged final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_OnWeaponFireChanged) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeapon_OnWeaponFireChanged");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_OnWeaponFireChanged) == 0x000010, "Wrong size on BFGActorComponent_PlayerWeapon_OnWeaponFireChanged");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_OnWeaponFireChanged, _pWeapon) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_OnWeaponFireChanged::_pWeapon' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_OnWeaponFireChanged, _bEnabled) == 0x000008, "Member 'BFGActorComponent_PlayerWeapon_OnWeaponFireChanged::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.OnWeaponReloadDone
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PlayerWeapon_OnWeaponReloadDone final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_OnWeaponReloadDone) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeapon_OnWeaponReloadDone");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_OnWeaponReloadDone) == 0x000008, "Wrong size on BFGActorComponent_PlayerWeapon_OnWeaponReloadDone");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_OnWeaponReloadDone, _pWeapon) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_OnWeaponReloadDone::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.OnWeaponReloadStarted
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PlayerWeapon_OnWeaponReloadStarted final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_OnWeaponReloadStarted) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeapon_OnWeaponReloadStarted");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_OnWeaponReloadStarted) == 0x000008, "Wrong size on BFGActorComponent_PlayerWeapon_OnWeaponReloadStarted");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_OnWeaponReloadStarted, _pWeapon) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_OnWeaponReloadStarted::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.RequestEquipFirstAvailableWeapon
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_PlayerWeapon_RequestEquipFirstAvailableWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_RequestEquipFirstAvailableWeapon) == 0x000001, "Wrong alignment on BFGActorComponent_PlayerWeapon_RequestEquipFirstAvailableWeapon");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_RequestEquipFirstAvailableWeapon) == 0x000001, "Wrong size on BFGActorComponent_PlayerWeapon_RequestEquipFirstAvailableWeapon");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_RequestEquipFirstAvailableWeapon, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_RequestEquipFirstAvailableWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.RequestNextWeaponEquip
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_PlayerWeapon_RequestNextWeaponEquip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_RequestNextWeaponEquip) == 0x000001, "Wrong alignment on BFGActorComponent_PlayerWeapon_RequestNextWeaponEquip");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_RequestNextWeaponEquip) == 0x000001, "Wrong size on BFGActorComponent_PlayerWeapon_RequestNextWeaponEquip");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_RequestNextWeaponEquip, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_RequestNextWeaponEquip::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.RequestPreviousWeaponEquip
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_PlayerWeapon_RequestPreviousWeaponEquip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_RequestPreviousWeaponEquip) == 0x000001, "Wrong alignment on BFGActorComponent_PlayerWeapon_RequestPreviousWeaponEquip");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_RequestPreviousWeaponEquip) == 0x000001, "Wrong size on BFGActorComponent_PlayerWeapon_RequestPreviousWeaponEquip");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_RequestPreviousWeaponEquip, ReturnValue) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_RequestPreviousWeaponEquip::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.RequestWeaponEquip
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_PlayerWeapon_RequestWeaponEquip final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_RequestWeaponEquip) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeapon_RequestWeaponEquip");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_RequestWeaponEquip) == 0x000010, "Wrong size on BFGActorComponent_PlayerWeapon_RequestWeaponEquip");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_RequestWeaponEquip, _pWeapon) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_RequestWeaponEquip::_pWeapon' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_RequestWeaponEquip, ReturnValue) == 0x000008, "Member 'BFGActorComponent_PlayerWeapon_RequestWeaponEquip::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeapon.RequestWeaponEquipByClass
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass final
{
public:
	TSubclassOf<class ABFGWeapon>                 _rClass;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass");
static_assert(sizeof(BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass) == 0x000010, "Wrong size on BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass, _rClass) == 0x000000, "Member 'BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass::_rClass' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass, ReturnValue) == 0x000008, "Member 'BFGActorComponent_PlayerWeapon_RequestWeaponEquipByClass::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGActorComponent_PlayerWeaponAndAbilitySelector.ActionBool__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_PlayerWeaponAndAbilitySelector_ActionBool__DelegateSignature final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeaponAndAbilitySelector_ActionBool__DelegateSignature) == 0x000001, "Wrong alignment on BFGActorComponent_PlayerWeaponAndAbilitySelector_ActionBool__DelegateSignature");
static_assert(sizeof(BFGActorComponent_PlayerWeaponAndAbilitySelector_ActionBool__DelegateSignature) == 0x000001, "Wrong size on BFGActorComponent_PlayerWeaponAndAbilitySelector_ActionBool__DelegateSignature");
static_assert(offsetof(BFGActorComponent_PlayerWeaponAndAbilitySelector_ActionBool__DelegateSignature, _bValue) == 0x000000, "Member 'BFGActorComponent_PlayerWeaponAndAbilitySelector_ActionBool__DelegateSignature::_bValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeaponAndAbilitySelector.OnActorIsDeadStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged");
static_assert(sizeof(BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged) == 0x000010, "Wrong size on BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged");
static_assert(offsetof(BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged, _pActor) == 0x000000, "Member 'BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged, _pStat) == 0x000008, "Member 'BFGActorComponent_PlayerWeaponAndAbilitySelector_OnActorIsDeadStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_PlayerWeaponAndAbilitySelector.OnSelectionMenuClosed
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_PlayerWeaponAndAbilitySelector_OnSelectionMenuClosed final
{
public:
	class UBFGRadialMenuUserWidget*               _pMenu;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_PlayerWeaponAndAbilitySelector_OnSelectionMenuClosed) == 0x000008, "Wrong alignment on BFGActorComponent_PlayerWeaponAndAbilitySelector_OnSelectionMenuClosed");
static_assert(sizeof(BFGActorComponent_PlayerWeaponAndAbilitySelector_OnSelectionMenuClosed) == 0x000008, "Wrong size on BFGActorComponent_PlayerWeaponAndAbilitySelector_OnSelectionMenuClosed");
static_assert(offsetof(BFGActorComponent_PlayerWeaponAndAbilitySelector_OnSelectionMenuClosed, _pMenu) == 0x000000, "Member 'BFGActorComponent_PlayerWeaponAndAbilitySelector_OnSelectionMenuClosed::_pMenu' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_SpawnManagerEveryoneDead.OnLoaded
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_SpawnManagerEveryoneDead_OnLoaded final
{
public:
	class ABFGMissionSpawnManager*                _pSpawnManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_SpawnManagerEveryoneDead_OnLoaded) == 0x000008, "Wrong alignment on BFGEventTrigger_SpawnManagerEveryoneDead_OnLoaded");
static_assert(sizeof(BFGEventTrigger_SpawnManagerEveryoneDead_OnLoaded) == 0x000008, "Wrong size on BFGEventTrigger_SpawnManagerEveryoneDead_OnLoaded");
static_assert(offsetof(BFGEventTrigger_SpawnManagerEveryoneDead_OnLoaded, _pSpawnManager) == 0x000000, "Member 'BFGEventTrigger_SpawnManagerEveryoneDead_OnLoaded::_pSpawnManager' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ProxyChildActor.Actor_OnDestroy
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_ProxyChildActor_Actor_OnDestroy final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ProxyChildActor_Actor_OnDestroy) == 0x000008, "Wrong alignment on BFGActorComponent_ProxyChildActor_Actor_OnDestroy");
static_assert(sizeof(BFGActorComponent_ProxyChildActor_Actor_OnDestroy) == 0x000008, "Wrong size on BFGActorComponent_ProxyChildActor_Actor_OnDestroy");
static_assert(offsetof(BFGActorComponent_ProxyChildActor_Actor_OnDestroy, _pActor) == 0x000000, "Member 'BFGActorComponent_ProxyChildActor_Actor_OnDestroy::_pActor' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ProxyChildActor.Agent_OnDestroy
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_ProxyChildActor_Agent_OnDestroy final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ProxyChildActor_Agent_OnDestroy) == 0x000008, "Wrong alignment on BFGActorComponent_ProxyChildActor_Agent_OnDestroy");
static_assert(sizeof(BFGActorComponent_ProxyChildActor_Agent_OnDestroy) == 0x000008, "Wrong size on BFGActorComponent_ProxyChildActor_Agent_OnDestroy");
static_assert(offsetof(BFGActorComponent_ProxyChildActor_Agent_OnDestroy, _pAgent) == 0x000000, "Member 'BFGActorComponent_ProxyChildActor_Agent_OnDestroy::_pAgent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ProxyChildActor.OnAgentChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGActorComponent_ProxyChildActor_OnAgentChanged final
{
public:
	class UBFGNetworkPathAgentComponent*          _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGNetworkPathAgentComponent_AgentChangeReason _reason;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_ProxyChildActor_OnAgentChanged) == 0x000008, "Wrong alignment on BFGActorComponent_ProxyChildActor_OnAgentChanged");
static_assert(sizeof(BFGActorComponent_ProxyChildActor_OnAgentChanged) == 0x000018, "Wrong size on BFGActorComponent_ProxyChildActor_OnAgentChanged");
static_assert(offsetof(BFGActorComponent_ProxyChildActor_OnAgentChanged, _pComponent) == 0x000000, "Member 'BFGActorComponent_ProxyChildActor_OnAgentChanged::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_ProxyChildActor_OnAgentChanged, _pAgent) == 0x000008, "Member 'BFGActorComponent_ProxyChildActor_OnAgentChanged::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_ProxyChildActor_OnAgentChanged, _reason) == 0x000010, "Member 'BFGActorComponent_ProxyChildActor_OnAgentChanged::_reason' has a wrong offset!");

// Function BFGCore.BFGActorComponent_RadarObject_ExactRadius.OnMarkerEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_RadarObject_ExactRadius_OnMarkerEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_RadarObject_ExactRadius_OnMarkerEnabled) == 0x000001, "Wrong alignment on BFGActorComponent_RadarObject_ExactRadius_OnMarkerEnabled");
static_assert(sizeof(BFGActorComponent_RadarObject_ExactRadius_OnMarkerEnabled) == 0x000001, "Wrong size on BFGActorComponent_RadarObject_ExactRadius_OnMarkerEnabled");
static_assert(offsetof(BFGActorComponent_RadarObject_ExactRadius_OnMarkerEnabled, _bEnabled) == 0x000000, "Member 'BFGActorComponent_RadarObject_ExactRadius_OnMarkerEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGQuest_ProximityMonitor.OnIsActiveChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_ProximityMonitor_OnIsActiveChanged final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _oldValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _newValue;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ProximityMonitor_OnIsActiveChanged) == 0x000008, "Wrong alignment on BFGQuest_ProximityMonitor_OnIsActiveChanged");
static_assert(sizeof(BFGQuest_ProximityMonitor_OnIsActiveChanged) == 0x000018, "Wrong size on BFGQuest_ProximityMonitor_OnIsActiveChanged");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnIsActiveChanged, _pVarMirror) == 0x000000, "Member 'BFGQuest_ProximityMonitor_OnIsActiveChanged::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnIsActiveChanged, _pVariable) == 0x000008, "Member 'BFGQuest_ProximityMonitor_OnIsActiveChanged::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnIsActiveChanged, _oldValue) == 0x000010, "Member 'BFGQuest_ProximityMonitor_OnIsActiveChanged::_oldValue' has a wrong offset!");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnIsActiveChanged, _newValue) == 0x000014, "Member 'BFGQuest_ProximityMonitor_OnIsActiveChanged::_newValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ProximityMonitor.OnSourceActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_ProximityMonitor_OnSourceActorDestroyed final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ProximityMonitor_OnSourceActorDestroyed) == 0x000008, "Wrong alignment on BFGQuest_ProximityMonitor_OnSourceActorDestroyed");
static_assert(sizeof(BFGQuest_ProximityMonitor_OnSourceActorDestroyed) == 0x000008, "Wrong size on BFGQuest_ProximityMonitor_OnSourceActorDestroyed");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnSourceActorDestroyed, _pActor) == 0x000000, "Member 'BFGQuest_ProximityMonitor_OnSourceActorDestroyed::_pActor' has a wrong offset!");

// Function BFGCore.BFGQuest_ProximityMonitor.OnSourceAgentChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_ProximityMonitor_OnSourceAgentChanged final
{
public:
	class UBFGNetworkPathAgentComponent*          _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGNetworkPathAgentComponent_AgentChangeReason _reason;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGQuest_ProximityMonitor_OnSourceAgentChanged) == 0x000008, "Wrong alignment on BFGQuest_ProximityMonitor_OnSourceAgentChanged");
static_assert(sizeof(BFGQuest_ProximityMonitor_OnSourceAgentChanged) == 0x000018, "Wrong size on BFGQuest_ProximityMonitor_OnSourceAgentChanged");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnSourceAgentChanged, _pComponent) == 0x000000, "Member 'BFGQuest_ProximityMonitor_OnSourceAgentChanged::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnSourceAgentChanged, _pAgent) == 0x000008, "Member 'BFGQuest_ProximityMonitor_OnSourceAgentChanged::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnSourceAgentChanged, _reason) == 0x000010, "Member 'BFGQuest_ProximityMonitor_OnSourceAgentChanged::_reason' has a wrong offset!");

// Function BFGCore.BFGQuest_ProximityMonitor.OnSourceAgentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_ProximityMonitor_OnSourceAgentDestroyed final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ProximityMonitor_OnSourceAgentDestroyed) == 0x000008, "Wrong alignment on BFGQuest_ProximityMonitor_OnSourceAgentDestroyed");
static_assert(sizeof(BFGQuest_ProximityMonitor_OnSourceAgentDestroyed) == 0x000008, "Wrong size on BFGQuest_ProximityMonitor_OnSourceAgentDestroyed");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnSourceAgentDestroyed, _pAgent) == 0x000000, "Member 'BFGQuest_ProximityMonitor_OnSourceAgentDestroyed::_pAgent' has a wrong offset!");

// Function BFGCore.BFGQuest_ProximityMonitor.OnTargetActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_ProximityMonitor_OnTargetActorDestroyed final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ProximityMonitor_OnTargetActorDestroyed) == 0x000008, "Wrong alignment on BFGQuest_ProximityMonitor_OnTargetActorDestroyed");
static_assert(sizeof(BFGQuest_ProximityMonitor_OnTargetActorDestroyed) == 0x000008, "Wrong size on BFGQuest_ProximityMonitor_OnTargetActorDestroyed");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnTargetActorDestroyed, _pActor) == 0x000000, "Member 'BFGQuest_ProximityMonitor_OnTargetActorDestroyed::_pActor' has a wrong offset!");

// Function BFGCore.BFGQuest_ProximityMonitor.OnTargetAgentChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_ProximityMonitor_OnTargetAgentChanged final
{
public:
	class UBFGNetworkPathAgentComponent*          _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGNetworkPathAgentComponent_AgentChangeReason _reason;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGQuest_ProximityMonitor_OnTargetAgentChanged) == 0x000008, "Wrong alignment on BFGQuest_ProximityMonitor_OnTargetAgentChanged");
static_assert(sizeof(BFGQuest_ProximityMonitor_OnTargetAgentChanged) == 0x000018, "Wrong size on BFGQuest_ProximityMonitor_OnTargetAgentChanged");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnTargetAgentChanged, _pComponent) == 0x000000, "Member 'BFGQuest_ProximityMonitor_OnTargetAgentChanged::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnTargetAgentChanged, _pAgent) == 0x000008, "Member 'BFGQuest_ProximityMonitor_OnTargetAgentChanged::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnTargetAgentChanged, _reason) == 0x000010, "Member 'BFGQuest_ProximityMonitor_OnTargetAgentChanged::_reason' has a wrong offset!");

// Function BFGCore.BFGQuest_ProximityMonitor.OnTargetAgentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_ProximityMonitor_OnTargetAgentDestroyed final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ProximityMonitor_OnTargetAgentDestroyed) == 0x000008, "Wrong alignment on BFGQuest_ProximityMonitor_OnTargetAgentDestroyed");
static_assert(sizeof(BFGQuest_ProximityMonitor_OnTargetAgentDestroyed) == 0x000008, "Wrong size on BFGQuest_ProximityMonitor_OnTargetAgentDestroyed");
static_assert(offsetof(BFGQuest_ProximityMonitor_OnTargetAgentDestroyed, _pAgent) == 0x000000, "Member 'BFGQuest_ProximityMonitor_OnTargetAgentDestroyed::_pAgent' has a wrong offset!");

// Function BFGCore.BFGActorComponent_RadarObject_NPC.OnIsDeadStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged) == 0x000008, "Wrong alignment on BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged");
static_assert(sizeof(BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged) == 0x000010, "Wrong size on BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged");
static_assert(offsetof(BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged, _pActor) == 0x000000, "Member 'BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged, _pStat) == 0x000008, "Member 'BFGActorComponent_RadarObject_NPC_OnIsDeadStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_ActorComponentWidget.GetWidgetComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_AR_ActorComponentWidget_GetWidgetComponent final
{
public:
	class UBFGActorComponent_WidgetComponent*     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_ActorComponentWidget_GetWidgetComponent) == 0x000008, "Wrong alignment on BFGWidget_AR_ActorComponentWidget_GetWidgetComponent");
static_assert(sizeof(BFGWidget_AR_ActorComponentWidget_GetWidgetComponent) == 0x000008, "Wrong size on BFGWidget_AR_ActorComponentWidget_GetWidgetComponent");
static_assert(offsetof(BFGWidget_AR_ActorComponentWidget_GetWidgetComponent, ReturnValue) == 0x000000, "Member 'BFGWidget_AR_ActorComponentWidget_GetWidgetComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_ActorComponentWidget.SetWidgetComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_AR_ActorComponentWidget_SetWidgetComponent final
{
public:
	class UBFGActorComponent_WidgetComponent*     _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_ActorComponentWidget_SetWidgetComponent) == 0x000008, "Wrong alignment on BFGWidget_AR_ActorComponentWidget_SetWidgetComponent");
static_assert(sizeof(BFGWidget_AR_ActorComponentWidget_SetWidgetComponent) == 0x000008, "Wrong size on BFGWidget_AR_ActorComponentWidget_SetWidgetComponent");
static_assert(offsetof(BFGWidget_AR_ActorComponentWidget_SetWidgetComponent, _pComponent) == 0x000000, "Member 'BFGWidget_AR_ActorComponentWidget_SetWidgetComponent::_pComponent' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_ActorComponentWidget.GetBFGGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_AR_ActorComponentWidget_GetBFGGameInstance final
{
public:
	class UBFGGameInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_ActorComponentWidget_GetBFGGameInstance) == 0x000008, "Wrong alignment on BFGWidget_AR_ActorComponentWidget_GetBFGGameInstance");
static_assert(sizeof(BFGWidget_AR_ActorComponentWidget_GetBFGGameInstance) == 0x000008, "Wrong size on BFGWidget_AR_ActorComponentWidget_GetBFGGameInstance");
static_assert(offsetof(BFGWidget_AR_ActorComponentWidget_GetBFGGameInstance, ReturnValue) == 0x000000, "Member 'BFGWidget_AR_ActorComponentWidget_GetBFGGameInstance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_RadarObject_QuestMarker.OnMarkerEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_RadarObject_QuestMarker_OnMarkerEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_RadarObject_QuestMarker_OnMarkerEnabled) == 0x000001, "Wrong alignment on BFGActorComponent_RadarObject_QuestMarker_OnMarkerEnabled");
static_assert(sizeof(BFGActorComponent_RadarObject_QuestMarker_OnMarkerEnabled) == 0x000001, "Wrong size on BFGActorComponent_RadarObject_QuestMarker_OnMarkerEnabled");
static_assert(offsetof(BFGActorComponent_RadarObject_QuestMarker_OnMarkerEnabled, _bEnabled) == 0x000000, "Member 'BFGActorComponent_RadarObject_QuestMarker_OnMarkerEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Quest_Abort.GetActionName_QuestAbort
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Quest_Abort_GetActionName_QuestAbort final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Quest_Abort_GetActionName_QuestAbort) == 0x000004, "Wrong alignment on BFGVariableAction_Quest_Abort_GetActionName_QuestAbort");
static_assert(sizeof(BFGVariableAction_Quest_Abort_GetActionName_QuestAbort) == 0x000008, "Wrong size on BFGVariableAction_Quest_Abort_GetActionName_QuestAbort");
static_assert(offsetof(BFGVariableAction_Quest_Abort_GetActionName_QuestAbort, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Quest_Abort_GetActionName_QuestAbort::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ReinforcementManager.ActivateCurrentPhaseReinforcementSpawners
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_ReinforcementManager_ActivateCurrentPhaseReinforcementSpawners final
{
public:
	int32                                         _iCurrentBossPhase;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ReinforcementManager_ActivateCurrentPhaseReinforcementSpawners) == 0x000004, "Wrong alignment on BFGActorComponent_ReinforcementManager_ActivateCurrentPhaseReinforcementSpawners");
static_assert(sizeof(BFGActorComponent_ReinforcementManager_ActivateCurrentPhaseReinforcementSpawners) == 0x000004, "Wrong size on BFGActorComponent_ReinforcementManager_ActivateCurrentPhaseReinforcementSpawners");
static_assert(offsetof(BFGActorComponent_ReinforcementManager_ActivateCurrentPhaseReinforcementSpawners, _iCurrentBossPhase) == 0x000000, "Member 'BFGActorComponent_ReinforcementManager_ActivateCurrentPhaseReinforcementSpawners::_iCurrentBossPhase' has a wrong offset!");

// Function BFGCore.BFGActorComponent_ReinforcementManager.RemoveReinforcementThreatValue
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_ReinforcementManager_RemoveReinforcementThreatValue final
{
public:
	float                                         _fThreatValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_ReinforcementManager_RemoveReinforcementThreatValue) == 0x000004, "Wrong alignment on BFGActorComponent_ReinforcementManager_RemoveReinforcementThreatValue");
static_assert(sizeof(BFGActorComponent_ReinforcementManager_RemoveReinforcementThreatValue) == 0x000004, "Wrong size on BFGActorComponent_ReinforcementManager_RemoveReinforcementThreatValue");
static_assert(offsetof(BFGActorComponent_ReinforcementManager_RemoveReinforcementThreatValue, _fThreatValue) == 0x000000, "Member 'BFGActorComponent_ReinforcementManager_RemoveReinforcementThreatValue::_fThreatValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_AITaskState_Start.GetActionName_AITaskState_Start
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_AITaskState_Start_GetActionName_AITaskState_Start final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_AITaskState_Start_GetActionName_AITaskState_Start) == 0x000004, "Wrong alignment on BFGVariableAction_AITaskState_Start_GetActionName_AITaskState_Start");
static_assert(sizeof(BFGVariableAction_AITaskState_Start_GetActionName_AITaskState_Start) == 0x000008, "Wrong size on BFGVariableAction_AITaskState_Start_GetActionName_AITaskState_Start");
static_assert(offsetof(BFGVariableAction_AITaskState_Start_GetActionName_AITaskState_Start, ReturnValue) == 0x000000, "Member 'BFGVariableAction_AITaskState_Start_GetActionName_AITaskState_Start::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_SpawnManagerStats.GetCurrentWaveStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_SpawnManagerStats_GetCurrentWaveStat final
{
public:
	class UBFGActorStat_uint8*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_SpawnManagerStats_GetCurrentWaveStat) == 0x000008, "Wrong alignment on BFGActorComponent_SpawnManagerStats_GetCurrentWaveStat");
static_assert(sizeof(BFGActorComponent_SpawnManagerStats_GetCurrentWaveStat) == 0x000008, "Wrong size on BFGActorComponent_SpawnManagerStats_GetCurrentWaveStat");
static_assert(offsetof(BFGActorComponent_SpawnManagerStats_GetCurrentWaveStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_SpawnManagerStats_GetCurrentWaveStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_SpawnManagerStats.GetIsActiveStat
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_SpawnManagerStats_GetIsActiveStat final
{
public:
	class UBFGActorStat_Bool*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_SpawnManagerStats_GetIsActiveStat) == 0x000008, "Wrong alignment on BFGActorComponent_SpawnManagerStats_GetIsActiveStat");
static_assert(sizeof(BFGActorComponent_SpawnManagerStats_GetIsActiveStat) == 0x000008, "Wrong size on BFGActorComponent_SpawnManagerStats_GetIsActiveStat");
static_assert(offsetof(BFGActorComponent_SpawnManagerStats_GetIsActiveStat, ReturnValue) == 0x000000, "Member 'BFGActorComponent_SpawnManagerStats_GetIsActiveStat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWheeledVehicle.AddCarPlate
// 0x0020 (0x0020 - 0x0000)
struct BFGWheeledVehicle_AddCarPlate final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextRenderComponent*                   CenterText;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextRenderComponent*                   TopText;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextRenderComponent*                   BottomText;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWheeledVehicle_AddCarPlate) == 0x000008, "Wrong alignment on BFGWheeledVehicle_AddCarPlate");
static_assert(sizeof(BFGWheeledVehicle_AddCarPlate) == 0x000020, "Wrong size on BFGWheeledVehicle_AddCarPlate");
static_assert(offsetof(BFGWheeledVehicle_AddCarPlate, SocketName) == 0x000000, "Member 'BFGWheeledVehicle_AddCarPlate::SocketName' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_AddCarPlate, CenterText) == 0x000008, "Member 'BFGWheeledVehicle_AddCarPlate::CenterText' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_AddCarPlate, TopText) == 0x000010, "Member 'BFGWheeledVehicle_AddCarPlate::TopText' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_AddCarPlate, BottomText) == 0x000018, "Member 'BFGWheeledVehicle_AddCarPlate::BottomText' has a wrong offset!");

// Function BFGCore.BFGWheeledVehicle.HonkAtObstacleInFront
// 0x0004 (0x0004 - 0x0000)
struct BFGWheeledVehicle_HonkAtObstacleInFront final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWheeledVehicle_HonkAtObstacleInFront) == 0x000004, "Wrong alignment on BFGWheeledVehicle_HonkAtObstacleInFront");
static_assert(sizeof(BFGWheeledVehicle_HonkAtObstacleInFront) == 0x000004, "Wrong size on BFGWheeledVehicle_HonkAtObstacleInFront");
static_assert(offsetof(BFGWheeledVehicle_HonkAtObstacleInFront, ReturnValue) == 0x000000, "Member 'BFGWheeledVehicle_HonkAtObstacleInFront::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWheeledVehicle.OnBrakeBoxBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct BFGWheeledVehicle_OnBrakeBoxBeginOverlap final
{
public:
	class UPrimitiveComponent*                    _pOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _pOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFromSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             _sweepResult;                                      // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWheeledVehicle_OnBrakeBoxBeginOverlap) == 0x000008, "Wrong alignment on BFGWheeledVehicle_OnBrakeBoxBeginOverlap");
static_assert(sizeof(BFGWheeledVehicle_OnBrakeBoxBeginOverlap) == 0x0000A8, "Wrong size on BFGWheeledVehicle_OnBrakeBoxBeginOverlap");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxBeginOverlap, _pOverlappedComponent) == 0x000000, "Member 'BFGWheeledVehicle_OnBrakeBoxBeginOverlap::_pOverlappedComponent' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxBeginOverlap, _pOtherActor) == 0x000008, "Member 'BFGWheeledVehicle_OnBrakeBoxBeginOverlap::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxBeginOverlap, _pOtherComp) == 0x000010, "Member 'BFGWheeledVehicle_OnBrakeBoxBeginOverlap::_pOtherComp' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxBeginOverlap, _iOtherBodyIndex) == 0x000018, "Member 'BFGWheeledVehicle_OnBrakeBoxBeginOverlap::_iOtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxBeginOverlap, _bFromSweep) == 0x00001C, "Member 'BFGWheeledVehicle_OnBrakeBoxBeginOverlap::_bFromSweep' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxBeginOverlap, _sweepResult) == 0x000020, "Member 'BFGWheeledVehicle_OnBrakeBoxBeginOverlap::_sweepResult' has a wrong offset!");

// Function BFGCore.BFGWheeledVehicle.OnBrakeBoxEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BFGWheeledVehicle_OnBrakeBoxEndOverlap final
{
public:
	class UPrimitiveComponent*                    _pOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _pOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWheeledVehicle_OnBrakeBoxEndOverlap) == 0x000008, "Wrong alignment on BFGWheeledVehicle_OnBrakeBoxEndOverlap");
static_assert(sizeof(BFGWheeledVehicle_OnBrakeBoxEndOverlap) == 0x000020, "Wrong size on BFGWheeledVehicle_OnBrakeBoxEndOverlap");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxEndOverlap, _pOverlappedComponent) == 0x000000, "Member 'BFGWheeledVehicle_OnBrakeBoxEndOverlap::_pOverlappedComponent' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxEndOverlap, _pOtherActor) == 0x000008, "Member 'BFGWheeledVehicle_OnBrakeBoxEndOverlap::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxEndOverlap, _pOtherComp) == 0x000010, "Member 'BFGWheeledVehicle_OnBrakeBoxEndOverlap::_pOtherComp' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_OnBrakeBoxEndOverlap, _iOtherBodyIndex) == 0x000018, "Member 'BFGWheeledVehicle_OnBrakeBoxEndOverlap::_iOtherBodyIndex' has a wrong offset!");

// Function BFGCore.BFGWheeledVehicle.SetDoorOpen
// 0x0008 (0x0008 - 0x0000)
struct BFGWheeledVehicle_SetDoorOpen final
{
public:
	int32                                         IDoorIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpen;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWheeledVehicle_SetDoorOpen) == 0x000004, "Wrong alignment on BFGWheeledVehicle_SetDoorOpen");
static_assert(sizeof(BFGWheeledVehicle_SetDoorOpen) == 0x000008, "Wrong size on BFGWheeledVehicle_SetDoorOpen");
static_assert(offsetof(BFGWheeledVehicle_SetDoorOpen, IDoorIndex) == 0x000000, "Member 'BFGWheeledVehicle_SetDoorOpen::IDoorIndex' has a wrong offset!");
static_assert(offsetof(BFGWheeledVehicle_SetDoorOpen, bOpen) == 0x000004, "Member 'BFGWheeledVehicle_SetDoorOpen::bOpen' has a wrong offset!");

// Function BFGCore.BFGWheeledVehicleTank.SetTrackUpdateFrequence
// 0x0004 (0x0004 - 0x0000)
struct BFGWheeledVehicleTank_SetTrackUpdateFrequence final
{
public:
	float                                         _fNewTFrequence;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWheeledVehicleTank_SetTrackUpdateFrequence) == 0x000004, "Wrong alignment on BFGWheeledVehicleTank_SetTrackUpdateFrequence");
static_assert(sizeof(BFGWheeledVehicleTank_SetTrackUpdateFrequence) == 0x000004, "Wrong size on BFGWheeledVehicleTank_SetTrackUpdateFrequence");
static_assert(offsetof(BFGWheeledVehicleTank_SetTrackUpdateFrequence, _fNewTFrequence) == 0x000000, "Member 'BFGWheeledVehicleTank_SetTrackUpdateFrequence::_fNewTFrequence' has a wrong offset!");

// Function BFGCore.BFGActorComponent_TankTrack.SetTFrequence
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_TankTrack_SetTFrequence final
{
public:
	float                                         _fNewTFrequence;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_TankTrack_SetTFrequence) == 0x000004, "Wrong alignment on BFGActorComponent_TankTrack_SetTFrequence");
static_assert(sizeof(BFGActorComponent_TankTrack_SetTFrequence) == 0x000004, "Wrong size on BFGActorComponent_TankTrack_SetTFrequence");
static_assert(offsetof(BFGActorComponent_TankTrack_SetTFrequence, _fNewTFrequence) == 0x000000, "Member 'BFGActorComponent_TankTrack_SetTFrequence::_fNewTFrequence' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_FuronHandbookChapter.AddPageToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_FuronHandbookChapter_AddPageToLayout final
{
public:
	class UBFGWidget_TutorialPage*                _pPage;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_FuronHandbookChapter_AddPageToLayout) == 0x000008, "Wrong alignment on BFGWidget_Archive_FuronHandbookChapter_AddPageToLayout");
static_assert(sizeof(BFGWidget_Archive_FuronHandbookChapter_AddPageToLayout) == 0x000008, "Wrong size on BFGWidget_Archive_FuronHandbookChapter_AddPageToLayout");
static_assert(offsetof(BFGWidget_Archive_FuronHandbookChapter_AddPageToLayout, _pPage) == 0x000000, "Member 'BFGWidget_Archive_FuronHandbookChapter_AddPageToLayout::_pPage' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_FuronHandbookChapter.Scroll
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Archive_FuronHandbookChapter_Scroll final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_FuronHandbookChapter_Scroll) == 0x000004, "Wrong alignment on BFGWidget_Archive_FuronHandbookChapter_Scroll");
static_assert(sizeof(BFGWidget_Archive_FuronHandbookChapter_Scroll) == 0x000004, "Wrong size on BFGWidget_Archive_FuronHandbookChapter_Scroll");
static_assert(offsetof(BFGWidget_Archive_FuronHandbookChapter_Scroll, _fValue) == 0x000000, "Member 'BFGWidget_Archive_FuronHandbookChapter_Scroll::_fValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_FuronHandbookChapter.ScrolltoWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_FuronHandbookChapter_ScrolltoWidget final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_FuronHandbookChapter_ScrolltoWidget) == 0x000008, "Wrong alignment on BFGWidget_Archive_FuronHandbookChapter_ScrolltoWidget");
static_assert(sizeof(BFGWidget_Archive_FuronHandbookChapter_ScrolltoWidget) == 0x000008, "Wrong size on BFGWidget_Archive_FuronHandbookChapter_ScrolltoWidget");
static_assert(offsetof(BFGWidget_Archive_FuronHandbookChapter_ScrolltoWidget, _pOption) == 0x000000, "Member 'BFGWidget_Archive_FuronHandbookChapter_ScrolltoWidget::_pOption' has a wrong offset!");

// Function BFGCore.BFGActorComponent_TargetSystem.GetActorTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct BFGActorComponent_TargetSystem_GetActorTargetLocation final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorComponent_TargetSystem_GetActorTargetLocation) == 0x000008, "Wrong alignment on BFGActorComponent_TargetSystem_GetActorTargetLocation");
static_assert(sizeof(BFGActorComponent_TargetSystem_GetActorTargetLocation) == 0x000020, "Wrong size on BFGActorComponent_TargetSystem_GetActorTargetLocation");
static_assert(offsetof(BFGActorComponent_TargetSystem_GetActorTargetLocation, _pActor) == 0x000000, "Member 'BFGActorComponent_TargetSystem_GetActorTargetLocation::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_TargetSystem_GetActorTargetLocation, BoneName) == 0x000008, "Member 'BFGActorComponent_TargetSystem_GetActorTargetLocation::BoneName' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_TargetSystem_GetActorTargetLocation, ReturnValue) == 0x000010, "Member 'BFGActorComponent_TargetSystem_GetActorTargetLocation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_Timer.GetTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_Timer_GetTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_Timer_GetTimeLeft) == 0x000004, "Wrong alignment on BFGActorComponent_Timer_GetTimeLeft");
static_assert(sizeof(BFGActorComponent_Timer_GetTimeLeft) == 0x000004, "Wrong size on BFGActorComponent_Timer_GetTimeLeft");
static_assert(offsetof(BFGActorComponent_Timer_GetTimeLeft, ReturnValue) == 0x000000, "Member 'BFGActorComponent_Timer_GetTimeLeft::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetComponent.GetCurrentActor
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_WidgetComponent_GetCurrentActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetComponent_GetCurrentActor) == 0x000008, "Wrong alignment on BFGActorComponent_WidgetComponent_GetCurrentActor");
static_assert(sizeof(BFGActorComponent_WidgetComponent_GetCurrentActor) == 0x000008, "Wrong size on BFGActorComponent_WidgetComponent_GetCurrentActor");
static_assert(offsetof(BFGActorComponent_WidgetComponent_GetCurrentActor, ReturnValue) == 0x000000, "Member 'BFGActorComponent_WidgetComponent_GetCurrentActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetComponent.GetWidgetfromPool
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_WidgetComponent_GetWidgetfromPool final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetComponent_GetWidgetfromPool) == 0x000008, "Wrong alignment on BFGActorComponent_WidgetComponent_GetWidgetfromPool");
static_assert(sizeof(BFGActorComponent_WidgetComponent_GetWidgetfromPool) == 0x000008, "Wrong size on BFGActorComponent_WidgetComponent_GetWidgetfromPool");
static_assert(offsetof(BFGActorComponent_WidgetComponent_GetWidgetfromPool, ReturnValue) == 0x000000, "Member 'BFGActorComponent_WidgetComponent_GetWidgetfromPool::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetComponent.SetEnableMode
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_WidgetComponent_SetEnableMode final
{
public:
	EBFGWidgetComponentEnableMode                 _eMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetComponent_SetEnableMode) == 0x000001, "Wrong alignment on BFGActorComponent_WidgetComponent_SetEnableMode");
static_assert(sizeof(BFGActorComponent_WidgetComponent_SetEnableMode) == 0x000001, "Wrong size on BFGActorComponent_WidgetComponent_SetEnableMode");
static_assert(offsetof(BFGActorComponent_WidgetComponent_SetEnableMode, _eMode) == 0x000000, "Member 'BFGActorComponent_WidgetComponent_SetEnableMode::_eMode' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetComponent.SetMaxDistanceFromPlayer
// 0x0004 (0x0004 - 0x0000)
struct BFGActorComponent_WidgetComponent_SetMaxDistanceFromPlayer final
{
public:
	float                                         _fMaxDistance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetComponent_SetMaxDistanceFromPlayer) == 0x000004, "Wrong alignment on BFGActorComponent_WidgetComponent_SetMaxDistanceFromPlayer");
static_assert(sizeof(BFGActorComponent_WidgetComponent_SetMaxDistanceFromPlayer) == 0x000004, "Wrong size on BFGActorComponent_WidgetComponent_SetMaxDistanceFromPlayer");
static_assert(offsetof(BFGActorComponent_WidgetComponent_SetMaxDistanceFromPlayer, _fMaxDistance) == 0x000000, "Member 'BFGActorComponent_WidgetComponent_SetMaxDistanceFromPlayer::_fMaxDistance' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetComponent.GetAttachedActor
// 0x0008 (0x0008 - 0x0000)
struct BFGActorComponent_WidgetComponent_GetAttachedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetComponent_GetAttachedActor) == 0x000008, "Wrong alignment on BFGActorComponent_WidgetComponent_GetAttachedActor");
static_assert(sizeof(BFGActorComponent_WidgetComponent_GetAttachedActor) == 0x000008, "Wrong size on BFGActorComponent_WidgetComponent_GetAttachedActor");
static_assert(offsetof(BFGActorComponent_WidgetComponent_GetAttachedActor, ReturnValue) == 0x000000, "Member 'BFGActorComponent_WidgetComponent_GetAttachedActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetComponent.IsWidgetInitialized
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_WidgetComponent_IsWidgetInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetComponent_IsWidgetInitialized) == 0x000001, "Wrong alignment on BFGActorComponent_WidgetComponent_IsWidgetInitialized");
static_assert(sizeof(BFGActorComponent_WidgetComponent_IsWidgetInitialized) == 0x000001, "Wrong size on BFGActorComponent_WidgetComponent_IsWidgetInitialized");
static_assert(offsetof(BFGActorComponent_WidgetComponent_IsWidgetInitialized, ReturnValue) == 0x000000, "Member 'BFGActorComponent_WidgetComponent_IsWidgetInitialized::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetComponent_Health.OnDeadStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pBoolStat;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged) == 0x000008, "Wrong alignment on BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged");
static_assert(sizeof(BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged) == 0x000010, "Wrong size on BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged");
static_assert(offsetof(BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged, _pActor) == 0x000000, "Member 'BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged, _pBoolStat) == 0x000008, "Member 'BFGActorComponent_WidgetComponent_Health_OnDeadStatChanged::_pBoolStat' has a wrong offset!");

// Function BFGCore.BFGVariableAction_MissionGroup_Finish.GetActionName_MissionGroupFinish
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_MissionGroup_Finish_GetActionName_MissionGroupFinish final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_MissionGroup_Finish_GetActionName_MissionGroupFinish) == 0x000004, "Wrong alignment on BFGVariableAction_MissionGroup_Finish_GetActionName_MissionGroupFinish");
static_assert(sizeof(BFGVariableAction_MissionGroup_Finish_GetActionName_MissionGroupFinish) == 0x000008, "Wrong size on BFGVariableAction_MissionGroup_Finish_GetActionName_MissionGroupFinish");
static_assert(offsetof(BFGVariableAction_MissionGroup_Finish_GetActionName_MissionGroupFinish, ReturnValue) == 0x000000, "Member 'BFGVariableAction_MissionGroup_Finish_GetActionName_MissionGroupFinish::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetComponent_Holobob.SetVisibilityState
// 0x0002 (0x0002 - 0x0000)
struct BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState final
{
public:
	bool                                          _bVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceUpdate;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState) == 0x000001, "Wrong alignment on BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState");
static_assert(sizeof(BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState) == 0x000002, "Wrong size on BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState");
static_assert(offsetof(BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState, _bVisible) == 0x000000, "Member 'BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState::_bVisible' has a wrong offset!");
static_assert(offsetof(BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState, _bForceUpdate) == 0x000001, "Member 'BFGActorComponent_WidgetComponent_Holobob_SetVisibilityState::_bForceUpdate' has a wrong offset!");

// Function BFGCore.BFGActorComponentInteractable.SetFocusable
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponentInteractable_SetFocusable final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponentInteractable_SetFocusable) == 0x000001, "Wrong alignment on BFGActorComponentInteractable_SetFocusable");
static_assert(sizeof(BFGActorComponentInteractable_SetFocusable) == 0x000001, "Wrong size on BFGActorComponentInteractable_SetFocusable");
static_assert(offsetof(BFGActorComponentInteractable_SetFocusable, _bValue) == 0x000000, "Member 'BFGActorComponentInteractable_SetFocusable::_bValue' has a wrong offset!");

// Function BFGCore.BFGActorComponentInteractable.SetInteractEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponentInteractable_SetInteractEnabled final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponentInteractable_SetInteractEnabled) == 0x000001, "Wrong alignment on BFGActorComponentInteractable_SetInteractEnabled");
static_assert(sizeof(BFGActorComponentInteractable_SetInteractEnabled) == 0x000001, "Wrong size on BFGActorComponentInteractable_SetInteractEnabled");
static_assert(offsetof(BFGActorComponentInteractable_SetInteractEnabled, _bValue) == 0x000000, "Member 'BFGActorComponentInteractable_SetInteractEnabled::_bValue' has a wrong offset!");

// Function BFGCore.BFGActorComponentInteractable.IsFocused
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponentInteractable_IsFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponentInteractable_IsFocused) == 0x000001, "Wrong alignment on BFGActorComponentInteractable_IsFocused");
static_assert(sizeof(BFGActorComponentInteractable_IsFocused) == 0x000001, "Wrong size on BFGActorComponentInteractable_IsFocused");
static_assert(offsetof(BFGActorComponentInteractable_IsFocused, ReturnValue) == 0x000000, "Member 'BFGActorComponentInteractable_IsFocused::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorComponentInteractable.IsInteractableFocusable
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponentInteractable_IsInteractableFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponentInteractable_IsInteractableFocusable) == 0x000001, "Wrong alignment on BFGActorComponentInteractable_IsInteractableFocusable");
static_assert(sizeof(BFGActorComponentInteractable_IsInteractableFocusable) == 0x000001, "Wrong size on BFGActorComponentInteractable_IsInteractableFocusable");
static_assert(offsetof(BFGActorComponentInteractable_IsInteractableFocusable, ReturnValue) == 0x000000, "Member 'BFGActorComponentInteractable_IsInteractableFocusable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_MessageBox.SetupMessageBox
// 0x0038 (0x0038 - 0x0000)
struct BFGWidget_MessageBox_SetupMessageBox final
{
public:
	struct FBFGMessageBoxParams                   _params;                                           // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MessageBox_SetupMessageBox) == 0x000008, "Wrong alignment on BFGWidget_MessageBox_SetupMessageBox");
static_assert(sizeof(BFGWidget_MessageBox_SetupMessageBox) == 0x000038, "Wrong size on BFGWidget_MessageBox_SetupMessageBox");
static_assert(offsetof(BFGWidget_MessageBox_SetupMessageBox, _params) == 0x000000, "Member 'BFGWidget_MessageBox_SetupMessageBox::_params' has a wrong offset!");

// Function BFGCore.BFGActorInterface_EnvironmentMonitor.OnEnvironmentChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGActorInterface_EnvironmentMonitor_OnEnvironmentChanged final
{
public:
	class UBFGEnvironment*                        _pEnvironment;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorInterface_EnvironmentMonitor_OnEnvironmentChanged) == 0x000008, "Wrong alignment on BFGActorInterface_EnvironmentMonitor_OnEnvironmentChanged");
static_assert(sizeof(BFGActorInterface_EnvironmentMonitor_OnEnvironmentChanged) == 0x000008, "Wrong size on BFGActorInterface_EnvironmentMonitor_OnEnvironmentChanged");
static_assert(offsetof(BFGActorInterface_EnvironmentMonitor_OnEnvironmentChanged, _pEnvironment) == 0x000000, "Member 'BFGActorInterface_EnvironmentMonitor_OnEnvironmentChanged::_pEnvironment' has a wrong offset!");

// Function BFGCore.BFGActorOcean.CheckOceanInRadius
// 0x001C (0x001C - 0x0000)
struct BFGActorOcean_CheckOceanInRadius final
{
public:
	struct FVector                                _vCentre;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _CheckRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorOcean_CheckOceanInRadius) == 0x000004, "Wrong alignment on BFGActorOcean_CheckOceanInRadius");
static_assert(sizeof(BFGActorOcean_CheckOceanInRadius) == 0x00001C, "Wrong size on BFGActorOcean_CheckOceanInRadius");
static_assert(offsetof(BFGActorOcean_CheckOceanInRadius, _vCentre) == 0x000000, "Member 'BFGActorOcean_CheckOceanInRadius::_vCentre' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_CheckOceanInRadius, _CheckRadius) == 0x00000C, "Member 'BFGActorOcean_CheckOceanInRadius::_CheckRadius' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_CheckOceanInRadius, ReturnValue) == 0x000010, "Member 'BFGActorOcean_CheckOceanInRadius::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorOcean.CreateOceanTexture
// 0x0030 (0x0030 - 0x0000)
struct BFGActorOcean_CreateOceanTexture final
{
public:
	struct FWaveParameter                         _stChannelRed;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaveParameter                         _stChannelGreen;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaveParameter                         _stChannelBlue;                                    // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaveParameter                         _stChannelAlpha;                                   // 0x0024(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorOcean_CreateOceanTexture) == 0x000004, "Wrong alignment on BFGActorOcean_CreateOceanTexture");
static_assert(sizeof(BFGActorOcean_CreateOceanTexture) == 0x000030, "Wrong size on BFGActorOcean_CreateOceanTexture");
static_assert(offsetof(BFGActorOcean_CreateOceanTexture, _stChannelRed) == 0x000000, "Member 'BFGActorOcean_CreateOceanTexture::_stChannelRed' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_CreateOceanTexture, _stChannelGreen) == 0x00000C, "Member 'BFGActorOcean_CreateOceanTexture::_stChannelGreen' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_CreateOceanTexture, _stChannelBlue) == 0x000018, "Member 'BFGActorOcean_CreateOceanTexture::_stChannelBlue' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_CreateOceanTexture, _stChannelAlpha) == 0x000024, "Member 'BFGActorOcean_CreateOceanTexture::_stChannelAlpha' has a wrong offset!");

// Function BFGCore.BFGActorOcean.GenerateRandomPointOnMesh
// 0x000C (0x000C - 0x0000)
struct BFGActorOcean_GenerateRandomPointOnMesh final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorOcean_GenerateRandomPointOnMesh) == 0x000004, "Wrong alignment on BFGActorOcean_GenerateRandomPointOnMesh");
static_assert(sizeof(BFGActorOcean_GenerateRandomPointOnMesh) == 0x00000C, "Wrong size on BFGActorOcean_GenerateRandomPointOnMesh");
static_assert(offsetof(BFGActorOcean_GenerateRandomPointOnMesh, ReturnValue) == 0x000000, "Member 'BFGActorOcean_GenerateRandomPointOnMesh::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorOcean.GetOceanHeight
// 0x0010 (0x0010 - 0x0000)
struct BFGActorOcean_GetOceanHeight final
{
public:
	struct FVector                                _vWorldPos;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorOcean_GetOceanHeight) == 0x000004, "Wrong alignment on BFGActorOcean_GetOceanHeight");
static_assert(sizeof(BFGActorOcean_GetOceanHeight) == 0x000010, "Wrong size on BFGActorOcean_GetOceanHeight");
static_assert(offsetof(BFGActorOcean_GetOceanHeight, _vWorldPos) == 0x000000, "Member 'BFGActorOcean_GetOceanHeight::_vWorldPos' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_GetOceanHeight, ReturnValue) == 0x00000C, "Member 'BFGActorOcean_GetOceanHeight::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorOcean.IsLocationInOcean
// 0x0010 (0x0010 - 0x0000)
struct BFGActorOcean_IsLocationInOcean final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorOcean_IsLocationInOcean) == 0x000004, "Wrong alignment on BFGActorOcean_IsLocationInOcean");
static_assert(sizeof(BFGActorOcean_IsLocationInOcean) == 0x000010, "Wrong size on BFGActorOcean_IsLocationInOcean");
static_assert(offsetof(BFGActorOcean_IsLocationInOcean, _vLocation) == 0x000000, "Member 'BFGActorOcean_IsLocationInOcean::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_IsLocationInOcean, ReturnValue) == 0x00000C, "Member 'BFGActorOcean_IsLocationInOcean::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorOcean.IsLocationInOceanWithHeight
// 0x0014 (0x0014 - 0x0000)
struct BFGActorOcean_IsLocationInOceanWithHeight final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fOceanHeight;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorOcean_IsLocationInOceanWithHeight) == 0x000004, "Wrong alignment on BFGActorOcean_IsLocationInOceanWithHeight");
static_assert(sizeof(BFGActorOcean_IsLocationInOceanWithHeight) == 0x000014, "Wrong size on BFGActorOcean_IsLocationInOceanWithHeight");
static_assert(offsetof(BFGActorOcean_IsLocationInOceanWithHeight, _vLocation) == 0x000000, "Member 'BFGActorOcean_IsLocationInOceanWithHeight::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_IsLocationInOceanWithHeight, _fOceanHeight) == 0x00000C, "Member 'BFGActorOcean_IsLocationInOceanWithHeight::_fOceanHeight' has a wrong offset!");
static_assert(offsetof(BFGActorOcean_IsLocationInOceanWithHeight, ReturnValue) == 0x000010, "Member 'BFGActorOcean_IsLocationInOceanWithHeight::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_Mecha.OnStompAttackStarted
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted final
{
public:
	float                                         M_fStompDuration;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUsedRightFoot;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted) == 0x000004, "Wrong alignment on BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted");
static_assert(sizeof(BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted) == 0x000008, "Wrong size on BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted");
static_assert(offsetof(BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted, M_fStompDuration) == 0x000000, "Member 'BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted::M_fStompDuration' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted, _bUsedRightFoot) == 0x000004, "Member 'BFGNPCCharacterEnemy_Mecha_OnStompAttackStarted::_bUsedRightFoot' has a wrong offset!");

// Function BFGCore.BFGCheatManager.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_GetSettings final
{
public:
	class UBFGCheatSettings*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_GetSettings) == 0x000008, "Wrong alignment on BFGCheatManager_GetSettings");
static_assert(sizeof(BFGCheatManager_GetSettings) == 0x000008, "Wrong size on BFGCheatManager_GetSettings");
static_assert(offsetof(BFGCheatManager_GetSettings, ReturnValue) == 0x000000, "Member 'BFGCheatManager_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCheatManager.AddDNA
// 0x0004 (0x0004 - 0x0000)
struct BFGCheatManager_AddDNA final
{
public:
	int32                                         _iAddedAmount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_AddDNA) == 0x000004, "Wrong alignment on BFGCheatManager_AddDNA");
static_assert(sizeof(BFGCheatManager_AddDNA) == 0x000004, "Wrong size on BFGCheatManager_AddDNA");
static_assert(offsetof(BFGCheatManager_AddDNA, _iAddedAmount) == 0x000000, "Member 'BFGCheatManager_AddDNA::_iAddedAmount' has a wrong offset!");

// Function BFGCore.BFGCheatManager.IsHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_IsHUDVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_IsHUDVisible) == 0x000001, "Wrong alignment on BFGCheatManager_IsHUDVisible");
static_assert(sizeof(BFGCheatManager_IsHUDVisible) == 0x000001, "Wrong size on BFGCheatManager_IsHUDVisible");
static_assert(offsetof(BFGCheatManager_IsHUDVisible, ReturnValue) == 0x000000, "Member 'BFGCheatManager_IsHUDVisible::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockAll
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_LockAll final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockAll) == 0x000001, "Wrong alignment on BFGCheatManager_LockAll");
static_assert(sizeof(BFGCheatManager_LockAll) == 0x000001, "Wrong size on BFGCheatManager_LockAll");
static_assert(offsetof(BFGCheatManager_LockAll, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockAll::_bPermanent' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockAllAbilities
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_LockAllAbilities final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockAllAbilities) == 0x000001, "Wrong alignment on BFGCheatManager_LockAllAbilities");
static_assert(sizeof(BFGCheatManager_LockAllAbilities) == 0x000001, "Wrong size on BFGCheatManager_LockAllAbilities");
static_assert(offsetof(BFGCheatManager_LockAllAbilities, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockAllAbilities::_bPermanent' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockAllWeapons
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_LockAllWeapons final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockAllWeapons) == 0x000001, "Wrong alignment on BFGCheatManager_LockAllWeapons");
static_assert(sizeof(BFGCheatManager_LockAllWeapons) == 0x000001, "Wrong size on BFGCheatManager_LockAllWeapons");
static_assert(offsetof(BFGCheatManager_LockAllWeapons, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockAllWeapons::_bPermanent' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockAbilityCortexScan
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockAbilityCortexScan final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockAbilityCortexScan) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockAbilityCortexScan");
static_assert(sizeof(BFGCheatManager_LockUnlockAbilityCortexScan) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockAbilityCortexScan");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityCortexScan, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockAbilityCortexScan::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityCortexScan, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockAbilityCortexScan::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockAbilityExtractBrain
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockAbilityExtractBrain final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockAbilityExtractBrain) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockAbilityExtractBrain");
static_assert(sizeof(BFGCheatManager_LockUnlockAbilityExtractBrain) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockAbilityExtractBrain");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityExtractBrain, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockAbilityExtractBrain::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityExtractBrain, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockAbilityExtractBrain::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockAbilityHolobob
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockAbilityHolobob final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockAbilityHolobob) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockAbilityHolobob");
static_assert(sizeof(BFGCheatManager_LockUnlockAbilityHolobob) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockAbilityHolobob");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityHolobob, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockAbilityHolobob::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityHolobob, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockAbilityHolobob::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockAbilityHypnotize
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockAbilityHypnotize final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockAbilityHypnotize) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockAbilityHypnotize");
static_assert(sizeof(BFGCheatManager_LockUnlockAbilityHypnotize) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockAbilityHypnotize");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityHypnotize, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockAbilityHypnotize::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityHypnotize, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockAbilityHypnotize::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockAbilityPsycokinesis
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockAbilityPsycokinesis final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockAbilityPsycokinesis) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockAbilityPsycokinesis");
static_assert(sizeof(BFGCheatManager_LockUnlockAbilityPsycokinesis) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockAbilityPsycokinesis");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityPsycokinesis, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockAbilityPsycokinesis::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockAbilityPsycokinesis, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockAbilityPsycokinesis::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockWeaponAnalProbe
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockWeaponAnalProbe final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockWeaponAnalProbe) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockWeaponAnalProbe");
static_assert(sizeof(BFGCheatManager_LockUnlockWeaponAnalProbe) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockWeaponAnalProbe");
static_assert(offsetof(BFGCheatManager_LockUnlockWeaponAnalProbe, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockWeaponAnalProbe::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockWeaponAnalProbe, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockWeaponAnalProbe::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockWeaponDisintegratorRay
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockWeaponDisintegratorRay final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockWeaponDisintegratorRay) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockWeaponDisintegratorRay");
static_assert(sizeof(BFGCheatManager_LockUnlockWeaponDisintegratorRay) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockWeaponDisintegratorRay");
static_assert(offsetof(BFGCheatManager_LockUnlockWeaponDisintegratorRay, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockWeaponDisintegratorRay::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockWeaponDisintegratorRay, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockWeaponDisintegratorRay::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockWeaponIonDetonator
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockWeaponIonDetonator final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockWeaponIonDetonator) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockWeaponIonDetonator");
static_assert(sizeof(BFGCheatManager_LockUnlockWeaponIonDetonator) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockWeaponIonDetonator");
static_assert(offsetof(BFGCheatManager_LockUnlockWeaponIonDetonator, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockWeaponIonDetonator::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockWeaponIonDetonator, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockWeaponIonDetonator::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.LockUnlockWeaponZap
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_LockUnlockWeaponZap final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _tier;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_LockUnlockWeaponZap) == 0x000004, "Wrong alignment on BFGCheatManager_LockUnlockWeaponZap");
static_assert(sizeof(BFGCheatManager_LockUnlockWeaponZap) == 0x000008, "Wrong size on BFGCheatManager_LockUnlockWeaponZap");
static_assert(offsetof(BFGCheatManager_LockUnlockWeaponZap, _bPermanent) == 0x000000, "Member 'BFGCheatManager_LockUnlockWeaponZap::_bPermanent' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_LockUnlockWeaponZap, _tier) == 0x000004, "Member 'BFGCheatManager_LockUnlockWeaponZap::_tier' has a wrong offset!");

// Function BFGCore.BFGCheatManager.NukeEnemiesInRange
// 0x0004 (0x0004 - 0x0000)
struct BFGCheatManager_NukeEnemiesInRange final
{
public:
	float                                         _fRange;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_NukeEnemiesInRange) == 0x000004, "Wrong alignment on BFGCheatManager_NukeEnemiesInRange");
static_assert(sizeof(BFGCheatManager_NukeEnemiesInRange) == 0x000004, "Wrong size on BFGCheatManager_NukeEnemiesInRange");
static_assert(offsetof(BFGCheatManager_NukeEnemiesInRange, _fRange) == 0x000000, "Member 'BFGCheatManager_NukeEnemiesInRange::_fRange' has a wrong offset!");

// Function BFGCore.BFGCheatManager.SetBFGMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct BFGCheatManager_SetBFGMouseSensitivity final
{
public:
	float                                         _fSensitivity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_SetBFGMouseSensitivity) == 0x000004, "Wrong alignment on BFGCheatManager_SetBFGMouseSensitivity");
static_assert(sizeof(BFGCheatManager_SetBFGMouseSensitivity) == 0x000004, "Wrong size on BFGCheatManager_SetBFGMouseSensitivity");
static_assert(offsetof(BFGCheatManager_SetBFGMouseSensitivity, _fSensitivity) == 0x000000, "Member 'BFGCheatManager_SetBFGMouseSensitivity::_fSensitivity' has a wrong offset!");

// Function BFGCore.BFGCheatManager.SetCurrentLanguage
// 0x0010 (0x0010 - 0x0000)
struct BFGCheatManager_SetCurrentLanguage final
{
public:
	class FString                                 _strCulture;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_SetCurrentLanguage) == 0x000008, "Wrong alignment on BFGCheatManager_SetCurrentLanguage");
static_assert(sizeof(BFGCheatManager_SetCurrentLanguage) == 0x000010, "Wrong size on BFGCheatManager_SetCurrentLanguage");
static_assert(offsetof(BFGCheatManager_SetCurrentLanguage, _strCulture) == 0x000000, "Member 'BFGCheatManager_SetCurrentLanguage::_strCulture' has a wrong offset!");

// Function BFGCore.BFGCheatManager.SetFuronigamiUnlocked
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_SetFuronigamiUnlocked final
{
public:
	bool                                          _bUnlocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_SetFuronigamiUnlocked) == 0x000001, "Wrong alignment on BFGCheatManager_SetFuronigamiUnlocked");
static_assert(sizeof(BFGCheatManager_SetFuronigamiUnlocked) == 0x000001, "Wrong size on BFGCheatManager_SetFuronigamiUnlocked");
static_assert(offsetof(BFGCheatManager_SetFuronigamiUnlocked, _bUnlocked) == 0x000000, "Member 'BFGCheatManager_SetFuronigamiUnlocked::_bUnlocked' has a wrong offset!");

// Function BFGCore.BFGCheatManager.SetGameIni
// 0x0018 (0x0018 - 0x0000)
struct BFGCheatManager_SetGameIni final
{
public:
	class FString                                 _strVariable;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iNewValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGCheatManager_SetGameIni) == 0x000008, "Wrong alignment on BFGCheatManager_SetGameIni");
static_assert(sizeof(BFGCheatManager_SetGameIni) == 0x000018, "Wrong size on BFGCheatManager_SetGameIni");
static_assert(offsetof(BFGCheatManager_SetGameIni, _strVariable) == 0x000000, "Member 'BFGCheatManager_SetGameIni::_strVariable' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_SetGameIni, _iNewValue) == 0x000010, "Member 'BFGCheatManager_SetGameIni::_iNewValue' has a wrong offset!");

// Function BFGCore.BFGCheatManager.SetPrePurchaseDLCUnlocked
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_SetPrePurchaseDLCUnlocked final
{
public:
	bool                                          _bUnlocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_SetPrePurchaseDLCUnlocked) == 0x000001, "Wrong alignment on BFGCheatManager_SetPrePurchaseDLCUnlocked");
static_assert(sizeof(BFGCheatManager_SetPrePurchaseDLCUnlocked) == 0x000001, "Wrong size on BFGCheatManager_SetPrePurchaseDLCUnlocked");
static_assert(offsetof(BFGCheatManager_SetPrePurchaseDLCUnlocked, _bUnlocked) == 0x000000, "Member 'BFGCheatManager_SetPrePurchaseDLCUnlocked::_bUnlocked' has a wrong offset!");

// Function BFGCore.BFGCheatManager.ShowGameMenu
// 0x0008 (0x0008 - 0x0000)
struct BFGCheatManager_ShowGameMenu final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_ShowGameMenu) == 0x000004, "Wrong alignment on BFGCheatManager_ShowGameMenu");
static_assert(sizeof(BFGCheatManager_ShowGameMenu) == 0x000008, "Wrong size on BFGCheatManager_ShowGameMenu");
static_assert(offsetof(BFGCheatManager_ShowGameMenu, _name) == 0x000000, "Member 'BFGCheatManager_ShowGameMenu::_name' has a wrong offset!");

// Function BFGCore.BFGCheatManager.ToggleLockOnTag
// 0x000C (0x000C - 0x0000)
struct BFGCheatManager_ToggleLockOnTag final
{
public:
	class FName                                   _tag;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPermanent;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGCheatManager_ToggleLockOnTag) == 0x000004, "Wrong alignment on BFGCheatManager_ToggleLockOnTag");
static_assert(sizeof(BFGCheatManager_ToggleLockOnTag) == 0x00000C, "Wrong size on BFGCheatManager_ToggleLockOnTag");
static_assert(offsetof(BFGCheatManager_ToggleLockOnTag, _tag) == 0x000000, "Member 'BFGCheatManager_ToggleLockOnTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGCheatManager_ToggleLockOnTag, _bPermanent) == 0x000008, "Member 'BFGCheatManager_ToggleLockOnTag::_bPermanent' has a wrong offset!");

// Function BFGCore.BFGCheatManager.UnlockAlAbilities
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_UnlockAlAbilities final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_UnlockAlAbilities) == 0x000001, "Wrong alignment on BFGCheatManager_UnlockAlAbilities");
static_assert(sizeof(BFGCheatManager_UnlockAlAbilities) == 0x000001, "Wrong size on BFGCheatManager_UnlockAlAbilities");
static_assert(offsetof(BFGCheatManager_UnlockAlAbilities, _bPermanent) == 0x000000, "Member 'BFGCheatManager_UnlockAlAbilities::_bPermanent' has a wrong offset!");

// Function BFGCore.BFGCheatManager.UnlockAll
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_UnlockAll final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_UnlockAll) == 0x000001, "Wrong alignment on BFGCheatManager_UnlockAll");
static_assert(sizeof(BFGCheatManager_UnlockAll) == 0x000001, "Wrong size on BFGCheatManager_UnlockAll");
static_assert(offsetof(BFGCheatManager_UnlockAll, _bPermanent) == 0x000000, "Member 'BFGCheatManager_UnlockAll::_bPermanent' has a wrong offset!");

// Function BFGCore.BFGCheatManager.UnlockAllWeapons
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatManager_UnlockAllWeapons final
{
public:
	bool                                          _bPermanent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatManager_UnlockAllWeapons) == 0x000001, "Wrong alignment on BFGCheatManager_UnlockAllWeapons");
static_assert(sizeof(BFGCheatManager_UnlockAllWeapons) == 0x000001, "Wrong size on BFGCheatManager_UnlockAllWeapons");
static_assert(offsetof(BFGCheatManager_UnlockAllWeapons, _bPermanent) == 0x000000, "Member 'BFGCheatManager_UnlockAllWeapons::_bPermanent' has a wrong offset!");

// Function BFGCore.BFGActorProxyCollect.OnPostCreateChildActor
// 0x0010 (0x0010 - 0x0000)
struct BFGActorProxyCollect_OnPostCreateChildActor final
{
public:
	class UBFGActorComponent_ProxyChildActor*     _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pChildActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorProxyCollect_OnPostCreateChildActor) == 0x000008, "Wrong alignment on BFGActorProxyCollect_OnPostCreateChildActor");
static_assert(sizeof(BFGActorProxyCollect_OnPostCreateChildActor) == 0x000010, "Wrong size on BFGActorProxyCollect_OnPostCreateChildActor");
static_assert(offsetof(BFGActorProxyCollect_OnPostCreateChildActor, _pComponent) == 0x000000, "Member 'BFGActorProxyCollect_OnPostCreateChildActor::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGActorProxyCollect_OnPostCreateChildActor, _pChildActor) == 0x000008, "Member 'BFGActorProxyCollect_OnPostCreateChildActor::_pChildActor' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Quest_Progress.GetActionNameQuestProgress
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Quest_Progress_GetActionNameQuestProgress final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Quest_Progress_GetActionNameQuestProgress) == 0x000004, "Wrong alignment on BFGVariableAction_Quest_Progress_GetActionNameQuestProgress");
static_assert(sizeof(BFGVariableAction_Quest_Progress_GetActionNameQuestProgress) == 0x000008, "Wrong size on BFGVariableAction_Quest_Progress_GetActionNameQuestProgress");
static_assert(offsetof(BFGVariableAction_Quest_Progress_GetActionNameQuestProgress, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Quest_Progress_GetActionNameQuestProgress::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBuildingHelper.InitializeBuildingEditor
// 0x0008 (0x0008 - 0x0000)
struct BFGBuildingHelper_InitializeBuildingEditor final
{
public:
	class ABFGActorBuilding*                      _pActorBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBuildingHelper_InitializeBuildingEditor) == 0x000008, "Wrong alignment on BFGBuildingHelper_InitializeBuildingEditor");
static_assert(sizeof(BFGBuildingHelper_InitializeBuildingEditor) == 0x000008, "Wrong size on BFGBuildingHelper_InitializeBuildingEditor");
static_assert(offsetof(BFGBuildingHelper_InitializeBuildingEditor, _pActorBuilding) == 0x000000, "Member 'BFGBuildingHelper_InitializeBuildingEditor::_pActorBuilding' has a wrong offset!");

// Function BFGCore.BFGActorStat.GetLastChangedTime
// 0x0004 (0x0004 - 0x0000)
struct BFGActorStat_GetLastChangedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_GetLastChangedTime) == 0x000004, "Wrong alignment on BFGActorStat_GetLastChangedTime");
static_assert(sizeof(BFGActorStat_GetLastChangedTime) == 0x000004, "Wrong size on BFGActorStat_GetLastChangedTime");
static_assert(offsetof(BFGActorStat_GetLastChangedTime, ReturnValue) == 0x000000, "Member 'BFGActorStat_GetLastChangedTime::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat.IsFrozenEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorStat_IsFrozenEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_IsFrozenEnabled) == 0x000001, "Wrong alignment on BFGActorStat_IsFrozenEnabled");
static_assert(sizeof(BFGActorStat_IsFrozenEnabled) == 0x000001, "Wrong size on BFGActorStat_IsFrozenEnabled");
static_assert(offsetof(BFGActorStat_IsFrozenEnabled, ReturnValue) == 0x000000, "Member 'BFGActorStat_IsFrozenEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_Bool.SetValue
// 0x0002 (0x0002 - 0x0000)
struct BFGActorStat_Bool_SetValue final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBroadcast;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Bool_SetValue) == 0x000001, "Wrong alignment on BFGActorStat_Bool_SetValue");
static_assert(sizeof(BFGActorStat_Bool_SetValue) == 0x000002, "Wrong size on BFGActorStat_Bool_SetValue");
static_assert(offsetof(BFGActorStat_Bool_SetValue, _bValue) == 0x000000, "Member 'BFGActorStat_Bool_SetValue::_bValue' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Bool_SetValue, _bBroadcast) == 0x000001, "Member 'BFGActorStat_Bool_SetValue::_bBroadcast' has a wrong offset!");

// Function BFGCore.BFGActorStat_Bool.GetValue
// 0x0001 (0x0001 - 0x0000)
struct BFGActorStat_Bool_GetValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Bool_GetValue) == 0x000001, "Wrong alignment on BFGActorStat_Bool_GetValue");
static_assert(sizeof(BFGActorStat_Bool_GetValue) == 0x000001, "Wrong size on BFGActorStat_Bool_GetValue");
static_assert(offsetof(BFGActorStat_Bool_GetValue, ReturnValue) == 0x000000, "Member 'BFGActorStat_Bool_GetValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_MainMenu.GetCurrentMenuState
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MainMenu_GetCurrentMenuState final
{
public:
	EBFGGameFlowState_MainMenu_State              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MainMenu_GetCurrentMenuState) == 0x000001, "Wrong alignment on BFGWidget_MainMenu_GetCurrentMenuState");
static_assert(sizeof(BFGWidget_MainMenu_GetCurrentMenuState) == 0x000001, "Wrong size on BFGWidget_MainMenu_GetCurrentMenuState");
static_assert(offsetof(BFGWidget_MainMenu_GetCurrentMenuState, ReturnValue) == 0x000000, "Member 'BFGWidget_MainMenu_GetCurrentMenuState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_uint8.SetValue
// 0x0008 (0x0008 - 0x0000)
struct BFGActorStat_uint8_SetValue final
{
public:
	int32                                         _iValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBroadcast;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorStat_uint8_SetValue) == 0x000004, "Wrong alignment on BFGActorStat_uint8_SetValue");
static_assert(sizeof(BFGActorStat_uint8_SetValue) == 0x000008, "Wrong size on BFGActorStat_uint8_SetValue");
static_assert(offsetof(BFGActorStat_uint8_SetValue, _iValue) == 0x000000, "Member 'BFGActorStat_uint8_SetValue::_iValue' has a wrong offset!");
static_assert(offsetof(BFGActorStat_uint8_SetValue, _bBroadcast) == 0x000004, "Member 'BFGActorStat_uint8_SetValue::_bBroadcast' has a wrong offset!");

// Function BFGCore.BFGActorStat_uint8.GetValue
// 0x0001 (0x0001 - 0x0000)
struct BFGActorStat_uint8_GetValue final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_uint8_GetValue) == 0x000001, "Wrong alignment on BFGActorStat_uint8_GetValue");
static_assert(sizeof(BFGActorStat_uint8_GetValue) == 0x000001, "Wrong size on BFGActorStat_uint8_GetValue");
static_assert(offsetof(BFGActorStat_uint8_GetValue, ReturnValue) == 0x000000, "Member 'BFGActorStat_uint8_GetValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_EnumBehaviourState_NPC.SetValueEnum
// 0x0002 (0x0002 - 0x0000)
struct BFGActorStat_EnumBehaviourState_NPC_SetValueEnum final
{
public:
	EBFGBehaviourState_NPC                        _eValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBroadcast;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_EnumBehaviourState_NPC_SetValueEnum) == 0x000001, "Wrong alignment on BFGActorStat_EnumBehaviourState_NPC_SetValueEnum");
static_assert(sizeof(BFGActorStat_EnumBehaviourState_NPC_SetValueEnum) == 0x000002, "Wrong size on BFGActorStat_EnumBehaviourState_NPC_SetValueEnum");
static_assert(offsetof(BFGActorStat_EnumBehaviourState_NPC_SetValueEnum, _eValue) == 0x000000, "Member 'BFGActorStat_EnumBehaviourState_NPC_SetValueEnum::_eValue' has a wrong offset!");
static_assert(offsetof(BFGActorStat_EnumBehaviourState_NPC_SetValueEnum, _bBroadcast) == 0x000001, "Member 'BFGActorStat_EnumBehaviourState_NPC_SetValueEnum::_bBroadcast' has a wrong offset!");

// Function BFGCore.BFGActorStat_EnumBehaviourState_NPC.GetValueEnum
// 0x0001 (0x0001 - 0x0000)
struct BFGActorStat_EnumBehaviourState_NPC_GetValueEnum final
{
public:
	EBFGBehaviourState_NPC                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_EnumBehaviourState_NPC_GetValueEnum) == 0x000001, "Wrong alignment on BFGActorStat_EnumBehaviourState_NPC_GetValueEnum");
static_assert(sizeof(BFGActorStat_EnumBehaviourState_NPC_GetValueEnum) == 0x000001, "Wrong size on BFGActorStat_EnumBehaviourState_NPC_GetValueEnum");
static_assert(offsetof(BFGActorStat_EnumBehaviourState_NPC_GetValueEnum, ReturnValue) == 0x000000, "Member 'BFGActorStat_EnumBehaviourState_NPC_GetValueEnum::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGChallengeStartingPoint.OnPanelVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGChallengeStartingPoint_OnPanelVisibilityChanged final
{
public:
	EBFGChallengeStartingPoint_Visibility         _eVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGChallengeStartingPoint_OnPanelVisibilityChanged) == 0x000001, "Wrong alignment on BFGChallengeStartingPoint_OnPanelVisibilityChanged");
static_assert(sizeof(BFGChallengeStartingPoint_OnPanelVisibilityChanged) == 0x000001, "Wrong size on BFGChallengeStartingPoint_OnPanelVisibilityChanged");
static_assert(offsetof(BFGChallengeStartingPoint_OnPanelVisibilityChanged, _eVisibility) == 0x000000, "Member 'BFGChallengeStartingPoint_OnPanelVisibilityChanged::_eVisibility' has a wrong offset!");

// Function BFGCore.BFGWidgetPoxLabEntryPoint.OnOptionMouseHover
// 0x0001 (0x0001 - 0x0000)
struct BFGWidgetPoxLabEntryPoint_OnOptionMouseHover final
{
public:
	EBFGMotherShipPoxLabType                      _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetPoxLabEntryPoint_OnOptionMouseHover) == 0x000001, "Wrong alignment on BFGWidgetPoxLabEntryPoint_OnOptionMouseHover");
static_assert(sizeof(BFGWidgetPoxLabEntryPoint_OnOptionMouseHover) == 0x000001, "Wrong size on BFGWidgetPoxLabEntryPoint_OnOptionMouseHover");
static_assert(offsetof(BFGWidgetPoxLabEntryPoint_OnOptionMouseHover, _eType) == 0x000000, "Member 'BFGWidgetPoxLabEntryPoint_OnOptionMouseHover::_eType' has a wrong offset!");

// Function BFGCore.BFGWidgetPoxLabEntryPoint.OnOptionMousePress
// 0x0001 (0x0001 - 0x0000)
struct BFGWidgetPoxLabEntryPoint_OnOptionMousePress final
{
public:
	EBFGMotherShipPoxLabType                      _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetPoxLabEntryPoint_OnOptionMousePress) == 0x000001, "Wrong alignment on BFGWidgetPoxLabEntryPoint_OnOptionMousePress");
static_assert(sizeof(BFGWidgetPoxLabEntryPoint_OnOptionMousePress) == 0x000001, "Wrong size on BFGWidgetPoxLabEntryPoint_OnOptionMousePress");
static_assert(offsetof(BFGWidgetPoxLabEntryPoint_OnOptionMousePress, _eType) == 0x000000, "Member 'BFGWidgetPoxLabEntryPoint_OnOptionMousePress::_eType' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.AddValue
// 0x0008 (0x0008 - 0x0000)
struct BFGActorStat_Float_AddValue final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBroadcast;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRegisterChange;                                  // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorStat_Float_AddValue) == 0x000004, "Wrong alignment on BFGActorStat_Float_AddValue");
static_assert(sizeof(BFGActorStat_Float_AddValue) == 0x000008, "Wrong size on BFGActorStat_Float_AddValue");
static_assert(offsetof(BFGActorStat_Float_AddValue, _fValue) == 0x000000, "Member 'BFGActorStat_Float_AddValue::_fValue' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Float_AddValue, _bBroadcast) == 0x000004, "Member 'BFGActorStat_Float_AddValue::_bBroadcast' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Float_AddValue, _bRegisterChange) == 0x000005, "Member 'BFGActorStat_Float_AddValue::_bRegisterChange' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.SetRatio
// 0x0008 (0x0008 - 0x0000)
struct BFGActorStat_Float_SetRatio final
{
public:
	float                                         _fRatio;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBroadcast;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRegisterChange;                                  // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceInit;                                       // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorStat_Float_SetRatio) == 0x000004, "Wrong alignment on BFGActorStat_Float_SetRatio");
static_assert(sizeof(BFGActorStat_Float_SetRatio) == 0x000008, "Wrong size on BFGActorStat_Float_SetRatio");
static_assert(offsetof(BFGActorStat_Float_SetRatio, _fRatio) == 0x000000, "Member 'BFGActorStat_Float_SetRatio::_fRatio' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Float_SetRatio, _bBroadcast) == 0x000004, "Member 'BFGActorStat_Float_SetRatio::_bBroadcast' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Float_SetRatio, _bRegisterChange) == 0x000005, "Member 'BFGActorStat_Float_SetRatio::_bRegisterChange' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Float_SetRatio, _bForceInit) == 0x000006, "Member 'BFGActorStat_Float_SetRatio::_bForceInit' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.SetRegenEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorStat_Float_SetRegenEnabled final
{
public:
	bool                                          _bRegenEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_SetRegenEnabled) == 0x000001, "Wrong alignment on BFGActorStat_Float_SetRegenEnabled");
static_assert(sizeof(BFGActorStat_Float_SetRegenEnabled) == 0x000001, "Wrong size on BFGActorStat_Float_SetRegenEnabled");
static_assert(offsetof(BFGActorStat_Float_SetRegenEnabled, _bRegenEnabled) == 0x000000, "Member 'BFGActorStat_Float_SetRegenEnabled::_bRegenEnabled' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.SetRegenerationDelayOverride
// 0x0004 (0x0004 - 0x0000)
struct BFGActorStat_Float_SetRegenerationDelayOverride final
{
public:
	float                                         _fOverride;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_SetRegenerationDelayOverride) == 0x000004, "Wrong alignment on BFGActorStat_Float_SetRegenerationDelayOverride");
static_assert(sizeof(BFGActorStat_Float_SetRegenerationDelayOverride) == 0x000004, "Wrong size on BFGActorStat_Float_SetRegenerationDelayOverride");
static_assert(offsetof(BFGActorStat_Float_SetRegenerationDelayOverride, _fOverride) == 0x000000, "Member 'BFGActorStat_Float_SetRegenerationDelayOverride::_fOverride' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.SetRegenerationRateOverride
// 0x0004 (0x0004 - 0x0000)
struct BFGActorStat_Float_SetRegenerationRateOverride final
{
public:
	float                                         _fOverride;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_SetRegenerationRateOverride) == 0x000004, "Wrong alignment on BFGActorStat_Float_SetRegenerationRateOverride");
static_assert(sizeof(BFGActorStat_Float_SetRegenerationRateOverride) == 0x000004, "Wrong size on BFGActorStat_Float_SetRegenerationRateOverride");
static_assert(offsetof(BFGActorStat_Float_SetRegenerationRateOverride, _fOverride) == 0x000000, "Member 'BFGActorStat_Float_SetRegenerationRateOverride::_fOverride' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.SetValue
// 0x0008 (0x0008 - 0x0000)
struct BFGActorStat_Float_SetValue final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBroadcast;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRegisterChange;                                  // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceInit;                                       // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorStat_Float_SetValue) == 0x000004, "Wrong alignment on BFGActorStat_Float_SetValue");
static_assert(sizeof(BFGActorStat_Float_SetValue) == 0x000008, "Wrong size on BFGActorStat_Float_SetValue");
static_assert(offsetof(BFGActorStat_Float_SetValue, _fValue) == 0x000000, "Member 'BFGActorStat_Float_SetValue::_fValue' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Float_SetValue, _bBroadcast) == 0x000004, "Member 'BFGActorStat_Float_SetValue::_bBroadcast' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Float_SetValue, _bRegisterChange) == 0x000005, "Member 'BFGActorStat_Float_SetValue::_bRegisterChange' has a wrong offset!");
static_assert(offsetof(BFGActorStat_Float_SetValue, _bForceInit) == 0x000006, "Member 'BFGActorStat_Float_SetValue::_bForceInit' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.GetCurrentRegenerationDelay
// 0x0004 (0x0004 - 0x0000)
struct BFGActorStat_Float_GetCurrentRegenerationDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_GetCurrentRegenerationDelay) == 0x000004, "Wrong alignment on BFGActorStat_Float_GetCurrentRegenerationDelay");
static_assert(sizeof(BFGActorStat_Float_GetCurrentRegenerationDelay) == 0x000004, "Wrong size on BFGActorStat_Float_GetCurrentRegenerationDelay");
static_assert(offsetof(BFGActorStat_Float_GetCurrentRegenerationDelay, ReturnValue) == 0x000000, "Member 'BFGActorStat_Float_GetCurrentRegenerationDelay::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.GetCurrentRegenerationRate
// 0x0004 (0x0004 - 0x0000)
struct BFGActorStat_Float_GetCurrentRegenerationRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_GetCurrentRegenerationRate) == 0x000004, "Wrong alignment on BFGActorStat_Float_GetCurrentRegenerationRate");
static_assert(sizeof(BFGActorStat_Float_GetCurrentRegenerationRate) == 0x000004, "Wrong size on BFGActorStat_Float_GetCurrentRegenerationRate");
static_assert(offsetof(BFGActorStat_Float_GetCurrentRegenerationRate, ReturnValue) == 0x000000, "Member 'BFGActorStat_Float_GetCurrentRegenerationRate::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.GetIsCurrentlyRegenerating
// 0x0001 (0x0001 - 0x0000)
struct BFGActorStat_Float_GetIsCurrentlyRegenerating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_GetIsCurrentlyRegenerating) == 0x000001, "Wrong alignment on BFGActorStat_Float_GetIsCurrentlyRegenerating");
static_assert(sizeof(BFGActorStat_Float_GetIsCurrentlyRegenerating) == 0x000001, "Wrong size on BFGActorStat_Float_GetIsCurrentlyRegenerating");
static_assert(offsetof(BFGActorStat_Float_GetIsCurrentlyRegenerating, ReturnValue) == 0x000000, "Member 'BFGActorStat_Float_GetIsCurrentlyRegenerating::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.GetRatio
// 0x0004 (0x0004 - 0x0000)
struct BFGActorStat_Float_GetRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_GetRatio) == 0x000004, "Wrong alignment on BFGActorStat_Float_GetRatio");
static_assert(sizeof(BFGActorStat_Float_GetRatio) == 0x000004, "Wrong size on BFGActorStat_Float_GetRatio");
static_assert(offsetof(BFGActorStat_Float_GetRatio, ReturnValue) == 0x000000, "Member 'BFGActorStat_Float_GetRatio::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.GetValue
// 0x0004 (0x0004 - 0x0000)
struct BFGActorStat_Float_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_GetValue) == 0x000004, "Wrong alignment on BFGActorStat_Float_GetValue");
static_assert(sizeof(BFGActorStat_Float_GetValue) == 0x000004, "Wrong size on BFGActorStat_Float_GetValue");
static_assert(offsetof(BFGActorStat_Float_GetValue, ReturnValue) == 0x000000, "Member 'BFGActorStat_Float_GetValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.GetValueNorm
// 0x0004 (0x0004 - 0x0000)
struct BFGActorStat_Float_GetValueNorm final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_GetValueNorm) == 0x000004, "Wrong alignment on BFGActorStat_Float_GetValueNorm");
static_assert(sizeof(BFGActorStat_Float_GetValueNorm) == 0x000004, "Wrong size on BFGActorStat_Float_GetValueNorm");
static_assert(offsetof(BFGActorStat_Float_GetValueNorm, ReturnValue) == 0x000000, "Member 'BFGActorStat_Float_GetValueNorm::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorStat_Float.IsRegenEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGActorStat_Float_IsRegenEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorStat_Float_IsRegenEnabled) == 0x000001, "Wrong alignment on BFGActorStat_Float_IsRegenEnabled");
static_assert(sizeof(BFGActorStat_Float_IsRegenEnabled) == 0x000001, "Wrong size on BFGActorStat_Float_IsRegenEnabled");
static_assert(offsetof(BFGActorStat_Float_IsRegenEnabled, ReturnValue) == 0x000000, "Member 'BFGActorStat_Float_IsRegenEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIController.Awake
// 0x0008 (0x0008 - 0x0000)
struct BFGAIController_Awake final
{
public:
	class APawn*                                  _pPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIController_Awake) == 0x000008, "Wrong alignment on BFGAIController_Awake");
static_assert(sizeof(BFGAIController_Awake) == 0x000008, "Wrong size on BFGAIController_Awake");
static_assert(offsetof(BFGAIController_Awake, _pPawn) == 0x000000, "Member 'BFGAIController_Awake::_pPawn' has a wrong offset!");

// Function BFGCore.BFGAIController.Hibernate
// 0x0004 (0x0004 - 0x0000)
struct BFGAIController_Hibernate final
{
public:
	float                                         _fInterval;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIController_Hibernate) == 0x000004, "Wrong alignment on BFGAIController_Hibernate");
static_assert(sizeof(BFGAIController_Hibernate) == 0x000004, "Wrong size on BFGAIController_Hibernate");
static_assert(offsetof(BFGAIController_Hibernate, _fInterval) == 0x000000, "Member 'BFGAIController_Hibernate::_fInterval' has a wrong offset!");

// Function BFGCore.BFGAIController.OnBehaviorTreeStarted
// 0x0008 (0x0008 - 0x0000)
struct BFGAIController_OnBehaviorTreeStarted final
{
public:
	class UBehaviorTree*                          _pBehaviorTree;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIController_OnBehaviorTreeStarted) == 0x000008, "Wrong alignment on BFGAIController_OnBehaviorTreeStarted");
static_assert(sizeof(BFGAIController_OnBehaviorTreeStarted) == 0x000008, "Wrong size on BFGAIController_OnBehaviorTreeStarted");
static_assert(offsetof(BFGAIController_OnBehaviorTreeStarted, _pBehaviorTree) == 0x000000, "Member 'BFGAIController_OnBehaviorTreeStarted::_pBehaviorTree' has a wrong offset!");

// Function BFGCore.BFGAIController.OnBoolStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGAIController_OnBoolStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIController_OnBoolStatChanged) == 0x000008, "Wrong alignment on BFGAIController_OnBoolStatChanged");
static_assert(sizeof(BFGAIController_OnBoolStatChanged) == 0x000010, "Wrong size on BFGAIController_OnBoolStatChanged");
static_assert(offsetof(BFGAIController_OnBoolStatChanged, _pActor) == 0x000000, "Member 'BFGAIController_OnBoolStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGAIController_OnBoolStatChanged, _pStat) == 0x000008, "Member 'BFGAIController_OnBoolStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGAIController.OnDeathStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGAIController_OnDeathStateChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIController_OnDeathStateChanged) == 0x000008, "Wrong alignment on BFGAIController_OnDeathStateChanged");
static_assert(sizeof(BFGAIController_OnDeathStateChanged) == 0x000010, "Wrong size on BFGAIController_OnDeathStateChanged");
static_assert(offsetof(BFGAIController_OnDeathStateChanged, _pActor) == 0x000000, "Member 'BFGAIController_OnDeathStateChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGAIController_OnDeathStateChanged, _pStat) == 0x000008, "Member 'BFGAIController_OnDeathStateChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGAIController.IsHibernating
// 0x0001 (0x0001 - 0x0000)
struct BFGAIController_IsHibernating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIController_IsHibernating) == 0x000001, "Wrong alignment on BFGAIController_IsHibernating");
static_assert(sizeof(BFGAIController_IsHibernating) == 0x000001, "Wrong size on BFGAIController_IsHibernating");
static_assert(offsetof(BFGAIController_IsHibernating, ReturnValue) == 0x000000, "Member 'BFGAIController_IsHibernating::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCortexScanOverrideRule.AppliesToTarget
// 0x0010 (0x0010 - 0x0000)
struct BFGCortexScanOverrideRule_AppliesToTarget final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGCortexScanOverrideRule_AppliesToTarget) == 0x000008, "Wrong alignment on BFGCortexScanOverrideRule_AppliesToTarget");
static_assert(sizeof(BFGCortexScanOverrideRule_AppliesToTarget) == 0x000010, "Wrong size on BFGCortexScanOverrideRule_AppliesToTarget");
static_assert(offsetof(BFGCortexScanOverrideRule_AppliesToTarget, _pTarget) == 0x000000, "Member 'BFGCortexScanOverrideRule_AppliesToTarget::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGCortexScanOverrideRule_AppliesToTarget, ReturnValue) == 0x000008, "Member 'BFGCortexScanOverrideRule_AppliesToTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.ActivateExplosionFromBP
// 0x0040 (0x0040 - 0x0000)
struct BFGActorUtils_ActivateExplosionFromBP final
{
public:
	class AActor*                                 PSourceActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _atPosition;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fRadius;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamageToPlayer;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                M_pDamageType;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fPhysicsImpulseStrength;                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bTraceHitResults;                                 // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCanDestroyEnvironment;                           // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_ActivateExplosionFromBP) == 0x000008, "Wrong alignment on BFGActorUtils_ActivateExplosionFromBP");
static_assert(sizeof(BFGActorUtils_ActivateExplosionFromBP) == 0x000040, "Wrong size on BFGActorUtils_ActivateExplosionFromBP");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, PSourceActor) == 0x000000, "Member 'BFGActorUtils_ActivateExplosionFromBP::PSourceActor' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, _atPosition) == 0x000008, "Member 'BFGActorUtils_ActivateExplosionFromBP::_atPosition' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, _fRadius) == 0x000014, "Member 'BFGActorUtils_ActivateExplosionFromBP::_fRadius' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, _fDamage) == 0x000018, "Member 'BFGActorUtils_ActivateExplosionFromBP::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, _fDamageToPlayer) == 0x00001C, "Member 'BFGActorUtils_ActivateExplosionFromBP::_fDamageToPlayer' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, M_pDamageType) == 0x000020, "Member 'BFGActorUtils_ActivateExplosionFromBP::M_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, _fPhysicsImpulseStrength) == 0x000028, "Member 'BFGActorUtils_ActivateExplosionFromBP::_fPhysicsImpulseStrength' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, _bTraceHitResults) == 0x00002C, "Member 'BFGActorUtils_ActivateExplosionFromBP::_bTraceHitResults' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, _bCanDestroyEnvironment) == 0x00002D, "Member 'BFGActorUtils_ActivateExplosionFromBP::_bCanDestroyEnvironment' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ActivateExplosionFromBP, ReturnValue) == 0x000030, "Member 'BFGActorUtils_ActivateExplosionFromBP::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.ApplyImpulseToActor
// 0x0020 (0x0020 - 0x0000)
struct BFGActorUtils_ApplyImpulseToActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vImpulseAgainstNPC;                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vImpulseAgainstPlayer;                            // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_ApplyImpulseToActor) == 0x000008, "Wrong alignment on BFGActorUtils_ApplyImpulseToActor");
static_assert(sizeof(BFGActorUtils_ApplyImpulseToActor) == 0x000020, "Wrong size on BFGActorUtils_ApplyImpulseToActor");
static_assert(offsetof(BFGActorUtils_ApplyImpulseToActor, _pActor) == 0x000000, "Member 'BFGActorUtils_ApplyImpulseToActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ApplyImpulseToActor, _vImpulseAgainstNPC) == 0x000008, "Member 'BFGActorUtils_ApplyImpulseToActor::_vImpulseAgainstNPC' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ApplyImpulseToActor, _vImpulseAgainstPlayer) == 0x000014, "Member 'BFGActorUtils_ApplyImpulseToActor::_vImpulseAgainstPlayer' has a wrong offset!");

// Function BFGCore.BFGActorUtils.CalcSkeletalMeshFeetHeight
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_CalcSkeletalMeshFeetHeight final
{
public:
	class USceneComponent*                        _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorUtils_CalcSkeletalMeshFeetHeight) == 0x000008, "Wrong alignment on BFGActorUtils_CalcSkeletalMeshFeetHeight");
static_assert(sizeof(BFGActorUtils_CalcSkeletalMeshFeetHeight) == 0x000010, "Wrong size on BFGActorUtils_CalcSkeletalMeshFeetHeight");
static_assert(offsetof(BFGActorUtils_CalcSkeletalMeshFeetHeight, _pComponent) == 0x000000, "Member 'BFGActorUtils_CalcSkeletalMeshFeetHeight::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_CalcSkeletalMeshFeetHeight, ReturnValue) == 0x000008, "Member 'BFGActorUtils_CalcSkeletalMeshFeetHeight::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.CalculateActorWaterInfo
// 0x0018 (0x0018 - 0x0000)
struct BFGActorUtils_CalculateActorWaterInfo final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGWaterPlaneInfo                     ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorUtils_CalculateActorWaterInfo) == 0x000008, "Wrong alignment on BFGActorUtils_CalculateActorWaterInfo");
static_assert(sizeof(BFGActorUtils_CalculateActorWaterInfo) == 0x000018, "Wrong size on BFGActorUtils_CalculateActorWaterInfo");
static_assert(offsetof(BFGActorUtils_CalculateActorWaterInfo, _pActor) == 0x000000, "Member 'BFGActorUtils_CalculateActorWaterInfo::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_CalculateActorWaterInfo, ReturnValue) == 0x000008, "Member 'BFGActorUtils_CalculateActorWaterInfo::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.ComputeActorWeightClass
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_ComputeActorWeightClass final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectWeightClass                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorUtils_ComputeActorWeightClass) == 0x000008, "Wrong alignment on BFGActorUtils_ComputeActorWeightClass");
static_assert(sizeof(BFGActorUtils_ComputeActorWeightClass) == 0x000010, "Wrong size on BFGActorUtils_ComputeActorWeightClass");
static_assert(offsetof(BFGActorUtils_ComputeActorWeightClass, _pActor) == 0x000000, "Member 'BFGActorUtils_ComputeActorWeightClass::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ComputeActorWeightClass, ReturnValue) == 0x000008, "Member 'BFGActorUtils_ComputeActorWeightClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.CopyCollisionResponseToChannel
// 0x0018 (0x0018 - 0x0000)
struct BFGActorUtils_CopyCollisionResponseToChannel final
{
public:
	ECollisionChannel                             _eChannel;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UStaticMesh*                      _pSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _pDestination;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_CopyCollisionResponseToChannel) == 0x000008, "Wrong alignment on BFGActorUtils_CopyCollisionResponseToChannel");
static_assert(sizeof(BFGActorUtils_CopyCollisionResponseToChannel) == 0x000018, "Wrong size on BFGActorUtils_CopyCollisionResponseToChannel");
static_assert(offsetof(BFGActorUtils_CopyCollisionResponseToChannel, _eChannel) == 0x000000, "Member 'BFGActorUtils_CopyCollisionResponseToChannel::_eChannel' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_CopyCollisionResponseToChannel, _pSource) == 0x000008, "Member 'BFGActorUtils_CopyCollisionResponseToChannel::_pSource' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_CopyCollisionResponseToChannel, _pDestination) == 0x000010, "Member 'BFGActorUtils_CopyCollisionResponseToChannel::_pDestination' has a wrong offset!");

// Function BFGCore.BFGActorUtils.FindAllAttachedActors
// 0x0018 (0x0018 - 0x0000)
struct BFGActorUtils_FindAllAttachedActors final
{
public:
	TArray<class AActor*>                         _apOutActors;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 _pRootActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_FindAllAttachedActors) == 0x000008, "Wrong alignment on BFGActorUtils_FindAllAttachedActors");
static_assert(sizeof(BFGActorUtils_FindAllAttachedActors) == 0x000018, "Wrong size on BFGActorUtils_FindAllAttachedActors");
static_assert(offsetof(BFGActorUtils_FindAllAttachedActors, _apOutActors) == 0x000000, "Member 'BFGActorUtils_FindAllAttachedActors::_apOutActors' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_FindAllAttachedActors, _pRootActor) == 0x000010, "Member 'BFGActorUtils_FindAllAttachedActors::_pRootActor' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetCurrentGameplayScale
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetCurrentGameplayScale final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGGameplayScaling                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorUtils_GetCurrentGameplayScale) == 0x000008, "Wrong alignment on BFGActorUtils_GetCurrentGameplayScale");
static_assert(sizeof(BFGActorUtils_GetCurrentGameplayScale) == 0x000010, "Wrong size on BFGActorUtils_GetCurrentGameplayScale");
static_assert(offsetof(BFGActorUtils_GetCurrentGameplayScale, _pWorldContextObject) == 0x000000, "Member 'BFGActorUtils_GetCurrentGameplayScale::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetCurrentGameplayScale, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetCurrentGameplayScale::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetLevelNameFromActor
// 0x0018 (0x0018 - 0x0000)
struct BFGActorUtils_GetLevelNameFromActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetLevelNameFromActor) == 0x000008, "Wrong alignment on BFGActorUtils_GetLevelNameFromActor");
static_assert(sizeof(BFGActorUtils_GetLevelNameFromActor) == 0x000018, "Wrong size on BFGActorUtils_GetLevelNameFromActor");
static_assert(offsetof(BFGActorUtils_GetLevelNameFromActor, _pActor) == 0x000000, "Member 'BFGActorUtils_GetLevelNameFromActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetLevelNameFromActor, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetLevelNameFromActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetMeshFromActor
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetMeshFromActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetMeshFromActor) == 0x000008, "Wrong alignment on BFGActorUtils_GetMeshFromActor");
static_assert(sizeof(BFGActorUtils_GetMeshFromActor) == 0x000010, "Wrong size on BFGActorUtils_GetMeshFromActor");
static_assert(offsetof(BFGActorUtils_GetMeshFromActor, _pActor) == 0x000000, "Member 'BFGActorUtils_GetMeshFromActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetMeshFromActor, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetMeshFromActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetMonetaryValue
// 0x0008 (0x0008 - 0x0000)
struct BFGActorUtils_GetMonetaryValue final
{
public:
	EObjectWeightClass                            _eWeightClass;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetMonetaryValue) == 0x000004, "Wrong alignment on BFGActorUtils_GetMonetaryValue");
static_assert(sizeof(BFGActorUtils_GetMonetaryValue) == 0x000008, "Wrong size on BFGActorUtils_GetMonetaryValue");
static_assert(offsetof(BFGActorUtils_GetMonetaryValue, _eWeightClass) == 0x000000, "Member 'BFGActorUtils_GetMonetaryValue::_eWeightClass' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetMonetaryValue, ReturnValue) == 0x000004, "Member 'BFGActorUtils_GetMonetaryValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetPlayerBaseObject
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetPlayerBaseObject final
{
public:
	class UWorld*                                 _pWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGPlayerBase*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetPlayerBaseObject) == 0x000008, "Wrong alignment on BFGActorUtils_GetPlayerBaseObject");
static_assert(sizeof(BFGActorUtils_GetPlayerBaseObject) == 0x000010, "Wrong size on BFGActorUtils_GetPlayerBaseObject");
static_assert(offsetof(BFGActorUtils_GetPlayerBaseObject, _pWorld) == 0x000000, "Member 'BFGActorUtils_GetPlayerBaseObject::_pWorld' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetPlayerBaseObject, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetPlayerBaseObject::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetPlayerCharacter
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetPlayerCharacter final
{
public:
	class UWorld*                                 _pWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGPlayerCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetPlayerCharacter) == 0x000008, "Wrong alignment on BFGActorUtils_GetPlayerCharacter");
static_assert(sizeof(BFGActorUtils_GetPlayerCharacter) == 0x000010, "Wrong size on BFGActorUtils_GetPlayerCharacter");
static_assert(offsetof(BFGActorUtils_GetPlayerCharacter, _pWorld) == 0x000000, "Member 'BFGActorUtils_GetPlayerCharacter::_pWorld' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetPlayerCharacter, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetPlayerCharacter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetPlayerCharacterFromWorldContext
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetPlayerCharacterFromWorldContext final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGPlayerCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetPlayerCharacterFromWorldContext) == 0x000008, "Wrong alignment on BFGActorUtils_GetPlayerCharacterFromWorldContext");
static_assert(sizeof(BFGActorUtils_GetPlayerCharacterFromWorldContext) == 0x000010, "Wrong size on BFGActorUtils_GetPlayerCharacterFromWorldContext");
static_assert(offsetof(BFGActorUtils_GetPlayerCharacterFromWorldContext, WorldContextObject) == 0x000000, "Member 'BFGActorUtils_GetPlayerCharacterFromWorldContext::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetPlayerCharacterFromWorldContext, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetPlayerCharacterFromWorldContext::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetPlayerUFO
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetPlayerUFO final
{
public:
	class UWorld*                                 _pWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGPlayerUFO*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetPlayerUFO) == 0x000008, "Wrong alignment on BFGActorUtils_GetPlayerUFO");
static_assert(sizeof(BFGActorUtils_GetPlayerUFO) == 0x000010, "Wrong size on BFGActorUtils_GetPlayerUFO");
static_assert(offsetof(BFGActorUtils_GetPlayerUFO, _pWorld) == 0x000000, "Member 'BFGActorUtils_GetPlayerUFO::_pWorld' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetPlayerUFO, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetPlayerUFO::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetPlayerUFOFromWorldContext
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetPlayerUFOFromWorldContext final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGPlayerUFO*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetPlayerUFOFromWorldContext) == 0x000008, "Wrong alignment on BFGActorUtils_GetPlayerUFOFromWorldContext");
static_assert(sizeof(BFGActorUtils_GetPlayerUFOFromWorldContext) == 0x000010, "Wrong size on BFGActorUtils_GetPlayerUFOFromWorldContext");
static_assert(offsetof(BFGActorUtils_GetPlayerUFOFromWorldContext, WorldContextObject) == 0x000000, "Member 'BFGActorUtils_GetPlayerUFOFromWorldContext::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetPlayerUFOFromWorldContext, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetPlayerUFOFromWorldContext::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetPrimaryPlayerCharacter
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetPrimaryPlayerCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGPlayerCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetPrimaryPlayerCharacter) == 0x000008, "Wrong alignment on BFGActorUtils_GetPrimaryPlayerCharacter");
static_assert(sizeof(BFGActorUtils_GetPrimaryPlayerCharacter) == 0x000010, "Wrong size on BFGActorUtils_GetPrimaryPlayerCharacter");
static_assert(offsetof(BFGActorUtils_GetPrimaryPlayerCharacter, WorldContextObject) == 0x000000, "Member 'BFGActorUtils_GetPrimaryPlayerCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetPrimaryPlayerCharacter, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetPrimaryPlayerCharacter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetPrimaryPlayerController
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetPrimaryPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetPrimaryPlayerController) == 0x000008, "Wrong alignment on BFGActorUtils_GetPrimaryPlayerController");
static_assert(sizeof(BFGActorUtils_GetPrimaryPlayerController) == 0x000010, "Wrong size on BFGActorUtils_GetPrimaryPlayerController");
static_assert(offsetof(BFGActorUtils_GetPrimaryPlayerController, WorldContextObject) == 0x000000, "Member 'BFGActorUtils_GetPrimaryPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetPrimaryPlayerController, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetPrimaryPlayerController::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetPrimaryPlayerUFO
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetPrimaryPlayerUFO final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGPlayerUFO*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetPrimaryPlayerUFO) == 0x000008, "Wrong alignment on BFGActorUtils_GetPrimaryPlayerUFO");
static_assert(sizeof(BFGActorUtils_GetPrimaryPlayerUFO) == 0x000010, "Wrong size on BFGActorUtils_GetPrimaryPlayerUFO");
static_assert(offsetof(BFGActorUtils_GetPrimaryPlayerUFO, WorldContextObject) == 0x000000, "Member 'BFGActorUtils_GetPrimaryPlayerUFO::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetPrimaryPlayerUFO, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetPrimaryPlayerUFO::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetStaticMeshSocketTagFromSocketName
// 0x0020 (0x0020 - 0x0000)
struct BFGActorUtils_GetStaticMeshSocketTagFromSocketName final
{
public:
	class UStaticMeshComponent*                   _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _socketName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetStaticMeshSocketTagFromSocketName) == 0x000008, "Wrong alignment on BFGActorUtils_GetStaticMeshSocketTagFromSocketName");
static_assert(sizeof(BFGActorUtils_GetStaticMeshSocketTagFromSocketName) == 0x000020, "Wrong size on BFGActorUtils_GetStaticMeshSocketTagFromSocketName");
static_assert(offsetof(BFGActorUtils_GetStaticMeshSocketTagFromSocketName, _pComponent) == 0x000000, "Member 'BFGActorUtils_GetStaticMeshSocketTagFromSocketName::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetStaticMeshSocketTagFromSocketName, _socketName) == 0x000008, "Member 'BFGActorUtils_GetStaticMeshSocketTagFromSocketName::_socketName' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetStaticMeshSocketTagFromSocketName, ReturnValue) == 0x000010, "Member 'BFGActorUtils_GetStaticMeshSocketTagFromSocketName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetTeleportLocationForCharacterCapsule
// 0x0020 (0x0020 - 0x0000)
struct BFGActorUtils_GetTeleportLocationForCharacterCapsule final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vVec;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetTeleportLocationForCharacterCapsule) == 0x000008, "Wrong alignment on BFGActorUtils_GetTeleportLocationForCharacterCapsule");
static_assert(sizeof(BFGActorUtils_GetTeleportLocationForCharacterCapsule) == 0x000020, "Wrong size on BFGActorUtils_GetTeleportLocationForCharacterCapsule");
static_assert(offsetof(BFGActorUtils_GetTeleportLocationForCharacterCapsule, _pActor) == 0x000000, "Member 'BFGActorUtils_GetTeleportLocationForCharacterCapsule::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetTeleportLocationForCharacterCapsule, _vVec) == 0x000008, "Member 'BFGActorUtils_GetTeleportLocationForCharacterCapsule::_vVec' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetTeleportLocationForCharacterCapsule, ReturnValue) == 0x000014, "Member 'BFGActorUtils_GetTeleportLocationForCharacterCapsule::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetWeightClassFromActor
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetWeightClassFromActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectWeightClass                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorUtils_GetWeightClassFromActor) == 0x000008, "Wrong alignment on BFGActorUtils_GetWeightClassFromActor");
static_assert(sizeof(BFGActorUtils_GetWeightClassFromActor) == 0x000010, "Wrong size on BFGActorUtils_GetWeightClassFromActor");
static_assert(offsetof(BFGActorUtils_GetWeightClassFromActor, _pActor) == 0x000000, "Member 'BFGActorUtils_GetWeightClassFromActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetWeightClassFromActor, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetWeightClassFromActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.GetWorldFromContextObjectSafe
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_GetWorldFromContextObjectSafe final
{
public:
	const class UObject*                          _pWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_GetWorldFromContextObjectSafe) == 0x000008, "Wrong alignment on BFGActorUtils_GetWorldFromContextObjectSafe");
static_assert(sizeof(BFGActorUtils_GetWorldFromContextObjectSafe) == 0x000010, "Wrong size on BFGActorUtils_GetWorldFromContextObjectSafe");
static_assert(offsetof(BFGActorUtils_GetWorldFromContextObjectSafe, _pWorldContextObject) == 0x000000, "Member 'BFGActorUtils_GetWorldFromContextObjectSafe::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_GetWorldFromContextObjectSafe, ReturnValue) == 0x000008, "Member 'BFGActorUtils_GetWorldFromContextObjectSafe::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.ImpactEnvironmentObject
// 0x0018 (0x0018 - 0x0000)
struct BFGActorUtils_ImpactEnvironmentObject final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vAtLocation;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fPhysicsImpulseStrength;                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_ImpactEnvironmentObject) == 0x000008, "Wrong alignment on BFGActorUtils_ImpactEnvironmentObject");
static_assert(sizeof(BFGActorUtils_ImpactEnvironmentObject) == 0x000018, "Wrong size on BFGActorUtils_ImpactEnvironmentObject");
static_assert(offsetof(BFGActorUtils_ImpactEnvironmentObject, _pTarget) == 0x000000, "Member 'BFGActorUtils_ImpactEnvironmentObject::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ImpactEnvironmentObject, _vAtLocation) == 0x000008, "Member 'BFGActorUtils_ImpactEnvironmentObject::_vAtLocation' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ImpactEnvironmentObject, _fPhysicsImpulseStrength) == 0x000014, "Member 'BFGActorUtils_ImpactEnvironmentObject::_fPhysicsImpulseStrength' has a wrong offset!");

// Function BFGCore.BFGActorUtils.IsPrespawningPoolPhase
// 0x0010 (0x0010 - 0x0000)
struct BFGActorUtils_IsPrespawningPoolPhase final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGActorUtils_IsPrespawningPoolPhase) == 0x000008, "Wrong alignment on BFGActorUtils_IsPrespawningPoolPhase");
static_assert(sizeof(BFGActorUtils_IsPrespawningPoolPhase) == 0x000010, "Wrong size on BFGActorUtils_IsPrespawningPoolPhase");
static_assert(offsetof(BFGActorUtils_IsPrespawningPoolPhase, _pWorldContext) == 0x000000, "Member 'BFGActorUtils_IsPrespawningPoolPhase::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_IsPrespawningPoolPhase, ReturnValue) == 0x000008, "Member 'BFGActorUtils_IsPrespawningPoolPhase::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.ResolveBindingArray
// 0x00A8 (0x00A8 - 0x0000)
struct BFGActorUtils_ResolveBindingArray final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGActorBinding                       _binding;                                          // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_ResolveBindingArray) == 0x000008, "Wrong alignment on BFGActorUtils_ResolveBindingArray");
static_assert(sizeof(BFGActorUtils_ResolveBindingArray) == 0x0000A8, "Wrong size on BFGActorUtils_ResolveBindingArray");
static_assert(offsetof(BFGActorUtils_ResolveBindingArray, _pWorldContextObject) == 0x000000, "Member 'BFGActorUtils_ResolveBindingArray::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ResolveBindingArray, _binding) == 0x000008, "Member 'BFGActorUtils_ResolveBindingArray::_binding' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ResolveBindingArray, ReturnValue) == 0x000098, "Member 'BFGActorUtils_ResolveBindingArray::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.ResolveBindingSingle
// 0x00A0 (0x00A0 - 0x0000)
struct BFGActorUtils_ResolveBindingSingle final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGActorBinding                       _binding;                                          // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_ResolveBindingSingle) == 0x000008, "Wrong alignment on BFGActorUtils_ResolveBindingSingle");
static_assert(sizeof(BFGActorUtils_ResolveBindingSingle) == 0x0000A0, "Wrong size on BFGActorUtils_ResolveBindingSingle");
static_assert(offsetof(BFGActorUtils_ResolveBindingSingle, _pWorldContextObject) == 0x000000, "Member 'BFGActorUtils_ResolveBindingSingle::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ResolveBindingSingle, _binding) == 0x000008, "Member 'BFGActorUtils_ResolveBindingSingle::_binding' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_ResolveBindingSingle, ReturnValue) == 0x000098, "Member 'BFGActorUtils_ResolveBindingSingle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGActorUtils.ReturnActorToPool
// 0x0008 (0x0008 - 0x0000)
struct BFGActorUtils_ReturnActorToPool final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_ReturnActorToPool) == 0x000008, "Wrong alignment on BFGActorUtils_ReturnActorToPool");
static_assert(sizeof(BFGActorUtils_ReturnActorToPool) == 0x000008, "Wrong size on BFGActorUtils_ReturnActorToPool");
static_assert(offsetof(BFGActorUtils_ReturnActorToPool, _pActor) == 0x000000, "Member 'BFGActorUtils_ReturnActorToPool::_pActor' has a wrong offset!");

// Function BFGCore.BFGActorUtils.TraceNavLocationToPhysicalGround
// 0x0020 (0x0020 - 0x0000)
struct BFGActorUtils_TraceNavLocationToPhysicalGround final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VInNavLocation;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorUtils_TraceNavLocationToPhysicalGround) == 0x000008, "Wrong alignment on BFGActorUtils_TraceNavLocationToPhysicalGround");
static_assert(sizeof(BFGActorUtils_TraceNavLocationToPhysicalGround) == 0x000020, "Wrong size on BFGActorUtils_TraceNavLocationToPhysicalGround");
static_assert(offsetof(BFGActorUtils_TraceNavLocationToPhysicalGround, WorldContextObject) == 0x000000, "Member 'BFGActorUtils_TraceNavLocationToPhysicalGround::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_TraceNavLocationToPhysicalGround, VInNavLocation) == 0x000008, "Member 'BFGActorUtils_TraceNavLocationToPhysicalGround::VInNavLocation' has a wrong offset!");
static_assert(offsetof(BFGActorUtils_TraceNavLocationToPhysicalGround, ReturnValue) == 0x000014, "Member 'BFGActorUtils_TraceNavLocationToPhysicalGround::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMothershipSubstate_MissionSelection.OnMissionAccepted
// 0x0130 (0x0130 - 0x0000)
struct BFGMothershipSubstate_MissionSelection_OnMissionAccepted final
{
public:
	struct FBFGMissionSelectionInfo               _pInfo;                                            // 0x0000(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMothershipSubstate_MissionSelection_OnMissionAccepted) == 0x000008, "Wrong alignment on BFGMothershipSubstate_MissionSelection_OnMissionAccepted");
static_assert(sizeof(BFGMothershipSubstate_MissionSelection_OnMissionAccepted) == 0x000130, "Wrong size on BFGMothershipSubstate_MissionSelection_OnMissionAccepted");
static_assert(offsetof(BFGMothershipSubstate_MissionSelection_OnMissionAccepted, _pInfo) == 0x000000, "Member 'BFGMothershipSubstate_MissionSelection_OnMissionAccepted::_pInfo' has a wrong offset!");

// Function BFGCore.BFGMothershipSubstate_MissionSelection.OnSandboxStart
// 0x0130 (0x0130 - 0x0000)
struct BFGMothershipSubstate_MissionSelection_OnSandboxStart final
{
public:
	struct FBFGMissionSelectionInfo               _pInfo;                                            // 0x0000(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMothershipSubstate_MissionSelection_OnSandboxStart) == 0x000008, "Wrong alignment on BFGMothershipSubstate_MissionSelection_OnSandboxStart");
static_assert(sizeof(BFGMothershipSubstate_MissionSelection_OnSandboxStart) == 0x000130, "Wrong size on BFGMothershipSubstate_MissionSelection_OnSandboxStart");
static_assert(offsetof(BFGMothershipSubstate_MissionSelection_OnSandboxStart, _pInfo) == 0x000000, "Member 'BFGMothershipSubstate_MissionSelection_OnSandboxStart::_pInfo' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetDistanceToFirelineSquared
// 0x0028 (0x0028 - 0x0000)
struct BFGAICombatMediator_GetDistanceToFirelineSquared final
{
public:
	struct FVector                                _vFromLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vShooterLocation;                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vTargetLocation;                                  // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAICombatMediator_GetDistanceToFirelineSquared) == 0x000004, "Wrong alignment on BFGAICombatMediator_GetDistanceToFirelineSquared");
static_assert(sizeof(BFGAICombatMediator_GetDistanceToFirelineSquared) == 0x000028, "Wrong size on BFGAICombatMediator_GetDistanceToFirelineSquared");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToFirelineSquared, _vFromLocation) == 0x000000, "Member 'BFGAICombatMediator_GetDistanceToFirelineSquared::_vFromLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToFirelineSquared, _vShooterLocation) == 0x00000C, "Member 'BFGAICombatMediator_GetDistanceToFirelineSquared::_vShooterLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToFirelineSquared, _vTargetLocation) == 0x000018, "Member 'BFGAICombatMediator_GetDistanceToFirelineSquared::_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToFirelineSquared, ReturnValue) == 0x000024, "Member 'BFGAICombatMediator_GetDistanceToFirelineSquared::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetTargetTracker
// 0x0008 (0x0008 - 0x0000)
struct BFGAICombatMediator_GetTargetTracker final
{
public:
	class UBFGAICombatMediator_TargetTracker*     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAICombatMediator_GetTargetTracker) == 0x000008, "Wrong alignment on BFGAICombatMediator_GetTargetTracker");
static_assert(sizeof(BFGAICombatMediator_GetTargetTracker) == 0x000008, "Wrong size on BFGAICombatMediator_GetTargetTracker");
static_assert(offsetof(BFGAICombatMediator_GetTargetTracker, ReturnValue) == 0x000000, "Member 'BFGAICombatMediator_GetTargetTracker::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetClosestAttackingNPC
// 0x0038 (0x0038 - 0x0000)
struct BFGAICombatMediator_GetClosestAttackingNPC final
{
public:
	struct FVector                                _vFromLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pAttackTarget;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGAICombatParticipant> _pExcludedPawn;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGAICombatParticipant> ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAICombatMediator_GetClosestAttackingNPC) == 0x000008, "Wrong alignment on BFGAICombatMediator_GetClosestAttackingNPC");
static_assert(sizeof(BFGAICombatMediator_GetClosestAttackingNPC) == 0x000038, "Wrong size on BFGAICombatMediator_GetClosestAttackingNPC");
static_assert(offsetof(BFGAICombatMediator_GetClosestAttackingNPC, _vFromLocation) == 0x000000, "Member 'BFGAICombatMediator_GetClosestAttackingNPC::_vFromLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestAttackingNPC, _pAttackTarget) == 0x000010, "Member 'BFGAICombatMediator_GetClosestAttackingNPC::_pAttackTarget' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestAttackingNPC, _pExcludedPawn) == 0x000018, "Member 'BFGAICombatMediator_GetClosestAttackingNPC::_pExcludedPawn' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestAttackingNPC, ReturnValue) == 0x000028, "Member 'BFGAICombatMediator_GetClosestAttackingNPC::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetClosestNPCForTargetsAndStates
// 0x0040 (0x0040 - 0x0000)
struct BFGAICombatMediator_GetClosestNPCForTargetsAndStates final
{
public:
	struct FVector                                _vFromLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         _apTargets;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EBFGCombatState_NPC>                   _aCombatStates;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGAICombatParticipant> ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAICombatMediator_GetClosestNPCForTargetsAndStates) == 0x000008, "Wrong alignment on BFGAICombatMediator_GetClosestNPCForTargetsAndStates");
static_assert(sizeof(BFGAICombatMediator_GetClosestNPCForTargetsAndStates) == 0x000040, "Wrong size on BFGAICombatMediator_GetClosestNPCForTargetsAndStates");
static_assert(offsetof(BFGAICombatMediator_GetClosestNPCForTargetsAndStates, _vFromLocation) == 0x000000, "Member 'BFGAICombatMediator_GetClosestNPCForTargetsAndStates::_vFromLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestNPCForTargetsAndStates, _apTargets) == 0x000010, "Member 'BFGAICombatMediator_GetClosestNPCForTargetsAndStates::_apTargets' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestNPCForTargetsAndStates, _aCombatStates) == 0x000020, "Member 'BFGAICombatMediator_GetClosestNPCForTargetsAndStates::_aCombatStates' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestNPCForTargetsAndStates, ReturnValue) == 0x000030, "Member 'BFGAICombatMediator_GetClosestNPCForTargetsAndStates::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetClosestParticipant
// 0x0030 (0x0030 - 0x0000)
struct BFGAICombatMediator_GetClosestParticipant final
{
public:
	struct FVector                                _vFromLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vOutIntendedLocation;                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  _pExcludedPawn;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGAICombatParticipant> ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAICombatMediator_GetClosestParticipant) == 0x000008, "Wrong alignment on BFGAICombatMediator_GetClosestParticipant");
static_assert(sizeof(BFGAICombatMediator_GetClosestParticipant) == 0x000030, "Wrong size on BFGAICombatMediator_GetClosestParticipant");
static_assert(offsetof(BFGAICombatMediator_GetClosestParticipant, _vFromLocation) == 0x000000, "Member 'BFGAICombatMediator_GetClosestParticipant::_vFromLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestParticipant, _vOutIntendedLocation) == 0x00000C, "Member 'BFGAICombatMediator_GetClosestParticipant::_vOutIntendedLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestParticipant, _pExcludedPawn) == 0x000018, "Member 'BFGAICombatMediator_GetClosestParticipant::_pExcludedPawn' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetClosestParticipant, ReturnValue) == 0x000020, "Member 'BFGAICombatMediator_GetClosestParticipant::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetCombatState
// 0x0020 (0x0020 - 0x0000)
struct BFGAICombatMediator_GetCombatState final
{
public:
	class AActor*                                 _pAttackTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGAICombatParticipant> _pParticipant;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EBFGCombatState_NPC                           ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAICombatMediator_GetCombatState) == 0x000008, "Wrong alignment on BFGAICombatMediator_GetCombatState");
static_assert(sizeof(BFGAICombatMediator_GetCombatState) == 0x000020, "Wrong size on BFGAICombatMediator_GetCombatState");
static_assert(offsetof(BFGAICombatMediator_GetCombatState, _pAttackTarget) == 0x000000, "Member 'BFGAICombatMediator_GetCombatState::_pAttackTarget' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetCombatState, _pParticipant) == 0x000008, "Member 'BFGAICombatMediator_GetCombatState::_pParticipant' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetCombatState, ReturnValue) == 0x000018, "Member 'BFGAICombatMediator_GetCombatState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetDistanceToClosestFireline
// 0x0020 (0x0020 - 0x0000)
struct BFGAICombatMediator_GetDistanceToClosestFireline final
{
public:
	struct FVector                                _vFromLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  _pExcludedPawn;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAICombatMediator_GetDistanceToClosestFireline) == 0x000008, "Wrong alignment on BFGAICombatMediator_GetDistanceToClosestFireline");
static_assert(sizeof(BFGAICombatMediator_GetDistanceToClosestFireline) == 0x000020, "Wrong size on BFGAICombatMediator_GetDistanceToClosestFireline");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToClosestFireline, _vFromLocation) == 0x000000, "Member 'BFGAICombatMediator_GetDistanceToClosestFireline::_vFromLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToClosestFireline, _pExcludedPawn) == 0x000010, "Member 'BFGAICombatMediator_GetDistanceToClosestFireline::_pExcludedPawn' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToClosestFireline, ReturnValue) == 0x000018, "Member 'BFGAICombatMediator_GetDistanceToClosestFireline::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetDistanceToClosestParticipant
// 0x0020 (0x0020 - 0x0000)
struct BFGAICombatMediator_GetDistanceToClosestParticipant final
{
public:
	struct FVector                                _vFromLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  _pExcludedPawn;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAICombatMediator_GetDistanceToClosestParticipant) == 0x000008, "Wrong alignment on BFGAICombatMediator_GetDistanceToClosestParticipant");
static_assert(sizeof(BFGAICombatMediator_GetDistanceToClosestParticipant) == 0x000020, "Wrong size on BFGAICombatMediator_GetDistanceToClosestParticipant");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToClosestParticipant, _vFromLocation) == 0x000000, "Member 'BFGAICombatMediator_GetDistanceToClosestParticipant::_vFromLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToClosestParticipant, _pExcludedPawn) == 0x000010, "Member 'BFGAICombatMediator_GetDistanceToClosestParticipant::_pExcludedPawn' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToClosestParticipant, ReturnValue) == 0x000018, "Member 'BFGAICombatMediator_GetDistanceToClosestParticipant::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.GetDistanceToParticipant
// 0x0028 (0x0028 - 0x0000)
struct BFGAICombatMediator_GetDistanceToParticipant final
{
public:
	struct FVector                                _vFromLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBFGAICombatParticipant> _pParticipant;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAICombatMediator_GetDistanceToParticipant) == 0x000008, "Wrong alignment on BFGAICombatMediator_GetDistanceToParticipant");
static_assert(sizeof(BFGAICombatMediator_GetDistanceToParticipant) == 0x000028, "Wrong size on BFGAICombatMediator_GetDistanceToParticipant");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToParticipant, _vFromLocation) == 0x000000, "Member 'BFGAICombatMediator_GetDistanceToParticipant::_vFromLocation' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToParticipant, _pParticipant) == 0x000010, "Member 'BFGAICombatMediator_GetDistanceToParticipant::_pParticipant' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_GetDistanceToParticipant, ReturnValue) == 0x000020, "Member 'BFGAICombatMediator_GetDistanceToParticipant::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator.IsTargeted
// 0x0010 (0x0010 - 0x0000)
struct BFGAICombatMediator_IsTargeted final
{
public:
	class AActor*                                 _pAttackTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAICombatMediator_IsTargeted) == 0x000008, "Wrong alignment on BFGAICombatMediator_IsTargeted");
static_assert(sizeof(BFGAICombatMediator_IsTargeted) == 0x000010, "Wrong size on BFGAICombatMediator_IsTargeted");
static_assert(offsetof(BFGAICombatMediator_IsTargeted, _pAttackTarget) == 0x000000, "Member 'BFGAICombatMediator_IsTargeted::_pAttackTarget' has a wrong offset!");
static_assert(offsetof(BFGAICombatMediator_IsTargeted, ReturnValue) == 0x000008, "Member 'BFGAICombatMediator_IsTargeted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBurningGround.GetManager
// 0x0008 (0x0008 - 0x0000)
struct BFGBurningGround_GetManager final
{
public:
	class UBFGBurningGroundManager*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBurningGround_GetManager) == 0x000008, "Wrong alignment on BFGBurningGround_GetManager");
static_assert(sizeof(BFGBurningGround_GetManager) == 0x000008, "Wrong size on BFGBurningGround_GetManager");
static_assert(offsetof(BFGBurningGround_GetManager, ReturnValue) == 0x000000, "Member 'BFGBurningGround_GetManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBurningGround.ConvertWorldToRenderTarget
// 0x0014 (0x0014 - 0x0000)
struct BFGBurningGround_ConvertWorldToRenderTarget final
{
public:
	struct FVector                                _vWorldPos;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBurningGround_ConvertWorldToRenderTarget) == 0x000004, "Wrong alignment on BFGBurningGround_ConvertWorldToRenderTarget");
static_assert(sizeof(BFGBurningGround_ConvertWorldToRenderTarget) == 0x000014, "Wrong size on BFGBurningGround_ConvertWorldToRenderTarget");
static_assert(offsetof(BFGBurningGround_ConvertWorldToRenderTarget, _vWorldPos) == 0x000000, "Member 'BFGBurningGround_ConvertWorldToRenderTarget::_vWorldPos' has a wrong offset!");
static_assert(offsetof(BFGBurningGround_ConvertWorldToRenderTarget, ReturnValue) == 0x00000C, "Member 'BFGBurningGround_ConvertWorldToRenderTarget::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_Mothership_Submenu.ActionMenuContext__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_Mothership_Submenu_ActionMenuContext__DelegateSignature final
{
public:
	TArray<struct FBFGTreeMenuContext>            _aMenuContextPath;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Submenu_ActionMenuContext__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Submenu_ActionMenuContext__DelegateSignature");
static_assert(sizeof(BFGWidget_Mothership_Submenu_ActionMenuContext__DelegateSignature) == 0x000010, "Wrong size on BFGWidget_Mothership_Submenu_ActionMenuContext__DelegateSignature");
static_assert(offsetof(BFGWidget_Mothership_Submenu_ActionMenuContext__DelegateSignature, _aMenuContextPath) == 0x000000, "Member 'BFGWidget_Mothership_Submenu_ActionMenuContext__DelegateSignature::_aMenuContextPath' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Submenu.PlayAnimationHide
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Mothership_Submenu_PlayAnimationHide final
{
public:
	float                                         _fPlaybackSpeed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Submenu_PlayAnimationHide) == 0x000004, "Wrong alignment on BFGWidget_Mothership_Submenu_PlayAnimationHide");
static_assert(sizeof(BFGWidget_Mothership_Submenu_PlayAnimationHide) == 0x000004, "Wrong size on BFGWidget_Mothership_Submenu_PlayAnimationHide");
static_assert(offsetof(BFGWidget_Mothership_Submenu_PlayAnimationHide, _fPlaybackSpeed) == 0x000000, "Member 'BFGWidget_Mothership_Submenu_PlayAnimationHide::_fPlaybackSpeed' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Submenu.PlayAnimationShow
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Mothership_Submenu_PlayAnimationShow final
{
public:
	float                                         _fPlaybackSpeed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Submenu_PlayAnimationShow) == 0x000004, "Wrong alignment on BFGWidget_Mothership_Submenu_PlayAnimationShow");
static_assert(sizeof(BFGWidget_Mothership_Submenu_PlayAnimationShow) == 0x000004, "Wrong size on BFGWidget_Mothership_Submenu_PlayAnimationShow");
static_assert(offsetof(BFGWidget_Mothership_Submenu_PlayAnimationShow, _fPlaybackSpeed) == 0x000000, "Member 'BFGWidget_Mothership_Submenu_PlayAnimationShow::_fPlaybackSpeed' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.EnableExploreInfo
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_EnableExploreInfo final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_EnableExploreInfo) == 0x000001, "Wrong alignment on BFGWidget_Mothership_MissionSelect_EnableExploreInfo");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_EnableExploreInfo) == 0x000001, "Wrong size on BFGWidget_Mothership_MissionSelect_EnableExploreInfo");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_EnableExploreInfo, _bEnabled) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_EnableExploreInfo::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.GetNodeByWorldIdentifier
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier final
{
public:
	class FName                                   _oWorldName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGWidgetMissionSelectionNode*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier) == 0x000008, "Wrong alignment on BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier) == 0x000010, "Wrong size on BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier, _oWorldName) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier::_oWorldName' has a wrong offset!");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier, ReturnValue) == 0x000008, "Member 'BFGWidget_Mothership_MissionSelect_GetNodeByWorldIdentifier::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.OnNodeClicked
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_OnNodeClicked final
{
public:
	class UBFGWidgetMissionSelectionNode*         _pNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_OnNodeClicked) == 0x000008, "Wrong alignment on BFGWidget_Mothership_MissionSelect_OnNodeClicked");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_OnNodeClicked) == 0x000008, "Wrong size on BFGWidget_Mothership_MissionSelect_OnNodeClicked");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_OnNodeClicked, _pNode) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_OnNodeClicked::_pNode' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.OnNodeDoubleClicked
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_OnNodeDoubleClicked final
{
public:
	class UBFGWidgetMissionSelectionNode*         _pNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_OnNodeDoubleClicked) == 0x000008, "Wrong alignment on BFGWidget_Mothership_MissionSelect_OnNodeDoubleClicked");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_OnNodeDoubleClicked) == 0x000008, "Wrong size on BFGWidget_Mothership_MissionSelect_OnNodeDoubleClicked");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_OnNodeDoubleClicked, _pNode) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_OnNodeDoubleClicked::_pNode' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.SetChallengeDisabled
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_SetChallengeDisabled final
{
public:
	EBFGChallengeType                             _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDisabled;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_SetChallengeDisabled) == 0x000001, "Wrong alignment on BFGWidget_Mothership_MissionSelect_SetChallengeDisabled");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_SetChallengeDisabled) == 0x000002, "Wrong size on BFGWidget_Mothership_MissionSelect_SetChallengeDisabled");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_SetChallengeDisabled, _eType) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_SetChallengeDisabled::_eType' has a wrong offset!");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_SetChallengeDisabled, _bDisabled) == 0x000001, "Member 'BFGWidget_Mothership_MissionSelect_SetChallengeDisabled::_bDisabled' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.SetChallengeRating
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_SetChallengeRating final
{
public:
	EBFGChallengeType                             _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iRating;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_SetChallengeRating) == 0x000004, "Wrong alignment on BFGWidget_Mothership_MissionSelect_SetChallengeRating");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_SetChallengeRating) == 0x000008, "Wrong size on BFGWidget_Mothership_MissionSelect_SetChallengeRating");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_SetChallengeRating, _eType) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_SetChallengeRating::_eType' has a wrong offset!");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_SetChallengeRating, _iRating) == 0x000004, "Member 'BFGWidget_Mothership_MissionSelect_SetChallengeRating::_iRating' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.SetDroneCount
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_SetDroneCount final
{
public:
	int32                                         _iMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iCurrent;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_SetDroneCount) == 0x000004, "Wrong alignment on BFGWidget_Mothership_MissionSelect_SetDroneCount");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_SetDroneCount) == 0x000008, "Wrong size on BFGWidget_Mothership_MissionSelect_SetDroneCount");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_SetDroneCount, _iMax) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_SetDroneCount::_iMax' has a wrong offset!");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_SetDroneCount, _iCurrent) == 0x000004, "Member 'BFGWidget_Mothership_MissionSelect_SetDroneCount::_iCurrent' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.UpdateDescription
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_UpdateDescription final
{
public:
	class FText                                   _oDescription;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_UpdateDescription) == 0x000008, "Wrong alignment on BFGWidget_Mothership_MissionSelect_UpdateDescription");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_UpdateDescription) == 0x000018, "Wrong size on BFGWidget_Mothership_MissionSelect_UpdateDescription");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_UpdateDescription, _oDescription) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_UpdateDescription::_oDescription' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.UpdateImage
// 0x0088 (0x0088 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_UpdateImage final
{
public:
	struct FSlateBrush                            _oImage;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_UpdateImage) == 0x000008, "Wrong alignment on BFGWidget_Mothership_MissionSelect_UpdateImage");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_UpdateImage) == 0x000088, "Wrong size on BFGWidget_Mothership_MissionSelect_UpdateImage");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_UpdateImage, _oImage) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_UpdateImage::_oImage' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelect.UpdateTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Mothership_MissionSelect_UpdateTitle final
{
public:
	class FText                                   _oTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelect_UpdateTitle) == 0x000008, "Wrong alignment on BFGWidget_Mothership_MissionSelect_UpdateTitle");
static_assert(sizeof(BFGWidget_Mothership_MissionSelect_UpdateTitle) == 0x000018, "Wrong size on BFGWidget_Mothership_MissionSelect_UpdateTitle");
static_assert(offsetof(BFGWidget_Mothership_MissionSelect_UpdateTitle, _oTitle) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelect_UpdateTitle::_oTitle' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_SelectorItem.ActionInt__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_SelectorItem_ActionInt__DelegateSignature final
{
public:
	int32                                         _iInteger;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_SelectorItem_ActionInt__DelegateSignature) == 0x000004, "Wrong alignment on BFGWidget_SelectorItem_ActionInt__DelegateSignature");
static_assert(sizeof(BFGWidget_SelectorItem_ActionInt__DelegateSignature) == 0x000004, "Wrong size on BFGWidget_SelectorItem_ActionInt__DelegateSignature");
static_assert(offsetof(BFGWidget_SelectorItem_ActionInt__DelegateSignature, _iInteger) == 0x000000, "Member 'BFGWidget_SelectorItem_ActionInt__DelegateSignature::_iInteger' has a wrong offset!");

// Function BFGCore.BFGWidget_SelectorItem.GetElementImage
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_SelectorItem_GetElementImage final
{
public:
	class UImage*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_SelectorItem_GetElementImage) == 0x000008, "Wrong alignment on BFGWidget_SelectorItem_GetElementImage");
static_assert(sizeof(BFGWidget_SelectorItem_GetElementImage) == 0x000008, "Wrong size on BFGWidget_SelectorItem_GetElementImage");
static_assert(offsetof(BFGWidget_SelectorItem_GetElementImage, ReturnValue) == 0x000000, "Member 'BFGWidget_SelectorItem_GetElementImage::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_SelectorItem.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_SelectorItem_SetSelected final
{
public:
	bool                                          _bSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_SelectorItem_SetSelected) == 0x000001, "Wrong alignment on BFGWidget_SelectorItem_SetSelected");
static_assert(sizeof(BFGWidget_SelectorItem_SetSelected) == 0x000001, "Wrong size on BFGWidget_SelectorItem_SetSelected");
static_assert(offsetof(BFGWidget_SelectorItem_SetSelected, _bSelected) == 0x000000, "Member 'BFGWidget_SelectorItem_SetSelected::_bSelected' has a wrong offset!");

// Function BFGCore.BFGAICombatMediator_TargetTracker.OnObstaclePlaced
// 0x0008 (0x0008 - 0x0000)
struct BFGAICombatMediator_TargetTracker_OnObstaclePlaced final
{
public:
	class ABFGDynamicObstacle_Sphere*             _pSphere;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAICombatMediator_TargetTracker_OnObstaclePlaced) == 0x000008, "Wrong alignment on BFGAICombatMediator_TargetTracker_OnObstaclePlaced");
static_assert(sizeof(BFGAICombatMediator_TargetTracker_OnObstaclePlaced) == 0x000008, "Wrong size on BFGAICombatMediator_TargetTracker_OnObstaclePlaced");
static_assert(offsetof(BFGAICombatMediator_TargetTracker_OnObstaclePlaced, _pSphere) == 0x000000, "Member 'BFGAICombatMediator_TargetTracker_OnObstaclePlaced::_pSphere' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_DialogOption_ComboBox.ActionComboBox__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_DialogOption_ComboBox_ActionComboBox__DelegateSignature final
{
public:
	class UBFGWidget_DialogOption_ComboBox*       _pComboBox;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_ComboBox_ActionComboBox__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_ComboBox_ActionComboBox__DelegateSignature");
static_assert(sizeof(BFGWidget_DialogOption_ComboBox_ActionComboBox__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_DialogOption_ComboBox_ActionComboBox__DelegateSignature");
static_assert(offsetof(BFGWidget_DialogOption_ComboBox_ActionComboBox__DelegateSignature, _pComboBox) == 0x000000, "Member 'BFGWidget_DialogOption_ComboBox_ActionComboBox__DelegateSignature::_pComboBox' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_ComboBox.SetCurrentOptionText
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_DialogOption_ComboBox_SetCurrentOptionText final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_ComboBox_SetCurrentOptionText) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_ComboBox_SetCurrentOptionText");
static_assert(sizeof(BFGWidget_DialogOption_ComboBox_SetCurrentOptionText) == 0x000018, "Wrong size on BFGWidget_DialogOption_ComboBox_SetCurrentOptionText");
static_assert(offsetof(BFGWidget_DialogOption_ComboBox_SetCurrentOptionText, _strText) == 0x000000, "Member 'BFGWidget_DialogOption_ComboBox_SetCurrentOptionText::_strText' has a wrong offset!");

// Function BFGCore.BFGAimUtils.AimBallisticProjectileAtMovingTarget
// 0x0058 (0x0058 - 0x0000)
struct BFGAimUtils_AimBallisticProjectileAtMovingTarget final
{
public:
	class UObject*                                _WorldContext;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGAimBallisticProjectileParameters   _rParameters;                                      // 0x0008(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGAimBallisticProjectileResponse     ReturnValue;                                       // 0x0038(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAimUtils_AimBallisticProjectileAtMovingTarget) == 0x000008, "Wrong alignment on BFGAimUtils_AimBallisticProjectileAtMovingTarget");
static_assert(sizeof(BFGAimUtils_AimBallisticProjectileAtMovingTarget) == 0x000058, "Wrong size on BFGAimUtils_AimBallisticProjectileAtMovingTarget");
static_assert(offsetof(BFGAimUtils_AimBallisticProjectileAtMovingTarget, _WorldContext) == 0x000000, "Member 'BFGAimUtils_AimBallisticProjectileAtMovingTarget::_WorldContext' has a wrong offset!");
static_assert(offsetof(BFGAimUtils_AimBallisticProjectileAtMovingTarget, _rParameters) == 0x000008, "Member 'BFGAimUtils_AimBallisticProjectileAtMovingTarget::_rParameters' has a wrong offset!");
static_assert(offsetof(BFGAimUtils_AimBallisticProjectileAtMovingTarget, ReturnValue) == 0x000038, "Member 'BFGAimUtils_AimBallisticProjectileAtMovingTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCreditsLetter.OnCompHit
// 0x00B0 (0x00B0 - 0x0000)
struct BFGCreditsLetter_OnCompHit final
{
public:
	class UPrimitiveComponent*                    _pHitComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _pOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _pNormalImpulse;                                   // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _pHit;                                             // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGCreditsLetter_OnCompHit) == 0x000008, "Wrong alignment on BFGCreditsLetter_OnCompHit");
static_assert(sizeof(BFGCreditsLetter_OnCompHit) == 0x0000B0, "Wrong size on BFGCreditsLetter_OnCompHit");
static_assert(offsetof(BFGCreditsLetter_OnCompHit, _pHitComp) == 0x000000, "Member 'BFGCreditsLetter_OnCompHit::_pHitComp' has a wrong offset!");
static_assert(offsetof(BFGCreditsLetter_OnCompHit, _pOtherActor) == 0x000008, "Member 'BFGCreditsLetter_OnCompHit::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGCreditsLetter_OnCompHit, _pOtherComp) == 0x000010, "Member 'BFGCreditsLetter_OnCompHit::_pOtherComp' has a wrong offset!");
static_assert(offsetof(BFGCreditsLetter_OnCompHit, _pNormalImpulse) == 0x000018, "Member 'BFGCreditsLetter_OnCompHit::_pNormalImpulse' has a wrong offset!");
static_assert(offsetof(BFGCreditsLetter_OnCompHit, _pHit) == 0x000024, "Member 'BFGCreditsLetter_OnCompHit::_pHit' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptionsCategory.AddOptionToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptionsCategory_AddOptionToLayout final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptionsCategory_AddOptionToLayout) == 0x000008, "Wrong alignment on BFGWidget_GameOptionsCategory_AddOptionToLayout");
static_assert(sizeof(BFGWidget_GameOptionsCategory_AddOptionToLayout) == 0x000008, "Wrong size on BFGWidget_GameOptionsCategory_AddOptionToLayout");
static_assert(offsetof(BFGWidget_GameOptionsCategory_AddOptionToLayout, _pOption) == 0x000000, "Member 'BFGWidget_GameOptionsCategory_AddOptionToLayout::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptionsCategory.ScrollIntoView
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptionsCategory_ScrollIntoView final
{
public:
	class UBFGWidget_DialogOption*                _pDialogOption;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptionsCategory_ScrollIntoView) == 0x000008, "Wrong alignment on BFGWidget_GameOptionsCategory_ScrollIntoView");
static_assert(sizeof(BFGWidget_GameOptionsCategory_ScrollIntoView) == 0x000008, "Wrong size on BFGWidget_GameOptionsCategory_ScrollIntoView");
static_assert(offsetof(BFGWidget_GameOptionsCategory_ScrollIntoView, _pDialogOption) == 0x000000, "Member 'BFGWidget_GameOptionsCategory_ScrollIntoView::_pDialogOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptionsGamepad.AddPanelToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptionsGamepad_AddPanelToLayout final
{
public:
	class UBFGWidget_GamepadPanel*                _pPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptionsGamepad_AddPanelToLayout) == 0x000008, "Wrong alignment on BFGWidget_GameOptionsGamepad_AddPanelToLayout");
static_assert(sizeof(BFGWidget_GameOptionsGamepad_AddPanelToLayout) == 0x000008, "Wrong size on BFGWidget_GameOptionsGamepad_AddPanelToLayout");
static_assert(offsetof(BFGWidget_GameOptionsGamepad_AddPanelToLayout, _pPanel) == 0x000000, "Member 'BFGWidget_GameOptionsGamepad_AddPanelToLayout::_pPanel' has a wrong offset!");

// Function BFGCore.BFGAINetworkPathChaseMediator.OnAgentDespawned
// 0x0008 (0x0008 - 0x0000)
struct BFGAINetworkPathChaseMediator_OnAgentDespawned final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAINetworkPathChaseMediator_OnAgentDespawned) == 0x000008, "Wrong alignment on BFGAINetworkPathChaseMediator_OnAgentDespawned");
static_assert(sizeof(BFGAINetworkPathChaseMediator_OnAgentDespawned) == 0x000008, "Wrong size on BFGAINetworkPathChaseMediator_OnAgentDespawned");
static_assert(offsetof(BFGAINetworkPathChaseMediator_OnAgentDespawned, _pAgent) == 0x000000, "Member 'BFGAINetworkPathChaseMediator_OnAgentDespawned::_pAgent' has a wrong offset!");

// Function BFGCore.BFGAISystem.OnWorldLoading
// 0x0010 (0x0010 - 0x0000)
struct BFGAISystem_OnWorldLoading final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_OnWorldLoading) == 0x000008, "Wrong alignment on BFGAISystem_OnWorldLoading");
static_assert(sizeof(BFGAISystem_OnWorldLoading) == 0x000010, "Wrong size on BFGAISystem_OnWorldLoading");
static_assert(offsetof(BFGAISystem_OnWorldLoading, _pGameInstance) == 0x000000, "Member 'BFGAISystem_OnWorldLoading::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGAISystem_OnWorldLoading, _pWorld) == 0x000008, "Member 'BFGAISystem_OnWorldLoading::_pWorld' has a wrong offset!");

// Function BFGCore.BFGAISystem.SetAIAmmoShotDelayLogBase
// 0x0004 (0x0004 - 0x0000)
struct BFGAISystem_SetAIAmmoShotDelayLogBase final
{
public:
	float                                         _fNewBase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_SetAIAmmoShotDelayLogBase) == 0x000004, "Wrong alignment on BFGAISystem_SetAIAmmoShotDelayLogBase");
static_assert(sizeof(BFGAISystem_SetAIAmmoShotDelayLogBase) == 0x000004, "Wrong size on BFGAISystem_SetAIAmmoShotDelayLogBase");
static_assert(offsetof(BFGAISystem_SetAIAmmoShotDelayLogBase, _fNewBase) == 0x000000, "Member 'BFGAISystem_SetAIAmmoShotDelayLogBase::_fNewBase' has a wrong offset!");

// Function BFGCore.BFGAISystem.SetAIAmmoShotDelayScalingFactor
// 0x0004 (0x0004 - 0x0000)
struct BFGAISystem_SetAIAmmoShotDelayScalingFactor final
{
public:
	float                                         _fNewFactor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_SetAIAmmoShotDelayScalingFactor) == 0x000004, "Wrong alignment on BFGAISystem_SetAIAmmoShotDelayScalingFactor");
static_assert(sizeof(BFGAISystem_SetAIAmmoShotDelayScalingFactor) == 0x000004, "Wrong size on BFGAISystem_SetAIAmmoShotDelayScalingFactor");
static_assert(offsetof(BFGAISystem_SetAIAmmoShotDelayScalingFactor, _fNewFactor) == 0x000000, "Member 'BFGAISystem_SetAIAmmoShotDelayScalingFactor::_fNewFactor' has a wrong offset!");

// Function BFGCore.BFGAISystem.SetAICombatReloadLogBase
// 0x0004 (0x0004 - 0x0000)
struct BFGAISystem_SetAICombatReloadLogBase final
{
public:
	float                                         _fNewBase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_SetAICombatReloadLogBase) == 0x000004, "Wrong alignment on BFGAISystem_SetAICombatReloadLogBase");
static_assert(sizeof(BFGAISystem_SetAICombatReloadLogBase) == 0x000004, "Wrong size on BFGAISystem_SetAICombatReloadLogBase");
static_assert(offsetof(BFGAISystem_SetAICombatReloadLogBase, _fNewBase) == 0x000000, "Member 'BFGAISystem_SetAICombatReloadLogBase::_fNewBase' has a wrong offset!");

// Function BFGCore.BFGAISystem.SetAICombatReloadTimeScalingFactor
// 0x0004 (0x0004 - 0x0000)
struct BFGAISystem_SetAICombatReloadTimeScalingFactor final
{
public:
	float                                         _fNewFactor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_SetAICombatReloadTimeScalingFactor) == 0x000004, "Wrong alignment on BFGAISystem_SetAICombatReloadTimeScalingFactor");
static_assert(sizeof(BFGAISystem_SetAICombatReloadTimeScalingFactor) == 0x000004, "Wrong size on BFGAISystem_SetAICombatReloadTimeScalingFactor");
static_assert(offsetof(BFGAISystem_SetAICombatReloadTimeScalingFactor, _fNewFactor) == 0x000000, "Member 'BFGAISystem_SetAICombatReloadTimeScalingFactor::_fNewFactor' has a wrong offset!");

// Function BFGCore.BFGAISystem.GetAlertSystemManager
// 0x0008 (0x0008 - 0x0000)
struct BFGAISystem_GetAlertSystemManager final
{
public:
	class UBFGAlertSystemManager*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_GetAlertSystemManager) == 0x000008, "Wrong alignment on BFGAISystem_GetAlertSystemManager");
static_assert(sizeof(BFGAISystem_GetAlertSystemManager) == 0x000008, "Wrong size on BFGAISystem_GetAlertSystemManager");
static_assert(offsetof(BFGAISystem_GetAlertSystemManager, ReturnValue) == 0x000000, "Member 'BFGAISystem_GetAlertSystemManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAISystem.GetCombatMediator
// 0x0008 (0x0008 - 0x0000)
struct BFGAISystem_GetCombatMediator final
{
public:
	class UBFGAICombatMediator*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_GetCombatMediator) == 0x000008, "Wrong alignment on BFGAISystem_GetCombatMediator");
static_assert(sizeof(BFGAISystem_GetCombatMediator) == 0x000008, "Wrong size on BFGAISystem_GetCombatMediator");
static_assert(offsetof(BFGAISystem_GetCombatMediator, ReturnValue) == 0x000000, "Member 'BFGAISystem_GetCombatMediator::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAISystem.GetDyanmicObstaclePool_Box
// 0x0008 (0x0008 - 0x0000)
struct BFGAISystem_GetDyanmicObstaclePool_Box final
{
public:
	class UBFGDynamicObstaclePool_Box*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_GetDyanmicObstaclePool_Box) == 0x000008, "Wrong alignment on BFGAISystem_GetDyanmicObstaclePool_Box");
static_assert(sizeof(BFGAISystem_GetDyanmicObstaclePool_Box) == 0x000008, "Wrong size on BFGAISystem_GetDyanmicObstaclePool_Box");
static_assert(offsetof(BFGAISystem_GetDyanmicObstaclePool_Box, ReturnValue) == 0x000000, "Member 'BFGAISystem_GetDyanmicObstaclePool_Box::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAISystem.GetDyanmicObstaclePool_Sphere
// 0x0008 (0x0008 - 0x0000)
struct BFGAISystem_GetDyanmicObstaclePool_Sphere final
{
public:
	class UBFGDynamicObstaclePool_Sphere*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_GetDyanmicObstaclePool_Sphere) == 0x000008, "Wrong alignment on BFGAISystem_GetDyanmicObstaclePool_Sphere");
static_assert(sizeof(BFGAISystem_GetDyanmicObstaclePool_Sphere) == 0x000008, "Wrong size on BFGAISystem_GetDyanmicObstaclePool_Sphere");
static_assert(offsetof(BFGAISystem_GetDyanmicObstaclePool_Sphere, ReturnValue) == 0x000000, "Member 'BFGAISystem_GetDyanmicObstaclePool_Sphere::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAISystem.GetVisibilityCheckerPool_Box
// 0x0008 (0x0008 - 0x0000)
struct BFGAISystem_GetVisibilityCheckerPool_Box final
{
public:
	class UBFGVisibilityCheckerPool_Box*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAISystem_GetVisibilityCheckerPool_Box) == 0x000008, "Wrong alignment on BFGAISystem_GetVisibilityCheckerPool_Box");
static_assert(sizeof(BFGAISystem_GetVisibilityCheckerPool_Box) == 0x000008, "Wrong size on BFGAISystem_GetVisibilityCheckerPool_Box");
static_assert(offsetof(BFGAISystem_GetVisibilityCheckerPool_Box, ReturnValue) == 0x000000, "Member 'BFGAISystem_GetVisibilityCheckerPool_Box::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Timer.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_Timer_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Timer_GetDuration) == 0x000004, "Wrong alignment on BFGQuest_Timer_GetDuration");
static_assert(sizeof(BFGQuest_Timer_GetDuration) == 0x000004, "Wrong size on BFGQuest_Timer_GetDuration");
static_assert(offsetof(BFGQuest_Timer_GetDuration, ReturnValue) == 0x000000, "Member 'BFGQuest_Timer_GetDuration::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Timer.GetDurationTimespan
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_Timer_GetDurationTimespan final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Timer_GetDurationTimespan) == 0x000008, "Wrong alignment on BFGQuest_Timer_GetDurationTimespan");
static_assert(sizeof(BFGQuest_Timer_GetDurationTimespan) == 0x000008, "Wrong size on BFGQuest_Timer_GetDurationTimespan");
static_assert(offsetof(BFGQuest_Timer_GetDurationTimespan, ReturnValue) == 0x000000, "Member 'BFGQuest_Timer_GetDurationTimespan::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Timer.GetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_Timer_GetRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Timer_GetRemainingTime) == 0x000004, "Wrong alignment on BFGQuest_Timer_GetRemainingTime");
static_assert(sizeof(BFGQuest_Timer_GetRemainingTime) == 0x000004, "Wrong size on BFGQuest_Timer_GetRemainingTime");
static_assert(offsetof(BFGQuest_Timer_GetRemainingTime, ReturnValue) == 0x000000, "Member 'BFGQuest_Timer_GetRemainingTime::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Timer.GetRemainingTimespan
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_Timer_GetRemainingTimespan final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Timer_GetRemainingTimespan) == 0x000008, "Wrong alignment on BFGQuest_Timer_GetRemainingTimespan");
static_assert(sizeof(BFGQuest_Timer_GetRemainingTimespan) == 0x000008, "Wrong size on BFGQuest_Timer_GetRemainingTimespan");
static_assert(offsetof(BFGQuest_Timer_GetRemainingTimespan, ReturnValue) == 0x000000, "Member 'BFGQuest_Timer_GetRemainingTimespan::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Timer.IsHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct BFGQuest_Timer_IsHUDVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Timer_IsHUDVisible) == 0x000001, "Wrong alignment on BFGQuest_Timer_IsHUDVisible");
static_assert(sizeof(BFGQuest_Timer_IsHUDVisible) == 0x000001, "Wrong size on BFGQuest_Timer_IsHUDVisible");
static_assert(offsetof(BFGQuest_Timer_IsHUDVisible, ReturnValue) == 0x000000, "Member 'BFGQuest_Timer_IsHUDVisible::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.CheckFriendlyFire
// 0x0020 (0x0020 - 0x0000)
struct BFGAIUtils_CheckFriendlyFire final
{
public:
	class APawn*                                  _pThis;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGWeapon*                             _pSpecificWeapon;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIUtils_CheckFriendlyFire) == 0x000008, "Wrong alignment on BFGAIUtils_CheckFriendlyFire");
static_assert(sizeof(BFGAIUtils_CheckFriendlyFire) == 0x000020, "Wrong size on BFGAIUtils_CheckFriendlyFire");
static_assert(offsetof(BFGAIUtils_CheckFriendlyFire, _pThis) == 0x000000, "Member 'BFGAIUtils_CheckFriendlyFire::_pThis' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_CheckFriendlyFire, _pTarget) == 0x000008, "Member 'BFGAIUtils_CheckFriendlyFire::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_CheckFriendlyFire, _pSpecificWeapon) == 0x000010, "Member 'BFGAIUtils_CheckFriendlyFire::_pSpecificWeapon' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_CheckFriendlyFire, ReturnValue) == 0x000018, "Member 'BFGAIUtils_CheckFriendlyFire::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.ComputeClosestNetworkPathLocation
// 0x0028 (0x0028 - 0x0000)
struct BFGAIUtils_ComputeClosestNetworkPathLocation final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fMaxRadius;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _pWorldContextObject;                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_ComputeClosestNetworkPathLocation) == 0x000008, "Wrong alignment on BFGAIUtils_ComputeClosestNetworkPathLocation");
static_assert(sizeof(BFGAIUtils_ComputeClosestNetworkPathLocation) == 0x000028, "Wrong size on BFGAIUtils_ComputeClosestNetworkPathLocation");
static_assert(offsetof(BFGAIUtils_ComputeClosestNetworkPathLocation, _vLocation) == 0x000000, "Member 'BFGAIUtils_ComputeClosestNetworkPathLocation::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_ComputeClosestNetworkPathLocation, _fMaxRadius) == 0x00000C, "Member 'BFGAIUtils_ComputeClosestNetworkPathLocation::_fMaxRadius' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_ComputeClosestNetworkPathLocation, _pWorldContextObject) == 0x000010, "Member 'BFGAIUtils_ComputeClosestNetworkPathLocation::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_ComputeClosestNetworkPathLocation, ReturnValue) == 0x000018, "Member 'BFGAIUtils_ComputeClosestNetworkPathLocation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.FindMainGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct BFGAIUtils_FindMainGameplayTag final
{
public:
	struct FGameplayTagContainer                  _enemyTagContainer;                                // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIUtils_FindMainGameplayTag) == 0x000008, "Wrong alignment on BFGAIUtils_FindMainGameplayTag");
static_assert(sizeof(BFGAIUtils_FindMainGameplayTag) == 0x000028, "Wrong size on BFGAIUtils_FindMainGameplayTag");
static_assert(offsetof(BFGAIUtils_FindMainGameplayTag, _enemyTagContainer) == 0x000000, "Member 'BFGAIUtils_FindMainGameplayTag::_enemyTagContainer' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_FindMainGameplayTag, ReturnValue) == 0x000020, "Member 'BFGAIUtils_FindMainGameplayTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetAttackTarget
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_GetAttackTarget final
{
public:
	class APawn*                                  _pPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIUtils_GetAttackTarget) == 0x000008, "Wrong alignment on BFGAIUtils_GetAttackTarget");
static_assert(sizeof(BFGAIUtils_GetAttackTarget) == 0x000010, "Wrong size on BFGAIUtils_GetAttackTarget");
static_assert(offsetof(BFGAIUtils_GetAttackTarget, _pPlayer) == 0x000000, "Member 'BFGAIUtils_GetAttackTarget::_pPlayer' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetAttackTarget, ReturnValue) == 0x000008, "Member 'BFGAIUtils_GetAttackTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetBehaviorState
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_GetBehaviorState final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGBehaviourState_NPC                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_GetBehaviorState) == 0x000008, "Wrong alignment on BFGAIUtils_GetBehaviorState");
static_assert(sizeof(BFGAIUtils_GetBehaviorState) == 0x000010, "Wrong size on BFGAIUtils_GetBehaviorState");
static_assert(offsetof(BFGAIUtils_GetBehaviorState, _pActor) == 0x000000, "Member 'BFGAIUtils_GetBehaviorState::_pActor' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetBehaviorState, ReturnValue) == 0x000008, "Member 'BFGAIUtils_GetBehaviorState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetCryptosTarget
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_GetCryptosTarget final
{
public:
	class APawn*                                  _pPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIUtils_GetCryptosTarget) == 0x000008, "Wrong alignment on BFGAIUtils_GetCryptosTarget");
static_assert(sizeof(BFGAIUtils_GetCryptosTarget) == 0x000010, "Wrong size on BFGAIUtils_GetCryptosTarget");
static_assert(offsetof(BFGAIUtils_GetCryptosTarget, _pPlayer) == 0x000000, "Member 'BFGAIUtils_GetCryptosTarget::_pPlayer' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetCryptosTarget, ReturnValue) == 0x000008, "Member 'BFGAIUtils_GetCryptosTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetCurrentWeapon
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_GetCurrentWeapon final
{
public:
	class AActor*                                 _pThis;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGWeapon*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIUtils_GetCurrentWeapon) == 0x000008, "Wrong alignment on BFGAIUtils_GetCurrentWeapon");
static_assert(sizeof(BFGAIUtils_GetCurrentWeapon) == 0x000010, "Wrong size on BFGAIUtils_GetCurrentWeapon");
static_assert(offsetof(BFGAIUtils_GetCurrentWeapon, _pThis) == 0x000000, "Member 'BFGAIUtils_GetCurrentWeapon::_pThis' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetCurrentWeapon, ReturnValue) == 0x000008, "Member 'BFGAIUtils_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetNPCCurrentWeapon
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_GetNPCCurrentWeapon final
{
public:
	class AActor*                                 _pThis;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGWeapon*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIUtils_GetNPCCurrentWeapon) == 0x000008, "Wrong alignment on BFGAIUtils_GetNPCCurrentWeapon");
static_assert(sizeof(BFGAIUtils_GetNPCCurrentWeapon) == 0x000010, "Wrong size on BFGAIUtils_GetNPCCurrentWeapon");
static_assert(offsetof(BFGAIUtils_GetNPCCurrentWeapon, _pThis) == 0x000000, "Member 'BFGAIUtils_GetNPCCurrentWeapon::_pThis' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetNPCCurrentWeapon, ReturnValue) == 0x000008, "Member 'BFGAIUtils_GetNPCCurrentWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetNPCWeapon
// 0x0038 (0x0038 - 0x0000)
struct BFGAIUtils_GetNPCWeapon final
{
public:
	class AActor*                                 _pThis;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _specificClass;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGWeapon*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAIUtils_GetNPCWeapon) == 0x000008, "Wrong alignment on BFGAIUtils_GetNPCWeapon");
static_assert(sizeof(BFGAIUtils_GetNPCWeapon) == 0x000038, "Wrong size on BFGAIUtils_GetNPCWeapon");
static_assert(offsetof(BFGAIUtils_GetNPCWeapon, _pThis) == 0x000000, "Member 'BFGAIUtils_GetNPCWeapon::_pThis' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetNPCWeapon, _specificClass) == 0x000008, "Member 'BFGAIUtils_GetNPCWeapon::_specificClass' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetNPCWeapon, ReturnValue) == 0x000030, "Member 'BFGAIUtils_GetNPCWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetPawnAndController
// 0x0030 (0x0030 - 0x0000)
struct BFGAIUtils_GetPawnAndController final
{
public:
	class AActor*                                 _pPawnOrController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRequirePawn;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  _pOutPawn;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRequireController;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _pOutController;                                   // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_GetPawnAndController) == 0x000008, "Wrong alignment on BFGAIUtils_GetPawnAndController");
static_assert(sizeof(BFGAIUtils_GetPawnAndController) == 0x000030, "Wrong size on BFGAIUtils_GetPawnAndController");
static_assert(offsetof(BFGAIUtils_GetPawnAndController, _pPawnOrController) == 0x000000, "Member 'BFGAIUtils_GetPawnAndController::_pPawnOrController' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetPawnAndController, _bRequirePawn) == 0x000008, "Member 'BFGAIUtils_GetPawnAndController::_bRequirePawn' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetPawnAndController, _pOutPawn) == 0x000010, "Member 'BFGAIUtils_GetPawnAndController::_pOutPawn' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetPawnAndController, _bRequireController) == 0x000018, "Member 'BFGAIUtils_GetPawnAndController::_bRequireController' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetPawnAndController, _pOutController) == 0x000020, "Member 'BFGAIUtils_GetPawnAndController::_pOutController' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetPawnAndController, ReturnValue) == 0x000028, "Member 'BFGAIUtils_GetPawnAndController::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetSensorGameplayOverrideBehavior
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_GetSensorGameplayOverrideBehavior final
{
public:
	const class UObject*                          _pWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGSensorGameplayOverrideBehavior            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_GetSensorGameplayOverrideBehavior) == 0x000008, "Wrong alignment on BFGAIUtils_GetSensorGameplayOverrideBehavior");
static_assert(sizeof(BFGAIUtils_GetSensorGameplayOverrideBehavior) == 0x000010, "Wrong size on BFGAIUtils_GetSensorGameplayOverrideBehavior");
static_assert(offsetof(BFGAIUtils_GetSensorGameplayOverrideBehavior, _pWorldContextObject) == 0x000000, "Member 'BFGAIUtils_GetSensorGameplayOverrideBehavior::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetSensorGameplayOverrideBehavior, ReturnValue) == 0x000008, "Member 'BFGAIUtils_GetSensorGameplayOverrideBehavior::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetTargetType
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_GetTargetType final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGTargetType                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_GetTargetType) == 0x000008, "Wrong alignment on BFGAIUtils_GetTargetType");
static_assert(sizeof(BFGAIUtils_GetTargetType) == 0x000010, "Wrong size on BFGAIUtils_GetTargetType");
static_assert(offsetof(BFGAIUtils_GetTargetType, _pTarget) == 0x000000, "Member 'BFGAIUtils_GetTargetType::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetTargetType, ReturnValue) == 0x000008, "Member 'BFGAIUtils_GetTargetType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.GetTargetTypeOfCurrentTarget
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_GetTargetTypeOfCurrentTarget final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGTargetType                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_GetTargetTypeOfCurrentTarget) == 0x000008, "Wrong alignment on BFGAIUtils_GetTargetTypeOfCurrentTarget");
static_assert(sizeof(BFGAIUtils_GetTargetTypeOfCurrentTarget) == 0x000010, "Wrong size on BFGAIUtils_GetTargetTypeOfCurrentTarget");
static_assert(offsetof(BFGAIUtils_GetTargetTypeOfCurrentTarget, _pActor) == 0x000000, "Member 'BFGAIUtils_GetTargetTypeOfCurrentTarget::_pActor' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_GetTargetTypeOfCurrentTarget, ReturnValue) == 0x000008, "Member 'BFGAIUtils_GetTargetTypeOfCurrentTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.HasLineOfFire
// 0x0020 (0x0020 - 0x0000)
struct BFGAIUtils_HasLineOfFire final
{
public:
	class APawn*                                  _pThis;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOther;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABFGWeapon*                             _pSpecificWeapon;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_HasLineOfFire) == 0x000008, "Wrong alignment on BFGAIUtils_HasLineOfFire");
static_assert(sizeof(BFGAIUtils_HasLineOfFire) == 0x000020, "Wrong size on BFGAIUtils_HasLineOfFire");
static_assert(offsetof(BFGAIUtils_HasLineOfFire, _pThis) == 0x000000, "Member 'BFGAIUtils_HasLineOfFire::_pThis' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_HasLineOfFire, _pOther) == 0x000008, "Member 'BFGAIUtils_HasLineOfFire::_pOther' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_HasLineOfFire, _pSpecificWeapon) == 0x000010, "Member 'BFGAIUtils_HasLineOfFire::_pSpecificWeapon' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_HasLineOfFire, ReturnValue) == 0x000018, "Member 'BFGAIUtils_HasLineOfFire::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.HasLineOfSight
// 0x0018 (0x0018 - 0x0000)
struct BFGAIUtils_HasLineOfSight final
{
public:
	class AActor*                                 _pThis;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOther;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCheckSightPie;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_HasLineOfSight) == 0x000008, "Wrong alignment on BFGAIUtils_HasLineOfSight");
static_assert(sizeof(BFGAIUtils_HasLineOfSight) == 0x000018, "Wrong size on BFGAIUtils_HasLineOfSight");
static_assert(offsetof(BFGAIUtils_HasLineOfSight, _pThis) == 0x000000, "Member 'BFGAIUtils_HasLineOfSight::_pThis' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_HasLineOfSight, _pOther) == 0x000008, "Member 'BFGAIUtils_HasLineOfSight::_pOther' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_HasLineOfSight, _bCheckSightPie) == 0x000010, "Member 'BFGAIUtils_HasLineOfSight::_bCheckSightPie' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_HasLineOfSight, ReturnValue) == 0x000011, "Member 'BFGAIUtils_HasLineOfSight::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.IsActorAlive
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_IsActorAlive final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_IsActorAlive) == 0x000008, "Wrong alignment on BFGAIUtils_IsActorAlive");
static_assert(sizeof(BFGAIUtils_IsActorAlive) == 0x000010, "Wrong size on BFGAIUtils_IsActorAlive");
static_assert(offsetof(BFGAIUtils_IsActorAlive, _pActor) == 0x000000, "Member 'BFGAIUtils_IsActorAlive::_pActor' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsActorAlive, ReturnValue) == 0x000008, "Member 'BFGAIUtils_IsActorAlive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.IsActorInAir
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_IsActorInAir final
{
public:
	class AActor*                                 _pTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_IsActorInAir) == 0x000008, "Wrong alignment on BFGAIUtils_IsActorInAir");
static_assert(sizeof(BFGAIUtils_IsActorInAir) == 0x000010, "Wrong size on BFGAIUtils_IsActorInAir");
static_assert(offsetof(BFGAIUtils_IsActorInAir, _pTargetActor) == 0x000000, "Member 'BFGAIUtils_IsActorInAir::_pTargetActor' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsActorInAir, ReturnValue) == 0x000008, "Member 'BFGAIUtils_IsActorInAir::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.IsActorInvisible
// 0x0010 (0x0010 - 0x0000)
struct BFGAIUtils_IsActorInvisible final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_IsActorInvisible) == 0x000008, "Wrong alignment on BFGAIUtils_IsActorInvisible");
static_assert(sizeof(BFGAIUtils_IsActorInvisible) == 0x000010, "Wrong size on BFGAIUtils_IsActorInvisible");
static_assert(offsetof(BFGAIUtils_IsActorInvisible, _pActor) == 0x000000, "Member 'BFGAIUtils_IsActorInvisible::_pActor' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsActorInvisible, ReturnValue) == 0x000008, "Member 'BFGAIUtils_IsActorInvisible::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.IsActorRotatingInPlace
// 0x0018 (0x0018 - 0x0000)
struct BFGAIUtils_IsActorRotatingInPlace final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vOutRotatngDirection;                             // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_IsActorRotatingInPlace) == 0x000008, "Wrong alignment on BFGAIUtils_IsActorRotatingInPlace");
static_assert(sizeof(BFGAIUtils_IsActorRotatingInPlace) == 0x000018, "Wrong size on BFGAIUtils_IsActorRotatingInPlace");
static_assert(offsetof(BFGAIUtils_IsActorRotatingInPlace, _pActor) == 0x000000, "Member 'BFGAIUtils_IsActorRotatingInPlace::_pActor' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsActorRotatingInPlace, _vOutRotatngDirection) == 0x000008, "Member 'BFGAIUtils_IsActorRotatingInPlace::_vOutRotatngDirection' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsActorRotatingInPlace, ReturnValue) == 0x000014, "Member 'BFGAIUtils_IsActorRotatingInPlace::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.IsInMissionBoundaries
// 0x0020 (0x0020 - 0x0000)
struct BFGAIUtils_IsInMissionBoundaries final
{
public:
	struct FVector                                _vVector;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          _pWorldContextObject;                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_IsInMissionBoundaries) == 0x000008, "Wrong alignment on BFGAIUtils_IsInMissionBoundaries");
static_assert(sizeof(BFGAIUtils_IsInMissionBoundaries) == 0x000020, "Wrong size on BFGAIUtils_IsInMissionBoundaries");
static_assert(offsetof(BFGAIUtils_IsInMissionBoundaries, _vVector) == 0x000000, "Member 'BFGAIUtils_IsInMissionBoundaries::_vVector' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsInMissionBoundaries, _pWorldContextObject) == 0x000010, "Member 'BFGAIUtils_IsInMissionBoundaries::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsInMissionBoundaries, ReturnValue) == 0x000018, "Member 'BFGAIUtils_IsInMissionBoundaries::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.IsPositionInViewFrustrum
// 0x0020 (0x0020 - 0x0000)
struct BFGAIUtils_IsPositionInViewFrustrum final
{
public:
	class ULocalPlayer*                           _pLocalPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _position;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fRadius;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_IsPositionInViewFrustrum) == 0x000008, "Wrong alignment on BFGAIUtils_IsPositionInViewFrustrum");
static_assert(sizeof(BFGAIUtils_IsPositionInViewFrustrum) == 0x000020, "Wrong size on BFGAIUtils_IsPositionInViewFrustrum");
static_assert(offsetof(BFGAIUtils_IsPositionInViewFrustrum, _pLocalPlayer) == 0x000000, "Member 'BFGAIUtils_IsPositionInViewFrustrum::_pLocalPlayer' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsPositionInViewFrustrum, _position) == 0x000008, "Member 'BFGAIUtils_IsPositionInViewFrustrum::_position' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsPositionInViewFrustrum, _fRadius) == 0x000014, "Member 'BFGAIUtils_IsPositionInViewFrustrum::_fRadius' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_IsPositionInViewFrustrum, ReturnValue) == 0x000018, "Member 'BFGAIUtils_IsPositionInViewFrustrum::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAIUtils.SetSensorGameplayOverrideBehavior
// 0x0018 (0x0018 - 0x0000)
struct BFGAIUtils_SetSensorGameplayOverrideBehavior final
{
public:
	EBFGSensorGameplayOverrideBehavior            _eBehavior;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          _pWorldContextObject;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAIUtils_SetSensorGameplayOverrideBehavior) == 0x000008, "Wrong alignment on BFGAIUtils_SetSensorGameplayOverrideBehavior");
static_assert(sizeof(BFGAIUtils_SetSensorGameplayOverrideBehavior) == 0x000018, "Wrong size on BFGAIUtils_SetSensorGameplayOverrideBehavior");
static_assert(offsetof(BFGAIUtils_SetSensorGameplayOverrideBehavior, _eBehavior) == 0x000000, "Member 'BFGAIUtils_SetSensorGameplayOverrideBehavior::_eBehavior' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_SetSensorGameplayOverrideBehavior, _pWorldContextObject) == 0x000008, "Member 'BFGAIUtils_SetSensorGameplayOverrideBehavior::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGAIUtils_SetSensorGameplayOverrideBehavior, ReturnValue) == 0x000010, "Member 'BFGAIUtils_SetSensorGameplayOverrideBehavior::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertResponseLevelState.DespawnAll
// 0x0001 (0x0001 - 0x0000)
struct BFGAlertResponseLevelState_DespawnAll final
{
public:
	bool                                          _bImmediate;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertResponseLevelState_DespawnAll) == 0x000001, "Wrong alignment on BFGAlertResponseLevelState_DespawnAll");
static_assert(sizeof(BFGAlertResponseLevelState_DespawnAll) == 0x000001, "Wrong size on BFGAlertResponseLevelState_DespawnAll");
static_assert(offsetof(BFGAlertResponseLevelState_DespawnAll, _bImmediate) == 0x000000, "Member 'BFGAlertResponseLevelState_DespawnAll::_bImmediate' has a wrong offset!");

// Function BFGCore.BFGAlertResponseLevelState.OnAgentDead
// 0x0018 (0x0018 - 0x0000)
struct BFGAlertResponseLevelState_OnAgentDead final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsAttched;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAlertResponseLevelState_OnAgentDead) == 0x000008, "Wrong alignment on BFGAlertResponseLevelState_OnAgentDead");
static_assert(sizeof(BFGAlertResponseLevelState_OnAgentDead) == 0x000018, "Wrong size on BFGAlertResponseLevelState_OnAgentDead");
static_assert(offsetof(BFGAlertResponseLevelState_OnAgentDead, _pAgent) == 0x000000, "Member 'BFGAlertResponseLevelState_OnAgentDead::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGAlertResponseLevelState_OnAgentDead, _pActor) == 0x000008, "Member 'BFGAlertResponseLevelState_OnAgentDead::_pActor' has a wrong offset!");
static_assert(offsetof(BFGAlertResponseLevelState_OnAgentDead, _bIsAttched) == 0x000010, "Member 'BFGAlertResponseLevelState_OnAgentDead::_bIsAttched' has a wrong offset!");

// Function BFGCore.BFGAlertResponseLevelState.OnAgentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGAlertResponseLevelState_OnAgentDestroyed final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertResponseLevelState_OnAgentDestroyed) == 0x000008, "Wrong alignment on BFGAlertResponseLevelState_OnAgentDestroyed");
static_assert(sizeof(BFGAlertResponseLevelState_OnAgentDestroyed) == 0x000008, "Wrong size on BFGAlertResponseLevelState_OnAgentDestroyed");
static_assert(offsetof(BFGAlertResponseLevelState_OnAgentDestroyed, _pAgent) == 0x000000, "Member 'BFGAlertResponseLevelState_OnAgentDestroyed::_pAgent' has a wrong offset!");

// Function BFGCore.BFGAlertResponseLevelState.OnEnter
// 0x0008 (0x0008 - 0x0000)
struct BFGAlertResponseLevelState_OnEnter final
{
public:
	class UBFGAlertResponseLevelState*            _pPreviousState;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertResponseLevelState_OnEnter) == 0x000008, "Wrong alignment on BFGAlertResponseLevelState_OnEnter");
static_assert(sizeof(BFGAlertResponseLevelState_OnEnter) == 0x000008, "Wrong size on BFGAlertResponseLevelState_OnEnter");
static_assert(offsetof(BFGAlertResponseLevelState_OnEnter, _pPreviousState) == 0x000000, "Member 'BFGAlertResponseLevelState_OnEnter::_pPreviousState' has a wrong offset!");

// Function BFGCore.BFGAlertResponseLevelState.OnVehiclePassengersOut
// 0x0008 (0x0008 - 0x0000)
struct BFGAlertResponseLevelState_OnVehiclePassengersOut final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertResponseLevelState_OnVehiclePassengersOut) == 0x000008, "Wrong alignment on BFGAlertResponseLevelState_OnVehiclePassengersOut");
static_assert(sizeof(BFGAlertResponseLevelState_OnVehiclePassengersOut) == 0x000008, "Wrong size on BFGAlertResponseLevelState_OnVehiclePassengersOut");
static_assert(offsetof(BFGAlertResponseLevelState_OnVehiclePassengersOut, _pAgent) == 0x000000, "Member 'BFGAlertResponseLevelState_OnVehiclePassengersOut::_pAgent' has a wrong offset!");

// Function BFGCore.BFGAlertResponseLevelState.Update
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertResponseLevelState_Update final
{
public:
	float                                         _fDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertResponseLevelState_Update) == 0x000004, "Wrong alignment on BFGAlertResponseLevelState_Update");
static_assert(sizeof(BFGAlertResponseLevelState_Update) == 0x000004, "Wrong size on BFGAlertResponseLevelState_Update");
static_assert(offsetof(BFGAlertResponseLevelState_Update, _fDeltaTime) == 0x000000, "Member 'BFGAlertResponseLevelState_Update::_fDeltaTime' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_GameOptions.ActionOptionFloat__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature final
{
public:
	class FName                                   _oOptionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _iOptionValue;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature) == 0x000004, "Wrong alignment on BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature");
static_assert(sizeof(BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature) == 0x00000C, "Wrong size on BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature");
static_assert(offsetof(BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature, _oOptionName) == 0x000000, "Member 'BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature::_oOptionName' has a wrong offset!");
static_assert(offsetof(BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature, _iOptionValue) == 0x000008, "Member 'BFGWidget_GameOptions_ActionOptionFloat__DelegateSignature::_iOptionValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_GameOptions.ActionOptionInt__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BFGWidget_GameOptions_ActionOptionInt__DelegateSignature final
{
public:
	class FName                                   _oOptionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iOptionValue;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_ActionOptionInt__DelegateSignature) == 0x000004, "Wrong alignment on BFGWidget_GameOptions_ActionOptionInt__DelegateSignature");
static_assert(sizeof(BFGWidget_GameOptions_ActionOptionInt__DelegateSignature) == 0x00000C, "Wrong size on BFGWidget_GameOptions_ActionOptionInt__DelegateSignature");
static_assert(offsetof(BFGWidget_GameOptions_ActionOptionInt__DelegateSignature, _oOptionName) == 0x000000, "Member 'BFGWidget_GameOptions_ActionOptionInt__DelegateSignature::_oOptionName' has a wrong offset!");
static_assert(offsetof(BFGWidget_GameOptions_ActionOptionInt__DelegateSignature, _iOptionValue) == 0x000008, "Member 'BFGWidget_GameOptions_ActionOptionInt__DelegateSignature::_iOptionValue' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.AddCategoryButtonToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptions_AddCategoryButtonToLayout final
{
public:
	class UBFGWidget_DialogOption_Customizable*   _pCategory;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_AddCategoryButtonToLayout) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_AddCategoryButtonToLayout");
static_assert(sizeof(BFGWidget_GameOptions_AddCategoryButtonToLayout) == 0x000008, "Wrong size on BFGWidget_GameOptions_AddCategoryButtonToLayout");
static_assert(offsetof(BFGWidget_GameOptions_AddCategoryButtonToLayout, _pCategory) == 0x000000, "Member 'BFGWidget_GameOptions_AddCategoryButtonToLayout::_pCategory' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.AddCategoryToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptions_AddCategoryToLayout final
{
public:
	class UBFGWidget_GameOptionsCategory*         _pCategory;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_AddCategoryToLayout) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_AddCategoryToLayout");
static_assert(sizeof(BFGWidget_GameOptions_AddCategoryToLayout) == 0x000008, "Wrong size on BFGWidget_GameOptions_AddCategoryToLayout");
static_assert(offsetof(BFGWidget_GameOptions_AddCategoryToLayout, _pCategory) == 0x000000, "Member 'BFGWidget_GameOptions_AddCategoryToLayout::_pCategory' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.AddKeyAssignmentWindowToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptions_AddKeyAssignmentWindowToLayout final
{
public:
	class UBFGWidget_KeyAssignmentWindow*         _pWindow;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_AddKeyAssignmentWindowToLayout) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_AddKeyAssignmentWindowToLayout");
static_assert(sizeof(BFGWidget_GameOptions_AddKeyAssignmentWindowToLayout) == 0x000008, "Wrong size on BFGWidget_GameOptions_AddKeyAssignmentWindowToLayout");
static_assert(offsetof(BFGWidget_GameOptions_AddKeyAssignmentWindowToLayout, _pWindow) == 0x000000, "Member 'BFGWidget_GameOptions_AddKeyAssignmentWindowToLayout::_pWindow' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.OnCategoryEntrySelected
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_GameOptions_OnCategoryEntrySelected final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_OnCategoryEntrySelected) == 0x000004, "Wrong alignment on BFGWidget_GameOptions_OnCategoryEntrySelected");
static_assert(sizeof(BFGWidget_GameOptions_OnCategoryEntrySelected) == 0x000004, "Wrong size on BFGWidget_GameOptions_OnCategoryEntrySelected");
static_assert(offsetof(BFGWidget_GameOptions_OnCategoryEntrySelected, _iIndex) == 0x000000, "Member 'BFGWidget_GameOptions_OnCategoryEntrySelected::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.OnComboBoxOptionChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptions_OnComboBoxOptionChanged final
{
public:
	class UBFGWidget_DialogOption_ComboBox*       _pComboBox;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_OnComboBoxOptionChanged) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_OnComboBoxOptionChanged");
static_assert(sizeof(BFGWidget_GameOptions_OnComboBoxOptionChanged) == 0x000008, "Wrong size on BFGWidget_GameOptions_OnComboBoxOptionChanged");
static_assert(offsetof(BFGWidget_GameOptions_OnComboBoxOptionChanged, _pComboBox) == 0x000000, "Member 'BFGWidget_GameOptions_OnComboBoxOptionChanged::_pComboBox' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.OnKeyAssignmentBegin
// 0x0028 (0x0028 - 0x0000)
struct BFGWidget_GameOptions_OnKeyAssignmentBegin final
{
public:
	class UBFGWidget_DialogOption_AssignKey*      _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   _oKey;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_GameOptions_OnKeyAssignmentBegin) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_OnKeyAssignmentBegin");
static_assert(sizeof(BFGWidget_GameOptions_OnKeyAssignmentBegin) == 0x000028, "Wrong size on BFGWidget_GameOptions_OnKeyAssignmentBegin");
static_assert(offsetof(BFGWidget_GameOptions_OnKeyAssignmentBegin, _pOption) == 0x000000, "Member 'BFGWidget_GameOptions_OnKeyAssignmentBegin::_pOption' has a wrong offset!");
static_assert(offsetof(BFGWidget_GameOptions_OnKeyAssignmentBegin, _oKey) == 0x000008, "Member 'BFGWidget_GameOptions_OnKeyAssignmentBegin::_oKey' has a wrong offset!");
static_assert(offsetof(BFGWidget_GameOptions_OnKeyAssignmentBegin, _iIndex) == 0x000020, "Member 'BFGWidget_GameOptions_OnKeyAssignmentBegin::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.OnSelectorOptionChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptions_OnSelectorOptionChanged final
{
public:
	class UBFGWidget_DialogOption_Selector*       _pSelector;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_OnSelectorOptionChanged) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_OnSelectorOptionChanged");
static_assert(sizeof(BFGWidget_GameOptions_OnSelectorOptionChanged) == 0x000008, "Wrong size on BFGWidget_GameOptions_OnSelectorOptionChanged");
static_assert(offsetof(BFGWidget_GameOptions_OnSelectorOptionChanged, _pSelector) == 0x000000, "Member 'BFGWidget_GameOptions_OnSelectorOptionChanged::_pSelector' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.OnSliderOptionChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptions_OnSliderOptionChanged final
{
public:
	class UBFGWidget_DialogOption_Slider*         _pSlider;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_OnSliderOptionChanged) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_OnSliderOptionChanged");
static_assert(sizeof(BFGWidget_GameOptions_OnSliderOptionChanged) == 0x000008, "Wrong size on BFGWidget_GameOptions_OnSliderOptionChanged");
static_assert(offsetof(BFGWidget_GameOptions_OnSliderOptionChanged, _pSlider) == 0x000000, "Member 'BFGWidget_GameOptions_OnSliderOptionChanged::_pSlider' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.SetCategoryLabel
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_GameOptions_SetCategoryLabel final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_SetCategoryLabel) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_SetCategoryLabel");
static_assert(sizeof(BFGWidget_GameOptions_SetCategoryLabel) == 0x000018, "Wrong size on BFGWidget_GameOptions_SetCategoryLabel");
static_assert(offsetof(BFGWidget_GameOptions_SetCategoryLabel, _strText) == 0x000000, "Member 'BFGWidget_GameOptions_SetCategoryLabel::_strText' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.ShowAcceptHint
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_GameOptions_ShowAcceptHint final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_ShowAcceptHint) == 0x000001, "Wrong alignment on BFGWidget_GameOptions_ShowAcceptHint");
static_assert(sizeof(BFGWidget_GameOptions_ShowAcceptHint) == 0x000001, "Wrong size on BFGWidget_GameOptions_ShowAcceptHint");
static_assert(offsetof(BFGWidget_GameOptions_ShowAcceptHint, _bShow) == 0x000000, "Member 'BFGWidget_GameOptions_ShowAcceptHint::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.ShowControllerHints
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_GameOptions_ShowControllerHints final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_ShowControllerHints) == 0x000001, "Wrong alignment on BFGWidget_GameOptions_ShowControllerHints");
static_assert(sizeof(BFGWidget_GameOptions_ShowControllerHints) == 0x000001, "Wrong size on BFGWidget_GameOptions_ShowControllerHints");
static_assert(offsetof(BFGWidget_GameOptions_ShowControllerHints, _bShow) == 0x000000, "Member 'BFGWidget_GameOptions_ShowControllerHints::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.ShowEditHint
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_GameOptions_ShowEditHint final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_ShowEditHint) == 0x000001, "Wrong alignment on BFGWidget_GameOptions_ShowEditHint");
static_assert(sizeof(BFGWidget_GameOptions_ShowEditHint) == 0x000001, "Wrong size on BFGWidget_GameOptions_ShowEditHint");
static_assert(offsetof(BFGWidget_GameOptions_ShowEditHint, _bShow) == 0x000000, "Member 'BFGWidget_GameOptions_ShowEditHint::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.UpdateControllerHints
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptions_UpdateControllerHints final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_UpdateControllerHints) == 0x000008, "Wrong alignment on BFGWidget_GameOptions_UpdateControllerHints");
static_assert(sizeof(BFGWidget_GameOptions_UpdateControllerHints) == 0x000008, "Wrong size on BFGWidget_GameOptions_UpdateControllerHints");
static_assert(offsetof(BFGWidget_GameOptions_UpdateControllerHints, _pOption) == 0x000000, "Member 'BFGWidget_GameOptions_UpdateControllerHints::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_GameOptions.UpdateEntry_KeyInput
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameOptions_UpdateEntry_KeyInput final
{
public:
	class FName                                   _oOptionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameOptions_UpdateEntry_KeyInput) == 0x000004, "Wrong alignment on BFGWidget_GameOptions_UpdateEntry_KeyInput");
static_assert(sizeof(BFGWidget_GameOptions_UpdateEntry_KeyInput) == 0x000008, "Wrong size on BFGWidget_GameOptions_UpdateEntry_KeyInput");
static_assert(offsetof(BFGWidget_GameOptions_UpdateEntry_KeyInput, _oOptionName) == 0x000000, "Member 'BFGWidget_GameOptions_UpdateEntry_KeyInput::_oOptionName' has a wrong offset!");

// Function BFGCore.BFGWeapon.CanStartWeapon
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_CanStartWeapon final
{
public:
	EWeaponFireAttemptResult                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_CanStartWeapon) == 0x000001, "Wrong alignment on BFGWeapon_CanStartWeapon");
static_assert(sizeof(BFGWeapon_CanStartWeapon) == 0x000001, "Wrong size on BFGWeapon_CanStartWeapon");
static_assert(offsetof(BFGWeapon_CanStartWeapon, ReturnValue) == 0x000000, "Member 'BFGWeapon_CanStartWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.DisplayTargetDecal
// 0x0018 (0x0018 - 0x0000)
struct BFGWeapon_DisplayTargetDecal final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fStartDelay;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDuration;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_DisplayTargetDecal) == 0x000004, "Wrong alignment on BFGWeapon_DisplayTargetDecal");
static_assert(sizeof(BFGWeapon_DisplayTargetDecal) == 0x000018, "Wrong size on BFGWeapon_DisplayTargetDecal");
static_assert(offsetof(BFGWeapon_DisplayTargetDecal, Position) == 0x000000, "Member 'BFGWeapon_DisplayTargetDecal::Position' has a wrong offset!");
static_assert(offsetof(BFGWeapon_DisplayTargetDecal, Radius) == 0x00000C, "Member 'BFGWeapon_DisplayTargetDecal::Radius' has a wrong offset!");
static_assert(offsetof(BFGWeapon_DisplayTargetDecal, _fStartDelay) == 0x000010, "Member 'BFGWeapon_DisplayTargetDecal::_fStartDelay' has a wrong offset!");
static_assert(offsetof(BFGWeapon_DisplayTargetDecal, _fDuration) == 0x000014, "Member 'BFGWeapon_DisplayTargetDecal::_fDuration' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetAvailableMaximumShotCount
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_GetAvailableMaximumShotCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetAvailableMaximumShotCount) == 0x000004, "Wrong alignment on BFGWeapon_GetAvailableMaximumShotCount");
static_assert(sizeof(BFGWeapon_GetAvailableMaximumShotCount) == 0x000004, "Wrong size on BFGWeapon_GetAvailableMaximumShotCount");
static_assert(offsetof(BFGWeapon_GetAvailableMaximumShotCount, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetAvailableMaximumShotCount::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetAvailableShotCount
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_GetAvailableShotCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetAvailableShotCount) == 0x000004, "Wrong alignment on BFGWeapon_GetAvailableShotCount");
static_assert(sizeof(BFGWeapon_GetAvailableShotCount) == 0x000004, "Wrong size on BFGWeapon_GetAvailableShotCount");
static_assert(offsetof(BFGWeapon_GetAvailableShotCount, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetAvailableShotCount::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetAvailableShotRatio
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_GetAvailableShotRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetAvailableShotRatio) == 0x000004, "Wrong alignment on BFGWeapon_GetAvailableShotRatio");
static_assert(sizeof(BFGWeapon_GetAvailableShotRatio) == 0x000004, "Wrong size on BFGWeapon_GetAvailableShotRatio");
static_assert(offsetof(BFGWeapon_GetAvailableShotRatio, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetAvailableShotRatio::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetMuzzleLocation
// 0x000C (0x000C - 0x0000)
struct BFGWeapon_GetMuzzleLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetMuzzleLocation) == 0x000004, "Wrong alignment on BFGWeapon_GetMuzzleLocation");
static_assert(sizeof(BFGWeapon_GetMuzzleLocation) == 0x00000C, "Wrong size on BFGWeapon_GetMuzzleLocation");
static_assert(offsetof(BFGWeapon_GetMuzzleLocation, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetMuzzleLocation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.HitReaction
// 0x0020 (0x0020 - 0x0000)
struct BFGWeapon_HitReaction final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pDamageCauser;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDamageType*                         _pDamageType;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  _pInstigator;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_HitReaction) == 0x000008, "Wrong alignment on BFGWeapon_HitReaction");
static_assert(sizeof(BFGWeapon_HitReaction) == 0x000020, "Wrong size on BFGWeapon_HitReaction");
static_assert(offsetof(BFGWeapon_HitReaction, _pOwner) == 0x000000, "Member 'BFGWeapon_HitReaction::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGWeapon_HitReaction, _pDamageCauser) == 0x000008, "Member 'BFGWeapon_HitReaction::_pDamageCauser' has a wrong offset!");
static_assert(offsetof(BFGWeapon_HitReaction, _pDamageType) == 0x000010, "Member 'BFGWeapon_HitReaction::_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGWeapon_HitReaction, _pInstigator) == 0x000018, "Member 'BFGWeapon_HitReaction::_pInstigator' has a wrong offset!");

// Function BFGCore.BFGWeapon.OnFailedFireAttempt
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_OnFailedFireAttempt final
{
public:
	EWeaponFireAttemptResult                      _weaponFireResult;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_OnFailedFireAttempt) == 0x000001, "Wrong alignment on BFGWeapon_OnFailedFireAttempt");
static_assert(sizeof(BFGWeapon_OnFailedFireAttempt) == 0x000001, "Wrong size on BFGWeapon_OnFailedFireAttempt");
static_assert(offsetof(BFGWeapon_OnFailedFireAttempt, _weaponFireResult) == 0x000000, "Member 'BFGWeapon_OnFailedFireAttempt::_weaponFireResult' has a wrong offset!");

// Function BFGCore.BFGWeapon.OnHitReaction
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_OnHitReaction final
{
public:
	class AActor*                                 _pDamageCauser;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  _pInstigator;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_OnHitReaction) == 0x000008, "Wrong alignment on BFGWeapon_OnHitReaction");
static_assert(sizeof(BFGWeapon_OnHitReaction) == 0x000010, "Wrong size on BFGWeapon_OnHitReaction");
static_assert(offsetof(BFGWeapon_OnHitReaction, _pDamageCauser) == 0x000000, "Member 'BFGWeapon_OnHitReaction::_pDamageCauser' has a wrong offset!");
static_assert(offsetof(BFGWeapon_OnHitReaction, _pInstigator) == 0x000008, "Member 'BFGWeapon_OnHitReaction::_pInstigator' has a wrong offset!");

// Function BFGCore.BFGWeapon.OnShotImpact
// 0x0088 (0x0088 - 0x0000)
struct BFGWeapon_OnShotImpact final
{
public:
	struct FHitResult                             _oHitResult;                                       // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_OnShotImpact) == 0x000004, "Wrong alignment on BFGWeapon_OnShotImpact");
static_assert(sizeof(BFGWeapon_OnShotImpact) == 0x000088, "Wrong size on BFGWeapon_OnShotImpact");
static_assert(offsetof(BFGWeapon_OnShotImpact, _oHitResult) == 0x000000, "Member 'BFGWeapon_OnShotImpact::_oHitResult' has a wrong offset!");

// Function BFGCore.BFGWeapon.OnWeaponFire
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_OnWeaponFire final
{
public:
	class FName                                   _nSocketName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_OnWeaponFire) == 0x000004, "Wrong alignment on BFGWeapon_OnWeaponFire");
static_assert(sizeof(BFGWeapon_OnWeaponFire) == 0x000008, "Wrong size on BFGWeapon_OnWeaponFire");
static_assert(offsetof(BFGWeapon_OnWeaponFire, _nSocketName) == 0x000000, "Member 'BFGWeapon_OnWeaponFire::_nSocketName' has a wrong offset!");

// Function BFGCore.BFGWeapon.SetAddedReloadTimeFactor
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_SetAddedReloadTimeFactor final
{
public:
	float                                         _fReloadTimeFactor;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_SetAddedReloadTimeFactor) == 0x000004, "Wrong alignment on BFGWeapon_SetAddedReloadTimeFactor");
static_assert(sizeof(BFGWeapon_SetAddedReloadTimeFactor) == 0x000004, "Wrong size on BFGWeapon_SetAddedReloadTimeFactor");
static_assert(offsetof(BFGWeapon_SetAddedReloadTimeFactor, _fReloadTimeFactor) == 0x000000, "Member 'BFGWeapon_SetAddedReloadTimeFactor::_fReloadTimeFactor' has a wrong offset!");

// Function BFGCore.BFGWeapon.SetAiming
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_SetAiming final
{
public:
	bool                                          _bAiming;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fStopAimingDelay;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_SetAiming) == 0x000004, "Wrong alignment on BFGWeapon_SetAiming");
static_assert(sizeof(BFGWeapon_SetAiming) == 0x000008, "Wrong size on BFGWeapon_SetAiming");
static_assert(offsetof(BFGWeapon_SetAiming, _bAiming) == 0x000000, "Member 'BFGWeapon_SetAiming::_bAiming' has a wrong offset!");
static_assert(offsetof(BFGWeapon_SetAiming, _fStopAimingDelay) == 0x000004, "Member 'BFGWeapon_SetAiming::_fStopAimingDelay' has a wrong offset!");

// Function BFGCore.BFGWeapon.SetEquipmentManager
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_SetEquipmentManager final
{
public:
	class UBFGActorComponent_EquipmentManager*    _pManager;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_SetEquipmentManager) == 0x000008, "Wrong alignment on BFGWeapon_SetEquipmentManager");
static_assert(sizeof(BFGWeapon_SetEquipmentManager) == 0x000008, "Wrong size on BFGWeapon_SetEquipmentManager");
static_assert(offsetof(BFGWeapon_SetEquipmentManager, _pManager) == 0x000000, "Member 'BFGWeapon_SetEquipmentManager::_pManager' has a wrong offset!");

// Function BFGCore.BFGWeapon.SetHolder
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_SetHolder final
{
public:
	class AActor*                                 _pHolder;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_SetHolder) == 0x000008, "Wrong alignment on BFGWeapon_SetHolder");
static_assert(sizeof(BFGWeapon_SetHolder) == 0x000008, "Wrong size on BFGWeapon_SetHolder");
static_assert(offsetof(BFGWeapon_SetHolder, _pHolder) == 0x000000, "Member 'BFGWeapon_SetHolder::_pHolder' has a wrong offset!");

// Function BFGCore.BFGWeapon.SetRequestWeaponFire
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_SetRequestWeaponFire final
{
public:
	bool                                          _bRequestFireEnabled;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_SetRequestWeaponFire) == 0x000001, "Wrong alignment on BFGWeapon_SetRequestWeaponFire");
static_assert(sizeof(BFGWeapon_SetRequestWeaponFire) == 0x000001, "Wrong size on BFGWeapon_SetRequestWeaponFire");
static_assert(offsetof(BFGWeapon_SetRequestWeaponFire, _bRequestFireEnabled) == 0x000000, "Member 'BFGWeapon_SetRequestWeaponFire::_bRequestFireEnabled' has a wrong offset!");

// Function BFGCore.BFGWeapon.SetWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_SetWidgetVisibility final
{
public:
	ESlateVisibility                              _eVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_SetWidgetVisibility) == 0x000001, "Wrong alignment on BFGWeapon_SetWidgetVisibility");
static_assert(sizeof(BFGWeapon_SetWidgetVisibility) == 0x000001, "Wrong size on BFGWeapon_SetWidgetVisibility");
static_assert(offsetof(BFGWeapon_SetWidgetVisibility, _eVisibility) == 0x000000, "Member 'BFGWeapon_SetWidgetVisibility::_eVisibility' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetAmmoRatio
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_GetAmmoRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetAmmoRatio) == 0x000004, "Wrong alignment on BFGWeapon_GetAmmoRatio");
static_assert(sizeof(BFGWeapon_GetAmmoRatio) == 0x000004, "Wrong size on BFGWeapon_GetAmmoRatio");
static_assert(offsetof(BFGWeapon_GetAmmoRatio, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetAmmoRatio::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetAnimPosture
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_GetAnimPosture final
{
public:
	EBFGAnimation_WeaponPosture                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetAnimPosture) == 0x000001, "Wrong alignment on BFGWeapon_GetAnimPosture");
static_assert(sizeof(BFGWeapon_GetAnimPosture) == 0x000001, "Wrong size on BFGWeapon_GetAnimPosture");
static_assert(offsetof(BFGWeapon_GetAnimPosture, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetAnimPosture::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetBFGGameState
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_GetBFGGameState final
{
public:
	class ABFGGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetBFGGameState) == 0x000008, "Wrong alignment on BFGWeapon_GetBFGGameState");
static_assert(sizeof(BFGWeapon_GetBFGGameState) == 0x000008, "Wrong size on BFGWeapon_GetBFGGameState");
static_assert(offsetof(BFGWeapon_GetBFGGameState, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetBFGGameState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetCurrentAimData
// 0x00CC (0x00CC - 0x0000)
struct BFGWeapon_GetCurrentAimData final
{
public:
	struct FCharacterAimData                      ReturnValue;                                       // 0x0000(0x00CC)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetCurrentAimData) == 0x000004, "Wrong alignment on BFGWeapon_GetCurrentAimData");
static_assert(sizeof(BFGWeapon_GetCurrentAimData) == 0x0000CC, "Wrong size on BFGWeapon_GetCurrentAimData");
static_assert(offsetof(BFGWeapon_GetCurrentAimData, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetCurrentAimData::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetCurrentLocketTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_GetCurrentLocketTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetCurrentLocketTarget) == 0x000008, "Wrong alignment on BFGWeapon_GetCurrentLocketTarget");
static_assert(sizeof(BFGWeapon_GetCurrentLocketTarget) == 0x000008, "Wrong size on BFGWeapon_GetCurrentLocketTarget");
static_assert(offsetof(BFGWeapon_GetCurrentLocketTarget, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetCurrentLocketTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetEquipTime
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_GetEquipTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetEquipTime) == 0x000004, "Wrong alignment on BFGWeapon_GetEquipTime");
static_assert(sizeof(BFGWeapon_GetEquipTime) == 0x000004, "Wrong size on BFGWeapon_GetEquipTime");
static_assert(offsetof(BFGWeapon_GetEquipTime, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetEquipTime::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetFirstAutolockedTarget
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_GetFirstAutolockedTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetFirstAutolockedTarget) == 0x000008, "Wrong alignment on BFGWeapon_GetFirstAutolockedTarget");
static_assert(sizeof(BFGWeapon_GetFirstAutolockedTarget) == 0x000008, "Wrong size on BFGWeapon_GetFirstAutolockedTarget");
static_assert(offsetof(BFGWeapon_GetFirstAutolockedTarget, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetFirstAutolockedTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetHolderSafe
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_GetHolderSafe final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetHolderSafe) == 0x000008, "Wrong alignment on BFGWeapon_GetHolderSafe");
static_assert(sizeof(BFGWeapon_GetHolderSafe) == 0x000008, "Wrong size on BFGWeapon_GetHolderSafe");
static_assert(offsetof(BFGWeapon_GetHolderSafe, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetHolderSafe::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetIsDisabled
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_GetIsDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetIsDisabled) == 0x000001, "Wrong alignment on BFGWeapon_GetIsDisabled");
static_assert(sizeof(BFGWeapon_GetIsDisabled) == 0x000001, "Wrong size on BFGWeapon_GetIsDisabled");
static_assert(offsetof(BFGWeapon_GetIsDisabled, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetIsDisabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetMaximumRange
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_GetMaximumRange final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWeapon_GetMaximumRange) == 0x000008, "Wrong alignment on BFGWeapon_GetMaximumRange");
static_assert(sizeof(BFGWeapon_GetMaximumRange) == 0x000010, "Wrong size on BFGWeapon_GetMaximumRange");
static_assert(offsetof(BFGWeapon_GetMaximumRange, _pTarget) == 0x000000, "Member 'BFGWeapon_GetMaximumRange::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGWeapon_GetMaximumRange, ReturnValue) == 0x000008, "Member 'BFGWeapon_GetMaximumRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetMinimalRange
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_GetMinimalRange final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWeapon_GetMinimalRange) == 0x000008, "Wrong alignment on BFGWeapon_GetMinimalRange");
static_assert(sizeof(BFGWeapon_GetMinimalRange) == 0x000010, "Wrong size on BFGWeapon_GetMinimalRange");
static_assert(offsetof(BFGWeapon_GetMinimalRange, _pTarget) == 0x000000, "Member 'BFGWeapon_GetMinimalRange::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGWeapon_GetMinimalRange, ReturnValue) == 0x000008, "Member 'BFGWeapon_GetMinimalRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetOptimalRange
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_GetOptimalRange final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWeapon_GetOptimalRange) == 0x000008, "Wrong alignment on BFGWeapon_GetOptimalRange");
static_assert(sizeof(BFGWeapon_GetOptimalRange) == 0x000010, "Wrong size on BFGWeapon_GetOptimalRange");
static_assert(offsetof(BFGWeapon_GetOptimalRange, _pTarget) == 0x000000, "Member 'BFGWeapon_GetOptimalRange::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGWeapon_GetOptimalRange, ReturnValue) == 0x000008, "Member 'BFGWeapon_GetOptimalRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetProjectileRange
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_GetProjectileRange final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWeapon_GetProjectileRange) == 0x000008, "Wrong alignment on BFGWeapon_GetProjectileRange");
static_assert(sizeof(BFGWeapon_GetProjectileRange) == 0x000010, "Wrong size on BFGWeapon_GetProjectileRange");
static_assert(offsetof(BFGWeapon_GetProjectileRange, _pTarget) == 0x000000, "Member 'BFGWeapon_GetProjectileRange::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGWeapon_GetProjectileRange, ReturnValue) == 0x000008, "Member 'BFGWeapon_GetProjectileRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetReloadTime
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_GetReloadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetReloadTime) == 0x000004, "Wrong alignment on BFGWeapon_GetReloadTime");
static_assert(sizeof(BFGWeapon_GetReloadTime) == 0x000004, "Wrong size on BFGWeapon_GetReloadTime");
static_assert(offsetof(BFGWeapon_GetReloadTime, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetReloadTime::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetTimeReloading
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_GetTimeReloading final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetTimeReloading) == 0x000004, "Wrong alignment on BFGWeapon_GetTimeReloading");
static_assert(sizeof(BFGWeapon_GetTimeReloading) == 0x000004, "Wrong size on BFGWeapon_GetTimeReloading");
static_assert(offsetof(BFGWeapon_GetTimeReloading, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetTimeReloading::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.GetWeaponName
// 0x0018 (0x0018 - 0x0000)
struct BFGWeapon_GetWeaponName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_GetWeaponName) == 0x000008, "Wrong alignment on BFGWeapon_GetWeaponName");
static_assert(sizeof(BFGWeapon_GetWeaponName) == 0x000018, "Wrong size on BFGWeapon_GetWeaponName");
static_assert(offsetof(BFGWeapon_GetWeaponName, ReturnValue) == 0x000000, "Member 'BFGWeapon_GetWeaponName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IsAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IsAiming) == 0x000001, "Wrong alignment on BFGWeapon_IsAiming");
static_assert(sizeof(BFGWeapon_IsAiming) == 0x000001, "Wrong size on BFGWeapon_IsAiming");
static_assert(offsetof(BFGWeapon_IsAiming, ReturnValue) == 0x000000, "Member 'BFGWeapon_IsAiming::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.IsEquip
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IsEquip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IsEquip) == 0x000001, "Wrong alignment on BFGWeapon_IsEquip");
static_assert(sizeof(BFGWeapon_IsEquip) == 0x000001, "Wrong size on BFGWeapon_IsEquip");
static_assert(offsetof(BFGWeapon_IsEquip, ReturnValue) == 0x000000, "Member 'BFGWeapon_IsEquip::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.IsHolding
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IsHolding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IsHolding) == 0x000001, "Wrong alignment on BFGWeapon_IsHolding");
static_assert(sizeof(BFGWeapon_IsHolding) == 0x000001, "Wrong size on BFGWeapon_IsHolding");
static_assert(offsetof(BFGWeapon_IsHolding, ReturnValue) == 0x000000, "Member 'BFGWeapon_IsHolding::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.IsOverheated
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IsOverheated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IsOverheated) == 0x000001, "Wrong alignment on BFGWeapon_IsOverheated");
static_assert(sizeof(BFGWeapon_IsOverheated) == 0x000001, "Wrong size on BFGWeapon_IsOverheated");
static_assert(offsetof(BFGWeapon_IsOverheated, ReturnValue) == 0x000000, "Member 'BFGWeapon_IsOverheated::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IsReloading) == 0x000001, "Wrong alignment on BFGWeapon_IsReloading");
static_assert(sizeof(BFGWeapon_IsReloading) == 0x000001, "Wrong size on BFGWeapon_IsReloading");
static_assert(offsetof(BFGWeapon_IsReloading, ReturnValue) == 0x000000, "Member 'BFGWeapon_IsReloading::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.IsRequestWeaponFireEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IsRequestWeaponFireEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IsRequestWeaponFireEnabled) == 0x000001, "Wrong alignment on BFGWeapon_IsRequestWeaponFireEnabled");
static_assert(sizeof(BFGWeapon_IsRequestWeaponFireEnabled) == 0x000001, "Wrong size on BFGWeapon_IsRequestWeaponFireEnabled");
static_assert(offsetof(BFGWeapon_IsRequestWeaponFireEnabled, ReturnValue) == 0x000000, "Member 'BFGWeapon_IsRequestWeaponFireEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.IsShooting
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IsShooting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IsShooting) == 0x000001, "Wrong alignment on BFGWeapon_IsShooting");
static_assert(sizeof(BFGWeapon_IsShooting) == 0x000001, "Wrong size on BFGWeapon_IsShooting");
static_assert(offsetof(BFGWeapon_IsShooting, ReturnValue) == 0x000000, "Member 'BFGWeapon_IsShooting::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.IsTelegraphing
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IsTelegraphing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IsTelegraphing) == 0x000001, "Wrong alignment on BFGWeapon_IsTelegraphing");
static_assert(sizeof(BFGWeapon_IsTelegraphing) == 0x000001, "Wrong size on BFGWeapon_IsTelegraphing");
static_assert(offsetof(BFGWeapon_IsTelegraphing, ReturnValue) == 0x000000, "Member 'BFGWeapon_IsTelegraphing::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon.TrySetHitActorOnFire
// 0x0088 (0x0088 - 0x0000)
struct BFGWeapon_TrySetHitActorOnFire final
{
public:
	struct FHitResult                             _hitResult;                                        // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_TrySetHitActorOnFire) == 0x000004, "Wrong alignment on BFGWeapon_TrySetHitActorOnFire");
static_assert(sizeof(BFGWeapon_TrySetHitActorOnFire) == 0x000088, "Wrong size on BFGWeapon_TrySetHitActorOnFire");
static_assert(offsetof(BFGWeapon_TrySetHitActorOnFire, _hitResult) == 0x000000, "Member 'BFGWeapon_TrySetHitActorOnFire::_hitResult' has a wrong offset!");

// Function BFGCore.BFGWeapon_BaseProjectile.OnShootProjectile
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_BaseProjectile_OnShootProjectile final
{
public:
	class ABFGProjectile_Object*                  _pProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BaseProjectile_OnShootProjectile) == 0x000008, "Wrong alignment on BFGWeapon_BaseProjectile_OnShootProjectile");
static_assert(sizeof(BFGWeapon_BaseProjectile_OnShootProjectile) == 0x000008, "Wrong size on BFGWeapon_BaseProjectile_OnShootProjectile");
static_assert(offsetof(BFGWeapon_BaseProjectile_OnShootProjectile, _pProjectile) == 0x000000, "Member 'BFGWeapon_BaseProjectile_OnShootProjectile::_pProjectile' has a wrong offset!");

// Function BFGCore.BFGWeapon_Enemy.IsBusyFiringSalvo
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_Enemy_IsBusyFiringSalvo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_Enemy_IsBusyFiringSalvo) == 0x000001, "Wrong alignment on BFGWeapon_Enemy_IsBusyFiringSalvo");
static_assert(sizeof(BFGWeapon_Enemy_IsBusyFiringSalvo) == 0x000001, "Wrong size on BFGWeapon_Enemy_IsBusyFiringSalvo");
static_assert(offsetof(BFGWeapon_Enemy_IsBusyFiringSalvo, ReturnValue) == 0x000000, "Member 'BFGWeapon_Enemy_IsBusyFiringSalvo::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionWorldState.GetNextQuestTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGMissionWorldState_GetNextQuestTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionWorldState_GetNextQuestTitle) == 0x000008, "Wrong alignment on BFGMissionWorldState_GetNextQuestTitle");
static_assert(sizeof(BFGMissionWorldState_GetNextQuestTitle) == 0x000018, "Wrong size on BFGMissionWorldState_GetNextQuestTitle");
static_assert(offsetof(BFGMissionWorldState_GetNextQuestTitle, ReturnValue) == 0x000000, "Member 'BFGMissionWorldState_GetNextQuestTitle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.IsUndetected
// 0x0001 (0x0001 - 0x0000)
struct BFGAlertSystemManager_IsUndetected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_IsUndetected) == 0x000001, "Wrong alignment on BFGAlertSystemManager_IsUndetected");
static_assert(sizeof(BFGAlertSystemManager_IsUndetected) == 0x000001, "Wrong size on BFGAlertSystemManager_IsUndetected");
static_assert(offsetof(BFGAlertSystemManager_IsUndetected, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_IsUndetected::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.LowerResponseLevel
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_LowerResponseLevel final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_LowerResponseLevel) == 0x000004, "Wrong alignment on BFGAlertSystemManager_LowerResponseLevel");
static_assert(sizeof(BFGAlertSystemManager_LowerResponseLevel) == 0x000004, "Wrong size on BFGAlertSystemManager_LowerResponseLevel");
static_assert(offsetof(BFGAlertSystemManager_LowerResponseLevel, _iIndex) == 0x000000, "Member 'BFGAlertSystemManager_LowerResponseLevel::_iIndex' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.OnChangeAlarmState
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_OnChangeAlarmState final
{
public:
	int32                                         _iResponseLevelIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_OnChangeAlarmState) == 0x000004, "Wrong alignment on BFGAlertSystemManager_OnChangeAlarmState");
static_assert(sizeof(BFGAlertSystemManager_OnChangeAlarmState) == 0x000004, "Wrong size on BFGAlertSystemManager_OnChangeAlarmState");
static_assert(offsetof(BFGAlertSystemManager_OnChangeAlarmState, _iResponseLevelIndex) == 0x000000, "Member 'BFGAlertSystemManager_OnChangeAlarmState::_iResponseLevelIndex' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.RiseResponseLevel
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_RiseResponseLevel final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_RiseResponseLevel) == 0x000004, "Wrong alignment on BFGAlertSystemManager_RiseResponseLevel");
static_assert(sizeof(BFGAlertSystemManager_RiseResponseLevel) == 0x000004, "Wrong size on BFGAlertSystemManager_RiseResponseLevel");
static_assert(offsetof(BFGAlertSystemManager_RiseResponseLevel, _iIndex) == 0x000000, "Member 'BFGAlertSystemManager_RiseResponseLevel::_iIndex' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.SetMaxResponseLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_SetMaxResponseLevelIndex final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_SetMaxResponseLevelIndex) == 0x000004, "Wrong alignment on BFGAlertSystemManager_SetMaxResponseLevelIndex");
static_assert(sizeof(BFGAlertSystemManager_SetMaxResponseLevelIndex) == 0x000004, "Wrong size on BFGAlertSystemManager_SetMaxResponseLevelIndex");
static_assert(offsetof(BFGAlertSystemManager_SetMaxResponseLevelIndex, _iIndex) == 0x000000, "Member 'BFGAlertSystemManager_SetMaxResponseLevelIndex::_iIndex' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.SetResponseLevelIndex
// 0x0008 (0x0008 - 0x0000)
struct BFGAlertSystemManager_SetResponseLevelIndex final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bReportPlayerLKP;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAlertSystemManager_SetResponseLevelIndex) == 0x000004, "Wrong alignment on BFGAlertSystemManager_SetResponseLevelIndex");
static_assert(sizeof(BFGAlertSystemManager_SetResponseLevelIndex) == 0x000008, "Wrong size on BFGAlertSystemManager_SetResponseLevelIndex");
static_assert(offsetof(BFGAlertSystemManager_SetResponseLevelIndex, _iIndex) == 0x000000, "Member 'BFGAlertSystemManager_SetResponseLevelIndex::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGAlertSystemManager_SetResponseLevelIndex, _bReportPlayerLKP) == 0x000004, "Member 'BFGAlertSystemManager_SetResponseLevelIndex::_bReportPlayerLKP' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.SetResponseLevelLockedMode
// 0x0001 (0x0001 - 0x0000)
struct BFGAlertSystemManager_SetResponseLevelLockedMode final
{
public:
	bool                                          _bLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_SetResponseLevelLockedMode) == 0x000001, "Wrong alignment on BFGAlertSystemManager_SetResponseLevelLockedMode");
static_assert(sizeof(BFGAlertSystemManager_SetResponseLevelLockedMode) == 0x000001, "Wrong size on BFGAlertSystemManager_SetResponseLevelLockedMode");
static_assert(offsetof(BFGAlertSystemManager_SetResponseLevelLockedMode, _bLocked) == 0x000000, "Member 'BFGAlertSystemManager_SetResponseLevelLockedMode::_bLocked' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.SetSpawningEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGAlertSystemManager_SetSpawningEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_SetSpawningEnabled) == 0x000001, "Wrong alignment on BFGAlertSystemManager_SetSpawningEnabled");
static_assert(sizeof(BFGAlertSystemManager_SetSpawningEnabled) == 0x000001, "Wrong size on BFGAlertSystemManager_SetSpawningEnabled");
static_assert(offsetof(BFGAlertSystemManager_SetSpawningEnabled, _bEnabled) == 0x000000, "Member 'BFGAlertSystemManager_SetSpawningEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.SetStealthWarning
// 0x0002 (0x0002 - 0x0000)
struct BFGAlertSystemManager_SetStealthWarning final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGAlertSystemState                          _state;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_SetStealthWarning) == 0x000001, "Wrong alignment on BFGAlertSystemManager_SetStealthWarning");
static_assert(sizeof(BFGAlertSystemManager_SetStealthWarning) == 0x000002, "Wrong size on BFGAlertSystemManager_SetStealthWarning");
static_assert(offsetof(BFGAlertSystemManager_SetStealthWarning, _bEnabled) == 0x000000, "Member 'BFGAlertSystemManager_SetStealthWarning::_bEnabled' has a wrong offset!");
static_assert(offsetof(BFGAlertSystemManager_SetStealthWarning, _state) == 0x000001, "Member 'BFGAlertSystemManager_SetStealthWarning::_state' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.GetCurrentAlertSystemState
// 0x0001 (0x0001 - 0x0000)
struct BFGAlertSystemManager_GetCurrentAlertSystemState final
{
public:
	EBFGAlertSystemState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_GetCurrentAlertSystemState) == 0x000001, "Wrong alignment on BFGAlertSystemManager_GetCurrentAlertSystemState");
static_assert(sizeof(BFGAlertSystemManager_GetCurrentAlertSystemState) == 0x000001, "Wrong size on BFGAlertSystemManager_GetCurrentAlertSystemState");
static_assert(offsetof(BFGAlertSystemManager_GetCurrentAlertSystemState, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_GetCurrentAlertSystemState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.GetCurrentResponseLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_GetCurrentResponseLevelIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_GetCurrentResponseLevelIndex) == 0x000004, "Wrong alignment on BFGAlertSystemManager_GetCurrentResponseLevelIndex");
static_assert(sizeof(BFGAlertSystemManager_GetCurrentResponseLevelIndex) == 0x000004, "Wrong size on BFGAlertSystemManager_GetCurrentResponseLevelIndex");
static_assert(offsetof(BFGAlertSystemManager_GetCurrentResponseLevelIndex, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_GetCurrentResponseLevelIndex::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.GetCurrentResponseLevelName
// 0x0010 (0x0010 - 0x0000)
struct BFGAlertSystemManager_GetCurrentResponseLevelName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_GetCurrentResponseLevelName) == 0x000008, "Wrong alignment on BFGAlertSystemManager_GetCurrentResponseLevelName");
static_assert(sizeof(BFGAlertSystemManager_GetCurrentResponseLevelName) == 0x000010, "Wrong size on BFGAlertSystemManager_GetCurrentResponseLevelName");
static_assert(offsetof(BFGAlertSystemManager_GetCurrentResponseLevelName, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_GetCurrentResponseLevelName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.GetDetectionCuriosityScale
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_GetDetectionCuriosityScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_GetDetectionCuriosityScale) == 0x000004, "Wrong alignment on BFGAlertSystemManager_GetDetectionCuriosityScale");
static_assert(sizeof(BFGAlertSystemManager_GetDetectionCuriosityScale) == 0x000004, "Wrong size on BFGAlertSystemManager_GetDetectionCuriosityScale");
static_assert(offsetof(BFGAlertSystemManager_GetDetectionCuriosityScale, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_GetDetectionCuriosityScale::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.GetMaxResponseLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_GetMaxResponseLevelIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_GetMaxResponseLevelIndex) == 0x000004, "Wrong alignment on BFGAlertSystemManager_GetMaxResponseLevelIndex");
static_assert(sizeof(BFGAlertSystemManager_GetMaxResponseLevelIndex) == 0x000004, "Wrong size on BFGAlertSystemManager_GetMaxResponseLevelIndex");
static_assert(offsetof(BFGAlertSystemManager_GetMaxResponseLevelIndex, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_GetMaxResponseLevelIndex::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.GetPotentialResponseValue
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_GetPotentialResponseValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_GetPotentialResponseValue) == 0x000004, "Wrong alignment on BFGAlertSystemManager_GetPotentialResponseValue");
static_assert(sizeof(BFGAlertSystemManager_GetPotentialResponseValue) == 0x000004, "Wrong size on BFGAlertSystemManager_GetPotentialResponseValue");
static_assert(offsetof(BFGAlertSystemManager_GetPotentialResponseValue, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_GetPotentialResponseValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.GetResponseValue
// 0x0004 (0x0004 - 0x0000)
struct BFGAlertSystemManager_GetResponseValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_GetResponseValue) == 0x000004, "Wrong alignment on BFGAlertSystemManager_GetResponseValue");
static_assert(sizeof(BFGAlertSystemManager_GetResponseValue) == 0x000004, "Wrong size on BFGAlertSystemManager_GetResponseValue");
static_assert(offsetof(BFGAlertSystemManager_GetResponseValue, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_GetResponseValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.GetSeenState
// 0x0001 (0x0001 - 0x0000)
struct BFGAlertSystemManager_GetSeenState final
{
public:
	EBFGAlertSystemSeenState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_GetSeenState) == 0x000001, "Wrong alignment on BFGAlertSystemManager_GetSeenState");
static_assert(sizeof(BFGAlertSystemManager_GetSeenState) == 0x000001, "Wrong size on BFGAlertSystemManager_GetSeenState");
static_assert(offsetof(BFGAlertSystemManager_GetSeenState, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_GetSeenState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.IsResponseLevelLocked
// 0x0001 (0x0001 - 0x0000)
struct BFGAlertSystemManager_IsResponseLevelLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_IsResponseLevelLocked) == 0x000001, "Wrong alignment on BFGAlertSystemManager_IsResponseLevelLocked");
static_assert(sizeof(BFGAlertSystemManager_IsResponseLevelLocked) == 0x000001, "Wrong size on BFGAlertSystemManager_IsResponseLevelLocked");
static_assert(offsetof(BFGAlertSystemManager_IsResponseLevelLocked, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_IsResponseLevelLocked::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAlertSystemManager.IsSpawningEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGAlertSystemManager_IsSpawningEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAlertSystemManager_IsSpawningEnabled) == 0x000001, "Wrong alignment on BFGAlertSystemManager_IsSpawningEnabled");
static_assert(sizeof(BFGAlertSystemManager_IsSpawningEnabled) == 0x000001, "Wrong size on BFGAlertSystemManager_IsSpawningEnabled");
static_assert(offsetof(BFGAlertSystemManager_IsSpawningEnabled, ReturnValue) == 0x000000, "Member 'BFGAlertSystemManager_IsSpawningEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCrowdScriptConSettings.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGCrowdScriptConSettings_GetSettings final
{
public:
	class UBFGCrowdScriptConSettings*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCrowdScriptConSettings_GetSettings) == 0x000008, "Wrong alignment on BFGCrowdScriptConSettings_GetSettings");
static_assert(sizeof(BFGCrowdScriptConSettings_GetSettings) == 0x000008, "Wrong size on BFGCrowdScriptConSettings_GetSettings");
static_assert(offsetof(BFGCrowdScriptConSettings_GetSettings, ReturnValue) == 0x000000, "Member 'BFGCrowdScriptConSettings_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementInteract.GetSparseQuestCounterVariables
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_ElementInteract_GetSparseQuestCounterVariables final
{
public:
	TArray<class UBFGVariable*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementInteract_GetSparseQuestCounterVariables) == 0x000008, "Wrong alignment on BFGQuest_ElementInteract_GetSparseQuestCounterVariables");
static_assert(sizeof(BFGQuest_ElementInteract_GetSparseQuestCounterVariables) == 0x000010, "Wrong size on BFGQuest_ElementInteract_GetSparseQuestCounterVariables");
static_assert(offsetof(BFGQuest_ElementInteract_GetSparseQuestCounterVariables, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementInteract_GetSparseQuestCounterVariables::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAmbientSoundManager.FindAllSoundsMatchingAllGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags final
{
public:
	struct FGameplayTagContainer                  _tagContainer;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class ABFGAmbientSound*>               ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags) == 0x000008, "Wrong alignment on BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags");
static_assert(sizeof(BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags) == 0x000030, "Wrong size on BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags");
static_assert(offsetof(BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags, _tagContainer) == 0x000000, "Member 'BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags::_tagContainer' has a wrong offset!");
static_assert(offsetof(BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags, ReturnValue) == 0x000020, "Member 'BFGAmbientSoundManager_FindAllSoundsMatchingAllGameplayTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAmbientSoundManager.FindAllSoundsMatchingAnyGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags final
{
public:
	struct FGameplayTagContainer                  _tagContainer;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class ABFGAmbientSound*>               ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags) == 0x000008, "Wrong alignment on BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags");
static_assert(sizeof(BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags) == 0x000030, "Wrong size on BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags");
static_assert(offsetof(BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags, _tagContainer) == 0x000000, "Member 'BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags::_tagContainer' has a wrong offset!");
static_assert(offsetof(BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags, ReturnValue) == 0x000020, "Member 'BFGAmbientSoundManager_FindAllSoundsMatchingAnyGameplayTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAmbientSoundManager.FindAllSoundsMatchingGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag final
{
public:
	struct FGameplayTag                           _tag;                                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABFGAmbientSound*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag) == 0x000008, "Wrong alignment on BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag");
static_assert(sizeof(BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag) == 0x000018, "Wrong size on BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag");
static_assert(offsetof(BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag, _tag) == 0x000000, "Member 'BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag, ReturnValue) == 0x000008, "Member 'BFGAmbientSoundManager_FindAllSoundsMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_UFO_QuantumDeconstructor.OnUFODealtDamage
// 0x0018 (0x0018 - 0x0000)
struct BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFatal;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                _damageType;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage) == 0x000008, "Wrong alignment on BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage");
static_assert(sizeof(BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage) == 0x000018, "Wrong size on BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage");
static_assert(offsetof(BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage, _pTarget) == 0x000000, "Member 'BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage, _fDamage) == 0x000008, "Member 'BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage, _bFatal) == 0x00000C, "Member 'BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage::_bFatal' has a wrong offset!");
static_assert(offsetof(BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage, _damageType) == 0x000010, "Member 'BFGWeapon_UFO_QuantumDeconstructor_OnUFODealtDamage::_damageType' has a wrong offset!");

// Function BFGCore.BFGVariableAction_MissionGroup_Lock.GetActionName_MissionGroupLock
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_MissionGroup_Lock_GetActionName_MissionGroupLock final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_MissionGroup_Lock_GetActionName_MissionGroupLock) == 0x000004, "Wrong alignment on BFGVariableAction_MissionGroup_Lock_GetActionName_MissionGroupLock");
static_assert(sizeof(BFGVariableAction_MissionGroup_Lock_GetActionName_MissionGroupLock) == 0x000008, "Wrong size on BFGVariableAction_MissionGroup_Lock_GetActionName_MissionGroupLock");
static_assert(offsetof(BFGVariableAction_MissionGroup_Lock_GetActionName_MissionGroupLock, ReturnValue) == 0x000000, "Member 'BFGVariableAction_MissionGroup_Lock_GetActionName_MissionGroupLock::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent.OnAttachedActorChange
// 0x0018 (0x0018 - 0x0000)
struct BFGNetworkPathAgent_OnAttachedActorChange final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsAttached;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNetworkPathAgent_OnAttachedActorChange) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_OnAttachedActorChange");
static_assert(sizeof(BFGNetworkPathAgent_OnAttachedActorChange) == 0x000018, "Wrong size on BFGNetworkPathAgent_OnAttachedActorChange");
static_assert(offsetof(BFGNetworkPathAgent_OnAttachedActorChange, _pAgent) == 0x000000, "Member 'BFGNetworkPathAgent_OnAttachedActorChange::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_OnAttachedActorChange, _pActor) == 0x000008, "Member 'BFGNetworkPathAgent_OnAttachedActorChange::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_OnAttachedActorChange, _bIsAttached) == 0x000010, "Member 'BFGNetworkPathAgent_OnAttachedActorChange::_bIsAttached' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent.OnLevelRemovedFromWorld
// 0x0010 (0x0010 - 0x0000)
struct BFGNetworkPathAgent_OnLevelRemovedFromWorld final
{
public:
	class ULevel*                                 _pLevel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_OnLevelRemovedFromWorld) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_OnLevelRemovedFromWorld");
static_assert(sizeof(BFGNetworkPathAgent_OnLevelRemovedFromWorld) == 0x000010, "Wrong size on BFGNetworkPathAgent_OnLevelRemovedFromWorld");
static_assert(offsetof(BFGNetworkPathAgent_OnLevelRemovedFromWorld, _pLevel) == 0x000000, "Member 'BFGNetworkPathAgent_OnLevelRemovedFromWorld::_pLevel' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_OnLevelRemovedFromWorld, _pWorld) == 0x000008, "Member 'BFGNetworkPathAgent_OnLevelRemovedFromWorld::_pWorld' has a wrong offset!");

// Function BFGCore.BFGAnimation_Variables.GetSquenceVariationsCount
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimation_Variables_GetSquenceVariationsCount final
{
public:
	EBFGAnimation_Sequence                        _sequence;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimation_Variables_GetSquenceVariationsCount) == 0x000004, "Wrong alignment on BFGAnimation_Variables_GetSquenceVariationsCount");
static_assert(sizeof(BFGAnimation_Variables_GetSquenceVariationsCount) == 0x000008, "Wrong size on BFGAnimation_Variables_GetSquenceVariationsCount");
static_assert(offsetof(BFGAnimation_Variables_GetSquenceVariationsCount, _sequence) == 0x000000, "Member 'BFGAnimation_Variables_GetSquenceVariationsCount::_sequence' has a wrong offset!");
static_assert(offsetof(BFGAnimation_Variables_GetSquenceVariationsCount, ReturnValue) == 0x000004, "Member 'BFGAnimation_Variables_GetSquenceVariationsCount::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDamageCauserInterface.GetDamageInitiator
// 0x0008 (0x0008 - 0x0000)
struct BFGDamageCauserInterface_GetDamageInitiator final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDamageCauserInterface_GetDamageInitiator) == 0x000008, "Wrong alignment on BFGDamageCauserInterface_GetDamageInitiator");
static_assert(sizeof(BFGDamageCauserInterface_GetDamageInitiator) == 0x000008, "Wrong size on BFGDamageCauserInterface_GetDamageInitiator");
static_assert(offsetof(BFGDamageCauserInterface_GetDamageInitiator, ReturnValue) == 0x000000, "Member 'BFGDamageCauserInterface_GetDamageInitiator::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDamageCauserInterface.GetMentalAbilityClass
// 0x0008 (0x0008 - 0x0000)
struct BFGDamageCauserInterface_GetMentalAbilityClass final
{
public:
	TSubclassOf<class UBFGMentalAbilityBase>      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDamageCauserInterface_GetMentalAbilityClass) == 0x000008, "Wrong alignment on BFGDamageCauserInterface_GetMentalAbilityClass");
static_assert(sizeof(BFGDamageCauserInterface_GetMentalAbilityClass) == 0x000008, "Wrong size on BFGDamageCauserInterface_GetMentalAbilityClass");
static_assert(offsetof(BFGDamageCauserInterface_GetMentalAbilityClass, ReturnValue) == 0x000000, "Member 'BFGDamageCauserInterface_GetMentalAbilityClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDamageCauserInterface.GetWeaponClass
// 0x0008 (0x0008 - 0x0000)
struct BFGDamageCauserInterface_GetWeaponClass final
{
public:
	TSubclassOf<class ABFGWeapon>                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDamageCauserInterface_GetWeaponClass) == 0x000008, "Wrong alignment on BFGDamageCauserInterface_GetWeaponClass");
static_assert(sizeof(BFGDamageCauserInterface_GetWeaponClass) == 0x000008, "Wrong size on BFGDamageCauserInterface_GetWeaponClass");
static_assert(offsetof(BFGDamageCauserInterface_GetWeaponClass, ReturnValue) == 0x000000, "Member 'BFGDamageCauserInterface_GetWeaponClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_BaseRay.RechargeWeapon
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_BaseRay_RechargeWeapon final
{
public:
	float                                         _fInDelta;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BaseRay_RechargeWeapon) == 0x000004, "Wrong alignment on BFGWeapon_BaseRay_RechargeWeapon");
static_assert(sizeof(BFGWeapon_BaseRay_RechargeWeapon) == 0x000004, "Wrong size on BFGWeapon_BaseRay_RechargeWeapon");
static_assert(offsetof(BFGWeapon_BaseRay_RechargeWeapon, _fInDelta) == 0x000000, "Member 'BFGWeapon_BaseRay_RechargeWeapon::_fInDelta' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_LoadingScreenBase.LoadingScreen_Begin
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin final
{
public:
	class FString                                 _strMapName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin) == 0x000008, "Wrong alignment on BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin");
static_assert(sizeof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin) == 0x000010, "Wrong size on BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin");
static_assert(offsetof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin, _strMapName) == 0x000000, "Member 'BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin::_strMapName' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_LoadingScreenBase.LoadingScreen_Begin_Internal
// 0x0018 (0x0018 - 0x0000)
struct BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal final
{
public:
	class FString                                 _strMapName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShowBackgroundPicture;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal) == 0x000008, "Wrong alignment on BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal");
static_assert(sizeof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal) == 0x000018, "Wrong size on BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal");
static_assert(offsetof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal, _strMapName) == 0x000000, "Member 'BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal::_strMapName' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal, _bShowBackgroundPicture) == 0x000010, "Member 'BFGGameFlowState_LoadingScreenBase_LoadingScreen_Begin_Internal::_bShowBackgroundPicture' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_LoadingScreenBase.LoadingScreen_End
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowState_LoadingScreenBase_LoadingScreen_End final
{
public:
	class UWorld*                                 _pWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_End) == 0x000008, "Wrong alignment on BFGGameFlowState_LoadingScreenBase_LoadingScreen_End");
static_assert(sizeof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_End) == 0x000008, "Wrong size on BFGGameFlowState_LoadingScreenBase_LoadingScreen_End");
static_assert(offsetof(BFGGameFlowState_LoadingScreenBase_LoadingScreen_End, _pWorld) == 0x000000, "Member 'BFGGameFlowState_LoadingScreenBase_LoadingScreen_End::_pWorld' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_LoadMap.StartMapLoad
// 0x0020 (0x0020 - 0x0000)
struct BFGGameFlowState_LoadMap_StartMapLoad final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _strLevelName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSaveToSlot;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDoNotFadeIn;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceFadeIn;                                     // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_LoadMap_StartMapLoad) == 0x000008, "Wrong alignment on BFGGameFlowState_LoadMap_StartMapLoad");
static_assert(sizeof(BFGGameFlowState_LoadMap_StartMapLoad) == 0x000020, "Wrong size on BFGGameFlowState_LoadMap_StartMapLoad");
static_assert(offsetof(BFGGameFlowState_LoadMap_StartMapLoad, _pGameInstance) == 0x000000, "Member 'BFGGameFlowState_LoadMap_StartMapLoad::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadMap_StartMapLoad, _strLevelName) == 0x000008, "Member 'BFGGameFlowState_LoadMap_StartMapLoad::_strLevelName' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadMap_StartMapLoad, _iSaveToSlot) == 0x000018, "Member 'BFGGameFlowState_LoadMap_StartMapLoad::_iSaveToSlot' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadMap_StartMapLoad, _bDoNotFadeIn) == 0x00001C, "Member 'BFGGameFlowState_LoadMap_StartMapLoad::_bDoNotFadeIn' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadMap_StartMapLoad, _bForceFadeIn) == 0x00001D, "Member 'BFGGameFlowState_LoadMap_StartMapLoad::_bForceFadeIn' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadMap_StartMapLoad, ReturnValue) == 0x00001E, "Member 'BFGGameFlowState_LoadMap_StartMapLoad::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_SceneObjectHighlighter.AddHighlighterToCanvas
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_SceneObjectHighlighter_AddHighlighterToCanvas final
{
public:
	class UBFGWidgetSceneObjectHighlighter*       _pHighlighter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_SceneObjectHighlighter_AddHighlighterToCanvas) == 0x000008, "Wrong alignment on BFGWidget_HUD_SceneObjectHighlighter_AddHighlighterToCanvas");
static_assert(sizeof(BFGWidget_HUD_SceneObjectHighlighter_AddHighlighterToCanvas) == 0x000008, "Wrong size on BFGWidget_HUD_SceneObjectHighlighter_AddHighlighterToCanvas");
static_assert(offsetof(BFGWidget_HUD_SceneObjectHighlighter_AddHighlighterToCanvas, _pHighlighter) == 0x000000, "Member 'BFGWidget_HUD_SceneObjectHighlighter_AddHighlighterToCanvas::_pHighlighter' has a wrong offset!");

// Function BFGCore.BFGDataAsset_StaticMesh.GetFromComponent
// 0x0010 (0x0010 - 0x0000)
struct BFGDataAsset_StaticMesh_GetFromComponent final
{
public:
	class UStaticMeshComponent*                   _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDataAsset_StaticMesh*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataAsset_StaticMesh_GetFromComponent) == 0x000008, "Wrong alignment on BFGDataAsset_StaticMesh_GetFromComponent");
static_assert(sizeof(BFGDataAsset_StaticMesh_GetFromComponent) == 0x000010, "Wrong size on BFGDataAsset_StaticMesh_GetFromComponent");
static_assert(offsetof(BFGDataAsset_StaticMesh_GetFromComponent, _pComponent) == 0x000000, "Member 'BFGDataAsset_StaticMesh_GetFromComponent::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGDataAsset_StaticMesh_GetFromComponent, ReturnValue) == 0x000008, "Member 'BFGDataAsset_StaticMesh_GetFromComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataAsset_StaticMesh.GetFromMesh
// 0x0010 (0x0010 - 0x0000)
struct BFGDataAsset_StaticMesh_GetFromMesh final
{
public:
	class UStaticMesh*                            _pMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDataAsset_StaticMesh*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataAsset_StaticMesh_GetFromMesh) == 0x000008, "Wrong alignment on BFGDataAsset_StaticMesh_GetFromMesh");
static_assert(sizeof(BFGDataAsset_StaticMesh_GetFromMesh) == 0x000010, "Wrong size on BFGDataAsset_StaticMesh_GetFromMesh");
static_assert(offsetof(BFGDataAsset_StaticMesh_GetFromMesh, _pMesh) == 0x000000, "Member 'BFGDataAsset_StaticMesh_GetFromMesh::_pMesh' has a wrong offset!");
static_assert(offsetof(BFGDataAsset_StaticMesh_GetFromMesh, ReturnValue) == 0x000008, "Member 'BFGDataAsset_StaticMesh_GetFromMesh::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverPlaybackComponent.CancelPlaybackItem
// 0x0004 (0x0004 - 0x0000)
struct BFGVoiceoverPlaybackComponent_CancelPlaybackItem final
{
public:
	float                                         _fOverriddenFadeoutDuration;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverPlaybackComponent_CancelPlaybackItem) == 0x000004, "Wrong alignment on BFGVoiceoverPlaybackComponent_CancelPlaybackItem");
static_assert(sizeof(BFGVoiceoverPlaybackComponent_CancelPlaybackItem) == 0x000004, "Wrong size on BFGVoiceoverPlaybackComponent_CancelPlaybackItem");
static_assert(offsetof(BFGVoiceoverPlaybackComponent_CancelPlaybackItem, _fOverriddenFadeoutDuration) == 0x000000, "Member 'BFGVoiceoverPlaybackComponent_CancelPlaybackItem::_fOverriddenFadeoutDuration' has a wrong offset!");

// Function BFGCore.BFGVoiceoverPlaybackComponent.SetPauseItem
// 0x0001 (0x0001 - 0x0000)
struct BFGVoiceoverPlaybackComponent_SetPauseItem final
{
public:
	bool                                          _bIsPaused;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverPlaybackComponent_SetPauseItem) == 0x000001, "Wrong alignment on BFGVoiceoverPlaybackComponent_SetPauseItem");
static_assert(sizeof(BFGVoiceoverPlaybackComponent_SetPauseItem) == 0x000001, "Wrong size on BFGVoiceoverPlaybackComponent_SetPauseItem");
static_assert(offsetof(BFGVoiceoverPlaybackComponent_SetPauseItem, _bIsPaused) == 0x000000, "Member 'BFGVoiceoverPlaybackComponent_SetPauseItem::_bIsPaused' has a wrong offset!");

// Function BFGCore.BFGDynamicSpacer.SetMaxSize
// 0x0008 (0x0008 - 0x0000)
struct BFGDynamicSpacer_SetMaxSize final
{
public:
	struct FVector2D                              _vMaxSize;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDynamicSpacer_SetMaxSize) == 0x000004, "Wrong alignment on BFGDynamicSpacer_SetMaxSize");
static_assert(sizeof(BFGDynamicSpacer_SetMaxSize) == 0x000008, "Wrong size on BFGDynamicSpacer_SetMaxSize");
static_assert(offsetof(BFGDynamicSpacer_SetMaxSize, _vMaxSize) == 0x000000, "Member 'BFGDynamicSpacer_SetMaxSize::_vMaxSize' has a wrong offset!");

// Function BFGCore.BFGDynamicSpacer.SetSizeMultiplier
// 0x0008 (0x0008 - 0x0000)
struct BFGDynamicSpacer_SetSizeMultiplier final
{
public:
	struct FVector2D                              _vMultiplier;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDynamicSpacer_SetSizeMultiplier) == 0x000004, "Wrong alignment on BFGDynamicSpacer_SetSizeMultiplier");
static_assert(sizeof(BFGDynamicSpacer_SetSizeMultiplier) == 0x000008, "Wrong size on BFGDynamicSpacer_SetSizeMultiplier");
static_assert(offsetof(BFGDynamicSpacer_SetSizeMultiplier, _vMultiplier) == 0x000000, "Member 'BFGDynamicSpacer_SetSizeMultiplier::_vMultiplier' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.AddActivePostPivotAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_AddActivePostPivotAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_AddActivePostPivotAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_AddActivePostPivotAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_AddActivePostPivotAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_AddActivePostPivotAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_AddActivePostPivotAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_AddActivePostPivotAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.AddActivePrePivotAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_AddActivePrePivotAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_AddActivePrePivotAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_AddActivePrePivotAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_AddActivePrePivotAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_AddActivePrePivotAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_AddActivePrePivotAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_AddActivePrePivotAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.AddActiveStartAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_AddActiveStartAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_AddActiveStartAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_AddActiveStartAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_AddActiveStartAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_AddActiveStartAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_AddActiveStartAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_AddActiveStartAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.AddActiveStartTurnAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_AddActiveStartTurnAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_AddActiveStartTurnAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_AddActiveStartTurnAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_AddActiveStartTurnAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_AddActiveStartTurnAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_AddActiveStartTurnAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_AddActiveStartTurnAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.AddActiveStopAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_AddActiveStopAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_AddActiveStopAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_AddActiveStopAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_AddActiveStopAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_AddActiveStopAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_AddActiveStopAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_AddActiveStopAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.AddActiveTurningAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_AddActiveTurningAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_AddActiveTurningAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_AddActiveTurningAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_AddActiveTurningAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_AddActiveTurningAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_AddActiveTurningAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_AddActiveTurningAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.G2ACryptoUFOInteraction
// 0x0001 (0x0001 - 0x0000)
struct BFGAnimationInstance_G2ACryptoUFOInteraction final
{
public:
	bool                                          _bIsEntering;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_G2ACryptoUFOInteraction) == 0x000001, "Wrong alignment on BFGAnimationInstance_G2ACryptoUFOInteraction");
static_assert(sizeof(BFGAnimationInstance_G2ACryptoUFOInteraction) == 0x000001, "Wrong size on BFGAnimationInstance_G2ACryptoUFOInteraction");
static_assert(offsetof(BFGAnimationInstance_G2ACryptoUFOInteraction, _bIsEntering) == 0x000000, "Member 'BFGAnimationInstance_G2ACryptoUFOInteraction::_bIsEntering' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.G2AGetHit
// 0x0018 (0x0018 - 0x0000)
struct BFGAnimationInstance_G2AGetHit final
{
public:
	struct FVector                                _vHitDirection;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UBFGDamageType*                   _pDamageType;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_G2AGetHit) == 0x000008, "Wrong alignment on BFGAnimationInstance_G2AGetHit");
static_assert(sizeof(BFGAnimationInstance_G2AGetHit) == 0x000018, "Wrong size on BFGAnimationInstance_G2AGetHit");
static_assert(offsetof(BFGAnimationInstance_G2AGetHit, _vHitDirection) == 0x000000, "Member 'BFGAnimationInstance_G2AGetHit::_vHitDirection' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_G2AGetHit, _pDamageType) == 0x000010, "Member 'BFGAnimationInstance_G2AGetHit::_pDamageType' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.G2AHitByPhysicsObject
// 0x0018 (0x0018 - 0x0000)
struct BFGAnimationInstance_G2AHitByPhysicsObject final
{
public:
	struct FVector                                _vHitDirection;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fVelocity;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pHitByActor;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_G2AHitByPhysicsObject) == 0x000008, "Wrong alignment on BFGAnimationInstance_G2AHitByPhysicsObject");
static_assert(sizeof(BFGAnimationInstance_G2AHitByPhysicsObject) == 0x000018, "Wrong size on BFGAnimationInstance_G2AHitByPhysicsObject");
static_assert(offsetof(BFGAnimationInstance_G2AHitByPhysicsObject, _vHitDirection) == 0x000000, "Member 'BFGAnimationInstance_G2AHitByPhysicsObject::_vHitDirection' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_G2AHitByPhysicsObject, _fVelocity) == 0x00000C, "Member 'BFGAnimationInstance_G2AHitByPhysicsObject::_fVelocity' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_G2AHitByPhysicsObject, _pHitByActor) == 0x000010, "Member 'BFGAnimationInstance_G2AHitByPhysicsObject::_pHitByActor' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.G2AShotFire
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_G2AShotFire final
{
public:
	class FName                                   _nSocketName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_G2AShotFire) == 0x000004, "Wrong alignment on BFGAnimationInstance_G2AShotFire");
static_assert(sizeof(BFGAnimationInstance_G2AShotFire) == 0x000008, "Wrong size on BFGAnimationInstance_G2AShotFire");
static_assert(offsetof(BFGAnimationInstance_G2AShotFire, _nSocketName) == 0x000000, "Member 'BFGAnimationInstance_G2AShotFire::_nSocketName' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.G2AWeaponShotFired
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_G2AWeaponShotFired final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_G2AWeaponShotFired) == 0x000008, "Wrong alignment on BFGAnimationInstance_G2AWeaponShotFired");
static_assert(sizeof(BFGAnimationInstance_G2AWeaponShotFired) == 0x000008, "Wrong size on BFGAnimationInstance_G2AWeaponShotFired");
static_assert(offsetof(BFGAnimationInstance_G2AWeaponShotFired, _pWeapon) == 0x000000, "Member 'BFGAnimationInstance_G2AWeaponShotFired::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.G2AWeaponTelegraphingEnd
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_G2AWeaponTelegraphingEnd final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_G2AWeaponTelegraphingEnd) == 0x000008, "Wrong alignment on BFGAnimationInstance_G2AWeaponTelegraphingEnd");
static_assert(sizeof(BFGAnimationInstance_G2AWeaponTelegraphingEnd) == 0x000008, "Wrong size on BFGAnimationInstance_G2AWeaponTelegraphingEnd");
static_assert(offsetof(BFGAnimationInstance_G2AWeaponTelegraphingEnd, _pWeapon) == 0x000000, "Member 'BFGAnimationInstance_G2AWeaponTelegraphingEnd::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.G2AWeaponTelegraphingStart
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_G2AWeaponTelegraphingStart final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_G2AWeaponTelegraphingStart) == 0x000008, "Wrong alignment on BFGAnimationInstance_G2AWeaponTelegraphingStart");
static_assert(sizeof(BFGAnimationInstance_G2AWeaponTelegraphingStart) == 0x000008, "Wrong size on BFGAnimationInstance_G2AWeaponTelegraphingStart");
static_assert(offsetof(BFGAnimationInstance_G2AWeaponTelegraphingStart, _pWeapon) == 0x000000, "Member 'BFGAnimationInstance_G2AWeaponTelegraphingStart::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetActiveStopAnimationDistanceLookups
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_GetActiveStopAnimationDistanceLookups final
{
public:
	TArray<class UAnimSequence*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_GetActiveStopAnimationDistanceLookups) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetActiveStopAnimationDistanceLookups");
static_assert(sizeof(BFGAnimationInstance_GetActiveStopAnimationDistanceLookups) == 0x000010, "Wrong size on BFGAnimationInstance_GetActiveStopAnimationDistanceLookups");
static_assert(offsetof(BFGAnimationInstance_GetActiveStopAnimationDistanceLookups, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_GetActiveStopAnimationDistanceLookups::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.LodTransitionStarted
// 0x0040 (0x0040 - 0x0000)
struct BFGAnimationInstance_LodTransitionStarted final
{
public:
	struct FPoseSnapshot                          _oPoseSnapshot;                                    // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         _fTransitionTime;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAnimationInstance_LodTransitionStarted) == 0x000008, "Wrong alignment on BFGAnimationInstance_LodTransitionStarted");
static_assert(sizeof(BFGAnimationInstance_LodTransitionStarted) == 0x000040, "Wrong size on BFGAnimationInstance_LodTransitionStarted");
static_assert(offsetof(BFGAnimationInstance_LodTransitionStarted, _oPoseSnapshot) == 0x000000, "Member 'BFGAnimationInstance_LodTransitionStarted::_oPoseSnapshot' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_LodTransitionStarted, _fTransitionTime) == 0x000038, "Member 'BFGAnimationInstance_LodTransitionStarted::_fTransitionTime' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.LodTransitionUpdated
// 0x0038 (0x0038 - 0x0000)
struct BFGAnimationInstance_LodTransitionUpdated final
{
public:
	struct FPoseSnapshot                          _oPoseSnapshot;                                    // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_LodTransitionUpdated) == 0x000008, "Wrong alignment on BFGAnimationInstance_LodTransitionUpdated");
static_assert(sizeof(BFGAnimationInstance_LodTransitionUpdated) == 0x000038, "Wrong size on BFGAnimationInstance_LodTransitionUpdated");
static_assert(offsetof(BFGAnimationInstance_LodTransitionUpdated, _oPoseSnapshot) == 0x000000, "Member 'BFGAnimationInstance_LodTransitionUpdated::_oPoseSnapshot' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.RemoveActivePostPivotAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_RemoveActivePostPivotAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_RemoveActivePostPivotAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_RemoveActivePostPivotAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_RemoveActivePostPivotAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_RemoveActivePostPivotAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_RemoveActivePostPivotAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_RemoveActivePostPivotAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.RemoveActivePrePivotAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_RemoveActivePrePivotAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_RemoveActivePrePivotAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_RemoveActivePrePivotAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_RemoveActivePrePivotAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_RemoveActivePrePivotAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_RemoveActivePrePivotAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_RemoveActivePrePivotAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.RemoveActiveStartAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_RemoveActiveStartAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_RemoveActiveStartAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_RemoveActiveStartAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_RemoveActiveStartAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_RemoveActiveStartAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_RemoveActiveStartAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_RemoveActiveStartAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.RemoveActiveStartTurnAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_RemoveActiveStartTurnAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_RemoveActiveStartTurnAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_RemoveActiveStartTurnAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_RemoveActiveStartTurnAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_RemoveActiveStartTurnAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_RemoveActiveStartTurnAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_RemoveActiveStartTurnAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.RemoveActiveStopAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_RemoveActiveStopAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_RemoveActiveStopAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_RemoveActiveStopAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_RemoveActiveStopAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_RemoveActiveStopAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_RemoveActiveStopAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_RemoveActiveStopAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.RemoveActiveTurningAnimationDistanceLookup
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_RemoveActiveTurningAnimationDistanceLookup final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_RemoveActiveTurningAnimationDistanceLookup) == 0x000008, "Wrong alignment on BFGAnimationInstance_RemoveActiveTurningAnimationDistanceLookup");
static_assert(sizeof(BFGAnimationInstance_RemoveActiveTurningAnimationDistanceLookup) == 0x000008, "Wrong size on BFGAnimationInstance_RemoveActiveTurningAnimationDistanceLookup");
static_assert(offsetof(BFGAnimationInstance_RemoveActiveTurningAnimationDistanceLookup, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_RemoveActiveTurningAnimationDistanceLookup::_pAnimation' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.StandUpStarted
// 0x0040 (0x0040 - 0x0000)
struct BFGAnimationInstance_StandUpStarted final
{
public:
	bool                                          _bIsFaceDown;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSnapshot                          _oPoseSnapshot;                                    // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_StandUpStarted) == 0x000008, "Wrong alignment on BFGAnimationInstance_StandUpStarted");
static_assert(sizeof(BFGAnimationInstance_StandUpStarted) == 0x000040, "Wrong size on BFGAnimationInstance_StandUpStarted");
static_assert(offsetof(BFGAnimationInstance_StandUpStarted, _bIsFaceDown) == 0x000000, "Member 'BFGAnimationInstance_StandUpStarted::_bIsFaceDown' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_StandUpStarted, _oPoseSnapshot) == 0x000008, "Member 'BFGAnimationInstance_StandUpStarted::_oPoseSnapshot' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetEvents
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_GetEvents final
{
public:
	class UBFGAnimation_Events*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_GetEvents) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetEvents");
static_assert(sizeof(BFGAnimationInstance_GetEvents) == 0x000008, "Wrong size on BFGAnimationInstance_GetEvents");
static_assert(offsetof(BFGAnimationInstance_GetEvents, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_GetEvents::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetGameplayEffectTags
// 0x0020 (0x0020 - 0x0000)
struct BFGAnimationInstance_GetGameplayEffectTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_GetGameplayEffectTags) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetGameplayEffectTags");
static_assert(sizeof(BFGAnimationInstance_GetGameplayEffectTags) == 0x000020, "Wrong size on BFGAnimationInstance_GetGameplayEffectTags");
static_assert(offsetof(BFGAnimationInstance_GetGameplayEffectTags, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_GetGameplayEffectTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetMaxFloorDistance
// 0x0004 (0x0004 - 0x0000)
struct BFGAnimationInstance_GetMaxFloorDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_GetMaxFloorDistance) == 0x000004, "Wrong alignment on BFGAnimationInstance_GetMaxFloorDistance");
static_assert(sizeof(BFGAnimationInstance_GetMaxFloorDistance) == 0x000004, "Wrong size on BFGAnimationInstance_GetMaxFloorDistance");
static_assert(offsetof(BFGAnimationInstance_GetMaxFloorDistance, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_GetMaxFloorDistance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetPostPivotAnimationDistanceResult
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_GetPostPivotAnimationDistanceResult final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAnimationInstance_GetPostPivotAnimationDistanceResult) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetPostPivotAnimationDistanceResult");
static_assert(sizeof(BFGAnimationInstance_GetPostPivotAnimationDistanceResult) == 0x000010, "Wrong size on BFGAnimationInstance_GetPostPivotAnimationDistanceResult");
static_assert(offsetof(BFGAnimationInstance_GetPostPivotAnimationDistanceResult, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_GetPostPivotAnimationDistanceResult::_pAnimation' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_GetPostPivotAnimationDistanceResult, ReturnValue) == 0x000008, "Member 'BFGAnimationInstance_GetPostPivotAnimationDistanceResult::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetPrePivotAnimationDistanceResult
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_GetPrePivotAnimationDistanceResult final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAnimationInstance_GetPrePivotAnimationDistanceResult) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetPrePivotAnimationDistanceResult");
static_assert(sizeof(BFGAnimationInstance_GetPrePivotAnimationDistanceResult) == 0x000010, "Wrong size on BFGAnimationInstance_GetPrePivotAnimationDistanceResult");
static_assert(offsetof(BFGAnimationInstance_GetPrePivotAnimationDistanceResult, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_GetPrePivotAnimationDistanceResult::_pAnimation' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_GetPrePivotAnimationDistanceResult, ReturnValue) == 0x000008, "Member 'BFGAnimationInstance_GetPrePivotAnimationDistanceResult::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetStartAnimationDistanceResult
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_GetStartAnimationDistanceResult final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAnimationInstance_GetStartAnimationDistanceResult) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetStartAnimationDistanceResult");
static_assert(sizeof(BFGAnimationInstance_GetStartAnimationDistanceResult) == 0x000010, "Wrong size on BFGAnimationInstance_GetStartAnimationDistanceResult");
static_assert(offsetof(BFGAnimationInstance_GetStartAnimationDistanceResult, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_GetStartAnimationDistanceResult::_pAnimation' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_GetStartAnimationDistanceResult, ReturnValue) == 0x000008, "Member 'BFGAnimationInstance_GetStartAnimationDistanceResult::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetStartTurnAnimationDistanceResult
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_GetStartTurnAnimationDistanceResult final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAnimationInstance_GetStartTurnAnimationDistanceResult) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetStartTurnAnimationDistanceResult");
static_assert(sizeof(BFGAnimationInstance_GetStartTurnAnimationDistanceResult) == 0x000010, "Wrong size on BFGAnimationInstance_GetStartTurnAnimationDistanceResult");
static_assert(offsetof(BFGAnimationInstance_GetStartTurnAnimationDistanceResult, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_GetStartTurnAnimationDistanceResult::_pAnimation' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_GetStartTurnAnimationDistanceResult, ReturnValue) == 0x000008, "Member 'BFGAnimationInstance_GetStartTurnAnimationDistanceResult::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetStopAnimationDistanceResult
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_GetStopAnimationDistanceResult final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAnimationInstance_GetStopAnimationDistanceResult) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetStopAnimationDistanceResult");
static_assert(sizeof(BFGAnimationInstance_GetStopAnimationDistanceResult) == 0x000010, "Wrong size on BFGAnimationInstance_GetStopAnimationDistanceResult");
static_assert(offsetof(BFGAnimationInstance_GetStopAnimationDistanceResult, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_GetStopAnimationDistanceResult::_pAnimation' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_GetStopAnimationDistanceResult, ReturnValue) == 0x000008, "Member 'BFGAnimationInstance_GetStopAnimationDistanceResult::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetTurningAnimationDistanceResult
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_GetTurningAnimationDistanceResult final
{
public:
	class UAnimSequence*                          _pAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAnimationInstance_GetTurningAnimationDistanceResult) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetTurningAnimationDistanceResult");
static_assert(sizeof(BFGAnimationInstance_GetTurningAnimationDistanceResult) == 0x000010, "Wrong size on BFGAnimationInstance_GetTurningAnimationDistanceResult");
static_assert(offsetof(BFGAnimationInstance_GetTurningAnimationDistanceResult, _pAnimation) == 0x000000, "Member 'BFGAnimationInstance_GetTurningAnimationDistanceResult::_pAnimation' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_GetTurningAnimationDistanceResult, ReturnValue) == 0x000008, "Member 'BFGAnimationInstance_GetTurningAnimationDistanceResult::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance.GetVariables
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_GetVariables final
{
public:
	class UBFGAnimation_Variables*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_GetVariables) == 0x000008, "Wrong alignment on BFGAnimationInstance_GetVariables");
static_assert(sizeof(BFGAnimationInstance_GetVariables) == 0x000008, "Wrong size on BFGAnimationInstance_GetVariables");
static_assert(offsetof(BFGAnimationInstance_GetVariables, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_GetVariables::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.GetDisableTargeting
// 0x0001 (0x0001 - 0x0000)
struct BFGObject_StaticWithPhysics_GetDisableTargeting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_GetDisableTargeting) == 0x000001, "Wrong alignment on BFGObject_StaticWithPhysics_GetDisableTargeting");
static_assert(sizeof(BFGObject_StaticWithPhysics_GetDisableTargeting) == 0x000001, "Wrong size on BFGObject_StaticWithPhysics_GetDisableTargeting");
static_assert(offsetof(BFGObject_StaticWithPhysics_GetDisableTargeting, ReturnValue) == 0x000000, "Member 'BFGObject_StaticWithPhysics_GetDisableTargeting::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.SetDisableTargeting
// 0x0001 (0x0001 - 0x0000)
struct BFGObject_StaticWithPhysics_SetDisableTargeting final
{
public:
	bool                                          _bIsTargetingDisabled;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_SetDisableTargeting) == 0x000001, "Wrong alignment on BFGObject_StaticWithPhysics_SetDisableTargeting");
static_assert(sizeof(BFGObject_StaticWithPhysics_SetDisableTargeting) == 0x000001, "Wrong size on BFGObject_StaticWithPhysics_SetDisableTargeting");
static_assert(offsetof(BFGObject_StaticWithPhysics_SetDisableTargeting, _bIsTargetingDisabled) == 0x000000, "Member 'BFGObject_StaticWithPhysics_SetDisableTargeting::_bIsTargetingDisabled' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.SetMeshFromBlueprint
// 0x0008 (0x0008 - 0x0000)
struct BFGObject_StaticWithPhysics_SetMeshFromBlueprint final
{
public:
	class UStaticMeshComponent*                   PStaticMesh;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_SetMeshFromBlueprint) == 0x000008, "Wrong alignment on BFGObject_StaticWithPhysics_SetMeshFromBlueprint");
static_assert(sizeof(BFGObject_StaticWithPhysics_SetMeshFromBlueprint) == 0x000008, "Wrong size on BFGObject_StaticWithPhysics_SetMeshFromBlueprint");
static_assert(offsetof(BFGObject_StaticWithPhysics_SetMeshFromBlueprint, PStaticMesh) == 0x000000, "Member 'BFGObject_StaticWithPhysics_SetMeshFromBlueprint::PStaticMesh' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.TriggerObjectBlastMeshDestruction
// 0x000C (0x000C - 0x0000)
struct BFGObject_StaticWithPhysics_TriggerObjectBlastMeshDestruction final
{
public:
	struct FVector                                _fImpulse;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_TriggerObjectBlastMeshDestruction) == 0x000004, "Wrong alignment on BFGObject_StaticWithPhysics_TriggerObjectBlastMeshDestruction");
static_assert(sizeof(BFGObject_StaticWithPhysics_TriggerObjectBlastMeshDestruction) == 0x00000C, "Wrong size on BFGObject_StaticWithPhysics_TriggerObjectBlastMeshDestruction");
static_assert(offsetof(BFGObject_StaticWithPhysics_TriggerObjectBlastMeshDestruction, _fImpulse) == 0x000000, "Member 'BFGObject_StaticWithPhysics_TriggerObjectBlastMeshDestruction::_fImpulse' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.GetIsDestructionInProgess
// 0x0001 (0x0001 - 0x0000)
struct BFGObject_StaticWithPhysics_GetIsDestructionInProgess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_GetIsDestructionInProgess) == 0x000001, "Wrong alignment on BFGObject_StaticWithPhysics_GetIsDestructionInProgess");
static_assert(sizeof(BFGObject_StaticWithPhysics_GetIsDestructionInProgess) == 0x000001, "Wrong size on BFGObject_StaticWithPhysics_GetIsDestructionInProgess");
static_assert(offsetof(BFGObject_StaticWithPhysics_GetIsDestructionInProgess, ReturnValue) == 0x000000, "Member 'BFGObject_StaticWithPhysics_GetIsDestructionInProgess::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.GetIsHeldInPK
// 0x0001 (0x0001 - 0x0000)
struct BFGObject_StaticWithPhysics_GetIsHeldInPK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_GetIsHeldInPK) == 0x000001, "Wrong alignment on BFGObject_StaticWithPhysics_GetIsHeldInPK");
static_assert(sizeof(BFGObject_StaticWithPhysics_GetIsHeldInPK) == 0x000001, "Wrong size on BFGObject_StaticWithPhysics_GetIsHeldInPK");
static_assert(offsetof(BFGObject_StaticWithPhysics_GetIsHeldInPK, ReturnValue) == 0x000000, "Member 'BFGObject_StaticWithPhysics_GetIsHeldInPK::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.GetStaticMeshBurningDataAsset
// 0x0008 (0x0008 - 0x0000)
struct BFGObject_StaticWithPhysics_GetStaticMeshBurningDataAsset final
{
public:
	class UBFGDataAsset_StaticMeshBurning*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_GetStaticMeshBurningDataAsset) == 0x000008, "Wrong alignment on BFGObject_StaticWithPhysics_GetStaticMeshBurningDataAsset");
static_assert(sizeof(BFGObject_StaticWithPhysics_GetStaticMeshBurningDataAsset) == 0x000008, "Wrong size on BFGObject_StaticWithPhysics_GetStaticMeshBurningDataAsset");
static_assert(offsetof(BFGObject_StaticWithPhysics_GetStaticMeshBurningDataAsset, ReturnValue) == 0x000000, "Member 'BFGObject_StaticWithPhysics_GetStaticMeshBurningDataAsset::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.GetStaticMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGObject_StaticWithPhysics_GetStaticMeshComponent final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_GetStaticMeshComponent) == 0x000008, "Wrong alignment on BFGObject_StaticWithPhysics_GetStaticMeshComponent");
static_assert(sizeof(BFGObject_StaticWithPhysics_GetStaticMeshComponent) == 0x000008, "Wrong size on BFGObject_StaticWithPhysics_GetStaticMeshComponent");
static_assert(offsetof(BFGObject_StaticWithPhysics_GetStaticMeshComponent, ReturnValue) == 0x000000, "Member 'BFGObject_StaticWithPhysics_GetStaticMeshComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.GetStaticMeshDataAsset
// 0x0008 (0x0008 - 0x0000)
struct BFGObject_StaticWithPhysics_GetStaticMeshDataAsset final
{
public:
	class UBFGDataAsset_StaticMesh*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_GetStaticMeshDataAsset) == 0x000008, "Wrong alignment on BFGObject_StaticWithPhysics_GetStaticMeshDataAsset");
static_assert(sizeof(BFGObject_StaticWithPhysics_GetStaticMeshDataAsset) == 0x000008, "Wrong size on BFGObject_StaticWithPhysics_GetStaticMeshDataAsset");
static_assert(offsetof(BFGObject_StaticWithPhysics_GetStaticMeshDataAsset, ReturnValue) == 0x000000, "Member 'BFGObject_StaticWithPhysics_GetStaticMeshDataAsset::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.GetStaticMeshDestructionDataAsset
// 0x0008 (0x0008 - 0x0000)
struct BFGObject_StaticWithPhysics_GetStaticMeshDestructionDataAsset final
{
public:
	class UBFGDataAsset_StaticMeshDestruction*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_GetStaticMeshDestructionDataAsset) == 0x000008, "Wrong alignment on BFGObject_StaticWithPhysics_GetStaticMeshDestructionDataAsset");
static_assert(sizeof(BFGObject_StaticWithPhysics_GetStaticMeshDestructionDataAsset) == 0x000008, "Wrong size on BFGObject_StaticWithPhysics_GetStaticMeshDestructionDataAsset");
static_assert(offsetof(BFGObject_StaticWithPhysics_GetStaticMeshDestructionDataAsset, ReturnValue) == 0x000000, "Member 'BFGObject_StaticWithPhysics_GetStaticMeshDestructionDataAsset::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObject_StaticWithPhysics.IsDestructable
// 0x0001 (0x0001 - 0x0000)
struct BFGObject_StaticWithPhysics_IsDestructable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObject_StaticWithPhysics_IsDestructable) == 0x000001, "Wrong alignment on BFGObject_StaticWithPhysics_IsDestructable");
static_assert(sizeof(BFGObject_StaticWithPhysics_IsDestructable) == 0x000001, "Wrong size on BFGObject_StaticWithPhysics_IsDestructable");
static_assert(offsetof(BFGObject_StaticWithPhysics_IsDestructable, ReturnValue) == 0x000000, "Member 'BFGObject_StaticWithPhysics_IsDestructable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.ClearInteractAnimations
// 0x0001 (0x0001 - 0x0000)
struct BFGAnimationInstance_Npc_ClearInteractAnimations final
{
public:
	bool                                          _bRestoreCollisions;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Npc_ClearInteractAnimations) == 0x000001, "Wrong alignment on BFGAnimationInstance_Npc_ClearInteractAnimations");
static_assert(sizeof(BFGAnimationInstance_Npc_ClearInteractAnimations) == 0x000001, "Wrong size on BFGAnimationInstance_Npc_ClearInteractAnimations");
static_assert(offsetof(BFGAnimationInstance_Npc_ClearInteractAnimations, _bRestoreCollisions) == 0x000000, "Member 'BFGAnimationInstance_Npc_ClearInteractAnimations::_bRestoreCollisions' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.G2AEvade
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_Npc_G2AEvade final
{
public:
	EBFGEvadeDirection                            _direction;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pEvadeFromActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Npc_G2AEvade) == 0x000008, "Wrong alignment on BFGAnimationInstance_Npc_G2AEvade");
static_assert(sizeof(BFGAnimationInstance_Npc_G2AEvade) == 0x000010, "Wrong size on BFGAnimationInstance_Npc_G2AEvade");
static_assert(offsetof(BFGAnimationInstance_Npc_G2AEvade, _direction) == 0x000000, "Member 'BFGAnimationInstance_Npc_G2AEvade::_direction' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_Npc_G2AEvade, _pEvadeFromActor) == 0x000008, "Member 'BFGAnimationInstance_Npc_G2AEvade::_pEvadeFromActor' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.G2APlayerBumped
// 0x0018 (0x0018 - 0x0000)
struct BFGAnimationInstance_Npc_G2APlayerBumped final
{
public:
	struct FVector                                _vHitDirection;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fVelocity;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pHitByActor;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Npc_G2APlayerBumped) == 0x000008, "Wrong alignment on BFGAnimationInstance_Npc_G2APlayerBumped");
static_assert(sizeof(BFGAnimationInstance_Npc_G2APlayerBumped) == 0x000018, "Wrong size on BFGAnimationInstance_Npc_G2APlayerBumped");
static_assert(offsetof(BFGAnimationInstance_Npc_G2APlayerBumped, _vHitDirection) == 0x000000, "Member 'BFGAnimationInstance_Npc_G2APlayerBumped::_vHitDirection' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_Npc_G2APlayerBumped, _fVelocity) == 0x00000C, "Member 'BFGAnimationInstance_Npc_G2APlayerBumped::_fVelocity' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_Npc_G2APlayerBumped, _pHitByActor) == 0x000010, "Member 'BFGAnimationInstance_Npc_G2APlayerBumped::_pHitByActor' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.OnOrchestratorInteractAnimationPop
// 0x00D0 (0x00D0 - 0x0000)
struct BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop final
{
public:
	TScriptInterface<class IBFGInteractAnimationPlayerInterface> _pOrchestrator;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _data;                                             // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _oldData;                                          // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop) == 0x000008, "Wrong alignment on BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop");
static_assert(sizeof(BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop) == 0x0000D0, "Wrong size on BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop");
static_assert(offsetof(BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop, _pOrchestrator) == 0x000000, "Member 'BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop::_pOrchestrator' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop, _data) == 0x000010, "Member 'BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop::_data' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop, _oldData) == 0x000070, "Member 'BFGAnimationInstance_Npc_OnOrchestratorInteractAnimationPop::_oldData' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.PeekInteractAnimation
// 0x0060 (0x0060 - 0x0000)
struct BFGAnimationInstance_Npc_PeekInteractAnimation final
{
public:
	struct FBFGInteractAnimationData              ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Npc_PeekInteractAnimation) == 0x000008, "Wrong alignment on BFGAnimationInstance_Npc_PeekInteractAnimation");
static_assert(sizeof(BFGAnimationInstance_Npc_PeekInteractAnimation) == 0x000060, "Wrong size on BFGAnimationInstance_Npc_PeekInteractAnimation");
static_assert(offsetof(BFGAnimationInstance_Npc_PeekInteractAnimation, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Npc_PeekInteractAnimation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.PopInteractAnimation
// 0x0060 (0x0060 - 0x0000)
struct BFGAnimationInstance_Npc_PopInteractAnimation final
{
public:
	struct FBFGInteractAnimationData              ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Npc_PopInteractAnimation) == 0x000008, "Wrong alignment on BFGAnimationInstance_Npc_PopInteractAnimation");
static_assert(sizeof(BFGAnimationInstance_Npc_PopInteractAnimation) == 0x000060, "Wrong size on BFGAnimationInstance_Npc_PopInteractAnimation");
static_assert(offsetof(BFGAnimationInstance_Npc_PopInteractAnimation, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Npc_PopInteractAnimation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.FindWeaponState
// 0x0090 (0x0090 - 0x0000)
struct BFGAnimationInstance_Npc_FindWeaponState final
{
public:
	TSoftClassPtr<class UClass>                   _pWeaponType;                                      // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGAnimationVariables_Weapon          _weaponState;                                      // 0x0028(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAnimationInstance_Npc_FindWeaponState) == 0x000008, "Wrong alignment on BFGAnimationInstance_Npc_FindWeaponState");
static_assert(sizeof(BFGAnimationInstance_Npc_FindWeaponState) == 0x000090, "Wrong size on BFGAnimationInstance_Npc_FindWeaponState");
static_assert(offsetof(BFGAnimationInstance_Npc_FindWeaponState, _pWeaponType) == 0x000000, "Member 'BFGAnimationInstance_Npc_FindWeaponState::_pWeaponType' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_Npc_FindWeaponState, _weaponState) == 0x000028, "Member 'BFGAnimationInstance_Npc_FindWeaponState::_weaponState' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_Npc_FindWeaponState, ReturnValue) == 0x000088, "Member 'BFGAnimationInstance_Npc_FindWeaponState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.GetEvents_Npc
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Npc_GetEvents_Npc final
{
public:
	class UBFGAnimation_Events_Npc*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Npc_GetEvents_Npc) == 0x000008, "Wrong alignment on BFGAnimationInstance_Npc_GetEvents_Npc");
static_assert(sizeof(BFGAnimationInstance_Npc_GetEvents_Npc) == 0x000008, "Wrong size on BFGAnimationInstance_Npc_GetEvents_Npc");
static_assert(offsetof(BFGAnimationInstance_Npc_GetEvents_Npc, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Npc_GetEvents_Npc::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Npc.GetVariables_Npc
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Npc_GetVariables_Npc final
{
public:
	class UBFGAnimation_Variables_Npc*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Npc_GetVariables_Npc) == 0x000008, "Wrong alignment on BFGAnimationInstance_Npc_GetVariables_Npc");
static_assert(sizeof(BFGAnimationInstance_Npc_GetVariables_Npc) == 0x000008, "Wrong size on BFGAnimationInstance_Npc_GetVariables_Npc");
static_assert(offsetof(BFGAnimationInstance_Npc_GetVariables_Npc, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Npc_GetVariables_Npc::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_SavingSpinner.ShowWidget
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_SavingSpinner_ShowWidget final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_SavingSpinner_ShowWidget) == 0x000001, "Wrong alignment on BFGWidget_HUD_SavingSpinner_ShowWidget");
static_assert(sizeof(BFGWidget_HUD_SavingSpinner_ShowWidget) == 0x000001, "Wrong size on BFGWidget_HUD_SavingSpinner_ShowWidget");
static_assert(offsetof(BFGWidget_HUD_SavingSpinner_ShowWidget, _bShow) == 0x000000, "Member 'BFGWidget_HUD_SavingSpinner_ShowWidget::_bShow' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Animal.GetEvents_Animal
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Animal_GetEvents_Animal final
{
public:
	class UBFGAnimation_Events_Animal*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Animal_GetEvents_Animal) == 0x000008, "Wrong alignment on BFGAnimationInstance_Animal_GetEvents_Animal");
static_assert(sizeof(BFGAnimationInstance_Animal_GetEvents_Animal) == 0x000008, "Wrong size on BFGAnimationInstance_Animal_GetEvents_Animal");
static_assert(offsetof(BFGAnimationInstance_Animal_GetEvents_Animal, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Animal_GetEvents_Animal::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Animal.GetVariables_Animal
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Animal_GetVariables_Animal final
{
public:
	class UBFGAnimation_Variables_Animal*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Animal_GetVariables_Animal) == 0x000008, "Wrong alignment on BFGAnimationInstance_Animal_GetVariables_Animal");
static_assert(sizeof(BFGAnimationInstance_Animal_GetVariables_Animal) == 0x000008, "Wrong size on BFGAnimationInstance_Animal_GetVariables_Animal");
static_assert(offsetof(BFGAnimationInstance_Animal_GetVariables_Animal, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Animal_GetVariables_Animal::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDiscordWrapper.Update
// 0x0004 (0x0004 - 0x0000)
struct BFGDiscordWrapper_Update final
{
public:
	float                                         _fDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDiscordWrapper_Update) == 0x000004, "Wrong alignment on BFGDiscordWrapper_Update");
static_assert(sizeof(BFGDiscordWrapper_Update) == 0x000004, "Wrong size on BFGDiscordWrapper_Update");
static_assert(offsetof(BFGDiscordWrapper_Update, _fDeltaTime) == 0x000000, "Member 'BFGDiscordWrapper_Update::_fDeltaTime' has a wrong offset!");

// Function BFGCore.BFGDiscordWrapper.GetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGDiscordWrapper_GetIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDiscordWrapper_GetIsEnabled) == 0x000001, "Wrong alignment on BFGDiscordWrapper_GetIsEnabled");
static_assert(sizeof(BFGDiscordWrapper_GetIsEnabled) == 0x000001, "Wrong size on BFGDiscordWrapper_GetIsEnabled");
static_assert(offsetof(BFGDiscordWrapper_GetIsEnabled, ReturnValue) == 0x000000, "Member 'BFGDiscordWrapper_GetIsEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GamestartSequence.OnActionDone
// 0x0018 (0x0018 - 0x0000)
struct BFGGameFlowState_GamestartSequence_OnActionDone final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGSaveSystem_ActionResult                   _result;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_GamestartSequence_OnActionDone) == 0x000008, "Wrong alignment on BFGGameFlowState_GamestartSequence_OnActionDone");
static_assert(sizeof(BFGGameFlowState_GamestartSequence_OnActionDone) == 0x000018, "Wrong size on BFGGameFlowState_GamestartSequence_OnActionDone");
static_assert(offsetof(BFGGameFlowState_GamestartSequence_OnActionDone, _pSaveSystem) == 0x000000, "Member 'BFGGameFlowState_GamestartSequence_OnActionDone::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_GamestartSequence_OnActionDone, _pAction) == 0x000008, "Member 'BFGGameFlowState_GamestartSequence_OnActionDone::_pAction' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_GamestartSequence_OnActionDone, _result) == 0x000010, "Member 'BFGGameFlowState_GamestartSequence_OnActionDone::_result' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GamestartSequence.OnIISClosed
// 0x0001 (0x0001 - 0x0000)
struct BFGGameFlowState_GamestartSequence_OnIISClosed final
{
public:
	EBFGDialogMessage                             _eMessage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GamestartSequence_OnIISClosed) == 0x000001, "Wrong alignment on BFGGameFlowState_GamestartSequence_OnIISClosed");
static_assert(sizeof(BFGGameFlowState_GamestartSequence_OnIISClosed) == 0x000001, "Wrong size on BFGGameFlowState_GamestartSequence_OnIISClosed");
static_assert(offsetof(BFGGameFlowState_GamestartSequence_OnIISClosed, _eMessage) == 0x000000, "Member 'BFGGameFlowState_GamestartSequence_OnIISClosed::_eMessage' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Boss.G2ABossActionEvasion
// 0x0001 (0x0001 - 0x0000)
struct BFGAnimationInstance_Boss_G2ABossActionEvasion final
{
public:
	EBFGAttackQuadrant                            _eEvasionQuadrant;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Boss_G2ABossActionEvasion) == 0x000001, "Wrong alignment on BFGAnimationInstance_Boss_G2ABossActionEvasion");
static_assert(sizeof(BFGAnimationInstance_Boss_G2ABossActionEvasion) == 0x000001, "Wrong size on BFGAnimationInstance_Boss_G2ABossActionEvasion");
static_assert(offsetof(BFGAnimationInstance_Boss_G2ABossActionEvasion, _eEvasionQuadrant) == 0x000000, "Member 'BFGAnimationInstance_Boss_G2ABossActionEvasion::_eEvasionQuadrant' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Boss.G2ABossActionKnockDown
// 0x0001 (0x0001 - 0x0000)
struct BFGAnimationInstance_Boss_G2ABossActionKnockDown final
{
public:
	EBFGAttackQuadrant                            _eHitQuadrant;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Boss_G2ABossActionKnockDown) == 0x000001, "Wrong alignment on BFGAnimationInstance_Boss_G2ABossActionKnockDown");
static_assert(sizeof(BFGAnimationInstance_Boss_G2ABossActionKnockDown) == 0x000001, "Wrong size on BFGAnimationInstance_Boss_G2ABossActionKnockDown");
static_assert(offsetof(BFGAnimationInstance_Boss_G2ABossActionKnockDown, _eHitQuadrant) == 0x000000, "Member 'BFGAnimationInstance_Boss_G2ABossActionKnockDown::_eHitQuadrant' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Boss.G2ABossActionRocketLaunched
// 0x0001 (0x0001 - 0x0000)
struct BFGAnimationInstance_Boss_G2ABossActionRocketLaunched final
{
public:
	EBFGRocketSocket                              _eRocketSocket;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Boss_G2ABossActionRocketLaunched) == 0x000001, "Wrong alignment on BFGAnimationInstance_Boss_G2ABossActionRocketLaunched");
static_assert(sizeof(BFGAnimationInstance_Boss_G2ABossActionRocketLaunched) == 0x000001, "Wrong size on BFGAnimationInstance_Boss_G2ABossActionRocketLaunched");
static_assert(offsetof(BFGAnimationInstance_Boss_G2ABossActionRocketLaunched, _eRocketSocket) == 0x000000, "Member 'BFGAnimationInstance_Boss_G2ABossActionRocketLaunched::_eRocketSocket' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Boss.G2ABossInterruptedByDamage
// 0x0001 (0x0001 - 0x0000)
struct BFGAnimationInstance_Boss_G2ABossInterruptedByDamage final
{
public:
	EBFGAttackQuadrant                            _eHitQuadrant;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Boss_G2ABossInterruptedByDamage) == 0x000001, "Wrong alignment on BFGAnimationInstance_Boss_G2ABossInterruptedByDamage");
static_assert(sizeof(BFGAnimationInstance_Boss_G2ABossInterruptedByDamage) == 0x000001, "Wrong size on BFGAnimationInstance_Boss_G2ABossInterruptedByDamage");
static_assert(offsetof(BFGAnimationInstance_Boss_G2ABossInterruptedByDamage, _eHitQuadrant) == 0x000000, "Member 'BFGAnimationInstance_Boss_G2ABossInterruptedByDamage::_eHitQuadrant' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Boss.G2ABossStompActionStarted
// 0x0010 (0x0010 - 0x0000)
struct BFGAnimationInstance_Boss_G2ABossStompActionStarted final
{
public:
	class AActor*                                 _pOwnerActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTargetActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Boss_G2ABossStompActionStarted) == 0x000008, "Wrong alignment on BFGAnimationInstance_Boss_G2ABossStompActionStarted");
static_assert(sizeof(BFGAnimationInstance_Boss_G2ABossStompActionStarted) == 0x000010, "Wrong size on BFGAnimationInstance_Boss_G2ABossStompActionStarted");
static_assert(offsetof(BFGAnimationInstance_Boss_G2ABossStompActionStarted, _pOwnerActor) == 0x000000, "Member 'BFGAnimationInstance_Boss_G2ABossStompActionStarted::_pOwnerActor' has a wrong offset!");
static_assert(offsetof(BFGAnimationInstance_Boss_G2ABossStompActionStarted, _pTargetActor) == 0x000008, "Member 'BFGAnimationInstance_Boss_G2ABossStompActionStarted::_pTargetActor' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Boss.G2APhaseTransitionTriggered
// 0x0004 (0x0004 - 0x0000)
struct BFGAnimationInstance_Boss_G2APhaseTransitionTriggered final
{
public:
	int32                                         _iCurrentPhaseNumber;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Boss_G2APhaseTransitionTriggered) == 0x000004, "Wrong alignment on BFGAnimationInstance_Boss_G2APhaseTransitionTriggered");
static_assert(sizeof(BFGAnimationInstance_Boss_G2APhaseTransitionTriggered) == 0x000004, "Wrong size on BFGAnimationInstance_Boss_G2APhaseTransitionTriggered");
static_assert(offsetof(BFGAnimationInstance_Boss_G2APhaseTransitionTriggered, _iCurrentPhaseNumber) == 0x000000, "Member 'BFGAnimationInstance_Boss_G2APhaseTransitionTriggered::_iCurrentPhaseNumber' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Boss.GetEvents_Boss
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Boss_GetEvents_Boss final
{
public:
	class UBFGAnimation_Events_Boss*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Boss_GetEvents_Boss) == 0x000008, "Wrong alignment on BFGAnimationInstance_Boss_GetEvents_Boss");
static_assert(sizeof(BFGAnimationInstance_Boss_GetEvents_Boss) == 0x000008, "Wrong size on BFGAnimationInstance_Boss_GetEvents_Boss");
static_assert(offsetof(BFGAnimationInstance_Boss_GetEvents_Boss, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Boss_GetEvents_Boss::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Boss.GetVariables_Boss
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Boss_GetVariables_Boss final
{
public:
	class UBFGAnimation_Variables_Boss*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Boss_GetVariables_Boss) == 0x000008, "Wrong alignment on BFGAnimationInstance_Boss_GetVariables_Boss");
static_assert(sizeof(BFGAnimationInstance_Boss_GetVariables_Boss) == 0x000008, "Wrong size on BFGAnimationInstance_Boss_GetVariables_Boss");
static_assert(offsetof(BFGAnimationInstance_Boss_GetVariables_Boss, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Boss_GetVariables_Boss::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_IIS.OnApplicationPostInputKeyDownEvent
// 0x0038 (0x0038 - 0x0000)
struct BFGWidget_IIS_OnApplicationPostInputKeyDownEvent final
{
public:
	struct FKeyEvent                              _keyEvent;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_IIS_OnApplicationPostInputKeyDownEvent) == 0x000008, "Wrong alignment on BFGWidget_IIS_OnApplicationPostInputKeyDownEvent");
static_assert(sizeof(BFGWidget_IIS_OnApplicationPostInputKeyDownEvent) == 0x000038, "Wrong size on BFGWidget_IIS_OnApplicationPostInputKeyDownEvent");
static_assert(offsetof(BFGWidget_IIS_OnApplicationPostInputKeyDownEvent, _keyEvent) == 0x000000, "Member 'BFGWidget_IIS_OnApplicationPostInputKeyDownEvent::_keyEvent' has a wrong offset!");

// Function BFGCore.BFGWidget_IIS.OnBusyWithSigninStateChange
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_IIS_OnBusyWithSigninStateChange final
{
public:
	bool                                          _bBusy;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_IIS_OnBusyWithSigninStateChange) == 0x000001, "Wrong alignment on BFGWidget_IIS_OnBusyWithSigninStateChange");
static_assert(sizeof(BFGWidget_IIS_OnBusyWithSigninStateChange) == 0x000001, "Wrong size on BFGWidget_IIS_OnBusyWithSigninStateChange");
static_assert(offsetof(BFGWidget_IIS_OnBusyWithSigninStateChange, _bBusy) == 0x000000, "Member 'BFGWidget_IIS_OnBusyWithSigninStateChange::_bBusy' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Crypto.GetEvents_Crypto
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Crypto_GetEvents_Crypto final
{
public:
	class UBFGAnimation_Events_Crypto*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Crypto_GetEvents_Crypto) == 0x000008, "Wrong alignment on BFGAnimationInstance_Crypto_GetEvents_Crypto");
static_assert(sizeof(BFGAnimationInstance_Crypto_GetEvents_Crypto) == 0x000008, "Wrong size on BFGAnimationInstance_Crypto_GetEvents_Crypto");
static_assert(offsetof(BFGAnimationInstance_Crypto_GetEvents_Crypto, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Crypto_GetEvents_Crypto::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Crypto.GetVariables_Crypto
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Crypto_GetVariables_Crypto final
{
public:
	class UBFGAnimation_Variables_Crypto*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Crypto_GetVariables_Crypto) == 0x000008, "Wrong alignment on BFGAnimationInstance_Crypto_GetVariables_Crypto");
static_assert(sizeof(BFGAnimationInstance_Crypto_GetVariables_Crypto) == 0x000008, "Wrong size on BFGAnimationInstance_Crypto_GetVariables_Crypto");
static_assert(offsetof(BFGAnimationInstance_Crypto_GetVariables_Crypto, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Crypto_GetVariables_Crypto::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Human.GetEvents_Human
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Human_GetEvents_Human final
{
public:
	class UBFGAnimation_Events_Human*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Human_GetEvents_Human) == 0x000008, "Wrong alignment on BFGAnimationInstance_Human_GetEvents_Human");
static_assert(sizeof(BFGAnimationInstance_Human_GetEvents_Human) == 0x000008, "Wrong size on BFGAnimationInstance_Human_GetEvents_Human");
static_assert(offsetof(BFGAnimationInstance_Human_GetEvents_Human, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Human_GetEvents_Human::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Human.GetVariables_Human
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Human_GetVariables_Human final
{
public:
	class UBFGAnimation_Variables_Human*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Human_GetVariables_Human) == 0x000008, "Wrong alignment on BFGAnimationInstance_Human_GetVariables_Human");
static_assert(sizeof(BFGAnimationInstance_Human_GetVariables_Human) == 0x000008, "Wrong size on BFGAnimationInstance_Human_GetVariables_Human");
static_assert(offsetof(BFGAnimationInstance_Human_GetVariables_Human, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Human_GetVariables_Human::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_EnemyBallistic.ComputeBallisticRange
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_EnemyBallistic_ComputeBallisticRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_EnemyBallistic_ComputeBallisticRange) == 0x000004, "Wrong alignment on BFGWeapon_EnemyBallistic_ComputeBallisticRange");
static_assert(sizeof(BFGWeapon_EnemyBallistic_ComputeBallisticRange) == 0x000004, "Wrong size on BFGWeapon_EnemyBallistic_ComputeBallisticRange");
static_assert(offsetof(BFGWeapon_EnemyBallistic_ComputeBallisticRange, ReturnValue) == 0x000000, "Member 'BFGWeapon_EnemyBallistic_ComputeBallisticRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataHub.OnDataChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGDataHub_OnDataChanged final
{
public:
	class FName                                   _tag;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGDataProvider>      _pSourceProvider;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataHub_OnDataChanged) == 0x000008, "Wrong alignment on BFGDataHub_OnDataChanged");
static_assert(sizeof(BFGDataHub_OnDataChanged) == 0x000018, "Wrong size on BFGDataHub_OnDataChanged");
static_assert(offsetof(BFGDataHub_OnDataChanged, _tag) == 0x000000, "Member 'BFGDataHub_OnDataChanged::_tag' has a wrong offset!");
static_assert(offsetof(BFGDataHub_OnDataChanged, _pSourceProvider) == 0x000008, "Member 'BFGDataHub_OnDataChanged::_pSourceProvider' has a wrong offset!");

// Function BFGCore.BFGDataHub.RegisterDataProvider
// 0x0018 (0x0018 - 0x0000)
struct BFGDataHub_RegisterDataProvider final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGDataProvider>      _pProvider;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataHub_RegisterDataProvider) == 0x000008, "Wrong alignment on BFGDataHub_RegisterDataProvider");
static_assert(sizeof(BFGDataHub_RegisterDataProvider) == 0x000018, "Wrong size on BFGDataHub_RegisterDataProvider");
static_assert(offsetof(BFGDataHub_RegisterDataProvider, _name) == 0x000000, "Member 'BFGDataHub_RegisterDataProvider::_name' has a wrong offset!");
static_assert(offsetof(BFGDataHub_RegisterDataProvider, _pProvider) == 0x000008, "Member 'BFGDataHub_RegisterDataProvider::_pProvider' has a wrong offset!");

// Function BFGCore.BFGDataHub.RegisterDataSubscriber
// 0x0018 (0x0018 - 0x0000)
struct BFGDataHub_RegisterDataSubscriber final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGDataSubscriber>    _pSubscriber;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataHub_RegisterDataSubscriber) == 0x000008, "Wrong alignment on BFGDataHub_RegisterDataSubscriber");
static_assert(sizeof(BFGDataHub_RegisterDataSubscriber) == 0x000018, "Wrong size on BFGDataHub_RegisterDataSubscriber");
static_assert(offsetof(BFGDataHub_RegisterDataSubscriber, _name) == 0x000000, "Member 'BFGDataHub_RegisterDataSubscriber::_name' has a wrong offset!");
static_assert(offsetof(BFGDataHub_RegisterDataSubscriber, _pSubscriber) == 0x000008, "Member 'BFGDataHub_RegisterDataSubscriber::_pSubscriber' has a wrong offset!");

// Function BFGCore.BFGDataHub.UnregisterDataProvider
// 0x0018 (0x0018 - 0x0000)
struct BFGDataHub_UnregisterDataProvider final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGDataProvider>      _pProvider;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataHub_UnregisterDataProvider) == 0x000008, "Wrong alignment on BFGDataHub_UnregisterDataProvider");
static_assert(sizeof(BFGDataHub_UnregisterDataProvider) == 0x000018, "Wrong size on BFGDataHub_UnregisterDataProvider");
static_assert(offsetof(BFGDataHub_UnregisterDataProvider, _name) == 0x000000, "Member 'BFGDataHub_UnregisterDataProvider::_name' has a wrong offset!");
static_assert(offsetof(BFGDataHub_UnregisterDataProvider, _pProvider) == 0x000008, "Member 'BFGDataHub_UnregisterDataProvider::_pProvider' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Pox.G2APlayAnimationSequenceByName
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Pox_G2APlayAnimationSequenceByName final
{
public:
	class FName                                   _oName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Pox_G2APlayAnimationSequenceByName) == 0x000004, "Wrong alignment on BFGAnimationInstance_Pox_G2APlayAnimationSequenceByName");
static_assert(sizeof(BFGAnimationInstance_Pox_G2APlayAnimationSequenceByName) == 0x000008, "Wrong size on BFGAnimationInstance_Pox_G2APlayAnimationSequenceByName");
static_assert(offsetof(BFGAnimationInstance_Pox_G2APlayAnimationSequenceByName, _oName) == 0x000000, "Member 'BFGAnimationInstance_Pox_G2APlayAnimationSequenceByName::_oName' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Pox.GetEvents_Pox
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Pox_GetEvents_Pox final
{
public:
	class UBFGAnimation_Events_Pox*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Pox_GetEvents_Pox) == 0x000008, "Wrong alignment on BFGAnimationInstance_Pox_GetEvents_Pox");
static_assert(sizeof(BFGAnimationInstance_Pox_GetEvents_Pox) == 0x000008, "Wrong size on BFGAnimationInstance_Pox_GetEvents_Pox");
static_assert(offsetof(BFGAnimationInstance_Pox_GetEvents_Pox, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Pox_GetEvents_Pox::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInstance_Pox.GetVariables_Pox
// 0x0008 (0x0008 - 0x0000)
struct BFGAnimationInstance_Pox_GetVariables_Pox final
{
public:
	class UBFGAnimation_Variables_Pox*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInstance_Pox_GetVariables_Pox) == 0x000008, "Wrong alignment on BFGAnimationInstance_Pox_GetVariables_Pox");
static_assert(sizeof(BFGAnimationInstance_Pox_GetVariables_Pox) == 0x000008, "Wrong size on BFGAnimationInstance_Pox_GetVariables_Pox");
static_assert(offsetof(BFGAnimationInstance_Pox_GetVariables_Pox, ReturnValue) == 0x000000, "Member 'BFGAnimationInstance_Pox_GetVariables_Pox::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInteractPlayer.OnOrchestratorInteractAnimationPop
// 0x00D0 (0x00D0 - 0x0000)
struct BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop final
{
public:
	TScriptInterface<class IBFGInteractAnimationPlayerInterface> _pOrchestrator;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _data;                                             // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _oldData;                                          // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop) == 0x000008, "Wrong alignment on BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop");
static_assert(sizeof(BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop) == 0x0000D0, "Wrong size on BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop");
static_assert(offsetof(BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop, _pOrchestrator) == 0x000000, "Member 'BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop::_pOrchestrator' has a wrong offset!");
static_assert(offsetof(BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop, _data) == 0x000010, "Member 'BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop::_data' has a wrong offset!");
static_assert(offsetof(BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop, _oldData) == 0x000070, "Member 'BFGAnimationInteractPlayer_OnOrchestratorInteractAnimationPop::_oldData' has a wrong offset!");

// Function BFGCore.BFGVoiceoverSystem.GetItemResolver
// 0x0008 (0x0008 - 0x0000)
struct BFGVoiceoverSystem_GetItemResolver final
{
public:
	class UBFGVoiceoverItemResolver*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverSystem_GetItemResolver) == 0x000008, "Wrong alignment on BFGVoiceoverSystem_GetItemResolver");
static_assert(sizeof(BFGVoiceoverSystem_GetItemResolver) == 0x000008, "Wrong size on BFGVoiceoverSystem_GetItemResolver");
static_assert(offsetof(BFGVoiceoverSystem_GetItemResolver, ReturnValue) == 0x000000, "Member 'BFGVoiceoverSystem_GetItemResolver::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverSystem.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGVoiceoverSystem_GetSettings final
{
public:
	class UBFGVoiceoverSettings*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverSystem_GetSettings) == 0x000008, "Wrong alignment on BFGVoiceoverSystem_GetSettings");
static_assert(sizeof(BFGVoiceoverSystem_GetSettings) == 0x000008, "Wrong size on BFGVoiceoverSystem_GetSettings");
static_assert(offsetof(BFGVoiceoverSystem_GetSettings, ReturnValue) == 0x000000, "Member 'BFGVoiceoverSystem_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverSystem.GetStatistics
// 0x0008 (0x0008 - 0x0000)
struct BFGVoiceoverSystem_GetStatistics final
{
public:
	class UBFGVoiceoverStatistics*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverSystem_GetStatistics) == 0x000008, "Wrong alignment on BFGVoiceoverSystem_GetStatistics");
static_assert(sizeof(BFGVoiceoverSystem_GetStatistics) == 0x000008, "Wrong size on BFGVoiceoverSystem_GetStatistics");
static_assert(offsetof(BFGVoiceoverSystem_GetStatistics, ReturnValue) == 0x000000, "Member 'BFGVoiceoverSystem_GetStatistics::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataAsset_StaticMeshDestruction.GetDestructionMesh
// 0x0008 (0x0008 - 0x0000)
struct BFGDataAsset_StaticMeshDestruction_GetDestructionMesh final
{
public:
	class UBlastMesh*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataAsset_StaticMeshDestruction_GetDestructionMesh) == 0x000008, "Wrong alignment on BFGDataAsset_StaticMeshDestruction_GetDestructionMesh");
static_assert(sizeof(BFGDataAsset_StaticMeshDestruction_GetDestructionMesh) == 0x000008, "Wrong size on BFGDataAsset_StaticMeshDestruction_GetDestructionMesh");
static_assert(offsetof(BFGDataAsset_StaticMeshDestruction_GetDestructionMesh, ReturnValue) == 0x000000, "Member 'BFGDataAsset_StaticMeshDestruction_GetDestructionMesh::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataAsset_StaticMeshDestruction.IsValid
// 0x0001 (0x0001 - 0x0000)
struct BFGDataAsset_StaticMeshDestruction_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataAsset_StaticMeshDestruction_IsValid) == 0x000001, "Wrong alignment on BFGDataAsset_StaticMeshDestruction_IsValid");
static_assert(sizeof(BFGDataAsset_StaticMeshDestruction_IsValid) == 0x000001, "Wrong size on BFGDataAsset_StaticMeshDestruction_IsValid");
static_assert(offsetof(BFGDataAsset_StaticMeshDestruction_IsValid, ReturnValue) == 0x000000, "Member 'BFGDataAsset_StaticMeshDestruction_IsValid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAnimationInteractPlayerStaticMesh.OnOrchestratorInteractAnimationPop
// 0x00D0 (0x00D0 - 0x0000)
struct BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop final
{
public:
	TScriptInterface<class IBFGInteractAnimationPlayerInterface> _pOrchestrator;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _data;                                             // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _oldData;                                          // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop) == 0x000008, "Wrong alignment on BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop");
static_assert(sizeof(BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop) == 0x0000D0, "Wrong size on BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop");
static_assert(offsetof(BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop, _pOrchestrator) == 0x000000, "Member 'BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop::_pOrchestrator' has a wrong offset!");
static_assert(offsetof(BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop, _data) == 0x000010, "Member 'BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop::_data' has a wrong offset!");
static_assert(offsetof(BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop, _oldData) == 0x000070, "Member 'BFGAnimationInteractPlayerStaticMesh_OnOrchestratorInteractAnimationPop::_oldData' has a wrong offset!");

// Function BFGCore.BFGWeaponSlot.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct BFGWeaponSlot_SetBrush final
{
public:
	struct FSlateBrush                            _oBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeaponSlot_SetBrush) == 0x000008, "Wrong alignment on BFGWeaponSlot_SetBrush");
static_assert(sizeof(BFGWeaponSlot_SetBrush) == 0x000088, "Wrong size on BFGWeaponSlot_SetBrush");
static_assert(offsetof(BFGWeaponSlot_SetBrush, _oBrush) == 0x000000, "Member 'BFGWeaponSlot_SetBrush::_oBrush' has a wrong offset!");

// Function BFGCore.BFGWeaponSlot.SetEquipped
// 0x0001 (0x0001 - 0x0000)
struct BFGWeaponSlot_SetEquipped final
{
public:
	bool                                          _bEquipped;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeaponSlot_SetEquipped) == 0x000001, "Wrong alignment on BFGWeaponSlot_SetEquipped");
static_assert(sizeof(BFGWeaponSlot_SetEquipped) == 0x000001, "Wrong size on BFGWeaponSlot_SetEquipped");
static_assert(offsetof(BFGWeaponSlot_SetEquipped, _bEquipped) == 0x000000, "Member 'BFGWeaponSlot_SetEquipped::_bEquipped' has a wrong offset!");

// Function BFGCore.BFGWeaponSlot.SetInputActionName
// 0x0008 (0x0008 - 0x0000)
struct BFGWeaponSlot_SetInputActionName final
{
public:
	class FName                                   _strInputActionName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeaponSlot_SetInputActionName) == 0x000004, "Wrong alignment on BFGWeaponSlot_SetInputActionName");
static_assert(sizeof(BFGWeaponSlot_SetInputActionName) == 0x000008, "Wrong size on BFGWeaponSlot_SetInputActionName");
static_assert(offsetof(BFGWeaponSlot_SetInputActionName, _strInputActionName) == 0x000000, "Member 'BFGWeaponSlot_SetInputActionName::_strInputActionName' has a wrong offset!");

// Function BFGCore.BFGWeaponSlot.SetInputHintEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGWeaponSlot_SetInputHintEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeaponSlot_SetInputHintEnabled) == 0x000001, "Wrong alignment on BFGWeaponSlot_SetInputHintEnabled");
static_assert(sizeof(BFGWeaponSlot_SetInputHintEnabled) == 0x000001, "Wrong size on BFGWeaponSlot_SetInputHintEnabled");
static_assert(offsetof(BFGWeaponSlot_SetInputHintEnabled, _bEnabled) == 0x000000, "Member 'BFGWeaponSlot_SetInputHintEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGWeaponSlot.SetJammed
// 0x0001 (0x0001 - 0x0000)
struct BFGWeaponSlot_SetJammed final
{
public:
	bool                                          _bJammed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeaponSlot_SetJammed) == 0x000001, "Wrong alignment on BFGWeaponSlot_SetJammed");
static_assert(sizeof(BFGWeaponSlot_SetJammed) == 0x000001, "Wrong size on BFGWeaponSlot_SetJammed");
static_assert(offsetof(BFGWeaponSlot_SetJammed, _bJammed) == 0x000000, "Member 'BFGWeaponSlot_SetJammed::_bJammed' has a wrong offset!");

// Function BFGCore.BFGWeaponSlot.SetUnlocked
// 0x0001 (0x0001 - 0x0000)
struct BFGWeaponSlot_SetUnlocked final
{
public:
	bool                                          _bLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeaponSlot_SetUnlocked) == 0x000001, "Wrong alignment on BFGWeaponSlot_SetUnlocked");
static_assert(sizeof(BFGWeaponSlot_SetUnlocked) == 0x000001, "Wrong size on BFGWeaponSlot_SetUnlocked");
static_assert(offsetof(BFGWeaponSlot_SetUnlocked, _bLocked) == 0x000000, "Member 'BFGWeaponSlot_SetUnlocked::_bLocked' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GameplayEndSequence.GameplayEndFadeOut
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowState_GameplayEndSequence_GameplayEndFadeOut final
{
public:
	class UGameInstance*                          _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GameplayEndSequence_GameplayEndFadeOut) == 0x000008, "Wrong alignment on BFGGameFlowState_GameplayEndSequence_GameplayEndFadeOut");
static_assert(sizeof(BFGGameFlowState_GameplayEndSequence_GameplayEndFadeOut) == 0x000008, "Wrong size on BFGGameFlowState_GameplayEndSequence_GameplayEndFadeOut");
static_assert(offsetof(BFGGameFlowState_GameplayEndSequence_GameplayEndFadeOut, _pGameInstance) == 0x000000, "Member 'BFGGameFlowState_GameplayEndSequence_GameplayEndFadeOut::_pGameInstance' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GameplayEndSequence.GameplayEndStartNewEnding
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowState_GameplayEndSequence_GameplayEndStartNewEnding final
{
public:
	class UGameInstance*                          _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GameplayEndSequence_GameplayEndStartNewEnding) == 0x000008, "Wrong alignment on BFGGameFlowState_GameplayEndSequence_GameplayEndStartNewEnding");
static_assert(sizeof(BFGGameFlowState_GameplayEndSequence_GameplayEndStartNewEnding) == 0x000008, "Wrong size on BFGGameFlowState_GameplayEndSequence_GameplayEndStartNewEnding");
static_assert(offsetof(BFGGameFlowState_GameplayEndSequence_GameplayEndStartNewEnding, _pGameInstance) == 0x000000, "Member 'BFGGameFlowState_GameplayEndSequence_GameplayEndStartNewEnding::_pGameInstance' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GameplayEndSequence.OnEndEffectsRemoved
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved final
{
public:
	class UBFGGameplayEndSession*                 _pSession;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGGameplayEndEffects*                 _pEndEffects;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved) == 0x000008, "Wrong alignment on BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved");
static_assert(sizeof(BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved) == 0x000010, "Wrong size on BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved");
static_assert(offsetof(BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved, _pSession) == 0x000000, "Member 'BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved::_pSession' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved, _pEndEffects) == 0x000008, "Member 'BFGGameFlowState_GameplayEndSequence_OnEndEffectsRemoved::_pEndEffects' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GameplayEndSequence.OnNarrativeSequenceEnds
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowState_GameplayEndSequence_OnNarrativeSequenceEnds final
{
public:
	class UBFGNarrativeSequence*                  _pNarrativeSequence;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GameplayEndSequence_OnNarrativeSequenceEnds) == 0x000008, "Wrong alignment on BFGGameFlowState_GameplayEndSequence_OnNarrativeSequenceEnds");
static_assert(sizeof(BFGGameFlowState_GameplayEndSequence_OnNarrativeSequenceEnds) == 0x000008, "Wrong size on BFGGameFlowState_GameplayEndSequence_OnNarrativeSequenceEnds");
static_assert(offsetof(BFGGameFlowState_GameplayEndSequence_OnNarrativeSequenceEnds, _pNarrativeSequence) == 0x000000, "Member 'BFGGameFlowState_GameplayEndSequence_OnNarrativeSequenceEnds::_pNarrativeSequence' has a wrong offset!");

// DelegateFunction BFGCore.BFGDialogOptionHandler_Base.ActionOptionHandler__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature final
{
public:
	class UBFGDialogOptionHandler_Base*           _pHandler;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGDialogMessage                             _message;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature) == 0x000008, "Wrong alignment on BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature");
static_assert(sizeof(BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature) == 0x000010, "Wrong size on BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature");
static_assert(offsetof(BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature, _pHandler) == 0x000000, "Member 'BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature::_pHandler' has a wrong offset!");
static_assert(offsetof(BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature, _message) == 0x000008, "Member 'BFGDialogOptionHandler_Base_ActionOptionHandler__DelegateSignature::_message' has a wrong offset!");

// Function BFGCore.BFGDialogOptionHandler_Base.Init
// 0x0008 (0x0008 - 0x0000)
struct BFGDialogOptionHandler_Base_Init final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDialogOptionHandler_Base_Init) == 0x000008, "Wrong alignment on BFGDialogOptionHandler_Base_Init");
static_assert(sizeof(BFGDialogOptionHandler_Base_Init) == 0x000008, "Wrong size on BFGDialogOptionHandler_Base_Init");
static_assert(offsetof(BFGDialogOptionHandler_Base_Init, _pGameInstance) == 0x000000, "Member 'BFGDialogOptionHandler_Base_Init::_pGameInstance' has a wrong offset!");

// Function BFGCore.BFGDialogOptionHandler_SubDialogState.OnDialogMessage
// 0x0001 (0x0001 - 0x0000)
struct BFGDialogOptionHandler_SubDialogState_OnDialogMessage final
{
public:
	EBFGDialogMessage                             _eMessage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDialogOptionHandler_SubDialogState_OnDialogMessage) == 0x000001, "Wrong alignment on BFGDialogOptionHandler_SubDialogState_OnDialogMessage");
static_assert(sizeof(BFGDialogOptionHandler_SubDialogState_OnDialogMessage) == 0x000001, "Wrong size on BFGDialogOptionHandler_SubDialogState_OnDialogMessage");
static_assert(offsetof(BFGDialogOptionHandler_SubDialogState_OnDialogMessage, _eMessage) == 0x000000, "Member 'BFGDialogOptionHandler_SubDialogState_OnDialogMessage::_eMessage' has a wrong offset!");

// Function BFGCore.BFGAOE.CastAOE
// 0x0018 (0x0018 - 0x0000)
struct BFGAOE_CastAOE final
{
public:
	struct FAOEData                               _oData;                                            // 0x0000(0x0018)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGAOE_CastAOE) == 0x000008, "Wrong alignment on BFGAOE_CastAOE");
static_assert(sizeof(BFGAOE_CastAOE) == 0x000018, "Wrong size on BFGAOE_CastAOE");
static_assert(offsetof(BFGAOE_CastAOE, _oData) == 0x000000, "Member 'BFGAOE_CastAOE::_oData' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_LevelSwitch.StartLevelSwitch
// 0x0020 (0x0020 - 0x0000)
struct BFGGameFlowState_LevelSwitch_StartLevelSwitch final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _strLevelName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_LevelSwitch_StartLevelSwitch) == 0x000008, "Wrong alignment on BFGGameFlowState_LevelSwitch_StartLevelSwitch");
static_assert(sizeof(BFGGameFlowState_LevelSwitch_StartLevelSwitch) == 0x000020, "Wrong size on BFGGameFlowState_LevelSwitch_StartLevelSwitch");
static_assert(offsetof(BFGGameFlowState_LevelSwitch_StartLevelSwitch, _pGameInstance) == 0x000000, "Member 'BFGGameFlowState_LevelSwitch_StartLevelSwitch::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LevelSwitch_StartLevelSwitch, _strLevelName) == 0x000008, "Member 'BFGGameFlowState_LevelSwitch_StartLevelSwitch::_strLevelName' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LevelSwitch_StartLevelSwitch, ReturnValue) == 0x000018, "Member 'BFGGameFlowState_LevelSwitch_StartLevelSwitch::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_LevelSwitch.OnSaveSystemActionCompleted
// 0x0018 (0x0018 - 0x0000)
struct BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGSaveSystem_ActionResult                   _result;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted) == 0x000008, "Wrong alignment on BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted");
static_assert(sizeof(BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted) == 0x000018, "Wrong size on BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted");
static_assert(offsetof(BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted, _pSaveSystem) == 0x000000, "Member 'BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted, _pAction) == 0x000008, "Member 'BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted::_pAction' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted, _result) == 0x000010, "Member 'BFGGameFlowState_LevelSwitch_OnSaveSystemActionCompleted::_result' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Timer_End.GetActionName_TimerEnd
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Timer_End_GetActionName_TimerEnd final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Timer_End_GetActionName_TimerEnd) == 0x000004, "Wrong alignment on BFGVariableAction_Timer_End_GetActionName_TimerEnd");
static_assert(sizeof(BFGVariableAction_Timer_End_GetActionName_TimerEnd) == 0x000008, "Wrong size on BFGVariableAction_Timer_End_GetActionName_TimerEnd");
static_assert(offsetof(BFGVariableAction_Timer_End_GetActionName_TimerEnd, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Timer_End_GetActionName_TimerEnd::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAudio.GetSoundClassVolume
// 0x0018 (0x0018 - 0x0000)
struct BFGAudio_GetSoundClassVolume final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAudio_GetSoundClassVolume) == 0x000008, "Wrong alignment on BFGAudio_GetSoundClassVolume");
static_assert(sizeof(BFGAudio_GetSoundClassVolume) == 0x000018, "Wrong size on BFGAudio_GetSoundClassVolume");
static_assert(offsetof(BFGAudio_GetSoundClassVolume, ClassName) == 0x000000, "Member 'BFGAudio_GetSoundClassVolume::ClassName' has a wrong offset!");
static_assert(offsetof(BFGAudio_GetSoundClassVolume, Volume) == 0x000010, "Member 'BFGAudio_GetSoundClassVolume::Volume' has a wrong offset!");
static_assert(offsetof(BFGAudio_GetSoundClassVolume, ReturnValue) == 0x000014, "Member 'BFGAudio_GetSoundClassVolume::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGAudio.SetSoundClassVolume
// 0x0018 (0x0018 - 0x0000)
struct BFGAudio_SetSoundClassVolume final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGAudio_SetSoundClassVolume) == 0x000008, "Wrong alignment on BFGAudio_SetSoundClassVolume");
static_assert(sizeof(BFGAudio_SetSoundClassVolume) == 0x000018, "Wrong size on BFGAudio_SetSoundClassVolume");
static_assert(offsetof(BFGAudio_SetSoundClassVolume, ClassName) == 0x000000, "Member 'BFGAudio_SetSoundClassVolume::ClassName' has a wrong offset!");
static_assert(offsetof(BFGAudio_SetSoundClassVolume, Volume) == 0x000010, "Member 'BFGAudio_SetSoundClassVolume::Volume' has a wrong offset!");
static_assert(offsetof(BFGAudio_SetSoundClassVolume, ReturnValue) == 0x000014, "Member 'BFGAudio_SetSoundClassVolume::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossBase.SetActivePattern
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_BossBase_SetActivePattern final
{
public:
	int32                                         _iWeaponPatternIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BossBase_SetActivePattern) == 0x000004, "Wrong alignment on BFGWeapon_BossBase_SetActivePattern");
static_assert(sizeof(BFGWeapon_BossBase_SetActivePattern) == 0x000004, "Wrong size on BFGWeapon_BossBase_SetActivePattern");
static_assert(offsetof(BFGWeapon_BossBase_SetActivePattern, _iWeaponPatternIndex) == 0x000000, "Member 'BFGWeapon_BossBase_SetActivePattern::_iWeaponPatternIndex' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossBase.TryActivatePattern
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_BossBase_TryActivatePattern final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BossBase_TryActivatePattern) == 0x000001, "Wrong alignment on BFGWeapon_BossBase_TryActivatePattern");
static_assert(sizeof(BFGWeapon_BossBase_TryActivatePattern) == 0x000001, "Wrong size on BFGWeapon_BossBase_TryActivatePattern");
static_assert(offsetof(BFGWeapon_BossBase_TryActivatePattern, ReturnValue) == 0x000000, "Member 'BFGWeapon_BossBase_TryActivatePattern::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossBase.TryClearActivePattern
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_BossBase_TryClearActivePattern final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BossBase_TryClearActivePattern) == 0x000001, "Wrong alignment on BFGWeapon_BossBase_TryClearActivePattern");
static_assert(sizeof(BFGWeapon_BossBase_TryClearActivePattern) == 0x000001, "Wrong size on BFGWeapon_BossBase_TryClearActivePattern");
static_assert(offsetof(BFGWeapon_BossBase_TryClearActivePattern, ReturnValue) == 0x000000, "Member 'BFGWeapon_BossBase_TryClearActivePattern::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossBase.TryPreparePattern
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_BossBase_TryPreparePattern final
{
public:
	TSubclassOf<class ABFGPattern_Base>           _pPatternClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWeapon_BossBase_TryPreparePattern) == 0x000008, "Wrong alignment on BFGWeapon_BossBase_TryPreparePattern");
static_assert(sizeof(BFGWeapon_BossBase_TryPreparePattern) == 0x000010, "Wrong size on BFGWeapon_BossBase_TryPreparePattern");
static_assert(offsetof(BFGWeapon_BossBase_TryPreparePattern, _pPatternClass) == 0x000000, "Member 'BFGWeapon_BossBase_TryPreparePattern::_pPatternClass' has a wrong offset!");
static_assert(offsetof(BFGWeapon_BossBase_TryPreparePattern, ReturnValue) == 0x000008, "Member 'BFGWeapon_BossBase_TryPreparePattern::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossBase.GetActivePattern
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_BossBase_GetActivePattern final
{
public:
	class ABFGPattern_Base*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BossBase_GetActivePattern) == 0x000008, "Wrong alignment on BFGWeapon_BossBase_GetActivePattern");
static_assert(sizeof(BFGWeapon_BossBase_GetActivePattern) == 0x000008, "Wrong size on BFGWeapon_BossBase_GetActivePattern");
static_assert(offsetof(BFGWeapon_BossBase_GetActivePattern, ReturnValue) == 0x000000, "Member 'BFGWeapon_BossBase_GetActivePattern::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossBase.GetAimDirection
// 0x000C (0x000C - 0x0000)
struct BFGWeapon_BossBase_GetAimDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BossBase_GetAimDirection) == 0x000004, "Wrong alignment on BFGWeapon_BossBase_GetAimDirection");
static_assert(sizeof(BFGWeapon_BossBase_GetAimDirection) == 0x00000C, "Wrong size on BFGWeapon_BossBase_GetAimDirection");
static_assert(offsetof(BFGWeapon_BossBase_GetAimDirection, ReturnValue) == 0x000000, "Member 'BFGWeapon_BossBase_GetAimDirection::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossBase.HasActivePattern
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_BossBase_HasActivePattern final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BossBase_HasActivePattern) == 0x000001, "Wrong alignment on BFGWeapon_BossBase_HasActivePattern");
static_assert(sizeof(BFGWeapon_BossBase_HasActivePattern) == 0x000001, "Wrong size on BFGWeapon_BossBase_HasActivePattern");
static_assert(offsetof(BFGWeapon_BossBase_HasActivePattern, ReturnValue) == 0x000000, "Member 'BFGWeapon_BossBase_HasActivePattern::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBasicVehicle.HonkAtObstacleInFront
// 0x0004 (0x0004 - 0x0000)
struct BFGBasicVehicle_HonkAtObstacleInFront final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBasicVehicle_HonkAtObstacleInFront) == 0x000004, "Wrong alignment on BFGBasicVehicle_HonkAtObstacleInFront");
static_assert(sizeof(BFGBasicVehicle_HonkAtObstacleInFront) == 0x000004, "Wrong size on BFGBasicVehicle_HonkAtObstacleInFront");
static_assert(offsetof(BFGBasicVehicle_HonkAtObstacleInFront, ReturnValue) == 0x000000, "Member 'BFGBasicVehicle_HonkAtObstacleInFront::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBasicVehicle.OnBeforeCreatePhysicsState
// 0x0008 (0x0008 - 0x0000)
struct BFGBasicVehicle_OnBeforeCreatePhysicsState final
{
public:
	class UActorComponent*                        _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBasicVehicle_OnBeforeCreatePhysicsState) == 0x000008, "Wrong alignment on BFGBasicVehicle_OnBeforeCreatePhysicsState");
static_assert(sizeof(BFGBasicVehicle_OnBeforeCreatePhysicsState) == 0x000008, "Wrong size on BFGBasicVehicle_OnBeforeCreatePhysicsState");
static_assert(offsetof(BFGBasicVehicle_OnBeforeCreatePhysicsState, _pComponent) == 0x000000, "Member 'BFGBasicVehicle_OnBeforeCreatePhysicsState::_pComponent' has a wrong offset!");

// Function BFGCore.BFGBasicVehicle.OnTransmogrifyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGBasicVehicle_OnTransmogrifyStateChanged final
{
public:
	bool                                          _bActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBasicVehicle_OnTransmogrifyStateChanged) == 0x000001, "Wrong alignment on BFGBasicVehicle_OnTransmogrifyStateChanged");
static_assert(sizeof(BFGBasicVehicle_OnTransmogrifyStateChanged) == 0x000001, "Wrong size on BFGBasicVehicle_OnTransmogrifyStateChanged");
static_assert(offsetof(BFGBasicVehicle_OnTransmogrifyStateChanged, _bActive) == 0x000000, "Member 'BFGBasicVehicle_OnTransmogrifyStateChanged::_bActive' has a wrong offset!");

// Function BFGCore.BFGBasicVehicle.SetPhysicsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGBasicVehicle_SetPhysicsEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBasicVehicle_SetPhysicsEnabled) == 0x000001, "Wrong alignment on BFGBasicVehicle_SetPhysicsEnabled");
static_assert(sizeof(BFGBasicVehicle_SetPhysicsEnabled) == 0x000001, "Wrong size on BFGBasicVehicle_SetPhysicsEnabled");
static_assert(offsetof(BFGBasicVehicle_SetPhysicsEnabled, _bEnabled) == 0x000000, "Member 'BFGBasicVehicle_SetPhysicsEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGBasicVehicle.SpawnPhysicsVehicle
// 0x0050 (0x0050 - 0x0000)
struct BFGBasicVehicle_SpawnPhysicsVehicle final
{
public:
	TSubclassOf<class ABFGWheeledVehicle>         _type;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _Transform;                                        // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABFGWheeledVehicle*                     ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGBasicVehicle_SpawnPhysicsVehicle) == 0x000010, "Wrong alignment on BFGBasicVehicle_SpawnPhysicsVehicle");
static_assert(sizeof(BFGBasicVehicle_SpawnPhysicsVehicle) == 0x000050, "Wrong size on BFGBasicVehicle_SpawnPhysicsVehicle");
static_assert(offsetof(BFGBasicVehicle_SpawnPhysicsVehicle, _type) == 0x000000, "Member 'BFGBasicVehicle_SpawnPhysicsVehicle::_type' has a wrong offset!");
static_assert(offsetof(BFGBasicVehicle_SpawnPhysicsVehicle, _Transform) == 0x000010, "Member 'BFGBasicVehicle_SpawnPhysicsVehicle::_Transform' has a wrong offset!");
static_assert(offsetof(BFGBasicVehicle_SpawnPhysicsVehicle, ReturnValue) == 0x000040, "Member 'BFGBasicVehicle_SpawnPhysicsVehicle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBasicVehicle.GetReplacementWheeledVehicleType
// 0x0008 (0x0008 - 0x0000)
struct BFGBasicVehicle_GetReplacementWheeledVehicleType final
{
public:
	TSubclassOf<class ABFGWheeledVehicle>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBasicVehicle_GetReplacementWheeledVehicleType) == 0x000008, "Wrong alignment on BFGBasicVehicle_GetReplacementWheeledVehicleType");
static_assert(sizeof(BFGBasicVehicle_GetReplacementWheeledVehicleType) == 0x000008, "Wrong size on BFGBasicVehicle_GetReplacementWheeledVehicleType");
static_assert(offsetof(BFGBasicVehicle_GetReplacementWheeledVehicleType, ReturnValue) == 0x000000, "Member 'BFGBasicVehicle_GetReplacementWheeledVehicleType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBasicVehicle.IsPhysicsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGBasicVehicle_IsPhysicsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBasicVehicle_IsPhysicsEnabled) == 0x000001, "Wrong alignment on BFGBasicVehicle_IsPhysicsEnabled");
static_assert(sizeof(BFGBasicVehicle_IsPhysicsEnabled) == 0x000001, "Wrong size on BFGBasicVehicle_IsPhysicsEnabled");
static_assert(offsetof(BFGBasicVehicle_IsPhysicsEnabled, ReturnValue) == 0x000000, "Member 'BFGBasicVehicle_IsPhysicsEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBasicVehicleTank.SetTrackUpdateFrequence
// 0x0004 (0x0004 - 0x0000)
struct BFGBasicVehicleTank_SetTrackUpdateFrequence final
{
public:
	float                                         _fNewTFrequence;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBasicVehicleTank_SetTrackUpdateFrequence) == 0x000004, "Wrong alignment on BFGBasicVehicleTank_SetTrackUpdateFrequence");
static_assert(sizeof(BFGBasicVehicleTank_SetTrackUpdateFrequence) == 0x000004, "Wrong size on BFGBasicVehicleTank_SetTrackUpdateFrequence");
static_assert(offsetof(BFGBasicVehicleTank_SetTrackUpdateFrequence, _fNewTFrequence) == 0x000000, "Member 'BFGBasicVehicleTank_SetTrackUpdateFrequence::_fNewTFrequence' has a wrong offset!");

// Function BFGCore.BFGBendableAntenna.HandleMentallyInteractabledUse
// 0x0010 (0x0010 - 0x0000)
struct BFGBendableAntenna_HandleMentallyInteractabledUse final
{
public:
	class UBFGActorComponent_MentallyInteractable* _pMentallyInteractable;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _pController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBendableAntenna_HandleMentallyInteractabledUse) == 0x000008, "Wrong alignment on BFGBendableAntenna_HandleMentallyInteractabledUse");
static_assert(sizeof(BFGBendableAntenna_HandleMentallyInteractabledUse) == 0x000010, "Wrong size on BFGBendableAntenna_HandleMentallyInteractabledUse");
static_assert(offsetof(BFGBendableAntenna_HandleMentallyInteractabledUse, _pMentallyInteractable) == 0x000000, "Member 'BFGBendableAntenna_HandleMentallyInteractabledUse::_pMentallyInteractable' has a wrong offset!");
static_assert(offsetof(BFGBendableAntenna_HandleMentallyInteractabledUse, _pController) == 0x000008, "Member 'BFGBendableAntenna_HandleMentallyInteractabledUse::_pController' has a wrong offset!");

// Function BFGCore.BFGBombTruckInterface.GetBombTruckTimerAsString
// 0x0010 (0x0010 - 0x0000)
struct BFGBombTruckInterface_GetBombTruckTimerAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBombTruckInterface_GetBombTruckTimerAsString) == 0x000008, "Wrong alignment on BFGBombTruckInterface_GetBombTruckTimerAsString");
static_assert(sizeof(BFGBombTruckInterface_GetBombTruckTimerAsString) == 0x000010, "Wrong size on BFGBombTruckInterface_GetBombTruckTimerAsString");
static_assert(offsetof(BFGBombTruckInterface_GetBombTruckTimerAsString, ReturnValue) == 0x000000, "Member 'BFGBombTruckInterface_GetBombTruckTimerAsString::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBombTruckInterface.SetBombTruckTimerEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGBombTruckInterface_SetBombTruckTimerEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBombTruckInterface_SetBombTruckTimerEnabled) == 0x000001, "Wrong alignment on BFGBombTruckInterface_SetBombTruckTimerEnabled");
static_assert(sizeof(BFGBombTruckInterface_SetBombTruckTimerEnabled) == 0x000001, "Wrong size on BFGBombTruckInterface_SetBombTruckTimerEnabled");
static_assert(offsetof(BFGBombTruckInterface_SetBombTruckTimerEnabled, _bEnabled) == 0x000000, "Member 'BFGBombTruckInterface_SetBombTruckTimerEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGBombTruckInterface.IsBombTruckTimerEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGBombTruckInterface_IsBombTruckTimerEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBombTruckInterface_IsBombTruckTimerEnabled) == 0x000001, "Wrong alignment on BFGBombTruckInterface_IsBombTruckTimerEnabled");
static_assert(sizeof(BFGBombTruckInterface_IsBombTruckTimerEnabled) == 0x000001, "Wrong size on BFGBombTruckInterface_IsBombTruckTimerEnabled");
static_assert(offsetof(BFGBombTruckInterface_IsBombTruckTimerEnabled, ReturnValue) == 0x000000, "Member 'BFGBombTruckInterface_IsBombTruckTimerEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_PulseField.OnPulseEnter
// 0x0090 (0x0090 - 0x0000)
struct BFGProjectile_PulseField_OnPulseEnter final
{
public:
	struct FBFGPulseActorData                     _rData;                                            // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_PulseField_OnPulseEnter) == 0x000008, "Wrong alignment on BFGProjectile_PulseField_OnPulseEnter");
static_assert(sizeof(BFGProjectile_PulseField_OnPulseEnter) == 0x000090, "Wrong size on BFGProjectile_PulseField_OnPulseEnter");
static_assert(offsetof(BFGProjectile_PulseField_OnPulseEnter, _rData) == 0x000000, "Member 'BFGProjectile_PulseField_OnPulseEnter::_rData' has a wrong offset!");

// Function BFGCore.BFGProjectile_PulseField.OnPulseExit
// 0x0090 (0x0090 - 0x0000)
struct BFGProjectile_PulseField_OnPulseExit final
{
public:
	struct FBFGPulseActorData                     _rData;                                            // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_PulseField_OnPulseExit) == 0x000008, "Wrong alignment on BFGProjectile_PulseField_OnPulseExit");
static_assert(sizeof(BFGProjectile_PulseField_OnPulseExit) == 0x000090, "Wrong size on BFGProjectile_PulseField_OnPulseExit");
static_assert(offsetof(BFGProjectile_PulseField_OnPulseExit, _rData) == 0x000000, "Member 'BFGProjectile_PulseField_OnPulseExit::_rData' has a wrong offset!");

// Function BFGCore.BFGVariableType_Dialog.GetState_DialogFinishedDoMultiple
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Dialog_GetState_DialogFinishedDoMultiple final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Dialog_GetState_DialogFinishedDoMultiple) == 0x000004, "Wrong alignment on BFGVariableType_Dialog_GetState_DialogFinishedDoMultiple");
static_assert(sizeof(BFGVariableType_Dialog_GetState_DialogFinishedDoMultiple) == 0x000008, "Wrong size on BFGVariableType_Dialog_GetState_DialogFinishedDoMultiple");
static_assert(offsetof(BFGVariableType_Dialog_GetState_DialogFinishedDoMultiple, ReturnValue) == 0x000000, "Member 'BFGVariableType_Dialog_GetState_DialogFinishedDoMultiple::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Dialog.GetState_DialogFinishedDoOnce
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Dialog_GetState_DialogFinishedDoOnce final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Dialog_GetState_DialogFinishedDoOnce) == 0x000004, "Wrong alignment on BFGVariableType_Dialog_GetState_DialogFinishedDoOnce");
static_assert(sizeof(BFGVariableType_Dialog_GetState_DialogFinishedDoOnce) == 0x000008, "Wrong size on BFGVariableType_Dialog_GetState_DialogFinishedDoOnce");
static_assert(offsetof(BFGVariableType_Dialog_GetState_DialogFinishedDoOnce, ReturnValue) == 0x000000, "Member 'BFGVariableType_Dialog_GetState_DialogFinishedDoOnce::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Dialog.GetState_DialogNewDoMultiple
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Dialog_GetState_DialogNewDoMultiple final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Dialog_GetState_DialogNewDoMultiple) == 0x000004, "Wrong alignment on BFGVariableType_Dialog_GetState_DialogNewDoMultiple");
static_assert(sizeof(BFGVariableType_Dialog_GetState_DialogNewDoMultiple) == 0x000008, "Wrong size on BFGVariableType_Dialog_GetState_DialogNewDoMultiple");
static_assert(offsetof(BFGVariableType_Dialog_GetState_DialogNewDoMultiple, ReturnValue) == 0x000000, "Member 'BFGVariableType_Dialog_GetState_DialogNewDoMultiple::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Dialog.GetState_DialogNewDoOnce
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Dialog_GetState_DialogNewDoOnce final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Dialog_GetState_DialogNewDoOnce) == 0x000004, "Wrong alignment on BFGVariableType_Dialog_GetState_DialogNewDoOnce");
static_assert(sizeof(BFGVariableType_Dialog_GetState_DialogNewDoOnce) == 0x000008, "Wrong size on BFGVariableType_Dialog_GetState_DialogNewDoOnce");
static_assert(offsetof(BFGVariableType_Dialog_GetState_DialogNewDoOnce, ReturnValue) == 0x000000, "Member 'BFGVariableType_Dialog_GetState_DialogNewDoOnce::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Dialog.GetTypeName_Dialog
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Dialog_GetTypeName_Dialog final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Dialog_GetTypeName_Dialog) == 0x000004, "Wrong alignment on BFGVariableType_Dialog_GetTypeName_Dialog");
static_assert(sizeof(BFGVariableType_Dialog_GetTypeName_Dialog) == 0x000008, "Wrong size on BFGVariableType_Dialog_GetTypeName_Dialog");
static_assert(offsetof(BFGVariableType_Dialog_GetTypeName_Dialog, ReturnValue) == 0x000000, "Member 'BFGVariableType_Dialog_GetTypeName_Dialog::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Dialog.GetValueNamesForFinished
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableType_Dialog_GetValueNamesForFinished final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Dialog_GetValueNamesForFinished) == 0x000008, "Wrong alignment on BFGVariableType_Dialog_GetValueNamesForFinished");
static_assert(sizeof(BFGVariableType_Dialog_GetValueNamesForFinished) == 0x000010, "Wrong size on BFGVariableType_Dialog_GetValueNamesForFinished");
static_assert(offsetof(BFGVariableType_Dialog_GetValueNamesForFinished, ReturnValue) == 0x000000, "Member 'BFGVariableType_Dialog_GetValueNamesForFinished::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Dialog.GetValueNamesForNew
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableType_Dialog_GetValueNamesForNew final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Dialog_GetValueNamesForNew) == 0x000008, "Wrong alignment on BFGVariableType_Dialog_GetValueNamesForNew");
static_assert(sizeof(BFGVariableType_Dialog_GetValueNamesForNew) == 0x000010, "Wrong size on BFGVariableType_Dialog_GetValueNamesForNew");
static_assert(offsetof(BFGVariableType_Dialog_GetValueNamesForNew, ReturnValue) == 0x000000, "Member 'BFGVariableType_Dialog_GetValueNamesForNew::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBoss_TriggerBox.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct BFGBoss_TriggerBox_OnBeginOverlap final
{
public:
	class AActor*                                 _pOverlappedActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBoss_TriggerBox_OnBeginOverlap) == 0x000008, "Wrong alignment on BFGBoss_TriggerBox_OnBeginOverlap");
static_assert(sizeof(BFGBoss_TriggerBox_OnBeginOverlap) == 0x000010, "Wrong size on BFGBoss_TriggerBox_OnBeginOverlap");
static_assert(offsetof(BFGBoss_TriggerBox_OnBeginOverlap, _pOverlappedActor) == 0x000000, "Member 'BFGBoss_TriggerBox_OnBeginOverlap::_pOverlappedActor' has a wrong offset!");
static_assert(offsetof(BFGBoss_TriggerBox_OnBeginOverlap, _pOtherActor) == 0x000008, "Member 'BFGBoss_TriggerBox_OnBeginOverlap::_pOtherActor' has a wrong offset!");

// Function BFGCore.BFGBoss_TriggerBox.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct BFGBoss_TriggerBox_OnEndOverlap final
{
public:
	class AActor*                                 _pOverlappedActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBoss_TriggerBox_OnEndOverlap) == 0x000008, "Wrong alignment on BFGBoss_TriggerBox_OnEndOverlap");
static_assert(sizeof(BFGBoss_TriggerBox_OnEndOverlap) == 0x000010, "Wrong size on BFGBoss_TriggerBox_OnEndOverlap");
static_assert(offsetof(BFGBoss_TriggerBox_OnEndOverlap, _pOverlappedActor) == 0x000000, "Member 'BFGBoss_TriggerBox_OnEndOverlap::_pOverlappedActor' has a wrong offset!");
static_assert(offsetof(BFGBoss_TriggerBox_OnEndOverlap, _pOtherActor) == 0x000008, "Member 'BFGBoss_TriggerBox_OnEndOverlap::_pOtherActor' has a wrong offset!");

// Function BFGCore.BFGBossHealthHUDManager.GetCurrentBossChracter
// 0x0008 (0x0008 - 0x0000)
struct BFGBossHealthHUDManager_GetCurrentBossChracter final
{
public:
	class ABFGNPCCharacterBoss*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossHealthHUDManager_GetCurrentBossChracter) == 0x000008, "Wrong alignment on BFGBossHealthHUDManager_GetCurrentBossChracter");
static_assert(sizeof(BFGBossHealthHUDManager_GetCurrentBossChracter) == 0x000008, "Wrong size on BFGBossHealthHUDManager_GetCurrentBossChracter");
static_assert(offsetof(BFGBossHealthHUDManager_GetCurrentBossChracter, ReturnValue) == 0x000000, "Member 'BFGBossHealthHUDManager_GetCurrentBossChracter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner.OnReinforcementDeathStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged) == 0x000008, "Wrong alignment on BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged");
static_assert(sizeof(BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged) == 0x000010, "Wrong size on BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged");
static_assert(offsetof(BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged, _pActor) == 0x000000, "Member 'BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged, _pStat) == 0x000008, "Member 'BFGBossReinforcementSpawner_OnReinforcementDeathStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner.SetActive
// 0x0001 (0x0001 - 0x0000)
struct BFGBossReinforcementSpawner_SetActive final
{
public:
	bool                                          _bActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossReinforcementSpawner_SetActive) == 0x000001, "Wrong alignment on BFGBossReinforcementSpawner_SetActive");
static_assert(sizeof(BFGBossReinforcementSpawner_SetActive) == 0x000001, "Wrong size on BFGBossReinforcementSpawner_SetActive");
static_assert(offsetof(BFGBossReinforcementSpawner_SetActive, _bActive) == 0x000000, "Member 'BFGBossReinforcementSpawner_SetActive::_bActive' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner.TrySpawnNPC
// 0x0010 (0x0010 - 0x0000)
struct BFGBossReinforcementSpawner_TrySpawnNPC final
{
public:
	bool                                          _bAdjustSpawnLocation;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossReinforcementSpawner_TrySpawnNPC) == 0x000008, "Wrong alignment on BFGBossReinforcementSpawner_TrySpawnNPC");
static_assert(sizeof(BFGBossReinforcementSpawner_TrySpawnNPC) == 0x000010, "Wrong size on BFGBossReinforcementSpawner_TrySpawnNPC");
static_assert(offsetof(BFGBossReinforcementSpawner_TrySpawnNPC, _bAdjustSpawnLocation) == 0x000000, "Member 'BFGBossReinforcementSpawner_TrySpawnNPC::_bAdjustSpawnLocation' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_TrySpawnNPC, ReturnValue) == 0x000008, "Member 'BFGBossReinforcementSpawner_TrySpawnNPC::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner.IsActive
// 0x0001 (0x0001 - 0x0000)
struct BFGBossReinforcementSpawner_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossReinforcementSpawner_IsActive) == 0x000001, "Wrong alignment on BFGBossReinforcementSpawner_IsActive");
static_assert(sizeof(BFGBossReinforcementSpawner_IsActive) == 0x000001, "Wrong size on BFGBossReinforcementSpawner_IsActive");
static_assert(offsetof(BFGBossReinforcementSpawner_IsActive, ReturnValue) == 0x000000, "Member 'BFGBossReinforcementSpawner_IsActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Overhead.SetRichTextString
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_Overhead_SetRichTextString final
{
public:
	class FString                                 _strText;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Overhead_SetRichTextString) == 0x000008, "Wrong alignment on BFGWidget_Overhead_SetRichTextString");
static_assert(sizeof(BFGWidget_Overhead_SetRichTextString) == 0x000010, "Wrong size on BFGWidget_Overhead_SetRichTextString");
static_assert(offsetof(BFGWidget_Overhead_SetRichTextString, _strText) == 0x000000, "Member 'BFGWidget_Overhead_SetRichTextString::_strText' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.AddWorldRenderingDisabledRequest
// 0x0008 (0x0008 - 0x0000)
struct BFGTransitionManager_AddWorldRenderingDisabledRequest final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_AddWorldRenderingDisabledRequest) == 0x000008, "Wrong alignment on BFGTransitionManager_AddWorldRenderingDisabledRequest");
static_assert(sizeof(BFGTransitionManager_AddWorldRenderingDisabledRequest) == 0x000008, "Wrong size on BFGTransitionManager_AddWorldRenderingDisabledRequest");
static_assert(offsetof(BFGTransitionManager_AddWorldRenderingDisabledRequest, _pObject) == 0x000000, "Member 'BFGTransitionManager_AddWorldRenderingDisabledRequest::_pObject' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.GetFadeSystem
// 0x0008 (0x0008 - 0x0000)
struct BFGTransitionManager_GetFadeSystem final
{
public:
	class UBFGFadeSystem*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_GetFadeSystem) == 0x000008, "Wrong alignment on BFGTransitionManager_GetFadeSystem");
static_assert(sizeof(BFGTransitionManager_GetFadeSystem) == 0x000008, "Wrong size on BFGTransitionManager_GetFadeSystem");
static_assert(offsetof(BFGTransitionManager_GetFadeSystem, ReturnValue) == 0x000000, "Member 'BFGTransitionManager_GetFadeSystem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BFGTransitionManager_GetGameInstance final
{
public:
	class UBFGGameInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_GetGameInstance) == 0x000008, "Wrong alignment on BFGTransitionManager_GetGameInstance");
static_assert(sizeof(BFGTransitionManager_GetGameInstance) == 0x000008, "Wrong size on BFGTransitionManager_GetGameInstance");
static_assert(offsetof(BFGTransitionManager_GetGameInstance, ReturnValue) == 0x000000, "Member 'BFGTransitionManager_GetGameInstance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.RemoveWorldRenderingDisabledRequest
// 0x0008 (0x0008 - 0x0000)
struct BFGTransitionManager_RemoveWorldRenderingDisabledRequest final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_RemoveWorldRenderingDisabledRequest) == 0x000008, "Wrong alignment on BFGTransitionManager_RemoveWorldRenderingDisabledRequest");
static_assert(sizeof(BFGTransitionManager_RemoveWorldRenderingDisabledRequest) == 0x000008, "Wrong size on BFGTransitionManager_RemoveWorldRenderingDisabledRequest");
static_assert(offsetof(BFGTransitionManager_RemoveWorldRenderingDisabledRequest, _pObject) == 0x000000, "Member 'BFGTransitionManager_RemoveWorldRenderingDisabledRequest::_pObject' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.IsControlEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGTransitionManager_IsControlEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_IsControlEnabled) == 0x000001, "Wrong alignment on BFGTransitionManager_IsControlEnabled");
static_assert(sizeof(BFGTransitionManager_IsControlEnabled) == 0x000001, "Wrong size on BFGTransitionManager_IsControlEnabled");
static_assert(offsetof(BFGTransitionManager_IsControlEnabled, ReturnValue) == 0x000000, "Member 'BFGTransitionManager_IsControlEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.IsFadeOut
// 0x0001 (0x0001 - 0x0000)
struct BFGTransitionManager_IsFadeOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_IsFadeOut) == 0x000001, "Wrong alignment on BFGTransitionManager_IsFadeOut");
static_assert(sizeof(BFGTransitionManager_IsFadeOut) == 0x000001, "Wrong size on BFGTransitionManager_IsFadeOut");
static_assert(offsetof(BFGTransitionManager_IsFadeOut, ReturnValue) == 0x000000, "Member 'BFGTransitionManager_IsFadeOut::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.IsFading
// 0x0001 (0x0001 - 0x0000)
struct BFGTransitionManager_IsFading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_IsFading) == 0x000001, "Wrong alignment on BFGTransitionManager_IsFading");
static_assert(sizeof(BFGTransitionManager_IsFading) == 0x000001, "Wrong size on BFGTransitionManager_IsFading");
static_assert(offsetof(BFGTransitionManager_IsFading, ReturnValue) == 0x000000, "Member 'BFGTransitionManager_IsFading::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.IsHidden
// 0x0001 (0x0001 - 0x0000)
struct BFGTransitionManager_IsHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_IsHidden) == 0x000001, "Wrong alignment on BFGTransitionManager_IsHidden");
static_assert(sizeof(BFGTransitionManager_IsHidden) == 0x000001, "Wrong size on BFGTransitionManager_IsHidden");
static_assert(offsetof(BFGTransitionManager_IsHidden, ReturnValue) == 0x000000, "Member 'BFGTransitionManager_IsHidden::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTransitionManager.IsLoadingScreenShown
// 0x0001 (0x0001 - 0x0000)
struct BFGTransitionManager_IsLoadingScreenShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransitionManager_IsLoadingScreenShown) == 0x000001, "Wrong alignment on BFGTransitionManager_IsLoadingScreenShown");
static_assert(sizeof(BFGTransitionManager_IsLoadingScreenShown) == 0x000001, "Wrong size on BFGTransitionManager_IsLoadingScreenShown");
static_assert(offsetof(BFGTransitionManager_IsLoadingScreenShown, ReturnValue) == 0x000000, "Member 'BFGTransitionManager_IsLoadingScreenShown::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner_Silhouette.GetIsAscending
// 0x0001 (0x0001 - 0x0000)
struct BFGBossReinforcementSpawner_Silhouette_GetIsAscending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossReinforcementSpawner_Silhouette_GetIsAscending) == 0x000001, "Wrong alignment on BFGBossReinforcementSpawner_Silhouette_GetIsAscending");
static_assert(sizeof(BFGBossReinforcementSpawner_Silhouette_GetIsAscending) == 0x000001, "Wrong size on BFGBossReinforcementSpawner_Silhouette_GetIsAscending");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_GetIsAscending, ReturnValue) == 0x000000, "Member 'BFGBossReinforcementSpawner_Silhouette_GetIsAscending::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner_Silhouette.GetIsDescending
// 0x0001 (0x0001 - 0x0000)
struct BFGBossReinforcementSpawner_Silhouette_GetIsDescending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossReinforcementSpawner_Silhouette_GetIsDescending) == 0x000001, "Wrong alignment on BFGBossReinforcementSpawner_Silhouette_GetIsDescending");
static_assert(sizeof(BFGBossReinforcementSpawner_Silhouette_GetIsDescending) == 0x000001, "Wrong size on BFGBossReinforcementSpawner_Silhouette_GetIsDescending");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_GetIsDescending, ReturnValue) == 0x000000, "Member 'BFGBossReinforcementSpawner_Silhouette_GetIsDescending::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner_Silhouette.GetIsInUse
// 0x0001 (0x0001 - 0x0000)
struct BFGBossReinforcementSpawner_Silhouette_GetIsInUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossReinforcementSpawner_Silhouette_GetIsInUse) == 0x000001, "Wrong alignment on BFGBossReinforcementSpawner_Silhouette_GetIsInUse");
static_assert(sizeof(BFGBossReinforcementSpawner_Silhouette_GetIsInUse) == 0x000001, "Wrong size on BFGBossReinforcementSpawner_Silhouette_GetIsInUse");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_GetIsInUse, ReturnValue) == 0x000000, "Member 'BFGBossReinforcementSpawner_Silhouette_GetIsInUse::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner_Silhouette.OnBoxOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin) == 0x000008, "Wrong alignment on BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin");
static_assert(sizeof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin) == 0x0000A8, "Wrong size on BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin, OverlappedComp) == 0x000000, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin, OtherActor) == 0x000008, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin, OtherComp) == 0x000010, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin, bFromSweep) == 0x00001C, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin, SweepResult) == 0x000020, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapBegin::SweepResult' has a wrong offset!");

// Function BFGCore.BFGBossReinforcementSpawner_Silhouette.OnBoxOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd) == 0x000008, "Wrong alignment on BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd");
static_assert(sizeof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd) == 0x000020, "Wrong size on BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd, OverlappedComp) == 0x000000, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd, OtherActor) == 0x000008, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd, OtherComp) == 0x000010, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'BFGBossReinforcementSpawner_Silhouette_OnBoxOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function BFGCore.BFGBossSupportActor.IsSupportAvailable
// 0x0001 (0x0001 - 0x0000)
struct BFGBossSupportActor_IsSupportAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBossSupportActor_IsSupportAvailable) == 0x000001, "Wrong alignment on BFGBossSupportActor_IsSupportAvailable");
static_assert(sizeof(BFGBossSupportActor_IsSupportAvailable) == 0x000001, "Wrong size on BFGBossSupportActor_IsSupportAvailable");
static_assert(offsetof(BFGBossSupportActor_IsSupportAvailable, ReturnValue) == 0x000000, "Member 'BFGBossSupportActor_IsSupportAvailable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBossSupportActor.RequestSupport
// 0x0018 (0x0018 - 0x0000)
struct BFGBossSupportActor_RequestSupport final
{
public:
	class AActor*                                 _pTargetActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iPhaseNumber;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iStepIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGBossSupportActor_RequestSupport) == 0x000008, "Wrong alignment on BFGBossSupportActor_RequestSupport");
static_assert(sizeof(BFGBossSupportActor_RequestSupport) == 0x000018, "Wrong size on BFGBossSupportActor_RequestSupport");
static_assert(offsetof(BFGBossSupportActor_RequestSupport, _pTargetActor) == 0x000000, "Member 'BFGBossSupportActor_RequestSupport::_pTargetActor' has a wrong offset!");
static_assert(offsetof(BFGBossSupportActor_RequestSupport, _iPhaseNumber) == 0x000008, "Member 'BFGBossSupportActor_RequestSupport::_iPhaseNumber' has a wrong offset!");
static_assert(offsetof(BFGBossSupportActor_RequestSupport, _iStepIndex) == 0x00000C, "Member 'BFGBossSupportActor_RequestSupport::_iStepIndex' has a wrong offset!");
static_assert(offsetof(BFGBossSupportActor_RequestSupport, ReturnValue) == 0x000010, "Member 'BFGBossSupportActor_RequestSupport::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTextWrapper.SetText
// 0x0018 (0x0018 - 0x0000)
struct BFGTextWrapper_SetText final
{
public:
	class FText                                   _pText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTextWrapper_SetText) == 0x000008, "Wrong alignment on BFGTextWrapper_SetText");
static_assert(sizeof(BFGTextWrapper_SetText) == 0x000018, "Wrong size on BFGTextWrapper_SetText");
static_assert(offsetof(BFGTextWrapper_SetText, _pText) == 0x000000, "Member 'BFGTextWrapper_SetText::_pText' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequenceNode_PlayLevelSequence.FinishedSequence
// 0x0010 (0x0010 - 0x0000)
struct BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence) == 0x000008, "Wrong alignment on BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence");
static_assert(sizeof(BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence) == 0x000010, "Wrong size on BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence");
static_assert(offsetof(BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence, _pActor) == 0x000000, "Member 'BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence, _bWasCutscene) == 0x000008, "Member 'BFGNarrativeSequenceNode_PlayLevelSequence_FinishedSequence::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGBoundariesTriggerInterface.GetTriggerZoneIndicator
// 0x0008 (0x0008 - 0x0000)
struct BFGBoundariesTriggerInterface_GetTriggerZoneIndicator final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBoundariesTriggerInterface_GetTriggerZoneIndicator) == 0x000008, "Wrong alignment on BFGBoundariesTriggerInterface_GetTriggerZoneIndicator");
static_assert(sizeof(BFGBoundariesTriggerInterface_GetTriggerZoneIndicator) == 0x000008, "Wrong size on BFGBoundariesTriggerInterface_GetTriggerZoneIndicator");
static_assert(offsetof(BFGBoundariesTriggerInterface_GetTriggerZoneIndicator, ReturnValue) == 0x000000, "Member 'BFGBoundariesTriggerInterface_GetTriggerZoneIndicator::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBoundariesTriggerInterface.GetTriggerZoneIndicatorComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGBoundariesTriggerInterface_GetTriggerZoneIndicatorComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBoundariesTriggerInterface_GetTriggerZoneIndicatorComponent) == 0x000008, "Wrong alignment on BFGBoundariesTriggerInterface_GetTriggerZoneIndicatorComponent");
static_assert(sizeof(BFGBoundariesTriggerInterface_GetTriggerZoneIndicatorComponent) == 0x000008, "Wrong size on BFGBoundariesTriggerInterface_GetTriggerZoneIndicatorComponent");
static_assert(offsetof(BFGBoundariesTriggerInterface_GetTriggerZoneIndicatorComponent, ReturnValue) == 0x000000, "Member 'BFGBoundariesTriggerInterface_GetTriggerZoneIndicatorComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBoundariesTriggerInterface.TriggerZoneMessage
// 0x0001 (0x0001 - 0x0000)
struct BFGBoundariesTriggerInterface_TriggerZoneMessage final
{
public:
	bool                                          _bOut;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBoundariesTriggerInterface_TriggerZoneMessage) == 0x000001, "Wrong alignment on BFGBoundariesTriggerInterface_TriggerZoneMessage");
static_assert(sizeof(BFGBoundariesTriggerInterface_TriggerZoneMessage) == 0x000001, "Wrong size on BFGBoundariesTriggerInterface_TriggerZoneMessage");
static_assert(offsetof(BFGBoundariesTriggerInterface_TriggerZoneMessage, _bOut) == 0x000000, "Member 'BFGBoundariesTriggerInterface_TriggerZoneMessage::_bOut' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper_Content.GenerateTextImage
// 0x0038 (0x0038 - 0x0000)
struct BFGWidget_Newspaper_Content_GenerateTextImage final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 _styleName;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _oTextID;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  _eTextJustification;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockAlignment;                                   // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_Newspaper_Content_GenerateTextImage) == 0x000008, "Wrong alignment on BFGWidget_Newspaper_Content_GenerateTextImage");
static_assert(sizeof(BFGWidget_Newspaper_Content_GenerateTextImage) == 0x000038, "Wrong size on BFGWidget_Newspaper_Content_GenerateTextImage");
static_assert(offsetof(BFGWidget_Newspaper_Content_GenerateTextImage, _strText) == 0x000000, "Member 'BFGWidget_Newspaper_Content_GenerateTextImage::_strText' has a wrong offset!");
static_assert(offsetof(BFGWidget_Newspaper_Content_GenerateTextImage, _styleName) == 0x000018, "Member 'BFGWidget_Newspaper_Content_GenerateTextImage::_styleName' has a wrong offset!");
static_assert(offsetof(BFGWidget_Newspaper_Content_GenerateTextImage, _oTextID) == 0x000028, "Member 'BFGWidget_Newspaper_Content_GenerateTextImage::_oTextID' has a wrong offset!");
static_assert(offsetof(BFGWidget_Newspaper_Content_GenerateTextImage, _eTextJustification) == 0x000030, "Member 'BFGWidget_Newspaper_Content_GenerateTextImage::_eTextJustification' has a wrong offset!");
static_assert(offsetof(BFGWidget_Newspaper_Content_GenerateTextImage, bBlockAlignment) == 0x000031, "Member 'BFGWidget_Newspaper_Content_GenerateTextImage::bBlockAlignment' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper_Content.GetDrawSizeForTextID
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_Newspaper_Content_GetDrawSizeForTextID final
{
public:
	class FName                                   _oName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_Content_GetDrawSizeForTextID) == 0x000004, "Wrong alignment on BFGWidget_Newspaper_Content_GetDrawSizeForTextID");
static_assert(sizeof(BFGWidget_Newspaper_Content_GetDrawSizeForTextID) == 0x000010, "Wrong size on BFGWidget_Newspaper_Content_GetDrawSizeForTextID");
static_assert(offsetof(BFGWidget_Newspaper_Content_GetDrawSizeForTextID, _oName) == 0x000000, "Member 'BFGWidget_Newspaper_Content_GetDrawSizeForTextID::_oName' has a wrong offset!");
static_assert(offsetof(BFGWidget_Newspaper_Content_GetDrawSizeForTextID, ReturnValue) == 0x000008, "Member 'BFGWidget_Newspaper_Content_GetDrawSizeForTextID::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper_Content.GetObjectName
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Newspaper_Content_GetObjectName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_Content_GetObjectName) == 0x000004, "Wrong alignment on BFGWidget_Newspaper_Content_GetObjectName");
static_assert(sizeof(BFGWidget_Newspaper_Content_GetObjectName) == 0x000008, "Wrong size on BFGWidget_Newspaper_Content_GetObjectName");
static_assert(offsetof(BFGWidget_Newspaper_Content_GetObjectName, ReturnValue) == 0x000000, "Member 'BFGWidget_Newspaper_Content_GetObjectName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper_Content.SetAdvertisement
// 0x0090 (0x0090 - 0x0000)
struct BFGWidget_Newspaper_Content_SetAdvertisement final
{
public:
	struct FSlateBrush                            _oImage;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         IIndex;                                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_Newspaper_Content_SetAdvertisement) == 0x000008, "Wrong alignment on BFGWidget_Newspaper_Content_SetAdvertisement");
static_assert(sizeof(BFGWidget_Newspaper_Content_SetAdvertisement) == 0x000090, "Wrong size on BFGWidget_Newspaper_Content_SetAdvertisement");
static_assert(offsetof(BFGWidget_Newspaper_Content_SetAdvertisement, _oImage) == 0x000000, "Member 'BFGWidget_Newspaper_Content_SetAdvertisement::_oImage' has a wrong offset!");
static_assert(offsetof(BFGWidget_Newspaper_Content_SetAdvertisement, IIndex) == 0x000088, "Member 'BFGWidget_Newspaper_Content_SetAdvertisement::IIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper_Content.SetFrontImage
// 0x0088 (0x0088 - 0x0000)
struct BFGWidget_Newspaper_Content_SetFrontImage final
{
public:
	struct FSlateBrush                            _oImage;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_Content_SetFrontImage) == 0x000008, "Wrong alignment on BFGWidget_Newspaper_Content_SetFrontImage");
static_assert(sizeof(BFGWidget_Newspaper_Content_SetFrontImage) == 0x000088, "Wrong size on BFGWidget_Newspaper_Content_SetFrontImage");
static_assert(offsetof(BFGWidget_Newspaper_Content_SetFrontImage, _oImage) == 0x000000, "Member 'BFGWidget_Newspaper_Content_SetFrontImage::_oImage' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper_Content.SetTextImage
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_Newspaper_Content_SetTextImage final
{
public:
	class UTextureRenderTarget2D*                 _pImage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _oName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_Content_SetTextImage) == 0x000008, "Wrong alignment on BFGWidget_Newspaper_Content_SetTextImage");
static_assert(sizeof(BFGWidget_Newspaper_Content_SetTextImage) == 0x000010, "Wrong size on BFGWidget_Newspaper_Content_SetTextImage");
static_assert(offsetof(BFGWidget_Newspaper_Content_SetTextImage, _pImage) == 0x000000, "Member 'BFGWidget_Newspaper_Content_SetTextImage::_pImage' has a wrong offset!");
static_assert(offsetof(BFGWidget_Newspaper_Content_SetTextImage, _oName) == 0x000008, "Member 'BFGWidget_Newspaper_Content_SetTextImage::_oName' has a wrong offset!");

// Function BFGCore.BFGUFOAbility_EMP.OnProjectileEMPd
// 0x0008 (0x0008 - 0x0000)
struct BFGUFOAbility_EMP_OnProjectileEMPd final
{
public:
	class ABFGProjectile*                         PProjectile;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOAbility_EMP_OnProjectileEMPd) == 0x000008, "Wrong alignment on BFGUFOAbility_EMP_OnProjectileEMPd");
static_assert(sizeof(BFGUFOAbility_EMP_OnProjectileEMPd) == 0x000008, "Wrong size on BFGUFOAbility_EMP_OnProjectileEMPd");
static_assert(offsetof(BFGUFOAbility_EMP_OnProjectileEMPd, PProjectile) == 0x000000, "Member 'BFGUFOAbility_EMP_OnProjectileEMPd::PProjectile' has a wrong offset!");

// Function BFGCore.BFGWidget_SelectPlayerOption.SetQuestion
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_SelectPlayerOption_SetQuestion final
{
public:
	class FText                                   _strQuestion;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_SelectPlayerOption_SetQuestion) == 0x000008, "Wrong alignment on BFGWidget_SelectPlayerOption_SetQuestion");
static_assert(sizeof(BFGWidget_SelectPlayerOption_SetQuestion) == 0x000018, "Wrong size on BFGWidget_SelectPlayerOption_SetQuestion");
static_assert(offsetof(BFGWidget_SelectPlayerOption_SetQuestion, _strQuestion) == 0x000000, "Member 'BFGWidget_SelectPlayerOption_SetQuestion::_strQuestion' has a wrong offset!");

// Function BFGCore.BFGWidget_SelectPlayerOption.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_SelectPlayerOption_GetOptions final
{
public:
	TArray<class UBFGWidget_DialogOption*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_SelectPlayerOption_GetOptions) == 0x000008, "Wrong alignment on BFGWidget_SelectPlayerOption_GetOptions");
static_assert(sizeof(BFGWidget_SelectPlayerOption_GetOptions) == 0x000010, "Wrong size on BFGWidget_SelectPlayerOption_GetOptions");
static_assert(offsetof(BFGWidget_SelectPlayerOption_GetOptions, ReturnValue) == 0x000000, "Member 'BFGWidget_SelectPlayerOption_GetOptions::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_BossHealthbar.OnHealthChanged
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_BossHealthbar_OnHealthChanged final
{
public:
	float                                         _fHealth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_BossHealthbar_OnHealthChanged) == 0x000004, "Wrong alignment on BFGWidget_HUD_BossHealthbar_OnHealthChanged");
static_assert(sizeof(BFGWidget_HUD_BossHealthbar_OnHealthChanged) == 0x000004, "Wrong size on BFGWidget_HUD_BossHealthbar_OnHealthChanged");
static_assert(offsetof(BFGWidget_HUD_BossHealthbar_OnHealthChanged, _fHealth) == 0x000000, "Member 'BFGWidget_HUD_BossHealthbar_OnHealthChanged::_fHealth' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_BossHealthbar.OnPhaseChanged
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_BossHealthbar_OnPhaseChanged final
{
public:
	int32                                         _iPhase;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_BossHealthbar_OnPhaseChanged) == 0x000004, "Wrong alignment on BFGWidget_HUD_BossHealthbar_OnPhaseChanged");
static_assert(sizeof(BFGWidget_HUD_BossHealthbar_OnPhaseChanged) == 0x000004, "Wrong size on BFGWidget_HUD_BossHealthbar_OnPhaseChanged");
static_assert(offsetof(BFGWidget_HUD_BossHealthbar_OnPhaseChanged, _iPhase) == 0x000000, "Member 'BFGWidget_HUD_BossHealthbar_OnPhaseChanged::_iPhase' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_BossHealthbar.OnSetMaxBossPhases
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_BossHealthbar_OnSetMaxBossPhases final
{
public:
	int32                                         _iMaxPhases;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_BossHealthbar_OnSetMaxBossPhases) == 0x000004, "Wrong alignment on BFGWidget_HUD_BossHealthbar_OnSetMaxBossPhases");
static_assert(sizeof(BFGWidget_HUD_BossHealthbar_OnSetMaxBossPhases) == 0x000004, "Wrong size on BFGWidget_HUD_BossHealthbar_OnSetMaxBossPhases");
static_assert(offsetof(BFGWidget_HUD_BossHealthbar_OnSetMaxBossPhases, _iMaxPhases) == 0x000000, "Member 'BFGWidget_HUD_BossHealthbar_OnSetMaxBossPhases::_iMaxPhases' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AttachedEntity.OnActorSpawned
// 0x0010 (0x0010 - 0x0000)
struct BFGNetworkPathAgent_AttachedEntity_OnActorSpawned final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPreFinalize;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNetworkPathAgent_AttachedEntity_OnActorSpawned) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AttachedEntity_OnActorSpawned");
static_assert(sizeof(BFGNetworkPathAgent_AttachedEntity_OnActorSpawned) == 0x000010, "Wrong size on BFGNetworkPathAgent_AttachedEntity_OnActorSpawned");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnActorSpawned, _pActor) == 0x000000, "Member 'BFGNetworkPathAgent_AttachedEntity_OnActorSpawned::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnActorSpawned, _bPreFinalize) == 0x000008, "Member 'BFGNetworkPathAgent_AttachedEntity_OnActorSpawned::_bPreFinalize' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AttachedEntity.OnAIStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGNetworkPathAgent_AttachedEntity_OnAIStateChanged final
{
public:
	EBFGBehaviourState_NPC                        _newState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_AttachedEntity_OnAIStateChanged) == 0x000001, "Wrong alignment on BFGNetworkPathAgent_AttachedEntity_OnAIStateChanged");
static_assert(sizeof(BFGNetworkPathAgent_AttachedEntity_OnAIStateChanged) == 0x000001, "Wrong size on BFGNetworkPathAgent_AttachedEntity_OnAIStateChanged");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnAIStateChanged, _newState) == 0x000000, "Member 'BFGNetworkPathAgent_AttachedEntity_OnAIStateChanged::_newState' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AttachedEntity.OnAttachedActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGNetworkPathAgent_AttachedEntity_OnAttachedActorDestroyed final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_AttachedEntity_OnAttachedActorDestroyed) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AttachedEntity_OnAttachedActorDestroyed");
static_assert(sizeof(BFGNetworkPathAgent_AttachedEntity_OnAttachedActorDestroyed) == 0x000008, "Wrong size on BFGNetworkPathAgent_AttachedEntity_OnAttachedActorDestroyed");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnAttachedActorDestroyed, _pActor) == 0x000000, "Member 'BFGNetworkPathAgent_AttachedEntity_OnAttachedActorDestroyed::_pActor' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AttachedEntity.OnDeadStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged");
static_assert(sizeof(BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged) == 0x000010, "Wrong size on BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged, _pActor) == 0x000000, "Member 'BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged, _pStat) == 0x000008, "Member 'BFGNetworkPathAgent_AttachedEntity_OnDeadStatusChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AttachedEntity.OnHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNetworkPathAgent_AttachedEntity_OnHealthChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Float*                    _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_AttachedEntity_OnHealthChanged) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AttachedEntity_OnHealthChanged");
static_assert(sizeof(BFGNetworkPathAgent_AttachedEntity_OnHealthChanged) == 0x000010, "Wrong size on BFGNetworkPathAgent_AttachedEntity_OnHealthChanged");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnHealthChanged, _pActor) == 0x000000, "Member 'BFGNetworkPathAgent_AttachedEntity_OnHealthChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnHealthChanged, _pStat) == 0x000008, "Member 'BFGNetworkPathAgent_AttachedEntity_OnHealthChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AttachedEntity.OnHealthDamaged
// 0x00B8 (0x00B8 - 0x0000)
struct BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged final
{
public:
	class UBFGActorComponent_PawnDamage*          _pPawnDamage;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pDamageCauser;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGDamageType*                   _pDamageType;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rShotDirection;                                   // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _oHitResult;                                       // 0x002C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged");
static_assert(sizeof(BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged) == 0x0000B8, "Wrong size on BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged, _pPawnDamage) == 0x000000, "Member 'BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged::_pPawnDamage' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged, _fDamage) == 0x000008, "Member 'BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged, _pDamageCauser) == 0x000010, "Member 'BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged::_pDamageCauser' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged, _pDamageType) == 0x000018, "Member 'BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged::_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged, _rShotDirection) == 0x000020, "Member 'BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged::_rShotDirection' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged, _oHitResult) == 0x00002C, "Member 'BFGNetworkPathAgent_AttachedEntity_OnHealthDamaged::_oHitResult' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AttachedEntity.GetLightweightActorHandle
// 0x0004 (0x0004 - 0x0000)
struct BFGNetworkPathAgent_AttachedEntity_GetLightweightActorHandle final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_AttachedEntity_GetLightweightActorHandle) == 0x000004, "Wrong alignment on BFGNetworkPathAgent_AttachedEntity_GetLightweightActorHandle");
static_assert(sizeof(BFGNetworkPathAgent_AttachedEntity_GetLightweightActorHandle) == 0x000004, "Wrong size on BFGNetworkPathAgent_AttachedEntity_GetLightweightActorHandle");
static_assert(offsetof(BFGNetworkPathAgent_AttachedEntity_GetLightweightActorHandle, ReturnValue) == 0x000000, "Member 'BFGNetworkPathAgent_AttachedEntity_GetLightweightActorHandle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTransmogrifyTargetInterface.IsImmuneToTransmog
// 0x0001 (0x0001 - 0x0000)
struct BFGTransmogrifyTargetInterface_IsImmuneToTransmog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTransmogrifyTargetInterface_IsImmuneToTransmog) == 0x000001, "Wrong alignment on BFGTransmogrifyTargetInterface_IsImmuneToTransmog");
static_assert(sizeof(BFGTransmogrifyTargetInterface_IsImmuneToTransmog) == 0x000001, "Wrong size on BFGTransmogrifyTargetInterface_IsImmuneToTransmog");
static_assert(offsetof(BFGTransmogrifyTargetInterface_IsImmuneToTransmog, ReturnValue) == 0x000000, "Member 'BFGTransmogrifyTargetInterface_IsImmuneToTransmog::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_PSIStation.OnDrainStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterEnemy_PSIStation_OnDrainStateChanged final
{
public:
	bool                                          _bIsBeingDrained;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_PSIStation_OnDrainStateChanged) == 0x000001, "Wrong alignment on BFGNPCCharacterEnemy_PSIStation_OnDrainStateChanged");
static_assert(sizeof(BFGNPCCharacterEnemy_PSIStation_OnDrainStateChanged) == 0x000001, "Wrong size on BFGNPCCharacterEnemy_PSIStation_OnDrainStateChanged");
static_assert(offsetof(BFGNPCCharacterEnemy_PSIStation_OnDrainStateChanged, _bIsBeingDrained) == 0x000000, "Member 'BFGNPCCharacterEnemy_PSIStation_OnDrainStateChanged::_bIsBeingDrained' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_PSIStation.GetIsBeingActivelyDrained
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterEnemy_PSIStation_GetIsBeingActivelyDrained final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_PSIStation_GetIsBeingActivelyDrained) == 0x000001, "Wrong alignment on BFGNPCCharacterEnemy_PSIStation_GetIsBeingActivelyDrained");
static_assert(sizeof(BFGNPCCharacterEnemy_PSIStation_GetIsBeingActivelyDrained) == 0x000001, "Wrong size on BFGNPCCharacterEnemy_PSIStation_GetIsBeingActivelyDrained");
static_assert(offsetof(BFGNPCCharacterEnemy_PSIStation_GetIsBeingActivelyDrained, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_PSIStation_GetIsBeingActivelyDrained::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_PSIStation.IsActive
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterEnemy_PSIStation_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_PSIStation_IsActive) == 0x000001, "Wrong alignment on BFGNPCCharacterEnemy_PSIStation_IsActive");
static_assert(sizeof(BFGNPCCharacterEnemy_PSIStation_IsActive) == 0x000001, "Wrong size on BFGNPCCharacterEnemy_PSIStation_IsActive");
static_assert(offsetof(BFGNPCCharacterEnemy_PSIStation_IsActive, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_PSIStation_IsActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_PlayerStats.UpdateVisuals
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_PlayerStats_UpdateVisuals final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_PlayerStats_UpdateVisuals) == 0x000004, "Wrong alignment on BFGWidget_HUD_PlayerStats_UpdateVisuals");
static_assert(sizeof(BFGWidget_HUD_PlayerStats_UpdateVisuals) == 0x000004, "Wrong size on BFGWidget_HUD_PlayerStats_UpdateVisuals");
static_assert(offsetof(BFGWidget_HUD_PlayerStats_UpdateVisuals, InDeltaTime) == 0x000000, "Member 'BFGWidget_HUD_PlayerStats_UpdateVisuals::InDeltaTime' has a wrong offset!");

// Function BFGCore.BFGInputAxis.OnUpdate
// 0x0010 (0x0010 - 0x0000)
struct BFGInputAxis_OnUpdate final
{
public:
	class UBFGActorComponent_InputActions*        _pInputAxissComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInputAxis_OnUpdate) == 0x000008, "Wrong alignment on BFGInputAxis_OnUpdate");
static_assert(sizeof(BFGInputAxis_OnUpdate) == 0x000010, "Wrong size on BFGInputAxis_OnUpdate");
static_assert(offsetof(BFGInputAxis_OnUpdate, _pInputAxissComponent) == 0x000000, "Member 'BFGInputAxis_OnUpdate::_pInputAxissComponent' has a wrong offset!");
static_assert(offsetof(BFGInputAxis_OnUpdate, _fValue) == 0x000008, "Member 'BFGInputAxis_OnUpdate::_fValue' has a wrong offset!");

// Function BFGCore.BFGInputAction.OnActionInvalid
// 0x0010 (0x0010 - 0x0000)
struct BFGInputAction_OnActionInvalid final
{
public:
	class UBFGActorComponent_InputActions*        _pInputActionsComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInputAction_OnActionInvalid) == 0x000008, "Wrong alignment on BFGInputAction_OnActionInvalid");
static_assert(sizeof(BFGInputAction_OnActionInvalid) == 0x000010, "Wrong size on BFGInputAction_OnActionInvalid");
static_assert(offsetof(BFGInputAction_OnActionInvalid, _pInputActionsComponent) == 0x000000, "Member 'BFGInputAction_OnActionInvalid::_pInputActionsComponent' has a wrong offset!");
static_assert(offsetof(BFGInputAction_OnActionInvalid, ReturnValue) == 0x000008, "Member 'BFGInputAction_OnActionInvalid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputAction.OnActionValid
// 0x0010 (0x0010 - 0x0000)
struct BFGInputAction_OnActionValid final
{
public:
	class UBFGActorComponent_InputActions*        _pInputActionsComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInputAction_OnActionValid) == 0x000008, "Wrong alignment on BFGInputAction_OnActionValid");
static_assert(sizeof(BFGInputAction_OnActionValid) == 0x000010, "Wrong size on BFGInputAction_OnActionValid");
static_assert(offsetof(BFGInputAction_OnActionValid, _pInputActionsComponent) == 0x000000, "Member 'BFGInputAction_OnActionValid::_pInputActionsComponent' has a wrong offset!");
static_assert(offsetof(BFGInputAction_OnActionValid, ReturnValue) == 0x000008, "Member 'BFGInputAction_OnActionValid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputAction.OnCheckCanceled
// 0x0010 (0x0010 - 0x0000)
struct BFGInputAction_OnCheckCanceled final
{
public:
	class UBFGActorComponent_InputActions*        _pInputActionsComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInputAction_OnCheckCanceled) == 0x000008, "Wrong alignment on BFGInputAction_OnCheckCanceled");
static_assert(sizeof(BFGInputAction_OnCheckCanceled) == 0x000010, "Wrong size on BFGInputAction_OnCheckCanceled");
static_assert(offsetof(BFGInputAction_OnCheckCanceled, _pInputActionsComponent) == 0x000000, "Member 'BFGInputAction_OnCheckCanceled::_pInputActionsComponent' has a wrong offset!");
static_assert(offsetof(BFGInputAction_OnCheckCanceled, ReturnValue) == 0x000008, "Member 'BFGInputAction_OnCheckCanceled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputAction.OnInputInvalid
// 0x0010 (0x0010 - 0x0000)
struct BFGInputAction_OnInputInvalid final
{
public:
	class UBFGActorComponent_InputActions*        _pInputActionsComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInputAction_OnInputInvalid) == 0x000008, "Wrong alignment on BFGInputAction_OnInputInvalid");
static_assert(sizeof(BFGInputAction_OnInputInvalid) == 0x000010, "Wrong size on BFGInputAction_OnInputInvalid");
static_assert(offsetof(BFGInputAction_OnInputInvalid, _pInputActionsComponent) == 0x000000, "Member 'BFGInputAction_OnInputInvalid::_pInputActionsComponent' has a wrong offset!");
static_assert(offsetof(BFGInputAction_OnInputInvalid, ReturnValue) == 0x000008, "Member 'BFGInputAction_OnInputInvalid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputAction.OnInputValid
// 0x0010 (0x0010 - 0x0000)
struct BFGInputAction_OnInputValid final
{
public:
	class UBFGActorComponent_InputActions*        _pInputActionsComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInputAction_OnInputValid) == 0x000008, "Wrong alignment on BFGInputAction_OnInputValid");
static_assert(sizeof(BFGInputAction_OnInputValid) == 0x000010, "Wrong size on BFGInputAction_OnInputValid");
static_assert(offsetof(BFGInputAction_OnInputValid, _pInputActionsComponent) == 0x000000, "Member 'BFGInputAction_OnInputValid::_pInputActionsComponent' has a wrong offset!");
static_assert(offsetof(BFGInputAction_OnInputValid, ReturnValue) == 0x000008, "Member 'BFGInputAction_OnInputValid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.AddBurntInstance
// 0x0050 (0x0050 - 0x0000)
struct BFGBurningGroundManager_AddBurntInstance final
{
public:
	class UStaticMesh*                            _pMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _Transform;                                        // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bAddToPendingCheckpointList;                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGFoliageBurnt*                       ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBurningGroundManager_AddBurntInstance) == 0x000010, "Wrong alignment on BFGBurningGroundManager_AddBurntInstance");
static_assert(sizeof(BFGBurningGroundManager_AddBurntInstance) == 0x000050, "Wrong size on BFGBurningGroundManager_AddBurntInstance");
static_assert(offsetof(BFGBurningGroundManager_AddBurntInstance, _pMesh) == 0x000000, "Member 'BFGBurningGroundManager_AddBurntInstance::_pMesh' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_AddBurntInstance, _Transform) == 0x000010, "Member 'BFGBurningGroundManager_AddBurntInstance::_Transform' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_AddBurntInstance, _bAddToPendingCheckpointList) == 0x000040, "Member 'BFGBurningGroundManager_AddBurntInstance::_bAddToPendingCheckpointList' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_AddBurntInstance, ReturnValue) == 0x000048, "Member 'BFGBurningGroundManager_AddBurntInstance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.AddWriteEvent
// 0x001C (0x001C - 0x0000)
struct BFGBurningGroundManager_AddWriteEvent final
{
public:
	struct FVector2D                              _vPosition;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDrawSize;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bChanneled;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fAngle;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fGlow;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fBurningDuration;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBurningGroundManager_AddWriteEvent) == 0x000004, "Wrong alignment on BFGBurningGroundManager_AddWriteEvent");
static_assert(sizeof(BFGBurningGroundManager_AddWriteEvent) == 0x00001C, "Wrong size on BFGBurningGroundManager_AddWriteEvent");
static_assert(offsetof(BFGBurningGroundManager_AddWriteEvent, _vPosition) == 0x000000, "Member 'BFGBurningGroundManager_AddWriteEvent::_vPosition' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_AddWriteEvent, _fDrawSize) == 0x000008, "Member 'BFGBurningGroundManager_AddWriteEvent::_fDrawSize' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_AddWriteEvent, _bChanneled) == 0x00000C, "Member 'BFGBurningGroundManager_AddWriteEvent::_bChanneled' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_AddWriteEvent, _fAngle) == 0x000010, "Member 'BFGBurningGroundManager_AddWriteEvent::_fAngle' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_AddWriteEvent, _fGlow) == 0x000014, "Member 'BFGBurningGroundManager_AddWriteEvent::_fGlow' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_AddWriteEvent, _fBurningDuration) == 0x000018, "Member 'BFGBurningGroundManager_AddWriteEvent::_fBurningDuration' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.GetBurningGroundActor
// 0x0008 (0x0008 - 0x0000)
struct BFGBurningGroundManager_GetBurningGroundActor final
{
public:
	class ABFGBurningGround*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBurningGroundManager_GetBurningGroundActor) == 0x000008, "Wrong alignment on BFGBurningGroundManager_GetBurningGroundActor");
static_assert(sizeof(BFGBurningGroundManager_GetBurningGroundActor) == 0x000008, "Wrong size on BFGBurningGroundManager_GetBurningGroundActor");
static_assert(offsetof(BFGBurningGroundManager_GetBurningGroundActor, ReturnValue) == 0x000000, "Member 'BFGBurningGroundManager_GetBurningGroundActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.GetRenderTargetSize
// 0x0008 (0x0008 - 0x0000)
struct BFGBurningGroundManager_GetRenderTargetSize final
{
public:
	int32                                         _iOutWidth;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iOutHeight;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBurningGroundManager_GetRenderTargetSize) == 0x000004, "Wrong alignment on BFGBurningGroundManager_GetRenderTargetSize");
static_assert(sizeof(BFGBurningGroundManager_GetRenderTargetSize) == 0x000008, "Wrong size on BFGBurningGroundManager_GetRenderTargetSize");
static_assert(offsetof(BFGBurningGroundManager_GetRenderTargetSize, _iOutWidth) == 0x000000, "Member 'BFGBurningGroundManager_GetRenderTargetSize::_iOutWidth' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_GetRenderTargetSize, _iOutHeight) == 0x000004, "Member 'BFGBurningGroundManager_GetRenderTargetSize::_iOutHeight' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.Initialize
// 0x0050 (0x0050 - 0x0000)
struct BFGBurningGroundManager_Initialize final
{
public:
	class UTextureRenderTarget2D*                 _pRTPing;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 _pRTPong;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               _pWriteChanneled;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               _pWriteSplash;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               _pMaterialGlowDecay;                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _GlowParam;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _GlowDecaySourceParam;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _TransitionMeshEnabledParam;                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _TransitionMeshLocationParam;                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fMaxGlowTime;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGBurningGroundManager_Initialize) == 0x000008, "Wrong alignment on BFGBurningGroundManager_Initialize");
static_assert(sizeof(BFGBurningGroundManager_Initialize) == 0x000050, "Wrong size on BFGBurningGroundManager_Initialize");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _pRTPing) == 0x000000, "Member 'BFGBurningGroundManager_Initialize::_pRTPing' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _pRTPong) == 0x000008, "Member 'BFGBurningGroundManager_Initialize::_pRTPong' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _pWriteChanneled) == 0x000010, "Member 'BFGBurningGroundManager_Initialize::_pWriteChanneled' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _pWriteSplash) == 0x000018, "Member 'BFGBurningGroundManager_Initialize::_pWriteSplash' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _pMaterialGlowDecay) == 0x000020, "Member 'BFGBurningGroundManager_Initialize::_pMaterialGlowDecay' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _GlowParam) == 0x000028, "Member 'BFGBurningGroundManager_Initialize::_GlowParam' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _GlowDecaySourceParam) == 0x000030, "Member 'BFGBurningGroundManager_Initialize::_GlowDecaySourceParam' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _TransitionMeshEnabledParam) == 0x000038, "Member 'BFGBurningGroundManager_Initialize::_TransitionMeshEnabledParam' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _TransitionMeshLocationParam) == 0x000040, "Member 'BFGBurningGroundManager_Initialize::_TransitionMeshLocationParam' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_Initialize, _fMaxGlowTime) == 0x000048, "Member 'BFGBurningGroundManager_Initialize::_fMaxGlowTime' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.IsActorTouchingBurningGround
// 0x0010 (0x0010 - 0x0000)
struct BFGBurningGroundManager_IsActorTouchingBurningGround final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGBurningGroundManager_IsActorTouchingBurningGround) == 0x000004, "Wrong alignment on BFGBurningGroundManager_IsActorTouchingBurningGround");
static_assert(sizeof(BFGBurningGroundManager_IsActorTouchingBurningGround) == 0x000010, "Wrong size on BFGBurningGroundManager_IsActorTouchingBurningGround");
static_assert(offsetof(BFGBurningGroundManager_IsActorTouchingBurningGround, _vLocation) == 0x000000, "Member 'BFGBurningGroundManager_IsActorTouchingBurningGround::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_IsActorTouchingBurningGround, ReturnValue) == 0x00000C, "Member 'BFGBurningGroundManager_IsActorTouchingBurningGround::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.RegisterTransitionMesh
// 0x0008 (0x0008 - 0x0000)
struct BFGBurningGroundManager_RegisterTransitionMesh final
{
public:
	class UBFGFoliageDitheredMeshTransition*      _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBurningGroundManager_RegisterTransitionMesh) == 0x000008, "Wrong alignment on BFGBurningGroundManager_RegisterTransitionMesh");
static_assert(sizeof(BFGBurningGroundManager_RegisterTransitionMesh) == 0x000008, "Wrong size on BFGBurningGroundManager_RegisterTransitionMesh");
static_assert(offsetof(BFGBurningGroundManager_RegisterTransitionMesh, _pComponent) == 0x000000, "Member 'BFGBurningGroundManager_RegisterTransitionMesh::_pComponent' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.RemoveNormalInstance
// 0x0010 (0x0010 - 0x0000)
struct BFGBurningGroundManager_RemoveNormalInstance final
{
public:
	class UFoliageInstancedStaticMeshComponent*   _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iInstanceId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGBurningGroundManager_RemoveNormalInstance) == 0x000008, "Wrong alignment on BFGBurningGroundManager_RemoveNormalInstance");
static_assert(sizeof(BFGBurningGroundManager_RemoveNormalInstance) == 0x000010, "Wrong size on BFGBurningGroundManager_RemoveNormalInstance");
static_assert(offsetof(BFGBurningGroundManager_RemoveNormalInstance, _pComponent) == 0x000000, "Member 'BFGBurningGroundManager_RemoveNormalInstance::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGBurningGroundManager_RemoveNormalInstance, _iInstanceId) == 0x000008, "Member 'BFGBurningGroundManager_RemoveNormalInstance::_iInstanceId' has a wrong offset!");

// Function BFGCore.BFGBurningGroundManager.GetCurrentBurningGroundActor
// 0x0008 (0x0008 - 0x0000)
struct BFGBurningGroundManager_GetCurrentBurningGroundActor final
{
public:
	class ABFGBurningGround*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGBurningGroundManager_GetCurrentBurningGroundActor) == 0x000008, "Wrong alignment on BFGBurningGroundManager_GetCurrentBurningGroundActor");
static_assert(sizeof(BFGBurningGroundManager_GetCurrentBurningGroundActor) == 0x000008, "Wrong size on BFGBurningGroundManager_GetCurrentBurningGroundActor");
static_assert(offsetof(BFGBurningGroundManager_GetCurrentBurningGroundActor, ReturnValue) == 0x000000, "Member 'BFGBurningGroundManager_GetCurrentBurningGroundActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionTriggerZone.ActivateEndTrigger
// 0x0008 (0x0008 - 0x0000)
struct BFGMissionTriggerZone_ActivateEndTrigger final
{
public:
	class AActor*                                 _pWithActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionTriggerZone_ActivateEndTrigger) == 0x000008, "Wrong alignment on BFGMissionTriggerZone_ActivateEndTrigger");
static_assert(sizeof(BFGMissionTriggerZone_ActivateEndTrigger) == 0x000008, "Wrong size on BFGMissionTriggerZone_ActivateEndTrigger");
static_assert(offsetof(BFGMissionTriggerZone_ActivateEndTrigger, _pWithActor) == 0x000000, "Member 'BFGMissionTriggerZone_ActivateEndTrigger::_pWithActor' has a wrong offset!");

// Function BFGCore.BFGMissionTriggerZone.ActivateTrigger
// 0x0008 (0x0008 - 0x0000)
struct BFGMissionTriggerZone_ActivateTrigger final
{
public:
	class AActor*                                 _pWithActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionTriggerZone_ActivateTrigger) == 0x000008, "Wrong alignment on BFGMissionTriggerZone_ActivateTrigger");
static_assert(sizeof(BFGMissionTriggerZone_ActivateTrigger) == 0x000008, "Wrong size on BFGMissionTriggerZone_ActivateTrigger");
static_assert(offsetof(BFGMissionTriggerZone_ActivateTrigger, _pWithActor) == 0x000000, "Member 'BFGMissionTriggerZone_ActivateTrigger::_pWithActor' has a wrong offset!");

// Function BFGCore.BFGMissionTriggerZone.CanActivateWith
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionTriggerZone_CanActivateWith final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMissionTriggerZone_CanActivateWith) == 0x000008, "Wrong alignment on BFGMissionTriggerZone_CanActivateWith");
static_assert(sizeof(BFGMissionTriggerZone_CanActivateWith) == 0x000010, "Wrong size on BFGMissionTriggerZone_CanActivateWith");
static_assert(offsetof(BFGMissionTriggerZone_CanActivateWith, _pActor) == 0x000000, "Member 'BFGMissionTriggerZone_CanActivateWith::_pActor' has a wrong offset!");
static_assert(offsetof(BFGMissionTriggerZone_CanActivateWith, ReturnValue) == 0x000008, "Member 'BFGMissionTriggerZone_CanActivateWith::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionTriggerZone.GetActiveOverlappingActors
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionTriggerZone_GetActiveOverlappingActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionTriggerZone_GetActiveOverlappingActors) == 0x000008, "Wrong alignment on BFGMissionTriggerZone_GetActiveOverlappingActors");
static_assert(sizeof(BFGMissionTriggerZone_GetActiveOverlappingActors) == 0x000010, "Wrong size on BFGMissionTriggerZone_GetActiveOverlappingActors");
static_assert(offsetof(BFGMissionTriggerZone_GetActiveOverlappingActors, ReturnValue) == 0x000000, "Member 'BFGMissionTriggerZone_GetActiveOverlappingActors::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionTriggerZone.IsIntersectingSlow
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionTriggerZone_IsIntersectingSlow final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMissionTriggerZone_IsIntersectingSlow) == 0x000004, "Wrong alignment on BFGMissionTriggerZone_IsIntersectingSlow");
static_assert(sizeof(BFGMissionTriggerZone_IsIntersectingSlow) == 0x000010, "Wrong size on BFGMissionTriggerZone_IsIntersectingSlow");
static_assert(offsetof(BFGMissionTriggerZone_IsIntersectingSlow, _vLocation) == 0x000000, "Member 'BFGMissionTriggerZone_IsIntersectingSlow::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGMissionTriggerZone_IsIntersectingSlow, ReturnValue) == 0x00000C, "Member 'BFGMissionTriggerZone_IsIntersectingSlow::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCheatUIMenu.AddUIEelement
// 0x0010 (0x0010 - 0x0000)
struct BFGCheatUIMenu_AddUIEelement final
{
public:
	class FString                                 _strCategoryName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatUIMenu_AddUIEelement) == 0x000008, "Wrong alignment on BFGCheatUIMenu_AddUIEelement");
static_assert(sizeof(BFGCheatUIMenu_AddUIEelement) == 0x000010, "Wrong size on BFGCheatUIMenu_AddUIEelement");
static_assert(offsetof(BFGCheatUIMenu_AddUIEelement, _strCategoryName) == 0x000000, "Member 'BFGCheatUIMenu_AddUIEelement::_strCategoryName' has a wrong offset!");

// Function BFGCore.BFGCheatUIMenu.CreateCheatCategoryButton
// 0x0018 (0x0018 - 0x0000)
struct BFGCheatUIMenu_CreateCheatCategoryButton final
{
public:
	class FString                                 _strTitleText;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatUIMenu_CreateCheatCategoryButton) == 0x000008, "Wrong alignment on BFGCheatUIMenu_CreateCheatCategoryButton");
static_assert(sizeof(BFGCheatUIMenu_CreateCheatCategoryButton) == 0x000018, "Wrong size on BFGCheatUIMenu_CreateCheatCategoryButton");
static_assert(offsetof(BFGCheatUIMenu_CreateCheatCategoryButton, _strTitleText) == 0x000000, "Member 'BFGCheatUIMenu_CreateCheatCategoryButton::_strTitleText' has a wrong offset!");
static_assert(offsetof(BFGCheatUIMenu_CreateCheatCategoryButton, ReturnValue) == 0x000010, "Member 'BFGCheatUIMenu_CreateCheatCategoryButton::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCheatUIMenu.CreateCheatCommandButton
// 0x00E8 (0x00E8 - 0x0000)
struct BFGCheatUIMenu_CreateCheatCommandButton final
{
public:
	struct FBFGCheatTableEntry                    _entry;                                            // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x00E0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatUIMenu_CreateCheatCommandButton) == 0x000008, "Wrong alignment on BFGCheatUIMenu_CreateCheatCommandButton");
static_assert(sizeof(BFGCheatUIMenu_CreateCheatCommandButton) == 0x0000E8, "Wrong size on BFGCheatUIMenu_CreateCheatCommandButton");
static_assert(offsetof(BFGCheatUIMenu_CreateCheatCommandButton, _entry) == 0x000000, "Member 'BFGCheatUIMenu_CreateCheatCommandButton::_entry' has a wrong offset!");
static_assert(offsetof(BFGCheatUIMenu_CreateCheatCommandButton, ReturnValue) == 0x0000E0, "Member 'BFGCheatUIMenu_CreateCheatCommandButton::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCheatUIMenu.GoToPreviousMenu
// 0x0001 (0x0001 - 0x0000)
struct BFGCheatUIMenu_GoToPreviousMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatUIMenu_GoToPreviousMenu) == 0x000001, "Wrong alignment on BFGCheatUIMenu_GoToPreviousMenu");
static_assert(sizeof(BFGCheatUIMenu_GoToPreviousMenu) == 0x000001, "Wrong size on BFGCheatUIMenu_GoToPreviousMenu");
static_assert(offsetof(BFGCheatUIMenu_GoToPreviousMenu, ReturnValue) == 0x000000, "Member 'BFGCheatUIMenu_GoToPreviousMenu::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCheatUIMenu.RefreshUIElements
// 0x0010 (0x0010 - 0x0000)
struct BFGCheatUIMenu_RefreshUIElements final
{
public:
	class FString                                 _strCategoryName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCheatUIMenu_RefreshUIElements) == 0x000008, "Wrong alignment on BFGCheatUIMenu_RefreshUIElements");
static_assert(sizeof(BFGCheatUIMenu_RefreshUIElements) == 0x000010, "Wrong size on BFGCheatUIMenu_RefreshUIElements");
static_assert(offsetof(BFGCheatUIMenu_RefreshUIElements, _strCategoryName) == 0x000000, "Member 'BFGCheatUIMenu_RefreshUIElements::_strCategoryName' has a wrong offset!");

// Function BFGCore.BFGCollisionUtils.ConvertCollisionChannelToBFG
// 0x0002 (0x0002 - 0x0000)
struct BFGCollisionUtils_ConvertCollisionChannelToBFG final
{
public:
	ECollisionChannel                             _eCollisionChannel;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGCollisionChannel                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCollisionUtils_ConvertCollisionChannelToBFG) == 0x000001, "Wrong alignment on BFGCollisionUtils_ConvertCollisionChannelToBFG");
static_assert(sizeof(BFGCollisionUtils_ConvertCollisionChannelToBFG) == 0x000002, "Wrong size on BFGCollisionUtils_ConvertCollisionChannelToBFG");
static_assert(offsetof(BFGCollisionUtils_ConvertCollisionChannelToBFG, _eCollisionChannel) == 0x000000, "Member 'BFGCollisionUtils_ConvertCollisionChannelToBFG::_eCollisionChannel' has a wrong offset!");
static_assert(offsetof(BFGCollisionUtils_ConvertCollisionChannelToBFG, ReturnValue) == 0x000001, "Member 'BFGCollisionUtils_ConvertCollisionChannelToBFG::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCollisionUtils.ConvertCollisionChannelToECC
// 0x0002 (0x0002 - 0x0000)
struct BFGCollisionUtils_ConvertCollisionChannelToECC final
{
public:
	EBFGCollisionChannel                          _eBFGCollisionChannel;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCollisionUtils_ConvertCollisionChannelToECC) == 0x000001, "Wrong alignment on BFGCollisionUtils_ConvertCollisionChannelToECC");
static_assert(sizeof(BFGCollisionUtils_ConvertCollisionChannelToECC) == 0x000002, "Wrong size on BFGCollisionUtils_ConvertCollisionChannelToECC");
static_assert(offsetof(BFGCollisionUtils_ConvertCollisionChannelToECC, _eBFGCollisionChannel) == 0x000000, "Member 'BFGCollisionUtils_ConvertCollisionChannelToECC::_eBFGCollisionChannel' has a wrong offset!");
static_assert(offsetof(BFGCollisionUtils_ConvertCollisionChannelToECC, ReturnValue) == 0x000001, "Member 'BFGCollisionUtils_ConvertCollisionChannelToECC::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCollisionUtils.IsCollisionProfileName
// 0x0014 (0x0014 - 0x0000)
struct BFGCollisionUtils_IsCollisionProfileName final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionProfileName                  _profileName;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGCollisionUtils_IsCollisionProfileName) == 0x000004, "Wrong alignment on BFGCollisionUtils_IsCollisionProfileName");
static_assert(sizeof(BFGCollisionUtils_IsCollisionProfileName) == 0x000014, "Wrong size on BFGCollisionUtils_IsCollisionProfileName");
static_assert(offsetof(BFGCollisionUtils_IsCollisionProfileName, _name) == 0x000000, "Member 'BFGCollisionUtils_IsCollisionProfileName::_name' has a wrong offset!");
static_assert(offsetof(BFGCollisionUtils_IsCollisionProfileName, _profileName) == 0x000008, "Member 'BFGCollisionUtils_IsCollisionProfileName::_profileName' has a wrong offset!");
static_assert(offsetof(BFGCollisionUtils_IsCollisionProfileName, ReturnValue) == 0x000010, "Member 'BFGCollisionUtils_IsCollisionProfileName::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGGameFlowState_GenericDialog.ActionDialogMessage__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGGameFlowState_GenericDialog_ActionDialogMessage__DelegateSignature final
{
public:
	EBFGDialogMessage                             _eMessage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GenericDialog_ActionDialogMessage__DelegateSignature) == 0x000001, "Wrong alignment on BFGGameFlowState_GenericDialog_ActionDialogMessage__DelegateSignature");
static_assert(sizeof(BFGGameFlowState_GenericDialog_ActionDialogMessage__DelegateSignature) == 0x000001, "Wrong size on BFGGameFlowState_GenericDialog_ActionDialogMessage__DelegateSignature");
static_assert(offsetof(BFGGameFlowState_GenericDialog_ActionDialogMessage__DelegateSignature, _eMessage) == 0x000000, "Member 'BFGGameFlowState_GenericDialog_ActionDialogMessage__DelegateSignature::_eMessage' has a wrong offset!");

// DelegateFunction BFGCore.BFGGameFlowState_GenericDialog.ActionGenericDialog__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowState_GenericDialog_ActionGenericDialog__DelegateSignature final
{
public:
	class UBFGWidget_GenericDialog*               _pDialog;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GenericDialog_ActionGenericDialog__DelegateSignature) == 0x000008, "Wrong alignment on BFGGameFlowState_GenericDialog_ActionGenericDialog__DelegateSignature");
static_assert(sizeof(BFGGameFlowState_GenericDialog_ActionGenericDialog__DelegateSignature) == 0x000008, "Wrong size on BFGGameFlowState_GenericDialog_ActionGenericDialog__DelegateSignature");
static_assert(offsetof(BFGGameFlowState_GenericDialog_ActionGenericDialog__DelegateSignature, _pDialog) == 0x000000, "Member 'BFGGameFlowState_GenericDialog_ActionGenericDialog__DelegateSignature::_pDialog' has a wrong offset!");

// DelegateFunction BFGCore.BFGGameFlowState_GenericDialog.ActionIndex__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BFGGameFlowState_GenericDialog_ActionIndex__DelegateSignature final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GenericDialog_ActionIndex__DelegateSignature) == 0x000004, "Wrong alignment on BFGGameFlowState_GenericDialog_ActionIndex__DelegateSignature");
static_assert(sizeof(BFGGameFlowState_GenericDialog_ActionIndex__DelegateSignature) == 0x000004, "Wrong size on BFGGameFlowState_GenericDialog_ActionIndex__DelegateSignature");
static_assert(offsetof(BFGGameFlowState_GenericDialog_ActionIndex__DelegateSignature, _iIndex) == 0x000000, "Member 'BFGGameFlowState_GenericDialog_ActionIndex__DelegateSignature::_iIndex' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GenericDialog.OnDialogOption
// 0x0004 (0x0004 - 0x0000)
struct BFGGameFlowState_GenericDialog_OnDialogOption final
{
public:
	int32                                         IIndex;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GenericDialog_OnDialogOption) == 0x000004, "Wrong alignment on BFGGameFlowState_GenericDialog_OnDialogOption");
static_assert(sizeof(BFGGameFlowState_GenericDialog_OnDialogOption) == 0x000004, "Wrong size on BFGGameFlowState_GenericDialog_OnDialogOption");
static_assert(offsetof(BFGGameFlowState_GenericDialog_OnDialogOption, IIndex) == 0x000000, "Member 'BFGGameFlowState_GenericDialog_OnDialogOption::IIndex' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GenericDialog.OnOptionHandlerMessage
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_GenericDialog_OnOptionHandlerMessage final
{
public:
	class UBFGDialogOptionHandler_Base*           _pHandler;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGDialogMessage                             _eMessage;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_GenericDialog_OnOptionHandlerMessage) == 0x000008, "Wrong alignment on BFGGameFlowState_GenericDialog_OnOptionHandlerMessage");
static_assert(sizeof(BFGGameFlowState_GenericDialog_OnOptionHandlerMessage) == 0x000010, "Wrong size on BFGGameFlowState_GenericDialog_OnOptionHandlerMessage");
static_assert(offsetof(BFGGameFlowState_GenericDialog_OnOptionHandlerMessage, _pHandler) == 0x000000, "Member 'BFGGameFlowState_GenericDialog_OnOptionHandlerMessage::_pHandler' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_GenericDialog_OnOptionHandlerMessage, _eMessage) == 0x000008, "Member 'BFGGameFlowState_GenericDialog_OnOptionHandlerMessage::_eMessage' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GenericDialog.FindOptionHandlerByName
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_GenericDialog_FindOptionHandlerByName final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDialogOptionHandler_Base*           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GenericDialog_FindOptionHandlerByName) == 0x000008, "Wrong alignment on BFGGameFlowState_GenericDialog_FindOptionHandlerByName");
static_assert(sizeof(BFGGameFlowState_GenericDialog_FindOptionHandlerByName) == 0x000010, "Wrong size on BFGGameFlowState_GenericDialog_FindOptionHandlerByName");
static_assert(offsetof(BFGGameFlowState_GenericDialog_FindOptionHandlerByName, _name) == 0x000000, "Member 'BFGGameFlowState_GenericDialog_FindOptionHandlerByName::_name' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_GenericDialog_FindOptionHandlerByName, ReturnValue) == 0x000008, "Member 'BFGGameFlowState_GenericDialog_FindOptionHandlerByName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_GenericDialog_Customizable.OnCustomOptionRegistered
// 0x0004 (0x0004 - 0x0000)
struct BFGGameFlowState_GenericDialog_Customizable_OnCustomOptionRegistered final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_GenericDialog_Customizable_OnCustomOptionRegistered) == 0x000004, "Wrong alignment on BFGGameFlowState_GenericDialog_Customizable_OnCustomOptionRegistered");
static_assert(sizeof(BFGGameFlowState_GenericDialog_Customizable_OnCustomOptionRegistered) == 0x000004, "Wrong size on BFGGameFlowState_GenericDialog_Customizable_OnCustomOptionRegistered");
static_assert(offsetof(BFGGameFlowState_GenericDialog_Customizable_OnCustomOptionRegistered, _iIndex) == 0x000000, "Member 'BFGGameFlowState_GenericDialog_Customizable_OnCustomOptionRegistered::_iIndex' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_WaitForChunkload.OnPurchaseScreenClosed
// 0x0001 (0x0001 - 0x0000)
struct BFGGameFlowState_WaitForChunkload_OnPurchaseScreenClosed final
{
public:
	bool                                          _bPurchased;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_WaitForChunkload_OnPurchaseScreenClosed) == 0x000001, "Wrong alignment on BFGGameFlowState_WaitForChunkload_OnPurchaseScreenClosed");
static_assert(sizeof(BFGGameFlowState_WaitForChunkload_OnPurchaseScreenClosed) == 0x000001, "Wrong size on BFGGameFlowState_WaitForChunkload_OnPurchaseScreenClosed");
static_assert(offsetof(BFGGameFlowState_WaitForChunkload_OnPurchaseScreenClosed, _bPurchased) == 0x000000, "Member 'BFGGameFlowState_WaitForChunkload_OnPurchaseScreenClosed::_bPurchased' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementInsideTriggerTimer.OnEnterdQuestStep
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_ElementInsideTriggerTimer_OnEnterdQuestStep final
{
public:
	class UBFGQuest_Element*                      _pElement;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementInsideTriggerTimer_OnEnterdQuestStep) == 0x000008, "Wrong alignment on BFGQuest_ElementInsideTriggerTimer_OnEnterdQuestStep");
static_assert(sizeof(BFGQuest_ElementInsideTriggerTimer_OnEnterdQuestStep) == 0x000008, "Wrong size on BFGQuest_ElementInsideTriggerTimer_OnEnterdQuestStep");
static_assert(offsetof(BFGQuest_ElementInsideTriggerTimer_OnEnterdQuestStep, _pElement) == 0x000000, "Member 'BFGQuest_ElementInsideTriggerTimer_OnEnterdQuestStep::_pElement' has a wrong offset!");

// Function BFGCore.BFGInputScheme.GetLayoutTexture
// 0x0008 (0x0008 - 0x0000)
struct BFGInputScheme_GetLayoutTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputScheme_GetLayoutTexture) == 0x000008, "Wrong alignment on BFGInputScheme_GetLayoutTexture");
static_assert(sizeof(BFGInputScheme_GetLayoutTexture) == 0x000008, "Wrong size on BFGInputScheme_GetLayoutTexture");
static_assert(offsetof(BFGInputScheme_GetLayoutTexture, ReturnValue) == 0x000000, "Member 'BFGInputScheme_GetLayoutTexture::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputScheme.GetName
// 0x0010 (0x0010 - 0x0000)
struct BFGInputScheme_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputScheme_GetName) == 0x000008, "Wrong alignment on BFGInputScheme_GetName");
static_assert(sizeof(BFGInputScheme_GetName) == 0x000010, "Wrong size on BFGInputScheme_GetName");
static_assert(offsetof(BFGInputScheme_GetName, ReturnValue) == 0x000000, "Member 'BFGInputScheme_GetName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCrowdLifeStationComponent.SetStationEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGCrowdLifeStationComponent_SetStationEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCrowdLifeStationComponent_SetStationEnabled) == 0x000001, "Wrong alignment on BFGCrowdLifeStationComponent_SetStationEnabled");
static_assert(sizeof(BFGCrowdLifeStationComponent_SetStationEnabled) == 0x000001, "Wrong size on BFGCrowdLifeStationComponent_SetStationEnabled");
static_assert(offsetof(BFGCrowdLifeStationComponent_SetStationEnabled, _bEnabled) == 0x000000, "Member 'BFGCrowdLifeStationComponent_SetStationEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGCrowdLifeStationComponent.IsStationEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGCrowdLifeStationComponent_IsStationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCrowdLifeStationComponent_IsStationEnabled) == 0x000001, "Wrong alignment on BFGCrowdLifeStationComponent_IsStationEnabled");
static_assert(sizeof(BFGCrowdLifeStationComponent_IsStationEnabled) == 0x000001, "Wrong size on BFGCrowdLifeStationComponent_IsStationEnabled");
static_assert(offsetof(BFGCrowdLifeStationComponent_IsStationEnabled, ReturnValue) == 0x000000, "Member 'BFGCrowdLifeStationComponent_IsStationEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCrowdScriptConComponent.OnParticipantDead
// 0x0018 (0x0018 - 0x0000)
struct BFGCrowdScriptConComponent_OnParticipantDead final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsAttached;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGCrowdScriptConComponent_OnParticipantDead) == 0x000008, "Wrong alignment on BFGCrowdScriptConComponent_OnParticipantDead");
static_assert(sizeof(BFGCrowdScriptConComponent_OnParticipantDead) == 0x000018, "Wrong size on BFGCrowdScriptConComponent_OnParticipantDead");
static_assert(offsetof(BFGCrowdScriptConComponent_OnParticipantDead, _pAgent) == 0x000000, "Member 'BFGCrowdScriptConComponent_OnParticipantDead::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGCrowdScriptConComponent_OnParticipantDead, _pActor) == 0x000008, "Member 'BFGCrowdScriptConComponent_OnParticipantDead::_pActor' has a wrong offset!");
static_assert(offsetof(BFGCrowdScriptConComponent_OnParticipantDead, _bIsAttached) == 0x000010, "Member 'BFGCrowdScriptConComponent_OnParticipantDead::_bIsAttached' has a wrong offset!");

// Function BFGCore.BFGCrowdScriptConComponent.OnParticipantDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGCrowdScriptConComponent_OnParticipantDestroyed final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCrowdScriptConComponent_OnParticipantDestroyed) == 0x000008, "Wrong alignment on BFGCrowdScriptConComponent_OnParticipantDestroyed");
static_assert(sizeof(BFGCrowdScriptConComponent_OnParticipantDestroyed) == 0x000008, "Wrong size on BFGCrowdScriptConComponent_OnParticipantDestroyed");
static_assert(offsetof(BFGCrowdScriptConComponent_OnParticipantDestroyed, _pAgent) == 0x000000, "Member 'BFGCrowdScriptConComponent_OnParticipantDestroyed::_pAgent' has a wrong offset!");

// Function BFGCore.BFGCrowdScriptConComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGCrowdScriptConComponent_SetEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCrowdScriptConComponent_SetEnabled) == 0x000001, "Wrong alignment on BFGCrowdScriptConComponent_SetEnabled");
static_assert(sizeof(BFGCrowdScriptConComponent_SetEnabled) == 0x000001, "Wrong size on BFGCrowdScriptConComponent_SetEnabled");
static_assert(offsetof(BFGCrowdScriptConComponent_SetEnabled, _bEnabled) == 0x000000, "Member 'BFGCrowdScriptConComponent_SetEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGCrowdScriptConComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGCrowdScriptConComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCrowdScriptConComponent_IsEnabled) == 0x000001, "Wrong alignment on BFGCrowdScriptConComponent_IsEnabled");
static_assert(sizeof(BFGCrowdScriptConComponent_IsEnabled) == 0x000001, "Wrong size on BFGCrowdScriptConComponent_IsEnabled");
static_assert(offsetof(BFGCrowdScriptConComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'BFGCrowdScriptConComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGCustomDataVariable.SetDataValue
// 0x0004 (0x0004 - 0x0000)
struct BFGCustomDataVariable_SetDataValue final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCustomDataVariable_SetDataValue) == 0x000004, "Wrong alignment on BFGCustomDataVariable_SetDataValue");
static_assert(sizeof(BFGCustomDataVariable_SetDataValue) == 0x000004, "Wrong size on BFGCustomDataVariable_SetDataValue");
static_assert(offsetof(BFGCustomDataVariable_SetDataValue, _fValue) == 0x000000, "Member 'BFGCustomDataVariable_SetDataValue::_fValue' has a wrong offset!");

// Function BFGCore.BFGCustomDataVariable.GetDataValue
// 0x0004 (0x0004 - 0x0000)
struct BFGCustomDataVariable_GetDataValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGCustomDataVariable_GetDataValue) == 0x000004, "Wrong alignment on BFGCustomDataVariable_GetDataValue");
static_assert(sizeof(BFGCustomDataVariable_GetDataValue) == 0x000004, "Wrong size on BFGCustomDataVariable_GetDataValue");
static_assert(offsetof(BFGCustomDataVariable_GetDataValue, ReturnValue) == 0x000000, "Member 'BFGCustomDataVariable_GetDataValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataAsset_ChallengeInfo.GetCurrentHighscore
// 0x0004 (0x0004 - 0x0000)
struct BFGDataAsset_ChallengeInfo_GetCurrentHighscore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataAsset_ChallengeInfo_GetCurrentHighscore) == 0x000004, "Wrong alignment on BFGDataAsset_ChallengeInfo_GetCurrentHighscore");
static_assert(sizeof(BFGDataAsset_ChallengeInfo_GetCurrentHighscore) == 0x000004, "Wrong size on BFGDataAsset_ChallengeInfo_GetCurrentHighscore");
static_assert(offsetof(BFGDataAsset_ChallengeInfo_GetCurrentHighscore, ReturnValue) == 0x000000, "Member 'BFGDataAsset_ChallengeInfo_GetCurrentHighscore::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataAsset_ChallengeInfo.GetMinimumValue
// 0x0004 (0x0004 - 0x0000)
struct BFGDataAsset_ChallengeInfo_GetMinimumValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataAsset_ChallengeInfo_GetMinimumValue) == 0x000004, "Wrong alignment on BFGDataAsset_ChallengeInfo_GetMinimumValue");
static_assert(sizeof(BFGDataAsset_ChallengeInfo_GetMinimumValue) == 0x000004, "Wrong size on BFGDataAsset_ChallengeInfo_GetMinimumValue");
static_assert(offsetof(BFGDataAsset_ChallengeInfo_GetMinimumValue, ReturnValue) == 0x000000, "Member 'BFGDataAsset_ChallengeInfo_GetMinimumValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataAsset_ChallengeInfo.GetStarValue
// 0x0008 (0x0008 - 0x0000)
struct BFGDataAsset_ChallengeInfo_GetStarValue final
{
public:
	float                                         _fScore;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataAsset_ChallengeInfo_GetStarValue) == 0x000004, "Wrong alignment on BFGDataAsset_ChallengeInfo_GetStarValue");
static_assert(sizeof(BFGDataAsset_ChallengeInfo_GetStarValue) == 0x000008, "Wrong size on BFGDataAsset_ChallengeInfo_GetStarValue");
static_assert(offsetof(BFGDataAsset_ChallengeInfo_GetStarValue, _fScore) == 0x000000, "Member 'BFGDataAsset_ChallengeInfo_GetStarValue::_fScore' has a wrong offset!");
static_assert(offsetof(BFGDataAsset_ChallengeInfo_GetStarValue, ReturnValue) == 0x000004, "Member 'BFGDataAsset_ChallengeInfo_GetStarValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence.GetContext
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionConsequence_GetContext final
{
public:
	struct FBFGMissionConsequence_Context         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_GetContext) == 0x000008, "Wrong alignment on BFGMissionConsequence_GetContext");
static_assert(sizeof(BFGMissionConsequence_GetContext) == 0x000010, "Wrong size on BFGMissionConsequence_GetContext");
static_assert(offsetof(BFGMissionConsequence_GetContext, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_GetContext::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence.GetDevName
// 0x0008 (0x0008 - 0x0000)
struct BFGMissionConsequence_GetDevName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_GetDevName) == 0x000004, "Wrong alignment on BFGMissionConsequence_GetDevName");
static_assert(sizeof(BFGMissionConsequence_GetDevName) == 0x000008, "Wrong size on BFGMissionConsequence_GetDevName");
static_assert(offsetof(BFGMissionConsequence_GetDevName, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_GetDevName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct BFGMissionConsequence_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_GetDuration) == 0x000004, "Wrong alignment on BFGMissionConsequence_GetDuration");
static_assert(sizeof(BFGMissionConsequence_GetDuration) == 0x000004, "Wrong size on BFGMissionConsequence_GetDuration");
static_assert(offsetof(BFGMissionConsequence_GetDuration, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_GetDuration::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence.GetGameState
// 0x0008 (0x0008 - 0x0000)
struct BFGMissionConsequence_GetGameState final
{
public:
	class ABFGGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_GetGameState) == 0x000008, "Wrong alignment on BFGMissionConsequence_GetGameState");
static_assert(sizeof(BFGMissionConsequence_GetGameState) == 0x000008, "Wrong size on BFGMissionConsequence_GetGameState");
static_assert(offsetof(BFGMissionConsequence_GetGameState, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_GetGameState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence.GetOwner
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionConsequence_GetOwner final
{
public:
	TSubclassOf<class UObject>                    _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_GetOwner) == 0x000008, "Wrong alignment on BFGMissionConsequence_GetOwner");
static_assert(sizeof(BFGMissionConsequence_GetOwner) == 0x000010, "Wrong size on BFGMissionConsequence_GetOwner");
static_assert(offsetof(BFGMissionConsequence_GetOwner, _pClass) == 0x000000, "Member 'BFGMissionConsequence_GetOwner::_pClass' has a wrong offset!");
static_assert(offsetof(BFGMissionConsequence_GetOwner, ReturnValue) == 0x000008, "Member 'BFGMissionConsequence_GetOwner::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence.GetTimeActive
// 0x0004 (0x0004 - 0x0000)
struct BFGMissionConsequence_GetTimeActive final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_GetTimeActive) == 0x000004, "Wrong alignment on BFGMissionConsequence_GetTimeActive");
static_assert(sizeof(BFGMissionConsequence_GetTimeActive) == 0x000004, "Wrong size on BFGMissionConsequence_GetTimeActive");
static_assert(offsetof(BFGMissionConsequence_GetTimeActive, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_GetTimeActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence.IsExpired
// 0x0001 (0x0001 - 0x0000)
struct BFGMissionConsequence_IsExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_IsExpired) == 0x000001, "Wrong alignment on BFGMissionConsequence_IsExpired");
static_assert(sizeof(BFGMissionConsequence_IsExpired) == 0x000001, "Wrong size on BFGMissionConsequence_IsExpired");
static_assert(offsetof(BFGMissionConsequence_IsExpired, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_IsExpired::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataAsset_StaticMeshBurning.IsValid
// 0x0001 (0x0001 - 0x0000)
struct BFGDataAsset_StaticMeshBurning_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataAsset_StaticMeshBurning_IsValid) == 0x000001, "Wrong alignment on BFGDataAsset_StaticMeshBurning_IsValid");
static_assert(sizeof(BFGDataAsset_StaticMeshBurning_IsValid) == 0x000001, "Wrong size on BFGDataAsset_StaticMeshBurning_IsValid");
static_assert(offsetof(BFGDataAsset_StaticMeshBurning_IsValid, ReturnValue) == 0x000000, "Member 'BFGDataAsset_StaticMeshBurning_IsValid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionLevelSwitcher.GetLevelName
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionLevelSwitcher_GetLevelName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionLevelSwitcher_GetLevelName) == 0x000008, "Wrong alignment on BFGMissionLevelSwitcher_GetLevelName");
static_assert(sizeof(BFGMissionLevelSwitcher_GetLevelName) == 0x000010, "Wrong size on BFGMissionLevelSwitcher_GetLevelName");
static_assert(offsetof(BFGMissionLevelSwitcher_GetLevelName, ReturnValue) == 0x000000, "Member 'BFGMissionLevelSwitcher_GetLevelName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionLevelSwitcher.GetLevelPath
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionLevelSwitcher_GetLevelPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionLevelSwitcher_GetLevelPath) == 0x000008, "Wrong alignment on BFGMissionLevelSwitcher_GetLevelPath");
static_assert(sizeof(BFGMissionLevelSwitcher_GetLevelPath) == 0x000010, "Wrong size on BFGMissionLevelSwitcher_GetLevelPath");
static_assert(offsetof(BFGMissionLevelSwitcher_GetLevelPath, ReturnValue) == 0x000000, "Member 'BFGMissionLevelSwitcher_GetLevelPath::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDebugUtils.DebugBreak
// 0x0001 (0x0001 - 0x0000)
struct BFGDebugUtils_DebugBreak final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDebugUtils_DebugBreak) == 0x000001, "Wrong alignment on BFGDebugUtils_DebugBreak");
static_assert(sizeof(BFGDebugUtils_DebugBreak) == 0x000001, "Wrong size on BFGDebugUtils_DebugBreak");
static_assert(offsetof(BFGDebugUtils_DebugBreak, bEnabled) == 0x000000, "Member 'BFGDebugUtils_DebugBreak::bEnabled' has a wrong offset!");

// Function BFGCore.BFGFactionResolver.ResolveActorAttitute
// 0x0018 (0x0018 - 0x0000)
struct BFGFactionResolver_ResolveActorAttitute final
{
public:
	class AActor*                                 _pActorA;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pActorB;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAllowNoFaction;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGFactionResolver_ResolveActorAttitute) == 0x000008, "Wrong alignment on BFGFactionResolver_ResolveActorAttitute");
static_assert(sizeof(BFGFactionResolver_ResolveActorAttitute) == 0x000018, "Wrong size on BFGFactionResolver_ResolveActorAttitute");
static_assert(offsetof(BFGFactionResolver_ResolveActorAttitute, _pActorA) == 0x000000, "Member 'BFGFactionResolver_ResolveActorAttitute::_pActorA' has a wrong offset!");
static_assert(offsetof(BFGFactionResolver_ResolveActorAttitute, _pActorB) == 0x000008, "Member 'BFGFactionResolver_ResolveActorAttitute::_pActorB' has a wrong offset!");
static_assert(offsetof(BFGFactionResolver_ResolveActorAttitute, _bAllowNoFaction) == 0x000010, "Member 'BFGFactionResolver_ResolveActorAttitute::_bAllowNoFaction' has a wrong offset!");
static_assert(offsetof(BFGFactionResolver_ResolveActorAttitute, ReturnValue) == 0x000011, "Member 'BFGFactionResolver_ResolveActorAttitute::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGFactionResolver.ResolveAttitute
// 0x0003 (0x0003 - 0x0000)
struct BFGFactionResolver_ResolveAttitute final
{
public:
	struct FGenericTeamId                         _teamA;                                            // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         _teamB;                                            // 0x0001(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGFactionResolver_ResolveAttitute) == 0x000001, "Wrong alignment on BFGFactionResolver_ResolveAttitute");
static_assert(sizeof(BFGFactionResolver_ResolveAttitute) == 0x000003, "Wrong size on BFGFactionResolver_ResolveAttitute");
static_assert(offsetof(BFGFactionResolver_ResolveAttitute, _teamA) == 0x000000, "Member 'BFGFactionResolver_ResolveAttitute::_teamA' has a wrong offset!");
static_assert(offsetof(BFGFactionResolver_ResolveAttitute, _teamB) == 0x000001, "Member 'BFGFactionResolver_ResolveAttitute::_teamB' has a wrong offset!");
static_assert(offsetof(BFGFactionResolver_ResolveAttitute, ReturnValue) == 0x000002, "Member 'BFGFactionResolver_ResolveAttitute::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGFactionResolver.SetFactionForActor
// 0x0010 (0x0010 - 0x0000)
struct BFGFactionResolver_SetFactionForActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGFaction                                   _faction;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGFactionResolver_SetFactionForActor) == 0x000008, "Wrong alignment on BFGFactionResolver_SetFactionForActor");
static_assert(sizeof(BFGFactionResolver_SetFactionForActor) == 0x000010, "Wrong size on BFGFactionResolver_SetFactionForActor");
static_assert(offsetof(BFGFactionResolver_SetFactionForActor, _pActor) == 0x000000, "Member 'BFGFactionResolver_SetFactionForActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGFactionResolver_SetFactionForActor, _faction) == 0x000008, "Member 'BFGFactionResolver_SetFactionForActor::_faction' has a wrong offset!");
static_assert(offsetof(BFGFactionResolver_SetFactionForActor, ReturnValue) == 0x000009, "Member 'BFGFactionResolver_SetFactionForActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDecorator_GameplayEffectTags.OnPawnChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGDecorator_GameplayEffectTags_OnPawnChanged final
{
public:
	class APawn*                                  _pPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDecorator_GameplayEffectTags_OnPawnChanged) == 0x000008, "Wrong alignment on BFGDecorator_GameplayEffectTags_OnPawnChanged");
static_assert(sizeof(BFGDecorator_GameplayEffectTags_OnPawnChanged) == 0x000008, "Wrong size on BFGDecorator_GameplayEffectTags_OnPawnChanged");
static_assert(offsetof(BFGDecorator_GameplayEffectTags_OnPawnChanged, _pPawn) == 0x000000, "Member 'BFGDecorator_GameplayEffectTags_OnPawnChanged::_pPawn' has a wrong offset!");

// Function BFGCore.BFGDecorator_GameplayEffectTags.OnTagChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGDecorator_GameplayEffectTags_OnTagChanged final
{
public:
	struct FGameplayTag                           _rTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTargetActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDecorator_GameplayEffectTags_OnTagChanged) == 0x000008, "Wrong alignment on BFGDecorator_GameplayEffectTags_OnTagChanged");
static_assert(sizeof(BFGDecorator_GameplayEffectTags_OnTagChanged) == 0x000010, "Wrong size on BFGDecorator_GameplayEffectTags_OnTagChanged");
static_assert(offsetof(BFGDecorator_GameplayEffectTags_OnTagChanged, _rTag) == 0x000000, "Member 'BFGDecorator_GameplayEffectTags_OnTagChanged::_rTag' has a wrong offset!");
static_assert(offsetof(BFGDecorator_GameplayEffectTags_OnTagChanged, _pTargetActor) == 0x000008, "Member 'BFGDecorator_GameplayEffectTags_OnTagChanged::_pTargetActor' has a wrong offset!");

// Function BFGCore.BFGItemDestructable.OnDeathStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGItemDestructable_OnDeathStateChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGItemDestructable_OnDeathStateChanged) == 0x000008, "Wrong alignment on BFGItemDestructable_OnDeathStateChanged");
static_assert(sizeof(BFGItemDestructable_OnDeathStateChanged) == 0x000010, "Wrong size on BFGItemDestructable_OnDeathStateChanged");
static_assert(offsetof(BFGItemDestructable_OnDeathStateChanged, _pActor) == 0x000000, "Member 'BFGItemDestructable_OnDeathStateChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGItemDestructable_OnDeathStateChanged, _pStat) == 0x000008, "Member 'BFGItemDestructable_OnDeathStateChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGVariableMessageServer.OnVariableChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGVariableMessageServer_OnVariableChanged final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _oldValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _newValue;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMessageServer_OnVariableChanged) == 0x000008, "Wrong alignment on BFGVariableMessageServer_OnVariableChanged");
static_assert(sizeof(BFGVariableMessageServer_OnVariableChanged) == 0x000018, "Wrong size on BFGVariableMessageServer_OnVariableChanged");
static_assert(offsetof(BFGVariableMessageServer_OnVariableChanged, _pVarMirror) == 0x000000, "Member 'BFGVariableMessageServer_OnVariableChanged::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGVariableMessageServer_OnVariableChanged, _pVariable) == 0x000008, "Member 'BFGVariableMessageServer_OnVariableChanged::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGVariableMessageServer_OnVariableChanged, _oldValue) == 0x000010, "Member 'BFGVariableMessageServer_OnVariableChanged::_oldValue' has a wrong offset!");
static_assert(offsetof(BFGVariableMessageServer_OnVariableChanged, _newValue) == 0x000014, "Member 'BFGVariableMessageServer_OnVariableChanged::_newValue' has a wrong offset!");

// Function BFGCore.BFGInterLevelSoundManager.AddSound
// 0x0008 (0x0008 - 0x0000)
struct BFGInterLevelSoundManager_AddSound final
{
public:
	class USoundBase*                             _pSound;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInterLevelSoundManager_AddSound) == 0x000008, "Wrong alignment on BFGInterLevelSoundManager_AddSound");
static_assert(sizeof(BFGInterLevelSoundManager_AddSound) == 0x000008, "Wrong size on BFGInterLevelSoundManager_AddSound");
static_assert(offsetof(BFGInterLevelSoundManager_AddSound, _pSound) == 0x000000, "Member 'BFGInterLevelSoundManager_AddSound::_pSound' has a wrong offset!");

// Function BFGCore.BFGInterLevelSoundManager.Flush
// 0x0010 (0x0010 - 0x0000)
struct BFGInterLevelSoundManager_Flush final
{
public:
	class UWorld*                                 _pWorldToFlush;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bClearActivatedReverb;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInterLevelSoundManager_Flush) == 0x000008, "Wrong alignment on BFGInterLevelSoundManager_Flush");
static_assert(sizeof(BFGInterLevelSoundManager_Flush) == 0x000010, "Wrong size on BFGInterLevelSoundManager_Flush");
static_assert(offsetof(BFGInterLevelSoundManager_Flush, _pWorldToFlush) == 0x000000, "Member 'BFGInterLevelSoundManager_Flush::_pWorldToFlush' has a wrong offset!");
static_assert(offsetof(BFGInterLevelSoundManager_Flush, _bClearActivatedReverb) == 0x000008, "Member 'BFGInterLevelSoundManager_Flush::_bClearActivatedReverb' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.GetPKAbleComponentFromActor
// 0x0010 (0x0010 - 0x0000)
struct BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor) == 0x000008, "Wrong alignment on BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor) == 0x000010, "Wrong size on BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor, _pActor) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor, ReturnValue) == 0x000008, "Member 'BFGMentalAbility_Psychokinesis_GetPKAbleComponentFromActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.OnHit
// 0x00A8 (0x00A8 - 0x0000)
struct BFGMentalAbility_Psychokinesis_OnHit final
{
public:
	class AActor*                                 _pSelfActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vNormalImpulse;                                   // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _hitResult;                                        // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_OnHit) == 0x000008, "Wrong alignment on BFGMentalAbility_Psychokinesis_OnHit");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_OnHit) == 0x0000A8, "Wrong size on BFGMentalAbility_Psychokinesis_OnHit");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnHit, _pSelfActor) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_OnHit::_pSelfActor' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnHit, _pOtherActor) == 0x000008, "Member 'BFGMentalAbility_Psychokinesis_OnHit::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnHit, _vNormalImpulse) == 0x000010, "Member 'BFGMentalAbility_Psychokinesis_OnHit::_vNormalImpulse' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnHit, _hitResult) == 0x00001C, "Member 'BFGMentalAbility_Psychokinesis_OnHit::_hitResult' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.OnObjectPickup
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbility_Psychokinesis_OnObjectPickup final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_OnObjectPickup) == 0x000008, "Wrong alignment on BFGMentalAbility_Psychokinesis_OnObjectPickup");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_OnObjectPickup) == 0x000008, "Wrong size on BFGMentalAbility_Psychokinesis_OnObjectPickup");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnObjectPickup, PActor) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_OnObjectPickup::PActor' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.OnObjectReleased
// 0x0010 (0x0010 - 0x0000)
struct BFGMentalAbility_Psychokinesis_OnObjectReleased final
{
public:
	class AActor*                                 PThrownActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasThrowOrDrop;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_OnObjectReleased) == 0x000008, "Wrong alignment on BFGMentalAbility_Psychokinesis_OnObjectReleased");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_OnObjectReleased) == 0x000010, "Wrong size on BFGMentalAbility_Psychokinesis_OnObjectReleased");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnObjectReleased, PThrownActor) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_OnObjectReleased::PThrownActor' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnObjectReleased, bWasThrowOrDrop) == 0x000008, "Member 'BFGMentalAbility_Psychokinesis_OnObjectReleased::bWasThrowOrDrop' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.OnThrownObjectImpact
// 0x0098 (0x0098 - 0x0000)
struct BFGMentalAbility_Psychokinesis_OnThrownObjectImpact final
{
public:
	class AActor*                                 PThrownActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PHitActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OHitResult;                                        // 0x0010(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_OnThrownObjectImpact) == 0x000008, "Wrong alignment on BFGMentalAbility_Psychokinesis_OnThrownObjectImpact");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_OnThrownObjectImpact) == 0x000098, "Wrong size on BFGMentalAbility_Psychokinesis_OnThrownObjectImpact");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnThrownObjectImpact, PThrownActor) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_OnThrownObjectImpact::PThrownActor' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnThrownObjectImpact, PHitActor) == 0x000008, "Member 'BFGMentalAbility_Psychokinesis_OnThrownObjectImpact::PHitActor' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_OnThrownObjectImpact, OHitResult) == 0x000010, "Member 'BFGMentalAbility_Psychokinesis_OnThrownObjectImpact::OHitResult' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.GetCurrentChargeRatio
// 0x0004 (0x0004 - 0x0000)
struct BFGMentalAbility_Psychokinesis_GetCurrentChargeRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_GetCurrentChargeRatio) == 0x000004, "Wrong alignment on BFGMentalAbility_Psychokinesis_GetCurrentChargeRatio");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_GetCurrentChargeRatio) == 0x000004, "Wrong size on BFGMentalAbility_Psychokinesis_GetCurrentChargeRatio");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_GetCurrentChargeRatio, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_GetCurrentChargeRatio::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.GetCurrentHoveredActor
// 0x0008 (0x0008 - 0x0000)
struct BFGMentalAbility_Psychokinesis_GetCurrentHoveredActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_GetCurrentHoveredActor) == 0x000008, "Wrong alignment on BFGMentalAbility_Psychokinesis_GetCurrentHoveredActor");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_GetCurrentHoveredActor) == 0x000008, "Wrong size on BFGMentalAbility_Psychokinesis_GetCurrentHoveredActor");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_GetCurrentHoveredActor, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_GetCurrentHoveredActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.GetVehicleAttachedEntity
// 0x0010 (0x0010 - 0x0000)
struct BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGNetworkPathAgent_AttachedEntity*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity) == 0x000008, "Wrong alignment on BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity) == 0x000010, "Wrong size on BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity, _pActor) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity::_pActor' has a wrong offset!");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity, ReturnValue) == 0x000008, "Member 'BFGMentalAbility_Psychokinesis_GetVehicleAttachedEntity::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMentalAbility_Psychokinesis.GetWillBeThrowOrDrop
// 0x0001 (0x0001 - 0x0000)
struct BFGMentalAbility_Psychokinesis_GetWillBeThrowOrDrop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMentalAbility_Psychokinesis_GetWillBeThrowOrDrop) == 0x000001, "Wrong alignment on BFGMentalAbility_Psychokinesis_GetWillBeThrowOrDrop");
static_assert(sizeof(BFGMentalAbility_Psychokinesis_GetWillBeThrowOrDrop) == 0x000001, "Wrong size on BFGMentalAbility_Psychokinesis_GetWillBeThrowOrDrop");
static_assert(offsetof(BFGMentalAbility_Psychokinesis_GetWillBeThrowOrDrop, ReturnValue) == 0x000000, "Member 'BFGMentalAbility_Psychokinesis_GetWillBeThrowOrDrop::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDialogOptionHandler_Savegame.OnDialogMessage
// 0x0001 (0x0001 - 0x0000)
struct BFGDialogOptionHandler_Savegame_OnDialogMessage final
{
public:
	EBFGDialogMessage                             _eMessage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDialogOptionHandler_Savegame_OnDialogMessage) == 0x000001, "Wrong alignment on BFGDialogOptionHandler_Savegame_OnDialogMessage");
static_assert(sizeof(BFGDialogOptionHandler_Savegame_OnDialogMessage) == 0x000001, "Wrong size on BFGDialogOptionHandler_Savegame_OnDialogMessage");
static_assert(offsetof(BFGDialogOptionHandler_Savegame_OnDialogMessage, _eMessage) == 0x000000, "Member 'BFGDialogOptionHandler_Savegame_OnDialogMessage::_eMessage' has a wrong offset!");

// Function BFGCore.BFGDialogOptionHandler_Savegame.OnSavegameSlotPicked
// 0x0008 (0x0008 - 0x0000)
struct BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGDialogOptionHandler_SavegameSlotMode      _eSlotMode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked) == 0x000004, "Wrong alignment on BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked");
static_assert(sizeof(BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked) == 0x000008, "Wrong size on BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked");
static_assert(offsetof(BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked, _iIndex) == 0x000000, "Member 'BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked, _eSlotMode) == 0x000004, "Member 'BFGDialogOptionHandler_Savegame_OnSavegameSlotPicked::_eSlotMode' has a wrong offset!");

// Function BFGCore.BFGDLCSettings.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGDLCSettings_GetSettings final
{
public:
	class UBFGDLCSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDLCSettings_GetSettings) == 0x000008, "Wrong alignment on BFGDLCSettings_GetSettings");
static_assert(sizeof(BFGDLCSettings_GetSettings) == 0x000008, "Wrong size on BFGDLCSettings_GetSettings");
static_assert(offsetof(BFGDLCSettings_GetSettings, ReturnValue) == 0x000000, "Member 'BFGDLCSettings_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDynamicStaticObjectManager.ForceDeletionOfObject
// 0x0008 (0x0008 - 0x0000)
struct BFGDynamicStaticObjectManager_ForceDeletionOfObject final
{
public:
	class ABFGObject_StaticWithPhysics*           _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDynamicStaticObjectManager_ForceDeletionOfObject) == 0x000008, "Wrong alignment on BFGDynamicStaticObjectManager_ForceDeletionOfObject");
static_assert(sizeof(BFGDynamicStaticObjectManager_ForceDeletionOfObject) == 0x000008, "Wrong size on BFGDynamicStaticObjectManager_ForceDeletionOfObject");
static_assert(offsetof(BFGDynamicStaticObjectManager_ForceDeletionOfObject, _pObject) == 0x000000, "Member 'BFGDynamicStaticObjectManager_ForceDeletionOfObject::_pObject' has a wrong offset!");

// Function BFGCore.BFGDynamicStaticObjectManager.ForceDeletionOfObjectsInBounds
// 0x0018 (0x0018 - 0x0000)
struct BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds final
{
public:
	struct FVector                                _vOrigin;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vExtend;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds) == 0x000004, "Wrong alignment on BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds");
static_assert(sizeof(BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds) == 0x000018, "Wrong size on BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds");
static_assert(offsetof(BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds, _vOrigin) == 0x000000, "Member 'BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds::_vOrigin' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds, _vExtend) == 0x00000C, "Member 'BFGDynamicStaticObjectManager_ForceDeletionOfObjectsInBounds::_vExtend' has a wrong offset!");

// Function BFGCore.BFGDynamicStaticObjectManager.OnRelevantActorCollision
// 0x00A0 (0x00A0 - 0x0000)
struct BFGDynamicStaticObjectManager_OnRelevantActorCollision final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 CollidingActor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDynamicStaticObjectManager_OnRelevantActorCollision) == 0x000008, "Wrong alignment on BFGDynamicStaticObjectManager_OnRelevantActorCollision");
static_assert(sizeof(BFGDynamicStaticObjectManager_OnRelevantActorCollision) == 0x0000A0, "Wrong size on BFGDynamicStaticObjectManager_OnRelevantActorCollision");
static_assert(offsetof(BFGDynamicStaticObjectManager_OnRelevantActorCollision, HitActor) == 0x000000, "Member 'BFGDynamicStaticObjectManager_OnRelevantActorCollision::HitActor' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_OnRelevantActorCollision, CollidingActor) == 0x000008, "Member 'BFGDynamicStaticObjectManager_OnRelevantActorCollision::CollidingActor' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_OnRelevantActorCollision, Hit) == 0x000010, "Member 'BFGDynamicStaticObjectManager_OnRelevantActorCollision::Hit' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_OnRelevantActorCollision, Velocity) == 0x000098, "Member 'BFGDynamicStaticObjectManager_OnRelevantActorCollision::Velocity' has a wrong offset!");

// Function BFGCore.BFGDynamicStaticObjectManager.SetForceObjectToStayAlive
// 0x0010 (0x0010 - 0x0000)
struct BFGDynamicStaticObjectManager_SetForceObjectToStayAlive final
{
public:
	class ABFGObject_StaticWithPhysics*           _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceStayAlive;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDynamicStaticObjectManager_SetForceObjectToStayAlive) == 0x000008, "Wrong alignment on BFGDynamicStaticObjectManager_SetForceObjectToStayAlive");
static_assert(sizeof(BFGDynamicStaticObjectManager_SetForceObjectToStayAlive) == 0x000010, "Wrong size on BFGDynamicStaticObjectManager_SetForceObjectToStayAlive");
static_assert(offsetof(BFGDynamicStaticObjectManager_SetForceObjectToStayAlive, _pObject) == 0x000000, "Member 'BFGDynamicStaticObjectManager_SetForceObjectToStayAlive::_pObject' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_SetForceObjectToStayAlive, _bForceStayAlive) == 0x000008, "Member 'BFGDynamicStaticObjectManager_SetForceObjectToStayAlive::_bForceStayAlive' has a wrong offset!");

// Function BFGCore.BFGDynamicStaticObjectManager.SwapActorWithDynamic
// 0x0018 (0x0018 - 0x0000)
struct BFGDynamicStaticObjectManager_SwapActorWithDynamic final
{
public:
	class AStaticMeshActor*                       _pOldActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceActive;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGObject_StaticWithPhysics*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDynamicStaticObjectManager_SwapActorWithDynamic) == 0x000008, "Wrong alignment on BFGDynamicStaticObjectManager_SwapActorWithDynamic");
static_assert(sizeof(BFGDynamicStaticObjectManager_SwapActorWithDynamic) == 0x000018, "Wrong size on BFGDynamicStaticObjectManager_SwapActorWithDynamic");
static_assert(offsetof(BFGDynamicStaticObjectManager_SwapActorWithDynamic, _pOldActor) == 0x000000, "Member 'BFGDynamicStaticObjectManager_SwapActorWithDynamic::_pOldActor' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_SwapActorWithDynamic, _bForceActive) == 0x000008, "Member 'BFGDynamicStaticObjectManager_SwapActorWithDynamic::_bForceActive' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_SwapActorWithDynamic, ReturnValue) == 0x000010, "Member 'BFGDynamicStaticObjectManager_SwapActorWithDynamic::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDynamicStaticObjectManager.SwapComponentWithDynamic
// 0x0050 (0x0050 - 0x0000)
struct BFGDynamicStaticObjectManager_SwapComponentWithDynamic final
{
public:
	class UStaticMeshComponent*                   _pOldComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _tTransform;                                       // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bForceActive;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGObject_StaticWithPhysics*           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDynamicStaticObjectManager_SwapComponentWithDynamic) == 0x000010, "Wrong alignment on BFGDynamicStaticObjectManager_SwapComponentWithDynamic");
static_assert(sizeof(BFGDynamicStaticObjectManager_SwapComponentWithDynamic) == 0x000050, "Wrong size on BFGDynamicStaticObjectManager_SwapComponentWithDynamic");
static_assert(offsetof(BFGDynamicStaticObjectManager_SwapComponentWithDynamic, _pOldComponent) == 0x000000, "Member 'BFGDynamicStaticObjectManager_SwapComponentWithDynamic::_pOldComponent' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_SwapComponentWithDynamic, _tTransform) == 0x000010, "Member 'BFGDynamicStaticObjectManager_SwapComponentWithDynamic::_tTransform' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_SwapComponentWithDynamic, _bForceActive) == 0x000040, "Member 'BFGDynamicStaticObjectManager_SwapComponentWithDynamic::_bForceActive' has a wrong offset!");
static_assert(offsetof(BFGDynamicStaticObjectManager_SwapComponentWithDynamic, ReturnValue) == 0x000048, "Member 'BFGDynamicStaticObjectManager_SwapComponentWithDynamic::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDynamicStaticObjectManager.GetCurrentActiveObjectCount
// 0x0004 (0x0004 - 0x0000)
struct BFGDynamicStaticObjectManager_GetCurrentActiveObjectCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDynamicStaticObjectManager_GetCurrentActiveObjectCount) == 0x000004, "Wrong alignment on BFGDynamicStaticObjectManager_GetCurrentActiveObjectCount");
static_assert(sizeof(BFGDynamicStaticObjectManager_GetCurrentActiveObjectCount) == 0x000004, "Wrong size on BFGDynamicStaticObjectManager_GetCurrentActiveObjectCount");
static_assert(offsetof(BFGDynamicStaticObjectManager_GetCurrentActiveObjectCount, ReturnValue) == 0x000000, "Member 'BFGDynamicStaticObjectManager_GetCurrentActiveObjectCount::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDynamicStaticObjectManager.GetForcedActiveObjectCount
// 0x0004 (0x0004 - 0x0000)
struct BFGDynamicStaticObjectManager_GetForcedActiveObjectCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDynamicStaticObjectManager_GetForcedActiveObjectCount) == 0x000004, "Wrong alignment on BFGDynamicStaticObjectManager_GetForcedActiveObjectCount");
static_assert(sizeof(BFGDynamicStaticObjectManager_GetForcedActiveObjectCount) == 0x000004, "Wrong size on BFGDynamicStaticObjectManager_GetForcedActiveObjectCount");
static_assert(offsetof(BFGDynamicStaticObjectManager_GetForcedActiveObjectCount, ReturnValue) == 0x000000, "Member 'BFGDynamicStaticObjectManager_GetForcedActiveObjectCount::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectActor_ForceField.OnTriggerEffectSlot
// 0x0004 (0x0004 - 0x0000)
struct BFGEffectActor_ForceField_OnTriggerEffectSlot final
{
public:
	int32                                         _iSlot;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectActor_ForceField_OnTriggerEffectSlot) == 0x000004, "Wrong alignment on BFGEffectActor_ForceField_OnTriggerEffectSlot");
static_assert(sizeof(BFGEffectActor_ForceField_OnTriggerEffectSlot) == 0x000004, "Wrong size on BFGEffectActor_ForceField_OnTriggerEffectSlot");
static_assert(offsetof(BFGEffectActor_ForceField_OnTriggerEffectSlot, _iSlot) == 0x000000, "Member 'BFGEffectActor_ForceField_OnTriggerEffectSlot::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.ComputeFreeSlot
// 0x0004 (0x0004 - 0x0000)
struct BFGEffectBlackboard_ComputeFreeSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_ComputeFreeSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_ComputeFreeSlot");
static_assert(sizeof(BFGEffectBlackboard_ComputeFreeSlot) == 0x000004, "Wrong size on BFGEffectBlackboard_ComputeFreeSlot");
static_assert(offsetof(BFGEffectBlackboard_ComputeFreeSlot, ReturnValue) == 0x000000, "Member 'BFGEffectBlackboard_ComputeFreeSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasActorComponentSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasActorComponentSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasActorComponentSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasActorComponentSlot");
static_assert(sizeof(BFGEffectBlackboard_HasActorComponentSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasActorComponentSlot");
static_assert(offsetof(BFGEffectBlackboard_HasActorComponentSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasActorComponentSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasActorComponentSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasActorComponentSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasActorComponentSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasActorComponentSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasActorSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasActorSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasActorSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasActorSlot");
static_assert(sizeof(BFGEffectBlackboard_HasActorSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasActorSlot");
static_assert(offsetof(BFGEffectBlackboard_HasActorSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasActorSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasActorSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasActorSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasActorSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasActorSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasBoolSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasBoolSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasBoolSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasBoolSlot");
static_assert(sizeof(BFGEffectBlackboard_HasBoolSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasBoolSlot");
static_assert(offsetof(BFGEffectBlackboard_HasBoolSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasBoolSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasBoolSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasBoolSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasBoolSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasBoolSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasColorSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasColorSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasColorSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasColorSlot");
static_assert(sizeof(BFGEffectBlackboard_HasColorSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasColorSlot");
static_assert(offsetof(BFGEffectBlackboard_HasColorSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasColorSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasColorSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasColorSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasColorSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasColorSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasDataTableSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasDataTableSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasDataTableSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasDataTableSlot");
static_assert(sizeof(BFGEffectBlackboard_HasDataTableSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasDataTableSlot");
static_assert(offsetof(BFGEffectBlackboard_HasDataTableSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasDataTableSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasDataTableSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasDataTableSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasDataTableSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasDataTableSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasFloatSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasFloatSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasFloatSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasFloatSlot");
static_assert(sizeof(BFGEffectBlackboard_HasFloatSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasFloatSlot");
static_assert(offsetof(BFGEffectBlackboard_HasFloatSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasFloatSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasFloatSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasFloatSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasFloatSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasFloatSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasIntSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasIntSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasIntSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasIntSlot");
static_assert(sizeof(BFGEffectBlackboard_HasIntSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasIntSlot");
static_assert(offsetof(BFGEffectBlackboard_HasIntSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasIntSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasIntSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasIntSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasIntSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasIntSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasNameSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasNameSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasNameSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasNameSlot");
static_assert(sizeof(BFGEffectBlackboard_HasNameSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasNameSlot");
static_assert(offsetof(BFGEffectBlackboard_HasNameSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasNameSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasNameSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasNameSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasNameSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasNameSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasObjectSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasObjectSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasObjectSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasObjectSlot");
static_assert(sizeof(BFGEffectBlackboard_HasObjectSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasObjectSlot");
static_assert(offsetof(BFGEffectBlackboard_HasObjectSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasObjectSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasObjectSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasObjectSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasObjectSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasObjectSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasRandFloatSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasRandFloatSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasRandFloatSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasRandFloatSlot");
static_assert(sizeof(BFGEffectBlackboard_HasRandFloatSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasRandFloatSlot");
static_assert(offsetof(BFGEffectBlackboard_HasRandFloatSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasRandFloatSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasRandFloatSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasRandFloatSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasRandFloatSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasRandFloatSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasRandVectorSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasRandVectorSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasRandVectorSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasRandVectorSlot");
static_assert(sizeof(BFGEffectBlackboard_HasRandVectorSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasRandVectorSlot");
static_assert(offsetof(BFGEffectBlackboard_HasRandVectorSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasRandVectorSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasRandVectorSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasRandVectorSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasRandVectorSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasRandVectorSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasRotatorSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasRotatorSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasRotatorSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasRotatorSlot");
static_assert(sizeof(BFGEffectBlackboard_HasRotatorSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasRotatorSlot");
static_assert(offsetof(BFGEffectBlackboard_HasRotatorSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasRotatorSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasRotatorSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasRotatorSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasRotatorSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasRotatorSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.HasVectorSlot
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_HasVectorSlot final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_HasVectorSlot) == 0x000004, "Wrong alignment on BFGEffectBlackboard_HasVectorSlot");
static_assert(sizeof(BFGEffectBlackboard_HasVectorSlot) == 0x000010, "Wrong size on BFGEffectBlackboard_HasVectorSlot");
static_assert(offsetof(BFGEffectBlackboard_HasVectorSlot, _rName) == 0x000000, "Member 'BFGEffectBlackboard_HasVectorSlot::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasVectorSlot, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_HasVectorSlot::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_HasVectorSlot, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_HasVectorSlot::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetActor
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_SetActor final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _iValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_SetActor) == 0x000008, "Wrong alignment on BFGEffectBlackboard_SetActor");
static_assert(sizeof(BFGEffectBlackboard_SetActor) == 0x000018, "Wrong size on BFGEffectBlackboard_SetActor");
static_assert(offsetof(BFGEffectBlackboard_SetActor, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetActor::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetActor, _iValue) == 0x000008, "Member 'BFGEffectBlackboard_SetActor::_iValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetActor, _iSlot) == 0x000010, "Member 'BFGEffectBlackboard_SetActor::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetActorComponent
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_SetActorComponent final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        _pComponent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_SetActorComponent) == 0x000008, "Wrong alignment on BFGEffectBlackboard_SetActorComponent");
static_assert(sizeof(BFGEffectBlackboard_SetActorComponent) == 0x000018, "Wrong size on BFGEffectBlackboard_SetActorComponent");
static_assert(offsetof(BFGEffectBlackboard_SetActorComponent, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetActorComponent::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetActorComponent, _pComponent) == 0x000008, "Member 'BFGEffectBlackboard_SetActorComponent::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetActorComponent, _iSlot) == 0x000010, "Member 'BFGEffectBlackboard_SetActorComponent::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetBool
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_SetBool final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iSlot;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetBool) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetBool");
static_assert(sizeof(BFGEffectBlackboard_SetBool) == 0x000010, "Wrong size on BFGEffectBlackboard_SetBool");
static_assert(offsetof(BFGEffectBlackboard_SetBool, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetBool::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetBool, _bValue) == 0x000008, "Member 'BFGEffectBlackboard_SetBool::_bValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetBool, _iSlot) == 0x00000C, "Member 'BFGEffectBlackboard_SetBool::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetColor
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_SetColor final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 _rValue;                                           // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetColor) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetColor");
static_assert(sizeof(BFGEffectBlackboard_SetColor) == 0x000010, "Wrong size on BFGEffectBlackboard_SetColor");
static_assert(offsetof(BFGEffectBlackboard_SetColor, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetColor::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetColor, _rValue) == 0x000008, "Member 'BFGEffectBlackboard_SetColor::_rValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetColor, _iSlot) == 0x00000C, "Member 'BFGEffectBlackboard_SetColor::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetDataTable
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_SetDataTable final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _pValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_SetDataTable) == 0x000008, "Wrong alignment on BFGEffectBlackboard_SetDataTable");
static_assert(sizeof(BFGEffectBlackboard_SetDataTable) == 0x000018, "Wrong size on BFGEffectBlackboard_SetDataTable");
static_assert(offsetof(BFGEffectBlackboard_SetDataTable, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetDataTable::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetDataTable, _pValue) == 0x000008, "Member 'BFGEffectBlackboard_SetDataTable::_pValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetDataTable, _iSlot) == 0x000010, "Member 'BFGEffectBlackboard_SetDataTable::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetFloat
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_SetFloat final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetFloat) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetFloat");
static_assert(sizeof(BFGEffectBlackboard_SetFloat) == 0x000010, "Wrong size on BFGEffectBlackboard_SetFloat");
static_assert(offsetof(BFGEffectBlackboard_SetFloat, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetFloat::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetFloat, _fValue) == 0x000008, "Member 'BFGEffectBlackboard_SetFloat::_fValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetFloat, _iSlot) == 0x00000C, "Member 'BFGEffectBlackboard_SetFloat::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetInt
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_SetInt final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetInt) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetInt");
static_assert(sizeof(BFGEffectBlackboard_SetInt) == 0x000010, "Wrong size on BFGEffectBlackboard_SetInt");
static_assert(offsetof(BFGEffectBlackboard_SetInt, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetInt::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetInt, _iValue) == 0x000008, "Member 'BFGEffectBlackboard_SetInt::_iValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetInt, _iSlot) == 0x00000C, "Member 'BFGEffectBlackboard_SetInt::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetName
// 0x0014 (0x0014 - 0x0000)
struct BFGEffectBlackboard_SetName final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _iValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetName) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetName");
static_assert(sizeof(BFGEffectBlackboard_SetName) == 0x000014, "Wrong size on BFGEffectBlackboard_SetName");
static_assert(offsetof(BFGEffectBlackboard_SetName, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetName::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetName, _iValue) == 0x000008, "Member 'BFGEffectBlackboard_SetName::_iValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetName, _iSlot) == 0x000010, "Member 'BFGEffectBlackboard_SetName::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetObject
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_SetObject final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _pValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_SetObject) == 0x000008, "Wrong alignment on BFGEffectBlackboard_SetObject");
static_assert(sizeof(BFGEffectBlackboard_SetObject) == 0x000018, "Wrong size on BFGEffectBlackboard_SetObject");
static_assert(offsetof(BFGEffectBlackboard_SetObject, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetObject::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetObject, _pValue) == 0x000008, "Member 'BFGEffectBlackboard_SetObject::_pValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetObject, _iSlot) == 0x000010, "Member 'BFGEffectBlackboard_SetObject::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetRandFloat
// 0x0014 (0x0014 - 0x0000)
struct BFGEffectBlackboard_SetRandFloat final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fMin;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fMax;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetRandFloat) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetRandFloat");
static_assert(sizeof(BFGEffectBlackboard_SetRandFloat) == 0x000014, "Wrong size on BFGEffectBlackboard_SetRandFloat");
static_assert(offsetof(BFGEffectBlackboard_SetRandFloat, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetRandFloat::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetRandFloat, _fMin) == 0x000008, "Member 'BFGEffectBlackboard_SetRandFloat::_fMin' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetRandFloat, _fMax) == 0x00000C, "Member 'BFGEffectBlackboard_SetRandFloat::_fMax' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetRandFloat, _iSlot) == 0x000010, "Member 'BFGEffectBlackboard_SetRandFloat::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetRandVector
// 0x0024 (0x0024 - 0x0000)
struct BFGEffectBlackboard_SetRandVector final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rMin;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rMax;                                             // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetRandVector) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetRandVector");
static_assert(sizeof(BFGEffectBlackboard_SetRandVector) == 0x000024, "Wrong size on BFGEffectBlackboard_SetRandVector");
static_assert(offsetof(BFGEffectBlackboard_SetRandVector, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetRandVector::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetRandVector, _rMin) == 0x000008, "Member 'BFGEffectBlackboard_SetRandVector::_rMin' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetRandVector, _rMax) == 0x000014, "Member 'BFGEffectBlackboard_SetRandVector::_rMax' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetRandVector, _iSlot) == 0x000020, "Member 'BFGEffectBlackboard_SetRandVector::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetRotator
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_SetRotator final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetRotator) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetRotator");
static_assert(sizeof(BFGEffectBlackboard_SetRotator) == 0x000018, "Wrong size on BFGEffectBlackboard_SetRotator");
static_assert(offsetof(BFGEffectBlackboard_SetRotator, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetRotator::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetRotator, _rValue) == 0x000008, "Member 'BFGEffectBlackboard_SetRotator::_rValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetRotator, _iSlot) == 0x000014, "Member 'BFGEffectBlackboard_SetRotator::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.SetVector
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_SetVector final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_SetVector) == 0x000004, "Wrong alignment on BFGEffectBlackboard_SetVector");
static_assert(sizeof(BFGEffectBlackboard_SetVector) == 0x000018, "Wrong size on BFGEffectBlackboard_SetVector");
static_assert(offsetof(BFGEffectBlackboard_SetVector, _rName) == 0x000000, "Member 'BFGEffectBlackboard_SetVector::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetVector, _rValue) == 0x000008, "Member 'BFGEffectBlackboard_SetVector::_rValue' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_SetVector, _iSlot) == 0x000014, "Member 'BFGEffectBlackboard_SetVector::_iSlot' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetActor
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_GetActor final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetActor) == 0x000008, "Wrong alignment on BFGEffectBlackboard_GetActor");
static_assert(sizeof(BFGEffectBlackboard_GetActor) == 0x000018, "Wrong size on BFGEffectBlackboard_GetActor");
static_assert(offsetof(BFGEffectBlackboard_GetActor, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetActor::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetActor, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetActor::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetActor, ReturnValue) == 0x000010, "Member 'BFGEffectBlackboard_GetActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetActorComponent
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_GetActorComponent final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetActorComponent) == 0x000008, "Wrong alignment on BFGEffectBlackboard_GetActorComponent");
static_assert(sizeof(BFGEffectBlackboard_GetActorComponent) == 0x000018, "Wrong size on BFGEffectBlackboard_GetActorComponent");
static_assert(offsetof(BFGEffectBlackboard_GetActorComponent, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetActorComponent::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetActorComponent, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetActorComponent::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetActorComponent, ReturnValue) == 0x000010, "Member 'BFGEffectBlackboard_GetActorComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetBool
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_GetBool final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectBlackboard_GetBool) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetBool");
static_assert(sizeof(BFGEffectBlackboard_GetBool) == 0x000010, "Wrong size on BFGEffectBlackboard_GetBool");
static_assert(offsetof(BFGEffectBlackboard_GetBool, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetBool::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetBool, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetBool::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetBool, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetBool::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetColor
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_GetColor final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetColor) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetColor");
static_assert(sizeof(BFGEffectBlackboard_GetColor) == 0x000010, "Wrong size on BFGEffectBlackboard_GetColor");
static_assert(offsetof(BFGEffectBlackboard_GetColor, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetColor::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetColor, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetColor::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetColor, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetColor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetDataTable
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_GetDataTable final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetDataTable) == 0x000008, "Wrong alignment on BFGEffectBlackboard_GetDataTable");
static_assert(sizeof(BFGEffectBlackboard_GetDataTable) == 0x000018, "Wrong size on BFGEffectBlackboard_GetDataTable");
static_assert(offsetof(BFGEffectBlackboard_GetDataTable, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetDataTable::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetDataTable, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetDataTable::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetDataTable, ReturnValue) == 0x000010, "Member 'BFGEffectBlackboard_GetDataTable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetEffectComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectBlackboard_GetEffectComponent final
{
public:
	class UBFGActorComponent_Effect*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetEffectComponent) == 0x000008, "Wrong alignment on BFGEffectBlackboard_GetEffectComponent");
static_assert(sizeof(BFGEffectBlackboard_GetEffectComponent) == 0x000008, "Wrong size on BFGEffectBlackboard_GetEffectComponent");
static_assert(offsetof(BFGEffectBlackboard_GetEffectComponent, ReturnValue) == 0x000000, "Member 'BFGEffectBlackboard_GetEffectComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetFloat
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_GetFloat final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetFloat) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetFloat");
static_assert(sizeof(BFGEffectBlackboard_GetFloat) == 0x000010, "Wrong size on BFGEffectBlackboard_GetFloat");
static_assert(offsetof(BFGEffectBlackboard_GetFloat, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetFloat::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetFloat, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetFloat::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetFloat, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetFloat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetInt
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectBlackboard_GetInt final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetInt) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetInt");
static_assert(sizeof(BFGEffectBlackboard_GetInt) == 0x000010, "Wrong size on BFGEffectBlackboard_GetInt");
static_assert(offsetof(BFGEffectBlackboard_GetInt, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetInt::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetInt, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetInt::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetInt, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetInt::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetName
// 0x0014 (0x0014 - 0x0000)
struct BFGEffectBlackboard_GetName final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetName) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetName");
static_assert(sizeof(BFGEffectBlackboard_GetName) == 0x000014, "Wrong size on BFGEffectBlackboard_GetName");
static_assert(offsetof(BFGEffectBlackboard_GetName, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetName::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetName, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetName::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetName, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetObject
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_GetObject final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetObject) == 0x000008, "Wrong alignment on BFGEffectBlackboard_GetObject");
static_assert(sizeof(BFGEffectBlackboard_GetObject) == 0x000018, "Wrong size on BFGEffectBlackboard_GetObject");
static_assert(offsetof(BFGEffectBlackboard_GetObject, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetObject::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetObject, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetObject::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetObject, ReturnValue) == 0x000010, "Member 'BFGEffectBlackboard_GetObject::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetRandFloat
// 0x0014 (0x0014 - 0x0000)
struct BFGEffectBlackboard_GetRandFloat final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGEffectBlackboardParameter_RandFloat ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetRandFloat) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetRandFloat");
static_assert(sizeof(BFGEffectBlackboard_GetRandFloat) == 0x000014, "Wrong size on BFGEffectBlackboard_GetRandFloat");
static_assert(offsetof(BFGEffectBlackboard_GetRandFloat, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetRandFloat::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetRandFloat, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetRandFloat::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetRandFloat, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetRandFloat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetRandVector
// 0x0024 (0x0024 - 0x0000)
struct BFGEffectBlackboard_GetRandVector final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGEffectBlackboardParameter_RandVector ReturnValue;                                       // 0x000C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetRandVector) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetRandVector");
static_assert(sizeof(BFGEffectBlackboard_GetRandVector) == 0x000024, "Wrong size on BFGEffectBlackboard_GetRandVector");
static_assert(offsetof(BFGEffectBlackboard_GetRandVector, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetRandVector::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetRandVector, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetRandVector::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetRandVector, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetRandVector::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetRotator
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_GetRotator final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetRotator) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetRotator");
static_assert(sizeof(BFGEffectBlackboard_GetRotator) == 0x000018, "Wrong size on BFGEffectBlackboard_GetRotator");
static_assert(offsetof(BFGEffectBlackboard_GetRotator, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetRotator::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetRotator, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetRotator::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetRotator, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetRotator::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectBlackboard.GetVector
// 0x0018 (0x0018 - 0x0000)
struct BFGEffectBlackboard_GetVector final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectBlackboard_GetVector) == 0x000004, "Wrong alignment on BFGEffectBlackboard_GetVector");
static_assert(sizeof(BFGEffectBlackboard_GetVector) == 0x000018, "Wrong size on BFGEffectBlackboard_GetVector");
static_assert(offsetof(BFGEffectBlackboard_GetVector, _rName) == 0x000000, "Member 'BFGEffectBlackboard_GetVector::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetVector, _iSlot) == 0x000008, "Member 'BFGEffectBlackboard_GetVector::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGEffectBlackboard_GetVector, ReturnValue) == 0x00000C, "Member 'BFGEffectBlackboard_GetVector::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.HandleActorFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_HandleActorFinished final
{
public:
	class ABFGEffectActor*                        _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_HandleActorFinished) == 0x000008, "Wrong alignment on BFGEffectContainer_HandleActorFinished");
static_assert(sizeof(BFGEffectContainer_HandleActorFinished) == 0x000008, "Wrong size on BFGEffectContainer_HandleActorFinished");
static_assert(offsetof(BFGEffectContainer_HandleActorFinished, _pActor) == 0x000000, "Member 'BFGEffectContainer_HandleActorFinished::_pActor' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.HandleForceFeedbackFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_HandleForceFeedbackFinished final
{
public:
	class UForceFeedbackComponent*                _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_HandleForceFeedbackFinished) == 0x000008, "Wrong alignment on BFGEffectContainer_HandleForceFeedbackFinished");
static_assert(sizeof(BFGEffectContainer_HandleForceFeedbackFinished) == 0x000008, "Wrong size on BFGEffectContainer_HandleForceFeedbackFinished");
static_assert(offsetof(BFGEffectContainer_HandleForceFeedbackFinished, _pComponent) == 0x000000, "Member 'BFGEffectContainer_HandleForceFeedbackFinished::_pComponent' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.HandleObjectFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_HandleObjectFinished final
{
public:
	class UBFGEffectObject*                       _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_HandleObjectFinished) == 0x000008, "Wrong alignment on BFGEffectContainer_HandleObjectFinished");
static_assert(sizeof(BFGEffectContainer_HandleObjectFinished) == 0x000008, "Wrong size on BFGEffectContainer_HandleObjectFinished");
static_assert(offsetof(BFGEffectContainer_HandleObjectFinished, _pObject) == 0x000000, "Member 'BFGEffectContainer_HandleObjectFinished::_pObject' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.HandleParticlesFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_HandleParticlesFinished final
{
public:
	class UParticleSystemComponent*               _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_HandleParticlesFinished) == 0x000008, "Wrong alignment on BFGEffectContainer_HandleParticlesFinished");
static_assert(sizeof(BFGEffectContainer_HandleParticlesFinished) == 0x000008, "Wrong size on BFGEffectContainer_HandleParticlesFinished");
static_assert(offsetof(BFGEffectContainer_HandleParticlesFinished, _pComponent) == 0x000000, "Member 'BFGEffectContainer_HandleParticlesFinished::_pComponent' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.HandleReleaseForceFeedbackFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_HandleReleaseForceFeedbackFinished final
{
public:
	class UForceFeedbackComponent*                _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_HandleReleaseForceFeedbackFinished) == 0x000008, "Wrong alignment on BFGEffectContainer_HandleReleaseForceFeedbackFinished");
static_assert(sizeof(BFGEffectContainer_HandleReleaseForceFeedbackFinished) == 0x000008, "Wrong size on BFGEffectContainer_HandleReleaseForceFeedbackFinished");
static_assert(offsetof(BFGEffectContainer_HandleReleaseForceFeedbackFinished, _pComponent) == 0x000000, "Member 'BFGEffectContainer_HandleReleaseForceFeedbackFinished::_pComponent' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.HandleReleaseParticlesFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_HandleReleaseParticlesFinished final
{
public:
	class UParticleSystemComponent*               _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_HandleReleaseParticlesFinished) == 0x000008, "Wrong alignment on BFGEffectContainer_HandleReleaseParticlesFinished");
static_assert(sizeof(BFGEffectContainer_HandleReleaseParticlesFinished) == 0x000008, "Wrong size on BFGEffectContainer_HandleReleaseParticlesFinished");
static_assert(offsetof(BFGEffectContainer_HandleReleaseParticlesFinished, _pComponent) == 0x000000, "Member 'BFGEffectContainer_HandleReleaseParticlesFinished::_pComponent' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.HandleSustainForceFeedbackFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_HandleSustainForceFeedbackFinished final
{
public:
	class UForceFeedbackComponent*                _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_HandleSustainForceFeedbackFinished) == 0x000008, "Wrong alignment on BFGEffectContainer_HandleSustainForceFeedbackFinished");
static_assert(sizeof(BFGEffectContainer_HandleSustainForceFeedbackFinished) == 0x000008, "Wrong size on BFGEffectContainer_HandleSustainForceFeedbackFinished");
static_assert(offsetof(BFGEffectContainer_HandleSustainForceFeedbackFinished, _pComponent) == 0x000000, "Member 'BFGEffectContainer_HandleSustainForceFeedbackFinished::_pComponent' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.HandleSustainParticlesFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_HandleSustainParticlesFinished final
{
public:
	class UParticleSystemComponent*               _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_HandleSustainParticlesFinished) == 0x000008, "Wrong alignment on BFGEffectContainer_HandleSustainParticlesFinished");
static_assert(sizeof(BFGEffectContainer_HandleSustainParticlesFinished) == 0x000008, "Wrong size on BFGEffectContainer_HandleSustainParticlesFinished");
static_assert(offsetof(BFGEffectContainer_HandleSustainParticlesFinished, _pComponent) == 0x000000, "Member 'BFGEffectContainer_HandleSustainParticlesFinished::_pComponent' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.GetAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_GetAudioComponent final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_GetAudioComponent) == 0x000008, "Wrong alignment on BFGEffectContainer_GetAudioComponent");
static_assert(sizeof(BFGEffectContainer_GetAudioComponent) == 0x000008, "Wrong size on BFGEffectContainer_GetAudioComponent");
static_assert(offsetof(BFGEffectContainer_GetAudioComponent, ReturnValue) == 0x000000, "Member 'BFGEffectContainer_GetAudioComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.GetParticleComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_GetParticleComponent final
{
public:
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_GetParticleComponent) == 0x000008, "Wrong alignment on BFGEffectContainer_GetParticleComponent");
static_assert(sizeof(BFGEffectContainer_GetParticleComponent) == 0x000008, "Wrong size on BFGEffectContainer_GetParticleComponent");
static_assert(offsetof(BFGEffectContainer_GetParticleComponent, ReturnValue) == 0x000000, "Member 'BFGEffectContainer_GetParticleComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.GetReleaseAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_GetReleaseAudioComponent final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_GetReleaseAudioComponent) == 0x000008, "Wrong alignment on BFGEffectContainer_GetReleaseAudioComponent");
static_assert(sizeof(BFGEffectContainer_GetReleaseAudioComponent) == 0x000008, "Wrong size on BFGEffectContainer_GetReleaseAudioComponent");
static_assert(offsetof(BFGEffectContainer_GetReleaseAudioComponent, ReturnValue) == 0x000000, "Member 'BFGEffectContainer_GetReleaseAudioComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.GetReleaseParticleComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_GetReleaseParticleComponent final
{
public:
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_GetReleaseParticleComponent) == 0x000008, "Wrong alignment on BFGEffectContainer_GetReleaseParticleComponent");
static_assert(sizeof(BFGEffectContainer_GetReleaseParticleComponent) == 0x000008, "Wrong size on BFGEffectContainer_GetReleaseParticleComponent");
static_assert(offsetof(BFGEffectContainer_GetReleaseParticleComponent, ReturnValue) == 0x000000, "Member 'BFGEffectContainer_GetReleaseParticleComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.GetSpawnedActor
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_GetSpawnedActor final
{
public:
	class ABFGEffectActor*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_GetSpawnedActor) == 0x000008, "Wrong alignment on BFGEffectContainer_GetSpawnedActor");
static_assert(sizeof(BFGEffectContainer_GetSpawnedActor) == 0x000008, "Wrong size on BFGEffectContainer_GetSpawnedActor");
static_assert(offsetof(BFGEffectContainer_GetSpawnedActor, ReturnValue) == 0x000000, "Member 'BFGEffectContainer_GetSpawnedActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.GetSustainAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_GetSustainAudioComponent final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_GetSustainAudioComponent) == 0x000008, "Wrong alignment on BFGEffectContainer_GetSustainAudioComponent");
static_assert(sizeof(BFGEffectContainer_GetSustainAudioComponent) == 0x000008, "Wrong size on BFGEffectContainer_GetSustainAudioComponent");
static_assert(offsetof(BFGEffectContainer_GetSustainAudioComponent, ReturnValue) == 0x000000, "Member 'BFGEffectContainer_GetSustainAudioComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectContainer.GetSustainParticleComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectContainer_GetSustainParticleComponent final
{
public:
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectContainer_GetSustainParticleComponent) == 0x000008, "Wrong alignment on BFGEffectContainer_GetSustainParticleComponent");
static_assert(sizeof(BFGEffectContainer_GetSustainParticleComponent) == 0x000008, "Wrong size on BFGEffectContainer_GetSustainParticleComponent");
static_assert(offsetof(BFGEffectContainer_GetSustainParticleComponent, ReturnValue) == 0x000000, "Member 'BFGEffectContainer_GetSustainParticleComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleActorChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectObject_HandleActorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _iValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleActorChanged) == 0x000008, "Wrong alignment on BFGEffectObject_HandleActorChanged");
static_assert(sizeof(BFGEffectObject_HandleActorChanged) == 0x000010, "Wrong size on BFGEffectObject_HandleActorChanged");
static_assert(offsetof(BFGEffectObject_HandleActorChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleActorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleActorChanged, _iValue) == 0x000008, "Member 'BFGEffectObject_HandleActorChanged::_iValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleBoolChanged
// 0x000C (0x000C - 0x0000)
struct BFGEffectObject_HandleBoolChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEffectObject_HandleBoolChanged) == 0x000004, "Wrong alignment on BFGEffectObject_HandleBoolChanged");
static_assert(sizeof(BFGEffectObject_HandleBoolChanged) == 0x00000C, "Wrong size on BFGEffectObject_HandleBoolChanged");
static_assert(offsetof(BFGEffectObject_HandleBoolChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleBoolChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleBoolChanged, _bValue) == 0x000008, "Member 'BFGEffectObject_HandleBoolChanged::_bValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleColorChanged
// 0x000C (0x000C - 0x0000)
struct BFGEffectObject_HandleColorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 _rValue;                                           // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleColorChanged) == 0x000004, "Wrong alignment on BFGEffectObject_HandleColorChanged");
static_assert(sizeof(BFGEffectObject_HandleColorChanged) == 0x00000C, "Wrong size on BFGEffectObject_HandleColorChanged");
static_assert(offsetof(BFGEffectObject_HandleColorChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleColorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleColorChanged, _rValue) == 0x000008, "Member 'BFGEffectObject_HandleColorChanged::_rValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleDataTableChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectObject_HandleDataTableChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _pValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleDataTableChanged) == 0x000008, "Wrong alignment on BFGEffectObject_HandleDataTableChanged");
static_assert(sizeof(BFGEffectObject_HandleDataTableChanged) == 0x000010, "Wrong size on BFGEffectObject_HandleDataTableChanged");
static_assert(offsetof(BFGEffectObject_HandleDataTableChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleDataTableChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleDataTableChanged, _pValue) == 0x000008, "Member 'BFGEffectObject_HandleDataTableChanged::_pValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleFloatChanged
// 0x000C (0x000C - 0x0000)
struct BFGEffectObject_HandleFloatChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleFloatChanged) == 0x000004, "Wrong alignment on BFGEffectObject_HandleFloatChanged");
static_assert(sizeof(BFGEffectObject_HandleFloatChanged) == 0x00000C, "Wrong size on BFGEffectObject_HandleFloatChanged");
static_assert(offsetof(BFGEffectObject_HandleFloatChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleFloatChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleFloatChanged, _fValue) == 0x000008, "Member 'BFGEffectObject_HandleFloatChanged::_fValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleIntChanged
// 0x000C (0x000C - 0x0000)
struct BFGEffectObject_HandleIntChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleIntChanged) == 0x000004, "Wrong alignment on BFGEffectObject_HandleIntChanged");
static_assert(sizeof(BFGEffectObject_HandleIntChanged) == 0x00000C, "Wrong size on BFGEffectObject_HandleIntChanged");
static_assert(offsetof(BFGEffectObject_HandleIntChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleIntChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleIntChanged, _iValue) == 0x000008, "Member 'BFGEffectObject_HandleIntChanged::_iValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleNameChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectObject_HandleNameChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _iValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleNameChanged) == 0x000004, "Wrong alignment on BFGEffectObject_HandleNameChanged");
static_assert(sizeof(BFGEffectObject_HandleNameChanged) == 0x000010, "Wrong size on BFGEffectObject_HandleNameChanged");
static_assert(offsetof(BFGEffectObject_HandleNameChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleNameChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleNameChanged, _iValue) == 0x000008, "Member 'BFGEffectObject_HandleNameChanged::_iValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleObjectChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEffectObject_HandleObjectChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _pValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleObjectChanged) == 0x000008, "Wrong alignment on BFGEffectObject_HandleObjectChanged");
static_assert(sizeof(BFGEffectObject_HandleObjectChanged) == 0x000010, "Wrong size on BFGEffectObject_HandleObjectChanged");
static_assert(offsetof(BFGEffectObject_HandleObjectChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleObjectChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleObjectChanged, _pValue) == 0x000008, "Member 'BFGEffectObject_HandleObjectChanged::_pValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleRotatorChanged
// 0x0014 (0x0014 - 0x0000)
struct BFGEffectObject_HandleRotatorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleRotatorChanged) == 0x000004, "Wrong alignment on BFGEffectObject_HandleRotatorChanged");
static_assert(sizeof(BFGEffectObject_HandleRotatorChanged) == 0x000014, "Wrong size on BFGEffectObject_HandleRotatorChanged");
static_assert(offsetof(BFGEffectObject_HandleRotatorChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleRotatorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleRotatorChanged, _rValue) == 0x000008, "Member 'BFGEffectObject_HandleRotatorChanged::_rValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.HandleVectorChanged
// 0x0014 (0x0014 - 0x0000)
struct BFGEffectObject_HandleVectorChanged final
{
public:
	class FName                                   _rName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_HandleVectorChanged) == 0x000004, "Wrong alignment on BFGEffectObject_HandleVectorChanged");
static_assert(sizeof(BFGEffectObject_HandleVectorChanged) == 0x000014, "Wrong size on BFGEffectObject_HandleVectorChanged");
static_assert(offsetof(BFGEffectObject_HandleVectorChanged, _rName) == 0x000000, "Member 'BFGEffectObject_HandleVectorChanged::_rName' has a wrong offset!");
static_assert(offsetof(BFGEffectObject_HandleVectorChanged, _rValue) == 0x000008, "Member 'BFGEffectObject_HandleVectorChanged::_rValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.IsEffectActive
// 0x0001 (0x0001 - 0x0000)
struct BFGEffectObject_IsEffectActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_IsEffectActive) == 0x000001, "Wrong alignment on BFGEffectObject_IsEffectActive");
static_assert(sizeof(BFGEffectObject_IsEffectActive) == 0x000001, "Wrong size on BFGEffectObject_IsEffectActive");
static_assert(offsetof(BFGEffectObject_IsEffectActive, ReturnValue) == 0x000000, "Member 'BFGEffectObject_IsEffectActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.SetBlackboard
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectObject_SetBlackboard final
{
public:
	class UBFGEffectBlackboard*                   _pBlackboard;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_SetBlackboard) == 0x000008, "Wrong alignment on BFGEffectObject_SetBlackboard");
static_assert(sizeof(BFGEffectObject_SetBlackboard) == 0x000008, "Wrong size on BFGEffectObject_SetBlackboard");
static_assert(offsetof(BFGEffectObject_SetBlackboard, _pBlackboard) == 0x000000, "Member 'BFGEffectObject_SetBlackboard::_pBlackboard' has a wrong offset!");

// Function BFGCore.BFGEffectObject.GetBlackboard
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectObject_GetBlackboard final
{
public:
	class UBFGEffectBlackboard*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_GetBlackboard) == 0x000008, "Wrong alignment on BFGEffectObject_GetBlackboard");
static_assert(sizeof(BFGEffectObject_GetBlackboard) == 0x000008, "Wrong size on BFGEffectObject_GetBlackboard");
static_assert(offsetof(BFGEffectObject_GetBlackboard, ReturnValue) == 0x000000, "Member 'BFGEffectObject_GetBlackboard::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffectObject.GetEffectComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGEffectObject_GetEffectComponent final
{
public:
	class UBFGActorComponent_Effect*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffectObject_GetEffectComponent) == 0x000008, "Wrong alignment on BFGEffectObject_GetEffectComponent");
static_assert(sizeof(BFGEffectObject_GetEffectComponent) == 0x000008, "Wrong size on BFGEffectObject_GetEffectComponent");
static_assert(offsetof(BFGEffectObject_GetEffectComponent, ReturnValue) == 0x000000, "Member 'BFGEffectObject_GetEffectComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffects.GetNextCameraMaskForPK
// 0x0001 (0x0001 - 0x0000)
struct BFGEffects_GetNextCameraMaskForPK final
{
public:
	EBFGLightweightCamera                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffects_GetNextCameraMaskForPK) == 0x000001, "Wrong alignment on BFGEffects_GetNextCameraMaskForPK");
static_assert(sizeof(BFGEffects_GetNextCameraMaskForPK) == 0x000001, "Wrong size on BFGEffects_GetNextCameraMaskForPK");
static_assert(offsetof(BFGEffects_GetNextCameraMaskForPK, ReturnValue) == 0x000000, "Member 'BFGEffects_GetNextCameraMaskForPK::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEffects.GetScrambledTextForFurocom
// 0x0028 (0x0028 - 0x0000)
struct BFGEffects_GetScrambledTextForFurocom final
{
public:
	class FString                                 _strInputText;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fScrambleRatio;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEffects_GetScrambledTextForFurocom) == 0x000008, "Wrong alignment on BFGEffects_GetScrambledTextForFurocom");
static_assert(sizeof(BFGEffects_GetScrambledTextForFurocom) == 0x000028, "Wrong size on BFGEffects_GetScrambledTextForFurocom");
static_assert(offsetof(BFGEffects_GetScrambledTextForFurocom, _strInputText) == 0x000000, "Member 'BFGEffects_GetScrambledTextForFurocom::_strInputText' has a wrong offset!");
static_assert(offsetof(BFGEffects_GetScrambledTextForFurocom, _fScrambleRatio) == 0x000010, "Member 'BFGEffects_GetScrambledTextForFurocom::_fScrambleRatio' has a wrong offset!");
static_assert(offsetof(BFGEffects_GetScrambledTextForFurocom, ReturnValue) == 0x000018, "Member 'BFGEffects_GetScrambledTextForFurocom::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_VoiceoverQueueChanged.OnItemEvent
// 0x00B0 (0x00B0 - 0x0000)
struct BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent final
{
public:
	struct FBFGVoiceoverItem                      _item;                                             // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBFGVoiceoverItemEventType                    _type;                                             // 0x00A8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent) == 0x000008, "Wrong alignment on BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent");
static_assert(sizeof(BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent) == 0x0000B0, "Wrong size on BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent");
static_assert(offsetof(BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent, _item) == 0x000000, "Member 'BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent::_item' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent, _type) == 0x0000A8, "Member 'BFGEventTrigger_VoiceoverQueueChanged_OnItemEvent::_type' has a wrong offset!");

// Function BFGCore.BFGEnvironment.GetTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct BFGEnvironment_GetTimeOfDay final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEnvironment_GetTimeOfDay) == 0x000004, "Wrong alignment on BFGEnvironment_GetTimeOfDay");
static_assert(sizeof(BFGEnvironment_GetTimeOfDay) == 0x000008, "Wrong size on BFGEnvironment_GetTimeOfDay");
static_assert(offsetof(BFGEnvironment_GetTimeOfDay, ReturnValue) == 0x000000, "Member 'BFGEnvironment_GetTimeOfDay::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEnvironmentSystem.OnWorldLoaded
// 0x0010 (0x0010 - 0x0000)
struct BFGEnvironmentSystem_OnWorldLoaded final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEnvironmentSystem_OnWorldLoaded) == 0x000008, "Wrong alignment on BFGEnvironmentSystem_OnWorldLoaded");
static_assert(sizeof(BFGEnvironmentSystem_OnWorldLoaded) == 0x000010, "Wrong size on BFGEnvironmentSystem_OnWorldLoaded");
static_assert(offsetof(BFGEnvironmentSystem_OnWorldLoaded, _pGameInstance) == 0x000000, "Member 'BFGEnvironmentSystem_OnWorldLoaded::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGEnvironmentSystem_OnWorldLoaded, _pWorld) == 0x000008, "Member 'BFGEnvironmentSystem_OnWorldLoaded::_pWorld' has a wrong offset!");

// Function BFGCore.BFGEnvironmentSystem.SetNextEnvironment
// 0x0008 (0x0008 - 0x0000)
struct BFGEnvironmentSystem_SetNextEnvironment final
{
public:
	class UBFGEnvironment*                        _pEnvironment;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEnvironmentSystem_SetNextEnvironment) == 0x000008, "Wrong alignment on BFGEnvironmentSystem_SetNextEnvironment");
static_assert(sizeof(BFGEnvironmentSystem_SetNextEnvironment) == 0x000008, "Wrong size on BFGEnvironmentSystem_SetNextEnvironment");
static_assert(offsetof(BFGEnvironmentSystem_SetNextEnvironment, _pEnvironment) == 0x000000, "Member 'BFGEnvironmentSystem_SetNextEnvironment::_pEnvironment' has a wrong offset!");

// Function BFGCore.BFGEnvironmentSystem.SetNextEnvironmentSoft
// 0x0030 (0x0030 - 0x0000)
struct BFGEnvironmentSystem_SetNextEnvironmentSoft final
{
public:
	TSoftObjectPtr<class UBFGEnvironment>         _softEnvironment;                                  // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEnvironmentSystem_SetNextEnvironmentSoft) == 0x000008, "Wrong alignment on BFGEnvironmentSystem_SetNextEnvironmentSoft");
static_assert(sizeof(BFGEnvironmentSystem_SetNextEnvironmentSoft) == 0x000030, "Wrong size on BFGEnvironmentSystem_SetNextEnvironmentSoft");
static_assert(offsetof(BFGEnvironmentSystem_SetNextEnvironmentSoft, _softEnvironment) == 0x000000, "Member 'BFGEnvironmentSystem_SetNextEnvironmentSoft::_softEnvironment' has a wrong offset!");
static_assert(offsetof(BFGEnvironmentSystem_SetNextEnvironmentSoft, ReturnValue) == 0x000028, "Member 'BFGEnvironmentSystem_SetNextEnvironmentSoft::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.ApplyAndReportDamage
// 0x0028 (0x0028 - 0x0000)
struct BFGSystem_ApplyAndReportDamage final
{
public:
	class AActor*                                 _pDamagedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _pInstigator;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pDamageSource;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                _damageType;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_ApplyAndReportDamage) == 0x000008, "Wrong alignment on BFGSystem_ApplyAndReportDamage");
static_assert(sizeof(BFGSystem_ApplyAndReportDamage) == 0x000028, "Wrong size on BFGSystem_ApplyAndReportDamage");
static_assert(offsetof(BFGSystem_ApplyAndReportDamage, _pDamagedActor) == 0x000000, "Member 'BFGSystem_ApplyAndReportDamage::_pDamagedActor' has a wrong offset!");
static_assert(offsetof(BFGSystem_ApplyAndReportDamage, _fDamage) == 0x000008, "Member 'BFGSystem_ApplyAndReportDamage::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGSystem_ApplyAndReportDamage, _pInstigator) == 0x000010, "Member 'BFGSystem_ApplyAndReportDamage::_pInstigator' has a wrong offset!");
static_assert(offsetof(BFGSystem_ApplyAndReportDamage, _pDamageSource) == 0x000018, "Member 'BFGSystem_ApplyAndReportDamage::_pDamageSource' has a wrong offset!");
static_assert(offsetof(BFGSystem_ApplyAndReportDamage, _damageType) == 0x000020, "Member 'BFGSystem_ApplyAndReportDamage::_damageType' has a wrong offset!");

// Function BFGCore.BFGSystem.CastObjectToClass
// 0x0018 (0x0018 - 0x0000)
struct BFGSystem_CastObjectToClass final
{
public:
	class UObject*                                _pObjectToCast;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_CastObjectToClass) == 0x000008, "Wrong alignment on BFGSystem_CastObjectToClass");
static_assert(sizeof(BFGSystem_CastObjectToClass) == 0x000018, "Wrong size on BFGSystem_CastObjectToClass");
static_assert(offsetof(BFGSystem_CastObjectToClass, _pObjectToCast) == 0x000000, "Member 'BFGSystem_CastObjectToClass::_pObjectToCast' has a wrong offset!");
static_assert(offsetof(BFGSystem_CastObjectToClass, Class_0) == 0x000008, "Member 'BFGSystem_CastObjectToClass::Class_0' has a wrong offset!");
static_assert(offsetof(BFGSystem_CastObjectToClass, ReturnValue) == 0x000010, "Member 'BFGSystem_CastObjectToClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.ClipboardCopy
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_ClipboardCopy final
{
public:
	class FString                                 _strCopy;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_ClipboardCopy) == 0x000008, "Wrong alignment on BFGSystem_ClipboardCopy");
static_assert(sizeof(BFGSystem_ClipboardCopy) == 0x000010, "Wrong size on BFGSystem_ClipboardCopy");
static_assert(offsetof(BFGSystem_ClipboardCopy, _strCopy) == 0x000000, "Member 'BFGSystem_ClipboardCopy::_strCopy' has a wrong offset!");

// Function BFGCore.BFGSystem.ClipboardPaste
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_ClipboardPaste final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_ClipboardPaste) == 0x000008, "Wrong alignment on BFGSystem_ClipboardPaste");
static_assert(sizeof(BFGSystem_ClipboardPaste) == 0x000010, "Wrong size on BFGSystem_ClipboardPaste");
static_assert(offsetof(BFGSystem_ClipboardPaste, ReturnValue) == 0x000000, "Member 'BFGSystem_ClipboardPaste::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.ComputeDebugColor
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_ComputeDebugColor final
{
public:
	const class UObject*                          _pObject;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystem_ComputeDebugColor) == 0x000008, "Wrong alignment on BFGSystem_ComputeDebugColor");
static_assert(sizeof(BFGSystem_ComputeDebugColor) == 0x000010, "Wrong size on BFGSystem_ComputeDebugColor");
static_assert(offsetof(BFGSystem_ComputeDebugColor, _pObject) == 0x000000, "Member 'BFGSystem_ComputeDebugColor::_pObject' has a wrong offset!");
static_assert(offsetof(BFGSystem_ComputeDebugColor, ReturnValue) == 0x000008, "Member 'BFGSystem_ComputeDebugColor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.DumpObjectToString
// 0x0020 (0x0020 - 0x0000)
struct BFGSystem_DumpObjectToString final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRecurse;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_DumpObjectToString) == 0x000008, "Wrong alignment on BFGSystem_DumpObjectToString");
static_assert(sizeof(BFGSystem_DumpObjectToString) == 0x000020, "Wrong size on BFGSystem_DumpObjectToString");
static_assert(offsetof(BFGSystem_DumpObjectToString, _pObject) == 0x000000, "Member 'BFGSystem_DumpObjectToString::_pObject' has a wrong offset!");
static_assert(offsetof(BFGSystem_DumpObjectToString, _bRecurse) == 0x000008, "Member 'BFGSystem_DumpObjectToString::_bRecurse' has a wrong offset!");
static_assert(offsetof(BFGSystem_DumpObjectToString, ReturnValue) == 0x000010, "Member 'BFGSystem_DumpObjectToString::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetClassDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_GetClassDefaultObject final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetClassDefaultObject) == 0x000008, "Wrong alignment on BFGSystem_GetClassDefaultObject");
static_assert(sizeof(BFGSystem_GetClassDefaultObject) == 0x000010, "Wrong size on BFGSystem_GetClassDefaultObject");
static_assert(offsetof(BFGSystem_GetClassDefaultObject, Class_0) == 0x000000, "Member 'BFGSystem_GetClassDefaultObject::Class_0' has a wrong offset!");
static_assert(offsetof(BFGSystem_GetClassDefaultObject, ReturnValue) == 0x000008, "Member 'BFGSystem_GetClassDefaultObject::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetConsoleInt
// 0x0018 (0x0018 - 0x0000)
struct BFGSystem_GetConsoleInt final
{
public:
	class FString                                 _strVariableName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystem_GetConsoleInt) == 0x000008, "Wrong alignment on BFGSystem_GetConsoleInt");
static_assert(sizeof(BFGSystem_GetConsoleInt) == 0x000018, "Wrong size on BFGSystem_GetConsoleInt");
static_assert(offsetof(BFGSystem_GetConsoleInt, _strVariableName) == 0x000000, "Member 'BFGSystem_GetConsoleInt::_strVariableName' has a wrong offset!");
static_assert(offsetof(BFGSystem_GetConsoleInt, ReturnValue) == 0x000010, "Member 'BFGSystem_GetConsoleInt::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetCurrentLanguage
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_GetCurrentLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetCurrentLanguage) == 0x000008, "Wrong alignment on BFGSystem_GetCurrentLanguage");
static_assert(sizeof(BFGSystem_GetCurrentLanguage) == 0x000010, "Wrong size on BFGSystem_GetCurrentLanguage");
static_assert(offsetof(BFGSystem_GetCurrentLanguage, ReturnValue) == 0x000000, "Member 'BFGSystem_GetCurrentLanguage::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetDefaultLanguage
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_GetDefaultLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetDefaultLanguage) == 0x000008, "Wrong alignment on BFGSystem_GetDefaultLanguage");
static_assert(sizeof(BFGSystem_GetDefaultLanguage) == 0x000010, "Wrong size on BFGSystem_GetDefaultLanguage");
static_assert(offsetof(BFGSystem_GetDefaultLanguage, ReturnValue) == 0x000000, "Member 'BFGSystem_GetDefaultLanguage::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetDemoPlayTime
// 0x0004 (0x0004 - 0x0000)
struct BFGSystem_GetDemoPlayTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetDemoPlayTime) == 0x000004, "Wrong alignment on BFGSystem_GetDemoPlayTime");
static_assert(sizeof(BFGSystem_GetDemoPlayTime) == 0x000004, "Wrong size on BFGSystem_GetDemoPlayTime");
static_assert(offsetof(BFGSystem_GetDemoPlayTime, ReturnValue) == 0x000000, "Member 'BFGSystem_GetDemoPlayTime::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetGameIniInt
// 0x0018 (0x0018 - 0x0000)
struct BFGSystem_GetGameIniInt final
{
public:
	class FString                                 _strName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystem_GetGameIniInt) == 0x000008, "Wrong alignment on BFGSystem_GetGameIniInt");
static_assert(sizeof(BFGSystem_GetGameIniInt) == 0x000018, "Wrong size on BFGSystem_GetGameIniInt");
static_assert(offsetof(BFGSystem_GetGameIniInt, _strName) == 0x000000, "Member 'BFGSystem_GetGameIniInt::_strName' has a wrong offset!");
static_assert(offsetof(BFGSystem_GetGameIniInt, ReturnValue) == 0x000010, "Member 'BFGSystem_GetGameIniInt::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetMemoryLocationAsString
// 0x0018 (0x0018 - 0x0000)
struct BFGSystem_GetMemoryLocationAsString final
{
public:
	const class UObject*                          _pObject;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetMemoryLocationAsString) == 0x000008, "Wrong alignment on BFGSystem_GetMemoryLocationAsString");
static_assert(sizeof(BFGSystem_GetMemoryLocationAsString) == 0x000018, "Wrong size on BFGSystem_GetMemoryLocationAsString");
static_assert(offsetof(BFGSystem_GetMemoryLocationAsString, _pObject) == 0x000000, "Member 'BFGSystem_GetMemoryLocationAsString::_pObject' has a wrong offset!");
static_assert(offsetof(BFGSystem_GetMemoryLocationAsString, ReturnValue) == 0x000008, "Member 'BFGSystem_GetMemoryLocationAsString::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetObjectsSlow
// 0x0028 (0x0028 - 0x0000)
struct BFGSystem_GetObjectsSlow final
{
public:
	class UClass*                                 _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _strPath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetObjectsSlow) == 0x000008, "Wrong alignment on BFGSystem_GetObjectsSlow");
static_assert(sizeof(BFGSystem_GetObjectsSlow) == 0x000028, "Wrong size on BFGSystem_GetObjectsSlow");
static_assert(offsetof(BFGSystem_GetObjectsSlow, _pClass) == 0x000000, "Member 'BFGSystem_GetObjectsSlow::_pClass' has a wrong offset!");
static_assert(offsetof(BFGSystem_GetObjectsSlow, _strPath) == 0x000008, "Member 'BFGSystem_GetObjectsSlow::_strPath' has a wrong offset!");
static_assert(offsetof(BFGSystem_GetObjectsSlow, ReturnValue) == 0x000018, "Member 'BFGSystem_GetObjectsSlow::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetRole
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_GetRole final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRole                                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystem_GetRole) == 0x000008, "Wrong alignment on BFGSystem_GetRole");
static_assert(sizeof(BFGSystem_GetRole) == 0x000010, "Wrong size on BFGSystem_GetRole");
static_assert(offsetof(BFGSystem_GetRole, _pActor) == 0x000000, "Member 'BFGSystem_GetRole::_pActor' has a wrong offset!");
static_assert(offsetof(BFGSystem_GetRole, ReturnValue) == 0x000008, "Member 'BFGSystem_GetRole::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetSubclassesSlow
// 0x0018 (0x0018 - 0x0000)
struct BFGSystem_GetSubclassesSlow final
{
public:
	class UClass*                                 _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetSubclassesSlow) == 0x000008, "Wrong alignment on BFGSystem_GetSubclassesSlow");
static_assert(sizeof(BFGSystem_GetSubclassesSlow) == 0x000018, "Wrong size on BFGSystem_GetSubclassesSlow");
static_assert(offsetof(BFGSystem_GetSubclassesSlow, _pClass) == 0x000000, "Member 'BFGSystem_GetSubclassesSlow::_pClass' has a wrong offset!");
static_assert(offsetof(BFGSystem_GetSubclassesSlow, ReturnValue) == 0x000008, "Member 'BFGSystem_GetSubclassesSlow::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetVersionString
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_GetVersionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetVersionString) == 0x000008, "Wrong alignment on BFGSystem_GetVersionString");
static_assert(sizeof(BFGSystem_GetVersionString) == 0x000010, "Wrong size on BFGSystem_GetVersionString");
static_assert(offsetof(BFGSystem_GetVersionString, ReturnValue) == 0x000000, "Member 'BFGSystem_GetVersionString::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.GetWorldType
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_GetWorldType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_GetWorldType) == 0x000008, "Wrong alignment on BFGSystem_GetWorldType");
static_assert(sizeof(BFGSystem_GetWorldType) == 0x000010, "Wrong size on BFGSystem_GetWorldType");
static_assert(offsetof(BFGSystem_GetWorldType, ReturnValue) == 0x000000, "Member 'BFGSystem_GetWorldType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.IncreaseStatistic
// 0x0008 (0x0008 - 0x0000)
struct BFGSystem_IncreaseStatistic final
{
public:
	EBFGGameStatistic                             _eGameStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fAmount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_IncreaseStatistic) == 0x000004, "Wrong alignment on BFGSystem_IncreaseStatistic");
static_assert(sizeof(BFGSystem_IncreaseStatistic) == 0x000008, "Wrong size on BFGSystem_IncreaseStatistic");
static_assert(offsetof(BFGSystem_IncreaseStatistic, _eGameStat) == 0x000000, "Member 'BFGSystem_IncreaseStatistic::_eGameStat' has a wrong offset!");
static_assert(offsetof(BFGSystem_IncreaseStatistic, _fAmount) == 0x000004, "Member 'BFGSystem_IncreaseStatistic::_fAmount' has a wrong offset!");

// Function BFGCore.BFGSystem.IsEditor
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_IsEditor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystem_IsEditor) == 0x000008, "Wrong alignment on BFGSystem_IsEditor");
static_assert(sizeof(BFGSystem_IsEditor) == 0x000010, "Wrong size on BFGSystem_IsEditor");
static_assert(offsetof(BFGSystem_IsEditor, _pActor) == 0x000000, "Member 'BFGSystem_IsEditor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGSystem_IsEditor, ReturnValue) == 0x000008, "Member 'BFGSystem_IsEditor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.IsObjectPendingKill
// 0x0010 (0x0010 - 0x0000)
struct BFGSystem_IsObjectPendingKill final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystem_IsObjectPendingKill) == 0x000008, "Wrong alignment on BFGSystem_IsObjectPendingKill");
static_assert(sizeof(BFGSystem_IsObjectPendingKill) == 0x000010, "Wrong size on BFGSystem_IsObjectPendingKill");
static_assert(offsetof(BFGSystem_IsObjectPendingKill, _pObject) == 0x000000, "Member 'BFGSystem_IsObjectPendingKill::_pObject' has a wrong offset!");
static_assert(offsetof(BFGSystem_IsObjectPendingKill, ReturnValue) == 0x000008, "Member 'BFGSystem_IsObjectPendingKill::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.IsPublicDemoVersion
// 0x0001 (0x0001 - 0x0000)
struct BFGSystem_IsPublicDemoVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_IsPublicDemoVersion) == 0x000001, "Wrong alignment on BFGSystem_IsPublicDemoVersion");
static_assert(sizeof(BFGSystem_IsPublicDemoVersion) == 0x000001, "Wrong size on BFGSystem_IsPublicDemoVersion");
static_assert(offsetof(BFGSystem_IsPublicDemoVersion, ReturnValue) == 0x000000, "Member 'BFGSystem_IsPublicDemoVersion::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.IsShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct BFGSystem_IsShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_IsShippingBuild) == 0x000001, "Wrong alignment on BFGSystem_IsShippingBuild");
static_assert(sizeof(BFGSystem_IsShippingBuild) == 0x000001, "Wrong size on BFGSystem_IsShippingBuild");
static_assert(offsetof(BFGSystem_IsShippingBuild, ReturnValue) == 0x000000, "Member 'BFGSystem_IsShippingBuild::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.IsShippingCustomerBuild
// 0x0001 (0x0001 - 0x0000)
struct BFGSystem_IsShippingCustomerBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_IsShippingCustomerBuild) == 0x000001, "Wrong alignment on BFGSystem_IsShippingCustomerBuild");
static_assert(sizeof(BFGSystem_IsShippingCustomerBuild) == 0x000001, "Wrong size on BFGSystem_IsShippingCustomerBuild");
static_assert(offsetof(BFGSystem_IsShippingCustomerBuild, ReturnValue) == 0x000000, "Member 'BFGSystem_IsShippingCustomerBuild::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.IsStandalone
// 0x0001 (0x0001 - 0x0000)
struct BFGSystem_IsStandalone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_IsStandalone) == 0x000001, "Wrong alignment on BFGSystem_IsStandalone");
static_assert(sizeof(BFGSystem_IsStandalone) == 0x000001, "Wrong size on BFGSystem_IsStandalone");
static_assert(offsetof(BFGSystem_IsStandalone, ReturnValue) == 0x000000, "Member 'BFGSystem_IsStandalone::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.IsWithEditorPreprocessor
// 0x0001 (0x0001 - 0x0000)
struct BFGSystem_IsWithEditorPreprocessor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_IsWithEditorPreprocessor) == 0x000001, "Wrong alignment on BFGSystem_IsWithEditorPreprocessor");
static_assert(sizeof(BFGSystem_IsWithEditorPreprocessor) == 0x000001, "Wrong size on BFGSystem_IsWithEditorPreprocessor");
static_assert(offsetof(BFGSystem_IsWithEditorPreprocessor, ReturnValue) == 0x000000, "Member 'BFGSystem_IsWithEditorPreprocessor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.SetCurrentCulture
// 0x0018 (0x0018 - 0x0000)
struct BFGSystem_SetCurrentCulture final
{
public:
	class FString                                 _cultureName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystem_SetCurrentCulture) == 0x000008, "Wrong alignment on BFGSystem_SetCurrentCulture");
static_assert(sizeof(BFGSystem_SetCurrentCulture) == 0x000018, "Wrong size on BFGSystem_SetCurrentCulture");
static_assert(offsetof(BFGSystem_SetCurrentCulture, _cultureName) == 0x000000, "Member 'BFGSystem_SetCurrentCulture::_cultureName' has a wrong offset!");
static_assert(offsetof(BFGSystem_SetCurrentCulture, ReturnValue) == 0x000010, "Member 'BFGSystem_SetCurrentCulture::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.SetFixedTimeStep
// 0x0008 (0x0008 - 0x0000)
struct BFGSystem_SetFixedTimeStep final
{
public:
	bool                                          _bFixedStep;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fFixedStepInSeconds;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_SetFixedTimeStep) == 0x000004, "Wrong alignment on BFGSystem_SetFixedTimeStep");
static_assert(sizeof(BFGSystem_SetFixedTimeStep) == 0x000008, "Wrong size on BFGSystem_SetFixedTimeStep");
static_assert(offsetof(BFGSystem_SetFixedTimeStep, _bFixedStep) == 0x000000, "Member 'BFGSystem_SetFixedTimeStep::_bFixedStep' has a wrong offset!");
static_assert(offsetof(BFGSystem_SetFixedTimeStep, _fFixedStepInSeconds) == 0x000004, "Member 'BFGSystem_SetFixedTimeStep::_fFixedStepInSeconds' has a wrong offset!");

// Function BFGCore.BFGSystem.SetGameIniIntOverride
// 0x0018 (0x0018 - 0x0000)
struct BFGSystem_SetGameIniIntOverride final
{
public:
	class FString                                 _strName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystem_SetGameIniIntOverride) == 0x000008, "Wrong alignment on BFGSystem_SetGameIniIntOverride");
static_assert(sizeof(BFGSystem_SetGameIniIntOverride) == 0x000018, "Wrong size on BFGSystem_SetGameIniIntOverride");
static_assert(offsetof(BFGSystem_SetGameIniIntOverride, _strName) == 0x000000, "Member 'BFGSystem_SetGameIniIntOverride::_strName' has a wrong offset!");
static_assert(offsetof(BFGSystem_SetGameIniIntOverride, _iValue) == 0x000010, "Member 'BFGSystem_SetGameIniIntOverride::_iValue' has a wrong offset!");

// Function BFGCore.BFGSystem.ShouldShowUpsellButton
// 0x0001 (0x0001 - 0x0000)
struct BFGSystem_ShouldShowUpsellButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_ShouldShowUpsellButton) == 0x000001, "Wrong alignment on BFGSystem_ShouldShowUpsellButton");
static_assert(sizeof(BFGSystem_ShouldShowUpsellButton) == 0x000001, "Wrong size on BFGSystem_ShouldShowUpsellButton");
static_assert(offsetof(BFGSystem_ShouldShowUpsellButton, ReturnValue) == 0x000000, "Member 'BFGSystem_ShouldShowUpsellButton::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.SortActorArrayByName
// 0x0028 (0x0028 - 0x0000)
struct BFGSystem_SortActorArrayByName final
{
public:
	TArray<class AActor*>                         _aActorList;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          _bSortByParentName;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_SortActorArrayByName) == 0x000008, "Wrong alignment on BFGSystem_SortActorArrayByName");
static_assert(sizeof(BFGSystem_SortActorArrayByName) == 0x000028, "Wrong size on BFGSystem_SortActorArrayByName");
static_assert(offsetof(BFGSystem_SortActorArrayByName, _aActorList) == 0x000000, "Member 'BFGSystem_SortActorArrayByName::_aActorList' has a wrong offset!");
static_assert(offsetof(BFGSystem_SortActorArrayByName, _bSortByParentName) == 0x000010, "Member 'BFGSystem_SortActorArrayByName::_bSortByParentName' has a wrong offset!");
static_assert(offsetof(BFGSystem_SortActorArrayByName, ReturnValue) == 0x000018, "Member 'BFGSystem_SortActorArrayByName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystem.SpawnActorNoReplicate
// 0x0060 (0x0060 - 0x0000)
struct BFGSystem_SpawnActorNoReplicate final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             _Transform;                                        // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 _pOwner;                                           // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  _pInstigator;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            _collisionHandlingOverride;                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystem_SpawnActorNoReplicate) == 0x000010, "Wrong alignment on BFGSystem_SpawnActorNoReplicate");
static_assert(sizeof(BFGSystem_SpawnActorNoReplicate) == 0x000060, "Wrong size on BFGSystem_SpawnActorNoReplicate");
static_assert(offsetof(BFGSystem_SpawnActorNoReplicate, WorldContextObject) == 0x000000, "Member 'BFGSystem_SpawnActorNoReplicate::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGSystem_SpawnActorNoReplicate, ActorClass) == 0x000008, "Member 'BFGSystem_SpawnActorNoReplicate::ActorClass' has a wrong offset!");
static_assert(offsetof(BFGSystem_SpawnActorNoReplicate, _Transform) == 0x000010, "Member 'BFGSystem_SpawnActorNoReplicate::_Transform' has a wrong offset!");
static_assert(offsetof(BFGSystem_SpawnActorNoReplicate, _pOwner) == 0x000040, "Member 'BFGSystem_SpawnActorNoReplicate::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGSystem_SpawnActorNoReplicate, _pInstigator) == 0x000048, "Member 'BFGSystem_SpawnActorNoReplicate::_pInstigator' has a wrong offset!");
static_assert(offsetof(BFGSystem_SpawnActorNoReplicate, _collisionHandlingOverride) == 0x000050, "Member 'BFGSystem_SpawnActorNoReplicate::_collisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(BFGSystem_SpawnActorNoReplicate, ReturnValue) == 0x000058, "Member 'BFGSystem_SpawnActorNoReplicate::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.GetBrush
// 0x0088 (0x0088 - 0x0000)
struct BFGSpinningWidgetOption_GetBrush final
{
public:
	struct FSlateBrush                            _oBrush;                                           // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_GetBrush) == 0x000008, "Wrong alignment on BFGSpinningWidgetOption_GetBrush");
static_assert(sizeof(BFGSpinningWidgetOption_GetBrush) == 0x000088, "Wrong size on BFGSpinningWidgetOption_GetBrush");
static_assert(offsetof(BFGSpinningWidgetOption_GetBrush, _oBrush) == 0x000000, "Member 'BFGSpinningWidgetOption_GetBrush::_oBrush' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.GetHint
// 0x0018 (0x0018 - 0x0000)
struct BFGSpinningWidgetOption_GetHint final
{
public:
	class FText                                   _oHint;                                            // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_GetHint) == 0x000008, "Wrong alignment on BFGSpinningWidgetOption_GetHint");
static_assert(sizeof(BFGSpinningWidgetOption_GetHint) == 0x000018, "Wrong size on BFGSpinningWidgetOption_GetHint");
static_assert(offsetof(BFGSpinningWidgetOption_GetHint, _oHint) == 0x000000, "Member 'BFGSpinningWidgetOption_GetHint::_oHint' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.GetOptionSize
// 0x0008 (0x0008 - 0x0000)
struct BFGSpinningWidgetOption_GetOptionSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_GetOptionSize) == 0x000004, "Wrong alignment on BFGSpinningWidgetOption_GetOptionSize");
static_assert(sizeof(BFGSpinningWidgetOption_GetOptionSize) == 0x000008, "Wrong size on BFGSpinningWidgetOption_GetOptionSize");
static_assert(offsetof(BFGSpinningWidgetOption_GetOptionSize, ReturnValue) == 0x000000, "Member 'BFGSpinningWidgetOption_GetOptionSize::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGSpinningWidgetOption_GetTitle final
{
public:
	class FText                                   _oTitle;                                           // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_GetTitle) == 0x000008, "Wrong alignment on BFGSpinningWidgetOption_GetTitle");
static_assert(sizeof(BFGSpinningWidgetOption_GetTitle) == 0x000018, "Wrong size on BFGSpinningWidgetOption_GetTitle");
static_assert(offsetof(BFGSpinningWidgetOption_GetTitle, _oTitle) == 0x000000, "Member 'BFGSpinningWidgetOption_GetTitle::_oTitle' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.OnDisabled
// 0x0001 (0x0001 - 0x0000)
struct BFGSpinningWidgetOption_OnDisabled final
{
public:
	bool                                          _bDisabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_OnDisabled) == 0x000001, "Wrong alignment on BFGSpinningWidgetOption_OnDisabled");
static_assert(sizeof(BFGSpinningWidgetOption_OnDisabled) == 0x000001, "Wrong size on BFGSpinningWidgetOption_OnDisabled");
static_assert(offsetof(BFGSpinningWidgetOption_OnDisabled, _bDisabled) == 0x000000, "Member 'BFGSpinningWidgetOption_OnDisabled::_bDisabled' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct BFGSpinningWidgetOption_SetBrush final
{
public:
	struct FSlateBrush                            _oBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_SetBrush) == 0x000008, "Wrong alignment on BFGSpinningWidgetOption_SetBrush");
static_assert(sizeof(BFGSpinningWidgetOption_SetBrush) == 0x000088, "Wrong size on BFGSpinningWidgetOption_SetBrush");
static_assert(offsetof(BFGSpinningWidgetOption_SetBrush, _oBrush) == 0x000000, "Member 'BFGSpinningWidgetOption_SetBrush::_oBrush' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.SetHint
// 0x0018 (0x0018 - 0x0000)
struct BFGSpinningWidgetOption_SetHint final
{
public:
	class FText                                   _oHint;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_SetHint) == 0x000008, "Wrong alignment on BFGSpinningWidgetOption_SetHint");
static_assert(sizeof(BFGSpinningWidgetOption_SetHint) == 0x000018, "Wrong size on BFGSpinningWidgetOption_SetHint");
static_assert(offsetof(BFGSpinningWidgetOption_SetHint, _oHint) == 0x000000, "Member 'BFGSpinningWidgetOption_SetHint::_oHint' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.SetNotificationEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGSpinningWidgetOption_SetNotificationEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_SetNotificationEnabled) == 0x000001, "Wrong alignment on BFGSpinningWidgetOption_SetNotificationEnabled");
static_assert(sizeof(BFGSpinningWidgetOption_SetNotificationEnabled) == 0x000001, "Wrong size on BFGSpinningWidgetOption_SetNotificationEnabled");
static_assert(offsetof(BFGSpinningWidgetOption_SetNotificationEnabled, _bEnabled) == 0x000000, "Member 'BFGSpinningWidgetOption_SetNotificationEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGSpinningWidgetOption_SetTitle final
{
public:
	class FText                                   _oTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_SetTitle) == 0x000008, "Wrong alignment on BFGSpinningWidgetOption_SetTitle");
static_assert(sizeof(BFGSpinningWidgetOption_SetTitle) == 0x000018, "Wrong size on BFGSpinningWidgetOption_SetTitle");
static_assert(offsetof(BFGSpinningWidgetOption_SetTitle, _oTitle) == 0x000000, "Member 'BFGSpinningWidgetOption_SetTitle::_oTitle' has a wrong offset!");

// Function BFGCore.BFGSpinningWidgetOption_PoxLabUpgrade.ShowStar
// 0x0001 (0x0001 - 0x0000)
struct BFGSpinningWidgetOption_PoxLabUpgrade_ShowStar final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidgetOption_PoxLabUpgrade_ShowStar) == 0x000001, "Wrong alignment on BFGSpinningWidgetOption_PoxLabUpgrade_ShowStar");
static_assert(sizeof(BFGSpinningWidgetOption_PoxLabUpgrade_ShowStar) == 0x000001, "Wrong size on BFGSpinningWidgetOption_PoxLabUpgrade_ShowStar");
static_assert(offsetof(BFGSpinningWidgetOption_PoxLabUpgrade_ShowStar, _bShow) == 0x000000, "Member 'BFGSpinningWidgetOption_PoxLabUpgrade_ShowStar::_bShow' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Mothership_Main.CutsceneFinished
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_Mothership_Main_CutsceneFinished final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_Mothership_Main_CutsceneFinished) == 0x000008, "Wrong alignment on BFGGameFlowState_Mothership_Main_CutsceneFinished");
static_assert(sizeof(BFGGameFlowState_Mothership_Main_CutsceneFinished) == 0x000010, "Wrong size on BFGGameFlowState_Mothership_Main_CutsceneFinished");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_CutsceneFinished, _pActor) == 0x000000, "Member 'BFGGameFlowState_Mothership_Main_CutsceneFinished::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_CutsceneFinished, _bWasCutscene) == 0x000008, "Member 'BFGGameFlowState_Mothership_Main_CutsceneFinished::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Mothership_Main.CutsceneFinishedOutro
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro) == 0x000008, "Wrong alignment on BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro");
static_assert(sizeof(BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro) == 0x000010, "Wrong size on BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro, _pActor) == 0x000000, "Member 'BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro, _bWasCutscene) == 0x000008, "Member 'BFGGameFlowState_Mothership_Main_CutsceneFinishedOutro::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Mothership_Main.CutsceneFinishedTrailer
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer) == 0x000008, "Wrong alignment on BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer");
static_assert(sizeof(BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer) == 0x000010, "Wrong size on BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer, _pActor) == 0x000000, "Member 'BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer, _bWasCutscene) == 0x000008, "Member 'BFGGameFlowState_Mothership_Main_CutsceneFinishedTrailer::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Mothership_Main.OnExitPromptMessage
// 0x0001 (0x0001 - 0x0000)
struct BFGGameFlowState_Mothership_Main_OnExitPromptMessage final
{
public:
	EBFGDialogMessage                             _eMessage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_Mothership_Main_OnExitPromptMessage) == 0x000001, "Wrong alignment on BFGGameFlowState_Mothership_Main_OnExitPromptMessage");
static_assert(sizeof(BFGGameFlowState_Mothership_Main_OnExitPromptMessage) == 0x000001, "Wrong size on BFGGameFlowState_Mothership_Main_OnExitPromptMessage");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_OnExitPromptMessage, _eMessage) == 0x000000, "Member 'BFGGameFlowState_Mothership_Main_OnExitPromptMessage::_eMessage' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Mothership_Main.OnLayerChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowState_Mothership_Main_OnLayerChanged final
{
public:
	int32                                         _iOld;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iNew;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_Mothership_Main_OnLayerChanged) == 0x000004, "Wrong alignment on BFGGameFlowState_Mothership_Main_OnLayerChanged");
static_assert(sizeof(BFGGameFlowState_Mothership_Main_OnLayerChanged) == 0x000008, "Wrong size on BFGGameFlowState_Mothership_Main_OnLayerChanged");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_OnLayerChanged, _iOld) == 0x000000, "Member 'BFGGameFlowState_Mothership_Main_OnLayerChanged::_iOld' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_OnLayerChanged, _iNew) == 0x000004, "Member 'BFGGameFlowState_Mothership_Main_OnLayerChanged::_iNew' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Mothership_Main.OnSubRoomChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowState_Mothership_Main_OnSubRoomChanged final
{
public:
	int32                                         _iOld;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iNew;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_Mothership_Main_OnSubRoomChanged) == 0x000004, "Wrong alignment on BFGGameFlowState_Mothership_Main_OnSubRoomChanged");
static_assert(sizeof(BFGGameFlowState_Mothership_Main_OnSubRoomChanged) == 0x000008, "Wrong size on BFGGameFlowState_Mothership_Main_OnSubRoomChanged");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_OnSubRoomChanged, _iOld) == 0x000000, "Member 'BFGGameFlowState_Mothership_Main_OnSubRoomChanged::_iOld' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_OnSubRoomChanged, _iNew) == 0x000004, "Member 'BFGGameFlowState_Mothership_Main_OnSubRoomChanged::_iNew' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Mothership_Main.TriggerLevelSwitch
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_Mothership_Main_TriggerLevelSwitch final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_Mothership_Main_TriggerLevelSwitch) == 0x000008, "Wrong alignment on BFGGameFlowState_Mothership_Main_TriggerLevelSwitch");
static_assert(sizeof(BFGGameFlowState_Mothership_Main_TriggerLevelSwitch) == 0x000010, "Wrong size on BFGGameFlowState_Mothership_Main_TriggerLevelSwitch");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_TriggerLevelSwitch, _pActor) == 0x000000, "Member 'BFGGameFlowState_Mothership_Main_TriggerLevelSwitch::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_Mothership_Main_TriggerLevelSwitch, _bWasCutscene) == 0x000008, "Member 'BFGGameFlowState_Mothership_Main_TriggerLevelSwitch::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGFadeSystemUserWidget.SetSpinnerOpacity
// 0x0004 (0x0004 - 0x0000)
struct BFGFadeSystemUserWidget_SetSpinnerOpacity final
{
public:
	float                                         _fOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGFadeSystemUserWidget_SetSpinnerOpacity) == 0x000004, "Wrong alignment on BFGFadeSystemUserWidget_SetSpinnerOpacity");
static_assert(sizeof(BFGFadeSystemUserWidget_SetSpinnerOpacity) == 0x000004, "Wrong size on BFGFadeSystemUserWidget_SetSpinnerOpacity");
static_assert(offsetof(BFGFadeSystemUserWidget_SetSpinnerOpacity, _fOpacity) == 0x000000, "Member 'BFGFadeSystemUserWidget_SetSpinnerOpacity::_fOpacity' has a wrong offset!");

// Function BFGCore.BFGFadeSystemUserWidget.SetSpinnerType
// 0x0001 (0x0001 - 0x0000)
struct BFGFadeSystemUserWidget_SetSpinnerType final
{
public:
	EBFGSaveSystem_UIThrobber                     _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGFadeSystemUserWidget_SetSpinnerType) == 0x000001, "Wrong alignment on BFGFadeSystemUserWidget_SetSpinnerType");
static_assert(sizeof(BFGFadeSystemUserWidget_SetSpinnerType) == 0x000001, "Wrong size on BFGFadeSystemUserWidget_SetSpinnerType");
static_assert(offsetof(BFGFadeSystemUserWidget_SetSpinnerType, _eType) == 0x000000, "Member 'BFGFadeSystemUserWidget_SetSpinnerType::_eType' has a wrong offset!");

// Function BFGCore.BFGFadeSystemUserWidget.ShowSpinner
// 0x0001 (0x0001 - 0x0000)
struct BFGFadeSystemUserWidget_ShowSpinner final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGFadeSystemUserWidget_ShowSpinner) == 0x000001, "Wrong alignment on BFGFadeSystemUserWidget_ShowSpinner");
static_assert(sizeof(BFGFadeSystemUserWidget_ShowSpinner) == 0x000001, "Wrong size on BFGFadeSystemUserWidget_ShowSpinner");
static_assert(offsetof(BFGFadeSystemUserWidget_ShowSpinner, _bShow) == 0x000000, "Member 'BFGFadeSystemUserWidget_ShowSpinner::_bShow' has a wrong offset!");

// Function BFGCore.BFGFadeSystemUserWidget.UpdateFade
// 0x0004 (0x0004 - 0x0000)
struct BFGFadeSystemUserWidget_UpdateFade final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGFadeSystemUserWidget_UpdateFade) == 0x000004, "Wrong alignment on BFGFadeSystemUserWidget_UpdateFade");
static_assert(sizeof(BFGFadeSystemUserWidget_UpdateFade) == 0x000004, "Wrong size on BFGFadeSystemUserWidget_UpdateFade");
static_assert(offsetof(BFGFadeSystemUserWidget_UpdateFade, _fValue) == 0x000000, "Member 'BFGFadeSystemUserWidget_UpdateFade::_fValue' has a wrong offset!");

// Function BFGCore.BFGQuest.OnStartForWorld
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_OnStartForWorld final
{
public:
	class ABFGGameState*                          _pGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGQuest_Manager*                      _pQuestManager;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_OnStartForWorld) == 0x000008, "Wrong alignment on BFGQuest_OnStartForWorld");
static_assert(sizeof(BFGQuest_OnStartForWorld) == 0x000010, "Wrong size on BFGQuest_OnStartForWorld");
static_assert(offsetof(BFGQuest_OnStartForWorld, _pGameState) == 0x000000, "Member 'BFGQuest_OnStartForWorld::_pGameState' has a wrong offset!");
static_assert(offsetof(BFGQuest_OnStartForWorld, _pQuestManager) == 0x000008, "Member 'BFGQuest_OnStartForWorld::_pQuestManager' has a wrong offset!");

// Function BFGCore.BFGQuest.OnVariableChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_OnVariableChanged final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _oldValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _newValue;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_OnVariableChanged) == 0x000008, "Wrong alignment on BFGQuest_OnVariableChanged");
static_assert(sizeof(BFGQuest_OnVariableChanged) == 0x000018, "Wrong size on BFGQuest_OnVariableChanged");
static_assert(offsetof(BFGQuest_OnVariableChanged, _pVarMirror) == 0x000000, "Member 'BFGQuest_OnVariableChanged::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGQuest_OnVariableChanged, _pVariable) == 0x000008, "Member 'BFGQuest_OnVariableChanged::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGQuest_OnVariableChanged, _oldValue) == 0x000010, "Member 'BFGQuest_OnVariableChanged::_oldValue' has a wrong offset!");
static_assert(offsetof(BFGQuest_OnVariableChanged, _newValue) == 0x000014, "Member 'BFGQuest_OnVariableChanged::_newValue' has a wrong offset!");

// Function BFGCore.BFGQuest.RegisterDataVariable
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_RegisterDataVariable final
{
public:
	class FName                                   _strVarName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDefaultValue;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGCustomDataVariable*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_RegisterDataVariable) == 0x000008, "Wrong alignment on BFGQuest_RegisterDataVariable");
static_assert(sizeof(BFGQuest_RegisterDataVariable) == 0x000018, "Wrong size on BFGQuest_RegisterDataVariable");
static_assert(offsetof(BFGQuest_RegisterDataVariable, _strVarName) == 0x000000, "Member 'BFGQuest_RegisterDataVariable::_strVarName' has a wrong offset!");
static_assert(offsetof(BFGQuest_RegisterDataVariable, _fDefaultValue) == 0x000008, "Member 'BFGQuest_RegisterDataVariable::_fDefaultValue' has a wrong offset!");
static_assert(offsetof(BFGQuest_RegisterDataVariable, ReturnValue) == 0x000010, "Member 'BFGQuest_RegisterDataVariable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.RegisterEvent
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_RegisterEvent final
{
public:
	class UBFGEvent*                              _pEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrioritize;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGQuest_RegisterEvent) == 0x000008, "Wrong alignment on BFGQuest_RegisterEvent");
static_assert(sizeof(BFGQuest_RegisterEvent) == 0x000010, "Wrong size on BFGQuest_RegisterEvent");
static_assert(offsetof(BFGQuest_RegisterEvent, _pEvent) == 0x000000, "Member 'BFGQuest_RegisterEvent::_pEvent' has a wrong offset!");
static_assert(offsetof(BFGQuest_RegisterEvent, bPrioritize) == 0x000008, "Member 'BFGQuest_RegisterEvent::bPrioritize' has a wrong offset!");

// Function BFGCore.BFGQuest.GenerateQuestVariableName
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_GenerateQuestVariableName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_GenerateQuestVariableName) == 0x000004, "Wrong alignment on BFGQuest_GenerateQuestVariableName");
static_assert(sizeof(BFGQuest_GenerateQuestVariableName) == 0x000008, "Wrong size on BFGQuest_GenerateQuestVariableName");
static_assert(offsetof(BFGQuest_GenerateQuestVariableName, ReturnValue) == 0x000000, "Member 'BFGQuest_GenerateQuestVariableName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.GetActiveEvents
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_GetActiveEvents final
{
public:
	TArray<class UBFGEvent*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_GetActiveEvents) == 0x000008, "Wrong alignment on BFGQuest_GetActiveEvents");
static_assert(sizeof(BFGQuest_GetActiveEvents) == 0x000010, "Wrong size on BFGQuest_GetActiveEvents");
static_assert(offsetof(BFGQuest_GetActiveEvents, ReturnValue) == 0x000000, "Member 'BFGQuest_GetActiveEvents::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.GetGameState
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_GetGameState final
{
public:
	class ABFGGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_GetGameState) == 0x000008, "Wrong alignment on BFGQuest_GetGameState");
static_assert(sizeof(BFGQuest_GetGameState) == 0x000008, "Wrong size on BFGQuest_GetGameState");
static_assert(offsetof(BFGQuest_GetGameState, ReturnValue) == 0x000000, "Member 'BFGQuest_GetGameState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.GetMissionGroup
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_GetMissionGroup final
{
public:
	class UBFGMissionGroup*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_GetMissionGroup) == 0x000008, "Wrong alignment on BFGQuest_GetMissionGroup");
static_assert(sizeof(BFGQuest_GetMissionGroup) == 0x000008, "Wrong size on BFGQuest_GetMissionGroup");
static_assert(offsetof(BFGQuest_GetMissionGroup, ReturnValue) == 0x000000, "Member 'BFGQuest_GetMissionGroup::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.GetRunningElement
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_GetRunningElement final
{
public:
	class UBFGQuest_Element*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_GetRunningElement) == 0x000008, "Wrong alignment on BFGQuest_GetRunningElement");
static_assert(sizeof(BFGQuest_GetRunningElement) == 0x000008, "Wrong size on BFGQuest_GetRunningElement");
static_assert(offsetof(BFGQuest_GetRunningElement, ReturnValue) == 0x000000, "Member 'BFGQuest_GetRunningElement::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.GetVariable
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_GetVariable final
{
public:
	class UBFGVariable*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_GetVariable) == 0x000008, "Wrong alignment on BFGQuest_GetVariable");
static_assert(sizeof(BFGQuest_GetVariable) == 0x000008, "Wrong size on BFGQuest_GetVariable");
static_assert(offsetof(BFGQuest_GetVariable, ReturnValue) == 0x000000, "Member 'BFGQuest_GetVariable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.IsMainQuest
// 0x0001 (0x0001 - 0x0000)
struct BFGQuest_IsMainQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_IsMainQuest) == 0x000001, "Wrong alignment on BFGQuest_IsMainQuest");
static_assert(sizeof(BFGQuest_IsMainQuest) == 0x000001, "Wrong size on BFGQuest_IsMainQuest");
static_assert(offsetof(BFGQuest_IsMainQuest, ReturnValue) == 0x000000, "Member 'BFGQuest_IsMainQuest::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.IsQuestInProgress
// 0x0001 (0x0001 - 0x0000)
struct BFGQuest_IsQuestInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_IsQuestInProgress) == 0x000001, "Wrong alignment on BFGQuest_IsQuestInProgress");
static_assert(sizeof(BFGQuest_IsQuestInProgress) == 0x000001, "Wrong size on BFGQuest_IsQuestInProgress");
static_assert(offsetof(BFGQuest_IsQuestInProgress, ReturnValue) == 0x000000, "Member 'BFGQuest_IsQuestInProgress::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest.IsQuestToBeStarted
// 0x0001 (0x0001 - 0x0000)
struct BFGQuest_IsQuestToBeStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_IsQuestToBeStarted) == 0x000001, "Wrong alignment on BFGQuest_IsQuestToBeStarted");
static_assert(sizeof(BFGQuest_IsQuestToBeStarted) == 0x000001, "Wrong size on BFGQuest_IsQuestToBeStarted");
static_assert(offsetof(BFGQuest_IsQuestToBeStarted, ReturnValue) == 0x000000, "Member 'BFGQuest_IsQuestToBeStarted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_MainMenu.OnSaveSystemActionComplete
// 0x0018 (0x0018 - 0x0000)
struct BFGGameFlowState_MainMenu_OnSaveSystemActionComplete final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGSaveSystem_ActionResult                   _result;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_MainMenu_OnSaveSystemActionComplete) == 0x000008, "Wrong alignment on BFGGameFlowState_MainMenu_OnSaveSystemActionComplete");
static_assert(sizeof(BFGGameFlowState_MainMenu_OnSaveSystemActionComplete) == 0x000018, "Wrong size on BFGGameFlowState_MainMenu_OnSaveSystemActionComplete");
static_assert(offsetof(BFGGameFlowState_MainMenu_OnSaveSystemActionComplete, _pSaveSystem) == 0x000000, "Member 'BFGGameFlowState_MainMenu_OnSaveSystemActionComplete::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_MainMenu_OnSaveSystemActionComplete, _pAction) == 0x000008, "Member 'BFGGameFlowState_MainMenu_OnSaveSystemActionComplete::_pAction' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_MainMenu_OnSaveSystemActionComplete, _result) == 0x000010, "Member 'BFGGameFlowState_MainMenu_OnSaveSystemActionComplete::_result' has a wrong offset!");

// Function BFGCore.BFGVariationDressingComponent.AssignVariation
// 0x0008 (0x0008 - 0x0000)
struct BFGVariationDressingComponent_AssignVariation final
{
public:
	class FName                                   _nVariationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariationDressingComponent_AssignVariation) == 0x000004, "Wrong alignment on BFGVariationDressingComponent_AssignVariation");
static_assert(sizeof(BFGVariationDressingComponent_AssignVariation) == 0x000008, "Wrong size on BFGVariationDressingComponent_AssignVariation");
static_assert(offsetof(BFGVariationDressingComponent_AssignVariation, _nVariationName) == 0x000000, "Member 'BFGVariationDressingComponent_AssignVariation::_nVariationName' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetMaxSupported_QuestSteps
// 0x0004 (0x0004 - 0x0000)
struct BFGVariableType_Quest_GetMaxSupported_QuestSteps final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetMaxSupported_QuestSteps) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetMaxSupported_QuestSteps");
static_assert(sizeof(BFGVariableType_Quest_GetMaxSupported_QuestSteps) == 0x000004, "Wrong size on BFGVariableType_Quest_GetMaxSupported_QuestSteps");
static_assert(offsetof(BFGVariableType_Quest_GetMaxSupported_QuestSteps, ReturnValue) == 0x000000, "Member 'BFGVariableType_Quest_GetMaxSupported_QuestSteps::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetState_QuestAborted
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Quest_GetState_QuestAborted final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetState_QuestAborted) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetState_QuestAborted");
static_assert(sizeof(BFGVariableType_Quest_GetState_QuestAborted) == 0x000008, "Wrong size on BFGVariableType_Quest_GetState_QuestAborted");
static_assert(offsetof(BFGVariableType_Quest_GetState_QuestAborted, ReturnValue) == 0x000000, "Member 'BFGVariableType_Quest_GetState_QuestAborted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetState_QuestAvailable
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Quest_GetState_QuestAvailable final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetState_QuestAvailable) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetState_QuestAvailable");
static_assert(sizeof(BFGVariableType_Quest_GetState_QuestAvailable) == 0x000008, "Wrong size on BFGVariableType_Quest_GetState_QuestAvailable");
static_assert(offsetof(BFGVariableType_Quest_GetState_QuestAvailable, ReturnValue) == 0x000000, "Member 'BFGVariableType_Quest_GetState_QuestAvailable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetState_QuestFailed
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Quest_GetState_QuestFailed final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetState_QuestFailed) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetState_QuestFailed");
static_assert(sizeof(BFGVariableType_Quest_GetState_QuestFailed) == 0x000008, "Wrong size on BFGVariableType_Quest_GetState_QuestFailed");
static_assert(offsetof(BFGVariableType_Quest_GetState_QuestFailed, ReturnValue) == 0x000000, "Member 'BFGVariableType_Quest_GetState_QuestFailed::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetState_QuestFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Quest_GetState_QuestFinished final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetState_QuestFinished) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetState_QuestFinished");
static_assert(sizeof(BFGVariableType_Quest_GetState_QuestFinished) == 0x000008, "Wrong size on BFGVariableType_Quest_GetState_QuestFinished");
static_assert(offsetof(BFGVariableType_Quest_GetState_QuestFinished, ReturnValue) == 0x000000, "Member 'BFGVariableType_Quest_GetState_QuestFinished::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetState_QuestUnavailable
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Quest_GetState_QuestUnavailable final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetState_QuestUnavailable) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetState_QuestUnavailable");
static_assert(sizeof(BFGVariableType_Quest_GetState_QuestUnavailable) == 0x000008, "Wrong size on BFGVariableType_Quest_GetState_QuestUnavailable");
static_assert(offsetof(BFGVariableType_Quest_GetState_QuestUnavailable, ReturnValue) == 0x000000, "Member 'BFGVariableType_Quest_GetState_QuestUnavailable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetTypeName_Quest
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Quest_GetTypeName_Quest final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetTypeName_Quest) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetTypeName_Quest");
static_assert(sizeof(BFGVariableType_Quest_GetTypeName_Quest) == 0x000008, "Wrong size on BFGVariableType_Quest_GetTypeName_Quest");
static_assert(offsetof(BFGVariableType_Quest_GetTypeName_Quest, ReturnValue) == 0x000000, "Member 'BFGVariableType_Quest_GetTypeName_Quest::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetValueFromQuestStep
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Quest_GetValueFromQuestStep final
{
public:
	int32                                         _iQuestStep;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetValueFromQuestStep) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetValueFromQuestStep");
static_assert(sizeof(BFGVariableType_Quest_GetValueFromQuestStep) == 0x000008, "Wrong size on BFGVariableType_Quest_GetValueFromQuestStep");
static_assert(offsetof(BFGVariableType_Quest_GetValueFromQuestStep, _iQuestStep) == 0x000000, "Member 'BFGVariableType_Quest_GetValueFromQuestStep::_iQuestStep' has a wrong offset!");
static_assert(offsetof(BFGVariableType_Quest_GetValueFromQuestStep, ReturnValue) == 0x000004, "Member 'BFGVariableType_Quest_GetValueFromQuestStep::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetValueNameFromQuestStep
// 0x000C (0x000C - 0x0000)
struct BFGVariableType_Quest_GetValueNameFromQuestStep final
{
public:
	int32                                         _iQuestStep;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetValueNameFromQuestStep) == 0x000004, "Wrong alignment on BFGVariableType_Quest_GetValueNameFromQuestStep");
static_assert(sizeof(BFGVariableType_Quest_GetValueNameFromQuestStep) == 0x00000C, "Wrong size on BFGVariableType_Quest_GetValueNameFromQuestStep");
static_assert(offsetof(BFGVariableType_Quest_GetValueNameFromQuestStep, _iQuestStep) == 0x000000, "Member 'BFGVariableType_Quest_GetValueNameFromQuestStep::_iQuestStep' has a wrong offset!");
static_assert(offsetof(BFGVariableType_Quest_GetValueNameFromQuestStep, ReturnValue) == 0x000004, "Member 'BFGVariableType_Quest_GetValueNameFromQuestStep::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetValueNamesForEndStates
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableType_Quest_GetValueNamesForEndStates final
{
public:
	TArray<class FName>                           _aValueNames;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetValueNamesForEndStates) == 0x000008, "Wrong alignment on BFGVariableType_Quest_GetValueNamesForEndStates");
static_assert(sizeof(BFGVariableType_Quest_GetValueNamesForEndStates) == 0x000010, "Wrong size on BFGVariableType_Quest_GetValueNamesForEndStates");
static_assert(offsetof(BFGVariableType_Quest_GetValueNamesForEndStates, _aValueNames) == 0x000000, "Member 'BFGVariableType_Quest_GetValueNamesForEndStates::_aValueNames' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetValueNamesForInProgress
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableType_Quest_GetValueNamesForInProgress final
{
public:
	TArray<class FName>                           _aValueNames;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetValueNamesForInProgress) == 0x000008, "Wrong alignment on BFGVariableType_Quest_GetValueNamesForInProgress");
static_assert(sizeof(BFGVariableType_Quest_GetValueNamesForInProgress) == 0x000010, "Wrong size on BFGVariableType_Quest_GetValueNamesForInProgress");
static_assert(offsetof(BFGVariableType_Quest_GetValueNamesForInProgress, _aValueNames) == 0x000000, "Member 'BFGVariableType_Quest_GetValueNamesForInProgress::_aValueNames' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetValueNamesForNotInProgress
// 0x0018 (0x0018 - 0x0000)
struct BFGVariableType_Quest_GetValueNamesForNotInProgress final
{
public:
	TArray<class FName>                           _aValueNames;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          _bIncludeAvailable;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVariableType_Quest_GetValueNamesForNotInProgress) == 0x000008, "Wrong alignment on BFGVariableType_Quest_GetValueNamesForNotInProgress");
static_assert(sizeof(BFGVariableType_Quest_GetValueNamesForNotInProgress) == 0x000018, "Wrong size on BFGVariableType_Quest_GetValueNamesForNotInProgress");
static_assert(offsetof(BFGVariableType_Quest_GetValueNamesForNotInProgress, _aValueNames) == 0x000000, "Member 'BFGVariableType_Quest_GetValueNamesForNotInProgress::_aValueNames' has a wrong offset!");
static_assert(offsetof(BFGVariableType_Quest_GetValueNamesForNotInProgress, _bIncludeAvailable) == 0x000010, "Member 'BFGVariableType_Quest_GetValueNamesForNotInProgress::_bIncludeAvailable' has a wrong offset!");

// Function BFGCore.BFGVariableType_Quest.GetValueNamesFromQuestSteps
// 0x0020 (0x0020 - 0x0000)
struct BFGVariableType_Quest_GetValueNamesFromQuestSteps final
{
public:
	TArray<int32>                                 _aQuestSteps;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Quest_GetValueNamesFromQuestSteps) == 0x000008, "Wrong alignment on BFGVariableType_Quest_GetValueNamesFromQuestSteps");
static_assert(sizeof(BFGVariableType_Quest_GetValueNamesFromQuestSteps) == 0x000020, "Wrong size on BFGVariableType_Quest_GetValueNamesFromQuestSteps");
static_assert(offsetof(BFGVariableType_Quest_GetValueNamesFromQuestSteps, _aQuestSteps) == 0x000000, "Member 'BFGVariableType_Quest_GetValueNamesFromQuestSteps::_aQuestSteps' has a wrong offset!");
static_assert(offsetof(BFGVariableType_Quest_GetValueNamesFromQuestSteps, ReturnValue) == 0x000010, "Member 'BFGVariableType_Quest_GetValueNamesFromQuestSteps::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGStreamingLevelHandle.RequestState
// 0x0003 (0x0003 - 0x0000)
struct BFGStreamingLevelHandle_RequestState final
{
public:
	bool                                          _bLoaded;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bSkipAutoSave;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStreamingLevelHandle_RequestState) == 0x000001, "Wrong alignment on BFGStreamingLevelHandle_RequestState");
static_assert(sizeof(BFGStreamingLevelHandle_RequestState) == 0x000003, "Wrong size on BFGStreamingLevelHandle_RequestState");
static_assert(offsetof(BFGStreamingLevelHandle_RequestState, _bLoaded) == 0x000000, "Member 'BFGStreamingLevelHandle_RequestState::_bLoaded' has a wrong offset!");
static_assert(offsetof(BFGStreamingLevelHandle_RequestState, _bSkipAutoSave) == 0x000001, "Member 'BFGStreamingLevelHandle_RequestState::_bSkipAutoSave' has a wrong offset!");
static_assert(offsetof(BFGStreamingLevelHandle_RequestState, ReturnValue) == 0x000002, "Member 'BFGStreamingLevelHandle_RequestState::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_TutorialPage.ActionTutorialPage__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialPage_ActionTutorialPage__DelegateSignature final
{
public:
	const class UBFGWidget_TutorialPage*          _pPage;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_ActionTutorialPage__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_ActionTutorialPage__DelegateSignature");
static_assert(sizeof(BFGWidget_TutorialPage_ActionTutorialPage__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_TutorialPage_ActionTutorialPage__DelegateSignature");
static_assert(offsetof(BFGWidget_TutorialPage_ActionTutorialPage__DelegateSignature, _pPage) == 0x000000, "Member 'BFGWidget_TutorialPage_ActionTutorialPage__DelegateSignature::_pPage' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_TutorialPage.ActionTutorialPageEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature final
{
public:
	class UBFGWidget_TutorialPage*                _pSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGTutorialPageDisplayStyle                  _eDisplayStyle;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature");
static_assert(sizeof(BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature) == 0x000010, "Wrong size on BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature");
static_assert(offsetof(BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature, _pSource) == 0x000000, "Member 'BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature::_pSource' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature, _eDisplayStyle) == 0x000008, "Member 'BFGWidget_TutorialPage_ActionTutorialPageEvent__DelegateSignature::_eDisplayStyle' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.AddFadingState
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialPage_AddFadingState final
{
public:
	class UBFGWidgetAnimationState*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_AddFadingState) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_AddFadingState");
static_assert(sizeof(BFGWidget_TutorialPage_AddFadingState) == 0x000008, "Wrong size on BFGWidget_TutorialPage_AddFadingState");
static_assert(offsetof(BFGWidget_TutorialPage_AddFadingState, ReturnValue) == 0x000000, "Member 'BFGWidget_TutorialPage_AddFadingState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.CacheWidgetSize
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_TutorialPage_CacheWidgetSize final
{
public:
	class UWidget*                                _pWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _vSize;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_CacheWidgetSize) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_CacheWidgetSize");
static_assert(sizeof(BFGWidget_TutorialPage_CacheWidgetSize) == 0x000010, "Wrong size on BFGWidget_TutorialPage_CacheWidgetSize");
static_assert(offsetof(BFGWidget_TutorialPage_CacheWidgetSize, _pWidget) == 0x000000, "Member 'BFGWidget_TutorialPage_CacheWidgetSize::_pWidget' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialPage_CacheWidgetSize, _vSize) == 0x000008, "Member 'BFGWidget_TutorialPage_CacheWidgetSize::_vSize' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.ChangeDisplayStyle
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_TutorialPage_ChangeDisplayStyle final
{
public:
	EBFGTutorialPageDisplayStyle                  _eNewDisplayStyle;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForce;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_ChangeDisplayStyle) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_ChangeDisplayStyle");
static_assert(sizeof(BFGWidget_TutorialPage_ChangeDisplayStyle) == 0x000002, "Wrong size on BFGWidget_TutorialPage_ChangeDisplayStyle");
static_assert(offsetof(BFGWidget_TutorialPage_ChangeDisplayStyle, _eNewDisplayStyle) == 0x000000, "Member 'BFGWidget_TutorialPage_ChangeDisplayStyle::_eNewDisplayStyle' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialPage_ChangeDisplayStyle, _bForce) == 0x000001, "Member 'BFGWidget_TutorialPage_ChangeDisplayStyle::_bForce' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.ChangeStyleCollapsed
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_ChangeStyleCollapsed final
{
public:
	bool                                          _bForce;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_ChangeStyleCollapsed) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_ChangeStyleCollapsed");
static_assert(sizeof(BFGWidget_TutorialPage_ChangeStyleCollapsed) == 0x000001, "Wrong size on BFGWidget_TutorialPage_ChangeStyleCollapsed");
static_assert(offsetof(BFGWidget_TutorialPage_ChangeStyleCollapsed, _bForce) == 0x000000, "Member 'BFGWidget_TutorialPage_ChangeStyleCollapsed::_bForce' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.ChangeStyleCompact
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_ChangeStyleCompact final
{
public:
	bool                                          _bForce;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_ChangeStyleCompact) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_ChangeStyleCompact");
static_assert(sizeof(BFGWidget_TutorialPage_ChangeStyleCompact) == 0x000001, "Wrong size on BFGWidget_TutorialPage_ChangeStyleCompact");
static_assert(offsetof(BFGWidget_TutorialPage_ChangeStyleCompact, _bForce) == 0x000000, "Member 'BFGWidget_TutorialPage_ChangeStyleCompact::_bForce' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.ChangeStyleDetailed
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_ChangeStyleDetailed final
{
public:
	bool                                          _bForce;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_ChangeStyleDetailed) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_ChangeStyleDetailed");
static_assert(sizeof(BFGWidget_TutorialPage_ChangeStyleDetailed) == 0x000001, "Wrong size on BFGWidget_TutorialPage_ChangeStyleDetailed");
static_assert(offsetof(BFGWidget_TutorialPage_ChangeStyleDetailed, _bForce) == 0x000000, "Member 'BFGWidget_TutorialPage_ChangeStyleDetailed::_bForce' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.ChangeStyleHinted
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_ChangeStyleHinted final
{
public:
	bool                                          _bForce;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_ChangeStyleHinted) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_ChangeStyleHinted");
static_assert(sizeof(BFGWidget_TutorialPage_ChangeStyleHinted) == 0x000001, "Wrong size on BFGWidget_TutorialPage_ChangeStyleHinted");
static_assert(offsetof(BFGWidget_TutorialPage_ChangeStyleHinted, _bForce) == 0x000000, "Member 'BFGWidget_TutorialPage_ChangeStyleHinted::_bForce' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.ChangeStyleNormal
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_ChangeStyleNormal final
{
public:
	bool                                          _bForce;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_ChangeStyleNormal) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_ChangeStyleNormal");
static_assert(sizeof(BFGWidget_TutorialPage_ChangeStyleNormal) == 0x000001, "Wrong size on BFGWidget_TutorialPage_ChangeStyleNormal");
static_assert(offsetof(BFGWidget_TutorialPage_ChangeStyleNormal, _bForce) == 0x000000, "Member 'BFGWidget_TutorialPage_ChangeStyleNormal::_bForce' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.EnableContentVisibility
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_EnableContentVisibility final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_EnableContentVisibility) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_EnableContentVisibility");
static_assert(sizeof(BFGWidget_TutorialPage_EnableContentVisibility) == 0x000001, "Wrong size on BFGWidget_TutorialPage_EnableContentVisibility");
static_assert(offsetof(BFGWidget_TutorialPage_EnableContentVisibility, _bValue) == 0x000000, "Member 'BFGWidget_TutorialPage_EnableContentVisibility::_bValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.EnableDetailedHint
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_EnableDetailedHint final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_EnableDetailedHint) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_EnableDetailedHint");
static_assert(sizeof(BFGWidget_TutorialPage_EnableDetailedHint) == 0x000001, "Wrong size on BFGWidget_TutorialPage_EnableDetailedHint");
static_assert(offsetof(BFGWidget_TutorialPage_EnableDetailedHint, _bEnabled) == 0x000000, "Member 'BFGWidget_TutorialPage_EnableDetailedHint::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.EnableDismissHint
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_EnableDismissHint final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_EnableDismissHint) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_EnableDismissHint");
static_assert(sizeof(BFGWidget_TutorialPage_EnableDismissHint) == 0x000001, "Wrong size on BFGWidget_TutorialPage_EnableDismissHint");
static_assert(offsetof(BFGWidget_TutorialPage_EnableDismissHint, _bEnabled) == 0x000000, "Member 'BFGWidget_TutorialPage_EnableDismissHint::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.EnableFrameVisibility
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_EnableFrameVisibility final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_EnableFrameVisibility) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_EnableFrameVisibility");
static_assert(sizeof(BFGWidget_TutorialPage_EnableFrameVisibility) == 0x000001, "Wrong size on BFGWidget_TutorialPage_EnableFrameVisibility");
static_assert(offsetof(BFGWidget_TutorialPage_EnableFrameVisibility, _bValue) == 0x000000, "Member 'BFGWidget_TutorialPage_EnableFrameVisibility::_bValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.EnableOrnamentVisibility
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_EnableOrnamentVisibility final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_EnableOrnamentVisibility) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_EnableOrnamentVisibility");
static_assert(sizeof(BFGWidget_TutorialPage_EnableOrnamentVisibility) == 0x000001, "Wrong size on BFGWidget_TutorialPage_EnableOrnamentVisibility");
static_assert(offsetof(BFGWidget_TutorialPage_EnableOrnamentVisibility, _bValue) == 0x000000, "Member 'BFGWidget_TutorialPage_EnableOrnamentVisibility::_bValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.GetInputActionUseTypeText
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_TutorialPage_GetInputActionUseTypeText final
{
public:
	EBFGInputActionWidgetType                     _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _holdTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_GetInputActionUseTypeText) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_GetInputActionUseTypeText");
static_assert(sizeof(BFGWidget_TutorialPage_GetInputActionUseTypeText) == 0x000020, "Wrong size on BFGWidget_TutorialPage_GetInputActionUseTypeText");
static_assert(offsetof(BFGWidget_TutorialPage_GetInputActionUseTypeText, _eType) == 0x000000, "Member 'BFGWidget_TutorialPage_GetInputActionUseTypeText::_eType' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialPage_GetInputActionUseTypeText, _holdTime) == 0x000004, "Member 'BFGWidget_TutorialPage_GetInputActionUseTypeText::_holdTime' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialPage_GetInputActionUseTypeText, ReturnValue) == 0x000008, "Member 'BFGWidget_TutorialPage_GetInputActionUseTypeText::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.OnInputDeviceChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_TutorialPage_OnInputDeviceChanged final
{
public:
	bool                                          _bIsGamepad;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_OnInputDeviceChanged) == 0x000001, "Wrong alignment on BFGWidget_TutorialPage_OnInputDeviceChanged");
static_assert(sizeof(BFGWidget_TutorialPage_OnInputDeviceChanged) == 0x000001, "Wrong size on BFGWidget_TutorialPage_OnInputDeviceChanged");
static_assert(offsetof(BFGWidget_TutorialPage_OnInputDeviceChanged, _bIsGamepad) == 0x000000, "Member 'BFGWidget_TutorialPage_OnInputDeviceChanged::_bIsGamepad' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.Scroll
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_TutorialPage_Scroll final
{
public:
	float                                         _fAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_Scroll) == 0x000004, "Wrong alignment on BFGWidget_TutorialPage_Scroll");
static_assert(sizeof(BFGWidget_TutorialPage_Scroll) == 0x000004, "Wrong size on BFGWidget_TutorialPage_Scroll");
static_assert(offsetof(BFGWidget_TutorialPage_Scroll, _fAmount) == 0x000000, "Member 'BFGWidget_TutorialPage_Scroll::_fAmount' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.SetContext
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialPage_SetContext final
{
public:
	class UBFGDataAsset_TutorialPage*             _pDataAsset;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_SetContext) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_SetContext");
static_assert(sizeof(BFGWidget_TutorialPage_SetContext) == 0x000008, "Wrong size on BFGWidget_TutorialPage_SetContext");
static_assert(offsetof(BFGWidget_TutorialPage_SetContext, _pDataAsset) == 0x000000, "Member 'BFGWidget_TutorialPage_SetContext::_pDataAsset' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.SetInputActions
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialPage_SetInputActions final
{
public:
	class UOverlay*                               _pOverlayInputActions;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_SetInputActions) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_SetInputActions");
static_assert(sizeof(BFGWidget_TutorialPage_SetInputActions) == 0x000008, "Wrong size on BFGWidget_TutorialPage_SetInputActions");
static_assert(offsetof(BFGWidget_TutorialPage_SetInputActions, _pOverlayInputActions) == 0x000000, "Member 'BFGWidget_TutorialPage_SetInputActions::_pOverlayInputActions' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.UpdateDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_TutorialPage_UpdateDescriptionText final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_UpdateDescriptionText) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_UpdateDescriptionText");
static_assert(sizeof(BFGWidget_TutorialPage_UpdateDescriptionText) == 0x000018, "Wrong size on BFGWidget_TutorialPage_UpdateDescriptionText");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateDescriptionText, _strText) == 0x000000, "Member 'BFGWidget_TutorialPage_UpdateDescriptionText::_strText' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.UpdateDetailText
// 0x0030 (0x0030 - 0x0000)
struct BFGWidget_TutorialPage_UpdateDetailText final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _strQuote;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_UpdateDetailText) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_UpdateDetailText");
static_assert(sizeof(BFGWidget_TutorialPage_UpdateDetailText) == 0x000030, "Wrong size on BFGWidget_TutorialPage_UpdateDetailText");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateDetailText, _strText) == 0x000000, "Member 'BFGWidget_TutorialPage_UpdateDetailText::_strText' has a wrong offset!");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateDetailText, _strQuote) == 0x000018, "Member 'BFGWidget_TutorialPage_UpdateDetailText::_strQuote' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.UpdateIconBrush
// 0x0088 (0x0088 - 0x0000)
struct BFGWidget_TutorialPage_UpdateIconBrush final
{
public:
	struct FSlateBrush                            _iconBrush;                                        // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_UpdateIconBrush) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_UpdateIconBrush");
static_assert(sizeof(BFGWidget_TutorialPage_UpdateIconBrush) == 0x000088, "Wrong size on BFGWidget_TutorialPage_UpdateIconBrush");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateIconBrush, _iconBrush) == 0x000000, "Member 'BFGWidget_TutorialPage_UpdateIconBrush::_iconBrush' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.UpdateImage
// 0x0088 (0x0088 - 0x0000)
struct BFGWidget_TutorialPage_UpdateImage final
{
public:
	struct FSlateBrush                            _oImage;                                           // 0x0000(0x0088)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_UpdateImage) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_UpdateImage");
static_assert(sizeof(BFGWidget_TutorialPage_UpdateImage) == 0x000088, "Wrong size on BFGWidget_TutorialPage_UpdateImage");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateImage, _oImage) == 0x000000, "Member 'BFGWidget_TutorialPage_UpdateImage::_oImage' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.UpdateLongTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_TutorialPage_UpdateLongTitle final
{
public:
	class FText                                   _strTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_UpdateLongTitle) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_UpdateLongTitle");
static_assert(sizeof(BFGWidget_TutorialPage_UpdateLongTitle) == 0x000018, "Wrong size on BFGWidget_TutorialPage_UpdateLongTitle");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateLongTitle, _strTitle) == 0x000000, "Member 'BFGWidget_TutorialPage_UpdateLongTitle::_strTitle' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.UpdateMedia
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialPage_UpdateMedia final
{
public:
	class UMediaSource*                           _pMediaSource;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_UpdateMedia) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_UpdateMedia");
static_assert(sizeof(BFGWidget_TutorialPage_UpdateMedia) == 0x000008, "Wrong size on BFGWidget_TutorialPage_UpdateMedia");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateMedia, _pMediaSource) == 0x000000, "Member 'BFGWidget_TutorialPage_UpdateMedia::_pMediaSource' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.UpdateShortDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_TutorialPage_UpdateShortDescriptionText final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_UpdateShortDescriptionText) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_UpdateShortDescriptionText");
static_assert(sizeof(BFGWidget_TutorialPage_UpdateShortDescriptionText) == 0x000018, "Wrong size on BFGWidget_TutorialPage_UpdateShortDescriptionText");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateShortDescriptionText, _strText) == 0x000000, "Member 'BFGWidget_TutorialPage_UpdateShortDescriptionText::_strText' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.UpdateShortTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_TutorialPage_UpdateShortTitle final
{
public:
	class FText                                   _strTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_UpdateShortTitle) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_UpdateShortTitle");
static_assert(sizeof(BFGWidget_TutorialPage_UpdateShortTitle) == 0x000018, "Wrong size on BFGWidget_TutorialPage_UpdateShortTitle");
static_assert(offsetof(BFGWidget_TutorialPage_UpdateShortTitle, _strTitle) == 0x000000, "Member 'BFGWidget_TutorialPage_UpdateShortTitle::_strTitle' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.ComputeAbsoluteIconPosition
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialPage_ComputeAbsoluteIconPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_ComputeAbsoluteIconPosition) == 0x000004, "Wrong alignment on BFGWidget_TutorialPage_ComputeAbsoluteIconPosition");
static_assert(sizeof(BFGWidget_TutorialPage_ComputeAbsoluteIconPosition) == 0x000008, "Wrong size on BFGWidget_TutorialPage_ComputeAbsoluteIconPosition");
static_assert(offsetof(BFGWidget_TutorialPage_ComputeAbsoluteIconPosition, ReturnValue) == 0x000000, "Member 'BFGWidget_TutorialPage_ComputeAbsoluteIconPosition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialPage.GetContext
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialPage_GetContext final
{
public:
	class UBFGDataAsset_TutorialPage*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialPage_GetContext) == 0x000008, "Wrong alignment on BFGWidget_TutorialPage_GetContext");
static_assert(sizeof(BFGWidget_TutorialPage_GetContext) == 0x000008, "Wrong size on BFGWidget_TutorialPage_GetContext");
static_assert(offsetof(BFGWidget_TutorialPage_GetContext, ReturnValue) == 0x000000, "Member 'BFGWidget_TutorialPage_GetContext::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_BossObjectiveReached
// 0x0010 (0x0010 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_BossObjectiveReached final
{
public:
	class AActor*                                 _pBoss;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGQuest_BossObjective                       _objective;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_BossObjectiveReached) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_BossObjectiveReached");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_BossObjectiveReached) == 0x000010, "Wrong size on BFGEvent_DelegateForwarding_Forward_BossObjectiveReached");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_BossObjectiveReached, _pBoss) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_BossObjectiveReached::_pBoss' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_BossObjectiveReached, _objective) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_BossObjectiveReached::_objective' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_CortexScanVOPlayed
// 0x0048 (0x0048 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGCortexScanResponse                 _response;                                         // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UBFGCortexScanResponseSet*              _pResponseSet;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed) == 0x000048, "Wrong size on BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed, _pOwner) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed, _response) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed::_response' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed, _pResponseSet) == 0x000040, "Member 'BFGEvent_DelegateForwarding_Forward_CortexScanVOPlayed::_pResponseSet' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_DestroyedStaticObject
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_DestroyedStaticObject final
{
public:
	class ABFGObject_StaticWithPhysics*           _pDestroyedObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_DestroyedStaticObject) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_DestroyedStaticObject");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_DestroyedStaticObject) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_DestroyedStaticObject");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_DestroyedStaticObject, _pDestroyedObject) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_DestroyedStaticObject::_pDestroyedObject' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_EnterWater
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_EnterWater final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_EnterWater) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_EnterWater");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_EnterWater) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_EnterWater");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_EnterWater, _pActor) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_EnterWater::_pActor' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_FellOutOfWorld
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_FellOutOfWorld final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_FellOutOfWorld) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_FellOutOfWorld");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_FellOutOfWorld) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_FellOutOfWorld");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_FellOutOfWorld, _pActor) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_FellOutOfWorld::_pActor' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_HealthChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_HealthChanged final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_HealthChanged) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_HealthChanged");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_HealthChanged) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_HealthChanged");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_HealthChanged, _pOwner) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_HealthChanged::_pOwner' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_InitialWaveAmountReached
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_InitialWaveAmountReached final
{
public:
	class ABFGMissionSpawnManager*                _pSpawnManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_InitialWaveAmountReached) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_InitialWaveAmountReached");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_InitialWaveAmountReached) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_InitialWaveAmountReached");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_InitialWaveAmountReached, _pSpawnManager) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_InitialWaveAmountReached::_pSpawnManager' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_Interact
// 0x0018 (0x0018 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_Interact final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pIteractedWith;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _pFocusedOn;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_Interact) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_Interact");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_Interact) == 0x000018, "Wrong size on BFGEvent_DelegateForwarding_Forward_Interact");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_Interact, _pOwner) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_Interact::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_Interact, _pIteractedWith) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_Interact::_pIteractedWith' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_Interact, _pFocusedOn) == 0x000010, "Member 'BFGEvent_DelegateForwarding_Forward_Interact::_pFocusedOn' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_KilledActor
// 0x0020 (0x0020 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_KilledActor final
{
public:
	class AController*                            _pInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pDamageSource;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pKilled;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                _damageType;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_KilledActor) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_KilledActor");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_KilledActor) == 0x000020, "Wrong size on BFGEvent_DelegateForwarding_Forward_KilledActor");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_KilledActor, _pInstigator) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_KilledActor::_pInstigator' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_KilledActor, _pDamageSource) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_KilledActor::_pDamageSource' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_KilledActor, _pKilled) == 0x000010, "Member 'BFGEvent_DelegateForwarding_Forward_KilledActor::_pKilled' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_KilledActor, _damageType) == 0x000018, "Member 'BFGEvent_DelegateForwarding_Forward_KilledActor::_damageType' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_MentalAbilityActivity
// 0x0020 (0x0020 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity final
{
public:
	class AActor*                                 _pOnwer;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGMentalAbilityBase*                  _pAbility;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTarget;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMentalAbility_EventState                     _eState;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity) == 0x000020, "Wrong size on BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity, _pOnwer) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity::_pOnwer' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity, _pAbility) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity::_pAbility' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity, _pTarget) == 0x000010, "Member 'BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity, _eState) == 0x000018, "Member 'BFGEvent_DelegateForwarding_Forward_MentalAbilityActivity::_eState' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_NarrativeSequenceEnd
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_NarrativeSequenceEnd final
{
public:
	class UBFGNarrativeSequence*                  _pSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_NarrativeSequenceEnd) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_NarrativeSequenceEnd");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_NarrativeSequenceEnd) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_NarrativeSequenceEnd");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_NarrativeSequenceEnd, _pSequence) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_NarrativeSequenceEnd::_pSequence' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_NarrativeSequenceFailed
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_NarrativeSequenceFailed final
{
public:
	class UBFGNarrativeSequence*                  _pSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_NarrativeSequenceFailed) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_NarrativeSequenceFailed");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_NarrativeSequenceFailed) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_NarrativeSequenceFailed");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_NarrativeSequenceFailed, _pSequence) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_NarrativeSequenceFailed::_pSequence' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_OverlapActor
// 0x0010 (0x0010 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_OverlapActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOverlap;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_OverlapActor) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_OverlapActor");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_OverlapActor) == 0x000010, "Wrong size on BFGEvent_DelegateForwarding_Forward_OverlapActor");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_OverlapActor, _pActor) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_OverlapActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_OverlapActor, _pOverlap) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_OverlapActor::_pOverlap' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_OverlapEndActor
// 0x0010 (0x0010 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_OverlapEndActor final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOverlap;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_OverlapEndActor) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_OverlapEndActor");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_OverlapEndActor) == 0x000010, "Wrong size on BFGEvent_DelegateForwarding_Forward_OverlapEndActor");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_OverlapEndActor, _pActor) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_OverlapEndActor::_pActor' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_OverlapEndActor, _pOverlap) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_OverlapEndActor::_pOverlap' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_PickupItem
// 0x0010 (0x0010 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_PickupItem final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pItem;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_PickupItem) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_PickupItem");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_PickupItem) == 0x000010, "Wrong size on BFGEvent_DelegateForwarding_Forward_PickupItem");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_PickupItem, _pOwner) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_PickupItem::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_PickupItem, _pItem) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_PickupItem::_pItem' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_PlayerStateMonetaryValueChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_PlayerStateMonetaryValueChanged final
{
public:
	class ABFGPlayerState*                        _pPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_PlayerStateMonetaryValueChanged) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_PlayerStateMonetaryValueChanged");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_PlayerStateMonetaryValueChanged) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_PlayerStateMonetaryValueChanged");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_PlayerStateMonetaryValueChanged, _pPlayerState) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_PlayerStateMonetaryValueChanged::_pPlayerState' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_ProximityGoalReached
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_ProximityGoalReached final
{
public:
	const class UBFGQuest_ProximityMonitor*       _pProximityMonitor;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_ProximityGoalReached) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_ProximityGoalReached");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_ProximityGoalReached) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_ProximityGoalReached");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_ProximityGoalReached, _pProximityMonitor) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_ProximityGoalReached::_pProximityMonitor' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_ProximitySubgoalReached
// 0x0010 (0x0010 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached final
{
public:
	const class UBFGQuest_ProximityMonitor*       _pProximityMonitor;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iLimit;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached) == 0x000010, "Wrong size on BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached, _pProximityMonitor) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached::_pProximityMonitor' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached, _iLimit) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_ProximitySubgoalReached::_iLimit' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_ResourceValueChanged
// 0x000C (0x000C - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_ResourceValueChanged final
{
public:
	EItemValueTypeEnum                            _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fNewValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fOldValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_ResourceValueChanged) == 0x000004, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_ResourceValueChanged");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_ResourceValueChanged) == 0x00000C, "Wrong size on BFGEvent_DelegateForwarding_Forward_ResourceValueChanged");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_ResourceValueChanged, _eType) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_ResourceValueChanged::_eType' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_ResourceValueChanged, _fNewValue) == 0x000004, "Member 'BFGEvent_DelegateForwarding_Forward_ResourceValueChanged::_fNewValue' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_ResourceValueChanged, _fOldValue) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_ResourceValueChanged::_fOldValue' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_SpawnManagerEveryoneDead
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_SpawnManagerEveryoneDead final
{
public:
	class ABFGMissionSpawnManager*                _pSpawnManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_SpawnManagerEveryoneDead) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_SpawnManagerEveryoneDead");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_SpawnManagerEveryoneDead) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_SpawnManagerEveryoneDead");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_SpawnManagerEveryoneDead, _pSpawnManager) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_SpawnManagerEveryoneDead::_pSpawnManager' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_SpawnManagerLoaded
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_SpawnManagerLoaded final
{
public:
	class ABFGMissionSpawnManager*                _pSpawnManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_SpawnManagerLoaded) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_SpawnManagerLoaded");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_SpawnManagerLoaded) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_SpawnManagerLoaded");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_SpawnManagerLoaded, _pSpawnManager) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_SpawnManagerLoaded::_pSpawnManager' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_StreamingLevelStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged final
{
public:
	class UBFGStreamingLevelHandle*               _pHandle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsLoaded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged) == 0x000010, "Wrong size on BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged, _pHandle) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged::_pHandle' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged, _bIsLoaded) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_StreamingLevelStateChanged::_bIsLoaded' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_TickPlayerControllingUFO
// 0x0010 (0x0010 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO final
{
public:
	class AActor*                                 _pPlayerCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _PlayerUFO;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO) == 0x000010, "Wrong size on BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO, _pPlayerCharacter) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO::_pPlayerCharacter' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO, _PlayerUFO) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_TickPlayerControllingUFO::_PlayerUFO' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_TimerSubgoalReached
// 0x0010 (0x0010 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached final
{
public:
	const class UBFGQuest_Timer*                  _pTimer;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              _tsLimit;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached) == 0x000010, "Wrong size on BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached, _pTimer) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached::_pTimer' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached, _tsLimit) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_TimerSubgoalReached::_tsLimit' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_TransportToOrbitAttempt
// 0x0018 (0x0018 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt final
{
public:
	class ABFGMissionOrbitalTransporter*          _pTransporter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bSuccess;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt) == 0x000018, "Wrong size on BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt, _pTransporter) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt::_pTransporter' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt, _pTarget) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt, _bSuccess) == 0x000010, "Member 'BFGEvent_DelegateForwarding_Forward_TransportToOrbitAttempt::_bSuccess' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_VariableMirrorValueChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _oldValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _newValue;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged) == 0x000018, "Wrong size on BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged, _pVarMirror) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged, _pVariable) == 0x000008, "Member 'BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged, _oldValue) == 0x000010, "Member 'BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged::_oldValue' has a wrong offset!");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged, _newValue) == 0x000014, "Member 'BFGEvent_DelegateForwarding_Forward_VariableMirrorValueChanged::_newValue' has a wrong offset!");

// Function BFGCore.BFGEvent_DelegateForwarding.Forward_WaveStarted
// 0x0008 (0x0008 - 0x0000)
struct BFGEvent_DelegateForwarding_Forward_WaveStarted final
{
public:
	class ABFGMissionSpawnManager*                _pSpawnManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEvent_DelegateForwarding_Forward_WaveStarted) == 0x000008, "Wrong alignment on BFGEvent_DelegateForwarding_Forward_WaveStarted");
static_assert(sizeof(BFGEvent_DelegateForwarding_Forward_WaveStarted) == 0x000008, "Wrong size on BFGEvent_DelegateForwarding_Forward_WaveStarted");
static_assert(offsetof(BFGEvent_DelegateForwarding_Forward_WaveStarted, _pSpawnManager) == 0x000000, "Member 'BFGEvent_DelegateForwarding_Forward_WaveStarted::_pSpawnManager' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_QuestEntry.ActionQuestEntry__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_QuestEntry_ActionQuestEntry__DelegateSignature final
{
public:
	class UBFGWidget_QuestEntry*                  _pQuestEntry;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_QuestEntry_ActionQuestEntry__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_QuestEntry_ActionQuestEntry__DelegateSignature");
static_assert(sizeof(BFGWidget_QuestEntry_ActionQuestEntry__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_QuestEntry_ActionQuestEntry__DelegateSignature");
static_assert(offsetof(BFGWidget_QuestEntry_ActionQuestEntry__DelegateSignature, _pQuestEntry) == 0x000000, "Member 'BFGWidget_QuestEntry_ActionQuestEntry__DelegateSignature::_pQuestEntry' has a wrong offset!");

// Function BFGCore.BFGWidget_QuestEntry.AddSubquestEntry
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_QuestEntry_AddSubquestEntry final
{
public:
	class UBFGWidget_SubquestEntry*               _pSubquestEntry;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_QuestEntry_AddSubquestEntry) == 0x000008, "Wrong alignment on BFGWidget_QuestEntry_AddSubquestEntry");
static_assert(sizeof(BFGWidget_QuestEntry_AddSubquestEntry) == 0x000008, "Wrong size on BFGWidget_QuestEntry_AddSubquestEntry");
static_assert(offsetof(BFGWidget_QuestEntry_AddSubquestEntry, _pSubquestEntry) == 0x000000, "Member 'BFGWidget_QuestEntry_AddSubquestEntry::_pSubquestEntry' has a wrong offset!");

// Function BFGCore.BFGWidget_QuestEntry.SetSpacerSize
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_QuestEntry_SetSpacerSize final
{
public:
	struct FVector2D                              _vSize;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_QuestEntry_SetSpacerSize) == 0x000004, "Wrong alignment on BFGWidget_QuestEntry_SetSpacerSize");
static_assert(sizeof(BFGWidget_QuestEntry_SetSpacerSize) == 0x000008, "Wrong size on BFGWidget_QuestEntry_SetSpacerSize");
static_assert(offsetof(BFGWidget_QuestEntry_SetSpacerSize, _vSize) == 0x000000, "Member 'BFGWidget_QuestEntry_SetSpacerSize::_vSize' has a wrong offset!");

// Function BFGCore.BFGWidget_QuestEntry.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_QuestEntry_SetTitle final
{
public:
	class FText                                   _title;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_QuestEntry_SetTitle) == 0x000008, "Wrong alignment on BFGWidget_QuestEntry_SetTitle");
static_assert(sizeof(BFGWidget_QuestEntry_SetTitle) == 0x000018, "Wrong size on BFGWidget_QuestEntry_SetTitle");
static_assert(offsetof(BFGWidget_QuestEntry_SetTitle, _title) == 0x000000, "Member 'BFGWidget_QuestEntry_SetTitle::_title' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Cutscene.IsPlayingCutscene
// 0x0001 (0x0001 - 0x0000)
struct BFGGameFlowState_Cutscene_IsPlayingCutscene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_Cutscene_IsPlayingCutscene) == 0x000001, "Wrong alignment on BFGGameFlowState_Cutscene_IsPlayingCutscene");
static_assert(sizeof(BFGGameFlowState_Cutscene_IsPlayingCutscene) == 0x000001, "Wrong size on BFGGameFlowState_Cutscene_IsPlayingCutscene");
static_assert(offsetof(BFGGameFlowState_Cutscene_IsPlayingCutscene, ReturnValue) == 0x000000, "Member 'BFGGameFlowState_Cutscene_IsPlayingCutscene::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Cutscene.SequenceInfo_Reset
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowState_Cutscene_SequenceInfo_Reset final
{
public:
	class UBFGSequencePlayer*                     _pInfo;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_Cutscene_SequenceInfo_Reset) == 0x000008, "Wrong alignment on BFGGameFlowState_Cutscene_SequenceInfo_Reset");
static_assert(sizeof(BFGGameFlowState_Cutscene_SequenceInfo_Reset) == 0x000008, "Wrong size on BFGGameFlowState_Cutscene_SequenceInfo_Reset");
static_assert(offsetof(BFGGameFlowState_Cutscene_SequenceInfo_Reset, _pInfo) == 0x000000, "Member 'BFGGameFlowState_Cutscene_SequenceInfo_Reset::_pInfo' has a wrong offset!");

// Function BFGCore.BFGVehicleDeformation.AddDeformerWeight
// 0x009C (0x009C - 0x0000)
struct BFGVehicleDeformation_AddDeformerWeight final
{
public:
	struct FHitResult                             _result;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector2D                              _vHitAxisClamped;                                  // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vHitWorldLocation;                                // 0x0090(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVehicleDeformation_AddDeformerWeight) == 0x000004, "Wrong alignment on BFGVehicleDeformation_AddDeformerWeight");
static_assert(sizeof(BFGVehicleDeformation_AddDeformerWeight) == 0x00009C, "Wrong size on BFGVehicleDeformation_AddDeformerWeight");
static_assert(offsetof(BFGVehicleDeformation_AddDeformerWeight, _result) == 0x000000, "Member 'BFGVehicleDeformation_AddDeformerWeight::_result' has a wrong offset!");
static_assert(offsetof(BFGVehicleDeformation_AddDeformerWeight, _vHitAxisClamped) == 0x000088, "Member 'BFGVehicleDeformation_AddDeformerWeight::_vHitAxisClamped' has a wrong offset!");
static_assert(offsetof(BFGVehicleDeformation_AddDeformerWeight, _vHitWorldLocation) == 0x000090, "Member 'BFGVehicleDeformation_AddDeformerWeight::_vHitWorldLocation' has a wrong offset!");

// Function BFGCore.BFGVehicleDeformation.CheckSpotLight
// 0x0008 (0x0008 - 0x0000)
struct BFGVehicleDeformation_CheckSpotLight final
{
public:
	struct FVector2D                              _vHitAxis;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVehicleDeformation_CheckSpotLight) == 0x000004, "Wrong alignment on BFGVehicleDeformation_CheckSpotLight");
static_assert(sizeof(BFGVehicleDeformation_CheckSpotLight) == 0x000008, "Wrong size on BFGVehicleDeformation_CheckSpotLight");
static_assert(offsetof(BFGVehicleDeformation_CheckSpotLight, _vHitAxis) == 0x000000, "Member 'BFGVehicleDeformation_CheckSpotLight::_vHitAxis' has a wrong offset!");

// Function BFGCore.BFGVehicleDeformation.GetBreakablePartFromHit
// 0x000C (0x000C - 0x0000)
struct BFGVehicleDeformation_GetBreakablePartFromHit final
{
public:
	struct FVector                                _vHitLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVehicleDeformation_GetBreakablePartFromHit) == 0x000004, "Wrong alignment on BFGVehicleDeformation_GetBreakablePartFromHit");
static_assert(sizeof(BFGVehicleDeformation_GetBreakablePartFromHit) == 0x00000C, "Wrong size on BFGVehicleDeformation_GetBreakablePartFromHit");
static_assert(offsetof(BFGVehicleDeformation_GetBreakablePartFromHit, _vHitLocation) == 0x000000, "Member 'BFGVehicleDeformation_GetBreakablePartFromHit::_vHitLocation' has a wrong offset!");

// Function BFGCore.BFGVehicleDeformation.OnSkeletalHit
// 0x00A8 (0x00A8 - 0x0000)
struct BFGVehicleDeformation_OnSkeletalHit final
{
public:
	class AActor*                                 _pSelf;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOther;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vNormal;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _hitResult;                                        // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVehicleDeformation_OnSkeletalHit) == 0x000008, "Wrong alignment on BFGVehicleDeformation_OnSkeletalHit");
static_assert(sizeof(BFGVehicleDeformation_OnSkeletalHit) == 0x0000A8, "Wrong size on BFGVehicleDeformation_OnSkeletalHit");
static_assert(offsetof(BFGVehicleDeformation_OnSkeletalHit, _pSelf) == 0x000000, "Member 'BFGVehicleDeformation_OnSkeletalHit::_pSelf' has a wrong offset!");
static_assert(offsetof(BFGVehicleDeformation_OnSkeletalHit, _pOther) == 0x000008, "Member 'BFGVehicleDeformation_OnSkeletalHit::_pOther' has a wrong offset!");
static_assert(offsetof(BFGVehicleDeformation_OnSkeletalHit, _vNormal) == 0x000010, "Member 'BFGVehicleDeformation_OnSkeletalHit::_vNormal' has a wrong offset!");
static_assert(offsetof(BFGVehicleDeformation_OnSkeletalHit, _hitResult) == 0x00001C, "Member 'BFGVehicleDeformation_OnSkeletalHit::_hitResult' has a wrong offset!");

// Function BFGCore.BFGVehicleDeformation.CheckHitValid
// 0x0018 (0x0018 - 0x0000)
struct BFGVehicleDeformation_CheckHitValid final
{
public:
	class AActor*                                 _pSelf;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOther;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVehicleDeformation_CheckHitValid) == 0x000008, "Wrong alignment on BFGVehicleDeformation_CheckHitValid");
static_assert(sizeof(BFGVehicleDeformation_CheckHitValid) == 0x000018, "Wrong size on BFGVehicleDeformation_CheckHitValid");
static_assert(offsetof(BFGVehicleDeformation_CheckHitValid, _pSelf) == 0x000000, "Member 'BFGVehicleDeformation_CheckHitValid::_pSelf' has a wrong offset!");
static_assert(offsetof(BFGVehicleDeformation_CheckHitValid, _pOther) == 0x000008, "Member 'BFGVehicleDeformation_CheckHitValid::_pOther' has a wrong offset!");
static_assert(offsetof(BFGVehicleDeformation_CheckHitValid, ReturnValue) == 0x000010, "Member 'BFGVehicleDeformation_CheckHitValid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_WorldLoaded.OnWorldLoaded
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_WorldLoaded_OnWorldLoaded final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_WorldLoaded_OnWorldLoaded) == 0x000008, "Wrong alignment on BFGEventTrigger_WorldLoaded_OnWorldLoaded");
static_assert(sizeof(BFGEventTrigger_WorldLoaded_OnWorldLoaded) == 0x000010, "Wrong size on BFGEventTrigger_WorldLoaded_OnWorldLoaded");
static_assert(offsetof(BFGEventTrigger_WorldLoaded_OnWorldLoaded, _pGameInstance) == 0x000000, "Member 'BFGEventTrigger_WorldLoaded_OnWorldLoaded::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_WorldLoaded_OnWorldLoaded, _pWorld) == 0x000008, "Member 'BFGEventTrigger_WorldLoaded_OnWorldLoaded::_pWorld' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_TextNotification.OnShowMessage
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_HUD_TextNotification_OnShowMessage final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBFGTextNotification_Severity                 Severity;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_HUD_TextNotification_OnShowMessage) == 0x000008, "Wrong alignment on BFGWidget_HUD_TextNotification_OnShowMessage");
static_assert(sizeof(BFGWidget_HUD_TextNotification_OnShowMessage) == 0x000020, "Wrong size on BFGWidget_HUD_TextNotification_OnShowMessage");
static_assert(offsetof(BFGWidget_HUD_TextNotification_OnShowMessage, Text) == 0x000000, "Member 'BFGWidget_HUD_TextNotification_OnShowMessage::Text' has a wrong offset!");
static_assert(offsetof(BFGWidget_HUD_TextNotification_OnShowMessage, Severity) == 0x000018, "Member 'BFGWidget_HUD_TextNotification_OnShowMessage::Severity' has a wrong offset!");

// Function BFGCore.BFGGameFlowStateManager.AddStateToStack
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowStateManager_AddStateToStack final
{
public:
	class UBFGGameFlowState*                      _pState;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bKeepCurrent;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowStateManager_AddStateToStack) == 0x000008, "Wrong alignment on BFGGameFlowStateManager_AddStateToStack");
static_assert(sizeof(BFGGameFlowStateManager_AddStateToStack) == 0x000010, "Wrong size on BFGGameFlowStateManager_AddStateToStack");
static_assert(offsetof(BFGGameFlowStateManager_AddStateToStack, _pState) == 0x000000, "Member 'BFGGameFlowStateManager_AddStateToStack::_pState' has a wrong offset!");
static_assert(offsetof(BFGGameFlowStateManager_AddStateToStack, _bKeepCurrent) == 0x000008, "Member 'BFGGameFlowStateManager_AddStateToStack::_bKeepCurrent' has a wrong offset!");

// Function BFGCore.BFGGameFlowStateManager.FindStateByType
// 0x0018 (0x0018 - 0x0000)
struct BFGGameFlowStateManager_FindStateByType final
{
public:
	const class UClass*                           _pClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPendingStates;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGGameFlowState*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowStateManager_FindStateByType) == 0x000008, "Wrong alignment on BFGGameFlowStateManager_FindStateByType");
static_assert(sizeof(BFGGameFlowStateManager_FindStateByType) == 0x000018, "Wrong size on BFGGameFlowStateManager_FindStateByType");
static_assert(offsetof(BFGGameFlowStateManager_FindStateByType, _pClass) == 0x000000, "Member 'BFGGameFlowStateManager_FindStateByType::_pClass' has a wrong offset!");
static_assert(offsetof(BFGGameFlowStateManager_FindStateByType, _bPendingStates) == 0x000008, "Member 'BFGGameFlowStateManager_FindStateByType::_bPendingStates' has a wrong offset!");
static_assert(offsetof(BFGGameFlowStateManager_FindStateByType, ReturnValue) == 0x000010, "Member 'BFGGameFlowStateManager_FindStateByType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowStateManager.ForceLeaveStatesUntil
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowStateManager_ForceLeaveStatesUntil final
{
public:
	class UBFGGameFlowState*                      _pState;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowStateManager_ForceLeaveStatesUntil) == 0x000008, "Wrong alignment on BFGGameFlowStateManager_ForceLeaveStatesUntil");
static_assert(sizeof(BFGGameFlowStateManager_ForceLeaveStatesUntil) == 0x000008, "Wrong size on BFGGameFlowStateManager_ForceLeaveStatesUntil");
static_assert(offsetof(BFGGameFlowStateManager_ForceLeaveStatesUntil, _pState) == 0x000000, "Member 'BFGGameFlowStateManager_ForceLeaveStatesUntil::_pState' has a wrong offset!");

// Function BFGCore.BFGGameFlowStateManager.GetBottomGameState
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowStateManager_GetBottomGameState final
{
public:
	class UBFGGameFlowState*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowStateManager_GetBottomGameState) == 0x000008, "Wrong alignment on BFGGameFlowStateManager_GetBottomGameState");
static_assert(sizeof(BFGGameFlowStateManager_GetBottomGameState) == 0x000008, "Wrong size on BFGGameFlowStateManager_GetBottomGameState");
static_assert(offsetof(BFGGameFlowStateManager_GetBottomGameState, ReturnValue) == 0x000000, "Member 'BFGGameFlowStateManager_GetBottomGameState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowStateManager.GetCurrentState
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowStateManager_GetCurrentState final
{
public:
	class UBFGGameFlowState*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowStateManager_GetCurrentState) == 0x000008, "Wrong alignment on BFGGameFlowStateManager_GetCurrentState");
static_assert(sizeof(BFGGameFlowStateManager_GetCurrentState) == 0x000008, "Wrong size on BFGGameFlowStateManager_GetCurrentState");
static_assert(offsetof(BFGGameFlowStateManager_GetCurrentState, ReturnValue) == 0x000000, "Member 'BFGGameFlowStateManager_GetCurrentState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowStateManager.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowStateManager_GetGameInstance final
{
public:
	class UBFGGameInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowStateManager_GetGameInstance) == 0x000008, "Wrong alignment on BFGGameFlowStateManager_GetGameInstance");
static_assert(sizeof(BFGGameFlowStateManager_GetGameInstance) == 0x000008, "Wrong size on BFGGameFlowStateManager_GetGameInstance");
static_assert(offsetof(BFGGameFlowStateManager_GetGameInstance, ReturnValue) == 0x000000, "Member 'BFGGameFlowStateManager_GetGameInstance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowStateManager.GetPreviousState
// 0x0008 (0x0008 - 0x0000)
struct BFGGameFlowStateManager_GetPreviousState final
{
public:
	class UBFGGameFlowState*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowStateManager_GetPreviousState) == 0x000008, "Wrong alignment on BFGGameFlowStateManager_GetPreviousState");
static_assert(sizeof(BFGGameFlowStateManager_GetPreviousState) == 0x000008, "Wrong size on BFGGameFlowStateManager_GetPreviousState");
static_assert(offsetof(BFGGameFlowStateManager_GetPreviousState, ReturnValue) == 0x000000, "Member 'BFGGameFlowStateManager_GetPreviousState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_AlertLevelReached.OnAlertLevelChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGEventTrigger_AlertLevelReached_OnAlertLevelChanged final
{
public:
	EBFGAlertSystemState                          _newState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_AlertLevelReached_OnAlertLevelChanged) == 0x000001, "Wrong alignment on BFGEventTrigger_AlertLevelReached_OnAlertLevelChanged");
static_assert(sizeof(BFGEventTrigger_AlertLevelReached_OnAlertLevelChanged) == 0x000001, "Wrong size on BFGEventTrigger_AlertLevelReached_OnAlertLevelChanged");
static_assert(offsetof(BFGEventTrigger_AlertLevelReached_OnAlertLevelChanged, _newState) == 0x000000, "Member 'BFGEventTrigger_AlertLevelReached_OnAlertLevelChanged::_newState' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_BumperVideos.OnApplicationPostInputKeyDownEvent
// 0x0038 (0x0038 - 0x0000)
struct BFGGameFlowState_BumperVideos_OnApplicationPostInputKeyDownEvent final
{
public:
	struct FKeyEvent                              _keyEvent;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_BumperVideos_OnApplicationPostInputKeyDownEvent) == 0x000008, "Wrong alignment on BFGGameFlowState_BumperVideos_OnApplicationPostInputKeyDownEvent");
static_assert(sizeof(BFGGameFlowState_BumperVideos_OnApplicationPostInputKeyDownEvent) == 0x000038, "Wrong size on BFGGameFlowState_BumperVideos_OnApplicationPostInputKeyDownEvent");
static_assert(offsetof(BFGGameFlowState_BumperVideos_OnApplicationPostInputKeyDownEvent, _keyEvent) == 0x000000, "Member 'BFGGameFlowState_BumperVideos_OnApplicationPostInputKeyDownEvent::_keyEvent' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_CortexScanVOPlayed.OnPlayedVO
// 0x0048 (0x0048 - 0x0000)
struct BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGCortexScanResponse                 _response;                                         // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UBFGCortexScanResponseSet*              _pResponseSet;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO) == 0x000008, "Wrong alignment on BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO");
static_assert(sizeof(BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO) == 0x000048, "Wrong size on BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO");
static_assert(offsetof(BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO, _pActor) == 0x000000, "Member 'BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO::_pActor' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO, _response) == 0x000008, "Member 'BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO::_response' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO, _pResponseSet) == 0x000040, "Member 'BFGEventTrigger_CortexScanVOPlayed_OnPlayedVO::_pResponseSet' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_EnterWater.OnFinishedTask
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_EnterWater_OnFinishedTask final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_EnterWater_OnFinishedTask) == 0x000008, "Wrong alignment on BFGEventTrigger_EnterWater_OnFinishedTask");
static_assert(sizeof(BFGEventTrigger_EnterWater_OnFinishedTask) == 0x000008, "Wrong size on BFGEventTrigger_EnterWater_OnFinishedTask");
static_assert(offsetof(BFGEventTrigger_EnterWater_OnFinishedTask, _pActor) == 0x000000, "Member 'BFGEventTrigger_EnterWater_OnFinishedTask::_pActor' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_FellOutOfWorld.OnFellOutOfWorld
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_FellOutOfWorld_OnFellOutOfWorld final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_FellOutOfWorld_OnFellOutOfWorld) == 0x000008, "Wrong alignment on BFGEventTrigger_FellOutOfWorld_OnFellOutOfWorld");
static_assert(sizeof(BFGEventTrigger_FellOutOfWorld_OnFellOutOfWorld) == 0x000008, "Wrong size on BFGEventTrigger_FellOutOfWorld_OnFellOutOfWorld");
static_assert(offsetof(BFGEventTrigger_FellOutOfWorld_OnFellOutOfWorld, _pActor) == 0x000000, "Member 'BFGEventTrigger_FellOutOfWorld_OnFellOutOfWorld::_pActor' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_InteractWith.OnInteract
// 0x0018 (0x0018 - 0x0000)
struct BFGEventTrigger_InteractWith_OnInteract final
{
public:
	class AActor*                                 _pUser;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pInteractWith;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _pFocusedOn;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_InteractWith_OnInteract) == 0x000008, "Wrong alignment on BFGEventTrigger_InteractWith_OnInteract");
static_assert(sizeof(BFGEventTrigger_InteractWith_OnInteract) == 0x000018, "Wrong size on BFGEventTrigger_InteractWith_OnInteract");
static_assert(offsetof(BFGEventTrigger_InteractWith_OnInteract, _pUser) == 0x000000, "Member 'BFGEventTrigger_InteractWith_OnInteract::_pUser' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_InteractWith_OnInteract, _pInteractWith) == 0x000008, "Member 'BFGEventTrigger_InteractWith_OnInteract::_pInteractWith' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_InteractWith_OnInteract, _pFocusedOn) == 0x000010, "Member 'BFGEventTrigger_InteractWith_OnInteract::_pFocusedOn' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_InteractWith.OnTickPlayerControllingUFO
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO final
{
public:
	class AActor*                                 _pPlayerCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pUFO;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO) == 0x000008, "Wrong alignment on BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO");
static_assert(sizeof(BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO) == 0x000010, "Wrong size on BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO");
static_assert(offsetof(BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO, _pPlayerCharacter) == 0x000000, "Member 'BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO::_pPlayerCharacter' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO, _pUFO) == 0x000008, "Member 'BFGEventTrigger_InteractWith_OnTickPlayerControllingUFO::_pUFO' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_LocateLayer.OnLocateEvent
// 0x0020 (0x0020 - 0x0000)
struct BFGEventTrigger_LocateLayer_OnLocateEvent final
{
public:
	EBFGLocateLayer_Operation                     _operation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGQuest_ElementLocateHint*            _pLocateElement;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _strSharedLayerIdentifier;                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_LocateLayer_OnLocateEvent) == 0x000008, "Wrong alignment on BFGEventTrigger_LocateLayer_OnLocateEvent");
static_assert(sizeof(BFGEventTrigger_LocateLayer_OnLocateEvent) == 0x000020, "Wrong size on BFGEventTrigger_LocateLayer_OnLocateEvent");
static_assert(offsetof(BFGEventTrigger_LocateLayer_OnLocateEvent, _operation) == 0x000000, "Member 'BFGEventTrigger_LocateLayer_OnLocateEvent::_operation' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_LocateLayer_OnLocateEvent, _pLocateElement) == 0x000008, "Member 'BFGEventTrigger_LocateLayer_OnLocateEvent::_pLocateElement' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_LocateLayer_OnLocateEvent, _strSharedLayerIdentifier) == 0x000010, "Member 'BFGEventTrigger_LocateLayer_OnLocateEvent::_strSharedLayerIdentifier' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_MentalAbility.OnUsedAbility
// 0x0020 (0x0020 - 0x0000)
struct BFGEventTrigger_MentalAbility_OnUsedAbility final
{
public:
	class AActor*                                 _pUser;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGMentalAbilityBase*                  _pAbility;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTarget;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMentalAbility_EventState                     _eState;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEventTrigger_MentalAbility_OnUsedAbility) == 0x000008, "Wrong alignment on BFGEventTrigger_MentalAbility_OnUsedAbility");
static_assert(sizeof(BFGEventTrigger_MentalAbility_OnUsedAbility) == 0x000020, "Wrong size on BFGEventTrigger_MentalAbility_OnUsedAbility");
static_assert(offsetof(BFGEventTrigger_MentalAbility_OnUsedAbility, _pUser) == 0x000000, "Member 'BFGEventTrigger_MentalAbility_OnUsedAbility::_pUser' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_MentalAbility_OnUsedAbility, _pAbility) == 0x000008, "Member 'BFGEventTrigger_MentalAbility_OnUsedAbility::_pAbility' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_MentalAbility_OnUsedAbility, _pTarget) == 0x000010, "Member 'BFGEventTrigger_MentalAbility_OnUsedAbility::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_MentalAbility_OnUsedAbility, _eState) == 0x000018, "Member 'BFGEventTrigger_MentalAbility_OnUsedAbility::_eState' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_OrbitalTransporter.OnTransportAttempt
// 0x0018 (0x0018 - 0x0000)
struct BFGEventTrigger_OrbitalTransporter_OnTransportAttempt final
{
public:
	class ABFGMissionOrbitalTransporter*          _pTransporter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bSuccess;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEventTrigger_OrbitalTransporter_OnTransportAttempt) == 0x000008, "Wrong alignment on BFGEventTrigger_OrbitalTransporter_OnTransportAttempt");
static_assert(sizeof(BFGEventTrigger_OrbitalTransporter_OnTransportAttempt) == 0x000018, "Wrong size on BFGEventTrigger_OrbitalTransporter_OnTransportAttempt");
static_assert(offsetof(BFGEventTrigger_OrbitalTransporter_OnTransportAttempt, _pTransporter) == 0x000000, "Member 'BFGEventTrigger_OrbitalTransporter_OnTransportAttempt::_pTransporter' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_OrbitalTransporter_OnTransportAttempt, _pTarget) == 0x000008, "Member 'BFGEventTrigger_OrbitalTransporter_OnTransportAttempt::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_OrbitalTransporter_OnTransportAttempt, _bSuccess) == 0x000010, "Member 'BFGEventTrigger_OrbitalTransporter_OnTransportAttempt::_bSuccess' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_PickupItem.OnPickupItem
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_PickupItem_OnPickupItem final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pItem;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_PickupItem_OnPickupItem) == 0x000008, "Wrong alignment on BFGEventTrigger_PickupItem_OnPickupItem");
static_assert(sizeof(BFGEventTrigger_PickupItem_OnPickupItem) == 0x000010, "Wrong size on BFGEventTrigger_PickupItem_OnPickupItem");
static_assert(offsetof(BFGEventTrigger_PickupItem_OnPickupItem, _pOwner) == 0x000000, "Member 'BFGEventTrigger_PickupItem_OnPickupItem::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_PickupItem_OnPickupItem, _pItem) == 0x000008, "Member 'BFGEventTrigger_PickupItem_OnPickupItem::_pItem' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelection.SetWorldState
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_MissionSelection_SetWorldState final
{
public:
	class UBFGMissionWorldState*                  _pWorldState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelection_SetWorldState) == 0x000008, "Wrong alignment on BFGWidget_Mothership_MissionSelection_SetWorldState");
static_assert(sizeof(BFGWidget_Mothership_MissionSelection_SetWorldState) == 0x000008, "Wrong size on BFGWidget_Mothership_MissionSelection_SetWorldState");
static_assert(offsetof(BFGWidget_Mothership_MissionSelection_SetWorldState, _pWorldState) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelection_SetWorldState::_pWorldState' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_MissionSelection.GetWorldState
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_MissionSelection_GetWorldState final
{
public:
	class UBFGMissionWorldState*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_MissionSelection_GetWorldState) == 0x000008, "Wrong alignment on BFGWidget_Mothership_MissionSelection_GetWorldState");
static_assert(sizeof(BFGWidget_Mothership_MissionSelection_GetWorldState) == 0x000008, "Wrong size on BFGWidget_Mothership_MissionSelection_GetWorldState");
static_assert(offsetof(BFGWidget_Mothership_MissionSelection_GetWorldState, ReturnValue) == 0x000000, "Member 'BFGWidget_Mothership_MissionSelection_GetWorldState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_ProximitySubgoalReached.OnProximitySubgoalReached
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached final
{
public:
	const class UBFGQuest_ProximityMonitor*       _pProximityMonitor;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iLimit;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached) == 0x000008, "Wrong alignment on BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached");
static_assert(sizeof(BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached) == 0x000010, "Wrong size on BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached");
static_assert(offsetof(BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached, _pProximityMonitor) == 0x000000, "Member 'BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached::_pProximityMonitor' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached, _iLimit) == 0x000008, "Member 'BFGEventTrigger_ProximitySubgoalReached_OnProximitySubgoalReached::_iLimit' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_ResourceValueCounted.ValueChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_ResourceValueCounted_ValueChanged final
{
public:
	class UBFGQuest_Element*                      _pElement;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fValueAdded;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FValueTotal;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_ResourceValueCounted_ValueChanged) == 0x000008, "Wrong alignment on BFGEventTrigger_ResourceValueCounted_ValueChanged");
static_assert(sizeof(BFGEventTrigger_ResourceValueCounted_ValueChanged) == 0x000010, "Wrong size on BFGEventTrigger_ResourceValueCounted_ValueChanged");
static_assert(offsetof(BFGEventTrigger_ResourceValueCounted_ValueChanged, _pElement) == 0x000000, "Member 'BFGEventTrigger_ResourceValueCounted_ValueChanged::_pElement' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_ResourceValueCounted_ValueChanged, _fValueAdded) == 0x000008, "Member 'BFGEventTrigger_ResourceValueCounted_ValueChanged::_fValueAdded' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_ResourceValueCounted_ValueChanged, FValueTotal) == 0x00000C, "Member 'BFGEventTrigger_ResourceValueCounted_ValueChanged::FValueTotal' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_SequenceFailed.OnNarrativeSequenceFailed
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_SequenceFailed_OnNarrativeSequenceFailed final
{
public:
	class UBFGNarrativeSequence*                  _pSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_SequenceFailed_OnNarrativeSequenceFailed) == 0x000008, "Wrong alignment on BFGEventTrigger_SequenceFailed_OnNarrativeSequenceFailed");
static_assert(sizeof(BFGEventTrigger_SequenceFailed_OnNarrativeSequenceFailed) == 0x000008, "Wrong size on BFGEventTrigger_SequenceFailed_OnNarrativeSequenceFailed");
static_assert(offsetof(BFGEventTrigger_SequenceFailed_OnNarrativeSequenceFailed, _pSequence) == 0x000000, "Member 'BFGEventTrigger_SequenceFailed_OnNarrativeSequenceFailed::_pSequence' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_SpawnFinished.OnSpawnFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_SpawnFinished_OnSpawnFinished final
{
public:
	class ABFGMissionSpawnManager*                _pManager;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_SpawnFinished_OnSpawnFinished) == 0x000008, "Wrong alignment on BFGEventTrigger_SpawnFinished_OnSpawnFinished");
static_assert(sizeof(BFGEventTrigger_SpawnFinished_OnSpawnFinished) == 0x000008, "Wrong size on BFGEventTrigger_SpawnFinished_OnSpawnFinished");
static_assert(offsetof(BFGEventTrigger_SpawnFinished_OnSpawnFinished, _pManager) == 0x000000, "Member 'BFGEventTrigger_SpawnFinished_OnSpawnFinished::_pManager' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_SpawnManagerLoaded.OnLoaded
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_SpawnManagerLoaded_OnLoaded final
{
public:
	class ABFGMissionSpawnManager*                _pSpawnManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_SpawnManagerLoaded_OnLoaded) == 0x000008, "Wrong alignment on BFGEventTrigger_SpawnManagerLoaded_OnLoaded");
static_assert(sizeof(BFGEventTrigger_SpawnManagerLoaded_OnLoaded) == 0x000008, "Wrong size on BFGEventTrigger_SpawnManagerLoaded_OnLoaded");
static_assert(offsetof(BFGEventTrigger_SpawnManagerLoaded_OnLoaded, _pSpawnManager) == 0x000000, "Member 'BFGEventTrigger_SpawnManagerLoaded_OnLoaded::_pSpawnManager' has a wrong offset!");

// Function BFGCore.BFGGameState.OnLevelStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGGameState_OnLevelStateChanged final
{
public:
	class UBFGStreamingLevelHandle*               _pLevelHandle;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsLoaded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameState_OnLevelStateChanged) == 0x000008, "Wrong alignment on BFGGameState_OnLevelStateChanged");
static_assert(sizeof(BFGGameState_OnLevelStateChanged) == 0x000010, "Wrong size on BFGGameState_OnLevelStateChanged");
static_assert(offsetof(BFGGameState_OnLevelStateChanged, _pLevelHandle) == 0x000000, "Member 'BFGGameState_OnLevelStateChanged::_pLevelHandle' has a wrong offset!");
static_assert(offsetof(BFGGameState_OnLevelStateChanged, _bIsLoaded) == 0x000008, "Member 'BFGGameState_OnLevelStateChanged::_bIsLoaded' has a wrong offset!");

// Function BFGCore.BFGGameState.PushGameActorPause
// 0x0001 (0x0001 - 0x0000)
struct BFGGameState_PushGameActorPause final
{
public:
	bool                                          _bGamePaused;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_PushGameActorPause) == 0x000001, "Wrong alignment on BFGGameState_PushGameActorPause");
static_assert(sizeof(BFGGameState_PushGameActorPause) == 0x000001, "Wrong size on BFGGameState_PushGameActorPause");
static_assert(offsetof(BFGGameState_PushGameActorPause, _bGamePaused) == 0x000000, "Member 'BFGGameState_PushGameActorPause::_bGamePaused' has a wrong offset!");

// Function BFGCore.BFGGameState.AwardAchievement
// 0x0018 (0x0018 - 0x0000)
struct BFGGameState_AwardAchievement final
{
public:
	class UWorld*                                 _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _nAchievementID;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAchievementProgress;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameState_AwardAchievement) == 0x000008, "Wrong alignment on BFGGameState_AwardAchievement");
static_assert(sizeof(BFGGameState_AwardAchievement) == 0x000018, "Wrong size on BFGGameState_AwardAchievement");
static_assert(offsetof(BFGGameState_AwardAchievement, _pWorldContext) == 0x000000, "Member 'BFGGameState_AwardAchievement::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGGameState_AwardAchievement, _nAchievementID) == 0x000008, "Member 'BFGGameState_AwardAchievement::_nAchievementID' has a wrong offset!");
static_assert(offsetof(BFGGameState_AwardAchievement, _fAchievementProgress) == 0x000010, "Member 'BFGGameState_AwardAchievement::_fAchievementProgress' has a wrong offset!");

// Function BFGCore.BFGGameState.FindGameSystem
// 0x0010 (0x0010 - 0x0000)
struct BFGGameState_FindGameSystem final
{
public:
	TSubclassOf<class UBFGGameSystem>             _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGGameSystem*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_FindGameSystem) == 0x000008, "Wrong alignment on BFGGameState_FindGameSystem");
static_assert(sizeof(BFGGameState_FindGameSystem) == 0x000010, "Wrong size on BFGGameState_FindGameSystem");
static_assert(offsetof(BFGGameState_FindGameSystem, _pClass) == 0x000000, "Member 'BFGGameState_FindGameSystem::_pClass' has a wrong offset!");
static_assert(offsetof(BFGGameState_FindGameSystem, ReturnValue) == 0x000008, "Member 'BFGGameState_FindGameSystem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetAchievementManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetAchievementManager final
{
public:
	class UBFGAchievementManager*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetAchievementManager) == 0x000008, "Wrong alignment on BFGGameState_GetAchievementManager");
static_assert(sizeof(BFGGameState_GetAchievementManager) == 0x000008, "Wrong size on BFGGameState_GetAchievementManager");
static_assert(offsetof(BFGGameState_GetAchievementManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetAchievementManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetActorActivationManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetActorActivationManager final
{
public:
	class UBFGActorActivationManager*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetActorActivationManager) == 0x000008, "Wrong alignment on BFGGameState_GetActorActivationManager");
static_assert(sizeof(BFGGameState_GetActorActivationManager) == 0x000008, "Wrong size on BFGGameState_GetActorActivationManager");
static_assert(offsetof(BFGGameState_GetActorActivationManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetActorActivationManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetAimAssistManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetAimAssistManager final
{
public:
	class UBFGAimAssistManager*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetAimAssistManager) == 0x000008, "Wrong alignment on BFGGameState_GetAimAssistManager");
static_assert(sizeof(BFGGameState_GetAimAssistManager) == 0x000008, "Wrong size on BFGGameState_GetAimAssistManager");
static_assert(offsetof(BFGGameState_GetAimAssistManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetAimAssistManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetAISystem
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetAISystem final
{
public:
	class UBFGAISystem*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetAISystem) == 0x000008, "Wrong alignment on BFGGameState_GetAISystem");
static_assert(sizeof(BFGGameState_GetAISystem) == 0x000008, "Wrong size on BFGGameState_GetAISystem");
static_assert(offsetof(BFGGameState_GetAISystem, ReturnValue) == 0x000000, "Member 'BFGGameState_GetAISystem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetAlertSystemManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetAlertSystemManager final
{
public:
	class UBFGAlertSystemManager*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetAlertSystemManager) == 0x000008, "Wrong alignment on BFGGameState_GetAlertSystemManager");
static_assert(sizeof(BFGGameState_GetAlertSystemManager) == 0x000008, "Wrong size on BFGGameState_GetAlertSystemManager");
static_assert(offsetof(BFGGameState_GetAlertSystemManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetAlertSystemManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetAmbientSoundManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetAmbientSoundManager final
{
public:
	class UBFGAmbientSoundManager*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetAmbientSoundManager) == 0x000008, "Wrong alignment on BFGGameState_GetAmbientSoundManager");
static_assert(sizeof(BFGGameState_GetAmbientSoundManager) == 0x000008, "Wrong size on BFGGameState_GetAmbientSoundManager");
static_assert(offsetof(BFGGameState_GetAmbientSoundManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetAmbientSoundManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetAnimSharingSetup
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetAnimSharingSetup final
{
public:
	class UAnimationSharingSetup*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetAnimSharingSetup) == 0x000008, "Wrong alignment on BFGGameState_GetAnimSharingSetup");
static_assert(sizeof(BFGGameState_GetAnimSharingSetup) == 0x000008, "Wrong size on BFGGameState_GetAnimSharingSetup");
static_assert(offsetof(BFGGameState_GetAnimSharingSetup, ReturnValue) == 0x000000, "Member 'BFGGameState_GetAnimSharingSetup::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetBossHealthHUDManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetBossHealthHUDManager final
{
public:
	class UBFGBossHealthHUDManager*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetBossHealthHUDManager) == 0x000008, "Wrong alignment on BFGGameState_GetBossHealthHUDManager");
static_assert(sizeof(BFGGameState_GetBossHealthHUDManager) == 0x000008, "Wrong size on BFGGameState_GetBossHealthHUDManager");
static_assert(offsetof(BFGGameState_GetBossHealthHUDManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetBossHealthHUDManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetBroadphaseManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetBroadphaseManager final
{
public:
	class UBFGBroadphaseManager*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetBroadphaseManager) == 0x000008, "Wrong alignment on BFGGameState_GetBroadphaseManager");
static_assert(sizeof(BFGGameState_GetBroadphaseManager) == 0x000008, "Wrong size on BFGGameState_GetBroadphaseManager");
static_assert(offsetof(BFGGameState_GetBroadphaseManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetBroadphaseManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetBuildingPropsManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetBuildingPropsManager final
{
public:
	class UBFGBuildingPropsManager*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetBuildingPropsManager) == 0x000008, "Wrong alignment on BFGGameState_GetBuildingPropsManager");
static_assert(sizeof(BFGGameState_GetBuildingPropsManager) == 0x000008, "Wrong size on BFGGameState_GetBuildingPropsManager");
static_assert(offsetof(BFGGameState_GetBuildingPropsManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetBuildingPropsManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetBurningGroundManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetBurningGroundManager final
{
public:
	class UBFGBurningGroundManager*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetBurningGroundManager) == 0x000008, "Wrong alignment on BFGGameState_GetBurningGroundManager");
static_assert(sizeof(BFGGameState_GetBurningGroundManager) == 0x000008, "Wrong size on BFGGameState_GetBurningGroundManager");
static_assert(offsetof(BFGGameState_GetBurningGroundManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetBurningGroundManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetCSPManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetCSPManager final
{
public:
	class UBFGChallengeStartingPointManager*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetCSPManager) == 0x000008, "Wrong alignment on BFGGameState_GetCSPManager");
static_assert(sizeof(BFGGameState_GetCSPManager) == 0x000008, "Wrong size on BFGGameState_GetCSPManager");
static_assert(offsetof(BFGGameState_GetCSPManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetCSPManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetCutscenePlaybackManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetCutscenePlaybackManager final
{
public:
	class UBFGSequencePlaybackManager*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetCutscenePlaybackManager) == 0x000008, "Wrong alignment on BFGGameState_GetCutscenePlaybackManager");
static_assert(sizeof(BFGGameState_GetCutscenePlaybackManager) == 0x000008, "Wrong size on BFGGameState_GetCutscenePlaybackManager");
static_assert(offsetof(BFGGameState_GetCutscenePlaybackManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetCutscenePlaybackManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetDestructionStreamingManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetDestructionStreamingManager final
{
public:
	class UBFGDestructionStreamingManager*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetDestructionStreamingManager) == 0x000008, "Wrong alignment on BFGGameState_GetDestructionStreamingManager");
static_assert(sizeof(BFGGameState_GetDestructionStreamingManager) == 0x000008, "Wrong size on BFGGameState_GetDestructionStreamingManager");
static_assert(offsetof(BFGGameState_GetDestructionStreamingManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetDestructionStreamingManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetDynamicStaticObjectManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetDynamicStaticObjectManager final
{
public:
	class UBFGDynamicStaticObjectManager*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetDynamicStaticObjectManager) == 0x000008, "Wrong alignment on BFGGameState_GetDynamicStaticObjectManager");
static_assert(sizeof(BFGGameState_GetDynamicStaticObjectManager) == 0x000008, "Wrong size on BFGGameState_GetDynamicStaticObjectManager");
static_assert(offsetof(BFGGameState_GetDynamicStaticObjectManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetDynamicStaticObjectManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetEventManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetEventManager final
{
public:
	class UBFGEventManager*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetEventManager) == 0x000008, "Wrong alignment on BFGGameState_GetEventManager");
static_assert(sizeof(BFGGameState_GetEventManager) == 0x000008, "Wrong size on BFGGameState_GetEventManager");
static_assert(offsetof(BFGGameState_GetEventManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetEventManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetHighlightableSceneObjectManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetHighlightableSceneObjectManager final
{
public:
	class UBFGHighlightableSceneObjectManager*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetHighlightableSceneObjectManager) == 0x000008, "Wrong alignment on BFGGameState_GetHighlightableSceneObjectManager");
static_assert(sizeof(BFGGameState_GetHighlightableSceneObjectManager) == 0x000008, "Wrong size on BFGGameState_GetHighlightableSceneObjectManager");
static_assert(offsetof(BFGGameState_GetHighlightableSceneObjectManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetHighlightableSceneObjectManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetHUDDataHub
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetHUDDataHub final
{
public:
	class UBFGDataHub*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetHUDDataHub) == 0x000008, "Wrong alignment on BFGGameState_GetHUDDataHub");
static_assert(sizeof(BFGGameState_GetHUDDataHub) == 0x000008, "Wrong size on BFGGameState_GetHUDDataHub");
static_assert(offsetof(BFGGameState_GetHUDDataHub, ReturnValue) == 0x000000, "Member 'BFGGameState_GetHUDDataHub::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetInCredits
// 0x0001 (0x0001 - 0x0000)
struct BFGGameState_GetInCredits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetInCredits) == 0x000001, "Wrong alignment on BFGGameState_GetInCredits");
static_assert(sizeof(BFGGameState_GetInCredits) == 0x000001, "Wrong size on BFGGameState_GetInCredits");
static_assert(offsetof(BFGGameState_GetInCredits, ReturnValue) == 0x000000, "Member 'BFGGameState_GetInCredits::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetInputRebindingSystem
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetInputRebindingSystem final
{
public:
	class UBFGInputRebindingSystem*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetInputRebindingSystem) == 0x000008, "Wrong alignment on BFGGameState_GetInputRebindingSystem");
static_assert(sizeof(BFGGameState_GetInputRebindingSystem) == 0x000008, "Wrong size on BFGGameState_GetInputRebindingSystem");
static_assert(offsetof(BFGGameState_GetInputRebindingSystem, ReturnValue) == 0x000000, "Member 'BFGGameState_GetInputRebindingSystem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetInterpolationManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetInterpolationManager final
{
public:
	class UBFGInterpolationManager*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetInterpolationManager) == 0x000008, "Wrong alignment on BFGGameState_GetInterpolationManager");
static_assert(sizeof(BFGGameState_GetInterpolationManager) == 0x000008, "Wrong size on BFGGameState_GetInterpolationManager");
static_assert(offsetof(BFGGameState_GetInterpolationManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetInterpolationManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetLockOnManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetLockOnManager final
{
public:
	class UBFGLockOnManager*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetLockOnManager) == 0x000008, "Wrong alignment on BFGGameState_GetLockOnManager");
static_assert(sizeof(BFGGameState_GetLockOnManager) == 0x000008, "Wrong size on BFGGameState_GetLockOnManager");
static_assert(offsetof(BFGGameState_GetLockOnManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetLockOnManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetMothershipTransitionManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetMothershipTransitionManager final
{
public:
	class UBFGMothershipTransitionManager*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetMothershipTransitionManager) == 0x000008, "Wrong alignment on BFGGameState_GetMothershipTransitionManager");
static_assert(sizeof(BFGGameState_GetMothershipTransitionManager) == 0x000008, "Wrong size on BFGGameState_GetMothershipTransitionManager");
static_assert(offsetof(BFGGameState_GetMothershipTransitionManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetMothershipTransitionManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetObjectiveMarkerSystem
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetObjectiveMarkerSystem final
{
public:
	class UBFGObjectiveMarkerSystem*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetObjectiveMarkerSystem) == 0x000008, "Wrong alignment on BFGGameState_GetObjectiveMarkerSystem");
static_assert(sizeof(BFGGameState_GetObjectiveMarkerSystem) == 0x000008, "Wrong size on BFGGameState_GetObjectiveMarkerSystem");
static_assert(offsetof(BFGGameState_GetObjectiveMarkerSystem, ReturnValue) == 0x000000, "Member 'BFGGameState_GetObjectiveMarkerSystem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetObjectRespawnManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetObjectRespawnManager final
{
public:
	class UBFGObjectRespawnManager*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetObjectRespawnManager) == 0x000008, "Wrong alignment on BFGGameState_GetObjectRespawnManager");
static_assert(sizeof(BFGGameState_GetObjectRespawnManager) == 0x000008, "Wrong size on BFGGameState_GetObjectRespawnManager");
static_assert(offsetof(BFGGameState_GetObjectRespawnManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetObjectRespawnManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetOceanManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetOceanManager final
{
public:
	class UBFGOceanManager*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetOceanManager) == 0x000008, "Wrong alignment on BFGGameState_GetOceanManager");
static_assert(sizeof(BFGGameState_GetOceanManager) == 0x000008, "Wrong size on BFGGameState_GetOceanManager");
static_assert(offsetof(BFGGameState_GetOceanManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetOceanManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetOverheadWidgetManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetOverheadWidgetManager final
{
public:
	class UBFGOverheadWidgetManager*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetOverheadWidgetManager) == 0x000008, "Wrong alignment on BFGGameState_GetOverheadWidgetManager");
static_assert(sizeof(BFGGameState_GetOverheadWidgetManager) == 0x000008, "Wrong size on BFGGameState_GetOverheadWidgetManager");
static_assert(offsetof(BFGGameState_GetOverheadWidgetManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetOverheadWidgetManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetPhotographySystem
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetPhotographySystem final
{
public:
	class UBFGPhotographySystem*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetPhotographySystem) == 0x000008, "Wrong alignment on BFGGameState_GetPhotographySystem");
static_assert(sizeof(BFGGameState_GetPhotographySystem) == 0x000008, "Wrong size on BFGGameState_GetPhotographySystem");
static_assert(offsetof(BFGGameState_GetPhotographySystem, ReturnValue) == 0x000000, "Member 'BFGGameState_GetPhotographySystem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetQuestManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetQuestManager final
{
public:
	class UBFGQuest_Manager*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetQuestManager) == 0x000008, "Wrong alignment on BFGGameState_GetQuestManager");
static_assert(sizeof(BFGGameState_GetQuestManager) == 0x000008, "Wrong size on BFGGameState_GetQuestManager");
static_assert(offsetof(BFGGameState_GetQuestManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetQuestManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetRadarManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetRadarManager final
{
public:
	class UBFGRadarManager*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetRadarManager) == 0x000008, "Wrong alignment on BFGGameState_GetRadarManager");
static_assert(sizeof(BFGGameState_GetRadarManager) == 0x000008, "Wrong size on BFGGameState_GetRadarManager");
static_assert(offsetof(BFGGameState_GetRadarManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetRadarManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetReadTextureManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetReadTextureManager final
{
public:
	class UBFGReadTextureManager*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetReadTextureManager) == 0x000008, "Wrong alignment on BFGGameState_GetReadTextureManager");
static_assert(sizeof(BFGGameState_GetReadTextureManager) == 0x000008, "Wrong size on BFGGameState_GetReadTextureManager");
static_assert(offsetof(BFGGameState_GetReadTextureManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetReadTextureManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetSpawnPoolManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetSpawnPoolManager final
{
public:
	class UBFGSpawnPoolManager*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetSpawnPoolManager) == 0x000008, "Wrong alignment on BFGGameState_GetSpawnPoolManager");
static_assert(sizeof(BFGGameState_GetSpawnPoolManager) == 0x000008, "Wrong size on BFGGameState_GetSpawnPoolManager");
static_assert(offsetof(BFGGameState_GetSpawnPoolManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetSpawnPoolManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetStatisticsManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetStatisticsManager final
{
public:
	class UBFGStatisticsManager*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetStatisticsManager) == 0x000008, "Wrong alignment on BFGGameState_GetStatisticsManager");
static_assert(sizeof(BFGGameState_GetStatisticsManager) == 0x000008, "Wrong size on BFGGameState_GetStatisticsManager");
static_assert(offsetof(BFGGameState_GetStatisticsManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetStatisticsManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetStreamingLevelManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetStreamingLevelManager final
{
public:
	class UBFGStreamingLevelManager*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetStreamingLevelManager) == 0x000008, "Wrong alignment on BFGGameState_GetStreamingLevelManager");
static_assert(sizeof(BFGGameState_GetStreamingLevelManager) == 0x000008, "Wrong size on BFGGameState_GetStreamingLevelManager");
static_assert(offsetof(BFGGameState_GetStreamingLevelManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetStreamingLevelManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetTimeDilationManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetTimeDilationManager final
{
public:
	class UBFGTimeDilationManager*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetTimeDilationManager) == 0x000008, "Wrong alignment on BFGGameState_GetTimeDilationManager");
static_assert(sizeof(BFGGameState_GetTimeDilationManager) == 0x000008, "Wrong size on BFGGameState_GetTimeDilationManager");
static_assert(offsetof(BFGGameState_GetTimeDilationManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetTimeDilationManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetTrafficCrowdManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetTrafficCrowdManager final
{
public:
	class UBFGTrafficCrowdManager*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetTrafficCrowdManager) == 0x000008, "Wrong alignment on BFGGameState_GetTrafficCrowdManager");
static_assert(sizeof(BFGGameState_GetTrafficCrowdManager) == 0x000008, "Wrong size on BFGGameState_GetTrafficCrowdManager");
static_assert(offsetof(BFGGameState_GetTrafficCrowdManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetTrafficCrowdManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetTransmogrifyLootManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetTransmogrifyLootManager final
{
public:
	class UBFGTransmogrifyLootManager*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetTransmogrifyLootManager) == 0x000008, "Wrong alignment on BFGGameState_GetTransmogrifyLootManager");
static_assert(sizeof(BFGGameState_GetTransmogrifyLootManager) == 0x000008, "Wrong size on BFGGameState_GetTransmogrifyLootManager");
static_assert(offsetof(BFGGameState_GetTransmogrifyLootManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetTransmogrifyLootManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetTutorialManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetTutorialManager final
{
public:
	class UBFGTutorialManager*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetTutorialManager) == 0x000008, "Wrong alignment on BFGGameState_GetTutorialManager");
static_assert(sizeof(BFGGameState_GetTutorialManager) == 0x000008, "Wrong size on BFGGameState_GetTutorialManager");
static_assert(offsetof(BFGGameState_GetTutorialManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetTutorialManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetUFOManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetUFOManager final
{
public:
	class UBFGUFOManager*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetUFOManager) == 0x000008, "Wrong alignment on BFGGameState_GetUFOManager");
static_assert(sizeof(BFGGameState_GetUFOManager) == 0x000008, "Wrong size on BFGGameState_GetUFOManager");
static_assert(offsetof(BFGGameState_GetUFOManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetUFOManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetVariableMirror
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetVariableMirror final
{
public:
	class UBFGVariableMirror*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetVariableMirror) == 0x000008, "Wrong alignment on BFGGameState_GetVariableMirror");
static_assert(sizeof(BFGGameState_GetVariableMirror) == 0x000008, "Wrong size on BFGGameState_GetVariableMirror");
static_assert(offsetof(BFGGameState_GetVariableMirror, ReturnValue) == 0x000000, "Member 'BFGGameState_GetVariableMirror::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetVirtualCrowdManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetVirtualCrowdManager final
{
public:
	class UBFGVirtualCrowdManager*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetVirtualCrowdManager) == 0x000008, "Wrong alignment on BFGGameState_GetVirtualCrowdManager");
static_assert(sizeof(BFGGameState_GetVirtualCrowdManager) == 0x000008, "Wrong size on BFGGameState_GetVirtualCrowdManager");
static_assert(offsetof(BFGGameState_GetVirtualCrowdManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetVirtualCrowdManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetVoiceoverSystem
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetVoiceoverSystem final
{
public:
	class UBFGVoiceoverSystem*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetVoiceoverSystem) == 0x000008, "Wrong alignment on BFGGameState_GetVoiceoverSystem");
static_assert(sizeof(BFGGameState_GetVoiceoverSystem) == 0x000008, "Wrong size on BFGGameState_GetVoiceoverSystem");
static_assert(offsetof(BFGGameState_GetVoiceoverSystem, ReturnValue) == 0x000000, "Member 'BFGGameState_GetVoiceoverSystem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetWaterManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetWaterManager final
{
public:
	class UBFGWaterManager*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetWaterManager) == 0x000008, "Wrong alignment on BFGGameState_GetWaterManager");
static_assert(sizeof(BFGGameState_GetWaterManager) == 0x000008, "Wrong size on BFGGameState_GetWaterManager");
static_assert(offsetof(BFGGameState_GetWaterManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetWaterManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameState.GetWidgetPoolManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameState_GetWidgetPoolManager final
{
public:
	class UBFGWidgetPoolManager*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameState_GetWidgetPoolManager) == 0x000008, "Wrong alignment on BFGGameState_GetWidgetPoolManager");
static_assert(sizeof(BFGGameState_GetWidgetPoolManager) == 0x000008, "Wrong size on BFGGameState_GetWidgetPoolManager");
static_assert(offsetof(BFGGameState_GetWidgetPoolManager, ReturnValue) == 0x000000, "Member 'BFGGameState_GetWidgetPoolManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_TimerSubgoalReached.OnTimerSubgoalReached
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached final
{
public:
	const class UBFGQuest_Timer*                  _pTimer;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              _tsLimit;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached) == 0x000008, "Wrong alignment on BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached");
static_assert(sizeof(BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached) == 0x000010, "Wrong size on BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached");
static_assert(offsetof(BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached, _pTimer) == 0x000000, "Member 'BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached::_pTimer' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached, _tsLimit) == 0x000008, "Member 'BFGEventTrigger_TimerSubgoalReached_OnTimerSubgoalReached::_tsLimit' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_VariableChangeValues.OnVariableValueChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGEventTrigger_VariableChangeValues_OnVariableValueChanged final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _oldValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _newValue;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_VariableChangeValues_OnVariableValueChanged) == 0x000008, "Wrong alignment on BFGEventTrigger_VariableChangeValues_OnVariableValueChanged");
static_assert(sizeof(BFGEventTrigger_VariableChangeValues_OnVariableValueChanged) == 0x000018, "Wrong size on BFGEventTrigger_VariableChangeValues_OnVariableValueChanged");
static_assert(offsetof(BFGEventTrigger_VariableChangeValues_OnVariableValueChanged, _pVarMirror) == 0x000000, "Member 'BFGEventTrigger_VariableChangeValues_OnVariableValueChanged::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_VariableChangeValues_OnVariableValueChanged, _pVariable) == 0x000008, "Member 'BFGEventTrigger_VariableChangeValues_OnVariableValueChanged::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_VariableChangeValues_OnVariableValueChanged, _oldValue) == 0x000010, "Member 'BFGEventTrigger_VariableChangeValues_OnVariableValueChanged::_oldValue' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_VariableChangeValues_OnVariableValueChanged, _newValue) == 0x000014, "Member 'BFGEventTrigger_VariableChangeValues_OnVariableValueChanged::_newValue' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_WaveStarted.OnWaveStarted
// 0x0008 (0x0008 - 0x0000)
struct BFGEventTrigger_WaveStarted_OnWaveStarted final
{
public:
	class ABFGMissionSpawnManager*                _pSpawnManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_WaveStarted_OnWaveStarted) == 0x000008, "Wrong alignment on BFGEventTrigger_WaveStarted_OnWaveStarted");
static_assert(sizeof(BFGEventTrigger_WaveStarted_OnWaveStarted) == 0x000008, "Wrong size on BFGEventTrigger_WaveStarted_OnWaveStarted");
static_assert(offsetof(BFGEventTrigger_WaveStarted_OnWaveStarted, _pSpawnManager) == 0x000000, "Member 'BFGEventTrigger_WaveStarted_OnWaveStarted::_pSpawnManager' has a wrong offset!");

// Function BFGCore.BFGEventTrigger_GameStart.OnGameStart
// 0x0010 (0x0010 - 0x0000)
struct BFGEventTrigger_GameStart_OnGameStart final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGEventTrigger_GameStart_OnGameStart) == 0x000008, "Wrong alignment on BFGEventTrigger_GameStart_OnGameStart");
static_assert(sizeof(BFGEventTrigger_GameStart_OnGameStart) == 0x000010, "Wrong size on BFGEventTrigger_GameStart_OnGameStart");
static_assert(offsetof(BFGEventTrigger_GameStart_OnGameStart, _pGameInstance) == 0x000000, "Member 'BFGEventTrigger_GameStart_OnGameStart::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGEventTrigger_GameStart_OnGameStart, _pWorld) == 0x000008, "Member 'BFGEventTrigger_GameStart_OnGameStart::_pWorld' has a wrong offset!");

// Function BFGCore.BFGFadeSystem.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BFGFadeSystem_GetGameInstance final
{
public:
	class UBFGGameInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGFadeSystem_GetGameInstance) == 0x000008, "Wrong alignment on BFGFadeSystem_GetGameInstance");
static_assert(sizeof(BFGFadeSystem_GetGameInstance) == 0x000008, "Wrong size on BFGFadeSystem_GetGameInstance");
static_assert(offsetof(BFGFadeSystem_GetGameInstance, ReturnValue) == 0x000000, "Member 'BFGFadeSystem_GetGameInstance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGFoliageUtils.FindFoliageInSphere
// 0x0040 (0x0040 - 0x0000)
struct BFGFoliageUtils_FindFoliageInSphere final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBFGFoliageComponentInstancePair> _apResult;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                _vOrigin;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fRadius;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pIgnoreActor;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 _pOnlyFoliageComponentClass;                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGFoliageUtils_FindFoliageInSphere) == 0x000008, "Wrong alignment on BFGFoliageUtils_FindFoliageInSphere");
static_assert(sizeof(BFGFoliageUtils_FindFoliageInSphere) == 0x000040, "Wrong size on BFGFoliageUtils_FindFoliageInSphere");
static_assert(offsetof(BFGFoliageUtils_FindFoliageInSphere, WorldContextObject) == 0x000000, "Member 'BFGFoliageUtils_FindFoliageInSphere::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGFoliageUtils_FindFoliageInSphere, _apResult) == 0x000008, "Member 'BFGFoliageUtils_FindFoliageInSphere::_apResult' has a wrong offset!");
static_assert(offsetof(BFGFoliageUtils_FindFoliageInSphere, _vOrigin) == 0x000018, "Member 'BFGFoliageUtils_FindFoliageInSphere::_vOrigin' has a wrong offset!");
static_assert(offsetof(BFGFoliageUtils_FindFoliageInSphere, _fRadius) == 0x000024, "Member 'BFGFoliageUtils_FindFoliageInSphere::_fRadius' has a wrong offset!");
static_assert(offsetof(BFGFoliageUtils_FindFoliageInSphere, _pIgnoreActor) == 0x000028, "Member 'BFGFoliageUtils_FindFoliageInSphere::_pIgnoreActor' has a wrong offset!");
static_assert(offsetof(BFGFoliageUtils_FindFoliageInSphere, _pOnlyFoliageComponentClass) == 0x000030, "Member 'BFGFoliageUtils_FindFoliageInSphere::_pOnlyFoliageComponentClass' has a wrong offset!");
static_assert(offsetof(BFGFoliageUtils_FindFoliageInSphere, ReturnValue) == 0x000038, "Member 'BFGFoliageUtils_FindFoliageInSphere::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGFoliageUtils.MakeStableNameForFoliageInstance
// 0x0018 (0x0018 - 0x0000)
struct BFGFoliageUtils_MakeStableNameForFoliageInstance final
{
public:
	const class UFoliageInstancedStaticMeshComponent* _pFoliageComponent;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iInstanceIndex;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGFoliageUtils_MakeStableNameForFoliageInstance) == 0x000008, "Wrong alignment on BFGFoliageUtils_MakeStableNameForFoliageInstance");
static_assert(sizeof(BFGFoliageUtils_MakeStableNameForFoliageInstance) == 0x000018, "Wrong size on BFGFoliageUtils_MakeStableNameForFoliageInstance");
static_assert(offsetof(BFGFoliageUtils_MakeStableNameForFoliageInstance, _pFoliageComponent) == 0x000000, "Member 'BFGFoliageUtils_MakeStableNameForFoliageInstance::_pFoliageComponent' has a wrong offset!");
static_assert(offsetof(BFGFoliageUtils_MakeStableNameForFoliageInstance, _iInstanceIndex) == 0x000008, "Member 'BFGFoliageUtils_MakeStableNameForFoliageInstance::_iInstanceIndex' has a wrong offset!");
static_assert(offsetof(BFGFoliageUtils_MakeStableNameForFoliageInstance, ReturnValue) == 0x00000C, "Member 'BFGFoliageUtils_MakeStableNameForFoliageInstance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_BumperVideo.SetGameFlowState
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_BumperVideo_SetGameFlowState final
{
public:
	class UBFGGameFlowState_BumperVideos*         _pGameFlowState;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_BumperVideo_SetGameFlowState) == 0x000008, "Wrong alignment on BFGWidget_BumperVideo_SetGameFlowState");
static_assert(sizeof(BFGWidget_BumperVideo_SetGameFlowState) == 0x000008, "Wrong size on BFGWidget_BumperVideo_SetGameFlowState");
static_assert(offsetof(BFGWidget_BumperVideo_SetGameFlowState, _pGameFlowState) == 0x000000, "Member 'BFGWidget_BumperVideo_SetGameFlowState::_pGameFlowState' has a wrong offset!");

// Function BFGCore.BFGWidget_Cutscene.SetGameFlowState
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Cutscene_SetGameFlowState final
{
public:
	class UBFGGameFlowState_Cutscene*             _pGameFlowState;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Cutscene_SetGameFlowState) == 0x000008, "Wrong alignment on BFGWidget_Cutscene_SetGameFlowState");
static_assert(sizeof(BFGWidget_Cutscene_SetGameFlowState) == 0x000008, "Wrong size on BFGWidget_Cutscene_SetGameFlowState");
static_assert(offsetof(BFGWidget_Cutscene_SetGameFlowState, _pGameFlowState) == 0x000000, "Member 'BFGWidget_Cutscene_SetGameFlowState::_pGameFlowState' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_LoadGame.StartLoadGame
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_LoadGame_StartLoadGame final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_LoadGame_StartLoadGame) == 0x000008, "Wrong alignment on BFGGameFlowState_LoadGame_StartLoadGame");
static_assert(sizeof(BFGGameFlowState_LoadGame_StartLoadGame) == 0x000010, "Wrong size on BFGGameFlowState_LoadGame_StartLoadGame");
static_assert(offsetof(BFGGameFlowState_LoadGame_StartLoadGame, _pGameInstance) == 0x000000, "Member 'BFGGameFlowState_LoadGame_StartLoadGame::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadGame_StartLoadGame, _iSlot) == 0x000008, "Member 'BFGGameFlowState_LoadGame_StartLoadGame::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadGame_StartLoadGame, ReturnValue) == 0x00000C, "Member 'BFGGameFlowState_LoadGame_StartLoadGame::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_LoadGame.OnSaveSystemActionComplete
// 0x0018 (0x0018 - 0x0000)
struct BFGGameFlowState_LoadGame_OnSaveSystemActionComplete final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGSaveSystem_ActionResult                   _result;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_LoadGame_OnSaveSystemActionComplete) == 0x000008, "Wrong alignment on BFGGameFlowState_LoadGame_OnSaveSystemActionComplete");
static_assert(sizeof(BFGGameFlowState_LoadGame_OnSaveSystemActionComplete) == 0x000018, "Wrong size on BFGGameFlowState_LoadGame_OnSaveSystemActionComplete");
static_assert(offsetof(BFGGameFlowState_LoadGame_OnSaveSystemActionComplete, _pSaveSystem) == 0x000000, "Member 'BFGGameFlowState_LoadGame_OnSaveSystemActionComplete::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadGame_OnSaveSystemActionComplete, _pAction) == 0x000008, "Member 'BFGGameFlowState_LoadGame_OnSaveSystemActionComplete::_pAction' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_LoadGame_OnSaveSystemActionComplete, _result) == 0x000010, "Member 'BFGGameFlowState_LoadGame_OnSaveSystemActionComplete::_result' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_MenuGameOptions.OnOptionFloatChanged
// 0x000C (0x000C - 0x0000)
struct BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged final
{
public:
	class FName                                   _oOptionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged) == 0x000004, "Wrong alignment on BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged");
static_assert(sizeof(BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged) == 0x00000C, "Wrong size on BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged");
static_assert(offsetof(BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged, _oOptionName) == 0x000000, "Member 'BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged::_oOptionName' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged, _fValue) == 0x000008, "Member 'BFGGameFlowState_MenuGameOptions_OnOptionFloatChanged::_fValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_MenuGameOptions.OnOptionHandlerMessageLeavePrompt
// 0x0001 (0x0001 - 0x0000)
struct BFGGameFlowState_MenuGameOptions_OnOptionHandlerMessageLeavePrompt final
{
public:
	EBFGDialogMessage                             _eMessage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_MenuGameOptions_OnOptionHandlerMessageLeavePrompt) == 0x000001, "Wrong alignment on BFGGameFlowState_MenuGameOptions_OnOptionHandlerMessageLeavePrompt");
static_assert(sizeof(BFGGameFlowState_MenuGameOptions_OnOptionHandlerMessageLeavePrompt) == 0x000001, "Wrong size on BFGGameFlowState_MenuGameOptions_OnOptionHandlerMessageLeavePrompt");
static_assert(offsetof(BFGGameFlowState_MenuGameOptions_OnOptionHandlerMessageLeavePrompt, _eMessage) == 0x000000, "Member 'BFGGameFlowState_MenuGameOptions_OnOptionHandlerMessageLeavePrompt::_eMessage' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_MenuGameOptions.OnOptionIntChanged
// 0x000C (0x000C - 0x0000)
struct BFGGameFlowState_MenuGameOptions_OnOptionIntChanged final
{
public:
	class FName                                   _oOptionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_MenuGameOptions_OnOptionIntChanged) == 0x000004, "Wrong alignment on BFGGameFlowState_MenuGameOptions_OnOptionIntChanged");
static_assert(sizeof(BFGGameFlowState_MenuGameOptions_OnOptionIntChanged) == 0x00000C, "Wrong size on BFGGameFlowState_MenuGameOptions_OnOptionIntChanged");
static_assert(offsetof(BFGGameFlowState_MenuGameOptions_OnOptionIntChanged, _oOptionName) == 0x000000, "Member 'BFGGameFlowState_MenuGameOptions_OnOptionIntChanged::_oOptionName' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_MenuGameOptions_OnOptionIntChanged, _iValue) == 0x000008, "Member 'BFGGameFlowState_MenuGameOptions_OnOptionIntChanged::_iValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_MenuGameOptions.OnResetOptionsDialogResult
// 0x0001 (0x0001 - 0x0000)
struct BFGGameFlowState_MenuGameOptions_OnResetOptionsDialogResult final
{
public:
	bool                                          _bOkClicked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_MenuGameOptions_OnResetOptionsDialogResult) == 0x000001, "Wrong alignment on BFGGameFlowState_MenuGameOptions_OnResetOptionsDialogResult");
static_assert(sizeof(BFGGameFlowState_MenuGameOptions_OnResetOptionsDialogResult) == 0x000001, "Wrong size on BFGGameFlowState_MenuGameOptions_OnResetOptionsDialogResult");
static_assert(offsetof(BFGGameFlowState_MenuGameOptions_OnResetOptionsDialogResult, _bOkClicked) == 0x000000, "Member 'BFGGameFlowState_MenuGameOptions_OnResetOptionsDialogResult::_bOkClicked' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_MenuGameOptions.OnResolutionPromptConfirmed
// 0x0001 (0x0001 - 0x0000)
struct BFGGameFlowState_MenuGameOptions_OnResolutionPromptConfirmed final
{
public:
	bool                                          _bAccepted;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_MenuGameOptions_OnResolutionPromptConfirmed) == 0x000001, "Wrong alignment on BFGGameFlowState_MenuGameOptions_OnResolutionPromptConfirmed");
static_assert(sizeof(BFGGameFlowState_MenuGameOptions_OnResolutionPromptConfirmed) == 0x000001, "Wrong size on BFGGameFlowState_MenuGameOptions_OnResolutionPromptConfirmed");
static_assert(offsetof(BFGGameFlowState_MenuGameOptions_OnResolutionPromptConfirmed, _bAccepted) == 0x000000, "Member 'BFGGameFlowState_MenuGameOptions_OnResolutionPromptConfirmed::_bAccepted' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_MenuGameOptions.GetCultureInfo
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_MenuGameOptions_GetCultureInfo final
{
public:
	TArray<struct FBFGMenuGameOptionCultureInfo>  CultureInfo;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_MenuGameOptions_GetCultureInfo) == 0x000008, "Wrong alignment on BFGGameFlowState_MenuGameOptions_GetCultureInfo");
static_assert(sizeof(BFGGameFlowState_MenuGameOptions_GetCultureInfo) == 0x000010, "Wrong size on BFGGameFlowState_MenuGameOptions_GetCultureInfo");
static_assert(offsetof(BFGGameFlowState_MenuGameOptions_GetCultureInfo, CultureInfo) == 0x000000, "Member 'BFGGameFlowState_MenuGameOptions_GetCultureInfo::CultureInfo' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_MessageBox.Show
// 0x0040 (0x0040 - 0x0000)
struct BFGGameFlowState_MessageBox_Show final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGMessageBoxParams                   _params;                                           // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameFlowState_MessageBox_Show) == 0x000008, "Wrong alignment on BFGGameFlowState_MessageBox_Show");
static_assert(sizeof(BFGGameFlowState_MessageBox_Show) == 0x000040, "Wrong size on BFGGameFlowState_MessageBox_Show");
static_assert(offsetof(BFGGameFlowState_MessageBox_Show, _pGameInstance) == 0x000000, "Member 'BFGGameFlowState_MessageBox_Show::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_MessageBox_Show, _params) == 0x000008, "Member 'BFGGameFlowState_MessageBox_Show::_params' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_Mothership_MissionSelection.TriggerLevelSwitch
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch) == 0x000008, "Wrong alignment on BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch");
static_assert(sizeof(BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch) == 0x000010, "Wrong size on BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch");
static_assert(offsetof(BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch, _pActor) == 0x000000, "Member 'BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch, _bWasCutscene) == 0x000008, "Member 'BFGGameFlowState_Mothership_MissionSelection_TriggerLevelSwitch::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_RespawnAtCheckpoint.StartRespawn
// 0x0010 (0x0010 - 0x0000)
struct BFGGameFlowState_RespawnAtCheckpoint_StartRespawn final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFailedMission;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_RespawnAtCheckpoint_StartRespawn) == 0x000008, "Wrong alignment on BFGGameFlowState_RespawnAtCheckpoint_StartRespawn");
static_assert(sizeof(BFGGameFlowState_RespawnAtCheckpoint_StartRespawn) == 0x000010, "Wrong size on BFGGameFlowState_RespawnAtCheckpoint_StartRespawn");
static_assert(offsetof(BFGGameFlowState_RespawnAtCheckpoint_StartRespawn, _pGameInstance) == 0x000000, "Member 'BFGGameFlowState_RespawnAtCheckpoint_StartRespawn::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_RespawnAtCheckpoint_StartRespawn, _bFailedMission) == 0x000008, "Member 'BFGGameFlowState_RespawnAtCheckpoint_StartRespawn::_bFailedMission' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_RespawnAtCheckpoint_StartRespawn, ReturnValue) == 0x000009, "Member 'BFGGameFlowState_RespawnAtCheckpoint_StartRespawn::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_SaveGame.StartSaveGame
// 0x0028 (0x0028 - 0x0000)
struct BFGGameFlowState_SaveGame_StartSaveGame final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveContext*                        _pSaveContext;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGSaveSystem_SaveGameAction_UseCase         _useCase;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGQuest*                              _pQuestUseCase;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iSlot;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceTeleport;                                   // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_SaveGame_StartSaveGame) == 0x000008, "Wrong alignment on BFGGameFlowState_SaveGame_StartSaveGame");
static_assert(sizeof(BFGGameFlowState_SaveGame_StartSaveGame) == 0x000028, "Wrong size on BFGGameFlowState_SaveGame_StartSaveGame");
static_assert(offsetof(BFGGameFlowState_SaveGame_StartSaveGame, _pGameInstance) == 0x000000, "Member 'BFGGameFlowState_SaveGame_StartSaveGame::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_SaveGame_StartSaveGame, _pSaveContext) == 0x000008, "Member 'BFGGameFlowState_SaveGame_StartSaveGame::_pSaveContext' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_SaveGame_StartSaveGame, _useCase) == 0x000010, "Member 'BFGGameFlowState_SaveGame_StartSaveGame::_useCase' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_SaveGame_StartSaveGame, _pQuestUseCase) == 0x000018, "Member 'BFGGameFlowState_SaveGame_StartSaveGame::_pQuestUseCase' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_SaveGame_StartSaveGame, _iSlot) == 0x000020, "Member 'BFGGameFlowState_SaveGame_StartSaveGame::_iSlot' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_SaveGame_StartSaveGame, _bForceTeleport) == 0x000024, "Member 'BFGGameFlowState_SaveGame_StartSaveGame::_bForceTeleport' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_SaveGame_StartSaveGame, ReturnValue) == 0x000025, "Member 'BFGGameFlowState_SaveGame_StartSaveGame::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameFlowState_SaveGame.OnSaveSystemActionComplete
// 0x0018 (0x0018 - 0x0000)
struct BFGGameFlowState_SaveGame_OnSaveSystemActionComplete final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGSaveSystem_ActionResult                   _result;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameFlowState_SaveGame_OnSaveSystemActionComplete) == 0x000008, "Wrong alignment on BFGGameFlowState_SaveGame_OnSaveSystemActionComplete");
static_assert(sizeof(BFGGameFlowState_SaveGame_OnSaveSystemActionComplete) == 0x000018, "Wrong size on BFGGameFlowState_SaveGame_OnSaveSystemActionComplete");
static_assert(offsetof(BFGGameFlowState_SaveGame_OnSaveSystemActionComplete, _pSaveSystem) == 0x000000, "Member 'BFGGameFlowState_SaveGame_OnSaveSystemActionComplete::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_SaveGame_OnSaveSystemActionComplete, _pAction) == 0x000008, "Member 'BFGGameFlowState_SaveGame_OnSaveSystemActionComplete::_pAction' has a wrong offset!");
static_assert(offsetof(BFGGameFlowState_SaveGame_OnSaveSystemActionComplete, _result) == 0x000010, "Member 'BFGGameFlowState_SaveGame_OnSaveSystemActionComplete::_result' has a wrong offset!");

// Function BFGCore.BFGWorldLoadedCallbackHandler.OnWorldLoaded
// 0x0010 (0x0010 - 0x0000)
struct BFGWorldLoadedCallbackHandler_OnWorldLoaded final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWorldLoadedCallbackHandler_OnWorldLoaded) == 0x000008, "Wrong alignment on BFGWorldLoadedCallbackHandler_OnWorldLoaded");
static_assert(sizeof(BFGWorldLoadedCallbackHandler_OnWorldLoaded) == 0x000010, "Wrong size on BFGWorldLoadedCallbackHandler_OnWorldLoaded");
static_assert(offsetof(BFGWorldLoadedCallbackHandler_OnWorldLoaded, _pGameInstance) == 0x000000, "Member 'BFGWorldLoadedCallbackHandler_OnWorldLoaded::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGWorldLoadedCallbackHandler_OnWorldLoaded, _pWorld) == 0x000008, "Member 'BFGWorldLoadedCallbackHandler_OnWorldLoaded::_pWorld' has a wrong offset!");

// Function BFGCore.BFGGameInstance.DebugKinectReserve
// 0x0001 (0x0001 - 0x0000)
struct BFGGameInstance_DebugKinectReserve final
{
public:
	bool                                          _bTakeReseve;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_DebugKinectReserve) == 0x000001, "Wrong alignment on BFGGameInstance_DebugKinectReserve");
static_assert(sizeof(BFGGameInstance_DebugKinectReserve) == 0x000001, "Wrong size on BFGGameInstance_DebugKinectReserve");
static_assert(offsetof(BFGGameInstance_DebugKinectReserve, _bTakeReseve) == 0x000000, "Member 'BFGGameInstance_DebugKinectReserve::_bTakeReseve' has a wrong offset!");

// Function BFGCore.BFGGameInstance.LDStats
// 0x0004 (0x0004 - 0x0000)
struct BFGGameInstance_LDStats final
{
public:
	int32                                         _iMode;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_LDStats) == 0x000004, "Wrong alignment on BFGGameInstance_LDStats");
static_assert(sizeof(BFGGameInstance_LDStats) == 0x000004, "Wrong size on BFGGameInstance_LDStats");
static_assert(offsetof(BFGGameInstance_LDStats, _iMode) == 0x000000, "Member 'BFGGameInstance_LDStats::_iMode' has a wrong offset!");

// Function BFGCore.BFGGameInstance.PerfCap
// 0x0010 (0x0010 - 0x0000)
struct BFGGameInstance_PerfCap final
{
public:
	class FString                                 _strMission;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_PerfCap) == 0x000008, "Wrong alignment on BFGGameInstance_PerfCap");
static_assert(sizeof(BFGGameInstance_PerfCap) == 0x000010, "Wrong size on BFGGameInstance_PerfCap");
static_assert(offsetof(BFGGameInstance_PerfCap, _strMission) == 0x000000, "Member 'BFGGameInstance_PerfCap::_strMission' has a wrong offset!");

// Function BFGCore.BFGGameInstance.SaveGame_LogActor
// 0x0018 (0x0018 - 0x0000)
struct BFGGameInstance_SaveGame_LogActor final
{
public:
	class FString                                 _strPartialName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCaseSensitive;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameInstance_SaveGame_LogActor) == 0x000008, "Wrong alignment on BFGGameInstance_SaveGame_LogActor");
static_assert(sizeof(BFGGameInstance_SaveGame_LogActor) == 0x000018, "Wrong size on BFGGameInstance_SaveGame_LogActor");
static_assert(offsetof(BFGGameInstance_SaveGame_LogActor, _strPartialName) == 0x000000, "Member 'BFGGameInstance_SaveGame_LogActor::_strPartialName' has a wrong offset!");
static_assert(offsetof(BFGGameInstance_SaveGame_LogActor, _bCaseSensitive) == 0x000010, "Member 'BFGGameInstance_SaveGame_LogActor::_bCaseSensitive' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetChunkManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetChunkManager final
{
public:
	class UBFGChunkManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetChunkManager) == 0x000008, "Wrong alignment on BFGGameInstance_GetChunkManager");
static_assert(sizeof(BFGGameInstance_GetChunkManager) == 0x000008, "Wrong size on BFGGameInstance_GetChunkManager");
static_assert(offsetof(BFGGameInstance_GetChunkManager, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetChunkManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetGameFlowStateManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetGameFlowStateManager final
{
public:
	class UBFGGameFlowStateManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetGameFlowStateManager) == 0x000008, "Wrong alignment on BFGGameInstance_GetGameFlowStateManager");
static_assert(sizeof(BFGGameInstance_GetGameFlowStateManager) == 0x000008, "Wrong size on BFGGameInstance_GetGameFlowStateManager");
static_assert(offsetof(BFGGameInstance_GetGameFlowStateManager, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetGameFlowStateManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetGameSession
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetGameSession final
{
public:
	class UBFGGameSession*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetGameSession) == 0x000008, "Wrong alignment on BFGGameInstance_GetGameSession");
static_assert(sizeof(BFGGameInstance_GetGameSession) == 0x000008, "Wrong size on BFGGameInstance_GetGameSession");
static_assert(offsetof(BFGGameInstance_GetGameSession, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetGameSession::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetInputDeviceTracker
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetInputDeviceTracker final
{
public:
	class UBFGUIInputDeviceTracker*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetInputDeviceTracker) == 0x000008, "Wrong alignment on BFGGameInstance_GetInputDeviceTracker");
static_assert(sizeof(BFGGameInstance_GetInputDeviceTracker) == 0x000008, "Wrong size on BFGGameInstance_GetInputDeviceTracker");
static_assert(offsetof(BFGGameInstance_GetInputDeviceTracker, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetInputDeviceTracker::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetInterLevelSoundManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetInterLevelSoundManager final
{
public:
	class UBFGInterLevelSoundManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetInterLevelSoundManager) == 0x000008, "Wrong alignment on BFGGameInstance_GetInterLevelSoundManager");
static_assert(sizeof(BFGGameInstance_GetInterLevelSoundManager) == 0x000008, "Wrong size on BFGGameInstance_GetInterLevelSoundManager");
static_assert(offsetof(BFGGameInstance_GetInterLevelSoundManager, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetInterLevelSoundManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetMenuFactory
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetMenuFactory final
{
public:
	class UBFGMenuFactory*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetMenuFactory) == 0x000008, "Wrong alignment on BFGGameInstance_GetMenuFactory");
static_assert(sizeof(BFGGameInstance_GetMenuFactory) == 0x000008, "Wrong size on BFGGameInstance_GetMenuFactory");
static_assert(offsetof(BFGGameInstance_GetMenuFactory, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetMenuFactory::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetMenuLifetimeManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetMenuLifetimeManager final
{
public:
	class UBFGMenuLifetimeManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetMenuLifetimeManager) == 0x000008, "Wrong alignment on BFGGameInstance_GetMenuLifetimeManager");
static_assert(sizeof(BFGGameInstance_GetMenuLifetimeManager) == 0x000008, "Wrong size on BFGGameInstance_GetMenuLifetimeManager");
static_assert(offsetof(BFGGameInstance_GetMenuLifetimeManager, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetMenuLifetimeManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetPauseManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetPauseManager final
{
public:
	class UBFGPauseManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetPauseManager) == 0x000008, "Wrong alignment on BFGGameInstance_GetPauseManager");
static_assert(sizeof(BFGGameInstance_GetPauseManager) == 0x000008, "Wrong size on BFGGameInstance_GetPauseManager");
static_assert(offsetof(BFGGameInstance_GetPauseManager, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetPauseManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetSaveSystem
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetSaveSystem final
{
public:
	class UBFGSaveSystem*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetSaveSystem) == 0x000008, "Wrong alignment on BFGGameInstance_GetSaveSystem");
static_assert(sizeof(BFGGameInstance_GetSaveSystem) == 0x000008, "Wrong size on BFGGameInstance_GetSaveSystem");
static_assert(offsetof(BFGGameInstance_GetSaveSystem, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetSaveSystem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetSubtitleVisibilityManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetSubtitleVisibilityManager final
{
public:
	class UBFGSubtitleVisibilityManager*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetSubtitleVisibilityManager) == 0x000008, "Wrong alignment on BFGGameInstance_GetSubtitleVisibilityManager");
static_assert(sizeof(BFGGameInstance_GetSubtitleVisibilityManager) == 0x000008, "Wrong size on BFGGameInstance_GetSubtitleVisibilityManager");
static_assert(offsetof(BFGGameInstance_GetSubtitleVisibilityManager, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetSubtitleVisibilityManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetTransitionManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetTransitionManager final
{
public:
	class UBFGTransitionManager*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetTransitionManager) == 0x000008, "Wrong alignment on BFGGameInstance_GetTransitionManager");
static_assert(sizeof(BFGGameInstance_GetTransitionManager) == 0x000008, "Wrong size on BFGGameInstance_GetTransitionManager");
static_assert(offsetof(BFGGameInstance_GetTransitionManager, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetTransitionManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.GetUserSignInManager
// 0x0008 (0x0008 - 0x0000)
struct BFGGameInstance_GetUserSignInManager final
{
public:
	class UBFGUserSignInManager*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_GetUserSignInManager) == 0x000008, "Wrong alignment on BFGGameInstance_GetUserSignInManager");
static_assert(sizeof(BFGGameInstance_GetUserSignInManager) == 0x000008, "Wrong size on BFGGameInstance_GetUserSignInManager");
static_assert(offsetof(BFGGameInstance_GetUserSignInManager, ReturnValue) == 0x000000, "Member 'BFGGameInstance_GetUserSignInManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameInstance.HasDLC
// 0x0002 (0x0002 - 0x0000)
struct BFGGameInstance_HasDLC final
{
public:
	EBFGDLCItem                                   _eDLC;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameInstance_HasDLC) == 0x000001, "Wrong alignment on BFGGameInstance_HasDLC");
static_assert(sizeof(BFGGameInstance_HasDLC) == 0x000002, "Wrong size on BFGGameInstance_HasDLC");
static_assert(offsetof(BFGGameInstance_HasDLC, _eDLC) == 0x000000, "Member 'BFGGameInstance_HasDLC::_eDLC' has a wrong offset!");
static_assert(offsetof(BFGGameInstance_HasDLC, ReturnValue) == 0x000001, "Member 'BFGGameInstance_HasDLC::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_InvasionReport.GetVerticalBoxfromLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_InvasionReport_GetVerticalBoxfromLayout final
{
public:
	class UVerticalBox*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_InvasionReport_GetVerticalBoxfromLayout) == 0x000008, "Wrong alignment on BFGWidget_Archive_InvasionReport_GetVerticalBoxfromLayout");
static_assert(sizeof(BFGWidget_Archive_InvasionReport_GetVerticalBoxfromLayout) == 0x000008, "Wrong size on BFGWidget_Archive_InvasionReport_GetVerticalBoxfromLayout");
static_assert(offsetof(BFGWidget_Archive_InvasionReport_GetVerticalBoxfromLayout, ReturnValue) == 0x000000, "Member 'BFGWidget_Archive_InvasionReport_GetVerticalBoxfromLayout::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_InvasionReport.Scroll
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Archive_InvasionReport_Scroll final
{
public:
	float                                         _fAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_InvasionReport_Scroll) == 0x000004, "Wrong alignment on BFGWidget_Archive_InvasionReport_Scroll");
static_assert(sizeof(BFGWidget_Archive_InvasionReport_Scroll) == 0x000004, "Wrong size on BFGWidget_Archive_InvasionReport_Scroll");
static_assert(offsetof(BFGWidget_Archive_InvasionReport_Scroll, _fAmount) == 0x000000, "Member 'BFGWidget_Archive_InvasionReport_Scroll::_fAmount' has a wrong offset!");

// Function BFGCore.BFGGameMode.IsResetingActors
// 0x0001 (0x0001 - 0x0000)
struct BFGGameMode_IsResetingActors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameMode_IsResetingActors) == 0x000001, "Wrong alignment on BFGGameMode_IsResetingActors");
static_assert(sizeof(BFGGameMode_IsResetingActors) == 0x000001, "Wrong size on BFGGameMode_IsResetingActors");
static_assert(offsetof(BFGGameMode_IsResetingActors, ReturnValue) == 0x000000, "Member 'BFGGameMode_IsResetingActors::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayEndEffects.FinishedLevelSequence
// 0x0010 (0x0010 - 0x0000)
struct BFGGameplayEndEffects_FinishedLevelSequence final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayEndEffects_FinishedLevelSequence) == 0x000008, "Wrong alignment on BFGGameplayEndEffects_FinishedLevelSequence");
static_assert(sizeof(BFGGameplayEndEffects_FinishedLevelSequence) == 0x000010, "Wrong size on BFGGameplayEndEffects_FinishedLevelSequence");
static_assert(offsetof(BFGGameplayEndEffects_FinishedLevelSequence, _pActor) == 0x000000, "Member 'BFGGameplayEndEffects_FinishedLevelSequence::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameplayEndEffects_FinishedLevelSequence, _bWasCutscene) == 0x000008, "Member 'BFGGameplayEndEffects_FinishedLevelSequence::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGDataSubscriber.OnDataChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGDataSubscriber_OnDataChanged final
{
public:
	class FName                                   _tag;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IBFGDataProvider>      PDataProvider;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataSubscriber_OnDataChanged) == 0x000008, "Wrong alignment on BFGDataSubscriber_OnDataChanged");
static_assert(sizeof(BFGDataSubscriber_OnDataChanged) == 0x000018, "Wrong size on BFGDataSubscriber_OnDataChanged");
static_assert(offsetof(BFGDataSubscriber_OnDataChanged, _tag) == 0x000000, "Member 'BFGDataSubscriber_OnDataChanged::_tag' has a wrong offset!");
static_assert(offsetof(BFGDataSubscriber_OnDataChanged, PDataProvider) == 0x000008, "Member 'BFGDataSubscriber_OnDataChanged::PDataProvider' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.AddActorGameplayTags
// 0x0010 (0x0010 - 0x0000)
struct BFGGameplayTagUtils_AddActorGameplayTags final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPersist;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bSpawn;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDestroy;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bMinimal;                                         // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayTagUtils_AddActorGameplayTags) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_AddActorGameplayTags");
static_assert(sizeof(BFGGameplayTagUtils_AddActorGameplayTags) == 0x000010, "Wrong size on BFGGameplayTagUtils_AddActorGameplayTags");
static_assert(offsetof(BFGGameplayTagUtils_AddActorGameplayTags, _pActor) == 0x000000, "Member 'BFGGameplayTagUtils_AddActorGameplayTags::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_AddActorGameplayTags, _bPersist) == 0x000008, "Member 'BFGGameplayTagUtils_AddActorGameplayTags::_bPersist' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_AddActorGameplayTags, _bSpawn) == 0x000009, "Member 'BFGGameplayTagUtils_AddActorGameplayTags::_bSpawn' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_AddActorGameplayTags, _bDestroy) == 0x00000A, "Member 'BFGGameplayTagUtils_AddActorGameplayTags::_bDestroy' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_AddActorGameplayTags, _bMinimal) == 0x00000B, "Member 'BFGGameplayTagUtils_AddActorGameplayTags::_bMinimal' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_AddActorGameplayTags, ReturnValue) == 0x00000C, "Member 'BFGGameplayTagUtils_AddActorGameplayTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.AppendGameplayEffectTagsTo
// 0x0028 (0x0028 - 0x0000)
struct BFGGameplayTagUtils_AppendGameplayEffectTagsTo final
{
public:
	class AActor*                                 _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _tags;                                             // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameplayTagUtils_AppendGameplayEffectTagsTo) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_AppendGameplayEffectTagsTo");
static_assert(sizeof(BFGGameplayTagUtils_AppendGameplayEffectTagsTo) == 0x000028, "Wrong size on BFGGameplayTagUtils_AppendGameplayEffectTagsTo");
static_assert(offsetof(BFGGameplayTagUtils_AppendGameplayEffectTagsTo, _pObject) == 0x000000, "Member 'BFGGameplayTagUtils_AppendGameplayEffectTagsTo::_pObject' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_AppendGameplayEffectTagsTo, _tags) == 0x000008, "Member 'BFGGameplayTagUtils_AppendGameplayEffectTagsTo::_tags' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.AppendGameplayTagsTo
// 0x0028 (0x0028 - 0x0000)
struct BFGGameplayTagUtils_AppendGameplayTagsTo final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _tags;                                             // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameplayTagUtils_AppendGameplayTagsTo) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_AppendGameplayTagsTo");
static_assert(sizeof(BFGGameplayTagUtils_AppendGameplayTagsTo) == 0x000028, "Wrong size on BFGGameplayTagUtils_AppendGameplayTagsTo");
static_assert(offsetof(BFGGameplayTagUtils_AppendGameplayTagsTo, _pObject) == 0x000000, "Member 'BFGGameplayTagUtils_AppendGameplayTagsTo::_pObject' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_AppendGameplayTagsTo, _tags) == 0x000008, "Member 'BFGGameplayTagUtils_AppendGameplayTagsTo::_tags' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.AppendGameplayTagTo
// 0x0010 (0x0010 - 0x0000)
struct BFGGameplayTagUtils_AppendGameplayTagTo final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tag;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameplayTagUtils_AppendGameplayTagTo) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_AppendGameplayTagTo");
static_assert(sizeof(BFGGameplayTagUtils_AppendGameplayTagTo) == 0x000010, "Wrong size on BFGGameplayTagUtils_AppendGameplayTagTo");
static_assert(offsetof(BFGGameplayTagUtils_AppendGameplayTagTo, _pObject) == 0x000000, "Member 'BFGGameplayTagUtils_AppendGameplayTagTo::_pObject' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_AppendGameplayTagTo, _tag) == 0x000008, "Member 'BFGGameplayTagUtils_AppendGameplayTagTo::_tag' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.CreateMatchAllTagsQuery
// 0x0068 (0x0068 - 0x0000)
struct BFGGameplayTagUtils_CreateMatchAllTagsQuery final
{
public:
	struct FGameplayTagContainer                  _tags;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameplayTagUtils_CreateMatchAllTagsQuery) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_CreateMatchAllTagsQuery");
static_assert(sizeof(BFGGameplayTagUtils_CreateMatchAllTagsQuery) == 0x000068, "Wrong size on BFGGameplayTagUtils_CreateMatchAllTagsQuery");
static_assert(offsetof(BFGGameplayTagUtils_CreateMatchAllTagsQuery, _tags) == 0x000000, "Member 'BFGGameplayTagUtils_CreateMatchAllTagsQuery::_tags' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_CreateMatchAllTagsQuery, ReturnValue) == 0x000020, "Member 'BFGGameplayTagUtils_CreateMatchAllTagsQuery::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.DoesActorHaveMatchingTag
// 0x0018 (0x0018 - 0x0000)
struct BFGGameplayTagUtils_DoesActorHaveMatchingTag final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tag;                                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayTagUtils_DoesActorHaveMatchingTag) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_DoesActorHaveMatchingTag");
static_assert(sizeof(BFGGameplayTagUtils_DoesActorHaveMatchingTag) == 0x000018, "Wrong size on BFGGameplayTagUtils_DoesActorHaveMatchingTag");
static_assert(offsetof(BFGGameplayTagUtils_DoesActorHaveMatchingTag, _pActor) == 0x000000, "Member 'BFGGameplayTagUtils_DoesActorHaveMatchingTag::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesActorHaveMatchingTag, _tag) == 0x000008, "Member 'BFGGameplayTagUtils_DoesActorHaveMatchingTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesActorHaveMatchingTag, ReturnValue) == 0x000010, "Member 'BFGGameplayTagUtils_DoesActorHaveMatchingTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.DoesActorMatchQuery
// 0x0058 (0x0058 - 0x0000)
struct BFGGameplayTagUtils_DoesActorMatchQuery final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _query;                                            // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayTagUtils_DoesActorMatchQuery) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_DoesActorMatchQuery");
static_assert(sizeof(BFGGameplayTagUtils_DoesActorMatchQuery) == 0x000058, "Wrong size on BFGGameplayTagUtils_DoesActorMatchQuery");
static_assert(offsetof(BFGGameplayTagUtils_DoesActorMatchQuery, _pActor) == 0x000000, "Member 'BFGGameplayTagUtils_DoesActorMatchQuery::_pActor' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesActorMatchQuery, _query) == 0x000008, "Member 'BFGGameplayTagUtils_DoesActorMatchQuery::_query' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesActorMatchQuery, ReturnValue) == 0x000050, "Member 'BFGGameplayTagUtils_DoesActorMatchQuery::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.DoesObjectHaveMatchingTag
// 0x0018 (0x0018 - 0x0000)
struct BFGGameplayTagUtils_DoesObjectHaveMatchingTag final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tag;                                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayTagUtils_DoesObjectHaveMatchingTag) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_DoesObjectHaveMatchingTag");
static_assert(sizeof(BFGGameplayTagUtils_DoesObjectHaveMatchingTag) == 0x000018, "Wrong size on BFGGameplayTagUtils_DoesObjectHaveMatchingTag");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectHaveMatchingTag, _pObject) == 0x000000, "Member 'BFGGameplayTagUtils_DoesObjectHaveMatchingTag::_pObject' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectHaveMatchingTag, _tag) == 0x000008, "Member 'BFGGameplayTagUtils_DoesObjectHaveMatchingTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectHaveMatchingTag, ReturnValue) == 0x000010, "Member 'BFGGameplayTagUtils_DoesObjectHaveMatchingTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.DoesObjectHaveMatchingTags
// 0x0030 (0x0030 - 0x0000)
struct BFGGameplayTagUtils_DoesObjectHaveMatchingTags final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _tags;                                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayTagUtils_DoesObjectHaveMatchingTags) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_DoesObjectHaveMatchingTags");
static_assert(sizeof(BFGGameplayTagUtils_DoesObjectHaveMatchingTags) == 0x000030, "Wrong size on BFGGameplayTagUtils_DoesObjectHaveMatchingTags");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectHaveMatchingTags, _pObject) == 0x000000, "Member 'BFGGameplayTagUtils_DoesObjectHaveMatchingTags::_pObject' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectHaveMatchingTags, _tags) == 0x000008, "Member 'BFGGameplayTagUtils_DoesObjectHaveMatchingTags::_tags' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectHaveMatchingTags, ReturnValue) == 0x000028, "Member 'BFGGameplayTagUtils_DoesObjectHaveMatchingTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.DoesObjectMatchQuery
// 0x0058 (0x0058 - 0x0000)
struct BFGGameplayTagUtils_DoesObjectMatchQuery final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _query;                                            // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayTagUtils_DoesObjectMatchQuery) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_DoesObjectMatchQuery");
static_assert(sizeof(BFGGameplayTagUtils_DoesObjectMatchQuery) == 0x000058, "Wrong size on BFGGameplayTagUtils_DoesObjectMatchQuery");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectMatchQuery, _pObject) == 0x000000, "Member 'BFGGameplayTagUtils_DoesObjectMatchQuery::_pObject' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectMatchQuery, _query) == 0x000008, "Member 'BFGGameplayTagUtils_DoesObjectMatchQuery::_query' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesObjectMatchQuery, ReturnValue) == 0x000050, "Member 'BFGGameplayTagUtils_DoesObjectMatchQuery::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.DoesTagsMatchQuery
// 0x0070 (0x0070 - 0x0000)
struct BFGGameplayTagUtils_DoesTagsMatchQuery final
{
public:
	struct FGameplayTagContainer                  _tags;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _query;                                            // 0x0020(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayTagUtils_DoesTagsMatchQuery) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_DoesTagsMatchQuery");
static_assert(sizeof(BFGGameplayTagUtils_DoesTagsMatchQuery) == 0x000070, "Wrong size on BFGGameplayTagUtils_DoesTagsMatchQuery");
static_assert(offsetof(BFGGameplayTagUtils_DoesTagsMatchQuery, _tags) == 0x000000, "Member 'BFGGameplayTagUtils_DoesTagsMatchQuery::_tags' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesTagsMatchQuery, _query) == 0x000020, "Member 'BFGGameplayTagUtils_DoesTagsMatchQuery::_query' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_DoesTagsMatchQuery, ReturnValue) == 0x000068, "Member 'BFGGameplayTagUtils_DoesTagsMatchQuery::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.GetGameplayEffectTagsFrom
// 0x0028 (0x0028 - 0x0000)
struct BFGGameplayTagUtils_GetGameplayEffectTagsFrom final
{
public:
	const class UObject*                          _pObject;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameplayTagUtils_GetGameplayEffectTagsFrom) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_GetGameplayEffectTagsFrom");
static_assert(sizeof(BFGGameplayTagUtils_GetGameplayEffectTagsFrom) == 0x000028, "Wrong size on BFGGameplayTagUtils_GetGameplayEffectTagsFrom");
static_assert(offsetof(BFGGameplayTagUtils_GetGameplayEffectTagsFrom, _pObject) == 0x000000, "Member 'BFGGameplayTagUtils_GetGameplayEffectTagsFrom::_pObject' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_GetGameplayEffectTagsFrom, ReturnValue) == 0x000008, "Member 'BFGGameplayTagUtils_GetGameplayEffectTagsFrom::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.GetGameplayTagsFrom
// 0x0028 (0x0028 - 0x0000)
struct BFGGameplayTagUtils_GetGameplayTagsFrom final
{
public:
	const class UObject*                          _pObject;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameplayTagUtils_GetGameplayTagsFrom) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_GetGameplayTagsFrom");
static_assert(sizeof(BFGGameplayTagUtils_GetGameplayTagsFrom) == 0x000028, "Wrong size on BFGGameplayTagUtils_GetGameplayTagsFrom");
static_assert(offsetof(BFGGameplayTagUtils_GetGameplayTagsFrom, _pObject) == 0x000000, "Member 'BFGGameplayTagUtils_GetGameplayTagsFrom::_pObject' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_GetGameplayTagsFrom, ReturnValue) == 0x000008, "Member 'BFGGameplayTagUtils_GetGameplayTagsFrom::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.InverseGameplayTagQuery
// 0x0090 (0x0090 - 0x0000)
struct BFGGameplayTagUtils_InverseGameplayTagQuery final
{
public:
	struct FGameplayTagQuery                      _query;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameplayTagUtils_InverseGameplayTagQuery) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_InverseGameplayTagQuery");
static_assert(sizeof(BFGGameplayTagUtils_InverseGameplayTagQuery) == 0x000090, "Wrong size on BFGGameplayTagUtils_InverseGameplayTagQuery");
static_assert(offsetof(BFGGameplayTagUtils_InverseGameplayTagQuery, _query) == 0x000000, "Member 'BFGGameplayTagUtils_InverseGameplayTagQuery::_query' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_InverseGameplayTagQuery, ReturnValue) == 0x000048, "Member 'BFGGameplayTagUtils_InverseGameplayTagQuery::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameplayTagUtils.IsGameplayTagQueryEmpty
// 0x0050 (0x0050 - 0x0000)
struct BFGGameplayTagUtils_IsGameplayTagQueryEmpty final
{
public:
	struct FGameplayTagQuery                      _query;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGameplayTagUtils_IsGameplayTagQueryEmpty) == 0x000008, "Wrong alignment on BFGGameplayTagUtils_IsGameplayTagQueryEmpty");
static_assert(sizeof(BFGGameplayTagUtils_IsGameplayTagQueryEmpty) == 0x000050, "Wrong size on BFGGameplayTagUtils_IsGameplayTagQueryEmpty");
static_assert(offsetof(BFGGameplayTagUtils_IsGameplayTagQueryEmpty, _query) == 0x000000, "Member 'BFGGameplayTagUtils_IsGameplayTagQueryEmpty::_query' has a wrong offset!");
static_assert(offsetof(BFGGameplayTagUtils_IsGameplayTagQueryEmpty, ReturnValue) == 0x000048, "Member 'BFGGameplayTagUtils_IsGameplayTagQueryEmpty::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameSession.OnWorldLoaded
// 0x0010 (0x0010 - 0x0000)
struct BFGGameSession_OnWorldLoaded final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameSession_OnWorldLoaded) == 0x000008, "Wrong alignment on BFGGameSession_OnWorldLoaded");
static_assert(sizeof(BFGGameSession_OnWorldLoaded) == 0x000010, "Wrong size on BFGGameSession_OnWorldLoaded");
static_assert(offsetof(BFGGameSession_OnWorldLoaded, _pGameInstance) == 0x000000, "Member 'BFGGameSession_OnWorldLoaded::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGGameSession_OnWorldLoaded, _pWorld) == 0x000008, "Member 'BFGGameSession_OnWorldLoaded::_pWorld' has a wrong offset!");

// Function BFGCore.BFGGameSession.SetShowMM01BackStoryInMothersthip
// 0x0001 (0x0001 - 0x0000)
struct BFGGameSession_SetShowMM01BackStoryInMothersthip final
{
public:
	bool                                          _bShouldShow;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameSession_SetShowMM01BackStoryInMothersthip) == 0x000001, "Wrong alignment on BFGGameSession_SetShowMM01BackStoryInMothersthip");
static_assert(sizeof(BFGGameSession_SetShowMM01BackStoryInMothersthip) == 0x000001, "Wrong size on BFGGameSession_SetShowMM01BackStoryInMothersthip");
static_assert(offsetof(BFGGameSession_SetShowMM01BackStoryInMothersthip, _bShouldShow) == 0x000000, "Member 'BFGGameSession_SetShowMM01BackStoryInMothersthip::_bShouldShow' has a wrong offset!");

// Function BFGCore.BFGGameSession.SetShowOutroInMothersthip
// 0x0001 (0x0001 - 0x0000)
struct BFGGameSession_SetShowOutroInMothersthip final
{
public:
	bool                                          _bShouldShow;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameSession_SetShowOutroInMothersthip) == 0x000001, "Wrong alignment on BFGGameSession_SetShowOutroInMothersthip");
static_assert(sizeof(BFGGameSession_SetShowOutroInMothersthip) == 0x000001, "Wrong size on BFGGameSession_SetShowOutroInMothersthip");
static_assert(offsetof(BFGGameSession_SetShowOutroInMothersthip, _bShouldShow) == 0x000000, "Member 'BFGGameSession_SetShowOutroInMothersthip::_bShouldShow' has a wrong offset!");

// Function BFGCore.BFGGameSession.SetTransferToPoxLab
// 0x0001 (0x0001 - 0x0000)
struct BFGGameSession_SetTransferToPoxLab final
{
public:
	bool                                          _bTransfer;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameSession_SetTransferToPoxLab) == 0x000001, "Wrong alignment on BFGGameSession_SetTransferToPoxLab");
static_assert(sizeof(BFGGameSession_SetTransferToPoxLab) == 0x000001, "Wrong size on BFGGameSession_SetTransferToPoxLab");
static_assert(offsetof(BFGGameSession_SetTransferToPoxLab, _bTransfer) == 0x000000, "Member 'BFGGameSession_SetTransferToPoxLab::_bTransfer' has a wrong offset!");

// Function BFGCore.BFGGameSession.ShouldShowMM01BackStoryInMothersthip
// 0x0001 (0x0001 - 0x0000)
struct BFGGameSession_ShouldShowMM01BackStoryInMothersthip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameSession_ShouldShowMM01BackStoryInMothersthip) == 0x000001, "Wrong alignment on BFGGameSession_ShouldShowMM01BackStoryInMothersthip");
static_assert(sizeof(BFGGameSession_ShouldShowMM01BackStoryInMothersthip) == 0x000001, "Wrong size on BFGGameSession_ShouldShowMM01BackStoryInMothersthip");
static_assert(offsetof(BFGGameSession_ShouldShowMM01BackStoryInMothersthip, ReturnValue) == 0x000000, "Member 'BFGGameSession_ShouldShowMM01BackStoryInMothersthip::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameSession.ShouldShowOutroInMothersthip
// 0x0001 (0x0001 - 0x0000)
struct BFGGameSession_ShouldShowOutroInMothersthip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameSession_ShouldShowOutroInMothersthip) == 0x000001, "Wrong alignment on BFGGameSession_ShouldShowOutroInMothersthip");
static_assert(sizeof(BFGGameSession_ShouldShowOutroInMothersthip) == 0x000001, "Wrong size on BFGGameSession_ShouldShowOutroInMothersthip");
static_assert(offsetof(BFGGameSession_ShouldShowOutroInMothersthip, ReturnValue) == 0x000000, "Member 'BFGGameSession_ShouldShowOutroInMothersthip::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameSession.ShouldTransferToPoxLab
// 0x0001 (0x0001 - 0x0000)
struct BFGGameSession_ShouldTransferToPoxLab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameSession_ShouldTransferToPoxLab) == 0x000001, "Wrong alignment on BFGGameSession_ShouldTransferToPoxLab");
static_assert(sizeof(BFGGameSession_ShouldTransferToPoxLab) == 0x000001, "Wrong size on BFGGameSession_ShouldTransferToPoxLab");
static_assert(offsetof(BFGGameSession_ShouldTransferToPoxLab, ReturnValue) == 0x000000, "Member 'BFGGameSession_ShouldTransferToPoxLab::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGameSettings.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGGameSettings_GetSettings final
{
public:
	class UBFGGameSettings*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGameSettings_GetSettings) == 0x000008, "Wrong alignment on BFGGameSettings_GetSettings");
static_assert(sizeof(BFGGameSettings_GetSettings) == 0x000008, "Wrong size on BFGGameSettings_GetSettings");
static_assert(offsetof(BFGGameSettings_GetSettings, ReturnValue) == 0x000000, "Member 'BFGGameSettings_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGeometryUtils.FindDistanceAlongSplineClosestToLocation
// 0x0018 (0x0018 - 0x0000)
struct BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation final
{
public:
	const class USplineComponent*                 Spline;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation) == 0x000008, "Wrong alignment on BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation");
static_assert(sizeof(BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation) == 0x000018, "Wrong size on BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation");
static_assert(offsetof(BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation, Spline) == 0x000000, "Member 'BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation::Spline' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation, Location) == 0x000008, "Member 'BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation::Location' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation, ReturnValue) == 0x000014, "Member 'BFGGeometryUtils_FindDistanceAlongSplineClosestToLocation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGeometryUtils.IsInsidePolygon
// 0x0028 (0x0028 - 0x0000)
struct BFGGeometryUtils_IsInsidePolygon final
{
public:
	TArray<struct FSplinePoint>                   _aPolygonPoints;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                _vPoint;                                           // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fZMin;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fZMax;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGeometryUtils_IsInsidePolygon) == 0x000008, "Wrong alignment on BFGGeometryUtils_IsInsidePolygon");
static_assert(sizeof(BFGGeometryUtils_IsInsidePolygon) == 0x000028, "Wrong size on BFGGeometryUtils_IsInsidePolygon");
static_assert(offsetof(BFGGeometryUtils_IsInsidePolygon, _aPolygonPoints) == 0x000000, "Member 'BFGGeometryUtils_IsInsidePolygon::_aPolygonPoints' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_IsInsidePolygon, _vPoint) == 0x000010, "Member 'BFGGeometryUtils_IsInsidePolygon::_vPoint' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_IsInsidePolygon, _fZMin) == 0x00001C, "Member 'BFGGeometryUtils_IsInsidePolygon::_fZMin' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_IsInsidePolygon, _fZMax) == 0x000020, "Member 'BFGGeometryUtils_IsInsidePolygon::_fZMax' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_IsInsidePolygon, ReturnValue) == 0x000024, "Member 'BFGGeometryUtils_IsInsidePolygon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGeometryUtils.IsInsidePolygon2D
// 0x0020 (0x0020 - 0x0000)
struct BFGGeometryUtils_IsInsidePolygon2D final
{
public:
	TArray<struct FVector2D>                      _aPolygonPoints;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              _vPoint;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGGeometryUtils_IsInsidePolygon2D) == 0x000008, "Wrong alignment on BFGGeometryUtils_IsInsidePolygon2D");
static_assert(sizeof(BFGGeometryUtils_IsInsidePolygon2D) == 0x000020, "Wrong size on BFGGeometryUtils_IsInsidePolygon2D");
static_assert(offsetof(BFGGeometryUtils_IsInsidePolygon2D, _aPolygonPoints) == 0x000000, "Member 'BFGGeometryUtils_IsInsidePolygon2D::_aPolygonPoints' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_IsInsidePolygon2D, _vPoint) == 0x000010, "Member 'BFGGeometryUtils_IsInsidePolygon2D::_vPoint' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_IsInsidePolygon2D, ReturnValue) == 0x000018, "Member 'BFGGeometryUtils_IsInsidePolygon2D::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGeometryUtils.Triangulate_SplinePoints
// 0x0020 (0x0020 - 0x0000)
struct BFGGeometryUtils_Triangulate_SplinePoints final
{
public:
	TArray<struct FSplinePoint>                   _aPolygonPoints;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGeometryUtils_Triangulate_SplinePoints) == 0x000008, "Wrong alignment on BFGGeometryUtils_Triangulate_SplinePoints");
static_assert(sizeof(BFGGeometryUtils_Triangulate_SplinePoints) == 0x000020, "Wrong size on BFGGeometryUtils_Triangulate_SplinePoints");
static_assert(offsetof(BFGGeometryUtils_Triangulate_SplinePoints, _aPolygonPoints) == 0x000000, "Member 'BFGGeometryUtils_Triangulate_SplinePoints::_aPolygonPoints' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_Triangulate_SplinePoints, ReturnValue) == 0x000010, "Member 'BFGGeometryUtils_Triangulate_SplinePoints::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGeometryUtils.Triangulate_Vector2D
// 0x0020 (0x0020 - 0x0000)
struct BFGGeometryUtils_Triangulate_Vector2D final
{
public:
	TArray<struct FVector2D>                      _aPolygonPoints;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGeometryUtils_Triangulate_Vector2D) == 0x000008, "Wrong alignment on BFGGeometryUtils_Triangulate_Vector2D");
static_assert(sizeof(BFGGeometryUtils_Triangulate_Vector2D) == 0x000020, "Wrong size on BFGGeometryUtils_Triangulate_Vector2D");
static_assert(offsetof(BFGGeometryUtils_Triangulate_Vector2D, _aPolygonPoints) == 0x000000, "Member 'BFGGeometryUtils_Triangulate_Vector2D::_aPolygonPoints' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_Triangulate_Vector2D, ReturnValue) == 0x000010, "Member 'BFGGeometryUtils_Triangulate_Vector2D::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGGeometryUtils.Triangulate_Vector3D
// 0x0020 (0x0020 - 0x0000)
struct BFGGeometryUtils_Triangulate_Vector3D final
{
public:
	TArray<struct FVector>                        _aPolygonPoints;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGGeometryUtils_Triangulate_Vector3D) == 0x000008, "Wrong alignment on BFGGeometryUtils_Triangulate_Vector3D");
static_assert(sizeof(BFGGeometryUtils_Triangulate_Vector3D) == 0x000020, "Wrong size on BFGGeometryUtils_Triangulate_Vector3D");
static_assert(offsetof(BFGGeometryUtils_Triangulate_Vector3D, _aPolygonPoints) == 0x000000, "Member 'BFGGeometryUtils_Triangulate_Vector3D::_aPolygonPoints' has a wrong offset!");
static_assert(offsetof(BFGGeometryUtils_Triangulate_Vector3D, ReturnValue) == 0x000010, "Member 'BFGGeometryUtils_Triangulate_Vector3D::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeaponHolderInterface.CanUseWeapon
// 0x0010 (0x0010 - 0x0000)
struct BFGWeaponHolderInterface_CanUseWeapon final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWeaponHolderInterface_CanUseWeapon) == 0x000008, "Wrong alignment on BFGWeaponHolderInterface_CanUseWeapon");
static_assert(sizeof(BFGWeaponHolderInterface_CanUseWeapon) == 0x000010, "Wrong size on BFGWeaponHolderInterface_CanUseWeapon");
static_assert(offsetof(BFGWeaponHolderInterface_CanUseWeapon, _pWeapon) == 0x000000, "Member 'BFGWeaponHolderInterface_CanUseWeapon::_pWeapon' has a wrong offset!");
static_assert(offsetof(BFGWeaponHolderInterface_CanUseWeapon, ReturnValue) == 0x000008, "Member 'BFGWeaponHolderInterface_CanUseWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_ChallengePanel.OnPanelVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_AR_ChallengePanel_OnPanelVisibilityChanged final
{
public:
	EBFGChallengeStartingPoint_Visibility         _eVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_ChallengePanel_OnPanelVisibilityChanged) == 0x000001, "Wrong alignment on BFGWidget_AR_ChallengePanel_OnPanelVisibilityChanged");
static_assert(sizeof(BFGWidget_AR_ChallengePanel_OnPanelVisibilityChanged) == 0x000001, "Wrong size on BFGWidget_AR_ChallengePanel_OnPanelVisibilityChanged");
static_assert(offsetof(BFGWidget_AR_ChallengePanel_OnPanelVisibilityChanged, _eVisibility) == 0x000000, "Member 'BFGWidget_AR_ChallengePanel_OnPanelVisibilityChanged::_eVisibility' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive.OnShowOverlay
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Archive_OnShowOverlay final
{
public:
	bool                                          _bDown;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_OnShowOverlay) == 0x000001, "Wrong alignment on BFGWidget_Archive_OnShowOverlay");
static_assert(sizeof(BFGWidget_Archive_OnShowOverlay) == 0x000001, "Wrong size on BFGWidget_Archive_OnShowOverlay");
static_assert(offsetof(BFGWidget_Archive_OnShowOverlay, _bDown) == 0x000000, "Member 'BFGWidget_Archive_OnShowOverlay::_bDown' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive.OnUpdateItemDescription
// 0x0048 (0x0048 - 0x0000)
struct BFGWidget_Archive_OnUpdateItemDescription final
{
public:
	struct FBFGItemDescription                    _aItemDescription;                                 // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_OnUpdateItemDescription) == 0x000008, "Wrong alignment on BFGWidget_Archive_OnUpdateItemDescription");
static_assert(sizeof(BFGWidget_Archive_OnUpdateItemDescription) == 0x000048, "Wrong size on BFGWidget_Archive_OnUpdateItemDescription");
static_assert(offsetof(BFGWidget_Archive_OnUpdateItemDescription, _aItemDescription) == 0x000000, "Member 'BFGWidget_Archive_OnUpdateItemDescription::_aItemDescription' has a wrong offset!");

// Function BFGCore.BFGWidget_KeyAssignmentWarning.AddInvalidActionText
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_KeyAssignmentWarning_AddInvalidActionText final
{
public:
	class FText                                   _strInvalidActionText;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_KeyAssignmentWarning_AddInvalidActionText) == 0x000008, "Wrong alignment on BFGWidget_KeyAssignmentWarning_AddInvalidActionText");
static_assert(sizeof(BFGWidget_KeyAssignmentWarning_AddInvalidActionText) == 0x000018, "Wrong size on BFGWidget_KeyAssignmentWarning_AddInvalidActionText");
static_assert(offsetof(BFGWidget_KeyAssignmentWarning_AddInvalidActionText, _strInvalidActionText) == 0x000000, "Member 'BFGWidget_KeyAssignmentWarning_AddInvalidActionText::_strInvalidActionText' has a wrong offset!");

// Function BFGCore.BFGWidget_MediaWidget.ShowMediaInternal
// 0x0088 (0x0088 - 0x0000)
struct BFGWidget_MediaWidget_ShowMediaInternal final
{
public:
	struct FSlateBrush                            _oMedia;                                           // 0x0000(0x0088)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MediaWidget_ShowMediaInternal) == 0x000008, "Wrong alignment on BFGWidget_MediaWidget_ShowMediaInternal");
static_assert(sizeof(BFGWidget_MediaWidget_ShowMediaInternal) == 0x000088, "Wrong size on BFGWidget_MediaWidget_ShowMediaInternal");
static_assert(offsetof(BFGWidget_MediaWidget_ShowMediaInternal, _oMedia) == 0x000000, "Member 'BFGWidget_MediaWidget_ShowMediaInternal::_oMedia' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Archive.GetSubMenu
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_Archive_GetSubMenu final
{
public:
	class UBFGWidget_Archive*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Archive_GetSubMenu) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Archive_GetSubMenu");
static_assert(sizeof(BFGWidget_Mothership_Archive_GetSubMenu) == 0x000008, "Wrong size on BFGWidget_Mothership_Archive_GetSubMenu");
static_assert(offsetof(BFGWidget_Mothership_Archive_GetSubMenu, ReturnValue) == 0x000000, "Member 'BFGWidget_Mothership_Archive_GetSubMenu::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidgetPoxLabEntryPointOption.ActionPoxUpgradeType__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGWidgetPoxLabEntryPointOption_ActionPoxUpgradeType__DelegateSignature final
{
public:
	EBFGMotherShipPoxLabType                      _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetPoxLabEntryPointOption_ActionPoxUpgradeType__DelegateSignature) == 0x000001, "Wrong alignment on BFGWidgetPoxLabEntryPointOption_ActionPoxUpgradeType__DelegateSignature");
static_assert(sizeof(BFGWidgetPoxLabEntryPointOption_ActionPoxUpgradeType__DelegateSignature) == 0x000001, "Wrong size on BFGWidgetPoxLabEntryPointOption_ActionPoxUpgradeType__DelegateSignature");
static_assert(offsetof(BFGWidgetPoxLabEntryPointOption_ActionPoxUpgradeType__DelegateSignature, _eType) == 0x000000, "Member 'BFGWidgetPoxLabEntryPointOption_ActionPoxUpgradeType__DelegateSignature::_eType' has a wrong offset!");

// Function BFGCore.BFGWidgetPoxLabEntryPointOption.OnUpgradeAvailable
// 0x0001 (0x0001 - 0x0000)
struct BFGWidgetPoxLabEntryPointOption_OnUpgradeAvailable final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetPoxLabEntryPointOption_OnUpgradeAvailable) == 0x000001, "Wrong alignment on BFGWidgetPoxLabEntryPointOption_OnUpgradeAvailable");
static_assert(sizeof(BFGWidgetPoxLabEntryPointOption_OnUpgradeAvailable) == 0x000001, "Wrong size on BFGWidgetPoxLabEntryPointOption_OnUpgradeAvailable");
static_assert(offsetof(BFGWidgetPoxLabEntryPointOption_OnUpgradeAvailable, _bValue) == 0x000000, "Member 'BFGWidgetPoxLabEntryPointOption_OnUpgradeAvailable::_bValue' has a wrong offset!");

// Function BFGCore.BFGWidgetPoxLabEntryPointOption.UpdateSelectionState
// 0x0001 (0x0001 - 0x0000)
struct BFGWidgetPoxLabEntryPointOption_UpdateSelectionState final
{
public:
	bool                                          _bSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetPoxLabEntryPointOption_UpdateSelectionState) == 0x000001, "Wrong alignment on BFGWidgetPoxLabEntryPointOption_UpdateSelectionState");
static_assert(sizeof(BFGWidgetPoxLabEntryPointOption_UpdateSelectionState) == 0x000001, "Wrong size on BFGWidgetPoxLabEntryPointOption_UpdateSelectionState");
static_assert(offsetof(BFGWidgetPoxLabEntryPointOption_UpdateSelectionState, _bSelected) == 0x000000, "Member 'BFGWidgetPoxLabEntryPointOption_UpdateSelectionState::_bSelected' has a wrong offset!");

// Function BFGCore.BFGWidget_Credits.CreateTextPanel
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Credits_CreateTextPanel final
{
public:
	class UBFGWidget_CreditsTextPanel*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Credits_CreateTextPanel) == 0x000008, "Wrong alignment on BFGWidget_Credits_CreateTextPanel");
static_assert(sizeof(BFGWidget_Credits_CreateTextPanel) == 0x000008, "Wrong size on BFGWidget_Credits_CreateTextPanel");
static_assert(offsetof(BFGWidget_Credits_CreateTextPanel, ReturnValue) == 0x000000, "Member 'BFGWidget_Credits_CreateTextPanel::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Credits.HandleTextPanelDone
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Credits_HandleTextPanelDone final
{
public:
	class UBFGWidget_CreditsTextPanel*            _pPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Credits_HandleTextPanelDone) == 0x000008, "Wrong alignment on BFGWidget_Credits_HandleTextPanelDone");
static_assert(sizeof(BFGWidget_Credits_HandleTextPanelDone) == 0x000008, "Wrong size on BFGWidget_Credits_HandleTextPanelDone");
static_assert(offsetof(BFGWidget_Credits_HandleTextPanelDone, _pPanel) == 0x000000, "Member 'BFGWidget_Credits_HandleTextPanelDone::_pPanel' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_NavBarEntry.SetEntryActive
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_DialogOption_NavBarEntry_SetEntryActive final
{
public:
	bool                                          _bActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_NavBarEntry_SetEntryActive) == 0x000001, "Wrong alignment on BFGWidget_DialogOption_NavBarEntry_SetEntryActive");
static_assert(sizeof(BFGWidget_DialogOption_NavBarEntry_SetEntryActive) == 0x000001, "Wrong size on BFGWidget_DialogOption_NavBarEntry_SetEntryActive");
static_assert(offsetof(BFGWidget_DialogOption_NavBarEntry_SetEntryActive, _bActive) == 0x000000, "Member 'BFGWidget_DialogOption_NavBarEntry_SetEntryActive::_bActive' has a wrong offset!");

// Function BFGCore.BFGWidget_FuronHandbook.AddContentToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_FuronHandbook_AddContentToLayout final
{
public:
	class UBFGWidget_Archive_FuronHandbook*       _pContent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_FuronHandbook_AddContentToLayout) == 0x000008, "Wrong alignment on BFGWidget_FuronHandbook_AddContentToLayout");
static_assert(sizeof(BFGWidget_FuronHandbook_AddContentToLayout) == 0x000008, "Wrong size on BFGWidget_FuronHandbook_AddContentToLayout");
static_assert(offsetof(BFGWidget_FuronHandbook_AddContentToLayout, _pContent) == 0x000000, "Member 'BFGWidget_FuronHandbook_AddContentToLayout::_pContent' has a wrong offset!");

// Function BFGCore.BFGWidget_FuronHandbook.UpdatePath
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_FuronHandbook_UpdatePath final
{
public:
	class FString                                 _strPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_FuronHandbook_UpdatePath) == 0x000008, "Wrong alignment on BFGWidget_FuronHandbook_UpdatePath");
static_assert(sizeof(BFGWidget_FuronHandbook_UpdatePath) == 0x000010, "Wrong size on BFGWidget_FuronHandbook_UpdatePath");
static_assert(offsetof(BFGWidget_FuronHandbook_UpdatePath, _strPath) == 0x000000, "Member 'BFGWidget_FuronHandbook_UpdatePath::_strPath' has a wrong offset!");

// Function BFGCore.BFGWidget_GamepadPanel.SwitchToPanel
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_GamepadPanel_SwitchToPanel final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GamepadPanel_SwitchToPanel) == 0x000004, "Wrong alignment on BFGWidget_GamepadPanel_SwitchToPanel");
static_assert(sizeof(BFGWidget_GamepadPanel_SwitchToPanel) == 0x000004, "Wrong size on BFGWidget_GamepadPanel_SwitchToPanel");
static_assert(offsetof(BFGWidget_GamepadPanel_SwitchToPanel, _iIndex) == 0x000000, "Member 'BFGWidget_GamepadPanel_SwitchToPanel::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWeapon_IonDetonator.OnEquipementManagerWeaponRequestFireChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged) == 0x000008, "Wrong alignment on BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged");
static_assert(sizeof(BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged) == 0x000010, "Wrong size on BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged");
static_assert(offsetof(BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged, _pWeapon) == 0x000000, "Member 'BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged::_pWeapon' has a wrong offset!");
static_assert(offsetof(BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged, _bValue) == 0x000008, "Member 'BFGWeapon_IonDetonator_OnEquipementManagerWeaponRequestFireChanged::_bValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_IonDetonator.IsProjectileActive
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_IonDetonator_IsProjectileActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_IonDetonator_IsProjectileActive) == 0x000001, "Wrong alignment on BFGWeapon_IonDetonator_IsProjectileActive");
static_assert(sizeof(BFGWeapon_IonDetonator_IsProjectileActive) == 0x000001, "Wrong size on BFGWeapon_IonDetonator_IsProjectileActive");
static_assert(offsetof(BFGWeapon_IonDetonator_IsProjectileActive, ReturnValue) == 0x000000, "Member 'BFGWeapon_IonDetonator_IsProjectileActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputPack.GetDefaultCameraSpeedCoefCurve
// 0x0008 (0x0008 - 0x0000)
struct BFGInputPack_GetDefaultCameraSpeedCoefCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputPack_GetDefaultCameraSpeedCoefCurve) == 0x000008, "Wrong alignment on BFGInputPack_GetDefaultCameraSpeedCoefCurve");
static_assert(sizeof(BFGInputPack_GetDefaultCameraSpeedCoefCurve) == 0x000008, "Wrong size on BFGInputPack_GetDefaultCameraSpeedCoefCurve");
static_assert(offsetof(BFGInputPack_GetDefaultCameraSpeedCoefCurve, ReturnValue) == 0x000000, "Member 'BFGInputPack_GetDefaultCameraSpeedCoefCurve::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputPack.GetInputScheme
// 0x0010 (0x0010 - 0x0000)
struct BFGInputPack_GetInputScheme final
{
public:
	EInputSchemeIdentifier                        _eIdenfier;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGInputScheme*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputPack_GetInputScheme) == 0x000008, "Wrong alignment on BFGInputPack_GetInputScheme");
static_assert(sizeof(BFGInputPack_GetInputScheme) == 0x000010, "Wrong size on BFGInputPack_GetInputScheme");
static_assert(offsetof(BFGInputPack_GetInputScheme, _eIdenfier) == 0x000000, "Member 'BFGInputPack_GetInputScheme::_eIdenfier' has a wrong offset!");
static_assert(offsetof(BFGInputPack_GetInputScheme, ReturnValue) == 0x000008, "Member 'BFGInputPack_GetInputScheme::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputPack.GetInputSchemeIndex
// 0x0004 (0x0004 - 0x0000)
struct BFGInputPack_GetInputSchemeIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputPack_GetInputSchemeIndex) == 0x000004, "Wrong alignment on BFGInputPack_GetInputSchemeIndex");
static_assert(sizeof(BFGInputPack_GetInputSchemeIndex) == 0x000004, "Wrong size on BFGInputPack_GetInputSchemeIndex");
static_assert(offsetof(BFGInputPack_GetInputSchemeIndex, ReturnValue) == 0x000000, "Member 'BFGInputPack_GetInputSchemeIndex::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputPack.GetName
// 0x0010 (0x0010 - 0x0000)
struct BFGInputPack_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputPack_GetName) == 0x000008, "Wrong alignment on BFGInputPack_GetName");
static_assert(sizeof(BFGInputPack_GetName) == 0x000010, "Wrong size on BFGInputPack_GetName");
static_assert(offsetof(BFGInputPack_GetName, ReturnValue) == 0x000000, "Member 'BFGInputPack_GetName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputPack.GetScreenApproximationOffset
// 0x0004 (0x0004 - 0x0000)
struct BFGInputPack_GetScreenApproximationOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputPack_GetScreenApproximationOffset) == 0x000004, "Wrong alignment on BFGInputPack_GetScreenApproximationOffset");
static_assert(sizeof(BFGInputPack_GetScreenApproximationOffset) == 0x000004, "Wrong size on BFGInputPack_GetScreenApproximationOffset");
static_assert(offsetof(BFGInputPack_GetScreenApproximationOffset, ReturnValue) == 0x000000, "Member 'BFGInputPack_GetScreenApproximationOffset::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputPack.GetUseAimAssist
// 0x0001 (0x0001 - 0x0000)
struct BFGInputPack_GetUseAimAssist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputPack_GetUseAimAssist) == 0x000001, "Wrong alignment on BFGInputPack_GetUseAimAssist");
static_assert(sizeof(BFGInputPack_GetUseAimAssist) == 0x000001, "Wrong size on BFGInputPack_GetUseAimAssist");
static_assert(offsetof(BFGInputPack_GetUseAimAssist, ReturnValue) == 0x000000, "Member 'BFGInputPack_GetUseAimAssist::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputPack.GetUseExplorationCamera
// 0x0001 (0x0001 - 0x0000)
struct BFGInputPack_GetUseExplorationCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputPack_GetUseExplorationCamera) == 0x000001, "Wrong alignment on BFGInputPack_GetUseExplorationCamera");
static_assert(sizeof(BFGInputPack_GetUseExplorationCamera) == 0x000001, "Wrong size on BFGInputPack_GetUseExplorationCamera");
static_assert(offsetof(BFGInputPack_GetUseExplorationCamera, ReturnValue) == 0x000000, "Member 'BFGInputPack_GetUseExplorationCamera::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInputRebindingSystem.OnSaveActionDone
// 0x0018 (0x0018 - 0x0000)
struct BFGInputRebindingSystem_OnSaveActionDone final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGSaveSystem_ActionResult                   _result;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInputRebindingSystem_OnSaveActionDone) == 0x000008, "Wrong alignment on BFGInputRebindingSystem_OnSaveActionDone");
static_assert(sizeof(BFGInputRebindingSystem_OnSaveActionDone) == 0x000018, "Wrong size on BFGInputRebindingSystem_OnSaveActionDone");
static_assert(offsetof(BFGInputRebindingSystem_OnSaveActionDone, _pSaveSystem) == 0x000000, "Member 'BFGInputRebindingSystem_OnSaveActionDone::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGInputRebindingSystem_OnSaveActionDone, _pAction) == 0x000008, "Member 'BFGInputRebindingSystem_OnSaveActionDone::_pAction' has a wrong offset!");
static_assert(offsetof(BFGInputRebindingSystem_OnSaveActionDone, _result) == 0x000010, "Member 'BFGInputRebindingSystem_OnSaveActionDone::_result' has a wrong offset!");

// Function BFGCore.BFGInputSettings.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGInputSettings_GetSettings final
{
public:
	class UBFGInputSettings*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputSettings_GetSettings) == 0x000008, "Wrong alignment on BFGInputSettings_GetSettings");
static_assert(sizeof(BFGInputSettings_GetSettings) == 0x000008, "Wrong size on BFGInputSettings_GetSettings");
static_assert(offsetof(BFGInputSettings_GetSettings, ReturnValue) == 0x000000, "Member 'BFGInputSettings_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_WeaponStats.AddQuickSlotToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_WeaponStats_AddQuickSlotToLayout final
{
public:
	class UBFGWeaponSlot*                         _pSlot;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_WeaponStats_AddQuickSlotToLayout) == 0x000008, "Wrong alignment on BFGWidget_HUD_WeaponStats_AddQuickSlotToLayout");
static_assert(sizeof(BFGWidget_HUD_WeaponStats_AddQuickSlotToLayout) == 0x000008, "Wrong size on BFGWidget_HUD_WeaponStats_AddQuickSlotToLayout");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_AddQuickSlotToLayout, _pSlot) == 0x000000, "Member 'BFGWidget_HUD_WeaponStats_AddQuickSlotToLayout::_pSlot' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_WeaponStats.GetActiveWeaponClass
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_WeaponStats_GetActiveWeaponClass final
{
public:
	TSubclassOf<class ABFGWeapon>                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_WeaponStats_GetActiveWeaponClass) == 0x000008, "Wrong alignment on BFGWidget_HUD_WeaponStats_GetActiveWeaponClass");
static_assert(sizeof(BFGWidget_HUD_WeaponStats_GetActiveWeaponClass) == 0x000008, "Wrong size on BFGWidget_HUD_WeaponStats_GetActiveWeaponClass");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_GetActiveWeaponClass, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_WeaponStats_GetActiveWeaponClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_WeaponStats.OnAllWeaponsEnabled
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled final
{
public:
	class UBFGActorComponent_EquipmentManager*    _pEquipmentManager;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled) == 0x000008, "Wrong alignment on BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled");
static_assert(sizeof(BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled) == 0x000010, "Wrong size on BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled, _pEquipmentManager) == 0x000000, "Member 'BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled::_pEquipmentManager' has a wrong offset!");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled, _bEnabled) == 0x000008, "Member 'BFGWidget_HUD_WeaponStats_OnAllWeaponsEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_WeaponStats.OnInputDeviceSwitched
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_WeaponStats_OnInputDeviceSwitched final
{
public:
	bool                                          _bIsGamepad;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_WeaponStats_OnInputDeviceSwitched) == 0x000001, "Wrong alignment on BFGWidget_HUD_WeaponStats_OnInputDeviceSwitched");
static_assert(sizeof(BFGWidget_HUD_WeaponStats_OnInputDeviceSwitched) == 0x000001, "Wrong size on BFGWidget_HUD_WeaponStats_OnInputDeviceSwitched");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_OnInputDeviceSwitched, _bIsGamepad) == 0x000000, "Member 'BFGWidget_HUD_WeaponStats_OnInputDeviceSwitched::_bIsGamepad' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_WeaponStats.OnSwitchedToGroundMode
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_WeaponStats_OnSwitchedToGroundMode final
{
public:
	class APawn*                                  _pPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_WeaponStats_OnSwitchedToGroundMode) == 0x000008, "Wrong alignment on BFGWidget_HUD_WeaponStats_OnSwitchedToGroundMode");
static_assert(sizeof(BFGWidget_HUD_WeaponStats_OnSwitchedToGroundMode) == 0x000008, "Wrong size on BFGWidget_HUD_WeaponStats_OnSwitchedToGroundMode");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_OnSwitchedToGroundMode, _pPawn) == 0x000000, "Member 'BFGWidget_HUD_WeaponStats_OnSwitchedToGroundMode::_pPawn' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_WeaponStats.OnSwitchedToUFOMode
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_WeaponStats_OnSwitchedToUFOMode final
{
public:
	class APawn*                                  _pPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_WeaponStats_OnSwitchedToUFOMode) == 0x000008, "Wrong alignment on BFGWidget_HUD_WeaponStats_OnSwitchedToUFOMode");
static_assert(sizeof(BFGWidget_HUD_WeaponStats_OnSwitchedToUFOMode) == 0x000008, "Wrong size on BFGWidget_HUD_WeaponStats_OnSwitchedToUFOMode");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_OnSwitchedToUFOMode, _pPawn) == 0x000000, "Member 'BFGWidget_HUD_WeaponStats_OnSwitchedToUFOMode::_pPawn' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_WeaponStats.OnWeaponAmmoChanged
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_WeaponStats_OnWeaponAmmoChanged final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_WeaponStats_OnWeaponAmmoChanged) == 0x000008, "Wrong alignment on BFGWidget_HUD_WeaponStats_OnWeaponAmmoChanged");
static_assert(sizeof(BFGWidget_HUD_WeaponStats_OnWeaponAmmoChanged) == 0x000008, "Wrong size on BFGWidget_HUD_WeaponStats_OnWeaponAmmoChanged");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_OnWeaponAmmoChanged, _pWeapon) == 0x000000, "Member 'BFGWidget_HUD_WeaponStats_OnWeaponAmmoChanged::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_WeaponStats.SetActiveSlot
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_WeaponStats_SetActiveSlot final
{
public:
	class UBFGWeaponSlot*                         _pSlot;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_WeaponStats_SetActiveSlot) == 0x000008, "Wrong alignment on BFGWidget_HUD_WeaponStats_SetActiveSlot");
static_assert(sizeof(BFGWidget_HUD_WeaponStats_SetActiveSlot) == 0x000008, "Wrong size on BFGWidget_HUD_WeaponStats_SetActiveSlot");
static_assert(offsetof(BFGWidget_HUD_WeaponStats_SetActiveSlot, _pSlot) == 0x000000, "Member 'BFGWidget_HUD_WeaponStats_SetActiveSlot::_pSlot' has a wrong offset!");

// Function BFGCore.BFGLabeledImage.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct BFGLabeledImage_SetBrush final
{
public:
	struct FSlateBrush                            _pBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGLabeledImage_SetBrush) == 0x000008, "Wrong alignment on BFGLabeledImage_SetBrush");
static_assert(sizeof(BFGLabeledImage_SetBrush) == 0x000088, "Wrong size on BFGLabeledImage_SetBrush");
static_assert(offsetof(BFGLabeledImage_SetBrush, _pBrush) == 0x000000, "Member 'BFGLabeledImage_SetBrush::_pBrush' has a wrong offset!");

// Function BFGCore.BFGLabeledImage.SetBrushSize
// 0x0008 (0x0008 - 0x0000)
struct BFGLabeledImage_SetBrushSize final
{
public:
	float                                         _fWidth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fHeight;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGLabeledImage_SetBrushSize) == 0x000004, "Wrong alignment on BFGLabeledImage_SetBrushSize");
static_assert(sizeof(BFGLabeledImage_SetBrushSize) == 0x000008, "Wrong size on BFGLabeledImage_SetBrushSize");
static_assert(offsetof(BFGLabeledImage_SetBrushSize, _fWidth) == 0x000000, "Member 'BFGLabeledImage_SetBrushSize::_fWidth' has a wrong offset!");
static_assert(offsetof(BFGLabeledImage_SetBrushSize, _fHeight) == 0x000004, "Member 'BFGLabeledImage_SetBrushSize::_fHeight' has a wrong offset!");

// Function BFGCore.BFGLabeledImage.SetText
// 0x0018 (0x0018 - 0x0000)
struct BFGLabeledImage_SetText final
{
public:
	class FText                                   _pText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGLabeledImage_SetText) == 0x000008, "Wrong alignment on BFGLabeledImage_SetText");
static_assert(sizeof(BFGLabeledImage_SetText) == 0x000018, "Wrong size on BFGLabeledImage_SetText");
static_assert(offsetof(BFGLabeledImage_SetText, _pText) == 0x000000, "Member 'BFGLabeledImage_SetText::_pText' has a wrong offset!");

// Function BFGCore.BFGLevelCheckpoint.GetCharacterSpawn
// 0x0018 (0x0018 - 0x0000)
struct BFGLevelCheckpoint_GetCharacterSpawn final
{
public:
	struct FVector                                _vLocationOut;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rotationOut;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGLevelCheckpoint_GetCharacterSpawn) == 0x000004, "Wrong alignment on BFGLevelCheckpoint_GetCharacterSpawn");
static_assert(sizeof(BFGLevelCheckpoint_GetCharacterSpawn) == 0x000018, "Wrong size on BFGLevelCheckpoint_GetCharacterSpawn");
static_assert(offsetof(BFGLevelCheckpoint_GetCharacterSpawn, _vLocationOut) == 0x000000, "Member 'BFGLevelCheckpoint_GetCharacterSpawn::_vLocationOut' has a wrong offset!");
static_assert(offsetof(BFGLevelCheckpoint_GetCharacterSpawn, _rotationOut) == 0x00000C, "Member 'BFGLevelCheckpoint_GetCharacterSpawn::_rotationOut' has a wrong offset!");

// Function BFGCore.BFGLevelCheckpoint.GetUFOSpawn
// 0x0018 (0x0018 - 0x0000)
struct BFGLevelCheckpoint_GetUFOSpawn final
{
public:
	struct FVector                                _vLocationOut;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rotationOut;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGLevelCheckpoint_GetUFOSpawn) == 0x000004, "Wrong alignment on BFGLevelCheckpoint_GetUFOSpawn");
static_assert(sizeof(BFGLevelCheckpoint_GetUFOSpawn) == 0x000018, "Wrong size on BFGLevelCheckpoint_GetUFOSpawn");
static_assert(offsetof(BFGLevelCheckpoint_GetUFOSpawn, _vLocationOut) == 0x000000, "Member 'BFGLevelCheckpoint_GetUFOSpawn::_vLocationOut' has a wrong offset!");
static_assert(offsetof(BFGLevelCheckpoint_GetUFOSpawn, _rotationOut) == 0x00000C, "Member 'BFGLevelCheckpoint_GetUFOSpawn::_rotationOut' has a wrong offset!");

// Function BFGCore.BFGLevelCheckpoint.IsRespawnAsCharacter
// 0x0001 (0x0001 - 0x0000)
struct BFGLevelCheckpoint_IsRespawnAsCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGLevelCheckpoint_IsRespawnAsCharacter) == 0x000001, "Wrong alignment on BFGLevelCheckpoint_IsRespawnAsCharacter");
static_assert(sizeof(BFGLevelCheckpoint_IsRespawnAsCharacter) == 0x000001, "Wrong size on BFGLevelCheckpoint_IsRespawnAsCharacter");
static_assert(offsetof(BFGLevelCheckpoint_IsRespawnAsCharacter, ReturnValue) == 0x000000, "Member 'BFGLevelCheckpoint_IsRespawnAsCharacter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGLevelCheckpoint.IsRespawnAsUFO
// 0x0001 (0x0001 - 0x0000)
struct BFGLevelCheckpoint_IsRespawnAsUFO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGLevelCheckpoint_IsRespawnAsUFO) == 0x000001, "Wrong alignment on BFGLevelCheckpoint_IsRespawnAsUFO");
static_assert(sizeof(BFGLevelCheckpoint_IsRespawnAsUFO) == 0x000001, "Wrong size on BFGLevelCheckpoint_IsRespawnAsUFO");
static_assert(offsetof(BFGLevelCheckpoint_IsRespawnAsUFO, ReturnValue) == 0x000000, "Member 'BFGLevelCheckpoint_IsRespawnAsUFO::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMathUtils.ArcTanDegreesFast
// 0x0008 (0x0008 - 0x0000)
struct BFGMathUtils_ArcTanDegreesFast final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMathUtils_ArcTanDegreesFast) == 0x000004, "Wrong alignment on BFGMathUtils_ArcTanDegreesFast");
static_assert(sizeof(BFGMathUtils_ArcTanDegreesFast) == 0x000008, "Wrong size on BFGMathUtils_ArcTanDegreesFast");
static_assert(offsetof(BFGMathUtils_ArcTanDegreesFast, _fValue) == 0x000000, "Member 'BFGMathUtils_ArcTanDegreesFast::_fValue' has a wrong offset!");
static_assert(offsetof(BFGMathUtils_ArcTanDegreesFast, ReturnValue) == 0x000004, "Member 'BFGMathUtils_ArcTanDegreesFast::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMathUtils.ArcTanRadiansFast
// 0x0008 (0x0008 - 0x0000)
struct BFGMathUtils_ArcTanRadiansFast final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMathUtils_ArcTanRadiansFast) == 0x000004, "Wrong alignment on BFGMathUtils_ArcTanRadiansFast");
static_assert(sizeof(BFGMathUtils_ArcTanRadiansFast) == 0x000008, "Wrong size on BFGMathUtils_ArcTanRadiansFast");
static_assert(offsetof(BFGMathUtils_ArcTanRadiansFast, _fValue) == 0x000000, "Member 'BFGMathUtils_ArcTanRadiansFast::_fValue' has a wrong offset!");
static_assert(offsetof(BFGMathUtils_ArcTanRadiansFast, ReturnValue) == 0x000004, "Member 'BFGMathUtils_ArcTanRadiansFast::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMathUtils.AreBoxesOverlapping
// 0x0034 (0x0034 - 0x0000)
struct BFGMathUtils_AreBoxesOverlapping final
{
public:
	struct FVector                                _vBoxA_Origin;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vBoxA_Extent;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vBoxB_Origin;                                     // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vBoxB_Extent;                                     // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMathUtils_AreBoxesOverlapping) == 0x000004, "Wrong alignment on BFGMathUtils_AreBoxesOverlapping");
static_assert(sizeof(BFGMathUtils_AreBoxesOverlapping) == 0x000034, "Wrong size on BFGMathUtils_AreBoxesOverlapping");
static_assert(offsetof(BFGMathUtils_AreBoxesOverlapping, _vBoxA_Origin) == 0x000000, "Member 'BFGMathUtils_AreBoxesOverlapping::_vBoxA_Origin' has a wrong offset!");
static_assert(offsetof(BFGMathUtils_AreBoxesOverlapping, _vBoxA_Extent) == 0x00000C, "Member 'BFGMathUtils_AreBoxesOverlapping::_vBoxA_Extent' has a wrong offset!");
static_assert(offsetof(BFGMathUtils_AreBoxesOverlapping, _vBoxB_Origin) == 0x000018, "Member 'BFGMathUtils_AreBoxesOverlapping::_vBoxB_Origin' has a wrong offset!");
static_assert(offsetof(BFGMathUtils_AreBoxesOverlapping, _vBoxB_Extent) == 0x000024, "Member 'BFGMathUtils_AreBoxesOverlapping::_vBoxB_Extent' has a wrong offset!");
static_assert(offsetof(BFGMathUtils_AreBoxesOverlapping, ReturnValue) == 0x000030, "Member 'BFGMathUtils_AreBoxesOverlapping::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMathUtils.GetRandomVectorInRange
// 0x0024 (0x0024 - 0x0000)
struct BFGMathUtils_GetRandomVectorInRange final
{
public:
	struct FVector                                _vRangeMin;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vRangeMax;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMathUtils_GetRandomVectorInRange) == 0x000004, "Wrong alignment on BFGMathUtils_GetRandomVectorInRange");
static_assert(sizeof(BFGMathUtils_GetRandomVectorInRange) == 0x000024, "Wrong size on BFGMathUtils_GetRandomVectorInRange");
static_assert(offsetof(BFGMathUtils_GetRandomVectorInRange, _vRangeMin) == 0x000000, "Member 'BFGMathUtils_GetRandomVectorInRange::_vRangeMin' has a wrong offset!");
static_assert(offsetof(BFGMathUtils_GetRandomVectorInRange, _vRangeMax) == 0x00000C, "Member 'BFGMathUtils_GetRandomVectorInRange::_vRangeMax' has a wrong offset!");
static_assert(offsetof(BFGMathUtils_GetRandomVectorInRange, ReturnValue) == 0x000018, "Member 'BFGMathUtils_GetRandomVectorInRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.BuildProjectionMatrix
// 0x0060 (0x0060 - 0x0000)
struct BFGMatrixMath_BuildProjectionMatrix final
{
public:
	struct FIntPoint                              RenderTargetSize;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraProjectionMode                         ProjectionType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOV;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOrthoWidth;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ProjectionMatrix;                                  // 0x0020(0x0040)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_BuildProjectionMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_BuildProjectionMatrix");
static_assert(sizeof(BFGMatrixMath_BuildProjectionMatrix) == 0x000060, "Wrong size on BFGMatrixMath_BuildProjectionMatrix");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, RenderTargetSize) == 0x000000, "Member 'BFGMatrixMath_BuildProjectionMatrix::RenderTargetSize' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, ProjectionType) == 0x000008, "Member 'BFGMatrixMath_BuildProjectionMatrix::ProjectionType' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, FOV) == 0x00000C, "Member 'BFGMatrixMath_BuildProjectionMatrix::FOV' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, InOrthoWidth) == 0x000010, "Member 'BFGMatrixMath_BuildProjectionMatrix::InOrthoWidth' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, ProjectionMatrix) == 0x000020, "Member 'BFGMatrixMath_BuildProjectionMatrix::ProjectionMatrix' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.GetInverseViewProjMatrix
// 0x00C0 (0x00C0 - 0x0000)
struct BFGMatrixMath_GetInverseViewProjMatrix final
{
public:
	struct FMatrix                                _matView;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                _matProj;                                          // 0x0040(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0080(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetInverseViewProjMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_GetInverseViewProjMatrix");
static_assert(sizeof(BFGMatrixMath_GetInverseViewProjMatrix) == 0x0000C0, "Wrong size on BFGMatrixMath_GetInverseViewProjMatrix");
static_assert(offsetof(BFGMatrixMath_GetInverseViewProjMatrix, _matView) == 0x000000, "Member 'BFGMatrixMath_GetInverseViewProjMatrix::_matView' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetInverseViewProjMatrix, _matProj) == 0x000040, "Member 'BFGMatrixMath_GetInverseViewProjMatrix::_matProj' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetInverseViewProjMatrix, ReturnValue) == 0x000080, "Member 'BFGMatrixMath_GetInverseViewProjMatrix::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.GetMatrixAsLinearColor
// 0x0090 (0x0090 - 0x0000)
struct BFGMatrixMath_GetMatrixAsLinearColor final
{
public:
	struct FLinearColor                           _row1;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row2;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row3;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row4;                                             // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                _m;                                                // 0x0040(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bTransposeOutput;                                 // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMatrixMath_GetMatrixAsLinearColor) == 0x000010, "Wrong alignment on BFGMatrixMath_GetMatrixAsLinearColor");
static_assert(sizeof(BFGMatrixMath_GetMatrixAsLinearColor) == 0x000090, "Wrong size on BFGMatrixMath_GetMatrixAsLinearColor");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _row1) == 0x000000, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_row1' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _row2) == 0x000010, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_row2' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _row3) == 0x000020, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_row3' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _row4) == 0x000030, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_row4' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _m) == 0x000040, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_m' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _bTransposeOutput) == 0x000080, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_bTransposeOutput' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.GetMatrixFromColor
// 0x0090 (0x0090 - 0x0000)
struct BFGMatrixMath_GetMatrixFromColor final
{
public:
	struct FLinearColor                           _row1;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row2;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row3;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row4;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bTransposeInput;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0050(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetMatrixFromColor) == 0x000010, "Wrong alignment on BFGMatrixMath_GetMatrixFromColor");
static_assert(sizeof(BFGMatrixMath_GetMatrixFromColor) == 0x000090, "Wrong size on BFGMatrixMath_GetMatrixFromColor");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _row1) == 0x000000, "Member 'BFGMatrixMath_GetMatrixFromColor::_row1' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _row2) == 0x000010, "Member 'BFGMatrixMath_GetMatrixFromColor::_row2' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _row3) == 0x000020, "Member 'BFGMatrixMath_GetMatrixFromColor::_row3' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _row4) == 0x000030, "Member 'BFGMatrixMath_GetMatrixFromColor::_row4' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _bTransposeInput) == 0x000040, "Member 'BFGMatrixMath_GetMatrixFromColor::_bTransposeInput' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, ReturnValue) == 0x000050, "Member 'BFGMatrixMath_GetMatrixFromColor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.GetMatrixFromTransform
// 0x0080 (0x0080 - 0x0000)
struct BFGMatrixMath_GetMatrixFromTransform final
{
public:
	struct FTransform                             _Transform;                                        // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bWithScale;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetMatrixFromTransform) == 0x000010, "Wrong alignment on BFGMatrixMath_GetMatrixFromTransform");
static_assert(sizeof(BFGMatrixMath_GetMatrixFromTransform) == 0x000080, "Wrong size on BFGMatrixMath_GetMatrixFromTransform");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromTransform, _Transform) == 0x000000, "Member 'BFGMatrixMath_GetMatrixFromTransform::_Transform' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromTransform, _bWithScale) == 0x000030, "Member 'BFGMatrixMath_GetMatrixFromTransform::_bWithScale' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromTransform, ReturnValue) == 0x000040, "Member 'BFGMatrixMath_GetMatrixFromTransform::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.GetProjectionMatrix
// 0x0050 (0x0050 - 0x0000)
struct BFGMatrixMath_GetProjectionMatrix final
{
public:
	class USceneCaptureComponent2D*               _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetProjectionMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_GetProjectionMatrix");
static_assert(sizeof(BFGMatrixMath_GetProjectionMatrix) == 0x000050, "Wrong size on BFGMatrixMath_GetProjectionMatrix");
static_assert(offsetof(BFGMatrixMath_GetProjectionMatrix, _pComponent) == 0x000000, "Member 'BFGMatrixMath_GetProjectionMatrix::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetProjectionMatrix, ReturnValue) == 0x000010, "Member 'BFGMatrixMath_GetProjectionMatrix::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.GetViewMatrix
// 0x0050 (0x0050 - 0x0000)
struct BFGMatrixMath_GetViewMatrix final
{
public:
	class USceneCaptureComponent2D*               _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetViewMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_GetViewMatrix");
static_assert(sizeof(BFGMatrixMath_GetViewMatrix) == 0x000050, "Wrong size on BFGMatrixMath_GetViewMatrix");
static_assert(offsetof(BFGMatrixMath_GetViewMatrix, _pComponent) == 0x000000, "Member 'BFGMatrixMath_GetViewMatrix::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetViewMatrix, ReturnValue) == 0x000010, "Member 'BFGMatrixMath_GetViewMatrix::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.GetViewProjectionMatrix
// 0x0050 (0x0050 - 0x0000)
struct BFGMatrixMath_GetViewProjectionMatrix final
{
public:
	class USceneCaptureComponent2D*               _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetViewProjectionMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_GetViewProjectionMatrix");
static_assert(sizeof(BFGMatrixMath_GetViewProjectionMatrix) == 0x000050, "Wrong size on BFGMatrixMath_GetViewProjectionMatrix");
static_assert(offsetof(BFGMatrixMath_GetViewProjectionMatrix, _pComponent) == 0x000000, "Member 'BFGMatrixMath_GetViewProjectionMatrix::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetViewProjectionMatrix, ReturnValue) == 0x000010, "Member 'BFGMatrixMath_GetViewProjectionMatrix::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.InvertMatrix
// 0x0080 (0x0080 - 0x0000)
struct BFGMatrixMath_InvertMatrix final
{
public:
	struct FMatrix                                _a;                                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_InvertMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_InvertMatrix");
static_assert(sizeof(BFGMatrixMath_InvertMatrix) == 0x000080, "Wrong size on BFGMatrixMath_InvertMatrix");
static_assert(offsetof(BFGMatrixMath_InvertMatrix, _a) == 0x000000, "Member 'BFGMatrixMath_InvertMatrix::_a' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrix, ReturnValue) == 0x000040, "Member 'BFGMatrixMath_InvertMatrix::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.InvertMatrixFromColor
// 0x0090 (0x0090 - 0x0000)
struct BFGMatrixMath_InvertMatrixFromColor final
{
public:
	struct FLinearColor                           _row1;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row2;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row3;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _row4;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bTransposeInput;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0050(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_InvertMatrixFromColor) == 0x000010, "Wrong alignment on BFGMatrixMath_InvertMatrixFromColor");
static_assert(sizeof(BFGMatrixMath_InvertMatrixFromColor) == 0x000090, "Wrong size on BFGMatrixMath_InvertMatrixFromColor");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _row1) == 0x000000, "Member 'BFGMatrixMath_InvertMatrixFromColor::_row1' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _row2) == 0x000010, "Member 'BFGMatrixMath_InvertMatrixFromColor::_row2' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _row3) == 0x000020, "Member 'BFGMatrixMath_InvertMatrixFromColor::_row3' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _row4) == 0x000030, "Member 'BFGMatrixMath_InvertMatrixFromColor::_row4' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _bTransposeInput) == 0x000040, "Member 'BFGMatrixMath_InvertMatrixFromColor::_bTransposeInput' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, ReturnValue) == 0x000050, "Member 'BFGMatrixMath_InvertMatrixFromColor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.MultiplyMatrices
// 0x00C0 (0x00C0 - 0x0000)
struct BFGMatrixMath_MultiplyMatrices final
{
public:
	struct FMatrix                                _a;                                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                _b;                                                // 0x0040(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0080(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_MultiplyMatrices) == 0x000010, "Wrong alignment on BFGMatrixMath_MultiplyMatrices");
static_assert(sizeof(BFGMatrixMath_MultiplyMatrices) == 0x0000C0, "Wrong size on BFGMatrixMath_MultiplyMatrices");
static_assert(offsetof(BFGMatrixMath_MultiplyMatrices, _a) == 0x000000, "Member 'BFGMatrixMath_MultiplyMatrices::_a' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_MultiplyMatrices, _b) == 0x000040, "Member 'BFGMatrixMath_MultiplyMatrices::_b' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_MultiplyMatrices, ReturnValue) == 0x000080, "Member 'BFGMatrixMath_MultiplyMatrices::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.TransformVector
// 0x0060 (0x0060 - 0x0000)
struct BFGMatrixMath_TransformVector final
{
public:
	struct FMatrix                                _a;                                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector4                               _b;                                                // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_TransformVector) == 0x000010, "Wrong alignment on BFGMatrixMath_TransformVector");
static_assert(sizeof(BFGMatrixMath_TransformVector) == 0x000060, "Wrong size on BFGMatrixMath_TransformVector");
static_assert(offsetof(BFGMatrixMath_TransformVector, _a) == 0x000000, "Member 'BFGMatrixMath_TransformVector::_a' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_TransformVector, _b) == 0x000040, "Member 'BFGMatrixMath_TransformVector::_b' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_TransformVector, ReturnValue) == 0x000050, "Member 'BFGMatrixMath_TransformVector::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMatrixMath.TransposeMatrix
// 0x0080 (0x0080 - 0x0000)
struct BFGMatrixMath_TransposeMatrix final
{
public:
	struct FMatrix                                _a;                                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_TransposeMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_TransposeMatrix");
static_assert(sizeof(BFGMatrixMath_TransposeMatrix) == 0x000080, "Wrong size on BFGMatrixMath_TransposeMatrix");
static_assert(offsetof(BFGMatrixMath_TransposeMatrix, _a) == 0x000000, "Member 'BFGMatrixMath_TransposeMatrix::_a' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_TransposeMatrix, ReturnValue) == 0x000040, "Member 'BFGMatrixMath_TransposeMatrix::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_NarrativeSequence_Strike.SetFailed
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_NarrativeSequence_Strike_SetFailed final
{
public:
	bool                                          _bFailed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_NarrativeSequence_Strike_SetFailed) == 0x000001, "Wrong alignment on BFGWidget_NarrativeSequence_Strike_SetFailed");
static_assert(sizeof(BFGWidget_NarrativeSequence_Strike_SetFailed) == 0x000001, "Wrong size on BFGWidget_NarrativeSequence_Strike_SetFailed");
static_assert(offsetof(BFGWidget_NarrativeSequence_Strike_SetFailed, _bFailed) == 0x000000, "Member 'BFGWidget_NarrativeSequence_Strike_SetFailed::_bFailed' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper.AddContentToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Newspaper_AddContentToLayout final
{
public:
	const class UBFGWidget_Newspaper_Content*     _pContent;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_AddContentToLayout) == 0x000008, "Wrong alignment on BFGWidget_Newspaper_AddContentToLayout");
static_assert(sizeof(BFGWidget_Newspaper_AddContentToLayout) == 0x000008, "Wrong size on BFGWidget_Newspaper_AddContentToLayout");
static_assert(offsetof(BFGWidget_Newspaper_AddContentToLayout, _pContent) == 0x000000, "Member 'BFGWidget_Newspaper_AddContentToLayout::_pContent' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper.InitContent
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Newspaper_InitContent final
{
public:
	class UBFGDataAsset_NewspaperInfo*            _pContentInfo;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_InitContent) == 0x000008, "Wrong alignment on BFGWidget_Newspaper_InitContent");
static_assert(sizeof(BFGWidget_Newspaper_InitContent) == 0x000008, "Wrong size on BFGWidget_Newspaper_InitContent");
static_assert(offsetof(BFGWidget_Newspaper_InitContent, _pContentInfo) == 0x000000, "Member 'BFGWidget_Newspaper_InitContent::_pContentInfo' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper.SetSubtitleSubtitles
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Newspaper_SetSubtitleSubtitles final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_SetSubtitleSubtitles) == 0x000008, "Wrong alignment on BFGWidget_Newspaper_SetSubtitleSubtitles");
static_assert(sizeof(BFGWidget_Newspaper_SetSubtitleSubtitles) == 0x000018, "Wrong size on BFGWidget_Newspaper_SetSubtitleSubtitles");
static_assert(offsetof(BFGWidget_Newspaper_SetSubtitleSubtitles, Text) == 0x000000, "Member 'BFGWidget_Newspaper_SetSubtitleSubtitles::Text' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper.SetTitleSubtitles
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Newspaper_SetTitleSubtitles final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_SetTitleSubtitles) == 0x000008, "Wrong alignment on BFGWidget_Newspaper_SetTitleSubtitles");
static_assert(sizeof(BFGWidget_Newspaper_SetTitleSubtitles) == 0x000018, "Wrong size on BFGWidget_Newspaper_SetTitleSubtitles");
static_assert(offsetof(BFGWidget_Newspaper_SetTitleSubtitles, Text) == 0x000000, "Member 'BFGWidget_Newspaper_SetTitleSubtitles::Text' has a wrong offset!");

// Function BFGCore.BFGWidget_Newspaper.DetermineBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_Newspaper_DetermineBackgroundColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Newspaper_DetermineBackgroundColor) == 0x000004, "Wrong alignment on BFGWidget_Newspaper_DetermineBackgroundColor");
static_assert(sizeof(BFGWidget_Newspaper_DetermineBackgroundColor) == 0x000010, "Wrong size on BFGWidget_Newspaper_DetermineBackgroundColor");
static_assert(offsetof(BFGWidget_Newspaper_DetermineBackgroundColor, ReturnValue) == 0x000000, "Member 'BFGWidget_Newspaper_DetermineBackgroundColor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_LinearGraphNode.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_LinearGraphNode_SetSelected final
{
public:
	bool                                          _bSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_LinearGraphNode_SetSelected) == 0x000001, "Wrong alignment on BFGWidget_LinearGraphNode_SetSelected");
static_assert(sizeof(BFGWidget_LinearGraphNode_SetSelected) == 0x000001, "Wrong size on BFGWidget_LinearGraphNode_SetSelected");
static_assert(offsetof(BFGWidget_LinearGraphNode_SetSelected, _bSelected) == 0x000000, "Member 'BFGWidget_LinearGraphNode_SetSelected::_bSelected' has a wrong offset!");

// Function BFGCore.BFGWidget_LinearGraphNode.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_LinearGraphNode_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_LinearGraphNode_IsSelected) == 0x000001, "Wrong alignment on BFGWidget_LinearGraphNode_IsSelected");
static_assert(sizeof(BFGWidget_LinearGraphNode_IsSelected) == 0x000001, "Wrong size on BFGWidget_LinearGraphNode_IsSelected");
static_assert(offsetof(BFGWidget_LinearGraphNode_IsSelected, ReturnValue) == 0x000000, "Member 'BFGWidget_LinearGraphNode_IsSelected::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLab_UpgradeGraphNode.AnimateActivation
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_PoxLab_UpgradeGraphNode_AnimateActivation final
{
public:
	EPoxLabUpgradeGraphNodeState                  _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLab_UpgradeGraphNode_AnimateActivation) == 0x000001, "Wrong alignment on BFGWidget_PoxLab_UpgradeGraphNode_AnimateActivation");
static_assert(sizeof(BFGWidget_PoxLab_UpgradeGraphNode_AnimateActivation) == 0x000001, "Wrong size on BFGWidget_PoxLab_UpgradeGraphNode_AnimateActivation");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraphNode_AnimateActivation, _eState) == 0x000000, "Member 'BFGWidget_PoxLab_UpgradeGraphNode_AnimateActivation::_eState' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLab_UpgradeGraphNode.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_PoxLab_UpgradeGraphNode_OnStateChanged final
{
public:
	EPoxLabUpgradeGraphNodeState                  _eNewState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLab_UpgradeGraphNode_OnStateChanged) == 0x000001, "Wrong alignment on BFGWidget_PoxLab_UpgradeGraphNode_OnStateChanged");
static_assert(sizeof(BFGWidget_PoxLab_UpgradeGraphNode_OnStateChanged) == 0x000001, "Wrong size on BFGWidget_PoxLab_UpgradeGraphNode_OnStateChanged");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraphNode_OnStateChanged, _eNewState) == 0x000000, "Member 'BFGWidget_PoxLab_UpgradeGraphNode_OnStateChanged::_eNewState' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLab_UpgradeGraphNode.SetGraphState
// 0x0003 (0x0003 - 0x0000)
struct BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState final
{
public:
	bool                                          _bUpgradeable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUpgraded;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPurchaseable;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState) == 0x000001, "Wrong alignment on BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState");
static_assert(sizeof(BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState) == 0x000003, "Wrong size on BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState, _bUpgradeable) == 0x000000, "Member 'BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState::_bUpgradeable' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState, _bUpgraded) == 0x000001, "Member 'BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState::_bUpgraded' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState, _bPurchaseable) == 0x000002, "Member 'BFGWidget_PoxLab_UpgradeGraphNode_SetGraphState::_bPurchaseable' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLab_UpgradeGraphNode.SetGraphText
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_PoxLab_UpgradeGraphNode_SetGraphText final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLab_UpgradeGraphNode_SetGraphText) == 0x000008, "Wrong alignment on BFGWidget_PoxLab_UpgradeGraphNode_SetGraphText");
static_assert(sizeof(BFGWidget_PoxLab_UpgradeGraphNode_SetGraphText) == 0x000018, "Wrong size on BFGWidget_PoxLab_UpgradeGraphNode_SetGraphText");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraphNode_SetGraphText, _strText) == 0x000000, "Member 'BFGWidget_PoxLab_UpgradeGraphNode_SetGraphText::_strText' has a wrong offset!");

// Function BFGCore.BFGMenuFactory.CreateGenericDialogState
// 0x0010 (0x0010 - 0x0000)
struct BFGMenuFactory_CreateGenericDialogState final
{
public:
	class FName                                   _menuName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGGameFlowState_GenericDialog*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMenuFactory_CreateGenericDialogState) == 0x000008, "Wrong alignment on BFGMenuFactory_CreateGenericDialogState");
static_assert(sizeof(BFGMenuFactory_CreateGenericDialogState) == 0x000010, "Wrong size on BFGMenuFactory_CreateGenericDialogState");
static_assert(offsetof(BFGMenuFactory_CreateGenericDialogState, _menuName) == 0x000000, "Member 'BFGMenuFactory_CreateGenericDialogState::_menuName' has a wrong offset!");
static_assert(offsetof(BFGMenuFactory_CreateGenericDialogState, ReturnValue) == 0x000008, "Member 'BFGMenuFactory_CreateGenericDialogState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMenuFactory.CreateMenuState
// 0x0020 (0x0020 - 0x0000)
struct BFGMenuFactory_CreateMenuState final
{
public:
	class FName                                   _menuName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bKeepCurrentGameFlowState;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                _pMenuContext;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGGameFlowState_MenuBase*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMenuFactory_CreateMenuState) == 0x000008, "Wrong alignment on BFGMenuFactory_CreateMenuState");
static_assert(sizeof(BFGMenuFactory_CreateMenuState) == 0x000020, "Wrong size on BFGMenuFactory_CreateMenuState");
static_assert(offsetof(BFGMenuFactory_CreateMenuState, _menuName) == 0x000000, "Member 'BFGMenuFactory_CreateMenuState::_menuName' has a wrong offset!");
static_assert(offsetof(BFGMenuFactory_CreateMenuState, _bKeepCurrentGameFlowState) == 0x000008, "Member 'BFGMenuFactory_CreateMenuState::_bKeepCurrentGameFlowState' has a wrong offset!");
static_assert(offsetof(BFGMenuFactory_CreateMenuState, _pMenuContext) == 0x000010, "Member 'BFGMenuFactory_CreateMenuState::_pMenuContext' has a wrong offset!");
static_assert(offsetof(BFGMenuFactory_CreateMenuState, ReturnValue) == 0x000018, "Member 'BFGMenuFactory_CreateMenuState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMenuFactory.GetMenuStateClass
// 0x0010 (0x0010 - 0x0000)
struct BFGMenuFactory_GetMenuStateClass final
{
public:
	class FName                                   _menuName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMenuFactory_GetMenuStateClass) == 0x000008, "Wrong alignment on BFGMenuFactory_GetMenuStateClass");
static_assert(sizeof(BFGMenuFactory_GetMenuStateClass) == 0x000010, "Wrong size on BFGMenuFactory_GetMenuStateClass");
static_assert(offsetof(BFGMenuFactory_GetMenuStateClass, _menuName) == 0x000000, "Member 'BFGMenuFactory_GetMenuStateClass::_menuName' has a wrong offset!");
static_assert(offsetof(BFGMenuFactory_GetMenuStateClass, ReturnValue) == 0x000008, "Member 'BFGMenuFactory_GetMenuStateClass::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TimedConfirm.OnUpdateTimer
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_TimedConfirm_OnUpdateTimer final
{
public:
	float                                         _fTimer;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TimedConfirm_OnUpdateTimer) == 0x000004, "Wrong alignment on BFGWidget_TimedConfirm_OnUpdateTimer");
static_assert(sizeof(BFGWidget_TimedConfirm_OnUpdateTimer) == 0x000004, "Wrong size on BFGWidget_TimedConfirm_OnUpdateTimer");
static_assert(offsetof(BFGWidget_TimedConfirm_OnUpdateTimer, _fTimer) == 0x000000, "Member 'BFGWidget_TimedConfirm_OnUpdateTimer::_fTimer' has a wrong offset!");

// Function BFGCore.BFGWidget_TimedConfirm.SetPromptMessage
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_TimedConfirm_SetPromptMessage final
{
public:
	class FText                                   _strPromptMessage;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TimedConfirm_SetPromptMessage) == 0x000008, "Wrong alignment on BFGWidget_TimedConfirm_SetPromptMessage");
static_assert(sizeof(BFGWidget_TimedConfirm_SetPromptMessage) == 0x000018, "Wrong size on BFGWidget_TimedConfirm_SetPromptMessage");
static_assert(offsetof(BFGWidget_TimedConfirm_SetPromptMessage, _strPromptMessage) == 0x000000, "Member 'BFGWidget_TimedConfirm_SetPromptMessage::_strPromptMessage' has a wrong offset!");

// Function BFGCore.BFGMenuLifetimeManager.OnMenuFinalized
// 0x0008 (0x0008 - 0x0000)
struct BFGMenuLifetimeManager_OnMenuFinalized final
{
public:
	class UBFGWidget_MenuBase*                    _pMenuBase;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMenuLifetimeManager_OnMenuFinalized) == 0x000008, "Wrong alignment on BFGMenuLifetimeManager_OnMenuFinalized");
static_assert(sizeof(BFGMenuLifetimeManager_OnMenuFinalized) == 0x000008, "Wrong size on BFGMenuLifetimeManager_OnMenuFinalized");
static_assert(offsetof(BFGMenuLifetimeManager_OnMenuFinalized, _pMenuBase) == 0x000000, "Member 'BFGMenuLifetimeManager_OnMenuFinalized::_pMenuBase' has a wrong offset!");

// Function BFGCore.BFGMIButton.HandleMentallyInteractabledUse
// 0x0010 (0x0010 - 0x0000)
struct BFGMIButton_HandleMentallyInteractabledUse final
{
public:
	class UBFGActorComponent_MentallyInteractable* _pMentallyInteractable;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _pController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMIButton_HandleMentallyInteractabledUse) == 0x000008, "Wrong alignment on BFGMIButton_HandleMentallyInteractabledUse");
static_assert(sizeof(BFGMIButton_HandleMentallyInteractabledUse) == 0x000010, "Wrong size on BFGMIButton_HandleMentallyInteractabledUse");
static_assert(offsetof(BFGMIButton_HandleMentallyInteractabledUse, _pMentallyInteractable) == 0x000000, "Member 'BFGMIButton_HandleMentallyInteractabledUse::_pMentallyInteractable' has a wrong offset!");
static_assert(offsetof(BFGMIButton_HandleMentallyInteractabledUse, _pController) == 0x000008, "Member 'BFGMIButton_HandleMentallyInteractabledUse::_pController' has a wrong offset!");

// Function BFGCore.BFGMissionCustomTriggerZone.OnStateChange
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionCustomTriggerZone_OnStateChange final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerState                                 _eLastState;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerState                                 _eCurrentState;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMissionCustomTriggerZone_OnStateChange) == 0x000008, "Wrong alignment on BFGMissionCustomTriggerZone_OnStateChange");
static_assert(sizeof(BFGMissionCustomTriggerZone_OnStateChange) == 0x000010, "Wrong size on BFGMissionCustomTriggerZone_OnStateChange");
static_assert(offsetof(BFGMissionCustomTriggerZone_OnStateChange, _pActor) == 0x000000, "Member 'BFGMissionCustomTriggerZone_OnStateChange::_pActor' has a wrong offset!");
static_assert(offsetof(BFGMissionCustomTriggerZone_OnStateChange, _eLastState) == 0x000008, "Member 'BFGMissionCustomTriggerZone_OnStateChange::_eLastState' has a wrong offset!");
static_assert(offsetof(BFGMissionCustomTriggerZone_OnStateChange, _eCurrentState) == 0x000009, "Member 'BFGMissionCustomTriggerZone_OnStateChange::_eCurrentState' has a wrong offset!");

// Function BFGCore.BFGWidget_GameplayTagOption.SetParentWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameplayTagOption_SetParentWidget final
{
public:
	class UBFGWidget_GameplayTags*                _pParent;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameplayTagOption_SetParentWidget) == 0x000008, "Wrong alignment on BFGWidget_GameplayTagOption_SetParentWidget");
static_assert(sizeof(BFGWidget_GameplayTagOption_SetParentWidget) == 0x000008, "Wrong size on BFGWidget_GameplayTagOption_SetParentWidget");
static_assert(offsetof(BFGWidget_GameplayTagOption_SetParentWidget, _pParent) == 0x000000, "Member 'BFGWidget_GameplayTagOption_SetParentWidget::_pParent' has a wrong offset!");

// Function BFGCore.BFGWidget_GameplayTagOption.GetParentWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameplayTagOption_GetParentWidget final
{
public:
	class UBFGWidget_GameplayTags*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameplayTagOption_GetParentWidget) == 0x000008, "Wrong alignment on BFGWidget_GameplayTagOption_GetParentWidget");
static_assert(sizeof(BFGWidget_GameplayTagOption_GetParentWidget) == 0x000008, "Wrong size on BFGWidget_GameplayTagOption_GetParentWidget");
static_assert(offsetof(BFGWidget_GameplayTagOption_GetParentWidget, ReturnValue) == 0x000000, "Member 'BFGWidget_GameplayTagOption_GetParentWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionCinematicVolume.DoHideActors
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionCinematicVolume_DoHideActors final
{
public:
	TArray<class AActor*>                         ApActors;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionCinematicVolume_DoHideActors) == 0x000008, "Wrong alignment on BFGMissionCinematicVolume_DoHideActors");
static_assert(sizeof(BFGMissionCinematicVolume_DoHideActors) == 0x000010, "Wrong size on BFGMissionCinematicVolume_DoHideActors");
static_assert(offsetof(BFGMissionCinematicVolume_DoHideActors, ApActors) == 0x000000, "Member 'BFGMissionCinematicVolume_DoHideActors::ApActors' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_AlertLevel.EnableStealthWarning
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_AlertLevel_EnableStealthWarning final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_AlertLevel_EnableStealthWarning) == 0x000001, "Wrong alignment on BFGWidget_HUD_AlertLevel_EnableStealthWarning");
static_assert(sizeof(BFGWidget_HUD_AlertLevel_EnableStealthWarning) == 0x000001, "Wrong size on BFGWidget_HUD_AlertLevel_EnableStealthWarning");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_EnableStealthWarning, _bEnable) == 0x000000, "Member 'BFGWidget_HUD_AlertLevel_EnableStealthWarning::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_AlertLevel.SetAlertBarPercent
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_AlertLevel_SetAlertBarPercent final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_AlertLevel_SetAlertBarPercent) == 0x000004, "Wrong alignment on BFGWidget_HUD_AlertLevel_SetAlertBarPercent");
static_assert(sizeof(BFGWidget_HUD_AlertLevel_SetAlertBarPercent) == 0x000004, "Wrong size on BFGWidget_HUD_AlertLevel_SetAlertBarPercent");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_SetAlertBarPercent, _fValue) == 0x000000, "Member 'BFGWidget_HUD_AlertLevel_SetAlertBarPercent::_fValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_AlertLevel.SetAlertDevelopmentState
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iState;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState) == 0x000004, "Wrong alignment on BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState");
static_assert(sizeof(BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState) == 0x000008, "Wrong size on BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState, _iIndex) == 0x000000, "Member 'BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState, _iState) == 0x000004, "Member 'BFGWidget_HUD_AlertLevel_SetAlertDevelopmentState::_iState' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_AlertLevel.SetIconPack
// 0x0228 (0x0228 - 0x0000)
struct BFGWidget_HUD_AlertLevel_SetIconPack final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGAlertLevelIconPack                 _oIcon;                                            // 0x0008(0x0220)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_AlertLevel_SetIconPack) == 0x000008, "Wrong alignment on BFGWidget_HUD_AlertLevel_SetIconPack");
static_assert(sizeof(BFGWidget_HUD_AlertLevel_SetIconPack) == 0x000228, "Wrong size on BFGWidget_HUD_AlertLevel_SetIconPack");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_SetIconPack, _iIndex) == 0x000000, "Member 'BFGWidget_HUD_AlertLevel_SetIconPack::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_SetIconPack, _oIcon) == 0x000008, "Member 'BFGWidget_HUD_AlertLevel_SetIconPack::_oIcon' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_AlertLevel.SetInvestigativeBarPercent
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_AlertLevel_SetInvestigativeBarPercent final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_AlertLevel_SetInvestigativeBarPercent) == 0x000004, "Wrong alignment on BFGWidget_HUD_AlertLevel_SetInvestigativeBarPercent");
static_assert(sizeof(BFGWidget_HUD_AlertLevel_SetInvestigativeBarPercent) == 0x000004, "Wrong size on BFGWidget_HUD_AlertLevel_SetInvestigativeBarPercent");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_SetInvestigativeBarPercent, _fValue) == 0x000000, "Member 'BFGWidget_HUD_AlertLevel_SetInvestigativeBarPercent::_fValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_AlertLevel.SetSeenLevel
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_AlertLevel_SetSeenLevel final
{
public:
	EBFGAlertSystemSeenState                      _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_AlertLevel_SetSeenLevel) == 0x000001, "Wrong alignment on BFGWidget_HUD_AlertLevel_SetSeenLevel");
static_assert(sizeof(BFGWidget_HUD_AlertLevel_SetSeenLevel) == 0x000001, "Wrong size on BFGWidget_HUD_AlertLevel_SetSeenLevel");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_SetSeenLevel, _eState) == 0x000000, "Member 'BFGWidget_HUD_AlertLevel_SetSeenLevel::_eState' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_AlertLevel.SetStealthWarningLevel
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_AlertLevel_SetStealthWarningLevel final
{
public:
	EBFGAlertSystemState                          _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_AlertLevel_SetStealthWarningLevel) == 0x000001, "Wrong alignment on BFGWidget_HUD_AlertLevel_SetStealthWarningLevel");
static_assert(sizeof(BFGWidget_HUD_AlertLevel_SetStealthWarningLevel) == 0x000001, "Wrong size on BFGWidget_HUD_AlertLevel_SetStealthWarningLevel");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_SetStealthWarningLevel, _eState) == 0x000000, "Member 'BFGWidget_HUD_AlertLevel_SetStealthWarningLevel::_eState' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_AlertLevel.TriggerAnimationNewLevelReached
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_AlertLevel_TriggerAnimationNewLevelReached final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_AlertLevel_TriggerAnimationNewLevelReached) == 0x000004, "Wrong alignment on BFGWidget_HUD_AlertLevel_TriggerAnimationNewLevelReached");
static_assert(sizeof(BFGWidget_HUD_AlertLevel_TriggerAnimationNewLevelReached) == 0x000004, "Wrong size on BFGWidget_HUD_AlertLevel_TriggerAnimationNewLevelReached");
static_assert(offsetof(BFGWidget_HUD_AlertLevel_TriggerAnimationNewLevelReached, _iIndex) == 0x000000, "Member 'BFGWidget_HUD_AlertLevel_TriggerAnimationNewLevelReached::_iIndex' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.ReceiveUpdate
// 0x0004 (0x0004 - 0x0000)
struct BFGMissionConsequence_Blueprint_ReceiveUpdate final
{
public:
	float                                         _fDelta;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_ReceiveUpdate) == 0x000004, "Wrong alignment on BFGMissionConsequence_Blueprint_ReceiveUpdate");
static_assert(sizeof(BFGMissionConsequence_Blueprint_ReceiveUpdate) == 0x000004, "Wrong size on BFGMissionConsequence_Blueprint_ReceiveUpdate");
static_assert(offsetof(BFGMissionConsequence_Blueprint_ReceiveUpdate, _fDelta) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_ReceiveUpdate::_fDelta' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.GetSourceActor
// 0x0008 (0x0008 - 0x0000)
struct BFGMissionConsequence_Blueprint_GetSourceActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_GetSourceActor) == 0x000008, "Wrong alignment on BFGMissionConsequence_Blueprint_GetSourceActor");
static_assert(sizeof(BFGMissionConsequence_Blueprint_GetSourceActor) == 0x000008, "Wrong size on BFGMissionConsequence_Blueprint_GetSourceActor");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetSourceActor, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_GetSourceActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.GetSourceActorAs
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionConsequence_Blueprint_GetSourceActorAs final
{
public:
	TSubclassOf<class AActor>                     _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_GetSourceActorAs) == 0x000008, "Wrong alignment on BFGMissionConsequence_Blueprint_GetSourceActorAs");
static_assert(sizeof(BFGMissionConsequence_Blueprint_GetSourceActorAs) == 0x000010, "Wrong size on BFGMissionConsequence_Blueprint_GetSourceActorAs");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetSourceActorAs, _pClass) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_GetSourceActorAs::_pClass' has a wrong offset!");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetSourceActorAs, ReturnValue) == 0x000008, "Member 'BFGMissionConsequence_Blueprint_GetSourceActorAs::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.GetSourceComponent
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionConsequence_Blueprint_GetSourceComponent final
{
public:
	TSubclassOf<class UActorComponent>            _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_GetSourceComponent) == 0x000008, "Wrong alignment on BFGMissionConsequence_Blueprint_GetSourceComponent");
static_assert(sizeof(BFGMissionConsequence_Blueprint_GetSourceComponent) == 0x000010, "Wrong size on BFGMissionConsequence_Blueprint_GetSourceComponent");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetSourceComponent, _pClass) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_GetSourceComponent::_pClass' has a wrong offset!");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetSourceComponent, ReturnValue) == 0x000008, "Member 'BFGMissionConsequence_Blueprint_GetSourceComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct BFGMissionConsequence_Blueprint_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_GetTargetActor) == 0x000008, "Wrong alignment on BFGMissionConsequence_Blueprint_GetTargetActor");
static_assert(sizeof(BFGMissionConsequence_Blueprint_GetTargetActor) == 0x000008, "Wrong size on BFGMissionConsequence_Blueprint_GetTargetActor");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetTargetActor, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_GetTargetActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.GetTargetActorAs
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionConsequence_Blueprint_GetTargetActorAs final
{
public:
	TSubclassOf<class AActor>                     _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_GetTargetActorAs) == 0x000008, "Wrong alignment on BFGMissionConsequence_Blueprint_GetTargetActorAs");
static_assert(sizeof(BFGMissionConsequence_Blueprint_GetTargetActorAs) == 0x000010, "Wrong size on BFGMissionConsequence_Blueprint_GetTargetActorAs");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetTargetActorAs, _pClass) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_GetTargetActorAs::_pClass' has a wrong offset!");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetTargetActorAs, ReturnValue) == 0x000008, "Member 'BFGMissionConsequence_Blueprint_GetTargetActorAs::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.GetTargetComponent
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionConsequence_Blueprint_GetTargetComponent final
{
public:
	TSubclassOf<class UActorComponent>            _pClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_GetTargetComponent) == 0x000008, "Wrong alignment on BFGMissionConsequence_Blueprint_GetTargetComponent");
static_assert(sizeof(BFGMissionConsequence_Blueprint_GetTargetComponent) == 0x000010, "Wrong size on BFGMissionConsequence_Blueprint_GetTargetComponent");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetTargetComponent, _pClass) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_GetTargetComponent::_pClass' has a wrong offset!");
static_assert(offsetof(BFGMissionConsequence_Blueprint_GetTargetComponent, ReturnValue) == 0x000008, "Member 'BFGMissionConsequence_Blueprint_GetTargetComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.ReceiveIsComplete
// 0x0001 (0x0001 - 0x0000)
struct BFGMissionConsequence_Blueprint_ReceiveIsComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_ReceiveIsComplete) == 0x000001, "Wrong alignment on BFGMissionConsequence_Blueprint_ReceiveIsComplete");
static_assert(sizeof(BFGMissionConsequence_Blueprint_ReceiveIsComplete) == 0x000001, "Wrong size on BFGMissionConsequence_Blueprint_ReceiveIsComplete");
static_assert(offsetof(BFGMissionConsequence_Blueprint_ReceiveIsComplete, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_ReceiveIsComplete::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionConsequence_Blueprint.ReceiveIsValid
// 0x0001 (0x0001 - 0x0000)
struct BFGMissionConsequence_Blueprint_ReceiveIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionConsequence_Blueprint_ReceiveIsValid) == 0x000001, "Wrong alignment on BFGMissionConsequence_Blueprint_ReceiveIsValid");
static_assert(sizeof(BFGMissionConsequence_Blueprint_ReceiveIsValid) == 0x000001, "Wrong size on BFGMissionConsequence_Blueprint_ReceiveIsValid");
static_assert(offsetof(BFGMissionConsequence_Blueprint_ReceiveIsValid, ReturnValue) == 0x000000, "Member 'BFGMissionConsequence_Blueprint_ReceiveIsValid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionGroup.OnVarChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGMissionGroup_OnVarChanged final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iOldValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iNewValue;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionGroup_OnVarChanged) == 0x000008, "Wrong alignment on BFGMissionGroup_OnVarChanged");
static_assert(sizeof(BFGMissionGroup_OnVarChanged) == 0x000018, "Wrong size on BFGMissionGroup_OnVarChanged");
static_assert(offsetof(BFGMissionGroup_OnVarChanged, _pVarMirror) == 0x000000, "Member 'BFGMissionGroup_OnVarChanged::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGMissionGroup_OnVarChanged, _pVariable) == 0x000008, "Member 'BFGMissionGroup_OnVarChanged::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGMissionGroup_OnVarChanged, _iOldValue) == 0x000010, "Member 'BFGMissionGroup_OnVarChanged::_iOldValue' has a wrong offset!");
static_assert(offsetof(BFGMissionGroup_OnVarChanged, _iNewValue) == 0x000014, "Member 'BFGMissionGroup_OnVarChanged::_iNewValue' has a wrong offset!");

// Function BFGCore.BFGMissionGroup.GetVariable
// 0x0008 (0x0008 - 0x0000)
struct BFGMissionGroup_GetVariable final
{
public:
	class UBFGVariable*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionGroup_GetVariable) == 0x000008, "Wrong alignment on BFGMissionGroup_GetVariable");
static_assert(sizeof(BFGMissionGroup_GetVariable) == 0x000008, "Wrong size on BFGMissionGroup_GetVariable");
static_assert(offsetof(BFGMissionGroup_GetVariable, ReturnValue) == 0x000000, "Member 'BFGMissionGroup_GetVariable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionInterface.GetGuid
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionInterface_GetGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionInterface_GetGuid) == 0x000004, "Wrong alignment on BFGMissionInterface_GetGuid");
static_assert(sizeof(BFGMissionInterface_GetGuid) == 0x000010, "Wrong size on BFGMissionInterface_GetGuid");
static_assert(offsetof(BFGMissionInterface_GetGuid, ReturnValue) == 0x000000, "Member 'BFGMissionInterface_GetGuid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionInterface.GetUsedMissionObjects
// 0x0018 (0x0018 - 0x0000)
struct BFGMissionInterface_GetUsedMissionObjects final
{
public:
	class ABFGGameState*                          _pGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionInterface_GetUsedMissionObjects) == 0x000008, "Wrong alignment on BFGMissionInterface_GetUsedMissionObjects");
static_assert(sizeof(BFGMissionInterface_GetUsedMissionObjects) == 0x000018, "Wrong size on BFGMissionInterface_GetUsedMissionObjects");
static_assert(offsetof(BFGMissionInterface_GetUsedMissionObjects, _pGameState) == 0x000000, "Member 'BFGMissionInterface_GetUsedMissionObjects::_pGameState' has a wrong offset!");
static_assert(offsetof(BFGMissionInterface_GetUsedMissionObjects, ReturnValue) == 0x000008, "Member 'BFGMissionInterface_GetUsedMissionObjects::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionInterface.HasRegistredVariable
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionInterface_HasRegistredVariable final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMissionInterface_HasRegistredVariable) == 0x000008, "Wrong alignment on BFGMissionInterface_HasRegistredVariable");
static_assert(sizeof(BFGMissionInterface_HasRegistredVariable) == 0x000010, "Wrong size on BFGMissionInterface_HasRegistredVariable");
static_assert(offsetof(BFGMissionInterface_HasRegistredVariable, _pVarMirror) == 0x000000, "Member 'BFGMissionInterface_HasRegistredVariable::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGMissionInterface_HasRegistredVariable, ReturnValue) == 0x000008, "Member 'BFGMissionInterface_HasRegistredVariable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionInterface.RegisterVariables
// 0x0020 (0x0020 - 0x0000)
struct BFGMissionInterface_RegisterVariables final
{
public:
	class UObject*                                _pVariableOwner;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBFGVariable*>                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionInterface_RegisterVariables) == 0x000008, "Wrong alignment on BFGMissionInterface_RegisterVariables");
static_assert(sizeof(BFGMissionInterface_RegisterVariables) == 0x000020, "Wrong size on BFGMissionInterface_RegisterVariables");
static_assert(offsetof(BFGMissionInterface_RegisterVariables, _pVariableOwner) == 0x000000, "Member 'BFGMissionInterface_RegisterVariables::_pVariableOwner' has a wrong offset!");
static_assert(offsetof(BFGMissionInterface_RegisterVariables, _pVarMirror) == 0x000008, "Member 'BFGMissionInterface_RegisterVariables::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGMissionInterface_RegisterVariables, ReturnValue) == 0x000010, "Member 'BFGMissionInterface_RegisterVariables::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionOrbitalTransporter.OnSaveSystemLoad
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionOrbitalTransporter_OnSaveSystemLoad final
{
public:
	class UBFGSaveSystem*                         _pSaveSystem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGSaveSystem_Action*                  _pAction;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionOrbitalTransporter_OnSaveSystemLoad) == 0x000008, "Wrong alignment on BFGMissionOrbitalTransporter_OnSaveSystemLoad");
static_assert(sizeof(BFGMissionOrbitalTransporter_OnSaveSystemLoad) == 0x000010, "Wrong size on BFGMissionOrbitalTransporter_OnSaveSystemLoad");
static_assert(offsetof(BFGMissionOrbitalTransporter_OnSaveSystemLoad, _pSaveSystem) == 0x000000, "Member 'BFGMissionOrbitalTransporter_OnSaveSystemLoad::_pSaveSystem' has a wrong offset!");
static_assert(offsetof(BFGMissionOrbitalTransporter_OnSaveSystemLoad, _pAction) == 0x000008, "Member 'BFGMissionOrbitalTransporter_OnSaveSystemLoad::_pAction' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_ProximityMonitor.OnDistanceTextChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_HUD_ProximityMonitor_OnDistanceTextChanged final
{
public:
	class FText                                   StrDistance;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_ProximityMonitor_OnDistanceTextChanged) == 0x000008, "Wrong alignment on BFGWidget_HUD_ProximityMonitor_OnDistanceTextChanged");
static_assert(sizeof(BFGWidget_HUD_ProximityMonitor_OnDistanceTextChanged) == 0x000018, "Wrong size on BFGWidget_HUD_ProximityMonitor_OnDistanceTextChanged");
static_assert(offsetof(BFGWidget_HUD_ProximityMonitor_OnDistanceTextChanged, StrDistance) == 0x000000, "Member 'BFGWidget_HUD_ProximityMonitor_OnDistanceTextChanged::StrDistance' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_ProximityMonitor.OnWarningAreaChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_ProximityMonitor_OnWarningAreaChanged final
{
public:
	bool                                          Entered;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_ProximityMonitor_OnWarningAreaChanged) == 0x000001, "Wrong alignment on BFGWidget_HUD_ProximityMonitor_OnWarningAreaChanged");
static_assert(sizeof(BFGWidget_HUD_ProximityMonitor_OnWarningAreaChanged) == 0x000001, "Wrong size on BFGWidget_HUD_ProximityMonitor_OnWarningAreaChanged");
static_assert(offsetof(BFGWidget_HUD_ProximityMonitor_OnWarningAreaChanged, Entered) == 0x000000, "Member 'BFGWidget_HUD_ProximityMonitor_OnWarningAreaChanged::Entered' has a wrong offset!");

// Function BFGCore.BFGMissionSpawnManager.CreateNewScriptSequence
// 0x0018 (0x0018 - 0x0000)
struct BFGMissionSpawnManager_CreateNewScriptSequence final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAutoStart;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRemoveWhenDone;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGScriptedSequence*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionSpawnManager_CreateNewScriptSequence) == 0x000008, "Wrong alignment on BFGMissionSpawnManager_CreateNewScriptSequence");
static_assert(sizeof(BFGMissionSpawnManager_CreateNewScriptSequence) == 0x000018, "Wrong size on BFGMissionSpawnManager_CreateNewScriptSequence");
static_assert(offsetof(BFGMissionSpawnManager_CreateNewScriptSequence, _pActor) == 0x000000, "Member 'BFGMissionSpawnManager_CreateNewScriptSequence::_pActor' has a wrong offset!");
static_assert(offsetof(BFGMissionSpawnManager_CreateNewScriptSequence, _bAutoStart) == 0x000008, "Member 'BFGMissionSpawnManager_CreateNewScriptSequence::_bAutoStart' has a wrong offset!");
static_assert(offsetof(BFGMissionSpawnManager_CreateNewScriptSequence, _bRemoveWhenDone) == 0x000009, "Member 'BFGMissionSpawnManager_CreateNewScriptSequence::_bRemoveWhenDone' has a wrong offset!");
static_assert(offsetof(BFGMissionSpawnManager_CreateNewScriptSequence, ReturnValue) == 0x000010, "Member 'BFGMissionSpawnManager_CreateNewScriptSequence::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionSpawnManager.OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGMissionSpawnManager_OnActorDestroyed final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionSpawnManager_OnActorDestroyed) == 0x000008, "Wrong alignment on BFGMissionSpawnManager_OnActorDestroyed");
static_assert(sizeof(BFGMissionSpawnManager_OnActorDestroyed) == 0x000008, "Wrong size on BFGMissionSpawnManager_OnActorDestroyed");
static_assert(offsetof(BFGMissionSpawnManager_OnActorDestroyed, _pActor) == 0x000000, "Member 'BFGMissionSpawnManager_OnActorDestroyed::_pActor' has a wrong offset!");

// Function BFGCore.BFGMissionSpawnManager.OnDeadStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionSpawnManager_OnDeadStatusChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionSpawnManager_OnDeadStatusChanged) == 0x000008, "Wrong alignment on BFGMissionSpawnManager_OnDeadStatusChanged");
static_assert(sizeof(BFGMissionSpawnManager_OnDeadStatusChanged) == 0x000010, "Wrong size on BFGMissionSpawnManager_OnDeadStatusChanged");
static_assert(offsetof(BFGMissionSpawnManager_OnDeadStatusChanged, _pActor) == 0x000000, "Member 'BFGMissionSpawnManager_OnDeadStatusChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGMissionSpawnManager_OnDeadStatusChanged, _pStat) == 0x000008, "Member 'BFGMissionSpawnManager_OnDeadStatusChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGMissionSpawnManager.OnSpawned
// 0x0020 (0x0020 - 0x0000)
struct BFGMissionSpawnManager_OnSpawned final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGMissionSpawner_SpawnedParameters   _params;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionSpawnManager_OnSpawned) == 0x000008, "Wrong alignment on BFGMissionSpawnManager_OnSpawned");
static_assert(sizeof(BFGMissionSpawnManager_OnSpawned) == 0x000020, "Wrong size on BFGMissionSpawnManager_OnSpawned");
static_assert(offsetof(BFGMissionSpawnManager_OnSpawned, _pActor) == 0x000000, "Member 'BFGMissionSpawnManager_OnSpawned::_pActor' has a wrong offset!");
static_assert(offsetof(BFGMissionSpawnManager_OnSpawned, _params) == 0x000008, "Member 'BFGMissionSpawnManager_OnSpawned::_params' has a wrong offset!");

// Function BFGCore.BFGMissionSpawnManager.SetActive
// 0x0002 (0x0002 - 0x0000)
struct BFGMissionSpawnManager_SetActive final
{
public:
	bool                                          _bActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForce;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionSpawnManager_SetActive) == 0x000001, "Wrong alignment on BFGMissionSpawnManager_SetActive");
static_assert(sizeof(BFGMissionSpawnManager_SetActive) == 0x000002, "Wrong size on BFGMissionSpawnManager_SetActive");
static_assert(offsetof(BFGMissionSpawnManager_SetActive, _bActive) == 0x000000, "Member 'BFGMissionSpawnManager_SetActive::_bActive' has a wrong offset!");
static_assert(offsetof(BFGMissionSpawnManager_SetActive, _bForce) == 0x000001, "Member 'BFGMissionSpawnManager_SetActive::_bForce' has a wrong offset!");

// Function BFGCore.BFGMissionSpawnManager.IsActive
// 0x0001 (0x0001 - 0x0000)
struct BFGMissionSpawnManager_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionSpawnManager_IsActive) == 0x000001, "Wrong alignment on BFGMissionSpawnManager_IsActive");
static_assert(sizeof(BFGMissionSpawnManager_IsActive) == 0x000001, "Wrong size on BFGMissionSpawnManager_IsActive");
static_assert(offsetof(BFGMissionSpawnManager_IsActive, ReturnValue) == 0x000000, "Member 'BFGMissionSpawnManager_IsActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_MissionGroup_InProgress.GetActionName_MissionGroupInProgress
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_MissionGroup_InProgress_GetActionName_MissionGroupInProgress final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_MissionGroup_InProgress_GetActionName_MissionGroupInProgress) == 0x000004, "Wrong alignment on BFGVariableAction_MissionGroup_InProgress_GetActionName_MissionGroupInProgress");
static_assert(sizeof(BFGVariableAction_MissionGroup_InProgress_GetActionName_MissionGroupInProgress) == 0x000008, "Wrong size on BFGVariableAction_MissionGroup_InProgress_GetActionName_MissionGroupInProgress");
static_assert(offsetof(BFGVariableAction_MissionGroup_InProgress_GetActionName_MissionGroupInProgress, ReturnValue) == 0x000000, "Member 'BFGVariableAction_MissionGroup_InProgress_GetActionName_MissionGroupInProgress::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMissionSystem.OnWorldLoaded
// 0x0010 (0x0010 - 0x0000)
struct BFGMissionSystem_OnWorldLoaded final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMissionSystem_OnWorldLoaded) == 0x000008, "Wrong alignment on BFGMissionSystem_OnWorldLoaded");
static_assert(sizeof(BFGMissionSystem_OnWorldLoaded) == 0x000010, "Wrong size on BFGMissionSystem_OnWorldLoaded");
static_assert(offsetof(BFGMissionSystem_OnWorldLoaded, _pGameInstance) == 0x000000, "Member 'BFGMissionSystem_OnWorldLoaded::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGMissionSystem_OnWorldLoaded, _pWorld) == 0x000008, "Member 'BFGMissionSystem_OnWorldLoaded::_pWorld' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Quest_MakeUnavailable.GetActionName_QuestMakeUnavailable
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Quest_MakeUnavailable_GetActionName_QuestMakeUnavailable final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Quest_MakeUnavailable_GetActionName_QuestMakeUnavailable) == 0x000004, "Wrong alignment on BFGVariableAction_Quest_MakeUnavailable_GetActionName_QuestMakeUnavailable");
static_assert(sizeof(BFGVariableAction_Quest_MakeUnavailable_GetActionName_QuestMakeUnavailable) == 0x000008, "Wrong size on BFGVariableAction_Quest_MakeUnavailable_GetActionName_QuestMakeUnavailable");
static_assert(offsetof(BFGVariableAction_Quest_MakeUnavailable_GetActionName_QuestMakeUnavailable, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Quest_MakeUnavailable_GetActionName_QuestMakeUnavailable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGMothershipSubstate_PoxLab.ApplyUpgrade
// 0x0008 (0x0008 - 0x0000)
struct BFGMothershipSubstate_PoxLab_ApplyUpgrade final
{
public:
	class UBFGDataAssetPoxLabUpgrade*             _pUpgrade;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMothershipSubstate_PoxLab_ApplyUpgrade) == 0x000008, "Wrong alignment on BFGMothershipSubstate_PoxLab_ApplyUpgrade");
static_assert(sizeof(BFGMothershipSubstate_PoxLab_ApplyUpgrade) == 0x000008, "Wrong size on BFGMothershipSubstate_PoxLab_ApplyUpgrade");
static_assert(offsetof(BFGMothershipSubstate_PoxLab_ApplyUpgrade, _pUpgrade) == 0x000000, "Member 'BFGMothershipSubstate_PoxLab_ApplyUpgrade::_pUpgrade' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Quest_Finish.GetActionName_QuestFinish
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Quest_Finish_GetActionName_QuestFinish final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Quest_Finish_GetActionName_QuestFinish) == 0x000004, "Wrong alignment on BFGVariableAction_Quest_Finish_GetActionName_QuestFinish");
static_assert(sizeof(BFGVariableAction_Quest_Finish_GetActionName_QuestFinish) == 0x000008, "Wrong size on BFGVariableAction_Quest_Finish_GetActionName_QuestFinish");
static_assert(offsetof(BFGVariableAction_Quest_Finish_GetActionName_QuestFinish, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Quest_Finish_GetActionName_QuestFinish::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequence.OnStarted
// 0x0008 (0x0008 - 0x0000)
struct BFGNarrativeSequence_OnStarted final
{
public:
	class UBFGNarrativeSequenceNode*              _pNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNarrativeSequence_OnStarted) == 0x000008, "Wrong alignment on BFGNarrativeSequence_OnStarted");
static_assert(sizeof(BFGNarrativeSequence_OnStarted) == 0x000008, "Wrong size on BFGNarrativeSequence_OnStarted");
static_assert(offsetof(BFGNarrativeSequence_OnStarted, _pNode) == 0x000000, "Member 'BFGNarrativeSequence_OnStarted::_pNode' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequence.OnStopped
// 0x0008 (0x0008 - 0x0000)
struct BFGNarrativeSequence_OnStopped final
{
public:
	class UBFGNarrativeSequenceNode*              _pNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNarrativeSequence_OnStopped) == 0x000008, "Wrong alignment on BFGNarrativeSequence_OnStopped");
static_assert(sizeof(BFGNarrativeSequence_OnStopped) == 0x000008, "Wrong size on BFGNarrativeSequence_OnStopped");
static_assert(offsetof(BFGNarrativeSequence_OnStopped, _pNode) == 0x000000, "Member 'BFGNarrativeSequence_OnStopped::_pNode' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequence.RequestStart
// 0x0001 (0x0001 - 0x0000)
struct BFGNarrativeSequence_RequestStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNarrativeSequence_RequestStart) == 0x000001, "Wrong alignment on BFGNarrativeSequence_RequestStart");
static_assert(sizeof(BFGNarrativeSequence_RequestStart) == 0x000001, "Wrong size on BFGNarrativeSequence_RequestStart");
static_assert(offsetof(BFGNarrativeSequence_RequestStart, ReturnValue) == 0x000000, "Member 'BFGNarrativeSequence_RequestStart::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequence.RequestStop
// 0x0002 (0x0002 - 0x0000)
struct BFGNarrativeSequence_RequestStop final
{
public:
	bool                                          _bRemoveSequence;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsAbort;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNarrativeSequence_RequestStop) == 0x000001, "Wrong alignment on BFGNarrativeSequence_RequestStop");
static_assert(sizeof(BFGNarrativeSequence_RequestStop) == 0x000002, "Wrong size on BFGNarrativeSequence_RequestStop");
static_assert(offsetof(BFGNarrativeSequence_RequestStop, _bRemoveSequence) == 0x000000, "Member 'BFGNarrativeSequence_RequestStop::_bRemoveSequence' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequence_RequestStop, _bIsAbort) == 0x000001, "Member 'BFGNarrativeSequence_RequestStop::_bIsAbort' has a wrong offset!");

// Function BFGCore.BFGVariableAction_QuestCounter_Decrease.GetActionName_QuestCounterDecrease
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_QuestCounter_Decrease_GetActionName_QuestCounterDecrease final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_QuestCounter_Decrease_GetActionName_QuestCounterDecrease) == 0x000004, "Wrong alignment on BFGVariableAction_QuestCounter_Decrease_GetActionName_QuestCounterDecrease");
static_assert(sizeof(BFGVariableAction_QuestCounter_Decrease_GetActionName_QuestCounterDecrease) == 0x000008, "Wrong size on BFGVariableAction_QuestCounter_Decrease_GetActionName_QuestCounterDecrease");
static_assert(offsetof(BFGVariableAction_QuestCounter_Decrease_GetActionName_QuestCounterDecrease, ReturnValue) == 0x000000, "Member 'BFGVariableAction_QuestCounter_Decrease_GetActionName_QuestCounterDecrease::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequenceNode_Fade.OnFadeFinishedCallback
// 0x000C (0x000C - 0x0000)
struct BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback final
{
public:
	class FName                                   _strFadeIdentifier;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFadeOut;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback) == 0x000004, "Wrong alignment on BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback");
static_assert(sizeof(BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback) == 0x00000C, "Wrong size on BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback");
static_assert(offsetof(BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback, _strFadeIdentifier) == 0x000000, "Member 'BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback::_strFadeIdentifier' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback, _bFadeOut) == 0x000008, "Member 'BFGNarrativeSequenceNode_Fade_OnFadeFinishedCallback::_bFadeOut' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequenceNode_Fade.OnStreamingStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged final
{
public:
	class UBFGStreamingLevelHandle*               _pHandle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsLoaded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged) == 0x000008, "Wrong alignment on BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged");
static_assert(sizeof(BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged) == 0x000010, "Wrong size on BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged");
static_assert(offsetof(BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged, _pHandle) == 0x000000, "Member 'BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged::_pHandle' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged, _bIsLoaded) == 0x000008, "Member 'BFGNarrativeSequenceNode_Fade_OnStreamingStateChanged::_bIsLoaded' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequenceNode_PlayCutscene.FinishedSequence
// 0x0010 (0x0010 - 0x0000)
struct BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence final
{
public:
	class ALevelSequenceActor*                    _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWasCutscene;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence) == 0x000008, "Wrong alignment on BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence");
static_assert(sizeof(BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence) == 0x000010, "Wrong size on BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence");
static_assert(offsetof(BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence, _pActor) == 0x000000, "Member 'BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence, _bWasCutscene) == 0x000008, "Member 'BFGNarrativeSequenceNode_PlayCutscene_FinishedSequence::_bWasCutscene' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequenceNode_PlayNewspaper.OnNewspaperLeaves
// 0x0008 (0x0008 - 0x0000)
struct BFGNarrativeSequenceNode_PlayNewspaper_OnNewspaperLeaves final
{
public:
	class UBFGGameFlowState*                      _pState;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNarrativeSequenceNode_PlayNewspaper_OnNewspaperLeaves) == 0x000008, "Wrong alignment on BFGNarrativeSequenceNode_PlayNewspaper_OnNewspaperLeaves");
static_assert(sizeof(BFGNarrativeSequenceNode_PlayNewspaper_OnNewspaperLeaves) == 0x000008, "Wrong size on BFGNarrativeSequenceNode_PlayNewspaper_OnNewspaperLeaves");
static_assert(offsetof(BFGNarrativeSequenceNode_PlayNewspaper_OnNewspaperLeaves, _pState) == 0x000000, "Member 'BFGNarrativeSequenceNode_PlayNewspaper_OnNewspaperLeaves::_pState' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequenceSystem.FindFirstNarrativeSequenceAssessment
// 0x0088 (0x0088 - 0x0000)
struct BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment final
{
public:
	TMap<class FName, EUBFGNarrativeSequence_Assessment> _aAssessmentOut;                                   // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          _pWorldContextObject;                              // 0x0050(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _softSequenceType;                                 // 0x0058(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment) == 0x000008, "Wrong alignment on BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment");
static_assert(sizeof(BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment) == 0x000088, "Wrong size on BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment");
static_assert(offsetof(BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment, _aAssessmentOut) == 0x000000, "Member 'BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment::_aAssessmentOut' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment, _pWorldContextObject) == 0x000050, "Member 'BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment, _softSequenceType) == 0x000058, "Member 'BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment::_softSequenceType' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment, ReturnValue) == 0x000080, "Member 'BFGNarrativeSequenceSystem_FindFirstNarrativeSequenceAssessment::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequenceSystem.NewSequence
// 0x0038 (0x0038 - 0x0000)
struct BFGNarrativeSequenceSystem_NewSequence final
{
public:
	TSoftClassPtr<class UClass>                   _softSequence;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAutoStart;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRemoveAfterPlayback;                             // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGNarrativeSequence*                  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNarrativeSequenceSystem_NewSequence) == 0x000008, "Wrong alignment on BFGNarrativeSequenceSystem_NewSequence");
static_assert(sizeof(BFGNarrativeSequenceSystem_NewSequence) == 0x000038, "Wrong size on BFGNarrativeSequenceSystem_NewSequence");
static_assert(offsetof(BFGNarrativeSequenceSystem_NewSequence, _softSequence) == 0x000000, "Member 'BFGNarrativeSequenceSystem_NewSequence::_softSequence' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceSystem_NewSequence, _bAutoStart) == 0x000028, "Member 'BFGNarrativeSequenceSystem_NewSequence::_bAutoStart' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceSystem_NewSequence, _bRemoveAfterPlayback) == 0x000029, "Member 'BFGNarrativeSequenceSystem_NewSequence::_bRemoveAfterPlayback' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceSystem_NewSequence, ReturnValue) == 0x000030, "Member 'BFGNarrativeSequenceSystem_NewSequence::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNarrativeSequenceSystem.PlaySequence_FireAndForget
// 0x0030 (0x0030 - 0x0000)
struct BFGNarrativeSequenceSystem_PlaySequence_FireAndForget final
{
public:
	TSoftClassPtr<class UClass>                   _softSequence;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNarrativeSequenceSystem_PlaySequence_FireAndForget) == 0x000008, "Wrong alignment on BFGNarrativeSequenceSystem_PlaySequence_FireAndForget");
static_assert(sizeof(BFGNarrativeSequenceSystem_PlaySequence_FireAndForget) == 0x000030, "Wrong size on BFGNarrativeSequenceSystem_PlaySequence_FireAndForget");
static_assert(offsetof(BFGNarrativeSequenceSystem_PlaySequence_FireAndForget, _softSequence) == 0x000000, "Member 'BFGNarrativeSequenceSystem_PlaySequence_FireAndForget::_softSequence' has a wrong offset!");
static_assert(offsetof(BFGNarrativeSequenceSystem_PlaySequence_FireAndForget, ReturnValue) == 0x000028, "Member 'BFGNarrativeSequenceSystem_PlaySequence_FireAndForget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNetworkPath.OnAgentSpawnedBySpawner
// 0x0010 (0x0010 - 0x0000)
struct BFGNetworkPath_OnAgentSpawnedBySpawner final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bOwnedByPath;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNetworkPath_OnAgentSpawnedBySpawner) == 0x000008, "Wrong alignment on BFGNetworkPath_OnAgentSpawnedBySpawner");
static_assert(sizeof(BFGNetworkPath_OnAgentSpawnedBySpawner) == 0x000010, "Wrong size on BFGNetworkPath_OnAgentSpawnedBySpawner");
static_assert(offsetof(BFGNetworkPath_OnAgentSpawnedBySpawner, _pAgent) == 0x000000, "Member 'BFGNetworkPath_OnAgentSpawnedBySpawner::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGNetworkPath_OnAgentSpawnedBySpawner, _bOwnedByPath) == 0x000008, "Member 'BFGNetworkPath_OnAgentSpawnedBySpawner::_bOwnedByPath' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AIStatePlayInteractAtLocation.OnAttachedActorChange
// 0x0018 (0x0018 - 0x0000)
struct BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsAttached;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange");
static_assert(sizeof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange) == 0x000018, "Wrong size on BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange");
static_assert(offsetof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange, _pAgent) == 0x000000, "Member 'BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange, _pActor) == 0x000008, "Member 'BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange, _bIsAttached) == 0x000010, "Member 'BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnAttachedActorChange::_bIsAttached' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgent_AIStatePlayInteractAtLocation.OnInteractAnimationPop
// 0x00D0 (0x00D0 - 0x0000)
struct BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop final
{
public:
	TScriptInterface<class IBFGInteractAnimationPlayerInterface> _pInteractAnimationPlayer;                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _data;                                             // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _oldData;                                          // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop) == 0x000008, "Wrong alignment on BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop");
static_assert(sizeof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop) == 0x0000D0, "Wrong size on BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop");
static_assert(offsetof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop, _pInteractAnimationPlayer) == 0x000000, "Member 'BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop::_pInteractAnimationPlayer' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop, _data) == 0x000010, "Member 'BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop::_data' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop, _oldData) == 0x000070, "Member 'BFGNetworkPathAgent_AIStatePlayInteractAtLocation_OnInteractAnimationPop::_oldData' has a wrong offset!");

// Function BFGCore.BFGVoiceoverStatistics.GetLastSpokenTime
// 0x000C (0x000C - 0x0000)
struct BFGVoiceoverStatistics_GetLastSpokenTime final
{
public:
	class FName                                   _voice;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverStatistics_GetLastSpokenTime) == 0x000004, "Wrong alignment on BFGVoiceoverStatistics_GetLastSpokenTime");
static_assert(sizeof(BFGVoiceoverStatistics_GetLastSpokenTime) == 0x00000C, "Wrong size on BFGVoiceoverStatistics_GetLastSpokenTime");
static_assert(offsetof(BFGVoiceoverStatistics_GetLastSpokenTime, _voice) == 0x000000, "Member 'BFGVoiceoverStatistics_GetLastSpokenTime::_voice' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverStatistics_GetLastSpokenTime, ReturnValue) == 0x000008, "Member 'BFGVoiceoverStatistics_GetLastSpokenTime::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgentComponent.SetLODEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGNetworkPathAgentComponent_SetLODEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNetworkPathAgentComponent_SetLODEnabled) == 0x000001, "Wrong alignment on BFGNetworkPathAgentComponent_SetLODEnabled");
static_assert(sizeof(BFGNetworkPathAgentComponent_SetLODEnabled) == 0x000001, "Wrong size on BFGNetworkPathAgentComponent_SetLODEnabled");
static_assert(offsetof(BFGNetworkPathAgentComponent_SetLODEnabled, _bEnabled) == 0x000000, "Member 'BFGNetworkPathAgentComponent_SetLODEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGNetworkPathAgentRadarInfo.OnAttachedEntityDied
// 0x0018 (0x0018 - 0x0000)
struct BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsAttached;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied) == 0x000008, "Wrong alignment on BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied");
static_assert(sizeof(BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied) == 0x000018, "Wrong size on BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied");
static_assert(offsetof(BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied, _pAgent) == 0x000000, "Member 'BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied, _pActor) == 0x000008, "Member 'BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied, _bIsAttached) == 0x000010, "Member 'BFGNetworkPathAgentRadarInfo_OnAttachedEntityDied::_bIsAttached' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Timer_Stopped.GetActionName_TimerStop
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Timer_Stopped_GetActionName_TimerStop final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Timer_Stopped_GetActionName_TimerStop) == 0x000004, "Wrong alignment on BFGVariableAction_Timer_Stopped_GetActionName_TimerStop");
static_assert(sizeof(BFGVariableAction_Timer_Stopped_GetActionName_TimerStop) == 0x000008, "Wrong size on BFGVariableAction_Timer_Stopped_GetActionName_TimerStop");
static_assert(offsetof(BFGVariableAction_Timer_Stopped_GetActionName_TimerStop, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Timer_Stopped_GetActionName_TimerStop::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.ActivatePickUpSpawner
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_ActivatePickUpSpawner final
{
public:
	int32                                         _iCurrentPhase;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_ActivatePickUpSpawner) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_ActivatePickUpSpawner");
static_assert(sizeof(BFGNPCCharacterBoss_ActivatePickUpSpawner) == 0x000004, "Wrong size on BFGNPCCharacterBoss_ActivatePickUpSpawner");
static_assert(offsetof(BFGNPCCharacterBoss_ActivatePickUpSpawner, _iCurrentPhase) == 0x000000, "Member 'BFGNPCCharacterBoss_ActivatePickUpSpawner::_iCurrentPhase' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.GetCurrentStepDuration
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_GetCurrentStepDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_GetCurrentStepDuration) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_GetCurrentStepDuration");
static_assert(sizeof(BFGNPCCharacterBoss_GetCurrentStepDuration) == 0x000004, "Wrong size on BFGNPCCharacterBoss_GetCurrentStepDuration");
static_assert(offsetof(BFGNPCCharacterBoss_GetCurrentStepDuration, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_GetCurrentStepDuration::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.GetCurrentSubtree
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterBoss_GetCurrentSubtree final
{
public:
	class UBehaviorTree*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_GetCurrentSubtree) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_GetCurrentSubtree");
static_assert(sizeof(BFGNPCCharacterBoss_GetCurrentSubtree) == 0x000008, "Wrong size on BFGNPCCharacterBoss_GetCurrentSubtree");
static_assert(offsetof(BFGNPCCharacterBoss_GetCurrentSubtree, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_GetCurrentSubtree::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.GetKnockdownDirection
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_GetKnockdownDirection final
{
public:
	struct FVector                                _vImpactDirection;                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_GetKnockdownDirection) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_GetKnockdownDirection");
static_assert(sizeof(BFGNPCCharacterBoss_GetKnockdownDirection) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_GetKnockdownDirection");
static_assert(offsetof(BFGNPCCharacterBoss_GetKnockdownDirection, _vImpactDirection) == 0x000000, "Member 'BFGNPCCharacterBoss_GetKnockdownDirection::_vImpactDirection' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.OnHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterBoss_OnHealthChanged final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Float*                    _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_OnHealthChanged) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_OnHealthChanged");
static_assert(sizeof(BFGNPCCharacterBoss_OnHealthChanged) == 0x000010, "Wrong size on BFGNPCCharacterBoss_OnHealthChanged");
static_assert(offsetof(BFGNPCCharacterBoss_OnHealthChanged, _pOwner) == 0x000000, "Member 'BFGNPCCharacterBoss_OnHealthChanged::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_OnHealthChanged, _pStat) == 0x000008, "Member 'BFGNPCCharacterBoss_OnHealthChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.OnPatternComplete
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterBoss_OnPatternComplete final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_OnPatternComplete) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_OnPatternComplete");
static_assert(sizeof(BFGNPCCharacterBoss_OnPatternComplete) == 0x000008, "Wrong size on BFGNPCCharacterBoss_OnPatternComplete");
static_assert(offsetof(BFGNPCCharacterBoss_OnPatternComplete, _pWeapon) == 0x000000, "Member 'BFGNPCCharacterBoss_OnPatternComplete::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.OnPhaseChanged
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_OnPhaseChanged final
{
public:
	int32                                         _iPhaseNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_OnPhaseChanged) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_OnPhaseChanged");
static_assert(sizeof(BFGNPCCharacterBoss_OnPhaseChanged) == 0x000004, "Wrong size on BFGNPCCharacterBoss_OnPhaseChanged");
static_assert(offsetof(BFGNPCCharacterBoss_OnPhaseChanged, _iPhaseNumber) == 0x000000, "Member 'BFGNPCCharacterBoss_OnPhaseChanged::_iPhaseNumber' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.OnRocketLaunched
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterBoss_OnRocketLaunched final
{
public:
	EBFGRocketSocket                              _eRocketSocket;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_OnRocketLaunched) == 0x000001, "Wrong alignment on BFGNPCCharacterBoss_OnRocketLaunched");
static_assert(sizeof(BFGNPCCharacterBoss_OnRocketLaunched) == 0x000001, "Wrong size on BFGNPCCharacterBoss_OnRocketLaunched");
static_assert(offsetof(BFGNPCCharacterBoss_OnRocketLaunched, _eRocketSocket) == 0x000000, "Member 'BFGNPCCharacterBoss_OnRocketLaunched::_eRocketSocket' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.PhaseTransitionTriggered
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_PhaseTransitionTriggered final
{
public:
	int32                                         _iCurrentPhaseNumber;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_PhaseTransitionTriggered) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_PhaseTransitionTriggered");
static_assert(sizeof(BFGNPCCharacterBoss_PhaseTransitionTriggered) == 0x000004, "Wrong size on BFGNPCCharacterBoss_PhaseTransitionTriggered");
static_assert(offsetof(BFGNPCCharacterBoss_PhaseTransitionTriggered, _iCurrentPhaseNumber) == 0x000000, "Member 'BFGNPCCharacterBoss_PhaseTransitionTriggered::_iCurrentPhaseNumber' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.RetriggerChangePhase
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_RetriggerChangePhase final
{
public:
	int32                                         _Phase;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_RetriggerChangePhase) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_RetriggerChangePhase");
static_assert(sizeof(BFGNPCCharacterBoss_RetriggerChangePhase) == 0x000004, "Wrong size on BFGNPCCharacterBoss_RetriggerChangePhase");
static_assert(offsetof(BFGNPCCharacterBoss_RetriggerChangePhase, _Phase) == 0x000000, "Member 'BFGNPCCharacterBoss_RetriggerChangePhase::_Phase' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.SetWeaponPattern
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterBoss_SetWeaponPattern final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponPatternIndex;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_SetWeaponPattern) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_SetWeaponPattern");
static_assert(sizeof(BFGNPCCharacterBoss_SetWeaponPattern) == 0x000008, "Wrong size on BFGNPCCharacterBoss_SetWeaponPattern");
static_assert(offsetof(BFGNPCCharacterBoss_SetWeaponPattern, WeaponIndex) == 0x000000, "Member 'BFGNPCCharacterBoss_SetWeaponPattern::WeaponIndex' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_SetWeaponPattern, WeaponPatternIndex) == 0x000004, "Member 'BFGNPCCharacterBoss_SetWeaponPattern::WeaponPatternIndex' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.GetBossPhaseAtIndex
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterBoss_GetBossPhaseAtIndex final
{
public:
	int32                                         _iPhaseIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGDataAsset_BossPhase*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_GetBossPhaseAtIndex) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_GetBossPhaseAtIndex");
static_assert(sizeof(BFGNPCCharacterBoss_GetBossPhaseAtIndex) == 0x000010, "Wrong size on BFGNPCCharacterBoss_GetBossPhaseAtIndex");
static_assert(offsetof(BFGNPCCharacterBoss_GetBossPhaseAtIndex, _iPhaseIndex) == 0x000000, "Member 'BFGNPCCharacterBoss_GetBossPhaseAtIndex::_iPhaseIndex' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_GetBossPhaseAtIndex, ReturnValue) == 0x000008, "Member 'BFGNPCCharacterBoss_GetBossPhaseAtIndex::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss.GetWeaponList
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterBoss_GetWeaponList final
{
public:
	TArray<class ABFGWeapon*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_GetWeaponList) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_GetWeaponList");
static_assert(sizeof(BFGNPCCharacterBoss_GetWeaponList) == 0x000010, "Wrong size on BFGNPCCharacterBoss_GetWeaponList");
static_assert(offsetof(BFGNPCCharacterBoss_GetWeaponList, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_GetWeaponList::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.BeginBossAction_Leap
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_Armquist_BeginBossAction_Leap final
{
public:
	struct FVector                                _vNextPhaseLocation;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_BeginBossAction_Leap) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_BeginBossAction_Leap");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_BeginBossAction_Leap) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_Armquist_BeginBossAction_Leap");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_BeginBossAction_Leap, _vNextPhaseLocation) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_BeginBossAction_Leap::_vNextPhaseLocation' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.BeginBossAction_Stomp
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_Armquist_BeginBossAction_Stomp final
{
public:
	struct FVector                                _vStompLocation;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_BeginBossAction_Stomp) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_BeginBossAction_Stomp");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_BeginBossAction_Stomp) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_Armquist_BeginBossAction_Stomp");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_BeginBossAction_Stomp, _vStompLocation) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_BeginBossAction_Stomp::_vStompLocation' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.CallBossAction_Leap
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_Armquist_CallBossAction_Leap final
{
public:
	struct FVector                                _vNextPhaseLocation;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_CallBossAction_Leap) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_CallBossAction_Leap");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_CallBossAction_Leap) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_Armquist_CallBossAction_Leap");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_CallBossAction_Leap, _vNextPhaseLocation) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_CallBossAction_Leap::_vNextPhaseLocation' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.GetRocketSocketName
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_Armquist_GetRocketSocketName final
{
public:
	EBFGRocketSocket                              _eRocketSocket;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_GetRocketSocketName) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_GetRocketSocketName");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_GetRocketSocketName) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_Armquist_GetRocketSocketName");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_GetRocketSocketName, _eRocketSocket) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_GetRocketSocketName::_eRocketSocket' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_GetRocketSocketName, ReturnValue) == 0x000004, "Member 'BFGNPCCharacterBoss_Armquist_GetRocketSocketName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.GetSupportDuration_Airforce
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_GetSupportDuration_Airforce final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_GetSupportDuration_Airforce) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_GetSupportDuration_Airforce");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_GetSupportDuration_Airforce) == 0x000004, "Wrong size on BFGNPCCharacterBoss_Armquist_GetSupportDuration_Airforce");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_GetSupportDuration_Airforce, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_GetSupportDuration_Airforce::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.GetSupportDuration_Navy
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_GetSupportDuration_Navy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_GetSupportDuration_Navy) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_GetSupportDuration_Navy");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_GetSupportDuration_Navy) == 0x000004, "Wrong size on BFGNPCCharacterBoss_Armquist_GetSupportDuration_Navy");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_GetSupportDuration_Navy, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_GetSupportDuration_Navy::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.IsAirforceSupportAvailable
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_IsAirforceSupportAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_IsAirforceSupportAvailable) == 0x000001, "Wrong alignment on BFGNPCCharacterBoss_Armquist_IsAirforceSupportAvailable");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_IsAirforceSupportAvailable) == 0x000001, "Wrong size on BFGNPCCharacterBoss_Armquist_IsAirforceSupportAvailable");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_IsAirforceSupportAvailable, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_IsAirforceSupportAvailable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.IsNavySupportAvailable
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_IsNavySupportAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_IsNavySupportAvailable) == 0x000001, "Wrong alignment on BFGNPCCharacterBoss_Armquist_IsNavySupportAvailable");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_IsNavySupportAvailable) == 0x000001, "Wrong size on BFGNPCCharacterBoss_Armquist_IsNavySupportAvailable");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_IsNavySupportAvailable, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_IsNavySupportAvailable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.LeapTimeline_SpeedInterpolation
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_LeapTimeline_SpeedInterpolation final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_LeapTimeline_SpeedInterpolation) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_LeapTimeline_SpeedInterpolation");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_LeapTimeline_SpeedInterpolation) == 0x000004, "Wrong size on BFGNPCCharacterBoss_Armquist_LeapTimeline_SpeedInterpolation");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_LeapTimeline_SpeedInterpolation, Val) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_LeapTimeline_SpeedInterpolation::Val' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.OnAirMineDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_OnAirMineDestroyed final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_OnAirMineDestroyed) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_Armquist_OnAirMineDestroyed");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_OnAirMineDestroyed) == 0x000008, "Wrong size on BFGNPCCharacterBoss_Armquist_OnAirMineDestroyed");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnAirMineDestroyed, _pActor) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_OnAirMineDestroyed::_pActor' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.OnChargingBeginHit
// 0x00B0 (0x00B0 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_OnChargingBeginHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_OnChargingBeginHit) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_Armquist_OnChargingBeginHit");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_OnChargingBeginHit) == 0x0000B0, "Wrong size on BFGNPCCharacterBoss_Armquist_OnChargingBeginHit");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginHit, HitComponent) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginHit::HitComponent' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginHit, OtherActor) == 0x000008, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginHit::OtherActor' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginHit, OtherComp) == 0x000010, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginHit::OtherComp' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginHit, NormalImpulse) == 0x000018, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginHit, Hit) == 0x000024, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginHit::Hit' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.OnChargingBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap final
{
public:
	class UPrimitiveComponent*                    _pOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _pOtherComponent;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFromSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             _sweepResult;                                      // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap) == 0x0000A8, "Wrong size on BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap, _pOverlappedComponent) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap::_pOverlappedComponent' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap, _pOtherActor) == 0x000008, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap::_pOtherActor' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap, _pOtherComponent) == 0x000010, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap::_pOtherComponent' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap, _iOtherBodyIndex) == 0x000018, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap::_iOtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap, _bFromSweep) == 0x00001C, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap::_bFromSweep' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap, _sweepResult) == 0x000020, "Member 'BFGNPCCharacterBoss_Armquist_OnChargingBeginOverlap::_sweepResult' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.RequestSupport
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_RequestSupport final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_RequestSupport) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_RequestSupport");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_RequestSupport) == 0x000004, "Wrong size on BFGNPCCharacterBoss_Armquist_RequestSupport");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_RequestSupport, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_RequestSupport::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.RequestSupport_Airforce
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_RequestSupport_Airforce final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_RequestSupport_Airforce) == 0x000001, "Wrong alignment on BFGNPCCharacterBoss_Armquist_RequestSupport_Airforce");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_RequestSupport_Airforce) == 0x000001, "Wrong size on BFGNPCCharacterBoss_Armquist_RequestSupport_Airforce");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_RequestSupport_Airforce, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_RequestSupport_Airforce::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.RequestSupport_Navy
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_RequestSupport_Navy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_RequestSupport_Navy) == 0x000001, "Wrong alignment on BFGNPCCharacterBoss_Armquist_RequestSupport_Navy");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_RequestSupport_Navy) == 0x000001, "Wrong size on BFGNPCCharacterBoss_Armquist_RequestSupport_Navy");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_RequestSupport_Navy, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_RequestSupport_Navy::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.SetupLeapSplinePoints
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_Armquist_SetupLeapSplinePoints final
{
public:
	struct FVector                                _vNextPhaseLocation;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_SetupLeapSplinePoints) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_SetupLeapSplinePoints");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_SetupLeapSplinePoints) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_Armquist_SetupLeapSplinePoints");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_SetupLeapSplinePoints, _vNextPhaseLocation) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_SetupLeapSplinePoints::_vNextPhaseLocation' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.SpawnBossAOE
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_SpawnBossAOE final
{
public:
	TSubclassOf<class ABFGAOE_Boss>               _pAOEClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseWarningComponents;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fTelegraphTime;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_SpawnBossAOE) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_Armquist_SpawnBossAOE");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_SpawnBossAOE) == 0x000010, "Wrong size on BFGNPCCharacterBoss_Armquist_SpawnBossAOE");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_SpawnBossAOE, _pAOEClass) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_SpawnBossAOE::_pAOEClass' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_SpawnBossAOE, _bUseWarningComponents) == 0x000008, "Member 'BFGNPCCharacterBoss_Armquist_SpawnBossAOE::_bUseWarningComponents' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_SpawnBossAOE, _fTelegraphTime) == 0x00000C, "Member 'BFGNPCCharacterBoss_Armquist_SpawnBossAOE::_fTelegraphTime' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.TryRetractRocketLaunchers
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_TryRetractRocketLaunchers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_TryRetractRocketLaunchers) == 0x000001, "Wrong alignment on BFGNPCCharacterBoss_Armquist_TryRetractRocketLaunchers");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_TryRetractRocketLaunchers) == 0x000001, "Wrong size on BFGNPCCharacterBoss_Armquist_TryRetractRocketLaunchers");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_TryRetractRocketLaunchers, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_TryRetractRocketLaunchers::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.UpdateLeapStartingPosition
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_Armquist_UpdateLeapStartingPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_UpdateLeapStartingPosition) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Armquist_UpdateLeapStartingPosition");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_UpdateLeapStartingPosition) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_Armquist_UpdateLeapStartingPosition");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_UpdateLeapStartingPosition, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_UpdateLeapStartingPosition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Armquist.GetOverheatManager
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterBoss_Armquist_GetOverheatManager final
{
public:
	class UBFGActorComponent_OverheatManager*     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Armquist_GetOverheatManager) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_Armquist_GetOverheatManager");
static_assert(sizeof(BFGNPCCharacterBoss_Armquist_GetOverheatManager) == 0x000008, "Wrong size on BFGNPCCharacterBoss_Armquist_GetOverheatManager");
static_assert(offsetof(BFGNPCCharacterBoss_Armquist_GetOverheatManager, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterBoss_Armquist_GetOverheatManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Silhouette.BeginBossAction_Evasion
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_Silhouette_BeginBossAction_Evasion final
{
public:
	struct FVector                                _vEvasionLocation;                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Silhouette_BeginBossAction_Evasion) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Silhouette_BeginBossAction_Evasion");
static_assert(sizeof(BFGNPCCharacterBoss_Silhouette_BeginBossAction_Evasion) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_Silhouette_BeginBossAction_Evasion");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_BeginBossAction_Evasion, _vEvasionLocation) == 0x000000, "Member 'BFGNPCCharacterBoss_Silhouette_BeginBossAction_Evasion::_vEvasionLocation' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Silhouette.BeginBossAction_NasalProbe_EndSequence
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterBoss_Silhouette_BeginBossAction_NasalProbe_EndSequence final
{
public:
	bool                                          _bForced;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Silhouette_BeginBossAction_NasalProbe_EndSequence) == 0x000001, "Wrong alignment on BFGNPCCharacterBoss_Silhouette_BeginBossAction_NasalProbe_EndSequence");
static_assert(sizeof(BFGNPCCharacterBoss_Silhouette_BeginBossAction_NasalProbe_EndSequence) == 0x000001, "Wrong size on BFGNPCCharacterBoss_Silhouette_BeginBossAction_NasalProbe_EndSequence");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_BeginBossAction_NasalProbe_EndSequence, _bForced) == 0x000000, "Member 'BFGNPCCharacterBoss_Silhouette_BeginBossAction_NasalProbe_EndSequence::_bForced' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Silhouette.EvasionTimeline_VectorCurveInterpolation
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterBoss_Silhouette_EvasionTimeline_VectorCurveInterpolation final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Silhouette_EvasionTimeline_VectorCurveInterpolation) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Silhouette_EvasionTimeline_VectorCurveInterpolation");
static_assert(sizeof(BFGNPCCharacterBoss_Silhouette_EvasionTimeline_VectorCurveInterpolation) == 0x000004, "Wrong size on BFGNPCCharacterBoss_Silhouette_EvasionTimeline_VectorCurveInterpolation");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_EvasionTimeline_VectorCurveInterpolation, Val) == 0x000000, "Member 'BFGNPCCharacterBoss_Silhouette_EvasionTimeline_VectorCurveInterpolation::Val' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Silhouette.OnHoverStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterBoss_Silhouette_OnHoverStateChanged final
{
public:
	EBFGLevitationState                           _eNewHoverState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Silhouette_OnHoverStateChanged) == 0x000001, "Wrong alignment on BFGNPCCharacterBoss_Silhouette_OnHoverStateChanged");
static_assert(sizeof(BFGNPCCharacterBoss_Silhouette_OnHoverStateChanged) == 0x000001, "Wrong size on BFGNPCCharacterBoss_Silhouette_OnHoverStateChanged");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnHoverStateChanged, _eNewHoverState) == 0x000000, "Member 'BFGNPCCharacterBoss_Silhouette_OnHoverStateChanged::_eNewHoverState' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Silhouette.OnPSIStationDeathStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged");
static_assert(sizeof(BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged) == 0x000010, "Wrong size on BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged, _pActor) == 0x000000, "Member 'BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged, _pStat) == 0x000008, "Member 'BFGNPCCharacterBoss_Silhouette_OnPSIStationDeathStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Silhouette.OnShieldDamaged
// 0x00B8 (0x00B8 - 0x0000)
struct BFGNPCCharacterBoss_Silhouette_OnShieldDamaged final
{
public:
	class UBFGActorComponent_PawnDamage*          _pPawnDamage;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fDamage;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _pDamageCauser;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGDamageType*                         _pDamageType;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rShotDirection;                                   // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _oHitResult;                                       // 0x002C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGNPCCharacterBoss_Silhouette_OnShieldDamaged) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_Silhouette_OnShieldDamaged");
static_assert(sizeof(BFGNPCCharacterBoss_Silhouette_OnShieldDamaged) == 0x0000B8, "Wrong size on BFGNPCCharacterBoss_Silhouette_OnShieldDamaged");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnShieldDamaged, _pPawnDamage) == 0x000000, "Member 'BFGNPCCharacterBoss_Silhouette_OnShieldDamaged::_pPawnDamage' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnShieldDamaged, _fDamage) == 0x000008, "Member 'BFGNPCCharacterBoss_Silhouette_OnShieldDamaged::_fDamage' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnShieldDamaged, _pDamageCauser) == 0x000010, "Member 'BFGNPCCharacterBoss_Silhouette_OnShieldDamaged::_pDamageCauser' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnShieldDamaged, _pDamageType) == 0x000018, "Member 'BFGNPCCharacterBoss_Silhouette_OnShieldDamaged::_pDamageType' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnShieldDamaged, _rShotDirection) == 0x000020, "Member 'BFGNPCCharacterBoss_Silhouette_OnShieldDamaged::_rShotDirection' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnShieldDamaged, _oHitResult) == 0x00002C, "Member 'BFGNPCCharacterBoss_Silhouette_OnShieldDamaged::_oHitResult' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Silhouette.OnShieldStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Float*                    _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged) == 0x000008, "Wrong alignment on BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged");
static_assert(sizeof(BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged) == 0x000010, "Wrong size on BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged, _pOwner) == 0x000000, "Member 'BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged, _pStat) == 0x000008, "Member 'BFGNPCCharacterBoss_Silhouette_OnShieldStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterBoss_Silhouette.SetupEvasionSplinePoints
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterBoss_Silhouette_SetupEvasionSplinePoints final
{
public:
	struct FVector                                _vEndLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterBoss_Silhouette_SetupEvasionSplinePoints) == 0x000004, "Wrong alignment on BFGNPCCharacterBoss_Silhouette_SetupEvasionSplinePoints");
static_assert(sizeof(BFGNPCCharacterBoss_Silhouette_SetupEvasionSplinePoints) == 0x00000C, "Wrong size on BFGNPCCharacterBoss_Silhouette_SetupEvasionSplinePoints");
static_assert(offsetof(BFGNPCCharacterBoss_Silhouette_SetupEvasionSplinePoints, _vEndLocation) == 0x000000, "Member 'BFGNPCCharacterBoss_Silhouette_SetupEvasionSplinePoints::_vEndLocation' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_Mine.GetExplosionProgress
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterEnemy_Mine_GetExplosionProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_Mine_GetExplosionProgress) == 0x000004, "Wrong alignment on BFGNPCCharacterEnemy_Mine_GetExplosionProgress");
static_assert(sizeof(BFGNPCCharacterEnemy_Mine_GetExplosionProgress) == 0x000004, "Wrong size on BFGNPCCharacterEnemy_Mine_GetExplosionProgress");
static_assert(offsetof(BFGNPCCharacterEnemy_Mine_GetExplosionProgress, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_Mine_GetExplosionProgress::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_Mine_ParticleExploder.GetCountdownDuration
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterEnemy_Mine_ParticleExploder_GetCountdownDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_Mine_ParticleExploder_GetCountdownDuration) == 0x000004, "Wrong alignment on BFGNPCCharacterEnemy_Mine_ParticleExploder_GetCountdownDuration");
static_assert(sizeof(BFGNPCCharacterEnemy_Mine_ParticleExploder_GetCountdownDuration) == 0x000004, "Wrong size on BFGNPCCharacterEnemy_Mine_ParticleExploder_GetCountdownDuration");
static_assert(offsetof(BFGNPCCharacterEnemy_Mine_ParticleExploder_GetCountdownDuration, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_Mine_ParticleExploder_GetCountdownDuration::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_Mine_Roboprez.OnDetonated
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterEnemy_Mine_Roboprez_OnDetonated final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_Mine_Roboprez_OnDetonated) == 0x000008, "Wrong alignment on BFGNPCCharacterEnemy_Mine_Roboprez_OnDetonated");
static_assert(sizeof(BFGNPCCharacterEnemy_Mine_Roboprez_OnDetonated) == 0x000008, "Wrong size on BFGNPCCharacterEnemy_Mine_Roboprez_OnDetonated");
static_assert(offsetof(BFGNPCCharacterEnemy_Mine_Roboprez_OnDetonated, _pWeapon) == 0x000000, "Member 'BFGNPCCharacterEnemy_Mine_Roboprez_OnDetonated::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_Mine_Roboprez.GetSpawnFinalPosition
// 0x000C (0x000C - 0x0000)
struct BFGNPCCharacterEnemy_Mine_Roboprez_GetSpawnFinalPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_Mine_Roboprez_GetSpawnFinalPosition) == 0x000004, "Wrong alignment on BFGNPCCharacterEnemy_Mine_Roboprez_GetSpawnFinalPosition");
static_assert(sizeof(BFGNPCCharacterEnemy_Mine_Roboprez_GetSpawnFinalPosition) == 0x00000C, "Wrong size on BFGNPCCharacterEnemy_Mine_Roboprez_GetSpawnFinalPosition");
static_assert(offsetof(BFGNPCCharacterEnemy_Mine_Roboprez_GetSpawnFinalPosition, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_Mine_Roboprez_GetSpawnFinalPosition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_TeslaCoil.GetCurrentCharge
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCharge) == 0x000004, "Wrong alignment on BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCharge");
static_assert(sizeof(BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCharge) == 0x000004, "Wrong size on BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCharge");
static_assert(offsetof(BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCharge, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCharge::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_TeslaCoil.GetCurrentCooldown
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCooldown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCooldown) == 0x000004, "Wrong alignment on BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCooldown");
static_assert(sizeof(BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCooldown) == 0x000004, "Wrong size on BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCooldown");
static_assert(offsetof(BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCooldown, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_TeslaCoil_GetCurrentCooldown::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_TeslaCoil.GetIsCharging
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterEnemy_TeslaCoil_GetIsCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_TeslaCoil_GetIsCharging) == 0x000001, "Wrong alignment on BFGNPCCharacterEnemy_TeslaCoil_GetIsCharging");
static_assert(sizeof(BFGNPCCharacterEnemy_TeslaCoil_GetIsCharging) == 0x000001, "Wrong size on BFGNPCCharacterEnemy_TeslaCoil_GetIsCharging");
static_assert(offsetof(BFGNPCCharacterEnemy_TeslaCoil_GetIsCharging, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_TeslaCoil_GetIsCharging::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterEnemy_TeslaCoil.GetIsPlayerInRange
// 0x0001 (0x0001 - 0x0000)
struct BFGNPCCharacterEnemy_TeslaCoil_GetIsPlayerInRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterEnemy_TeslaCoil_GetIsPlayerInRange) == 0x000001, "Wrong alignment on BFGNPCCharacterEnemy_TeslaCoil_GetIsPlayerInRange");
static_assert(sizeof(BFGNPCCharacterEnemy_TeslaCoil_GetIsPlayerInRange) == 0x000001, "Wrong size on BFGNPCCharacterEnemy_TeslaCoil_GetIsPlayerInRange");
static_assert(offsetof(BFGNPCCharacterEnemy_TeslaCoil_GetIsPlayerInRange, ReturnValue) == 0x000000, "Member 'BFGNPCCharacterEnemy_TeslaCoil_GetIsPlayerInRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGNPCCharacterPox.OnSFX_NarrativeSequence_Start
// 0x0008 (0x0008 - 0x0000)
struct BFGNPCCharacterPox_OnSFX_NarrativeSequence_Start final
{
public:
	class FName                                   _oSequenceName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCCharacterPox_OnSFX_NarrativeSequence_Start) == 0x000004, "Wrong alignment on BFGNPCCharacterPox_OnSFX_NarrativeSequence_Start");
static_assert(sizeof(BFGNPCCharacterPox_OnSFX_NarrativeSequence_Start) == 0x000008, "Wrong size on BFGNPCCharacterPox_OnSFX_NarrativeSequence_Start");
static_assert(offsetof(BFGNPCCharacterPox_OnSFX_NarrativeSequence_Start, _oSequenceName) == 0x000000, "Member 'BFGNPCCharacterPox_OnSFX_NarrativeSequence_Start::_oSequenceName' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.FindTutorial
// 0x0010 (0x0010 - 0x0000)
struct BFGTutorialManager_FindTutorial final
{
public:
	class UBFGDataAsset_TutorialPage*             _pContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGWidget_TutorialPage*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_FindTutorial) == 0x000008, "Wrong alignment on BFGTutorialManager_FindTutorial");
static_assert(sizeof(BFGTutorialManager_FindTutorial) == 0x000010, "Wrong size on BFGTutorialManager_FindTutorial");
static_assert(offsetof(BFGTutorialManager_FindTutorial, _pContext) == 0x000000, "Member 'BFGTutorialManager_FindTutorial::_pContext' has a wrong offset!");
static_assert(offsetof(BFGTutorialManager_FindTutorial, ReturnValue) == 0x000008, "Member 'BFGTutorialManager_FindTutorial::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.GetTutorialOnTop
// 0x0008 (0x0008 - 0x0000)
struct BFGTutorialManager_GetTutorialOnTop final
{
public:
	class UBFGWidget_TutorialPage*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_GetTutorialOnTop) == 0x000008, "Wrong alignment on BFGTutorialManager_GetTutorialOnTop");
static_assert(sizeof(BFGTutorialManager_GetTutorialOnTop) == 0x000008, "Wrong size on BFGTutorialManager_GetTutorialOnTop");
static_assert(offsetof(BFGTutorialManager_GetTutorialOnTop, ReturnValue) == 0x000000, "Member 'BFGTutorialManager_GetTutorialOnTop::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.OnInputDeviceChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGTutorialManager_OnInputDeviceChanged final
{
public:
	bool                                          _bIsGamepad;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_OnInputDeviceChanged) == 0x000001, "Wrong alignment on BFGTutorialManager_OnInputDeviceChanged");
static_assert(sizeof(BFGTutorialManager_OnInputDeviceChanged) == 0x000001, "Wrong size on BFGTutorialManager_OnInputDeviceChanged");
static_assert(offsetof(BFGTutorialManager_OnInputDeviceChanged, _bIsGamepad) == 0x000000, "Member 'BFGTutorialManager_OnInputDeviceChanged::_bIsGamepad' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.OnTutorialHandbookClosed
// 0x0008 (0x0008 - 0x0000)
struct BFGTutorialManager_OnTutorialHandbookClosed final
{
public:
	class UBFGWidget_TutorialPage*                _pSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_OnTutorialHandbookClosed) == 0x000008, "Wrong alignment on BFGTutorialManager_OnTutorialHandbookClosed");
static_assert(sizeof(BFGTutorialManager_OnTutorialHandbookClosed) == 0x000008, "Wrong size on BFGTutorialManager_OnTutorialHandbookClosed");
static_assert(offsetof(BFGTutorialManager_OnTutorialHandbookClosed, _pSource) == 0x000000, "Member 'BFGTutorialManager_OnTutorialHandbookClosed::_pSource' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.OnTutorialIndicatorAnimationStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGTutorialManager_OnTutorialIndicatorAnimationStateChanged final
{
public:
	EBFGTutorialIndicatorAnimationState           _eCurrentState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_OnTutorialIndicatorAnimationStateChanged) == 0x000001, "Wrong alignment on BFGTutorialManager_OnTutorialIndicatorAnimationStateChanged");
static_assert(sizeof(BFGTutorialManager_OnTutorialIndicatorAnimationStateChanged) == 0x000001, "Wrong size on BFGTutorialManager_OnTutorialIndicatorAnimationStateChanged");
static_assert(offsetof(BFGTutorialManager_OnTutorialIndicatorAnimationStateChanged, _eCurrentState) == 0x000000, "Member 'BFGTutorialManager_OnTutorialIndicatorAnimationStateChanged::_eCurrentState' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.OnTutorialPageStyleTransitionFinished
// 0x0010 (0x0010 - 0x0000)
struct BFGTutorialManager_OnTutorialPageStyleTransitionFinished final
{
public:
	class UBFGWidget_TutorialPage*                _pSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGTutorialPageDisplayStyle                  _eDisplayStyle;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGTutorialManager_OnTutorialPageStyleTransitionFinished) == 0x000008, "Wrong alignment on BFGTutorialManager_OnTutorialPageStyleTransitionFinished");
static_assert(sizeof(BFGTutorialManager_OnTutorialPageStyleTransitionFinished) == 0x000010, "Wrong size on BFGTutorialManager_OnTutorialPageStyleTransitionFinished");
static_assert(offsetof(BFGTutorialManager_OnTutorialPageStyleTransitionFinished, _pSource) == 0x000000, "Member 'BFGTutorialManager_OnTutorialPageStyleTransitionFinished::_pSource' has a wrong offset!");
static_assert(offsetof(BFGTutorialManager_OnTutorialPageStyleTransitionFinished, _eDisplayStyle) == 0x000008, "Member 'BFGTutorialManager_OnTutorialPageStyleTransitionFinished::_eDisplayStyle' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.PushTutorial
// 0x0008 (0x0008 - 0x0000)
struct BFGTutorialManager_PushTutorial final
{
public:
	class UBFGDataAsset_TutorialPage*             _pContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_PushTutorial) == 0x000008, "Wrong alignment on BFGTutorialManager_PushTutorial");
static_assert(sizeof(BFGTutorialManager_PushTutorial) == 0x000008, "Wrong size on BFGTutorialManager_PushTutorial");
static_assert(offsetof(BFGTutorialManager_PushTutorial, _pContext) == 0x000000, "Member 'BFGTutorialManager_PushTutorial::_pContext' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.RemoveTutorial
// 0x0008 (0x0008 - 0x0000)
struct BFGTutorialManager_RemoveTutorial final
{
public:
	class UBFGDataAsset_TutorialPage*             _pContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_RemoveTutorial) == 0x000008, "Wrong alignment on BFGTutorialManager_RemoveTutorial");
static_assert(sizeof(BFGTutorialManager_RemoveTutorial) == 0x000008, "Wrong size on BFGTutorialManager_RemoveTutorial");
static_assert(offsetof(BFGTutorialManager_RemoveTutorial, _pContext) == 0x000000, "Member 'BFGTutorialManager_RemoveTutorial::_pContext' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.SetTarget
// 0x0010 (0x0010 - 0x0000)
struct BFGTutorialManager_SetTarget final
{
public:
	TScriptInterface<class IBFGTutorialPageTarget> _pTarget;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_SetTarget) == 0x000008, "Wrong alignment on BFGTutorialManager_SetTarget");
static_assert(sizeof(BFGTutorialManager_SetTarget) == 0x000010, "Wrong size on BFGTutorialManager_SetTarget");
static_assert(offsetof(BFGTutorialManager_SetTarget, _pTarget) == 0x000000, "Member 'BFGTutorialManager_SetTarget::_pTarget' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.ShowPausedTutorial
// 0x0028 (0x0028 - 0x0000)
struct BFGTutorialManager_ShowPausedTutorial final
{
public:
	TSoftObjectPtr<class UBFGDataAsset_PausedTutorial> _pTutorial;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_ShowPausedTutorial) == 0x000008, "Wrong alignment on BFGTutorialManager_ShowPausedTutorial");
static_assert(sizeof(BFGTutorialManager_ShowPausedTutorial) == 0x000028, "Wrong size on BFGTutorialManager_ShowPausedTutorial");
static_assert(offsetof(BFGTutorialManager_ShowPausedTutorial, _pTutorial) == 0x000000, "Member 'BFGTutorialManager_ShowPausedTutorial::_pTutorial' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.ShrinkTutorialOnTop
// 0x0001 (0x0001 - 0x0000)
struct BFGTutorialManager_ShrinkTutorialOnTop final
{
public:
	bool                                          _bHinted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_ShrinkTutorialOnTop) == 0x000001, "Wrong alignment on BFGTutorialManager_ShrinkTutorialOnTop");
static_assert(sizeof(BFGTutorialManager_ShrinkTutorialOnTop) == 0x000001, "Wrong size on BFGTutorialManager_ShrinkTutorialOnTop");
static_assert(offsetof(BFGTutorialManager_ShrinkTutorialOnTop, _bHinted) == 0x000000, "Member 'BFGTutorialManager_ShrinkTutorialOnTop::_bHinted' has a wrong offset!");

// Function BFGCore.BFGTutorialManager.UnlockTutorial
// 0x0008 (0x0008 - 0x0000)
struct BFGTutorialManager_UnlockTutorial final
{
public:
	class UBFGDataAsset_TutorialPage*             _pTutorial;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialManager_UnlockTutorial) == 0x000008, "Wrong alignment on BFGTutorialManager_UnlockTutorial");
static_assert(sizeof(BFGTutorialManager_UnlockTutorial) == 0x000008, "Wrong size on BFGTutorialManager_UnlockTutorial");
static_assert(offsetof(BFGTutorialManager_UnlockTutorial, _pTutorial) == 0x000000, "Member 'BFGTutorialManager_UnlockTutorial::_pTutorial' has a wrong offset!");

// Function BFGCore.BFGNPCLowRes.GetAnimationState
// 0x0004 (0x0004 - 0x0000)
struct BFGNPCLowRes_GetAnimationState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGNPCLowRes_GetAnimationState) == 0x000004, "Wrong alignment on BFGNPCLowRes_GetAnimationState");
static_assert(sizeof(BFGNPCLowRes_GetAnimationState) == 0x000004, "Wrong size on BFGNPCLowRes_GetAnimationState");
static_assert(offsetof(BFGNPCLowRes_GetAnimationState, ReturnValue) == 0x000000, "Member 'BFGNPCLowRes_GetAnimationState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverCharacterInterface.GetVoice
// 0x0008 (0x0008 - 0x0000)
struct BFGVoiceoverCharacterInterface_GetVoice final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverCharacterInterface_GetVoice) == 0x000004, "Wrong alignment on BFGVoiceoverCharacterInterface_GetVoice");
static_assert(sizeof(BFGVoiceoverCharacterInterface_GetVoice) == 0x000008, "Wrong size on BFGVoiceoverCharacterInterface_GetVoice");
static_assert(offsetof(BFGVoiceoverCharacterInterface_GetVoice, ReturnValue) == 0x000000, "Member 'BFGVoiceoverCharacterInterface_GetVoice::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObjectiveInterface.GetObjectiveMarkerAttachment
// 0x0080 (0x0080 - 0x0000)
struct BFGObjectiveInterface_GetObjectiveMarkerAttachment final
{
public:
	struct FBFGObjectiveMarkerInfoEntry           _entry;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBFGObjectiveMarkerInfoEntry           ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObjectiveInterface_GetObjectiveMarkerAttachment) == 0x000008, "Wrong alignment on BFGObjectiveInterface_GetObjectiveMarkerAttachment");
static_assert(sizeof(BFGObjectiveInterface_GetObjectiveMarkerAttachment) == 0x000080, "Wrong size on BFGObjectiveInterface_GetObjectiveMarkerAttachment");
static_assert(offsetof(BFGObjectiveInterface_GetObjectiveMarkerAttachment, _entry) == 0x000000, "Member 'BFGObjectiveInterface_GetObjectiveMarkerAttachment::_entry' has a wrong offset!");
static_assert(offsetof(BFGObjectiveInterface_GetObjectiveMarkerAttachment, ReturnValue) == 0x000040, "Member 'BFGObjectiveInterface_GetObjectiveMarkerAttachment::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObjectiveInterface.IsObjectiveMarkerDisabled
// 0x0001 (0x0001 - 0x0000)
struct BFGObjectiveInterface_IsObjectiveMarkerDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObjectiveInterface_IsObjectiveMarkerDisabled) == 0x000001, "Wrong alignment on BFGObjectiveInterface_IsObjectiveMarkerDisabled");
static_assert(sizeof(BFGObjectiveInterface_IsObjectiveMarkerDisabled) == 0x000001, "Wrong size on BFGObjectiveInterface_IsObjectiveMarkerDisabled");
static_assert(offsetof(BFGObjectiveInterface_IsObjectiveMarkerDisabled, ReturnValue) == 0x000000, "Member 'BFGObjectiveInterface_IsObjectiveMarkerDisabled::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGObjectiveMarker.ActionBool__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGObjectiveMarker_ActionBool__DelegateSignature final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObjectiveMarker_ActionBool__DelegateSignature) == 0x000001, "Wrong alignment on BFGObjectiveMarker_ActionBool__DelegateSignature");
static_assert(sizeof(BFGObjectiveMarker_ActionBool__DelegateSignature) == 0x000001, "Wrong size on BFGObjectiveMarker_ActionBool__DelegateSignature");
static_assert(offsetof(BFGObjectiveMarker_ActionBool__DelegateSignature, _bEnabled) == 0x000000, "Member 'BFGObjectiveMarker_ActionBool__DelegateSignature::_bEnabled' has a wrong offset!");

// DelegateFunction BFGCore.BFGObjectiveMarker.ActionMarkerInfo__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct BFGObjectiveMarker_ActionMarkerInfo__DelegateSignature final
{
public:
	struct FBFGObjectiveMarkerInfoEntry           _markerInfo;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObjectiveMarker_ActionMarkerInfo__DelegateSignature) == 0x000008, "Wrong alignment on BFGObjectiveMarker_ActionMarkerInfo__DelegateSignature");
static_assert(sizeof(BFGObjectiveMarker_ActionMarkerInfo__DelegateSignature) == 0x000040, "Wrong size on BFGObjectiveMarker_ActionMarkerInfo__DelegateSignature");
static_assert(offsetof(BFGObjectiveMarker_ActionMarkerInfo__DelegateSignature, _markerInfo) == 0x000000, "Member 'BFGObjectiveMarker_ActionMarkerInfo__DelegateSignature::_markerInfo' has a wrong offset!");

// Function BFGCore.BFGObjectiveMarker.AttachToObjective
// 0x0018 (0x0018 - 0x0000)
struct BFGObjectiveMarker_AttachToObjective final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        _pComponent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _strSocket;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObjectiveMarker_AttachToObjective) == 0x000008, "Wrong alignment on BFGObjectiveMarker_AttachToObjective");
static_assert(sizeof(BFGObjectiveMarker_AttachToObjective) == 0x000018, "Wrong size on BFGObjectiveMarker_AttachToObjective");
static_assert(offsetof(BFGObjectiveMarker_AttachToObjective, _pActor) == 0x000000, "Member 'BFGObjectiveMarker_AttachToObjective::_pActor' has a wrong offset!");
static_assert(offsetof(BFGObjectiveMarker_AttachToObjective, _pComponent) == 0x000008, "Member 'BFGObjectiveMarker_AttachToObjective::_pComponent' has a wrong offset!");
static_assert(offsetof(BFGObjectiveMarker_AttachToObjective, _strSocket) == 0x000010, "Member 'BFGObjectiveMarker_AttachToObjective::_strSocket' has a wrong offset!");

// Function BFGCore.BFGObjectiveMarker.GetMarkerInfo
// 0x0040 (0x0040 - 0x0000)
struct BFGObjectiveMarker_GetMarkerInfo final
{
public:
	struct FBFGObjectiveMarkerInfoEntry           ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObjectiveMarker_GetMarkerInfo) == 0x000008, "Wrong alignment on BFGObjectiveMarker_GetMarkerInfo");
static_assert(sizeof(BFGObjectiveMarker_GetMarkerInfo) == 0x000040, "Wrong size on BFGObjectiveMarker_GetMarkerInfo");
static_assert(offsetof(BFGObjectiveMarker_GetMarkerInfo, ReturnValue) == 0x000000, "Member 'BFGObjectiveMarker_GetMarkerInfo::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGObjectiveMarkerInstanceList.OnDeathStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGObjectiveMarkerInstanceList_OnDeathStatChanged final
{
public:
	class AActor*                                 _pOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObjectiveMarkerInstanceList_OnDeathStatChanged) == 0x000008, "Wrong alignment on BFGObjectiveMarkerInstanceList_OnDeathStatChanged");
static_assert(sizeof(BFGObjectiveMarkerInstanceList_OnDeathStatChanged) == 0x000010, "Wrong size on BFGObjectiveMarkerInstanceList_OnDeathStatChanged");
static_assert(offsetof(BFGObjectiveMarkerInstanceList_OnDeathStatChanged, _pOwner) == 0x000000, "Member 'BFGObjectiveMarkerInstanceList_OnDeathStatChanged::_pOwner' has a wrong offset!");
static_assert(offsetof(BFGObjectiveMarkerInstanceList_OnDeathStatChanged, _pStat) == 0x000008, "Member 'BFGObjectiveMarkerInstanceList_OnDeathStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGObjectiveMarkerSettings.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGObjectiveMarkerSettings_GetSettings final
{
public:
	class UBFGObjectiveMarkerSettings*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGObjectiveMarkerSettings_GetSettings) == 0x000008, "Wrong alignment on BFGObjectiveMarkerSettings_GetSettings");
static_assert(sizeof(BFGObjectiveMarkerSettings_GetSettings) == 0x000008, "Wrong size on BFGObjectiveMarkerSettings_GetSettings");
static_assert(offsetof(BFGObjectiveMarkerSettings_GetSettings, ReturnValue) == 0x000000, "Member 'BFGObjectiveMarkerSettings_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGOceanManager.GetOceanActor
// 0x0008 (0x0008 - 0x0000)
struct BFGOceanManager_GetOceanActor final
{
public:
	class ABFGActorOcean*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGOceanManager_GetOceanActor) == 0x000008, "Wrong alignment on BFGOceanManager_GetOceanActor");
static_assert(sizeof(BFGOceanManager_GetOceanActor) == 0x000008, "Wrong size on BFGOceanManager_GetOceanActor");
static_assert(offsetof(BFGOceanManager_GetOceanActor, ReturnValue) == 0x000000, "Member 'BFGOceanManager_GetOceanActor::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGOverheadWidgetManager.ActionRadarUpdate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGOverheadWidgetManager_ActionRadarUpdate__DelegateSignature final
{
public:
	class UBFGOverheadWidgetManager*              _pRadarManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGOverheadWidgetManager_ActionRadarUpdate__DelegateSignature) == 0x000008, "Wrong alignment on BFGOverheadWidgetManager_ActionRadarUpdate__DelegateSignature");
static_assert(sizeof(BFGOverheadWidgetManager_ActionRadarUpdate__DelegateSignature) == 0x000008, "Wrong size on BFGOverheadWidgetManager_ActionRadarUpdate__DelegateSignature");
static_assert(offsetof(BFGOverheadWidgetManager_ActionRadarUpdate__DelegateSignature, _pRadarManager) == 0x000000, "Member 'BFGOverheadWidgetManager_ActionRadarUpdate__DelegateSignature::_pRadarManager' has a wrong offset!");

// Function BFGCore.BFGOverheadWidgetManager.AddWidgetAtLocation
// 0x0020 (0x0020 - 0x0000)
struct BFGOverheadWidgetManager_AddWidgetAtLocation final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _Text;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGOverheadWidgetManager_AddWidgetAtLocation) == 0x000008, "Wrong alignment on BFGOverheadWidgetManager_AddWidgetAtLocation");
static_assert(sizeof(BFGOverheadWidgetManager_AddWidgetAtLocation) == 0x000020, "Wrong size on BFGOverheadWidgetManager_AddWidgetAtLocation");
static_assert(offsetof(BFGOverheadWidgetManager_AddWidgetAtLocation, _vLocation) == 0x000000, "Member 'BFGOverheadWidgetManager_AddWidgetAtLocation::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGOverheadWidgetManager_AddWidgetAtLocation, _Text) == 0x000010, "Member 'BFGOverheadWidgetManager_AddWidgetAtLocation::_Text' has a wrong offset!");

// Function BFGCore.BFGOverheadWidgetManager.AddWidgetAttachedToActor
// 0x0018 (0x0018 - 0x0000)
struct BFGOverheadWidgetManager_AddWidgetAttachedToActor final
{
public:
	class AActor*                                 _pAnchor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Text;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGOverheadWidgetManager_AddWidgetAttachedToActor) == 0x000008, "Wrong alignment on BFGOverheadWidgetManager_AddWidgetAttachedToActor");
static_assert(sizeof(BFGOverheadWidgetManager_AddWidgetAttachedToActor) == 0x000018, "Wrong size on BFGOverheadWidgetManager_AddWidgetAttachedToActor");
static_assert(offsetof(BFGOverheadWidgetManager_AddWidgetAttachedToActor, _pAnchor) == 0x000000, "Member 'BFGOverheadWidgetManager_AddWidgetAttachedToActor::_pAnchor' has a wrong offset!");
static_assert(offsetof(BFGOverheadWidgetManager_AddWidgetAttachedToActor, _Text) == 0x000008, "Member 'BFGOverheadWidgetManager_AddWidgetAttachedToActor::_Text' has a wrong offset!");

// Function BFGCore.BFGPauseManager.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BFGPauseManager_GetGameInstance final
{
public:
	class UBFGGameInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPauseManager_GetGameInstance) == 0x000008, "Wrong alignment on BFGPauseManager_GetGameInstance");
static_assert(sizeof(BFGPauseManager_GetGameInstance) == 0x000008, "Wrong size on BFGPauseManager_GetGameInstance");
static_assert(offsetof(BFGPauseManager_GetGameInstance, ReturnValue) == 0x000000, "Member 'BFGPauseManager_GetGameInstance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPauseManager.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct BFGPauseManager_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPauseManager_IsPaused) == 0x000001, "Wrong alignment on BFGPauseManager_IsPaused");
static_assert(sizeof(BFGPauseManager_IsPaused) == 0x000001, "Wrong size on BFGPauseManager_IsPaused");
static_assert(offsetof(BFGPauseManager_IsPaused, ReturnValue) == 0x000000, "Member 'BFGPauseManager_IsPaused::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayCrowdLifeStationAnim.OnAnimationPop
// 0x00D0 (0x00D0 - 0x0000)
struct BFGPlayCrowdLifeStationAnim_OnAnimationPop final
{
public:
	TScriptInterface<class IBFGInteractAnimationPlayerInterface> _pAnimPlayer;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _newAnimData;                                      // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _oldAnimData;                                      // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayCrowdLifeStationAnim_OnAnimationPop) == 0x000008, "Wrong alignment on BFGPlayCrowdLifeStationAnim_OnAnimationPop");
static_assert(sizeof(BFGPlayCrowdLifeStationAnim_OnAnimationPop) == 0x0000D0, "Wrong size on BFGPlayCrowdLifeStationAnim_OnAnimationPop");
static_assert(offsetof(BFGPlayCrowdLifeStationAnim_OnAnimationPop, _pAnimPlayer) == 0x000000, "Member 'BFGPlayCrowdLifeStationAnim_OnAnimationPop::_pAnimPlayer' has a wrong offset!");
static_assert(offsetof(BFGPlayCrowdLifeStationAnim_OnAnimationPop, _newAnimData) == 0x000010, "Member 'BFGPlayCrowdLifeStationAnim_OnAnimationPop::_newAnimData' has a wrong offset!");
static_assert(offsetof(BFGPlayCrowdLifeStationAnim_OnAnimationPop, _oldAnimData) == 0x000070, "Member 'BFGPlayCrowdLifeStationAnim_OnAnimationPop::_oldAnimData' has a wrong offset!");

// Function BFGCore.BFGPlayerCharacter.OnDeathStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGPlayerCharacter_OnDeathStateChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerCharacter_OnDeathStateChanged) == 0x000008, "Wrong alignment on BFGPlayerCharacter_OnDeathStateChanged");
static_assert(sizeof(BFGPlayerCharacter_OnDeathStateChanged) == 0x000010, "Wrong size on BFGPlayerCharacter_OnDeathStateChanged");
static_assert(offsetof(BFGPlayerCharacter_OnDeathStateChanged, _pActor) == 0x000000, "Member 'BFGPlayerCharacter_OnDeathStateChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGPlayerCharacter_OnDeathStateChanged, _pStat) == 0x000008, "Member 'BFGPlayerCharacter_OnDeathStateChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGPlayerCharacter.OnShieldStatChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGPlayerCharacter_OnShieldStatChanged final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Float*                    _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerCharacter_OnShieldStatChanged) == 0x000008, "Wrong alignment on BFGPlayerCharacter_OnShieldStatChanged");
static_assert(sizeof(BFGPlayerCharacter_OnShieldStatChanged) == 0x000010, "Wrong size on BFGPlayerCharacter_OnShieldStatChanged");
static_assert(offsetof(BFGPlayerCharacter_OnShieldStatChanged, _pActor) == 0x000000, "Member 'BFGPlayerCharacter_OnShieldStatChanged::_pActor' has a wrong offset!");
static_assert(offsetof(BFGPlayerCharacter_OnShieldStatChanged, _pStat) == 0x000008, "Member 'BFGPlayerCharacter_OnShieldStatChanged::_pStat' has a wrong offset!");

// Function BFGCore.BFGPlayerCharacter.OnShowTriggerZoneMessage
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerCharacter_OnShowTriggerZoneMessage final
{
public:
	bool                                          _bIsOutside;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerCharacter_OnShowTriggerZoneMessage) == 0x000001, "Wrong alignment on BFGPlayerCharacter_OnShowTriggerZoneMessage");
static_assert(sizeof(BFGPlayerCharacter_OnShowTriggerZoneMessage) == 0x000001, "Wrong size on BFGPlayerCharacter_OnShowTriggerZoneMessage");
static_assert(offsetof(BFGPlayerCharacter_OnShowTriggerZoneMessage, _bIsOutside) == 0x000000, "Member 'BFGPlayerCharacter_OnShowTriggerZoneMessage::_bIsOutside' has a wrong offset!");

// Function BFGCore.BFGPlayerCharacter.GetIsInWater
// 0x0001 (0x0001 - 0x0000)
struct BFGPlayerCharacter_GetIsInWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerCharacter_GetIsInWater) == 0x000001, "Wrong alignment on BFGPlayerCharacter_GetIsInWater");
static_assert(sizeof(BFGPlayerCharacter_GetIsInWater) == 0x000001, "Wrong size on BFGPlayerCharacter_GetIsInWater");
static_assert(offsetof(BFGPlayerCharacter_GetIsInWater, ReturnValue) == 0x000000, "Member 'BFGPlayerCharacter_GetIsInWater::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerCharacter.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerCharacter_GetSettings final
{
public:
	class UBFGPlayerCharacter_Settings*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerCharacter_GetSettings) == 0x000008, "Wrong alignment on BFGPlayerCharacter_GetSettings");
static_assert(sizeof(BFGPlayerCharacter_GetSettings) == 0x000008, "Wrong size on BFGPlayerCharacter_GetSettings");
static_assert(offsetof(BFGPlayerCharacter_GetSettings, ReturnValue) == 0x000000, "Member 'BFGPlayerCharacter_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerCharacter.GetWaterInfo
// 0x000C (0x000C - 0x0000)
struct BFGPlayerCharacter_GetWaterInfo final
{
public:
	struct FBFGWaterPlaneInfo                     ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerCharacter_GetWaterInfo) == 0x000004, "Wrong alignment on BFGPlayerCharacter_GetWaterInfo");
static_assert(sizeof(BFGPlayerCharacter_GetWaterInfo) == 0x00000C, "Wrong size on BFGPlayerCharacter_GetWaterInfo");
static_assert(offsetof(BFGPlayerCharacter_GetWaterInfo, ReturnValue) == 0x000000, "Member 'BFGPlayerCharacter_GetWaterInfo::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetPlayerStateUnlocks
// 0x0010 (0x0010 - 0x0000)
struct BFGPlayerState_GetPlayerStateUnlocks final
{
public:
	const class UObject*                          _pWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGPlayerState_Unlocks*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetPlayerStateUnlocks) == 0x000008, "Wrong alignment on BFGPlayerState_GetPlayerStateUnlocks");
static_assert(sizeof(BFGPlayerState_GetPlayerStateUnlocks) == 0x000010, "Wrong size on BFGPlayerState_GetPlayerStateUnlocks");
static_assert(offsetof(BFGPlayerState_GetPlayerStateUnlocks, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_GetPlayerStateUnlocks::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_GetPlayerStateUnlocks, ReturnValue) == 0x000008, "Member 'BFGPlayerState_GetPlayerStateUnlocks::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.AddAmmunitionByType
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerState_AddAmmunitionByType final
{
public:
	EItemValueTypeEnum                            _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _iAmount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_AddAmmunitionByType) == 0x000004, "Wrong alignment on BFGPlayerState_AddAmmunitionByType");
static_assert(sizeof(BFGPlayerState_AddAmmunitionByType) == 0x000008, "Wrong size on BFGPlayerState_AddAmmunitionByType");
static_assert(offsetof(BFGPlayerState_AddAmmunitionByType, _eType) == 0x000000, "Member 'BFGPlayerState_AddAmmunitionByType::_eType' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_AddAmmunitionByType, _iAmount) == 0x000004, "Member 'BFGPlayerState_AddAmmunitionByType::_iAmount' has a wrong offset!");

// Function BFGCore.BFGPlayerState.AddAnalProbeAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_AddAnalProbeAmmunition final
{
public:
	int32                                         _iAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_AddAnalProbeAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_AddAnalProbeAmmunition");
static_assert(sizeof(BFGPlayerState_AddAnalProbeAmmunition) == 0x000004, "Wrong size on BFGPlayerState_AddAnalProbeAmmunition");
static_assert(offsetof(BFGPlayerState_AddAnalProbeAmmunition, _iAmount) == 0x000000, "Member 'BFGPlayerState_AddAnalProbeAmmunition::_iAmount' has a wrong offset!");

// Function BFGCore.BFGPlayerState.AddDisintegratorRayAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_AddDisintegratorRayAmmunition final
{
public:
	int32                                         _iAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_AddDisintegratorRayAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_AddDisintegratorRayAmmunition");
static_assert(sizeof(BFGPlayerState_AddDisintegratorRayAmmunition) == 0x000004, "Wrong size on BFGPlayerState_AddDisintegratorRayAmmunition");
static_assert(offsetof(BFGPlayerState_AddDisintegratorRayAmmunition, _iAmount) == 0x000000, "Member 'BFGPlayerState_AddDisintegratorRayAmmunition::_iAmount' has a wrong offset!");

// Function BFGCore.BFGPlayerState.AddIonDetonatorAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_AddIonDetonatorAmmunition final
{
public:
	int32                                         _iAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_AddIonDetonatorAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_AddIonDetonatorAmmunition");
static_assert(sizeof(BFGPlayerState_AddIonDetonatorAmmunition) == 0x000004, "Wrong size on BFGPlayerState_AddIonDetonatorAmmunition");
static_assert(offsetof(BFGPlayerState_AddIonDetonatorAmmunition, _iAmount) == 0x000000, "Member 'BFGPlayerState_AddIonDetonatorAmmunition::_iAmount' has a wrong offset!");

// Function BFGCore.BFGPlayerState.AddSaucerQuantumDeconstructorAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_AddSaucerQuantumDeconstructorAmmunition final
{
public:
	int32                                         _iAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_AddSaucerQuantumDeconstructorAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_AddSaucerQuantumDeconstructorAmmunition");
static_assert(sizeof(BFGPlayerState_AddSaucerQuantumDeconstructorAmmunition) == 0x000004, "Wrong size on BFGPlayerState_AddSaucerQuantumDeconstructorAmmunition");
static_assert(offsetof(BFGPlayerState_AddSaucerQuantumDeconstructorAmmunition, _iAmount) == 0x000000, "Member 'BFGPlayerState_AddSaucerQuantumDeconstructorAmmunition::_iAmount' has a wrong offset!");

// Function BFGCore.BFGPlayerState.AddSaucerSonicBoomAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_AddSaucerSonicBoomAmmunition final
{
public:
	int32                                         _iAmount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_AddSaucerSonicBoomAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_AddSaucerSonicBoomAmmunition");
static_assert(sizeof(BFGPlayerState_AddSaucerSonicBoomAmmunition) == 0x000004, "Wrong size on BFGPlayerState_AddSaucerSonicBoomAmmunition");
static_assert(offsetof(BFGPlayerState_AddSaucerSonicBoomAmmunition, _iAmount) == 0x000000, "Member 'BFGPlayerState_AddSaucerSonicBoomAmmunition::_iAmount' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetAmmunitionByType
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerState_GetAmmunitionByType final
{
public:
	EItemValueTypeEnum                            _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetAmmunitionByType) == 0x000004, "Wrong alignment on BFGPlayerState_GetAmmunitionByType");
static_assert(sizeof(BFGPlayerState_GetAmmunitionByType) == 0x000008, "Wrong size on BFGPlayerState_GetAmmunitionByType");
static_assert(offsetof(BFGPlayerState_GetAmmunitionByType, _eType) == 0x000000, "Member 'BFGPlayerState_GetAmmunitionByType::_eType' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_GetAmmunitionByType, ReturnValue) == 0x000004, "Member 'BFGPlayerState_GetAmmunitionByType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetMaxAmmunitionByType
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerState_GetMaxAmmunitionByType final
{
public:
	EItemValueTypeEnum                            _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetMaxAmmunitionByType) == 0x000004, "Wrong alignment on BFGPlayerState_GetMaxAmmunitionByType");
static_assert(sizeof(BFGPlayerState_GetMaxAmmunitionByType) == 0x000008, "Wrong size on BFGPlayerState_GetMaxAmmunitionByType");
static_assert(offsetof(BFGPlayerState_GetMaxAmmunitionByType, _eType) == 0x000000, "Member 'BFGPlayerState_GetMaxAmmunitionByType::_eType' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_GetMaxAmmunitionByType, ReturnValue) == 0x000004, "Member 'BFGPlayerState_GetMaxAmmunitionByType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetWeaponByAmmunitionType
// 0x0010 (0x0010 - 0x0000)
struct BFGPlayerState_GetWeaponByAmmunitionType final
{
public:
	EItemValueTypeEnum                            _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGWeapon*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetWeaponByAmmunitionType) == 0x000008, "Wrong alignment on BFGPlayerState_GetWeaponByAmmunitionType");
static_assert(sizeof(BFGPlayerState_GetWeaponByAmmunitionType) == 0x000010, "Wrong size on BFGPlayerState_GetWeaponByAmmunitionType");
static_assert(offsetof(BFGPlayerState_GetWeaponByAmmunitionType, _eType) == 0x000000, "Member 'BFGPlayerState_GetWeaponByAmmunitionType::_eType' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_GetWeaponByAmmunitionType, ReturnValue) == 0x000008, "Member 'BFGPlayerState_GetWeaponByAmmunitionType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.SetSelectedSkin
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_SetSelectedSkin final
{
public:
	struct FGameplayTag                           _oNewSkinTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsSkinSelectionMenu;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bByUserChanged;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_SetSelectedSkin) == 0x000004, "Wrong alignment on BFGPlayerState_SetSelectedSkin");
static_assert(sizeof(BFGPlayerState_SetSelectedSkin) == 0x00000C, "Wrong size on BFGPlayerState_SetSelectedSkin");
static_assert(offsetof(BFGPlayerState_SetSelectedSkin, _oNewSkinTag) == 0x000000, "Member 'BFGPlayerState_SetSelectedSkin::_oNewSkinTag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_SetSelectedSkin, _bIsSkinSelectionMenu) == 0x000008, "Member 'BFGPlayerState_SetSelectedSkin::_bIsSkinSelectionMenu' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_SetSelectedSkin, _bByUserChanged) == 0x000009, "Member 'BFGPlayerState_SetSelectedSkin::_bByUserChanged' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetAnalProbAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_GetAnalProbAmmunition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetAnalProbAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_GetAnalProbAmmunition");
static_assert(sizeof(BFGPlayerState_GetAnalProbAmmunition) == 0x000004, "Wrong size on BFGPlayerState_GetAnalProbAmmunition");
static_assert(offsetof(BFGPlayerState_GetAnalProbAmmunition, ReturnValue) == 0x000000, "Member 'BFGPlayerState_GetAnalProbAmmunition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetDisintegratorAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_GetDisintegratorAmmunition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetDisintegratorAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_GetDisintegratorAmmunition");
static_assert(sizeof(BFGPlayerState_GetDisintegratorAmmunition) == 0x000004, "Wrong size on BFGPlayerState_GetDisintegratorAmmunition");
static_assert(offsetof(BFGPlayerState_GetDisintegratorAmmunition, ReturnValue) == 0x000000, "Member 'BFGPlayerState_GetDisintegratorAmmunition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetIonDetonatorAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_GetIonDetonatorAmmunition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetIonDetonatorAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_GetIonDetonatorAmmunition");
static_assert(sizeof(BFGPlayerState_GetIonDetonatorAmmunition) == 0x000004, "Wrong size on BFGPlayerState_GetIonDetonatorAmmunition");
static_assert(offsetof(BFGPlayerState_GetIonDetonatorAmmunition, ReturnValue) == 0x000000, "Member 'BFGPlayerState_GetIonDetonatorAmmunition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetSaucerQuantumAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_GetSaucerQuantumAmmunition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetSaucerQuantumAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_GetSaucerQuantumAmmunition");
static_assert(sizeof(BFGPlayerState_GetSaucerQuantumAmmunition) == 0x000004, "Wrong size on BFGPlayerState_GetSaucerQuantumAmmunition");
static_assert(offsetof(BFGPlayerState_GetSaucerQuantumAmmunition, ReturnValue) == 0x000000, "Member 'BFGPlayerState_GetSaucerQuantumAmmunition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetSaucerSonicBoomAmmunition
// 0x0004 (0x0004 - 0x0000)
struct BFGPlayerState_GetSaucerSonicBoomAmmunition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetSaucerSonicBoomAmmunition) == 0x000004, "Wrong alignment on BFGPlayerState_GetSaucerSonicBoomAmmunition");
static_assert(sizeof(BFGPlayerState_GetSaucerSonicBoomAmmunition) == 0x000004, "Wrong size on BFGPlayerState_GetSaucerSonicBoomAmmunition");
static_assert(offsetof(BFGPlayerState_GetSaucerSonicBoomAmmunition, ReturnValue) == 0x000000, "Member 'BFGPlayerState_GetSaucerSonicBoomAmmunition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetSelectedSkin
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerState_GetSelectedSkin final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetSelectedSkin) == 0x000004, "Wrong alignment on BFGPlayerState_GetSelectedSkin");
static_assert(sizeof(BFGPlayerState_GetSelectedSkin) == 0x000008, "Wrong size on BFGPlayerState_GetSelectedSkin");
static_assert(offsetof(BFGPlayerState_GetSelectedSkin, ReturnValue) == 0x000000, "Member 'BFGPlayerState_GetSelectedSkin::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetUnlocks
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerState_GetUnlocks final
{
public:
	class UBFGPlayerState_Unlocks*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetUnlocks) == 0x000008, "Wrong alignment on BFGPlayerState_GetUnlocks");
static_assert(sizeof(BFGPlayerState_GetUnlocks) == 0x000008, "Wrong size on BFGPlayerState_GetUnlocks");
static_assert(offsetof(BFGPlayerState_GetUnlocks, ReturnValue) == 0x000000, "Member 'BFGPlayerState_GetUnlocks::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState.GetUpgrades
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerState_GetUpgrades final
{
public:
	class UBFGPlayerState_Upgrades*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_GetUpgrades) == 0x000008, "Wrong alignment on BFGPlayerState_GetUpgrades");
static_assert(sizeof(BFGPlayerState_GetUpgrades) == 0x000008, "Wrong size on BFGPlayerState_GetUpgrades");
static_assert(offsetof(BFGPlayerState_GetUpgrades, ReturnValue) == 0x000000, "Member 'BFGPlayerState_GetUpgrades::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_AddNameToNotificationList
// 0x0010 (0x0010 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList) == 0x000010, "Wrong size on BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList, _name) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_AddNameToNotificationList::_name' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_AddTagtoNotificationList
// 0x0010 (0x0010 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tags;                                             // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList) == 0x000010, "Wrong size on BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList, _tags) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_AddTagtoNotificationList::_tags' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_HasNameInNotificationList
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList) == 0x000018, "Wrong size on BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList, _name) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList::_name' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList, ReturnValue) == 0x000010, "Member 'BFGPlayerState_Unlocks_PlayerState_HasNameInNotificationList::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_HasTaginNotificationList
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tags;                                             // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList) == 0x000018, "Wrong size on BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList, _tags) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList, ReturnValue) == 0x000010, "Member 'BFGPlayerState_Unlocks_PlayerState_HasTaginNotificationList::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_IsUnlockedTag
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag final
{
public:
	const class UObject*                          _pWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tag;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag) == 0x000018, "Wrong size on BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag, _tag) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag, ReturnValue) == 0x000010, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_IsUnlockedTagExact
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact final
{
public:
	const class UObject*                          _pWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tag;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact) == 0x000018, "Wrong size on BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact, _tag) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact, ReturnValue) == 0x000010, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagExact::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_IsUnlockedTags
// 0x0030 (0x0030 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags final
{
public:
	const class UObject*                          _pWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _tags;                                             // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags) == 0x000030, "Wrong size on BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags, _tags) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags, ReturnValue) == 0x000028, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_IsUnlockedTagsExact
// 0x0030 (0x0030 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact final
{
public:
	const class UObject*                          _pWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _tags;                                             // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact) == 0x000030, "Wrong size on BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact, _tags) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact, ReturnValue) == 0x000028, "Member 'BFGPlayerState_Unlocks_PlayerState_IsUnlockedTagsExact::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_LockTag
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_LockTag final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tag;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_LockTag) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_LockTag");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_LockTag) == 0x000018, "Wrong size on BFGPlayerState_Unlocks_PlayerState_LockTag");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_LockTag, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_LockTag::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_LockTag, _tag) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_LockTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_LockTag, ReturnValue) == 0x000010, "Member 'BFGPlayerState_Unlocks_PlayerState_LockTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_LockTags
// 0x0030 (0x0030 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_LockTags final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _tags;                                             // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_LockTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_LockTags");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_LockTags) == 0x000030, "Wrong size on BFGPlayerState_Unlocks_PlayerState_LockTags");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_LockTags, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_LockTags::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_LockTags, _tags) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_LockTags::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_LockTags, ReturnValue) == 0x000028, "Member 'BFGPlayerState_Unlocks_PlayerState_LockTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_RemoveLockedTag
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tag;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag) == 0x000018, "Wrong size on BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag, _tag) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag, ReturnValue) == 0x000010, "Member 'BFGPlayerState_Unlocks_PlayerState_RemoveLockedTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_RemoveLockedTags
// 0x0030 (0x0030 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _tags;                                             // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags) == 0x000030, "Wrong size on BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags, _tags) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags, ReturnValue) == 0x000028, "Member 'BFGPlayerState_Unlocks_PlayerState_RemoveLockedTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_UnlockTag
// 0x0018 (0x0018 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_UnlockTag final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           _tag;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsPermanent;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_UnlockTag) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_UnlockTag");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_UnlockTag) == 0x000018, "Wrong size on BFGPlayerState_Unlocks_PlayerState_UnlockTag");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_UnlockTag, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_UnlockTag::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_UnlockTag, _tag) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_UnlockTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_UnlockTag, _bIsPermanent) == 0x000010, "Member 'BFGPlayerState_Unlocks_PlayerState_UnlockTag::_bIsPermanent' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_UnlockTag, ReturnValue) == 0x000011, "Member 'BFGPlayerState_Unlocks_PlayerState_UnlockTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.PlayerState_UnlockTags
// 0x0030 (0x0030 - 0x0000)
struct BFGPlayerState_Unlocks_PlayerState_UnlockTags final
{
public:
	class UObject*                                _pWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _tags;                                             // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          _bIsPermanent;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_PlayerState_UnlockTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_PlayerState_UnlockTags");
static_assert(sizeof(BFGPlayerState_Unlocks_PlayerState_UnlockTags) == 0x000030, "Wrong size on BFGPlayerState_Unlocks_PlayerState_UnlockTags");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_UnlockTags, _pWorldContext) == 0x000000, "Member 'BFGPlayerState_Unlocks_PlayerState_UnlockTags::_pWorldContext' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_UnlockTags, _tags) == 0x000008, "Member 'BFGPlayerState_Unlocks_PlayerState_UnlockTags::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_UnlockTags, _bIsPermanent) == 0x000028, "Member 'BFGPlayerState_Unlocks_PlayerState_UnlockTags::_bIsPermanent' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_PlayerState_UnlockTags, ReturnValue) == 0x000029, "Member 'BFGPlayerState_Unlocks_PlayerState_UnlockTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.LockRemoveTag
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Unlocks_LockRemoveTag final
{
public:
	struct FGameplayTag                           _tag;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsPermanent;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_LockRemoveTag) == 0x000004, "Wrong alignment on BFGPlayerState_Unlocks_LockRemoveTag");
static_assert(sizeof(BFGPlayerState_Unlocks_LockRemoveTag) == 0x00000C, "Wrong size on BFGPlayerState_Unlocks_LockRemoveTag");
static_assert(offsetof(BFGPlayerState_Unlocks_LockRemoveTag, _tag) == 0x000000, "Member 'BFGPlayerState_Unlocks_LockRemoveTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_LockRemoveTag, _bIsPermanent) == 0x000008, "Member 'BFGPlayerState_Unlocks_LockRemoveTag::_bIsPermanent' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.LockRemoveTags
// 0x0028 (0x0028 - 0x0000)
struct BFGPlayerState_Unlocks_LockRemoveTags final
{
public:
	struct FGameplayTagContainer                  _tags;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bIsPermanent;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_LockRemoveTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_LockRemoveTags");
static_assert(sizeof(BFGPlayerState_Unlocks_LockRemoveTags) == 0x000028, "Wrong size on BFGPlayerState_Unlocks_LockRemoveTags");
static_assert(offsetof(BFGPlayerState_Unlocks_LockRemoveTags, _tags) == 0x000000, "Member 'BFGPlayerState_Unlocks_LockRemoveTags::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_LockRemoveTags, _bIsPermanent) == 0x000020, "Member 'BFGPlayerState_Unlocks_LockRemoveTags::_bIsPermanent' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.RemoveLockedTag
// 0x0008 (0x0008 - 0x0000)
struct BFGPlayerState_Unlocks_RemoveLockedTag final
{
public:
	struct FGameplayTag                           _tag;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_Unlocks_RemoveLockedTag) == 0x000004, "Wrong alignment on BFGPlayerState_Unlocks_RemoveLockedTag");
static_assert(sizeof(BFGPlayerState_Unlocks_RemoveLockedTag) == 0x000008, "Wrong size on BFGPlayerState_Unlocks_RemoveLockedTag");
static_assert(offsetof(BFGPlayerState_Unlocks_RemoveLockedTag, _tag) == 0x000000, "Member 'BFGPlayerState_Unlocks_RemoveLockedTag::_tag' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.RemoveLockedTags
// 0x0020 (0x0020 - 0x0000)
struct BFGPlayerState_Unlocks_RemoveLockedTags final
{
public:
	struct FGameplayTagContainer                  _tags;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_Unlocks_RemoveLockedTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_RemoveLockedTags");
static_assert(sizeof(BFGPlayerState_Unlocks_RemoveLockedTags) == 0x000020, "Wrong size on BFGPlayerState_Unlocks_RemoveLockedTags");
static_assert(offsetof(BFGPlayerState_Unlocks_RemoveLockedTags, _tags) == 0x000000, "Member 'BFGPlayerState_Unlocks_RemoveLockedTags::_tags' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.UnlockTag
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Unlocks_UnlockTag final
{
public:
	struct FGameplayTag                           _tag;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsPermanent;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_UnlockTag) == 0x000004, "Wrong alignment on BFGPlayerState_Unlocks_UnlockTag");
static_assert(sizeof(BFGPlayerState_Unlocks_UnlockTag) == 0x00000C, "Wrong size on BFGPlayerState_Unlocks_UnlockTag");
static_assert(offsetof(BFGPlayerState_Unlocks_UnlockTag, _tag) == 0x000000, "Member 'BFGPlayerState_Unlocks_UnlockTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_UnlockTag, _bIsPermanent) == 0x000008, "Member 'BFGPlayerState_Unlocks_UnlockTag::_bIsPermanent' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.UnlockTags
// 0x0028 (0x0028 - 0x0000)
struct BFGPlayerState_Unlocks_UnlockTags final
{
public:
	struct FGameplayTagContainer                  _tags;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bIsPermanent;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_UnlockTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_UnlockTags");
static_assert(sizeof(BFGPlayerState_Unlocks_UnlockTags) == 0x000028, "Wrong size on BFGPlayerState_Unlocks_UnlockTags");
static_assert(offsetof(BFGPlayerState_Unlocks_UnlockTags, _tags) == 0x000000, "Member 'BFGPlayerState_Unlocks_UnlockTags::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_UnlockTags, _bIsPermanent) == 0x000020, "Member 'BFGPlayerState_Unlocks_UnlockTags::_bIsPermanent' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.GetTags
// 0x0020 (0x0020 - 0x0000)
struct BFGPlayerState_Unlocks_GetTags final
{
public:
	struct FGameplayTagContainer                  _tagsOut;                                          // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPlayerState_Unlocks_GetTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_GetTags");
static_assert(sizeof(BFGPlayerState_Unlocks_GetTags) == 0x000020, "Wrong size on BFGPlayerState_Unlocks_GetTags");
static_assert(offsetof(BFGPlayerState_Unlocks_GetTags, _tagsOut) == 0x000000, "Member 'BFGPlayerState_Unlocks_GetTags::_tagsOut' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.IsUnlockedQuery
// 0x0050 (0x0050 - 0x0000)
struct BFGPlayerState_Unlocks_IsUnlockedQuery final
{
public:
	struct FGameplayTagQuery                      _query;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_IsUnlockedQuery) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_IsUnlockedQuery");
static_assert(sizeof(BFGPlayerState_Unlocks_IsUnlockedQuery) == 0x000050, "Wrong size on BFGPlayerState_Unlocks_IsUnlockedQuery");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedQuery, _query) == 0x000000, "Member 'BFGPlayerState_Unlocks_IsUnlockedQuery::_query' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedQuery, ReturnValue) == 0x000048, "Member 'BFGPlayerState_Unlocks_IsUnlockedQuery::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.IsUnlockedTag
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Unlocks_IsUnlockedTag final
{
public:
	struct FGameplayTag                           _tag;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_IsUnlockedTag) == 0x000004, "Wrong alignment on BFGPlayerState_Unlocks_IsUnlockedTag");
static_assert(sizeof(BFGPlayerState_Unlocks_IsUnlockedTag) == 0x00000C, "Wrong size on BFGPlayerState_Unlocks_IsUnlockedTag");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedTag, _tag) == 0x000000, "Member 'BFGPlayerState_Unlocks_IsUnlockedTag::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedTag, ReturnValue) == 0x000008, "Member 'BFGPlayerState_Unlocks_IsUnlockedTag::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.IsUnlockedTagExact
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Unlocks_IsUnlockedTagExact final
{
public:
	struct FGameplayTag                           _tag;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_IsUnlockedTagExact) == 0x000004, "Wrong alignment on BFGPlayerState_Unlocks_IsUnlockedTagExact");
static_assert(sizeof(BFGPlayerState_Unlocks_IsUnlockedTagExact) == 0x00000C, "Wrong size on BFGPlayerState_Unlocks_IsUnlockedTagExact");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedTagExact, _tag) == 0x000000, "Member 'BFGPlayerState_Unlocks_IsUnlockedTagExact::_tag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedTagExact, ReturnValue) == 0x000008, "Member 'BFGPlayerState_Unlocks_IsUnlockedTagExact::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.IsUnlockedTags
// 0x0028 (0x0028 - 0x0000)
struct BFGPlayerState_Unlocks_IsUnlockedTags final
{
public:
	struct FGameplayTagContainer                  _tags;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_IsUnlockedTags) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_IsUnlockedTags");
static_assert(sizeof(BFGPlayerState_Unlocks_IsUnlockedTags) == 0x000028, "Wrong size on BFGPlayerState_Unlocks_IsUnlockedTags");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedTags, _tags) == 0x000000, "Member 'BFGPlayerState_Unlocks_IsUnlockedTags::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedTags, ReturnValue) == 0x000020, "Member 'BFGPlayerState_Unlocks_IsUnlockedTags::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Unlocks.IsUnlockedTagsExact
// 0x0028 (0x0028 - 0x0000)
struct BFGPlayerState_Unlocks_IsUnlockedTagsExact final
{
public:
	struct FGameplayTagContainer                  _tags;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Unlocks_IsUnlockedTagsExact) == 0x000008, "Wrong alignment on BFGPlayerState_Unlocks_IsUnlockedTagsExact");
static_assert(sizeof(BFGPlayerState_Unlocks_IsUnlockedTagsExact) == 0x000028, "Wrong size on BFGPlayerState_Unlocks_IsUnlockedTagsExact");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedTagsExact, _tags) == 0x000000, "Member 'BFGPlayerState_Unlocks_IsUnlockedTagsExact::_tags' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Unlocks_IsUnlockedTagsExact, ReturnValue) == 0x000020, "Member 'BFGPlayerState_Unlocks_IsUnlockedTagsExact::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Upgrades.TryUpgrade
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Upgrades_TryUpgrade final
{
public:
	struct FGameplayTag                           _rUpgradeTag;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Upgrades_TryUpgrade) == 0x000004, "Wrong alignment on BFGPlayerState_Upgrades_TryUpgrade");
static_assert(sizeof(BFGPlayerState_Upgrades_TryUpgrade) == 0x00000C, "Wrong size on BFGPlayerState_Upgrades_TryUpgrade");
static_assert(offsetof(BFGPlayerState_Upgrades_TryUpgrade, _rUpgradeTag) == 0x000000, "Member 'BFGPlayerState_Upgrades_TryUpgrade::_rUpgradeTag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Upgrades_TryUpgrade, ReturnValue) == 0x000008, "Member 'BFGPlayerState_Upgrades_TryUpgrade::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Upgrades.HasItemUpgrade
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Upgrades_HasItemUpgrade final
{
public:
	struct FGameplayTag                           _rUpgradeTag;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Upgrades_HasItemUpgrade) == 0x000004, "Wrong alignment on BFGPlayerState_Upgrades_HasItemUpgrade");
static_assert(sizeof(BFGPlayerState_Upgrades_HasItemUpgrade) == 0x00000C, "Wrong size on BFGPlayerState_Upgrades_HasItemUpgrade");
static_assert(offsetof(BFGPlayerState_Upgrades_HasItemUpgrade, _rUpgradeTag) == 0x000000, "Member 'BFGPlayerState_Upgrades_HasItemUpgrade::_rUpgradeTag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Upgrades_HasItemUpgrade, ReturnValue) == 0x000008, "Member 'BFGPlayerState_Upgrades_HasItemUpgrade::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Upgrades.IsItemPurchaseable
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Upgrades_IsItemPurchaseable final
{
public:
	struct FGameplayTag                           _rUpgradeTag;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Upgrades_IsItemPurchaseable) == 0x000004, "Wrong alignment on BFGPlayerState_Upgrades_IsItemPurchaseable");
static_assert(sizeof(BFGPlayerState_Upgrades_IsItemPurchaseable) == 0x00000C, "Wrong size on BFGPlayerState_Upgrades_IsItemPurchaseable");
static_assert(offsetof(BFGPlayerState_Upgrades_IsItemPurchaseable, _rUpgradeTag) == 0x000000, "Member 'BFGPlayerState_Upgrades_IsItemPurchaseable::_rUpgradeTag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Upgrades_IsItemPurchaseable, ReturnValue) == 0x000008, "Member 'BFGPlayerState_Upgrades_IsItemPurchaseable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Upgrades.IsItemUnlocked
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Upgrades_IsItemUnlocked final
{
public:
	struct FGameplayTag                           _rItemTag;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Upgrades_IsItemUnlocked) == 0x000004, "Wrong alignment on BFGPlayerState_Upgrades_IsItemUnlocked");
static_assert(sizeof(BFGPlayerState_Upgrades_IsItemUnlocked) == 0x00000C, "Wrong size on BFGPlayerState_Upgrades_IsItemUnlocked");
static_assert(offsetof(BFGPlayerState_Upgrades_IsItemUnlocked, _rItemTag) == 0x000000, "Member 'BFGPlayerState_Upgrades_IsItemUnlocked::_rItemTag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Upgrades_IsItemUnlocked, ReturnValue) == 0x000008, "Member 'BFGPlayerState_Upgrades_IsItemUnlocked::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Upgrades.IsUpgradeable
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Upgrades_IsUpgradeable final
{
public:
	struct FGameplayTag                           _rUpgradeTag;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Upgrades_IsUpgradeable) == 0x000004, "Wrong alignment on BFGPlayerState_Upgrades_IsUpgradeable");
static_assert(sizeof(BFGPlayerState_Upgrades_IsUpgradeable) == 0x00000C, "Wrong size on BFGPlayerState_Upgrades_IsUpgradeable");
static_assert(offsetof(BFGPlayerState_Upgrades_IsUpgradeable, _rUpgradeTag) == 0x000000, "Member 'BFGPlayerState_Upgrades_IsUpgradeable::_rUpgradeTag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Upgrades_IsUpgradeable, ReturnValue) == 0x000008, "Member 'BFGPlayerState_Upgrades_IsUpgradeable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPlayerState_Upgrades.IsUpgraded
// 0x000C (0x000C - 0x0000)
struct BFGPlayerState_Upgrades_IsUpgraded final
{
public:
	struct FGameplayTag                           _rUpgradeTag;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPlayerState_Upgrades_IsUpgraded) == 0x000004, "Wrong alignment on BFGPlayerState_Upgrades_IsUpgraded");
static_assert(sizeof(BFGPlayerState_Upgrades_IsUpgraded) == 0x00000C, "Wrong size on BFGPlayerState_Upgrades_IsUpgraded");
static_assert(offsetof(BFGPlayerState_Upgrades_IsUpgraded, _rUpgradeTag) == 0x000000, "Member 'BFGPlayerState_Upgrades_IsUpgraded::_rUpgradeTag' has a wrong offset!");
static_assert(offsetof(BFGPlayerState_Upgrades_IsUpgraded, ReturnValue) == 0x000008, "Member 'BFGPlayerState_Upgrades_IsUpgraded::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPoolInterface.OnRetrieveFromPool
// 0x0001 (0x0001 - 0x0000)
struct BFGPoolInterface_OnRetrieveFromPool final
{
public:
	bool                                          _bAutomaticallyReactivateComponents;               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPoolInterface_OnRetrieveFromPool) == 0x000001, "Wrong alignment on BFGPoolInterface_OnRetrieveFromPool");
static_assert(sizeof(BFGPoolInterface_OnRetrieveFromPool) == 0x000001, "Wrong size on BFGPoolInterface_OnRetrieveFromPool");
static_assert(offsetof(BFGPoolInterface_OnRetrieveFromPool, _bAutomaticallyReactivateComponents) == 0x000000, "Member 'BFGPoolInterface_OnRetrieveFromPool::_bAutomaticallyReactivateComponents' has a wrong offset!");

// Function BFGCore.BFGPrintToStringInterface.PrintNameToString
// 0x0010 (0x0010 - 0x0000)
struct BFGPrintToStringInterface_PrintNameToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPrintToStringInterface_PrintNameToString) == 0x000008, "Wrong alignment on BFGPrintToStringInterface_PrintNameToString");
static_assert(sizeof(BFGPrintToStringInterface_PrintNameToString) == 0x000010, "Wrong size on BFGPrintToStringInterface_PrintNameToString");
static_assert(offsetof(BFGPrintToStringInterface_PrintNameToString, ReturnValue) == 0x000000, "Member 'BFGPrintToStringInterface_PrintNameToString::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPrintToStringInterface.PrintToString
// 0x0010 (0x0010 - 0x0000)
struct BFGPrintToStringInterface_PrintToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPrintToStringInterface_PrintToString) == 0x000008, "Wrong alignment on BFGPrintToStringInterface_PrintToString");
static_assert(sizeof(BFGPrintToStringInterface_PrintToString) == 0x000010, "Wrong size on BFGPrintToStringInterface_PrintToString");
static_assert(offsetof(BFGPrintToStringInterface_PrintToString, ReturnValue) == 0x000000, "Member 'BFGPrintToStringInterface_PrintToString::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_AnalProbe.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct BFGProjectile_AnalProbe_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_AnalProbe_GetTargetActor) == 0x000008, "Wrong alignment on BFGProjectile_AnalProbe_GetTargetActor");
static_assert(sizeof(BFGProjectile_AnalProbe_GetTargetActor) == 0x000008, "Wrong size on BFGProjectile_AnalProbe_GetTargetActor");
static_assert(offsetof(BFGProjectile_AnalProbe_GetTargetActor, ReturnValue) == 0x000000, "Member 'BFGProjectile_AnalProbe_GetTargetActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_BeamDeathray.OnHitFoliage
// 0x0088 (0x0088 - 0x0000)
struct BFGProjectile_BeamDeathray_OnHitFoliage final
{
public:
	struct FHitResult                             _oHitResult;                                       // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_BeamDeathray_OnHitFoliage) == 0x000004, "Wrong alignment on BFGProjectile_BeamDeathray_OnHitFoliage");
static_assert(sizeof(BFGProjectile_BeamDeathray_OnHitFoliage) == 0x000088, "Wrong size on BFGProjectile_BeamDeathray_OnHitFoliage");
static_assert(offsetof(BFGProjectile_BeamDeathray_OnHitFoliage, _oHitResult) == 0x000000, "Member 'BFGProjectile_BeamDeathray_OnHitFoliage::_oHitResult' has a wrong offset!");

// Function BFGCore.BFGProjectile_BeamDeathray.OnSetOnFire
// 0x0008 (0x0008 - 0x0000)
struct BFGProjectile_BeamDeathray_OnSetOnFire final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_BeamDeathray_OnSetOnFire) == 0x000008, "Wrong alignment on BFGProjectile_BeamDeathray_OnSetOnFire");
static_assert(sizeof(BFGProjectile_BeamDeathray_OnSetOnFire) == 0x000008, "Wrong size on BFGProjectile_BeamDeathray_OnSetOnFire");
static_assert(offsetof(BFGProjectile_BeamDeathray_OnSetOnFire, _pActor) == 0x000000, "Member 'BFGProjectile_BeamDeathray_OnSetOnFire::_pActor' has a wrong offset!");

// Function BFGCore.BFGProjectile_BeamDeathray.OnSpawnDeadzone
// 0x0018 (0x0018 - 0x0000)
struct BFGProjectile_BeamDeathray_OnSpawnDeadzone final
{
public:
	struct FBFGDeathrayZoneData                   _oDeadzone;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_BeamDeathray_OnSpawnDeadzone) == 0x000004, "Wrong alignment on BFGProjectile_BeamDeathray_OnSpawnDeadzone");
static_assert(sizeof(BFGProjectile_BeamDeathray_OnSpawnDeadzone) == 0x000018, "Wrong size on BFGProjectile_BeamDeathray_OnSpawnDeadzone");
static_assert(offsetof(BFGProjectile_BeamDeathray_OnSpawnDeadzone, _oDeadzone) == 0x000000, "Member 'BFGProjectile_BeamDeathray_OnSpawnDeadzone::_oDeadzone' has a wrong offset!");

// Function BFGCore.BFGProjectile_BeamDeathray.OnTickDeadzone
// 0x0018 (0x0018 - 0x0000)
struct BFGProjectile_BeamDeathray_OnTickDeadzone final
{
public:
	struct FBFGDeathrayZoneData                   _oDeadzone;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_BeamDeathray_OnTickDeadzone) == 0x000004, "Wrong alignment on BFGProjectile_BeamDeathray_OnTickDeadzone");
static_assert(sizeof(BFGProjectile_BeamDeathray_OnTickDeadzone) == 0x000018, "Wrong size on BFGProjectile_BeamDeathray_OnTickDeadzone");
static_assert(offsetof(BFGProjectile_BeamDeathray_OnTickDeadzone, _oDeadzone) == 0x000000, "Member 'BFGProjectile_BeamDeathray_OnTickDeadzone::_oDeadzone' has a wrong offset!");

// Function BFGCore.BFGProjectile_BeamDeathray.UpdateBeamOnOcean
// 0x001C (0x001C - 0x0000)
struct BFGProjectile_BeamDeathray_UpdateBeamOnOcean final
{
public:
	struct FVector                                _vTargetLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHitTarget;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _vImpactNormal;                                    // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_BeamDeathray_UpdateBeamOnOcean) == 0x000004, "Wrong alignment on BFGProjectile_BeamDeathray_UpdateBeamOnOcean");
static_assert(sizeof(BFGProjectile_BeamDeathray_UpdateBeamOnOcean) == 0x00001C, "Wrong size on BFGProjectile_BeamDeathray_UpdateBeamOnOcean");
static_assert(offsetof(BFGProjectile_BeamDeathray_UpdateBeamOnOcean, _vTargetLocation) == 0x000000, "Member 'BFGProjectile_BeamDeathray_UpdateBeamOnOcean::_vTargetLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_BeamDeathray_UpdateBeamOnOcean, _bHitTarget) == 0x00000C, "Member 'BFGProjectile_BeamDeathray_UpdateBeamOnOcean::_bHitTarget' has a wrong offset!");
static_assert(offsetof(BFGProjectile_BeamDeathray_UpdateBeamOnOcean, _vImpactNormal) == 0x000010, "Member 'BFGProjectile_BeamDeathray_UpdateBeamOnOcean::_vImpactNormal' has a wrong offset!");

// Function BFGCore.BFGSpinningWidget.AddOption
// 0x0008 (0x0008 - 0x0000)
struct BFGSpinningWidget_AddOption final
{
public:
	class UBFGSpinningWidgetOption*               _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidget_AddOption) == 0x000008, "Wrong alignment on BFGSpinningWidget_AddOption");
static_assert(sizeof(BFGSpinningWidget_AddOption) == 0x000008, "Wrong size on BFGSpinningWidget_AddOption");
static_assert(offsetof(BFGSpinningWidget_AddOption, _pOption) == 0x000000, "Member 'BFGSpinningWidget_AddOption::_pOption' has a wrong offset!");

// Function BFGCore.BFGSpinningWidget.AddOptionToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGSpinningWidget_AddOptionToLayout final
{
public:
	class UBFGSpinningWidgetOption*               _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidget_AddOptionToLayout) == 0x000008, "Wrong alignment on BFGSpinningWidget_AddOptionToLayout");
static_assert(sizeof(BFGSpinningWidget_AddOptionToLayout) == 0x000008, "Wrong size on BFGSpinningWidget_AddOptionToLayout");
static_assert(offsetof(BFGSpinningWidget_AddOptionToLayout, _pOption) == 0x000000, "Member 'BFGSpinningWidget_AddOptionToLayout::_pOption' has a wrong offset!");

// Function BFGCore.BFGSpinningWidget.GetCanvasPanel
// 0x0008 (0x0008 - 0x0000)
struct BFGSpinningWidget_GetCanvasPanel final
{
public:
	class UCanvasPanel*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidget_GetCanvasPanel) == 0x000008, "Wrong alignment on BFGSpinningWidget_GetCanvasPanel");
static_assert(sizeof(BFGSpinningWidget_GetCanvasPanel) == 0x000008, "Wrong size on BFGSpinningWidget_GetCanvasPanel");
static_assert(offsetof(BFGSpinningWidget_GetCanvasPanel, ReturnValue) == 0x000000, "Member 'BFGSpinningWidget_GetCanvasPanel::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSpinningWidget.SetFrameSize
// 0x0008 (0x0008 - 0x0000)
struct BFGSpinningWidget_SetFrameSize final
{
public:
	float                                         _fX;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fY;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidget_SetFrameSize) == 0x000004, "Wrong alignment on BFGSpinningWidget_SetFrameSize");
static_assert(sizeof(BFGSpinningWidget_SetFrameSize) == 0x000008, "Wrong size on BFGSpinningWidget_SetFrameSize");
static_assert(offsetof(BFGSpinningWidget_SetFrameSize, _fX) == 0x000000, "Member 'BFGSpinningWidget_SetFrameSize::_fX' has a wrong offset!");
static_assert(offsetof(BFGSpinningWidget_SetFrameSize, _fY) == 0x000004, "Member 'BFGSpinningWidget_SetFrameSize::_fY' has a wrong offset!");

// Function BFGCore.BFGSpinningWidget.SpinBack
// 0x0004 (0x0004 - 0x0000)
struct BFGSpinningWidget_SpinBack final
{
public:
	int32                                         _iSteps;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidget_SpinBack) == 0x000004, "Wrong alignment on BFGSpinningWidget_SpinBack");
static_assert(sizeof(BFGSpinningWidget_SpinBack) == 0x000004, "Wrong size on BFGSpinningWidget_SpinBack");
static_assert(offsetof(BFGSpinningWidget_SpinBack, _iSteps) == 0x000000, "Member 'BFGSpinningWidget_SpinBack::_iSteps' has a wrong offset!");

// Function BFGCore.BFGSpinningWidget.SpinForward
// 0x0004 (0x0004 - 0x0000)
struct BFGSpinningWidget_SpinForward final
{
public:
	int32                                         _iSteps;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidget_SpinForward) == 0x000004, "Wrong alignment on BFGSpinningWidget_SpinForward");
static_assert(sizeof(BFGSpinningWidget_SpinForward) == 0x000004, "Wrong size on BFGSpinningWidget_SpinForward");
static_assert(offsetof(BFGSpinningWidget_SpinForward, _iSteps) == 0x000000, "Member 'BFGSpinningWidget_SpinForward::_iSteps' has a wrong offset!");

// Function BFGCore.BFGSpinningWidget.GetOption
// 0x0010 (0x0010 - 0x0000)
struct BFGSpinningWidget_GetOption final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGSpinningWidgetOption*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSpinningWidget_GetOption) == 0x000008, "Wrong alignment on BFGSpinningWidget_GetOption");
static_assert(sizeof(BFGSpinningWidget_GetOption) == 0x000010, "Wrong size on BFGSpinningWidget_GetOption");
static_assert(offsetof(BFGSpinningWidget_GetOption, _iIndex) == 0x000000, "Member 'BFGSpinningWidget_GetOption::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGSpinningWidget_GetOption, ReturnValue) == 0x000008, "Member 'BFGSpinningWidget_GetOption::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_MissionGroup.GetState_MissionGroupAborted
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_MissionGroup_GetState_MissionGroupAborted final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_MissionGroup_GetState_MissionGroupAborted) == 0x000004, "Wrong alignment on BFGVariableType_MissionGroup_GetState_MissionGroupAborted");
static_assert(sizeof(BFGVariableType_MissionGroup_GetState_MissionGroupAborted) == 0x000008, "Wrong size on BFGVariableType_MissionGroup_GetState_MissionGroupAborted");
static_assert(offsetof(BFGVariableType_MissionGroup_GetState_MissionGroupAborted, ReturnValue) == 0x000000, "Member 'BFGVariableType_MissionGroup_GetState_MissionGroupAborted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_MissionGroup.GetState_MissionGroupAvailable
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_MissionGroup_GetState_MissionGroupAvailable final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_MissionGroup_GetState_MissionGroupAvailable) == 0x000004, "Wrong alignment on BFGVariableType_MissionGroup_GetState_MissionGroupAvailable");
static_assert(sizeof(BFGVariableType_MissionGroup_GetState_MissionGroupAvailable) == 0x000008, "Wrong size on BFGVariableType_MissionGroup_GetState_MissionGroupAvailable");
static_assert(offsetof(BFGVariableType_MissionGroup_GetState_MissionGroupAvailable, ReturnValue) == 0x000000, "Member 'BFGVariableType_MissionGroup_GetState_MissionGroupAvailable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_MissionGroup.GetState_MissionGroupFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_MissionGroup_GetState_MissionGroupFinished final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_MissionGroup_GetState_MissionGroupFinished) == 0x000004, "Wrong alignment on BFGVariableType_MissionGroup_GetState_MissionGroupFinished");
static_assert(sizeof(BFGVariableType_MissionGroup_GetState_MissionGroupFinished) == 0x000008, "Wrong size on BFGVariableType_MissionGroup_GetState_MissionGroupFinished");
static_assert(offsetof(BFGVariableType_MissionGroup_GetState_MissionGroupFinished, ReturnValue) == 0x000000, "Member 'BFGVariableType_MissionGroup_GetState_MissionGroupFinished::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_MissionGroup.GetState_MissionGroupInProgress
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_MissionGroup_GetState_MissionGroupInProgress final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_MissionGroup_GetState_MissionGroupInProgress) == 0x000004, "Wrong alignment on BFGVariableType_MissionGroup_GetState_MissionGroupInProgress");
static_assert(sizeof(BFGVariableType_MissionGroup_GetState_MissionGroupInProgress) == 0x000008, "Wrong size on BFGVariableType_MissionGroup_GetState_MissionGroupInProgress");
static_assert(offsetof(BFGVariableType_MissionGroup_GetState_MissionGroupInProgress, ReturnValue) == 0x000000, "Member 'BFGVariableType_MissionGroup_GetState_MissionGroupInProgress::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_MissionGroup.GetState_MissionGroupLocked
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_MissionGroup_GetState_MissionGroupLocked final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_MissionGroup_GetState_MissionGroupLocked) == 0x000004, "Wrong alignment on BFGVariableType_MissionGroup_GetState_MissionGroupLocked");
static_assert(sizeof(BFGVariableType_MissionGroup_GetState_MissionGroupLocked) == 0x000008, "Wrong size on BFGVariableType_MissionGroup_GetState_MissionGroupLocked");
static_assert(offsetof(BFGVariableType_MissionGroup_GetState_MissionGroupLocked, ReturnValue) == 0x000000, "Member 'BFGVariableType_MissionGroup_GetState_MissionGroupLocked::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_MissionGroup.GetTypeName_MissionGroup
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_MissionGroup_GetTypeName_MissionGroup final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_MissionGroup_GetTypeName_MissionGroup) == 0x000004, "Wrong alignment on BFGVariableType_MissionGroup_GetTypeName_MissionGroup");
static_assert(sizeof(BFGVariableType_MissionGroup_GetTypeName_MissionGroup) == 0x000008, "Wrong size on BFGVariableType_MissionGroup_GetTypeName_MissionGroup");
static_assert(offsetof(BFGVariableType_MissionGroup_GetTypeName_MissionGroup, ReturnValue) == 0x000000, "Member 'BFGVariableType_MissionGroup_GetTypeName_MissionGroup::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGStreamingLevelManager.OnGameStarted
// 0x0010 (0x0010 - 0x0000)
struct BFGStreamingLevelManager_OnGameStarted final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStreamingLevelManager_OnGameStarted) == 0x000008, "Wrong alignment on BFGStreamingLevelManager_OnGameStarted");
static_assert(sizeof(BFGStreamingLevelManager_OnGameStarted) == 0x000010, "Wrong size on BFGStreamingLevelManager_OnGameStarted");
static_assert(offsetof(BFGStreamingLevelManager_OnGameStarted, _pGameInstance) == 0x000000, "Member 'BFGStreamingLevelManager_OnGameStarted::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGStreamingLevelManager_OnGameStarted, _pWorld) == 0x000008, "Member 'BFGStreamingLevelManager_OnGameStarted::_pWorld' has a wrong offset!");

// Function BFGCore.BFGStreamingLevelManager.OnLatentActionFinished
// 0x0004 (0x0004 - 0x0000)
struct BFGStreamingLevelManager_OnLatentActionFinished final
{
public:
	int32                                         _iLinkId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStreamingLevelManager_OnLatentActionFinished) == 0x000004, "Wrong alignment on BFGStreamingLevelManager_OnLatentActionFinished");
static_assert(sizeof(BFGStreamingLevelManager_OnLatentActionFinished) == 0x000004, "Wrong size on BFGStreamingLevelManager_OnLatentActionFinished");
static_assert(offsetof(BFGStreamingLevelManager_OnLatentActionFinished, _iLinkId) == 0x000000, "Member 'BFGStreamingLevelManager_OnLatentActionFinished::_iLinkId' has a wrong offset!");

// Function BFGCore.BFGStreamingLevelManager.RegisterLevel
// 0x0030 (0x0030 - 0x0000)
struct BFGStreamingLevelManager_RegisterLevel final
{
public:
	TSoftObjectPtr<class UWorld>                  _pLevel;                                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGStreamingLevelHandle*               ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStreamingLevelManager_RegisterLevel) == 0x000008, "Wrong alignment on BFGStreamingLevelManager_RegisterLevel");
static_assert(sizeof(BFGStreamingLevelManager_RegisterLevel) == 0x000030, "Wrong size on BFGStreamingLevelManager_RegisterLevel");
static_assert(offsetof(BFGStreamingLevelManager_RegisterLevel, _pLevel) == 0x000000, "Member 'BFGStreamingLevelManager_RegisterLevel::_pLevel' has a wrong offset!");
static_assert(offsetof(BFGStreamingLevelManager_RegisterLevel, ReturnValue) == 0x000028, "Member 'BFGStreamingLevelManager_RegisterLevel::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGStreamingLevelManager.GameSystem_StreamingLevelLog
// 0x0001 (0x0001 - 0x0000)
struct BFGStreamingLevelManager_GameSystem_StreamingLevelLog final
{
public:
	bool                                          _bAllLevels;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStreamingLevelManager_GameSystem_StreamingLevelLog) == 0x000001, "Wrong alignment on BFGStreamingLevelManager_GameSystem_StreamingLevelLog");
static_assert(sizeof(BFGStreamingLevelManager_GameSystem_StreamingLevelLog) == 0x000001, "Wrong size on BFGStreamingLevelManager_GameSystem_StreamingLevelLog");
static_assert(offsetof(BFGStreamingLevelManager_GameSystem_StreamingLevelLog, _bAllLevels) == 0x000000, "Member 'BFGStreamingLevelManager_GameSystem_StreamingLevelLog::_bAllLevels' has a wrong offset!");

// Function BFGCore.BFGProjectile_MindLinkProtectiveBubble.HandleOnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGProjectile_MindLinkProtectiveBubble_HandleOnDestroyed final
{
public:
	class AActor*                                 _pDestroyedActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_MindLinkProtectiveBubble_HandleOnDestroyed) == 0x000008, "Wrong alignment on BFGProjectile_MindLinkProtectiveBubble_HandleOnDestroyed");
static_assert(sizeof(BFGProjectile_MindLinkProtectiveBubble_HandleOnDestroyed) == 0x000008, "Wrong size on BFGProjectile_MindLinkProtectiveBubble_HandleOnDestroyed");
static_assert(offsetof(BFGProjectile_MindLinkProtectiveBubble_HandleOnDestroyed, _pDestroyedActor) == 0x000000, "Member 'BFGProjectile_MindLinkProtectiveBubble_HandleOnDestroyed::_pDestroyedActor' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.GetGlobalFrameCounter
// 0x0004 (0x0004 - 0x0000)
struct BFGSystemUtils_GetGlobalFrameCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_GetGlobalFrameCounter) == 0x000004, "Wrong alignment on BFGSystemUtils_GetGlobalFrameCounter");
static_assert(sizeof(BFGSystemUtils_GetGlobalFrameCounter) == 0x000004, "Wrong size on BFGSystemUtils_GetGlobalFrameCounter");
static_assert(offsetof(BFGSystemUtils_GetGlobalFrameCounter, ReturnValue) == 0x000000, "Member 'BFGSystemUtils_GetGlobalFrameCounter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.GetUnlocalizedStringFromText
// 0x0028 (0x0028 - 0x0000)
struct BFGSystemUtils_GetUnlocalizedStringFromText final
{
public:
	class FText                                   _tText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_GetUnlocalizedStringFromText) == 0x000008, "Wrong alignment on BFGSystemUtils_GetUnlocalizedStringFromText");
static_assert(sizeof(BFGSystemUtils_GetUnlocalizedStringFromText) == 0x000028, "Wrong size on BFGSystemUtils_GetUnlocalizedStringFromText");
static_assert(offsetof(BFGSystemUtils_GetUnlocalizedStringFromText, _tText) == 0x000000, "Member 'BFGSystemUtils_GetUnlocalizedStringFromText::_tText' has a wrong offset!");
static_assert(offsetof(BFGSystemUtils_GetUnlocalizedStringFromText, ReturnValue) == 0x000018, "Member 'BFGSystemUtils_GetUnlocalizedStringFromText::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.IsDerivedFrom
// 0x0018 (0x0018 - 0x0000)
struct BFGSystemUtils_IsDerivedFrom final
{
public:
	class UObject*                                _pObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 _pClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGSystemUtils_IsDerivedFrom) == 0x000008, "Wrong alignment on BFGSystemUtils_IsDerivedFrom");
static_assert(sizeof(BFGSystemUtils_IsDerivedFrom) == 0x000018, "Wrong size on BFGSystemUtils_IsDerivedFrom");
static_assert(offsetof(BFGSystemUtils_IsDerivedFrom, _pObject) == 0x000000, "Member 'BFGSystemUtils_IsDerivedFrom::_pObject' has a wrong offset!");
static_assert(offsetof(BFGSystemUtils_IsDerivedFrom, _pClass) == 0x000008, "Member 'BFGSystemUtils_IsDerivedFrom::_pClass' has a wrong offset!");
static_assert(offsetof(BFGSystemUtils_IsDerivedFrom, ReturnValue) == 0x000010, "Member 'BFGSystemUtils_IsDerivedFrom::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.IsPlatform_Default30FpsThrottle
// 0x0001 (0x0001 - 0x0000)
struct BFGSystemUtils_IsPlatform_Default30FpsThrottle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_IsPlatform_Default30FpsThrottle) == 0x000001, "Wrong alignment on BFGSystemUtils_IsPlatform_Default30FpsThrottle");
static_assert(sizeof(BFGSystemUtils_IsPlatform_Default30FpsThrottle) == 0x000001, "Wrong size on BFGSystemUtils_IsPlatform_Default30FpsThrottle");
static_assert(offsetof(BFGSystemUtils_IsPlatform_Default30FpsThrottle, ReturnValue) == 0x000000, "Member 'BFGSystemUtils_IsPlatform_Default30FpsThrottle::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.IsPlatform_ScorpioOrPro
// 0x0001 (0x0001 - 0x0000)
struct BFGSystemUtils_IsPlatform_ScorpioOrPro final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_IsPlatform_ScorpioOrPro) == 0x000001, "Wrong alignment on BFGSystemUtils_IsPlatform_ScorpioOrPro");
static_assert(sizeof(BFGSystemUtils_IsPlatform_ScorpioOrPro) == 0x000001, "Wrong size on BFGSystemUtils_IsPlatform_ScorpioOrPro");
static_assert(offsetof(BFGSystemUtils_IsPlatform_ScorpioOrPro, ReturnValue) == 0x000000, "Member 'BFGSystemUtils_IsPlatform_ScorpioOrPro::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.IsPlatformAnyConsole
// 0x0001 (0x0001 - 0x0000)
struct BFGSystemUtils_IsPlatformAnyConsole final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_IsPlatformAnyConsole) == 0x000001, "Wrong alignment on BFGSystemUtils_IsPlatformAnyConsole");
static_assert(sizeof(BFGSystemUtils_IsPlatformAnyConsole) == 0x000001, "Wrong size on BFGSystemUtils_IsPlatformAnyConsole");
static_assert(offsetof(BFGSystemUtils_IsPlatformAnyConsole, ReturnValue) == 0x000000, "Member 'BFGSystemUtils_IsPlatformAnyConsole::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.IsPlatformPS4
// 0x0001 (0x0001 - 0x0000)
struct BFGSystemUtils_IsPlatformPS4 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_IsPlatformPS4) == 0x000001, "Wrong alignment on BFGSystemUtils_IsPlatformPS4");
static_assert(sizeof(BFGSystemUtils_IsPlatformPS4) == 0x000001, "Wrong size on BFGSystemUtils_IsPlatformPS4");
static_assert(offsetof(BFGSystemUtils_IsPlatformPS4, ReturnValue) == 0x000000, "Member 'BFGSystemUtils_IsPlatformPS4::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.IsPlatformPS5
// 0x0001 (0x0001 - 0x0000)
struct BFGSystemUtils_IsPlatformPS5 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_IsPlatformPS5) == 0x000001, "Wrong alignment on BFGSystemUtils_IsPlatformPS5");
static_assert(sizeof(BFGSystemUtils_IsPlatformPS5) == 0x000001, "Wrong size on BFGSystemUtils_IsPlatformPS5");
static_assert(offsetof(BFGSystemUtils_IsPlatformPS5, ReturnValue) == 0x000000, "Member 'BFGSystemUtils_IsPlatformPS5::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.IsPlatformWindows
// 0x0001 (0x0001 - 0x0000)
struct BFGSystemUtils_IsPlatformWindows final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_IsPlatformWindows) == 0x000001, "Wrong alignment on BFGSystemUtils_IsPlatformWindows");
static_assert(sizeof(BFGSystemUtils_IsPlatformWindows) == 0x000001, "Wrong size on BFGSystemUtils_IsPlatformWindows");
static_assert(offsetof(BFGSystemUtils_IsPlatformWindows, ReturnValue) == 0x000000, "Member 'BFGSystemUtils_IsPlatformWindows::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSystemUtils.IsPlatformXbox
// 0x0001 (0x0001 - 0x0000)
struct BFGSystemUtils_IsPlatformXbox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSystemUtils_IsPlatformXbox) == 0x000001, "Wrong alignment on BFGSystemUtils_IsPlatformXbox");
static_assert(sizeof(BFGSystemUtils_IsPlatformXbox) == 0x000001, "Wrong size on BFGSystemUtils_IsPlatformXbox");
static_assert(offsetof(BFGSystemUtils_IsPlatformXbox, ReturnValue) == 0x000000, "Member 'BFGSystemUtils_IsPlatformXbox::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_NasalProbe.AttachToPlayer
// 0x0088 (0x0088 - 0x0000)
struct BFGProjectile_NasalProbe_AttachToPlayer final
{
public:
	struct FHitResult                             _vHitResult;                                       // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_NasalProbe_AttachToPlayer) == 0x000004, "Wrong alignment on BFGProjectile_NasalProbe_AttachToPlayer");
static_assert(sizeof(BFGProjectile_NasalProbe_AttachToPlayer) == 0x000088, "Wrong size on BFGProjectile_NasalProbe_AttachToPlayer");
static_assert(offsetof(BFGProjectile_NasalProbe_AttachToPlayer, _vHitResult) == 0x000000, "Member 'BFGProjectile_NasalProbe_AttachToPlayer::_vHitResult' has a wrong offset!");

// Function BFGCore.BFGProjectile_NasalProbe.OnNasalProbeImpact
// 0x0088 (0x0088 - 0x0000)
struct BFGProjectile_NasalProbe_OnNasalProbeImpact final
{
public:
	struct FHitResult                             _vHitResult;                                       // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_NasalProbe_OnNasalProbeImpact) == 0x000004, "Wrong alignment on BFGProjectile_NasalProbe_OnNasalProbeImpact");
static_assert(sizeof(BFGProjectile_NasalProbe_OnNasalProbeImpact) == 0x000088, "Wrong size on BFGProjectile_NasalProbe_OnNasalProbeImpact");
static_assert(offsetof(BFGProjectile_NasalProbe_OnNasalProbeImpact, _vHitResult) == 0x000000, "Member 'BFGProjectile_NasalProbe_OnNasalProbeImpact::_vHitResult' has a wrong offset!");

// Function BFGCore.BFGProjectile_NasalProbe.OnPlayerDashed
// 0x0008 (0x0008 - 0x0000)
struct BFGProjectile_NasalProbe_OnPlayerDashed final
{
public:
	class UBFGActorComponent_Dash*                _pDashComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_NasalProbe_OnPlayerDashed) == 0x000008, "Wrong alignment on BFGProjectile_NasalProbe_OnPlayerDashed");
static_assert(sizeof(BFGProjectile_NasalProbe_OnPlayerDashed) == 0x000008, "Wrong size on BFGProjectile_NasalProbe_OnPlayerDashed");
static_assert(offsetof(BFGProjectile_NasalProbe_OnPlayerDashed, _pDashComponent) == 0x000000, "Member 'BFGProjectile_NasalProbe_OnPlayerDashed::_pDashComponent' has a wrong offset!");

// Function BFGCore.BFGProjectile_QuantumDeconstructor.GetCurrentWaveCounter
// 0x0004 (0x0004 - 0x0000)
struct BFGProjectile_QuantumDeconstructor_GetCurrentWaveCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_QuantumDeconstructor_GetCurrentWaveCounter) == 0x000004, "Wrong alignment on BFGProjectile_QuantumDeconstructor_GetCurrentWaveCounter");
static_assert(sizeof(BFGProjectile_QuantumDeconstructor_GetCurrentWaveCounter) == 0x000004, "Wrong size on BFGProjectile_QuantumDeconstructor_GetCurrentWaveCounter");
static_assert(offsetof(BFGProjectile_QuantumDeconstructor_GetCurrentWaveCounter, ReturnValue) == 0x000000, "Member 'BFGProjectile_QuantumDeconstructor_GetCurrentWaveCounter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_QuantumDeconstructor.GetScaledMaximumExplosionRadius
// 0x0004 (0x0004 - 0x0000)
struct BFGProjectile_QuantumDeconstructor_GetScaledMaximumExplosionRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_QuantumDeconstructor_GetScaledMaximumExplosionRadius) == 0x000004, "Wrong alignment on BFGProjectile_QuantumDeconstructor_GetScaledMaximumExplosionRadius");
static_assert(sizeof(BFGProjectile_QuantumDeconstructor_GetScaledMaximumExplosionRadius) == 0x000004, "Wrong size on BFGProjectile_QuantumDeconstructor_GetScaledMaximumExplosionRadius");
static_assert(offsetof(BFGProjectile_QuantumDeconstructor_GetScaledMaximumExplosionRadius, ReturnValue) == 0x000000, "Member 'BFGProjectile_QuantumDeconstructor_GetScaledMaximumExplosionRadius::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGProjectile_SonicBoom.OnInnerExplosion
// 0x0010 (0x0010 - 0x0000)
struct BFGProjectile_SonicBoom_OnInnerExplosion final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_SonicBoom_OnInnerExplosion) == 0x000004, "Wrong alignment on BFGProjectile_SonicBoom_OnInnerExplosion");
static_assert(sizeof(BFGProjectile_SonicBoom_OnInnerExplosion) == 0x000010, "Wrong size on BFGProjectile_SonicBoom_OnInnerExplosion");
static_assert(offsetof(BFGProjectile_SonicBoom_OnInnerExplosion, _vLocation) == 0x000000, "Member 'BFGProjectile_SonicBoom_OnInnerExplosion::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_SonicBoom_OnInnerExplosion, _fRadius) == 0x00000C, "Member 'BFGProjectile_SonicBoom_OnInnerExplosion::_fRadius' has a wrong offset!");

// Function BFGCore.BFGProjectile_SonicBoom.OnVolumeControl11Explosion
// 0x0010 (0x0010 - 0x0000)
struct BFGProjectile_SonicBoom_OnVolumeControl11Explosion final
{
public:
	struct FVector                                _vLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGProjectile_SonicBoom_OnVolumeControl11Explosion) == 0x000004, "Wrong alignment on BFGProjectile_SonicBoom_OnVolumeControl11Explosion");
static_assert(sizeof(BFGProjectile_SonicBoom_OnVolumeControl11Explosion) == 0x000010, "Wrong size on BFGProjectile_SonicBoom_OnVolumeControl11Explosion");
static_assert(offsetof(BFGProjectile_SonicBoom_OnVolumeControl11Explosion, _vLocation) == 0x000000, "Member 'BFGProjectile_SonicBoom_OnVolumeControl11Explosion::_vLocation' has a wrong offset!");
static_assert(offsetof(BFGProjectile_SonicBoom_OnVolumeControl11Explosion, _fRadius) == 0x00000C, "Member 'BFGProjectile_SonicBoom_OnVolumeControl11Explosion::_fRadius' has a wrong offset!");

// Function BFGCore.BFGPropActor.ActivateAttachedToActor
// 0x0010 (0x0010 - 0x0000)
struct BFGPropActor_ActivateAttachedToActor final
{
public:
	class AActor*                                 _pAttachTo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _boneName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPropActor_ActivateAttachedToActor) == 0x000008, "Wrong alignment on BFGPropActor_ActivateAttachedToActor");
static_assert(sizeof(BFGPropActor_ActivateAttachedToActor) == 0x000010, "Wrong size on BFGPropActor_ActivateAttachedToActor");
static_assert(offsetof(BFGPropActor_ActivateAttachedToActor, _pAttachTo) == 0x000000, "Member 'BFGPropActor_ActivateAttachedToActor::_pAttachTo' has a wrong offset!");
static_assert(offsetof(BFGPropActor_ActivateAttachedToActor, _boneName) == 0x000008, "Member 'BFGPropActor_ActivateAttachedToActor::_boneName' has a wrong offset!");

// Function BFGCore.BFGPropActor.OnInteractAnimationChanged
// 0x00C0 (0x00C0 - 0x0000)
struct BFGPropActor_OnInteractAnimationChanged final
{
public:
	struct FBFGInteractAnimationData              _newData;                                          // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _oldData;                                          // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPropActor_OnInteractAnimationChanged) == 0x000008, "Wrong alignment on BFGPropActor_OnInteractAnimationChanged");
static_assert(sizeof(BFGPropActor_OnInteractAnimationChanged) == 0x0000C0, "Wrong size on BFGPropActor_OnInteractAnimationChanged");
static_assert(offsetof(BFGPropActor_OnInteractAnimationChanged, _newData) == 0x000000, "Member 'BFGPropActor_OnInteractAnimationChanged::_newData' has a wrong offset!");
static_assert(offsetof(BFGPropActor_OnInteractAnimationChanged, _oldData) == 0x000060, "Member 'BFGPropActor_OnInteractAnimationChanged::_oldData' has a wrong offset!");

// Function BFGCore.BFGPropActor.OnInteractAnimationChangedCallback
// 0x00D0 (0x00D0 - 0x0000)
struct BFGPropActor_OnInteractAnimationChangedCallback final
{
public:
	TScriptInterface<class IBFGInteractAnimationPlayerInterface> _pInteractAnimationPlayer;                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _newData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _oldData;                                          // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPropActor_OnInteractAnimationChangedCallback) == 0x000008, "Wrong alignment on BFGPropActor_OnInteractAnimationChangedCallback");
static_assert(sizeof(BFGPropActor_OnInteractAnimationChangedCallback) == 0x0000D0, "Wrong size on BFGPropActor_OnInteractAnimationChangedCallback");
static_assert(offsetof(BFGPropActor_OnInteractAnimationChangedCallback, _pInteractAnimationPlayer) == 0x000000, "Member 'BFGPropActor_OnInteractAnimationChangedCallback::_pInteractAnimationPlayer' has a wrong offset!");
static_assert(offsetof(BFGPropActor_OnInteractAnimationChangedCallback, _newData) == 0x000010, "Member 'BFGPropActor_OnInteractAnimationChangedCallback::_newData' has a wrong offset!");
static_assert(offsetof(BFGPropActor_OnInteractAnimationChangedCallback, _oldData) == 0x000070, "Member 'BFGPropActor_OnInteractAnimationChangedCallback::_oldData' has a wrong offset!");

// Function BFGCore.BFGPropActor.OnSwappedToDroppedObject
// 0x0008 (0x0008 - 0x0000)
struct BFGPropActor_OnSwappedToDroppedObject final
{
public:
	class ABFGObject_StaticWithPhysics*           _pPhysicsObject;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPropActor_OnSwappedToDroppedObject) == 0x000008, "Wrong alignment on BFGPropActor_OnSwappedToDroppedObject");
static_assert(sizeof(BFGPropActor_OnSwappedToDroppedObject) == 0x000008, "Wrong size on BFGPropActor_OnSwappedToDroppedObject");
static_assert(offsetof(BFGPropActor_OnSwappedToDroppedObject, _pPhysicsObject) == 0x000000, "Member 'BFGPropActor_OnSwappedToDroppedObject::_pPhysicsObject' has a wrong offset!");

// Function BFGCore.BFGPropActor.OnSwitchedToHighRes
// 0x0060 (0x0060 - 0x0000)
struct BFGPropActor_OnSwitchedToHighRes final
{
public:
	struct FBFGInteractAnimationData              _animationData;                                    // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPropActor_OnSwitchedToHighRes) == 0x000008, "Wrong alignment on BFGPropActor_OnSwitchedToHighRes");
static_assert(sizeof(BFGPropActor_OnSwitchedToHighRes) == 0x000060, "Wrong size on BFGPropActor_OnSwitchedToHighRes");
static_assert(offsetof(BFGPropActor_OnSwitchedToHighRes, _animationData) == 0x000000, "Member 'BFGPropActor_OnSwitchedToHighRes::_animationData' has a wrong offset!");

// Function BFGCore.BFGPropActor.GetInteractAnimationPlayer
// 0x0010 (0x0010 - 0x0000)
struct BFGPropActor_GetInteractAnimationPlayer final
{
public:
	TScriptInterface<class IBFGInteractAnimationPlayerInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPropActor_GetInteractAnimationPlayer) == 0x000008, "Wrong alignment on BFGPropActor_GetInteractAnimationPlayer");
static_assert(sizeof(BFGPropActor_GetInteractAnimationPlayer) == 0x000010, "Wrong size on BFGPropActor_GetInteractAnimationPlayer");
static_assert(offsetof(BFGPropActor_GetInteractAnimationPlayer, ReturnValue) == 0x000000, "Member 'BFGPropActor_GetInteractAnimationPlayer::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_Persistent.OnVariableChanged
// 0x0018 (0x0018 - 0x0000)
struct BFGScriptedSequence_Persistent_OnVariableChanged final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _oldValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _newValue;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_Persistent_OnVariableChanged) == 0x000008, "Wrong alignment on BFGScriptedSequence_Persistent_OnVariableChanged");
static_assert(sizeof(BFGScriptedSequence_Persistent_OnVariableChanged) == 0x000018, "Wrong size on BFGScriptedSequence_Persistent_OnVariableChanged");
static_assert(offsetof(BFGScriptedSequence_Persistent_OnVariableChanged, _pVarMirror) == 0x000000, "Member 'BFGScriptedSequence_Persistent_OnVariableChanged::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_Persistent_OnVariableChanged, _pVariable) == 0x000008, "Member 'BFGScriptedSequence_Persistent_OnVariableChanged::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_Persistent_OnVariableChanged, _oldValue) == 0x000010, "Member 'BFGScriptedSequence_Persistent_OnVariableChanged::_oldValue' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_Persistent_OnVariableChanged, _newValue) == 0x000014, "Member 'BFGScriptedSequence_Persistent_OnVariableChanged::_newValue' has a wrong offset!");

// Function BFGCore.BFGPsychokinesisTargetInterface.IsValidTarget
// 0x0001 (0x0001 - 0x0000)
struct BFGPsychokinesisTargetInterface_IsValidTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPsychokinesisTargetInterface_IsValidTarget) == 0x000001, "Wrong alignment on BFGPsychokinesisTargetInterface_IsValidTarget");
static_assert(sizeof(BFGPsychokinesisTargetInterface_IsValidTarget) == 0x000001, "Wrong size on BFGPsychokinesisTargetInterface_IsValidTarget");
static_assert(offsetof(BFGPsychokinesisTargetInterface_IsValidTarget, ReturnValue) == 0x000000, "Member 'BFGPsychokinesisTargetInterface_IsValidTarget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPsychokinesisTargetInterface.PKAttachTo
// 0x0008 (0x0008 - 0x0000)
struct BFGPsychokinesisTargetInterface_PKAttachTo final
{
public:
	class UPhysicsHandleComponent*                _pComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPsychokinesisTargetInterface_PKAttachTo) == 0x000008, "Wrong alignment on BFGPsychokinesisTargetInterface_PKAttachTo");
static_assert(sizeof(BFGPsychokinesisTargetInterface_PKAttachTo) == 0x000008, "Wrong size on BFGPsychokinesisTargetInterface_PKAttachTo");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKAttachTo, _pComponent) == 0x000000, "Member 'BFGPsychokinesisTargetInterface_PKAttachTo::_pComponent' has a wrong offset!");

// Function BFGCore.BFGPsychokinesisTargetInterface.PKDetached
// 0x0001 (0x0001 - 0x0000)
struct BFGPsychokinesisTargetInterface_PKDetached final
{
public:
	bool                                          _bForceStopped;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPsychokinesisTargetInterface_PKDetached) == 0x000001, "Wrong alignment on BFGPsychokinesisTargetInterface_PKDetached");
static_assert(sizeof(BFGPsychokinesisTargetInterface_PKDetached) == 0x000001, "Wrong size on BFGPsychokinesisTargetInterface_PKDetached");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKDetached, _bForceStopped) == 0x000000, "Member 'BFGPsychokinesisTargetInterface_PKDetached::_bForceStopped' has a wrong offset!");

// Function BFGCore.BFGPsychokinesisTargetInterface.PKGetDistanceToHolder
// 0x0004 (0x0004 - 0x0000)
struct BFGPsychokinesisTargetInterface_PKGetDistanceToHolder final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPsychokinesisTargetInterface_PKGetDistanceToHolder) == 0x000004, "Wrong alignment on BFGPsychokinesisTargetInterface_PKGetDistanceToHolder");
static_assert(sizeof(BFGPsychokinesisTargetInterface_PKGetDistanceToHolder) == 0x000004, "Wrong size on BFGPsychokinesisTargetInterface_PKGetDistanceToHolder");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKGetDistanceToHolder, ReturnValue) == 0x000000, "Member 'BFGPsychokinesisTargetInterface_PKGetDistanceToHolder::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPsychokinesisTargetInterface.PKGetSpringArmOffset
// 0x000C (0x000C - 0x0000)
struct BFGPsychokinesisTargetInterface_PKGetSpringArmOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPsychokinesisTargetInterface_PKGetSpringArmOffset) == 0x000004, "Wrong alignment on BFGPsychokinesisTargetInterface_PKGetSpringArmOffset");
static_assert(sizeof(BFGPsychokinesisTargetInterface_PKGetSpringArmOffset) == 0x00000C, "Wrong size on BFGPsychokinesisTargetInterface_PKGetSpringArmOffset");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKGetSpringArmOffset, ReturnValue) == 0x000000, "Member 'BFGPsychokinesisTargetInterface_PKGetSpringArmOffset::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGPsychokinesisTargetInterface.PKSetCollisionsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGPsychokinesisTargetInterface_PKSetCollisionsEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGPsychokinesisTargetInterface_PKSetCollisionsEnabled) == 0x000001, "Wrong alignment on BFGPsychokinesisTargetInterface_PKSetCollisionsEnabled");
static_assert(sizeof(BFGPsychokinesisTargetInterface_PKSetCollisionsEnabled) == 0x000001, "Wrong size on BFGPsychokinesisTargetInterface_PKSetCollisionsEnabled");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKSetCollisionsEnabled, _bEnabled) == 0x000000, "Member 'BFGPsychokinesisTargetInterface_PKSetCollisionsEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGPsychokinesisTargetInterface.PKThrowOverride
// 0x0020 (0x0020 - 0x0000)
struct BFGPsychokinesisTargetInterface_PKThrowOverride final
{
public:
	class UBFGMentalAbility_Psychokinesis*        _pAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _rDirection;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fCurrentThrowCharge;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fMaxThrowCharge;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGPsychokinesisTargetInterface_PKThrowOverride) == 0x000008, "Wrong alignment on BFGPsychokinesisTargetInterface_PKThrowOverride");
static_assert(sizeof(BFGPsychokinesisTargetInterface_PKThrowOverride) == 0x000020, "Wrong size on BFGPsychokinesisTargetInterface_PKThrowOverride");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKThrowOverride, _pAbility) == 0x000000, "Member 'BFGPsychokinesisTargetInterface_PKThrowOverride::_pAbility' has a wrong offset!");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKThrowOverride, _rDirection) == 0x000008, "Member 'BFGPsychokinesisTargetInterface_PKThrowOverride::_rDirection' has a wrong offset!");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKThrowOverride, _fCurrentThrowCharge) == 0x000014, "Member 'BFGPsychokinesisTargetInterface_PKThrowOverride::_fCurrentThrowCharge' has a wrong offset!");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKThrowOverride, _fMaxThrowCharge) == 0x000018, "Member 'BFGPsychokinesisTargetInterface_PKThrowOverride::_fMaxThrowCharge' has a wrong offset!");
static_assert(offsetof(BFGPsychokinesisTargetInterface_PKThrowOverride, ReturnValue) == 0x00001C, "Member 'BFGPsychokinesisTargetInterface_PKThrowOverride::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Challenge.GetChallengeAsset
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_Challenge_GetChallengeAsset final
{
public:
	class UBFGDataAsset_ChallengeInfo*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Challenge_GetChallengeAsset) == 0x000008, "Wrong alignment on BFGQuest_Challenge_GetChallengeAsset");
static_assert(sizeof(BFGQuest_Challenge_GetChallengeAsset) == 0x000008, "Wrong size on BFGQuest_Challenge_GetChallengeAsset");
static_assert(offsetof(BFGQuest_Challenge_GetChallengeAsset, ReturnValue) == 0x000000, "Member 'BFGQuest_Challenge_GetChallengeAsset::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Challenge.GetCurrentScore
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_Challenge_GetCurrentScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Challenge_GetCurrentScore) == 0x000004, "Wrong alignment on BFGQuest_Challenge_GetCurrentScore");
static_assert(sizeof(BFGQuest_Challenge_GetCurrentScore) == 0x000004, "Wrong size on BFGQuest_Challenge_GetCurrentScore");
static_assert(offsetof(BFGQuest_Challenge_GetCurrentScore, ReturnValue) == 0x000000, "Member 'BFGQuest_Challenge_GetCurrentScore::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Challenge.GetHighScore
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_Challenge_GetHighScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Challenge_GetHighScore) == 0x000004, "Wrong alignment on BFGQuest_Challenge_GetHighScore");
static_assert(sizeof(BFGQuest_Challenge_GetHighScore) == 0x000004, "Wrong size on BFGQuest_Challenge_GetHighScore");
static_assert(offsetof(BFGQuest_Challenge_GetHighScore, ReturnValue) == 0x000000, "Member 'BFGQuest_Challenge_GetHighScore::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Challenge.GetHighScoreOld
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_Challenge_GetHighScoreOld final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Challenge_GetHighScoreOld) == 0x000004, "Wrong alignment on BFGQuest_Challenge_GetHighScoreOld");
static_assert(sizeof(BFGQuest_Challenge_GetHighScoreOld) == 0x000004, "Wrong size on BFGQuest_Challenge_GetHighScoreOld");
static_assert(offsetof(BFGQuest_Challenge_GetHighScoreOld, ReturnValue) == 0x000000, "Member 'BFGQuest_Challenge_GetHighScoreOld::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Challenge.GetReward
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_Challenge_GetReward final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Challenge_GetReward) == 0x000004, "Wrong alignment on BFGQuest_Challenge_GetReward");
static_assert(sizeof(BFGQuest_Challenge_GetReward) == 0x000004, "Wrong size on BFGQuest_Challenge_GetReward");
static_assert(offsetof(BFGQuest_Challenge_GetReward, ReturnValue) == 0x000000, "Member 'BFGQuest_Challenge_GetReward::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskGotoStandby.CreateAndAddScriptedSequence_TaskGotoStandby
// 0x0010 (0x0010 - 0x0000)
struct BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShouldNotFinishSequenceTaskAutomatically;        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby");
static_assert(sizeof(BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby) == 0x000010, "Wrong size on BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby");
static_assert(offsetof(BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby, _bShouldNotFinishSequenceTaskAutomatically) == 0x000008, "Member 'BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby::_bShouldNotFinishSequenceTaskAutomatically' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby, ReturnValue) == 0x000009, "Member 'BFGScriptedSequence_TaskGotoStandby_CreateAndAddScriptedSequence_TaskGotoStandby::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskVehicleStop.CreateAndAddScriptedSequence_TaskVehicleStop
// 0x0020 (0x0020 - 0x0000)
struct BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGScriptedSequence_TaskVehicleStop_Param _param;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop");
static_assert(sizeof(BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop) == 0x000020, "Wrong size on BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop");
static_assert(offsetof(BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop, _param) == 0x000008, "Member 'BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop::_param' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop, ReturnValue) == 0x000018, "Member 'BFGScriptedSequence_TaskVehicleStop_CreateAndAddScriptedSequence_TaskVehicleStop::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementCollect.GetSparseQuestCounterVariables
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_ElementCollect_GetSparseQuestCounterVariables final
{
public:
	TArray<class UBFGVariable*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementCollect_GetSparseQuestCounterVariables) == 0x000008, "Wrong alignment on BFGQuest_ElementCollect_GetSparseQuestCounterVariables");
static_assert(sizeof(BFGQuest_ElementCollect_GetSparseQuestCounterVariables) == 0x000010, "Wrong size on BFGQuest_ElementCollect_GetSparseQuestCounterVariables");
static_assert(offsetof(BFGQuest_ElementCollect_GetSparseQuestCounterVariables, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementCollect_GetSparseQuestCounterVariables::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementKill.GetSparseQuestCounterVariables
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_ElementKill_GetSparseQuestCounterVariables final
{
public:
	TArray<class UBFGVariable*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementKill_GetSparseQuestCounterVariables) == 0x000008, "Wrong alignment on BFGQuest_ElementKill_GetSparseQuestCounterVariables");
static_assert(sizeof(BFGQuest_ElementKill_GetSparseQuestCounterVariables) == 0x000010, "Wrong size on BFGQuest_ElementKill_GetSparseQuestCounterVariables");
static_assert(offsetof(BFGQuest_ElementKill_GetSparseQuestCounterVariables, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementKill_GetSparseQuestCounterVariables::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementMentalAbility.GetSparseQuestCounterVariables
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_ElementMentalAbility_GetSparseQuestCounterVariables final
{
public:
	TArray<class UBFGVariable*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementMentalAbility_GetSparseQuestCounterVariables) == 0x000008, "Wrong alignment on BFGQuest_ElementMentalAbility_GetSparseQuestCounterVariables");
static_assert(sizeof(BFGQuest_ElementMentalAbility_GetSparseQuestCounterVariables) == 0x000010, "Wrong size on BFGQuest_ElementMentalAbility_GetSparseQuestCounterVariables");
static_assert(offsetof(BFGQuest_ElementMentalAbility_GetSparseQuestCounterVariables, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementMentalAbility_GetSparseQuestCounterVariables::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementNarrativeSequence.GetAssessments
// 0x0050 (0x0050 - 0x0000)
struct BFGQuest_ElementNarrativeSequence_GetAssessments final
{
public:
	TMap<class FName, EUBFGNarrativeSequence_Assessment> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementNarrativeSequence_GetAssessments) == 0x000008, "Wrong alignment on BFGQuest_ElementNarrativeSequence_GetAssessments");
static_assert(sizeof(BFGQuest_ElementNarrativeSequence_GetAssessments) == 0x000050, "Wrong size on BFGQuest_ElementNarrativeSequence_GetAssessments");
static_assert(offsetof(BFGQuest_ElementNarrativeSequence_GetAssessments, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementNarrativeSequence_GetAssessments::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementNarrativeSequence.GetNumStrikes
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_ElementNarrativeSequence_GetNumStrikes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementNarrativeSequence_GetNumStrikes) == 0x000004, "Wrong alignment on BFGQuest_ElementNarrativeSequence_GetNumStrikes");
static_assert(sizeof(BFGQuest_ElementNarrativeSequence_GetNumStrikes) == 0x000004, "Wrong size on BFGQuest_ElementNarrativeSequence_GetNumStrikes");
static_assert(offsetof(BFGQuest_ElementNarrativeSequence_GetNumStrikes, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementNarrativeSequence_GetNumStrikes::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementProximity.GetSubgoalLimits
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_ElementProximity_GetSubgoalLimits final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementProximity_GetSubgoalLimits) == 0x000008, "Wrong alignment on BFGQuest_ElementProximity_GetSubgoalLimits");
static_assert(sizeof(BFGQuest_ElementProximity_GetSubgoalLimits) == 0x000010, "Wrong size on BFGQuest_ElementProximity_GetSubgoalLimits");
static_assert(offsetof(BFGQuest_ElementProximity_GetSubgoalLimits, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementProximity_GetSubgoalLimits::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementProximity.GetTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_ElementProximity_GetTargetDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementProximity_GetTargetDistance) == 0x000004, "Wrong alignment on BFGQuest_ElementProximity_GetTargetDistance");
static_assert(sizeof(BFGQuest_ElementProximity_GetTargetDistance) == 0x000004, "Wrong size on BFGQuest_ElementProximity_GetTargetDistance");
static_assert(offsetof(BFGQuest_ElementProximity_GetTargetDistance, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementProximity_GetTargetDistance::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGUIInputDeviceTracker.ActionBool__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BFGUIInputDeviceTracker_ActionBool__DelegateSignature final
{
public:
	bool                                          _bValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUIInputDeviceTracker_ActionBool__DelegateSignature) == 0x000001, "Wrong alignment on BFGUIInputDeviceTracker_ActionBool__DelegateSignature");
static_assert(sizeof(BFGUIInputDeviceTracker_ActionBool__DelegateSignature) == 0x000001, "Wrong size on BFGUIInputDeviceTracker_ActionBool__DelegateSignature");
static_assert(offsetof(BFGUIInputDeviceTracker_ActionBool__DelegateSignature, _bValue) == 0x000000, "Member 'BFGUIInputDeviceTracker_ActionBool__DelegateSignature::_bValue' has a wrong offset!");

// Function BFGCore.BFGUIInputDeviceTracker.GetCurrentInputDeviceType
// 0x0004 (0x0004 - 0x0000)
struct BFGUIInputDeviceTracker_GetCurrentInputDeviceType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUIInputDeviceTracker_GetCurrentInputDeviceType) == 0x000004, "Wrong alignment on BFGUIInputDeviceTracker_GetCurrentInputDeviceType");
static_assert(sizeof(BFGUIInputDeviceTracker_GetCurrentInputDeviceType) == 0x000004, "Wrong size on BFGUIInputDeviceTracker_GetCurrentInputDeviceType");
static_assert(offsetof(BFGUIInputDeviceTracker_GetCurrentInputDeviceType, ReturnValue) == 0x000000, "Member 'BFGUIInputDeviceTracker_GetCurrentInputDeviceType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUIInputDeviceTracker.IsGamepadCurrentDevice
// 0x0001 (0x0001 - 0x0000)
struct BFGUIInputDeviceTracker_IsGamepadCurrentDevice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUIInputDeviceTracker_IsGamepadCurrentDevice) == 0x000001, "Wrong alignment on BFGUIInputDeviceTracker_IsGamepadCurrentDevice");
static_assert(sizeof(BFGUIInputDeviceTracker_IsGamepadCurrentDevice) == 0x000001, "Wrong size on BFGUIInputDeviceTracker_IsGamepadCurrentDevice");
static_assert(offsetof(BFGUIInputDeviceTracker_IsGamepadCurrentDevice, ReturnValue) == 0x000000, "Member 'BFGUIInputDeviceTracker_IsGamepadCurrentDevice::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUIInputDeviceTracker.OnWindowModeCommand
// 0x0001 (0x0001 - 0x0000)
struct BFGUIInputDeviceTracker_OnWindowModeCommand final
{
public:
	bool                                          _bIsFullscreen;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUIInputDeviceTracker_OnWindowModeCommand) == 0x000001, "Wrong alignment on BFGUIInputDeviceTracker_OnWindowModeCommand");
static_assert(sizeof(BFGUIInputDeviceTracker_OnWindowModeCommand) == 0x000001, "Wrong size on BFGUIInputDeviceTracker_OnWindowModeCommand");
static_assert(offsetof(BFGUIInputDeviceTracker_OnWindowModeCommand, _bIsFullscreen) == 0x000000, "Member 'BFGUIInputDeviceTracker_OnWindowModeCommand::_bIsFullscreen' has a wrong offset!");

// Function BFGCore.BFGQuest_ElementWaitTime.GetElapsedTimeSinceStart
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_ElementWaitTime_GetElapsedTimeSinceStart final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_ElementWaitTime_GetElapsedTimeSinceStart) == 0x000004, "Wrong alignment on BFGQuest_ElementWaitTime_GetElapsedTimeSinceStart");
static_assert(sizeof(BFGQuest_ElementWaitTime_GetElapsedTimeSinceStart) == 0x000004, "Wrong size on BFGQuest_ElementWaitTime_GetElapsedTimeSinceStart");
static_assert(offsetof(BFGQuest_ElementWaitTime_GetElapsedTimeSinceStart, ReturnValue) == 0x000000, "Member 'BFGQuest_ElementWaitTime_GetElapsedTimeSinceStart::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.CheatCompleteChallenge
// 0x0004 (0x0004 - 0x0000)
struct BFGQuest_Manager_CheatCompleteChallenge final
{
public:
	int32                                         _iStarRating;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_CheatCompleteChallenge) == 0x000004, "Wrong alignment on BFGQuest_Manager_CheatCompleteChallenge");
static_assert(sizeof(BFGQuest_Manager_CheatCompleteChallenge) == 0x000004, "Wrong size on BFGQuest_Manager_CheatCompleteChallenge");
static_assert(offsetof(BFGQuest_Manager_CheatCompleteChallenge, _iStarRating) == 0x000000, "Member 'BFGQuest_Manager_CheatCompleteChallenge::_iStarRating' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.DetermineIfOpenWorld
// 0x0001 (0x0001 - 0x0000)
struct BFGQuest_Manager_DetermineIfOpenWorld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_DetermineIfOpenWorld) == 0x000001, "Wrong alignment on BFGQuest_Manager_DetermineIfOpenWorld");
static_assert(sizeof(BFGQuest_Manager_DetermineIfOpenWorld) == 0x000001, "Wrong size on BFGQuest_Manager_DetermineIfOpenWorld");
static_assert(offsetof(BFGQuest_Manager_DetermineIfOpenWorld, ReturnValue) == 0x000000, "Member 'BFGQuest_Manager_DetermineIfOpenWorld::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.IsQuestInProgress
// 0x0030 (0x0030 - 0x0000)
struct BFGQuest_Manager_IsQuestInProgress final
{
public:
	TSoftClassPtr<class UClass>                   _softQuest;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGQuest_Manager_IsQuestInProgress) == 0x000008, "Wrong alignment on BFGQuest_Manager_IsQuestInProgress");
static_assert(sizeof(BFGQuest_Manager_IsQuestInProgress) == 0x000030, "Wrong size on BFGQuest_Manager_IsQuestInProgress");
static_assert(offsetof(BFGQuest_Manager_IsQuestInProgress, _softQuest) == 0x000000, "Member 'BFGQuest_Manager_IsQuestInProgress::_softQuest' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_IsQuestInProgress, ReturnValue) == 0x000028, "Member 'BFGQuest_Manager_IsQuestInProgress::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.IsQuestToBeStarted
// 0x0030 (0x0030 - 0x0000)
struct BFGQuest_Manager_IsQuestToBeStarted final
{
public:
	TSoftClassPtr<class UClass>                   _softQuest;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGQuest_Manager_IsQuestToBeStarted) == 0x000008, "Wrong alignment on BFGQuest_Manager_IsQuestToBeStarted");
static_assert(sizeof(BFGQuest_Manager_IsQuestToBeStarted) == 0x000030, "Wrong size on BFGQuest_Manager_IsQuestToBeStarted");
static_assert(offsetof(BFGQuest_Manager_IsQuestToBeStarted, _softQuest) == 0x000000, "Member 'BFGQuest_Manager_IsQuestToBeStarted::_softQuest' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_IsQuestToBeStarted, ReturnValue) == 0x000028, "Member 'BFGQuest_Manager_IsQuestToBeStarted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.OnQuestVariableChanged_MainMissionOrChallenge
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge final
{
public:
	class UBFGVariableMirror*                     _pVarMirror;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBFGVariable*                     _pVariable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iOldValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iNewValue;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge) == 0x000008, "Wrong alignment on BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge");
static_assert(sizeof(BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge) == 0x000018, "Wrong size on BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge");
static_assert(offsetof(BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge, _pVarMirror) == 0x000000, "Member 'BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge::_pVarMirror' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge, _pVariable) == 0x000008, "Member 'BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge, _iOldValue) == 0x000010, "Member 'BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge::_iOldValue' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge, _iNewValue) == 0x000014, "Member 'BFGQuest_Manager_OnQuestVariableChanged_MainMissionOrChallenge::_iNewValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.OnWorldLoaded
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_Manager_OnWorldLoaded final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_OnWorldLoaded) == 0x000008, "Wrong alignment on BFGQuest_Manager_OnWorldLoaded");
static_assert(sizeof(BFGQuest_Manager_OnWorldLoaded) == 0x000010, "Wrong size on BFGQuest_Manager_OnWorldLoaded");
static_assert(offsetof(BFGQuest_Manager_OnWorldLoaded, _pGameInstance) == 0x000000, "Member 'BFGQuest_Manager_OnWorldLoaded::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_OnWorldLoaded, _pWorld) == 0x000008, "Member 'BFGQuest_Manager_OnWorldLoaded::_pWorld' has a wrong offset!");

// DelegateFunction BFGCore.BFGQuest_Manager.QuestUIUpdateEvent__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature final
{
public:
	class UBFGQuest*                              _pQuest;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _strText;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FText>                           _aDescription;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature) == 0x000008, "Wrong alignment on BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature");
static_assert(sizeof(BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature) == 0x000030, "Wrong size on BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature");
static_assert(offsetof(BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature, _pQuest) == 0x000000, "Member 'BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature::_pQuest' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature, _strText) == 0x000008, "Member 'BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature::_strText' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature, _aDescription) == 0x000020, "Member 'BFGQuest_Manager_QuestUIUpdateEvent__DelegateSignature::_aDescription' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.FindQuestByGuid
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_Manager_FindQuestByGuid final
{
public:
	struct FGuid                                  _guid;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGQuest*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_FindQuestByGuid) == 0x000008, "Wrong alignment on BFGQuest_Manager_FindQuestByGuid");
static_assert(sizeof(BFGQuest_Manager_FindQuestByGuid) == 0x000018, "Wrong size on BFGQuest_Manager_FindQuestByGuid");
static_assert(offsetof(BFGQuest_Manager_FindQuestByGuid, _guid) == 0x000000, "Member 'BFGQuest_Manager_FindQuestByGuid::_guid' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_FindQuestByGuid, ReturnValue) == 0x000010, "Member 'BFGQuest_Manager_FindQuestByGuid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.FindQuestOfType
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_Manager_FindQuestOfType final
{
public:
	TSubclassOf<class UBFGQuest>                  _pClass;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGQuest*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_FindQuestOfType) == 0x000008, "Wrong alignment on BFGQuest_Manager_FindQuestOfType");
static_assert(sizeof(BFGQuest_Manager_FindQuestOfType) == 0x000010, "Wrong size on BFGQuest_Manager_FindQuestOfType");
static_assert(offsetof(BFGQuest_Manager_FindQuestOfType, _pClass) == 0x000000, "Member 'BFGQuest_Manager_FindQuestOfType::_pClass' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_FindQuestOfType, ReturnValue) == 0x000008, "Member 'BFGQuest_Manager_FindQuestOfType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.GetGameState
// 0x0008 (0x0008 - 0x0000)
struct BFGQuest_Manager_GetGameState final
{
public:
	class ABFGGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_GetGameState) == 0x000008, "Wrong alignment on BFGQuest_Manager_GetGameState");
static_assert(sizeof(BFGQuest_Manager_GetGameState) == 0x000008, "Wrong size on BFGQuest_Manager_GetGameState");
static_assert(offsetof(BFGQuest_Manager_GetGameState, ReturnValue) == 0x000000, "Member 'BFGQuest_Manager_GetGameState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.GetMainQuestName
// 0x0018 (0x0018 - 0x0000)
struct BFGQuest_Manager_GetMainQuestName final
{
public:
	bool                                          _bFilterCurrentWorld;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bReturnWorldNameIfNull;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_GetMainQuestName) == 0x000008, "Wrong alignment on BFGQuest_Manager_GetMainQuestName");
static_assert(sizeof(BFGQuest_Manager_GetMainQuestName) == 0x000018, "Wrong size on BFGQuest_Manager_GetMainQuestName");
static_assert(offsetof(BFGQuest_Manager_GetMainQuestName, _bFilterCurrentWorld) == 0x000000, "Member 'BFGQuest_Manager_GetMainQuestName::_bFilterCurrentWorld' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_GetMainQuestName, _bReturnWorldNameIfNull) == 0x000001, "Member 'BFGQuest_Manager_GetMainQuestName::_bReturnWorldNameIfNull' has a wrong offset!");
static_assert(offsetof(BFGQuest_Manager_GetMainQuestName, ReturnValue) == 0x000008, "Member 'BFGQuest_Manager_GetMainQuestName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.GetMainQuestText
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_Manager_GetMainQuestText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_GetMainQuestText) == 0x000008, "Wrong alignment on BFGQuest_Manager_GetMainQuestText");
static_assert(sizeof(BFGQuest_Manager_GetMainQuestText) == 0x000010, "Wrong size on BFGQuest_Manager_GetMainQuestText");
static_assert(offsetof(BFGQuest_Manager_GetMainQuestText, ReturnValue) == 0x000000, "Member 'BFGQuest_Manager_GetMainQuestText::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.GetQuests
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_Manager_GetQuests final
{
public:
	TArray<class UBFGQuest*>                      _aQuestsOut;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_GetQuests) == 0x000008, "Wrong alignment on BFGQuest_Manager_GetQuests");
static_assert(sizeof(BFGQuest_Manager_GetQuests) == 0x000010, "Wrong size on BFGQuest_Manager_GetQuests");
static_assert(offsetof(BFGQuest_Manager_GetQuests, _aQuestsOut) == 0x000000, "Member 'BFGQuest_Manager_GetQuests::_aQuestsOut' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.GetQuestsInProgress
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_Manager_GetQuestsInProgress final
{
public:
	TArray<class UBFGQuest*>                      _apQuestsOut;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_GetQuestsInProgress) == 0x000008, "Wrong alignment on BFGQuest_Manager_GetQuestsInProgress");
static_assert(sizeof(BFGQuest_Manager_GetQuestsInProgress) == 0x000010, "Wrong size on BFGQuest_Manager_GetQuestsInProgress");
static_assert(offsetof(BFGQuest_Manager_GetQuestsInProgress, _apQuestsOut) == 0x000000, "Member 'BFGQuest_Manager_GetQuestsInProgress::_apQuestsOut' has a wrong offset!");

// Function BFGCore.BFGQuest_Manager.GetRunningQuestTimers
// 0x0010 (0x0010 - 0x0000)
struct BFGQuest_Manager_GetRunningQuestTimers final
{
public:
	TArray<class UBFGQuest_Timer*>                _aTimersOut;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuest_Manager_GetRunningQuestTimers) == 0x000008, "Wrong alignment on BFGQuest_Manager_GetRunningQuestTimers");
static_assert(sizeof(BFGQuest_Manager_GetRunningQuestTimers) == 0x000010, "Wrong size on BFGQuest_Manager_GetRunningQuestTimers");
static_assert(offsetof(BFGQuest_Manager_GetRunningQuestTimers, _aTimersOut) == 0x000000, "Member 'BFGQuest_Manager_GetRunningQuestTimers::_aTimersOut' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Dialog_Finished.GetActionName_DialogFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Dialog_Finished_GetActionName_DialogFinished final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Dialog_Finished_GetActionName_DialogFinished) == 0x000004, "Wrong alignment on BFGVariableAction_Dialog_Finished_GetActionName_DialogFinished");
static_assert(sizeof(BFGVariableAction_Dialog_Finished_GetActionName_DialogFinished) == 0x000008, "Wrong size on BFGVariableAction_Dialog_Finished_GetActionName_DialogFinished");
static_assert(offsetof(BFGVariableAction_Dialog_Finished_GetActionName_DialogFinished, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Dialog_Finished_GetActionName_DialogFinished::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuestSettings.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGQuestSettings_GetSettings final
{
public:
	class UBFGQuestSettings*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuestSettings_GetSettings) == 0x000008, "Wrong alignment on BFGQuestSettings_GetSettings");
static_assert(sizeof(BFGQuestSettings_GetSettings) == 0x000008, "Wrong size on BFGQuestSettings_GetSettings");
static_assert(offsetof(BFGQuestSettings_GetSettings, ReturnValue) == 0x000000, "Member 'BFGQuestSettings_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGQuestSettings.GetChallengeDefaults
// 0x00D8 (0x00D8 - 0x0000)
struct BFGQuestSettings_GetChallengeDefaults final
{
public:
	EBFGChallengeType                             _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGQuestSettings_ChallengeData        ReturnValue;                                       // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGQuestSettings_GetChallengeDefaults) == 0x000008, "Wrong alignment on BFGQuestSettings_GetChallengeDefaults");
static_assert(sizeof(BFGQuestSettings_GetChallengeDefaults) == 0x0000D8, "Wrong size on BFGQuestSettings_GetChallengeDefaults");
static_assert(offsetof(BFGQuestSettings_GetChallengeDefaults, _eType) == 0x000000, "Member 'BFGQuestSettings_GetChallengeDefaults::_eType' has a wrong offset!");
static_assert(offsetof(BFGQuestSettings_GetChallengeDefaults, ReturnValue) == 0x000008, "Member 'BFGQuestSettings_GetChallengeDefaults::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRadarObjectInterface.ChangeStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct BFGRadarObjectInterface_ChangeStaticInfo final
{
public:
	class UBFGDataAsset_RadarObjectStaticInfo*    _pStaticInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadarObjectInterface_ChangeStaticInfo) == 0x000008, "Wrong alignment on BFGRadarObjectInterface_ChangeStaticInfo");
static_assert(sizeof(BFGRadarObjectInterface_ChangeStaticInfo) == 0x000008, "Wrong size on BFGRadarObjectInterface_ChangeStaticInfo");
static_assert(offsetof(BFGRadarObjectInterface_ChangeStaticInfo, _pStaticInfo) == 0x000000, "Member 'BFGRadarObjectInterface_ChangeStaticInfo::_pStaticInfo' has a wrong offset!");

// Function BFGCore.BFGRadarObjectInterface.ChangeStaticInfoOverride
// 0x0008 (0x0008 - 0x0000)
struct BFGRadarObjectInterface_ChangeStaticInfoOverride final
{
public:
	class UBFGDataAsset_RadarObjectStaticInfo*    _pStaticInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadarObjectInterface_ChangeStaticInfoOverride) == 0x000008, "Wrong alignment on BFGRadarObjectInterface_ChangeStaticInfoOverride");
static_assert(sizeof(BFGRadarObjectInterface_ChangeStaticInfoOverride) == 0x000008, "Wrong size on BFGRadarObjectInterface_ChangeStaticInfoOverride");
static_assert(offsetof(BFGRadarObjectInterface_ChangeStaticInfoOverride, _pStaticInfo) == 0x000000, "Member 'BFGRadarObjectInterface_ChangeStaticInfoOverride::_pStaticInfo' has a wrong offset!");

// Function BFGCore.BFGRadarObjectInterface.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGRadarObjectInterface_SetEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadarObjectInterface_SetEnabled) == 0x000001, "Wrong alignment on BFGRadarObjectInterface_SetEnabled");
static_assert(sizeof(BFGRadarObjectInterface_SetEnabled) == 0x000001, "Wrong size on BFGRadarObjectInterface_SetEnabled");
static_assert(offsetof(BFGRadarObjectInterface_SetEnabled, _bEnabled) == 0x000000, "Member 'BFGRadarObjectInterface_SetEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGRadarObjectInterface.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGRadarObjectInterface_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadarObjectInterface_IsEnabled) == 0x000001, "Wrong alignment on BFGRadarObjectInterface_IsEnabled");
static_assert(sizeof(BFGRadarObjectInterface_IsEnabled) == 0x000001, "Wrong size on BFGRadarObjectInterface_IsEnabled");
static_assert(offsetof(BFGRadarObjectInterface_IsEnabled, ReturnValue) == 0x000000, "Member 'BFGRadarObjectInterface_IsEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeaponSelectorAbilityHint.InitializeDataInternal
// 0x00A8 (0x00A8 - 0x0000)
struct BFGWeaponSelectorAbilityHint_InitializeDataInternal final
{
public:
	struct FBFGAbilityHintInfo                    _oData;                                            // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeaponSelectorAbilityHint_InitializeDataInternal) == 0x000008, "Wrong alignment on BFGWeaponSelectorAbilityHint_InitializeDataInternal");
static_assert(sizeof(BFGWeaponSelectorAbilityHint_InitializeDataInternal) == 0x0000A8, "Wrong size on BFGWeaponSelectorAbilityHint_InitializeDataInternal");
static_assert(offsetof(BFGWeaponSelectorAbilityHint_InitializeDataInternal, _oData) == 0x000000, "Member 'BFGWeaponSelectorAbilityHint_InitializeDataInternal::_oData' has a wrong offset!");

// Function BFGCore.BFGWidget_RadialMenu_OptionIcon.SetBrush
// 0x0088 (0x0088 - 0x0000)
struct BFGWidget_RadialMenu_OptionIcon_SetBrush final
{
public:
	struct FSlateBrush                            _oBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_RadialMenu_OptionIcon_SetBrush) == 0x000008, "Wrong alignment on BFGWidget_RadialMenu_OptionIcon_SetBrush");
static_assert(sizeof(BFGWidget_RadialMenu_OptionIcon_SetBrush) == 0x000088, "Wrong size on BFGWidget_RadialMenu_OptionIcon_SetBrush");
static_assert(offsetof(BFGWidget_RadialMenu_OptionIcon_SetBrush, _oBrush) == 0x000000, "Member 'BFGWidget_RadialMenu_OptionIcon_SetBrush::_oBrush' has a wrong offset!");

// Function BFGCore.BFGWidget_RadialMenu_OptionIcon.SetHighlighted
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_RadialMenu_OptionIcon_SetHighlighted final
{
public:
	bool                                          _bHighlighted;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_RadialMenu_OptionIcon_SetHighlighted) == 0x000001, "Wrong alignment on BFGWidget_RadialMenu_OptionIcon_SetHighlighted");
static_assert(sizeof(BFGWidget_RadialMenu_OptionIcon_SetHighlighted) == 0x000001, "Wrong size on BFGWidget_RadialMenu_OptionIcon_SetHighlighted");
static_assert(offsetof(BFGWidget_RadialMenu_OptionIcon_SetHighlighted, _bHighlighted) == 0x000000, "Member 'BFGWidget_RadialMenu_OptionIcon_SetHighlighted::_bHighlighted' has a wrong offset!");

// Function BFGCore.BFGWidget_RadialMenu_OptionIcon.SetState
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_RadialMenu_OptionIcon_SetState final
{
public:
	bool                                          _bUnlocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHighlighted;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_RadialMenu_OptionIcon_SetState) == 0x000001, "Wrong alignment on BFGWidget_RadialMenu_OptionIcon_SetState");
static_assert(sizeof(BFGWidget_RadialMenu_OptionIcon_SetState) == 0x000002, "Wrong size on BFGWidget_RadialMenu_OptionIcon_SetState");
static_assert(offsetof(BFGWidget_RadialMenu_OptionIcon_SetState, _bUnlocked) == 0x000000, "Member 'BFGWidget_RadialMenu_OptionIcon_SetState::_bUnlocked' has a wrong offset!");
static_assert(offsetof(BFGWidget_RadialMenu_OptionIcon_SetState, _bHighlighted) == 0x000001, "Member 'BFGWidget_RadialMenu_OptionIcon_SetState::_bHighlighted' has a wrong offset!");

// Function BFGCore.BFGWidget_RadialMenu_OptionIcon.SetUnlocked
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_RadialMenu_OptionIcon_SetUnlocked final
{
public:
	bool                                          _bUnlocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_RadialMenu_OptionIcon_SetUnlocked) == 0x000001, "Wrong alignment on BFGWidget_RadialMenu_OptionIcon_SetUnlocked");
static_assert(sizeof(BFGWidget_RadialMenu_OptionIcon_SetUnlocked) == 0x000001, "Wrong size on BFGWidget_RadialMenu_OptionIcon_SetUnlocked");
static_assert(offsetof(BFGWidget_RadialMenu_OptionIcon_SetUnlocked, _bUnlocked) == 0x000000, "Member 'BFGWidget_RadialMenu_OptionIcon_SetUnlocked::_bUnlocked' has a wrong offset!");

// Function BFGCore.BFGWidget_WeaponSelector_Icon.SetMaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_WeaponSelector_Icon_SetMaxAmmo final
{
public:
	int32                                         _iMaxAmmo;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_WeaponSelector_Icon_SetMaxAmmo) == 0x000004, "Wrong alignment on BFGWidget_WeaponSelector_Icon_SetMaxAmmo");
static_assert(sizeof(BFGWidget_WeaponSelector_Icon_SetMaxAmmo) == 0x000004, "Wrong size on BFGWidget_WeaponSelector_Icon_SetMaxAmmo");
static_assert(offsetof(BFGWidget_WeaponSelector_Icon_SetMaxAmmo, _iMaxAmmo) == 0x000000, "Member 'BFGWidget_WeaponSelector_Icon_SetMaxAmmo::_iMaxAmmo' has a wrong offset!");

// Function BFGCore.BFGWidget_WeaponSelector_Icon.UpdateAmmo
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_WeaponSelector_Icon_UpdateAmmo final
{
public:
	struct FBFGAmmunitionInfo                     _iAmmunitionInfo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_WeaponSelector_Icon_UpdateAmmo) == 0x000004, "Wrong alignment on BFGWidget_WeaponSelector_Icon_UpdateAmmo");
static_assert(sizeof(BFGWidget_WeaponSelector_Icon_UpdateAmmo) == 0x000008, "Wrong size on BFGWidget_WeaponSelector_Icon_UpdateAmmo");
static_assert(offsetof(BFGWidget_WeaponSelector_Icon_UpdateAmmo, _iAmmunitionInfo) == 0x000000, "Member 'BFGWidget_WeaponSelector_Icon_UpdateAmmo::_iAmmunitionInfo' has a wrong offset!");

// DelegateFunction BFGCore.BFGRadialMenuUserWidget.Action__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGRadialMenuUserWidget_Action__DelegateSignature final
{
public:
	class UBFGRadialMenuUserWidget*               _pMenu;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_Action__DelegateSignature) == 0x000008, "Wrong alignment on BFGRadialMenuUserWidget_Action__DelegateSignature");
static_assert(sizeof(BFGRadialMenuUserWidget_Action__DelegateSignature) == 0x000008, "Wrong size on BFGRadialMenuUserWidget_Action__DelegateSignature");
static_assert(offsetof(BFGRadialMenuUserWidget_Action__DelegateSignature, _pMenu) == 0x000000, "Member 'BFGRadialMenuUserWidget_Action__DelegateSignature::_pMenu' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.AddOption
// 0x0008 (0x0008 - 0x0000)
struct BFGRadialMenuUserWidget_AddOption final
{
public:
	class UBFGUI_RadialMenu_Option*               _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_AddOption) == 0x000008, "Wrong alignment on BFGRadialMenuUserWidget_AddOption");
static_assert(sizeof(BFGRadialMenuUserWidget_AddOption) == 0x000008, "Wrong size on BFGRadialMenuUserWidget_AddOption");
static_assert(offsetof(BFGRadialMenuUserWidget_AddOption, _pOption) == 0x000000, "Member 'BFGRadialMenuUserWidget_AddOption::_pOption' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.CreateOption
// 0x0058 (0x0058 - 0x0000)
struct BFGRadialMenuUserWidget_CreateOption final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _strTooltip;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _strDescription;                                   // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                _pObject;                                          // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGUI_RadialMenu_Option*               ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_CreateOption) == 0x000008, "Wrong alignment on BFGRadialMenuUserWidget_CreateOption");
static_assert(sizeof(BFGRadialMenuUserWidget_CreateOption) == 0x000058, "Wrong size on BFGRadialMenuUserWidget_CreateOption");
static_assert(offsetof(BFGRadialMenuUserWidget_CreateOption, _strText) == 0x000000, "Member 'BFGRadialMenuUserWidget_CreateOption::_strText' has a wrong offset!");
static_assert(offsetof(BFGRadialMenuUserWidget_CreateOption, _strTooltip) == 0x000018, "Member 'BFGRadialMenuUserWidget_CreateOption::_strTooltip' has a wrong offset!");
static_assert(offsetof(BFGRadialMenuUserWidget_CreateOption, _strDescription) == 0x000030, "Member 'BFGRadialMenuUserWidget_CreateOption::_strDescription' has a wrong offset!");
static_assert(offsetof(BFGRadialMenuUserWidget_CreateOption, _pObject) == 0x000048, "Member 'BFGRadialMenuUserWidget_CreateOption::_pObject' has a wrong offset!");
static_assert(offsetof(BFGRadialMenuUserWidget_CreateOption, ReturnValue) == 0x000050, "Member 'BFGRadialMenuUserWidget_CreateOption::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.ExecuteAction
// 0x0008 (0x0008 - 0x0000)
struct BFGRadialMenuUserWidget_ExecuteAction final
{
public:
	class UBFGUI_RadialMenu_Option*               _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_ExecuteAction) == 0x000008, "Wrong alignment on BFGRadialMenuUserWidget_ExecuteAction");
static_assert(sizeof(BFGRadialMenuUserWidget_ExecuteAction) == 0x000008, "Wrong size on BFGRadialMenuUserWidget_ExecuteAction");
static_assert(offsetof(BFGRadialMenuUserWidget_ExecuteAction, _pOption) == 0x000000, "Member 'BFGRadialMenuUserWidget_ExecuteAction::_pOption' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct BFGRadialMenuUserWidget_GetOptions final
{
public:
	TArray<class UBFGUI_RadialMenu_Option*>       ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_GetOptions) == 0x000008, "Wrong alignment on BFGRadialMenuUserWidget_GetOptions");
static_assert(sizeof(BFGRadialMenuUserWidget_GetOptions) == 0x000010, "Wrong size on BFGRadialMenuUserWidget_GetOptions");
static_assert(offsetof(BFGRadialMenuUserWidget_GetOptions, ReturnValue) == 0x000000, "Member 'BFGRadialMenuUserWidget_GetOptions::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.GetSelectedElement
// 0x0004 (0x0004 - 0x0000)
struct BFGRadialMenuUserWidget_GetSelectedElement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_GetSelectedElement) == 0x000004, "Wrong alignment on BFGRadialMenuUserWidget_GetSelectedElement");
static_assert(sizeof(BFGRadialMenuUserWidget_GetSelectedElement) == 0x000004, "Wrong size on BFGRadialMenuUserWidget_GetSelectedElement");
static_assert(offsetof(BFGRadialMenuUserWidget_GetSelectedElement, ReturnValue) == 0x000000, "Member 'BFGRadialMenuUserWidget_GetSelectedElement::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.GetSelectedElementOption
// 0x0008 (0x0008 - 0x0000)
struct BFGRadialMenuUserWidget_GetSelectedElementOption final
{
public:
	class UBFGUI_RadialMenu_Option*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_GetSelectedElementOption) == 0x000008, "Wrong alignment on BFGRadialMenuUserWidget_GetSelectedElementOption");
static_assert(sizeof(BFGRadialMenuUserWidget_GetSelectedElementOption) == 0x000008, "Wrong size on BFGRadialMenuUserWidget_GetSelectedElementOption");
static_assert(offsetof(BFGRadialMenuUserWidget_GetSelectedElementOption, ReturnValue) == 0x000000, "Member 'BFGRadialMenuUserWidget_GetSelectedElementOption::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.MoveMarkerHorizontal
// 0x0004 (0x0004 - 0x0000)
struct BFGRadialMenuUserWidget_MoveMarkerHorizontal final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_MoveMarkerHorizontal) == 0x000004, "Wrong alignment on BFGRadialMenuUserWidget_MoveMarkerHorizontal");
static_assert(sizeof(BFGRadialMenuUserWidget_MoveMarkerHorizontal) == 0x000004, "Wrong size on BFGRadialMenuUserWidget_MoveMarkerHorizontal");
static_assert(offsetof(BFGRadialMenuUserWidget_MoveMarkerHorizontal, _fValue) == 0x000000, "Member 'BFGRadialMenuUserWidget_MoveMarkerHorizontal::_fValue' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.MoveMarkerVertical
// 0x0004 (0x0004 - 0x0000)
struct BFGRadialMenuUserWidget_MoveMarkerVertical final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_MoveMarkerVertical) == 0x000004, "Wrong alignment on BFGRadialMenuUserWidget_MoveMarkerVertical");
static_assert(sizeof(BFGRadialMenuUserWidget_MoveMarkerVertical) == 0x000004, "Wrong size on BFGRadialMenuUserWidget_MoveMarkerVertical");
static_assert(offsetof(BFGRadialMenuUserWidget_MoveMarkerVertical, _fValue) == 0x000000, "Member 'BFGRadialMenuUserWidget_MoveMarkerVertical::_fValue' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.OnShowWeaponInformation
// 0x0010 (0x0010 - 0x0000)
struct BFGRadialMenuUserWidget_OnShowWeaponInformation final
{
public:
	class UBFGUI_RadialMenu_Option*               _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bShow;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGRadialMenuUserWidget_OnShowWeaponInformation) == 0x000008, "Wrong alignment on BFGRadialMenuUserWidget_OnShowWeaponInformation");
static_assert(sizeof(BFGRadialMenuUserWidget_OnShowWeaponInformation) == 0x000010, "Wrong size on BFGRadialMenuUserWidget_OnShowWeaponInformation");
static_assert(offsetof(BFGRadialMenuUserWidget_OnShowWeaponInformation, _pOption) == 0x000000, "Member 'BFGRadialMenuUserWidget_OnShowWeaponInformation::_pOption' has a wrong offset!");
static_assert(offsetof(BFGRadialMenuUserWidget_OnShowWeaponInformation, _bShow) == 0x000008, "Member 'BFGRadialMenuUserWidget_OnShowWeaponInformation::_bShow' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.SetCurrentSelectedItem
// 0x0004 (0x0004 - 0x0000)
struct BFGRadialMenuUserWidget_SetCurrentSelectedItem final
{
public:
	int32                                         _iSelected;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_SetCurrentSelectedItem) == 0x000004, "Wrong alignment on BFGRadialMenuUserWidget_SetCurrentSelectedItem");
static_assert(sizeof(BFGRadialMenuUserWidget_SetCurrentSelectedItem) == 0x000004, "Wrong size on BFGRadialMenuUserWidget_SetCurrentSelectedItem");
static_assert(offsetof(BFGRadialMenuUserWidget_SetCurrentSelectedItem, _iSelected) == 0x000000, "Member 'BFGRadialMenuUserWidget_SetCurrentSelectedItem::_iSelected' has a wrong offset!");

// Function BFGCore.BFGRadialMenuUserWidget.GetCurrentSelectedItem
// 0x0004 (0x0004 - 0x0000)
struct BFGRadialMenuUserWidget_GetCurrentSelectedItem final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenuUserWidget_GetCurrentSelectedItem) == 0x000004, "Wrong alignment on BFGRadialMenuUserWidget_GetCurrentSelectedItem");
static_assert(sizeof(BFGRadialMenuUserWidget_GetCurrentSelectedItem) == 0x000004, "Wrong size on BFGRadialMenuUserWidget_GetCurrentSelectedItem");
static_assert(offsetof(BFGRadialMenuUserWidget_GetCurrentSelectedItem, ReturnValue) == 0x000000, "Member 'BFGRadialMenuUserWidget_GetCurrentSelectedItem::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRadialMenu_WeaponSelector.AddHintToLeftWing
// 0x0010 (0x0010 - 0x0000)
struct BFGRadialMenu_WeaponSelector_AddHintToLeftWing final
{
public:
	class UBFGWeaponSelectorAbilityHint*          _pHint;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAnchorVertical;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAnchorHorizontal;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenu_WeaponSelector_AddHintToLeftWing) == 0x000008, "Wrong alignment on BFGRadialMenu_WeaponSelector_AddHintToLeftWing");
static_assert(sizeof(BFGRadialMenu_WeaponSelector_AddHintToLeftWing) == 0x000010, "Wrong size on BFGRadialMenu_WeaponSelector_AddHintToLeftWing");
static_assert(offsetof(BFGRadialMenu_WeaponSelector_AddHintToLeftWing, _pHint) == 0x000000, "Member 'BFGRadialMenu_WeaponSelector_AddHintToLeftWing::_pHint' has a wrong offset!");
static_assert(offsetof(BFGRadialMenu_WeaponSelector_AddHintToLeftWing, _fAnchorVertical) == 0x000008, "Member 'BFGRadialMenu_WeaponSelector_AddHintToLeftWing::_fAnchorVertical' has a wrong offset!");
static_assert(offsetof(BFGRadialMenu_WeaponSelector_AddHintToLeftWing, _fAnchorHorizontal) == 0x00000C, "Member 'BFGRadialMenu_WeaponSelector_AddHintToLeftWing::_fAnchorHorizontal' has a wrong offset!");

// Function BFGCore.BFGRadialMenu_WeaponSelector.AddHintToRightWing
// 0x0010 (0x0010 - 0x0000)
struct BFGRadialMenu_WeaponSelector_AddHintToRightWing final
{
public:
	class UBFGWeaponSelectorAbilityHint*          _pHint;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAnchorVertical;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAnchorHorizontal;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenu_WeaponSelector_AddHintToRightWing) == 0x000008, "Wrong alignment on BFGRadialMenu_WeaponSelector_AddHintToRightWing");
static_assert(sizeof(BFGRadialMenu_WeaponSelector_AddHintToRightWing) == 0x000010, "Wrong size on BFGRadialMenu_WeaponSelector_AddHintToRightWing");
static_assert(offsetof(BFGRadialMenu_WeaponSelector_AddHintToRightWing, _pHint) == 0x000000, "Member 'BFGRadialMenu_WeaponSelector_AddHintToRightWing::_pHint' has a wrong offset!");
static_assert(offsetof(BFGRadialMenu_WeaponSelector_AddHintToRightWing, _fAnchorVertical) == 0x000008, "Member 'BFGRadialMenu_WeaponSelector_AddHintToRightWing::_fAnchorVertical' has a wrong offset!");
static_assert(offsetof(BFGRadialMenu_WeaponSelector_AddHintToRightWing, _fAnchorHorizontal) == 0x00000C, "Member 'BFGRadialMenu_WeaponSelector_AddHintToRightWing::_fAnchorHorizontal' has a wrong offset!");

// Function BFGCore.BFGRadialMenu_WeaponSelector.SetSelectionWheelBGImage
// 0x0088 (0x0088 - 0x0000)
struct BFGRadialMenu_WeaponSelector_SetSelectionWheelBGImage final
{
public:
	struct FSlateBrush                            _image;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRadialMenu_WeaponSelector_SetSelectionWheelBGImage) == 0x000008, "Wrong alignment on BFGRadialMenu_WeaponSelector_SetSelectionWheelBGImage");
static_assert(sizeof(BFGRadialMenu_WeaponSelector_SetSelectionWheelBGImage) == 0x000088, "Wrong size on BFGRadialMenu_WeaponSelector_SetSelectionWheelBGImage");
static_assert(offsetof(BFGRadialMenu_WeaponSelector_SetSelectionWheelBGImage, _image) == 0x000000, "Member 'BFGRadialMenu_WeaponSelector_SetSelectionWheelBGImage::_image' has a wrong offset!");

// Function BFGCore.BFGReadTextureActor.CalculateUVFromWorldPosition
// 0x0014 (0x0014 - 0x0000)
struct BFGReadTextureActor_CalculateUVFromWorldPosition final
{
public:
	struct FVector                                _vWorldPos;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGReadTextureActor_CalculateUVFromWorldPosition) == 0x000004, "Wrong alignment on BFGReadTextureActor_CalculateUVFromWorldPosition");
static_assert(sizeof(BFGReadTextureActor_CalculateUVFromWorldPosition) == 0x000014, "Wrong size on BFGReadTextureActor_CalculateUVFromWorldPosition");
static_assert(offsetof(BFGReadTextureActor_CalculateUVFromWorldPosition, _vWorldPos) == 0x000000, "Member 'BFGReadTextureActor_CalculateUVFromWorldPosition::_vWorldPos' has a wrong offset!");
static_assert(offsetof(BFGReadTextureActor_CalculateUVFromWorldPosition, ReturnValue) == 0x00000C, "Member 'BFGReadTextureActor_CalculateUVFromWorldPosition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGReadTextureActor.GetTextureValue
// 0x0010 (0x0010 - 0x0000)
struct BFGReadTextureActor_GetTextureValue final
{
public:
	struct FVector                                _vWorldPos;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGReadTextureActor_GetTextureValue) == 0x000004, "Wrong alignment on BFGReadTextureActor_GetTextureValue");
static_assert(sizeof(BFGReadTextureActor_GetTextureValue) == 0x000010, "Wrong size on BFGReadTextureActor_GetTextureValue");
static_assert(offsetof(BFGReadTextureActor_GetTextureValue, _vWorldPos) == 0x000000, "Member 'BFGReadTextureActor_GetTextureValue::_vWorldPos' has a wrong offset!");
static_assert(offsetof(BFGReadTextureActor_GetTextureValue, ReturnValue) == 0x00000C, "Member 'BFGReadTextureActor_GetTextureValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGReadTextureActor.GetTraceObjExtent
// 0x0018 (0x0018 - 0x0000)
struct BFGReadTextureActor_GetTraceObjExtent final
{
public:
	struct FVector                                _vOrigin;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _vBoxExtent;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGReadTextureActor_GetTraceObjExtent) == 0x000004, "Wrong alignment on BFGReadTextureActor_GetTraceObjExtent");
static_assert(sizeof(BFGReadTextureActor_GetTraceObjExtent) == 0x000018, "Wrong size on BFGReadTextureActor_GetTraceObjExtent");
static_assert(offsetof(BFGReadTextureActor_GetTraceObjExtent, _vOrigin) == 0x000000, "Member 'BFGReadTextureActor_GetTraceObjExtent::_vOrigin' has a wrong offset!");
static_assert(offsetof(BFGReadTextureActor_GetTraceObjExtent, _vBoxExtent) == 0x00000C, "Member 'BFGReadTextureActor_GetTraceObjExtent::_vBoxExtent' has a wrong offset!");

// Function BFGCore.BFGReadTextureManager.GetReadTextureActor
// 0x0008 (0x0008 - 0x0000)
struct BFGReadTextureManager_GetReadTextureActor final
{
public:
	class ABFGReadTextureActor*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGReadTextureManager_GetReadTextureActor) == 0x000008, "Wrong alignment on BFGReadTextureManager_GetReadTextureActor");
static_assert(sizeof(BFGReadTextureManager_GetReadTextureActor) == 0x000008, "Wrong size on BFGReadTextureManager_GetReadTextureActor");
static_assert(offsetof(BFGReadTextureManager_GetReadTextureActor, ReturnValue) == 0x000000, "Member 'BFGReadTextureManager_GetReadTextureActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRestrictedArea.GetViolators
// 0x0010 (0x0010 - 0x0000)
struct BFGRestrictedArea_GetViolators final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGRestrictedArea_GetViolators) == 0x000008, "Wrong alignment on BFGRestrictedArea_GetViolators");
static_assert(sizeof(BFGRestrictedArea_GetViolators) == 0x000010, "Wrong size on BFGRestrictedArea_GetViolators");
static_assert(offsetof(BFGRestrictedArea_GetViolators, ReturnValue) == 0x000000, "Member 'BFGRestrictedArea_GetViolators::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRestrictedArea.IsInsideArea
// 0x0010 (0x0010 - 0x0000)
struct BFGRestrictedArea_IsInsideArea final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGRestrictedArea_IsInsideArea) == 0x000008, "Wrong alignment on BFGRestrictedArea_IsInsideArea");
static_assert(sizeof(BFGRestrictedArea_IsInsideArea) == 0x000010, "Wrong size on BFGRestrictedArea_IsInsideArea");
static_assert(offsetof(BFGRestrictedArea_IsInsideArea, _pActor) == 0x000000, "Member 'BFGRestrictedArea_IsInsideArea::_pActor' has a wrong offset!");
static_assert(offsetof(BFGRestrictedArea_IsInsideArea, ReturnValue) == 0x000008, "Member 'BFGRestrictedArea_IsInsideArea::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGRestrictedArea.IsViolator
// 0x0010 (0x0010 - 0x0000)
struct BFGRestrictedArea_IsViolator final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGRestrictedArea_IsViolator) == 0x000008, "Wrong alignment on BFGRestrictedArea_IsViolator");
static_assert(sizeof(BFGRestrictedArea_IsViolator) == 0x000010, "Wrong size on BFGRestrictedArea_IsViolator");
static_assert(offsetof(BFGRestrictedArea_IsViolator, _pActor) == 0x000000, "Member 'BFGRestrictedArea_IsViolator::_pActor' has a wrong offset!");
static_assert(offsetof(BFGRestrictedArea_IsViolator, ReturnValue) == 0x000008, "Member 'BFGRestrictedArea_IsViolator::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGSaveSystem.OnWorldLoaded
// 0x0010 (0x0010 - 0x0000)
struct BFGSaveSystem_OnWorldLoaded final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSaveSystem_OnWorldLoaded) == 0x000008, "Wrong alignment on BFGSaveSystem_OnWorldLoaded");
static_assert(sizeof(BFGSaveSystem_OnWorldLoaded) == 0x000010, "Wrong size on BFGSaveSystem_OnWorldLoaded");
static_assert(offsetof(BFGSaveSystem_OnWorldLoaded, _pGameInstance) == 0x000000, "Member 'BFGSaveSystem_OnWorldLoaded::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGSaveSystem_OnWorldLoaded, _pWorld) == 0x000008, "Member 'BFGSaveSystem_OnWorldLoaded::_pWorld' has a wrong offset!");

// Function BFGCore.BFGSaveSystem_DataInterface.DoRestore
// 0x0050 (0x0050 - 0x0000)
struct BFGSaveSystem_DataInterface_DoRestore final
{
public:
	TMap<class FName, float>                      _aDataValues;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSaveSystem_DataInterface_DoRestore) == 0x000008, "Wrong alignment on BFGSaveSystem_DataInterface_DoRestore");
static_assert(sizeof(BFGSaveSystem_DataInterface_DoRestore) == 0x000050, "Wrong size on BFGSaveSystem_DataInterface_DoRestore");
static_assert(offsetof(BFGSaveSystem_DataInterface_DoRestore, _aDataValues) == 0x000000, "Member 'BFGSaveSystem_DataInterface_DoRestore::_aDataValues' has a wrong offset!");

// Function BFGCore.BFGSaveSystem_DataInterface.DoSnapshot
// 0x0050 (0x0050 - 0x0000)
struct BFGSaveSystem_DataInterface_DoSnapshot final
{
public:
	TMap<class FName, float>                      _aDataValuesOut;                                   // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSaveSystem_DataInterface_DoSnapshot) == 0x000008, "Wrong alignment on BFGSaveSystem_DataInterface_DoSnapshot");
static_assert(sizeof(BFGSaveSystem_DataInterface_DoSnapshot) == 0x000050, "Wrong size on BFGSaveSystem_DataInterface_DoSnapshot");
static_assert(offsetof(BFGSaveSystem_DataInterface_DoSnapshot, _aDataValuesOut) == 0x000000, "Member 'BFGSaveSystem_DataInterface_DoSnapshot::_aDataValuesOut' has a wrong offset!");

// Function BFGCore.BFGSceneComponent_HighlightableSceneObject.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGSceneComponent_HighlightableSceneObject_SetEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGSceneComponent_HighlightableSceneObject_SetEnabled) == 0x000001, "Wrong alignment on BFGSceneComponent_HighlightableSceneObject_SetEnabled");
static_assert(sizeof(BFGSceneComponent_HighlightableSceneObject_SetEnabled) == 0x000001, "Wrong size on BFGSceneComponent_HighlightableSceneObject_SetEnabled");
static_assert(offsetof(BFGSceneComponent_HighlightableSceneObject_SetEnabled, _bEnabled) == 0x000000, "Member 'BFGSceneComponent_HighlightableSceneObject_SetEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskCrowdLifeStation.CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation
// 0x0080 (0x0080 - 0x0000)
struct BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ABFGCrowdLife>           _softCrowdLife;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _stationQuery;                                     // 0x0030(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          _bFinishAfterJoin;                                 // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0079(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation");
static_assert(sizeof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation) == 0x000080, "Wrong size on BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation, _softCrowdLife) == 0x000008, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation::_softCrowdLife' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation, _stationQuery) == 0x000030, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation::_stationQuery' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation, _bFinishAfterJoin) == 0x000078, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation::_bFinishAfterJoin' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation, ReturnValue) == 0x000079, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskJoinCrowdLifeStation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskCrowdLifeStation.CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation
// 0x0080 (0x0080 - 0x0000)
struct BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ABFGCrowdLife>           _softCrowdLife;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _stationQuery;                                     // 0x0030(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          _bFollowRandomPath;                                // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0079(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation");
static_assert(sizeof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation) == 0x000080, "Wrong size on BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation, _softCrowdLife) == 0x000008, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation::_softCrowdLife' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation, _stationQuery) == 0x000030, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation::_stationQuery' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation, _bFollowRandomPath) == 0x000078, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation::_bFollowRandomPath' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation, ReturnValue) == 0x000079, "Member 'BFGScriptedSequence_TaskCrowdLifeStation_CreateAndAddScriptedSequence_TaskLeaveCrowdLifeStation::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskInteractWith.CreateAndAddScriptedSequence_TaskInteractWith
// 0x0080 (0x0080 - 0x0000)
struct BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith final
{
public:
	class UBFGScriptedSequence*                   _pScriptedSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _softInteractable;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _softDestination;                                  // 0x0030(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationSequence          _animSequenceData;                                 // 0x0058(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          _bLooping;                                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fDuration;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iDoInteractAfterAnimSequenceIndex;                // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x007C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith");
static_assert(sizeof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith) == 0x000080, "Wrong size on BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith, _pScriptedSequence) == 0x000000, "Member 'BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith::_pScriptedSequence' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith, _softInteractable) == 0x000008, "Member 'BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith::_softInteractable' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith, _softDestination) == 0x000030, "Member 'BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith::_softDestination' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith, _animSequenceData) == 0x000058, "Member 'BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith::_animSequenceData' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith, _bLooping) == 0x000070, "Member 'BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith::_bLooping' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith, _fDuration) == 0x000074, "Member 'BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith::_fDuration' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith, _iDoInteractAfterAnimSequenceIndex) == 0x000078, "Member 'BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith::_iDoInteractAfterAnimSequenceIndex' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith, ReturnValue) == 0x00007C, "Member 'BFGScriptedSequence_TaskInteractWith_CreateAndAddScriptedSequence_TaskInteractWith::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequence_TaskInteractWith.OnInteractAnimChanged
// 0x00C8 (0x00C8 - 0x0000)
struct BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged final
{
public:
	class UBFGNetworkPathAgent_AIStatePlayInteractAtLocation* _pTask;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _next;                                             // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _previous;                                         // 0x0068(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged) == 0x000008, "Wrong alignment on BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged");
static_assert(sizeof(BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged) == 0x0000C8, "Wrong size on BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged, _pTask) == 0x000000, "Member 'BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged::_pTask' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged, _next) == 0x000008, "Member 'BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged::_next' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged, _previous) == 0x000068, "Member 'BFGScriptedSequence_TaskInteractWith_OnInteractAnimChanged::_previous' has a wrong offset!");

// Function BFGCore.BFGScriptedSequenceManager.CreateNew
// 0x0060 (0x0060 - 0x0000)
struct BFGScriptedSequenceManager_CreateNew final
{
public:
	class FName                                   _strIdentifier;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _pawnGameplayTagQuery;                             // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                _pDebugContext;                                    // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGScriptedSequence_Persistent*        ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequenceManager_CreateNew) == 0x000008, "Wrong alignment on BFGScriptedSequenceManager_CreateNew");
static_assert(sizeof(BFGScriptedSequenceManager_CreateNew) == 0x000060, "Wrong size on BFGScriptedSequenceManager_CreateNew");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNew, _strIdentifier) == 0x000000, "Member 'BFGScriptedSequenceManager_CreateNew::_strIdentifier' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNew, _pawnGameplayTagQuery) == 0x000008, "Member 'BFGScriptedSequenceManager_CreateNew::_pawnGameplayTagQuery' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNew, _pDebugContext) == 0x000050, "Member 'BFGScriptedSequenceManager_CreateNew::_pDebugContext' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNew, ReturnValue) == 0x000058, "Member 'BFGScriptedSequenceManager_CreateNew::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequenceManager.CreateNewSequenceFor
// 0x0040 (0x0040 - 0x0000)
struct BFGScriptedSequenceManager_CreateNewSequenceFor final
{
public:
	class FName                                   _strIdentifier;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _softActorReference;                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _pDebugContext;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGScriptedSequence_Persistent*        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequenceManager_CreateNewSequenceFor) == 0x000008, "Wrong alignment on BFGScriptedSequenceManager_CreateNewSequenceFor");
static_assert(sizeof(BFGScriptedSequenceManager_CreateNewSequenceFor) == 0x000040, "Wrong size on BFGScriptedSequenceManager_CreateNewSequenceFor");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNewSequenceFor, _strIdentifier) == 0x000000, "Member 'BFGScriptedSequenceManager_CreateNewSequenceFor::_strIdentifier' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNewSequenceFor, _softActorReference) == 0x000008, "Member 'BFGScriptedSequenceManager_CreateNewSequenceFor::_softActorReference' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNewSequenceFor, _pDebugContext) == 0x000030, "Member 'BFGScriptedSequenceManager_CreateNewSequenceFor::_pDebugContext' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNewSequenceFor, ReturnValue) == 0x000038, "Member 'BFGScriptedSequenceManager_CreateNewSequenceFor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGScriptedSequenceManager.CreateNewSequenceForTransient
// 0x0040 (0x0040 - 0x0000)
struct BFGScriptedSequenceManager_CreateNewSequenceForTransient final
{
public:
	class FName                                   _strIdentifier;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _softActorReference;                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _pDebugContext;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGScriptedSequence_Transient*         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGScriptedSequenceManager_CreateNewSequenceForTransient) == 0x000008, "Wrong alignment on BFGScriptedSequenceManager_CreateNewSequenceForTransient");
static_assert(sizeof(BFGScriptedSequenceManager_CreateNewSequenceForTransient) == 0x000040, "Wrong size on BFGScriptedSequenceManager_CreateNewSequenceForTransient");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNewSequenceForTransient, _strIdentifier) == 0x000000, "Member 'BFGScriptedSequenceManager_CreateNewSequenceForTransient::_strIdentifier' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNewSequenceForTransient, _softActorReference) == 0x000008, "Member 'BFGScriptedSequenceManager_CreateNewSequenceForTransient::_softActorReference' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNewSequenceForTransient, _pDebugContext) == 0x000030, "Member 'BFGScriptedSequenceManager_CreateNewSequenceForTransient::_pDebugContext' has a wrong offset!");
static_assert(offsetof(BFGScriptedSequenceManager_CreateNewSequenceForTransient, ReturnValue) == 0x000038, "Member 'BFGScriptedSequenceManager_CreateNewSequenceForTransient::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGStatisticsManager.IncreaseStatistic
// 0x0008 (0x0008 - 0x0000)
struct BFGStatisticsManager_IncreaseStatistic final
{
public:
	EBFGGameStatistic                             _eGameStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fAmount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStatisticsManager_IncreaseStatistic) == 0x000004, "Wrong alignment on BFGStatisticsManager_IncreaseStatistic");
static_assert(sizeof(BFGStatisticsManager_IncreaseStatistic) == 0x000008, "Wrong size on BFGStatisticsManager_IncreaseStatistic");
static_assert(offsetof(BFGStatisticsManager_IncreaseStatistic, _eGameStat) == 0x000000, "Member 'BFGStatisticsManager_IncreaseStatistic::_eGameStat' has a wrong offset!");
static_assert(offsetof(BFGStatisticsManager_IncreaseStatistic, _fAmount) == 0x000004, "Member 'BFGStatisticsManager_IncreaseStatistic::_fAmount' has a wrong offset!");

// Function BFGCore.BFGStatisticsManager.SetStatistic
// 0x0008 (0x0008 - 0x0000)
struct BFGStatisticsManager_SetStatistic final
{
public:
	EBFGGameStatistic                             _eGameStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fValue;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStatisticsManager_SetStatistic) == 0x000004, "Wrong alignment on BFGStatisticsManager_SetStatistic");
static_assert(sizeof(BFGStatisticsManager_SetStatistic) == 0x000008, "Wrong size on BFGStatisticsManager_SetStatistic");
static_assert(offsetof(BFGStatisticsManager_SetStatistic, _eGameStat) == 0x000000, "Member 'BFGStatisticsManager_SetStatistic::_eGameStat' has a wrong offset!");
static_assert(offsetof(BFGStatisticsManager_SetStatistic, _fValue) == 0x000004, "Member 'BFGStatisticsManager_SetStatistic::_fValue' has a wrong offset!");

// Function BFGCore.BFGStatisticsManager.GetAllStatistics
// 0x0050 (0x0050 - 0x0000)
struct BFGStatisticsManager_GetAllStatistics final
{
public:
	TMap<EBFGGameStatistic, struct FBFGGameStatisticData> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStatisticsManager_GetAllStatistics) == 0x000008, "Wrong alignment on BFGStatisticsManager_GetAllStatistics");
static_assert(sizeof(BFGStatisticsManager_GetAllStatistics) == 0x000050, "Wrong size on BFGStatisticsManager_GetAllStatistics");
static_assert(offsetof(BFGStatisticsManager_GetAllStatistics, ReturnValue) == 0x000000, "Member 'BFGStatisticsManager_GetAllStatistics::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGStatisticsManager.GetStatistic
// 0x0028 (0x0028 - 0x0000)
struct BFGStatisticsManager_GetStatistic final
{
public:
	EBFGGameStatistic                             _eGameStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBFGGameStatisticData                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGStatisticsManager_GetStatistic) == 0x000008, "Wrong alignment on BFGStatisticsManager_GetStatistic");
static_assert(sizeof(BFGStatisticsManager_GetStatistic) == 0x000028, "Wrong size on BFGStatisticsManager_GetStatistic");
static_assert(offsetof(BFGStatisticsManager_GetStatistic, _eGameStat) == 0x000000, "Member 'BFGStatisticsManager_GetStatistic::_eGameStat' has a wrong offset!");
static_assert(offsetof(BFGStatisticsManager_GetStatistic, ReturnValue) == 0x000008, "Member 'BFGStatisticsManager_GetStatistic::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTaskNode_BossFirePattern.OnPatternFinished
// 0x0008 (0x0008 - 0x0000)
struct BFGTaskNode_BossFirePattern_OnPatternFinished final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTaskNode_BossFirePattern_OnPatternFinished) == 0x000008, "Wrong alignment on BFGTaskNode_BossFirePattern_OnPatternFinished");
static_assert(sizeof(BFGTaskNode_BossFirePattern_OnPatternFinished) == 0x000008, "Wrong size on BFGTaskNode_BossFirePattern_OnPatternFinished");
static_assert(offsetof(BFGTaskNode_BossFirePattern_OnPatternFinished, _pWeapon) == 0x000000, "Member 'BFGTaskNode_BossFirePattern_OnPatternFinished::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.UnlockInitialAgentBehaviour
// 0x0038 (0x0038 - 0x0000)
struct BFGTrafficCrowdManager_UnlockInitialAgentBehaviour final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  _softActorReference;                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGTrafficCrowdManager_UnlockInitialAgentBehaviour) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_UnlockInitialAgentBehaviour");
static_assert(sizeof(BFGTrafficCrowdManager_UnlockInitialAgentBehaviour) == 0x000038, "Wrong size on BFGTrafficCrowdManager_UnlockInitialAgentBehaviour");
static_assert(offsetof(BFGTrafficCrowdManager_UnlockInitialAgentBehaviour, WorldContextObject) == 0x000000, "Member 'BFGTrafficCrowdManager_UnlockInitialAgentBehaviour::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_UnlockInitialAgentBehaviour, _softActorReference) == 0x000008, "Member 'BFGTrafficCrowdManager_UnlockInitialAgentBehaviour::_softActorReference' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_UnlockInitialAgentBehaviour, ReturnValue) == 0x000030, "Member 'BFGTrafficCrowdManager_UnlockInitialAgentBehaviour::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.DeregisterObstacleProxy
// 0x0008 (0x0008 - 0x0000)
struct BFGTrafficCrowdManager_DeregisterObstacleProxy final
{
public:
	class AActor*                                 _pObstacle;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_DeregisterObstacleProxy) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_DeregisterObstacleProxy");
static_assert(sizeof(BFGTrafficCrowdManager_DeregisterObstacleProxy) == 0x000008, "Wrong size on BFGTrafficCrowdManager_DeregisterObstacleProxy");
static_assert(offsetof(BFGTrafficCrowdManager_DeregisterObstacleProxy, _pObstacle) == 0x000000, "Member 'BFGTrafficCrowdManager_DeregisterObstacleProxy::_pObstacle' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.GetAgentsForTagsAndActorList
// 0x0068 (0x0068 - 0x0000)
struct BFGTrafficCrowdManager_GetAgentsForTagsAndActorList final
{
public:
	struct FGameplayTagQuery                      _query;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AActor>>          _aExplicitActorList;                               // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UBFGNetworkPathAgent*>           ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_GetAgentsForTagsAndActorList) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_GetAgentsForTagsAndActorList");
static_assert(sizeof(BFGTrafficCrowdManager_GetAgentsForTagsAndActorList) == 0x000068, "Wrong size on BFGTrafficCrowdManager_GetAgentsForTagsAndActorList");
static_assert(offsetof(BFGTrafficCrowdManager_GetAgentsForTagsAndActorList, _query) == 0x000000, "Member 'BFGTrafficCrowdManager_GetAgentsForTagsAndActorList::_query' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_GetAgentsForTagsAndActorList, _aExplicitActorList) == 0x000048, "Member 'BFGTrafficCrowdManager_GetAgentsForTagsAndActorList::_aExplicitActorList' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_GetAgentsForTagsAndActorList, ReturnValue) == 0x000058, "Member 'BFGTrafficCrowdManager_GetAgentsForTagsAndActorList::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.HideOpportunityWidgets
// 0x0068 (0x0068 - 0x0000)
struct BFGTrafficCrowdManager_HideOpportunityWidgets final
{
public:
	TArray<TSubclassOf<class AActor>>             _aClassWhiteList;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _query;                                            // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AActor>>          _aExplicitActorList;                               // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_HideOpportunityWidgets) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_HideOpportunityWidgets");
static_assert(sizeof(BFGTrafficCrowdManager_HideOpportunityWidgets) == 0x000068, "Wrong size on BFGTrafficCrowdManager_HideOpportunityWidgets");
static_assert(offsetof(BFGTrafficCrowdManager_HideOpportunityWidgets, _aClassWhiteList) == 0x000000, "Member 'BFGTrafficCrowdManager_HideOpportunityWidgets::_aClassWhiteList' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_HideOpportunityWidgets, _query) == 0x000010, "Member 'BFGTrafficCrowdManager_HideOpportunityWidgets::_query' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_HideOpportunityWidgets, _aExplicitActorList) == 0x000058, "Member 'BFGTrafficCrowdManager_HideOpportunityWidgets::_aExplicitActorList' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.OnWorldLoaded
// 0x0010 (0x0010 - 0x0000)
struct BFGTrafficCrowdManager_OnWorldLoaded final
{
public:
	class UBFGGameInstance*                       _pGameInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 _pWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_OnWorldLoaded) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_OnWorldLoaded");
static_assert(sizeof(BFGTrafficCrowdManager_OnWorldLoaded) == 0x000010, "Wrong size on BFGTrafficCrowdManager_OnWorldLoaded");
static_assert(offsetof(BFGTrafficCrowdManager_OnWorldLoaded, _pGameInstance) == 0x000000, "Member 'BFGTrafficCrowdManager_OnWorldLoaded::_pGameInstance' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_OnWorldLoaded, _pWorld) == 0x000008, "Member 'BFGTrafficCrowdManager_OnWorldLoaded::_pWorld' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.PrePopulateAroundPosition
// 0x0018 (0x0018 - 0x0000)
struct BFGTrafficCrowdManager_PrePopulateAroundPosition final
{
public:
	struct FVector                                _vVector;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRemoveAllAgents;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        _fMaxTime;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_PrePopulateAroundPosition) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_PrePopulateAroundPosition");
static_assert(sizeof(BFGTrafficCrowdManager_PrePopulateAroundPosition) == 0x000018, "Wrong size on BFGTrafficCrowdManager_PrePopulateAroundPosition");
static_assert(offsetof(BFGTrafficCrowdManager_PrePopulateAroundPosition, _vVector) == 0x000000, "Member 'BFGTrafficCrowdManager_PrePopulateAroundPosition::_vVector' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_PrePopulateAroundPosition, _bRemoveAllAgents) == 0x00000C, "Member 'BFGTrafficCrowdManager_PrePopulateAroundPosition::_bRemoveAllAgents' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_PrePopulateAroundPosition, _fMaxTime) == 0x000010, "Member 'BFGTrafficCrowdManager_PrePopulateAroundPosition::_fMaxTime' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.RegisterObstacleProxy
// 0x0010 (0x0010 - 0x0000)
struct BFGTrafficCrowdManager_RegisterObstacleProxy final
{
public:
	class AActor*                                 _pObstacle;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bLocalizeAlongPath;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsPlayer;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGTrafficCrowdManager_RegisterObstacleProxy) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_RegisterObstacleProxy");
static_assert(sizeof(BFGTrafficCrowdManager_RegisterObstacleProxy) == 0x000010, "Wrong size on BFGTrafficCrowdManager_RegisterObstacleProxy");
static_assert(offsetof(BFGTrafficCrowdManager_RegisterObstacleProxy, _pObstacle) == 0x000000, "Member 'BFGTrafficCrowdManager_RegisterObstacleProxy::_pObstacle' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_RegisterObstacleProxy, _bLocalizeAlongPath) == 0x000008, "Member 'BFGTrafficCrowdManager_RegisterObstacleProxy::_bLocalizeAlongPath' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_RegisterObstacleProxy, _bIsPlayer) == 0x000009, "Member 'BFGTrafficCrowdManager_RegisterObstacleProxy::_bIsPlayer' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.RequestDespawnAgentWithSoftReference
// 0x0038 (0x0038 - 0x0000)
struct BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference final
{
public:
	TSoftObjectPtr<class AActor>                  _softReference;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGNetworkPathAgentDespawnRequest            _eRequest;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fTimeOut;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference");
static_assert(sizeof(BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference) == 0x000038, "Wrong size on BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference");
static_assert(offsetof(BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference, _softReference) == 0x000000, "Member 'BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference::_softReference' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference, _eRequest) == 0x000028, "Member 'BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference::_eRequest' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference, _fTimeOut) == 0x00002C, "Member 'BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference::_fTimeOut' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference, ReturnValue) == 0x000030, "Member 'BFGTrafficCrowdManager_RequestDespawnAgentWithSoftReference::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.SetCrowdflowAllowedByTagQueryOverrideByGameplayTag
// 0x0090 (0x0090 - 0x0000)
struct BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag final
{
public:
	struct FGameplayTagQuery                      _query;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _override;                                         // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag");
static_assert(sizeof(BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag) == 0x000090, "Wrong size on BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag");
static_assert(offsetof(BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag, _query) == 0x000000, "Member 'BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag::_query' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag, _override) == 0x000048, "Member 'BFGTrafficCrowdManager_SetCrowdflowAllowedByTagQueryOverrideByGameplayTag::_override' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.SetCrowdflowAvailableByGameplayTag
// 0x0050 (0x0050 - 0x0000)
struct BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag final
{
public:
	struct FGameplayTagQuery                      _query;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bState;                                           // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag");
static_assert(sizeof(BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag) == 0x000050, "Wrong size on BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag");
static_assert(offsetof(BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag, _query) == 0x000000, "Member 'BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag::_query' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag, _bState) == 0x000048, "Member 'BFGTrafficCrowdManager_SetCrowdflowAvailableByGameplayTag::_bState' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.SetCrowdLifeStationsAvailableByGameplayTag
// 0x0050 (0x0050 - 0x0000)
struct BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag final
{
public:
	struct FGameplayTagQuery                      _query;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bState;                                           // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag");
static_assert(sizeof(BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag) == 0x000050, "Wrong size on BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag");
static_assert(offsetof(BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag, _query) == 0x000000, "Member 'BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag::_query' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag, _bState) == 0x000048, "Member 'BFGTrafficCrowdManager_SetCrowdLifeStationsAvailableByGameplayTag::_bState' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.SetCrowdScriptConsAvailableByGameplayTag
// 0x0050 (0x0050 - 0x0000)
struct BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag final
{
public:
	struct FGameplayTagQuery                      _query;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bState;                                           // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag");
static_assert(sizeof(BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag) == 0x000050, "Wrong size on BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag");
static_assert(offsetof(BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag, _query) == 0x000000, "Member 'BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag::_query' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag, _bState) == 0x000048, "Member 'BFGTrafficCrowdManager_SetCrowdScriptConsAvailableByGameplayTag::_bState' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.ShowOpportunityWidgets
// 0x0130 (0x0130 - 0x0000)
struct BFGTrafficCrowdManager_ShowOpportunityWidgets final
{
public:
	struct FBFGAgentInstanceOpportunityData       _data;                                             // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             _aClassWhiteList;                                  // 0x00C8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      _query;                                            // 0x00D8(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AActor>>          _aExplicitActorList;                               // 0x0120(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_ShowOpportunityWidgets) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_ShowOpportunityWidgets");
static_assert(sizeof(BFGTrafficCrowdManager_ShowOpportunityWidgets) == 0x000130, "Wrong size on BFGTrafficCrowdManager_ShowOpportunityWidgets");
static_assert(offsetof(BFGTrafficCrowdManager_ShowOpportunityWidgets, _data) == 0x000000, "Member 'BFGTrafficCrowdManager_ShowOpportunityWidgets::_data' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_ShowOpportunityWidgets, _aClassWhiteList) == 0x0000C8, "Member 'BFGTrafficCrowdManager_ShowOpportunityWidgets::_aClassWhiteList' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_ShowOpportunityWidgets, _query) == 0x0000D8, "Member 'BFGTrafficCrowdManager_ShowOpportunityWidgets::_query' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_ShowOpportunityWidgets, _aExplicitActorList) == 0x000120, "Member 'BFGTrafficCrowdManager_ShowOpportunityWidgets::_aExplicitActorList' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.FindAgentWithSoftReference
// 0x0030 (0x0030 - 0x0000)
struct BFGTrafficCrowdManager_FindAgentWithSoftReference final
{
public:
	TSoftObjectPtr<class AActor>                  _softReference;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGNetworkPathAgent*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_FindAgentWithSoftReference) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_FindAgentWithSoftReference");
static_assert(sizeof(BFGTrafficCrowdManager_FindAgentWithSoftReference) == 0x000030, "Wrong size on BFGTrafficCrowdManager_FindAgentWithSoftReference");
static_assert(offsetof(BFGTrafficCrowdManager_FindAgentWithSoftReference, _softReference) == 0x000000, "Member 'BFGTrafficCrowdManager_FindAgentWithSoftReference::_softReference' has a wrong offset!");
static_assert(offsetof(BFGTrafficCrowdManager_FindAgentWithSoftReference, ReturnValue) == 0x000028, "Member 'BFGTrafficCrowdManager_FindAgentWithSoftReference::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTrafficCrowdManager.GetScriptedSequenceManager
// 0x0008 (0x0008 - 0x0000)
struct BFGTrafficCrowdManager_GetScriptedSequenceManager final
{
public:
	class UBFGScriptedSequenceManager*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficCrowdManager_GetScriptedSequenceManager) == 0x000008, "Wrong alignment on BFGTrafficCrowdManager_GetScriptedSequenceManager");
static_assert(sizeof(BFGTrafficCrowdManager_GetScriptedSequenceManager) == 0x000008, "Wrong size on BFGTrafficCrowdManager_GetScriptedSequenceManager");
static_assert(offsetof(BFGTrafficCrowdManager_GetScriptedSequenceManager, ReturnValue) == 0x000000, "Member 'BFGTrafficCrowdManager_GetScriptedSequenceManager::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTrafficPathFinder_Visitor.OnVisitedPathDirty
// 0x0010 (0x0010 - 0x0000)
struct BFGTrafficPathFinder_Visitor_OnVisitedPathDirty final
{
public:
	struct FGuid                                  _path;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTrafficPathFinder_Visitor_OnVisitedPathDirty) == 0x000004, "Wrong alignment on BFGTrafficPathFinder_Visitor_OnVisitedPathDirty");
static_assert(sizeof(BFGTrafficPathFinder_Visitor_OnVisitedPathDirty) == 0x000010, "Wrong size on BFGTrafficPathFinder_Visitor_OnVisitedPathDirty");
static_assert(offsetof(BFGTrafficPathFinder_Visitor_OnVisitedPathDirty, _path) == 0x000000, "Member 'BFGTrafficPathFinder_Visitor_OnVisitedPathDirty::_path' has a wrong offset!");

// Function BFGCore.BFGTriggerManager.CheckIsBoxInNonNavigableArea
// 0x0020 (0x0020 - 0x0000)
struct BFGTriggerManager_CheckIsBoxInNonNavigableArea final
{
public:
	struct FBox                                   _box;                                              // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGTriggerManager_CheckIsBoxInNonNavigableArea) == 0x000004, "Wrong alignment on BFGTriggerManager_CheckIsBoxInNonNavigableArea");
static_assert(sizeof(BFGTriggerManager_CheckIsBoxInNonNavigableArea) == 0x000020, "Wrong size on BFGTriggerManager_CheckIsBoxInNonNavigableArea");
static_assert(offsetof(BFGTriggerManager_CheckIsBoxInNonNavigableArea, _box) == 0x000000, "Member 'BFGTriggerManager_CheckIsBoxInNonNavigableArea::_box' has a wrong offset!");
static_assert(offsetof(BFGTriggerManager_CheckIsBoxInNonNavigableArea, ReturnValue) == 0x00001C, "Member 'BFGTriggerManager_CheckIsBoxInNonNavigableArea::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGTutorialPageTarget.AddPage
// 0x0008 (0x0008 - 0x0000)
struct BFGTutorialPageTarget_AddPage final
{
public:
	class UBFGWidget_TutorialPage*                _pTutorialPage;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialPageTarget_AddPage) == 0x000008, "Wrong alignment on BFGTutorialPageTarget_AddPage");
static_assert(sizeof(BFGTutorialPageTarget_AddPage) == 0x000008, "Wrong size on BFGTutorialPageTarget_AddPage");
static_assert(offsetof(BFGTutorialPageTarget_AddPage, _pTutorialPage) == 0x000000, "Member 'BFGTutorialPageTarget_AddPage::_pTutorialPage' has a wrong offset!");

// Function BFGCore.BFGTutorialPageTarget.RemovePage
// 0x0008 (0x0008 - 0x0000)
struct BFGTutorialPageTarget_RemovePage final
{
public:
	class UBFGWidget_TutorialPage*                _pTutorialPage;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialPageTarget_RemovePage) == 0x000008, "Wrong alignment on BFGTutorialPageTarget_RemovePage");
static_assert(sizeof(BFGTutorialPageTarget_RemovePage) == 0x000008, "Wrong size on BFGTutorialPageTarget_RemovePage");
static_assert(offsetof(BFGTutorialPageTarget_RemovePage, _pTutorialPage) == 0x000000, "Member 'BFGTutorialPageTarget_RemovePage::_pTutorialPage' has a wrong offset!");

// Function BFGCore.BFGTutorialPageTarget.SetStackSize
// 0x0004 (0x0004 - 0x0000)
struct BFGTutorialPageTarget_SetStackSize final
{
public:
	int32                                         _iStackSize;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGTutorialPageTarget_SetStackSize) == 0x000004, "Wrong alignment on BFGTutorialPageTarget_SetStackSize");
static_assert(sizeof(BFGTutorialPageTarget_SetStackSize) == 0x000004, "Wrong size on BFGTutorialPageTarget_SetStackSize");
static_assert(offsetof(BFGTutorialPageTarget_SetStackSize, _iStackSize) == 0x000000, "Member 'BFGTutorialPageTarget_SetStackSize::_iStackSize' has a wrong offset!");

// Function BFGCore.BFGUFOAbility_Drain.OnDrainDamageTicked
// 0x0004 (0x0004 - 0x0000)
struct BFGUFOAbility_Drain_OnDrainDamageTicked final
{
public:
	float                                         _fDamageAmount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOAbility_Drain_OnDrainDamageTicked) == 0x000004, "Wrong alignment on BFGUFOAbility_Drain_OnDrainDamageTicked");
static_assert(sizeof(BFGUFOAbility_Drain_OnDrainDamageTicked) == 0x000004, "Wrong size on BFGUFOAbility_Drain_OnDrainDamageTicked");
static_assert(offsetof(BFGUFOAbility_Drain_OnDrainDamageTicked, _fDamageAmount) == 0x000000, "Member 'BFGUFOAbility_Drain_OnDrainDamageTicked::_fDamageAmount' has a wrong offset!");

// Function BFGCore.BFGUFOAbility_Drain.GetSmashCounter
// 0x0004 (0x0004 - 0x0000)
struct BFGUFOAbility_Drain_GetSmashCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOAbility_Drain_GetSmashCounter) == 0x000004, "Wrong alignment on BFGUFOAbility_Drain_GetSmashCounter");
static_assert(sizeof(BFGUFOAbility_Drain_GetSmashCounter) == 0x000004, "Wrong size on BFGUFOAbility_Drain_GetSmashCounter");
static_assert(offsetof(BFGUFOAbility_Drain_GetSmashCounter, ReturnValue) == 0x000000, "Member 'BFGUFOAbility_Drain_GetSmashCounter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.GetCharacterLocation
// 0x0018 (0x0018 - 0x0000)
struct BFGUFOLandingSite_GetCharacterLocation final
{
public:
	struct FVector                                _vLocationOut;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rotationOut;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_GetCharacterLocation) == 0x000004, "Wrong alignment on BFGUFOLandingSite_GetCharacterLocation");
static_assert(sizeof(BFGUFOLandingSite_GetCharacterLocation) == 0x000018, "Wrong size on BFGUFOLandingSite_GetCharacterLocation");
static_assert(offsetof(BFGUFOLandingSite_GetCharacterLocation, _vLocationOut) == 0x000000, "Member 'BFGUFOLandingSite_GetCharacterLocation::_vLocationOut' has a wrong offset!");
static_assert(offsetof(BFGUFOLandingSite_GetCharacterLocation, _rotationOut) == 0x00000C, "Member 'BFGUFOLandingSite_GetCharacterLocation::_rotationOut' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.GetUFOLocation
// 0x0018 (0x0018 - 0x0000)
struct BFGUFOLandingSite_GetUFOLocation final
{
public:
	struct FVector                                _vLocationOut;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rotationOut;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_GetUFOLocation) == 0x000004, "Wrong alignment on BFGUFOLandingSite_GetUFOLocation");
static_assert(sizeof(BFGUFOLandingSite_GetUFOLocation) == 0x000018, "Wrong size on BFGUFOLandingSite_GetUFOLocation");
static_assert(offsetof(BFGUFOLandingSite_GetUFOLocation, _vLocationOut) == 0x000000, "Member 'BFGUFOLandingSite_GetUFOLocation::_vLocationOut' has a wrong offset!");
static_assert(offsetof(BFGUFOLandingSite_GetUFOLocation, _rotationOut) == 0x00000C, "Member 'BFGUFOLandingSite_GetUFOLocation::_rotationOut' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.OnScreenFadingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGUFOLandingSite_OnScreenFadingStateChanged final
{
public:
	bool                                          _bFaded;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_OnScreenFadingStateChanged) == 0x000001, "Wrong alignment on BFGUFOLandingSite_OnScreenFadingStateChanged");
static_assert(sizeof(BFGUFOLandingSite_OnScreenFadingStateChanged) == 0x000001, "Wrong size on BFGUFOLandingSite_OnScreenFadingStateChanged");
static_assert(offsetof(BFGUFOLandingSite_OnScreenFadingStateChanged, _bFaded) == 0x000000, "Member 'BFGUFOLandingSite_OnScreenFadingStateChanged::_bFaded' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.SetUnlocked
// 0x0001 (0x0001 - 0x0000)
struct BFGUFOLandingSite_SetUnlocked final
{
public:
	bool                                          _bUnlocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_SetUnlocked) == 0x000001, "Wrong alignment on BFGUFOLandingSite_SetUnlocked");
static_assert(sizeof(BFGUFOLandingSite_SetUnlocked) == 0x000001, "Wrong size on BFGUFOLandingSite_SetUnlocked");
static_assert(offsetof(BFGUFOLandingSite_SetUnlocked, _bUnlocked) == 0x000000, "Member 'BFGUFOLandingSite_SetUnlocked::_bUnlocked' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.GetDistanceToPlayer
// 0x0004 (0x0004 - 0x0000)
struct BFGUFOLandingSite_GetDistanceToPlayer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_GetDistanceToPlayer) == 0x000004, "Wrong alignment on BFGUFOLandingSite_GetDistanceToPlayer");
static_assert(sizeof(BFGUFOLandingSite_GetDistanceToPlayer) == 0x000004, "Wrong size on BFGUFOLandingSite_GetDistanceToPlayer");
static_assert(offsetof(BFGUFOLandingSite_GetDistanceToPlayer, ReturnValue) == 0x000000, "Member 'BFGUFOLandingSite_GetDistanceToPlayer::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.GetDistanceToUFO
// 0x0004 (0x0004 - 0x0000)
struct BFGUFOLandingSite_GetDistanceToUFO final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_GetDistanceToUFO) == 0x000004, "Wrong alignment on BFGUFOLandingSite_GetDistanceToUFO");
static_assert(sizeof(BFGUFOLandingSite_GetDistanceToUFO) == 0x000004, "Wrong size on BFGUFOLandingSite_GetDistanceToUFO");
static_assert(offsetof(BFGUFOLandingSite_GetDistanceToUFO, ReturnValue) == 0x000000, "Member 'BFGUFOLandingSite_GetDistanceToUFO::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.GetIsPlayerInNotificationRange
// 0x0001 (0x0001 - 0x0000)
struct BFGUFOLandingSite_GetIsPlayerInNotificationRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_GetIsPlayerInNotificationRange) == 0x000001, "Wrong alignment on BFGUFOLandingSite_GetIsPlayerInNotificationRange");
static_assert(sizeof(BFGUFOLandingSite_GetIsPlayerInNotificationRange) == 0x000001, "Wrong size on BFGUFOLandingSite_GetIsPlayerInNotificationRange");
static_assert(offsetof(BFGUFOLandingSite_GetIsPlayerInNotificationRange, ReturnValue) == 0x000000, "Member 'BFGUFOLandingSite_GetIsPlayerInNotificationRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.GetIsPlayerInRange
// 0x0001 (0x0001 - 0x0000)
struct BFGUFOLandingSite_GetIsPlayerInRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_GetIsPlayerInRange) == 0x000001, "Wrong alignment on BFGUFOLandingSite_GetIsPlayerInRange");
static_assert(sizeof(BFGUFOLandingSite_GetIsPlayerInRange) == 0x000001, "Wrong size on BFGUFOLandingSite_GetIsPlayerInRange");
static_assert(offsetof(BFGUFOLandingSite_GetIsPlayerInRange, ReturnValue) == 0x000000, "Member 'BFGUFOLandingSite_GetIsPlayerInRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.GetIsUFOInRange
// 0x0001 (0x0001 - 0x0000)
struct BFGUFOLandingSite_GetIsUFOInRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_GetIsUFOInRange) == 0x000001, "Wrong alignment on BFGUFOLandingSite_GetIsUFOInRange");
static_assert(sizeof(BFGUFOLandingSite_GetIsUFOInRange) == 0x000001, "Wrong size on BFGUFOLandingSite_GetIsUFOInRange");
static_assert(offsetof(BFGUFOLandingSite_GetIsUFOInRange, ReturnValue) == 0x000000, "Member 'BFGUFOLandingSite_GetIsUFOInRange::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUFOLandingSite.HasLandedUFO
// 0x0001 (0x0001 - 0x0000)
struct BFGUFOLandingSite_HasLandedUFO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOLandingSite_HasLandedUFO) == 0x000001, "Wrong alignment on BFGUFOLandingSite_HasLandedUFO");
static_assert(sizeof(BFGUFOLandingSite_HasLandedUFO) == 0x000001, "Wrong size on BFGUFOLandingSite_HasLandedUFO");
static_assert(offsetof(BFGUFOLandingSite_HasLandedUFO, ReturnValue) == 0x000000, "Member 'BFGUFOLandingSite_HasLandedUFO::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGUFOManager.OnFadingStateFinished
// 0x000C (0x000C - 0x0000)
struct BFGUFOManager_OnFadingStateFinished final
{
public:
	class FName                                   _strFadeIdentifier;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFadeOut;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGUFOManager_OnFadingStateFinished) == 0x000004, "Wrong alignment on BFGUFOManager_OnFadingStateFinished");
static_assert(sizeof(BFGUFOManager_OnFadingStateFinished) == 0x00000C, "Wrong size on BFGUFOManager_OnFadingStateFinished");
static_assert(offsetof(BFGUFOManager_OnFadingStateFinished, _strFadeIdentifier) == 0x000000, "Member 'BFGUFOManager_OnFadingStateFinished::_strFadeIdentifier' has a wrong offset!");
static_assert(offsetof(BFGUFOManager_OnFadingStateFinished, _bFadeOut) == 0x000008, "Member 'BFGUFOManager_OnFadingStateFinished::_bFadeOut' has a wrong offset!");

// Function BFGCore.BFGUFOManager.SetUFO
// 0x0008 (0x0008 - 0x0000)
struct BFGUFOManager_SetUFO final
{
public:
	class ABFGPlayerUFO*                          _pUFO;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOManager_SetUFO) == 0x000008, "Wrong alignment on BFGUFOManager_SetUFO");
static_assert(sizeof(BFGUFOManager_SetUFO) == 0x000008, "Wrong size on BFGUFOManager_SetUFO");
static_assert(offsetof(BFGUFOManager_SetUFO, _pUFO) == 0x000000, "Member 'BFGUFOManager_SetUFO::_pUFO' has a wrong offset!");

// Function BFGCore.BFGUFOManager.GetUFO
// 0x0008 (0x0008 - 0x0000)
struct BFGUFOManager_GetUFO final
{
public:
	class ABFGPlayerUFO*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGUFOManager_GetUFO) == 0x000008, "Wrong alignment on BFGUFOManager_GetUFO");
static_assert(sizeof(BFGUFOManager_GetUFO) == 0x000008, "Wrong size on BFGUFOManager_GetUFO");
static_assert(offsetof(BFGUFOManager_GetUFO, ReturnValue) == 0x000000, "Member 'BFGUFOManager_GetUFO::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_AITaskState_Complete.GetActionName_AITaskState_Complete
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_AITaskState_Complete_GetActionName_AITaskState_Complete final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_AITaskState_Complete_GetActionName_AITaskState_Complete) == 0x000004, "Wrong alignment on BFGVariableAction_AITaskState_Complete_GetActionName_AITaskState_Complete");
static_assert(sizeof(BFGVariableAction_AITaskState_Complete_GetActionName_AITaskState_Complete) == 0x000008, "Wrong size on BFGVariableAction_AITaskState_Complete_GetActionName_AITaskState_Complete");
static_assert(offsetof(BFGVariableAction_AITaskState_Complete_GetActionName_AITaskState_Complete, ReturnValue) == 0x000000, "Member 'BFGVariableAction_AITaskState_Complete_GetActionName_AITaskState_Complete::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Boolean_SetTrue.GetActionName_BooleanSetTrue
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Boolean_SetTrue_GetActionName_BooleanSetTrue final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Boolean_SetTrue_GetActionName_BooleanSetTrue) == 0x000004, "Wrong alignment on BFGVariableAction_Boolean_SetTrue_GetActionName_BooleanSetTrue");
static_assert(sizeof(BFGVariableAction_Boolean_SetTrue_GetActionName_BooleanSetTrue) == 0x000008, "Wrong size on BFGVariableAction_Boolean_SetTrue_GetActionName_BooleanSetTrue");
static_assert(offsetof(BFGVariableAction_Boolean_SetTrue_GetActionName_BooleanSetTrue, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Boolean_SetTrue_GetActionName_BooleanSetTrue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_MissionGroup_Abort.GetActionName_MissionGroupAbort
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_MissionGroup_Abort_GetActionName_MissionGroupAbort final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_MissionGroup_Abort_GetActionName_MissionGroupAbort) == 0x000004, "Wrong alignment on BFGVariableAction_MissionGroup_Abort_GetActionName_MissionGroupAbort");
static_assert(sizeof(BFGVariableAction_MissionGroup_Abort_GetActionName_MissionGroupAbort) == 0x000008, "Wrong size on BFGVariableAction_MissionGroup_Abort_GetActionName_MissionGroupAbort");
static_assert(offsetof(BFGVariableAction_MissionGroup_Abort_GetActionName_MissionGroupAbort, ReturnValue) == 0x000000, "Member 'BFGVariableAction_MissionGroup_Abort_GetActionName_MissionGroupAbort::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Quest_MakeAvailable.GetActionName_QuestMakeAvailabe
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Quest_MakeAvailable_GetActionName_QuestMakeAvailabe final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Quest_MakeAvailable_GetActionName_QuestMakeAvailabe) == 0x000004, "Wrong alignment on BFGVariableAction_Quest_MakeAvailable_GetActionName_QuestMakeAvailabe");
static_assert(sizeof(BFGVariableAction_Quest_MakeAvailable_GetActionName_QuestMakeAvailabe) == 0x000008, "Wrong size on BFGVariableAction_Quest_MakeAvailable_GetActionName_QuestMakeAvailabe");
static_assert(offsetof(BFGVariableAction_Quest_MakeAvailable_GetActionName_QuestMakeAvailabe, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Quest_MakeAvailable_GetActionName_QuestMakeAvailabe::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Quest_Accept.GetActionName_QuestAccept
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Quest_Accept_GetActionName_QuestAccept final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Quest_Accept_GetActionName_QuestAccept) == 0x000004, "Wrong alignment on BFGVariableAction_Quest_Accept_GetActionName_QuestAccept");
static_assert(sizeof(BFGVariableAction_Quest_Accept_GetActionName_QuestAccept) == 0x000008, "Wrong size on BFGVariableAction_Quest_Accept_GetActionName_QuestAccept");
static_assert(offsetof(BFGVariableAction_Quest_Accept_GetActionName_QuestAccept, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Quest_Accept_GetActionName_QuestAccept::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Quest_Fail.GetActionName_QuestFail
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Quest_Fail_GetActionName_QuestFail final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Quest_Fail_GetActionName_QuestFail) == 0x000004, "Wrong alignment on BFGVariableAction_Quest_Fail_GetActionName_QuestFail");
static_assert(sizeof(BFGVariableAction_Quest_Fail_GetActionName_QuestFail) == 0x000008, "Wrong size on BFGVariableAction_Quest_Fail_GetActionName_QuestFail");
static_assert(offsetof(BFGVariableAction_Quest_Fail_GetActionName_QuestFail, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Quest_Fail_GetActionName_QuestFail::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_QuestCounter_Increase.GetActionName_QuestCounterIncrease
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_QuestCounter_Increase_GetActionName_QuestCounterIncrease final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_QuestCounter_Increase_GetActionName_QuestCounterIncrease) == 0x000004, "Wrong alignment on BFGVariableAction_QuestCounter_Increase_GetActionName_QuestCounterIncrease");
static_assert(sizeof(BFGVariableAction_QuestCounter_Increase_GetActionName_QuestCounterIncrease) == 0x000008, "Wrong size on BFGVariableAction_QuestCounter_Increase_GetActionName_QuestCounterIncrease");
static_assert(offsetof(BFGVariableAction_QuestCounter_Increase_GetActionName_QuestCounterIncrease, ReturnValue) == 0x000000, "Member 'BFGVariableAction_QuestCounter_Increase_GetActionName_QuestCounterIncrease::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Timer_Start.GetActionName_TimerStart
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Timer_Start_GetActionName_TimerStart final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Timer_Start_GetActionName_TimerStart) == 0x000004, "Wrong alignment on BFGVariableAction_Timer_Start_GetActionName_TimerStart");
static_assert(sizeof(BFGVariableAction_Timer_Start_GetActionName_TimerStart) == 0x000008, "Wrong size on BFGVariableAction_Timer_Start_GetActionName_TimerStart");
static_assert(offsetof(BFGVariableAction_Timer_Start_GetActionName_TimerStart, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Timer_Start_GetActionName_TimerStart::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableAction_Timer_Run.GetActionName_TimerRun
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableAction_Timer_Run_GetActionName_TimerRun final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableAction_Timer_Run_GetActionName_TimerRun) == 0x000004, "Wrong alignment on BFGVariableAction_Timer_Run_GetActionName_TimerRun");
static_assert(sizeof(BFGVariableAction_Timer_Run_GetActionName_TimerRun) == 0x000008, "Wrong size on BFGVariableAction_Timer_Run_GetActionName_TimerRun");
static_assert(offsetof(BFGVariableAction_Timer_Run_GetActionName_TimerRun, ReturnValue) == 0x000000, "Member 'BFGVariableAction_Timer_Run_GetActionName_TimerRun::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.ApplyActionWithName
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableMirror_ApplyActionWithName final
{
public:
	const class UBFGVariable*                     _pVariable;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _actionName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_ApplyActionWithName) == 0x000008, "Wrong alignment on BFGVariableMirror_ApplyActionWithName");
static_assert(sizeof(BFGVariableMirror_ApplyActionWithName) == 0x000010, "Wrong size on BFGVariableMirror_ApplyActionWithName");
static_assert(offsetof(BFGVariableMirror_ApplyActionWithName, _pVariable) == 0x000000, "Member 'BFGVariableMirror_ApplyActionWithName::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_ApplyActionWithName, _actionName) == 0x000008, "Member 'BFGVariableMirror_ApplyActionWithName::_actionName' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.SetValue
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableMirror_SetValue final
{
public:
	const class UBFGVariable*                     _pVariable;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _value;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bReplicate;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDoCallbacks;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVariableMirror_SetValue) == 0x000008, "Wrong alignment on BFGVariableMirror_SetValue");
static_assert(sizeof(BFGVariableMirror_SetValue) == 0x000010, "Wrong size on BFGVariableMirror_SetValue");
static_assert(offsetof(BFGVariableMirror_SetValue, _pVariable) == 0x000000, "Member 'BFGVariableMirror_SetValue::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_SetValue, _value) == 0x000008, "Member 'BFGVariableMirror_SetValue::_value' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_SetValue, _bReplicate) == 0x00000C, "Member 'BFGVariableMirror_SetValue::_bReplicate' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_SetValue, _bDoCallbacks) == 0x00000D, "Member 'BFGVariableMirror_SetValue::_bDoCallbacks' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_SetValue, ReturnValue) == 0x00000E, "Member 'BFGVariableMirror_SetValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GameSystem_VarMirrorLogName
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableMirror_GameSystem_VarMirrorLogName final
{
public:
	class FName                                   _strPartialVarName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GameSystem_VarMirrorLogName) == 0x000004, "Wrong alignment on BFGVariableMirror_GameSystem_VarMirrorLogName");
static_assert(sizeof(BFGVariableMirror_GameSystem_VarMirrorLogName) == 0x000008, "Wrong size on BFGVariableMirror_GameSystem_VarMirrorLogName");
static_assert(offsetof(BFGVariableMirror_GameSystem_VarMirrorLogName, _strPartialVarName) == 0x000000, "Member 'BFGVariableMirror_GameSystem_VarMirrorLogName::_strPartialVarName' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetAction
// 0x0018 (0x0018 - 0x0000)
struct BFGVariableMirror_GetAction final
{
public:
	struct FGuid                                  _actionGuid;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGVariableAction*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GetAction) == 0x000008, "Wrong alignment on BFGVariableMirror_GetAction");
static_assert(sizeof(BFGVariableMirror_GetAction) == 0x000018, "Wrong size on BFGVariableMirror_GetAction");
static_assert(offsetof(BFGVariableMirror_GetAction, _actionGuid) == 0x000000, "Member 'BFGVariableMirror_GetAction::_actionGuid' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetAction, ReturnValue) == 0x000010, "Member 'BFGVariableMirror_GetAction::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetActionByName
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableMirror_GetActionByName final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGVariableAction*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GetActionByName) == 0x000008, "Wrong alignment on BFGVariableMirror_GetActionByName");
static_assert(sizeof(BFGVariableMirror_GetActionByName) == 0x000010, "Wrong size on BFGVariableMirror_GetActionByName");
static_assert(offsetof(BFGVariableMirror_GetActionByName, _name) == 0x000000, "Member 'BFGVariableMirror_GetActionByName::_name' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetActionByName, ReturnValue) == 0x000008, "Member 'BFGVariableMirror_GetActionByName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetAllVariables
// 0x0050 (0x0050 - 0x0000)
struct BFGVariableMirror_GetAllVariables final
{
public:
	TMap<struct FGuid, class UBFGVariable*>       ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GetAllVariables) == 0x000008, "Wrong alignment on BFGVariableMirror_GetAllVariables");
static_assert(sizeof(BFGVariableMirror_GetAllVariables) == 0x000050, "Wrong size on BFGVariableMirror_GetAllVariables");
static_assert(offsetof(BFGVariableMirror_GetAllVariables, ReturnValue) == 0x000000, "Member 'BFGVariableMirror_GetAllVariables::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableMirror_GetSettings final
{
public:
	class UBFGVariableMirror_Settings*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GetSettings) == 0x000008, "Wrong alignment on BFGVariableMirror_GetSettings");
static_assert(sizeof(BFGVariableMirror_GetSettings) == 0x000008, "Wrong size on BFGVariableMirror_GetSettings");
static_assert(offsetof(BFGVariableMirror_GetSettings, ReturnValue) == 0x000000, "Member 'BFGVariableMirror_GetSettings::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetValue
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableMirror_GetValue final
{
public:
	const class UBFGVariable*                     _pVariable;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVariableMirror_GetValue) == 0x000008, "Wrong alignment on BFGVariableMirror_GetValue");
static_assert(sizeof(BFGVariableMirror_GetValue) == 0x000010, "Wrong size on BFGVariableMirror_GetValue");
static_assert(offsetof(BFGVariableMirror_GetValue, _pVariable) == 0x000000, "Member 'BFGVariableMirror_GetValue::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetValue, ReturnValue) == 0x000008, "Member 'BFGVariableMirror_GetValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetValueName
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableMirror_GetValueName final
{
public:
	const class UBFGVariable*                     _pVariable;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GetValueName) == 0x000008, "Wrong alignment on BFGVariableMirror_GetValueName");
static_assert(sizeof(BFGVariableMirror_GetValueName) == 0x000010, "Wrong size on BFGVariableMirror_GetValueName");
static_assert(offsetof(BFGVariableMirror_GetValueName, _pVariable) == 0x000000, "Member 'BFGVariableMirror_GetValueName::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetValueName, ReturnValue) == 0x000008, "Member 'BFGVariableMirror_GetValueName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetValueNameForValue
// 0x0018 (0x0018 - 0x0000)
struct BFGVariableMirror_GetValueNameForValue final
{
public:
	const class UBFGVariable*                     _pVariable;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _value;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVariableMirror_GetValueNameForValue) == 0x000008, "Wrong alignment on BFGVariableMirror_GetValueNameForValue");
static_assert(sizeof(BFGVariableMirror_GetValueNameForValue) == 0x000018, "Wrong size on BFGVariableMirror_GetValueNameForValue");
static_assert(offsetof(BFGVariableMirror_GetValueNameForValue, _pVariable) == 0x000000, "Member 'BFGVariableMirror_GetValueNameForValue::_pVariable' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetValueNameForValue, _value) == 0x000008, "Member 'BFGVariableMirror_GetValueNameForValue::_value' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetValueNameForValue, ReturnValue) == 0x00000C, "Member 'BFGVariableMirror_GetValueNameForValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetVariable
// 0x0018 (0x0018 - 0x0000)
struct BFGVariableMirror_GetVariable final
{
public:
	struct FGuid                                  _variableGuid;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGVariable*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GetVariable) == 0x000008, "Wrong alignment on BFGVariableMirror_GetVariable");
static_assert(sizeof(BFGVariableMirror_GetVariable) == 0x000018, "Wrong size on BFGVariableMirror_GetVariable");
static_assert(offsetof(BFGVariableMirror_GetVariable, _variableGuid) == 0x000000, "Member 'BFGVariableMirror_GetVariable::_variableGuid' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetVariable, ReturnValue) == 0x000010, "Member 'BFGVariableMirror_GetVariable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetVariableByName
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableMirror_GetVariableByName final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGVariable*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GetVariableByName) == 0x000008, "Wrong alignment on BFGVariableMirror_GetVariableByName");
static_assert(sizeof(BFGVariableMirror_GetVariableByName) == 0x000010, "Wrong size on BFGVariableMirror_GetVariableByName");
static_assert(offsetof(BFGVariableMirror_GetVariableByName, _name) == 0x000000, "Member 'BFGVariableMirror_GetVariableByName::_name' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetVariableByName, ReturnValue) == 0x000008, "Member 'BFGVariableMirror_GetVariableByName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableMirror.GetVariableType
// 0x0010 (0x0010 - 0x0000)
struct BFGVariableMirror_GetVariableType final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGVariableType*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableMirror_GetVariableType) == 0x000008, "Wrong alignment on BFGVariableMirror_GetVariableType");
static_assert(sizeof(BFGVariableMirror_GetVariableType) == 0x000010, "Wrong size on BFGVariableMirror_GetVariableType");
static_assert(offsetof(BFGVariableMirror_GetVariableType, _name) == 0x000000, "Member 'BFGVariableMirror_GetVariableType::_name' has a wrong offset!");
static_assert(offsetof(BFGVariableMirror_GetVariableType, ReturnValue) == 0x000008, "Member 'BFGVariableMirror_GetVariableType::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_AITaskState.GetState_AITaskState_Available
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_AITaskState_GetState_AITaskState_Available final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_AITaskState_GetState_AITaskState_Available) == 0x000004, "Wrong alignment on BFGVariableType_AITaskState_GetState_AITaskState_Available");
static_assert(sizeof(BFGVariableType_AITaskState_GetState_AITaskState_Available) == 0x000008, "Wrong size on BFGVariableType_AITaskState_GetState_AITaskState_Available");
static_assert(offsetof(BFGVariableType_AITaskState_GetState_AITaskState_Available, ReturnValue) == 0x000000, "Member 'BFGVariableType_AITaskState_GetState_AITaskState_Available::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_AITaskState.GetState_AITaskState_Completed
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_AITaskState_GetState_AITaskState_Completed final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_AITaskState_GetState_AITaskState_Completed) == 0x000004, "Wrong alignment on BFGVariableType_AITaskState_GetState_AITaskState_Completed");
static_assert(sizeof(BFGVariableType_AITaskState_GetState_AITaskState_Completed) == 0x000008, "Wrong size on BFGVariableType_AITaskState_GetState_AITaskState_Completed");
static_assert(offsetof(BFGVariableType_AITaskState_GetState_AITaskState_Completed, ReturnValue) == 0x000000, "Member 'BFGVariableType_AITaskState_GetState_AITaskState_Completed::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_AITaskState.GetState_AITaskState_Executing
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_AITaskState_GetState_AITaskState_Executing final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_AITaskState_GetState_AITaskState_Executing) == 0x000004, "Wrong alignment on BFGVariableType_AITaskState_GetState_AITaskState_Executing");
static_assert(sizeof(BFGVariableType_AITaskState_GetState_AITaskState_Executing) == 0x000008, "Wrong size on BFGVariableType_AITaskState_GetState_AITaskState_Executing");
static_assert(offsetof(BFGVariableType_AITaskState_GetState_AITaskState_Executing, ReturnValue) == 0x000000, "Member 'BFGVariableType_AITaskState_GetState_AITaskState_Executing::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_AITaskState.GetTypeName_AITaskState
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_AITaskState_GetTypeName_AITaskState final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_AITaskState_GetTypeName_AITaskState) == 0x000004, "Wrong alignment on BFGVariableType_AITaskState_GetTypeName_AITaskState");
static_assert(sizeof(BFGVariableType_AITaskState_GetTypeName_AITaskState) == 0x000008, "Wrong size on BFGVariableType_AITaskState_GetTypeName_AITaskState");
static_assert(offsetof(BFGVariableType_AITaskState_GetTypeName_AITaskState, ReturnValue) == 0x000000, "Member 'BFGVariableType_AITaskState_GetTypeName_AITaskState::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Boolean.GetState_BooleanFalse
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Boolean_GetState_BooleanFalse final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Boolean_GetState_BooleanFalse) == 0x000004, "Wrong alignment on BFGVariableType_Boolean_GetState_BooleanFalse");
static_assert(sizeof(BFGVariableType_Boolean_GetState_BooleanFalse) == 0x000008, "Wrong size on BFGVariableType_Boolean_GetState_BooleanFalse");
static_assert(offsetof(BFGVariableType_Boolean_GetState_BooleanFalse, ReturnValue) == 0x000000, "Member 'BFGVariableType_Boolean_GetState_BooleanFalse::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Boolean.GetState_BooleanTrue
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Boolean_GetState_BooleanTrue final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Boolean_GetState_BooleanTrue) == 0x000004, "Wrong alignment on BFGVariableType_Boolean_GetState_BooleanTrue");
static_assert(sizeof(BFGVariableType_Boolean_GetState_BooleanTrue) == 0x000008, "Wrong size on BFGVariableType_Boolean_GetState_BooleanTrue");
static_assert(offsetof(BFGVariableType_Boolean_GetState_BooleanTrue, ReturnValue) == 0x000000, "Member 'BFGVariableType_Boolean_GetState_BooleanTrue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Boolean.GetTypeName_Boolean
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Boolean_GetTypeName_Boolean final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Boolean_GetTypeName_Boolean) == 0x000004, "Wrong alignment on BFGVariableType_Boolean_GetTypeName_Boolean");
static_assert(sizeof(BFGVariableType_Boolean_GetTypeName_Boolean) == 0x000008, "Wrong size on BFGVariableType_Boolean_GetTypeName_Boolean");
static_assert(offsetof(BFGVariableType_Boolean_GetTypeName_Boolean, ReturnValue) == 0x000000, "Member 'BFGVariableType_Boolean_GetTypeName_Boolean::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_QuestCounter.GetMaxSupported_QuestCounterQuantity
// 0x0004 (0x0004 - 0x0000)
struct BFGVariableType_QuestCounter_GetMaxSupported_QuestCounterQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_QuestCounter_GetMaxSupported_QuestCounterQuantity) == 0x000004, "Wrong alignment on BFGVariableType_QuestCounter_GetMaxSupported_QuestCounterQuantity");
static_assert(sizeof(BFGVariableType_QuestCounter_GetMaxSupported_QuestCounterQuantity) == 0x000004, "Wrong size on BFGVariableType_QuestCounter_GetMaxSupported_QuestCounterQuantity");
static_assert(offsetof(BFGVariableType_QuestCounter_GetMaxSupported_QuestCounterQuantity, ReturnValue) == 0x000000, "Member 'BFGVariableType_QuestCounter_GetMaxSupported_QuestCounterQuantity::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_QuestCounter.GetQuestCounterForValue
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_QuestCounter_GetQuestCounterForValue final
{
public:
	int32                                         _iValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_QuestCounter_GetQuestCounterForValue) == 0x000004, "Wrong alignment on BFGVariableType_QuestCounter_GetQuestCounterForValue");
static_assert(sizeof(BFGVariableType_QuestCounter_GetQuestCounterForValue) == 0x000008, "Wrong size on BFGVariableType_QuestCounter_GetQuestCounterForValue");
static_assert(offsetof(BFGVariableType_QuestCounter_GetQuestCounterForValue, _iValue) == 0x000000, "Member 'BFGVariableType_QuestCounter_GetQuestCounterForValue::_iValue' has a wrong offset!");
static_assert(offsetof(BFGVariableType_QuestCounter_GetQuestCounterForValue, ReturnValue) == 0x000004, "Member 'BFGVariableType_QuestCounter_GetQuestCounterForValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_QuestCounter.GetTypeName_QuestCounter
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_QuestCounter_GetTypeName_QuestCounter final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_QuestCounter_GetTypeName_QuestCounter) == 0x000004, "Wrong alignment on BFGVariableType_QuestCounter_GetTypeName_QuestCounter");
static_assert(sizeof(BFGVariableType_QuestCounter_GetTypeName_QuestCounter) == 0x000008, "Wrong size on BFGVariableType_QuestCounter_GetTypeName_QuestCounter");
static_assert(offsetof(BFGVariableType_QuestCounter_GetTypeName_QuestCounter, ReturnValue) == 0x000000, "Member 'BFGVariableType_QuestCounter_GetTypeName_QuestCounter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_QuestCounter.GetValueForQuestCounter
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_QuestCounter_GetValueForQuestCounter final
{
public:
	int32                                         _iQuantity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_QuestCounter_GetValueForQuestCounter) == 0x000004, "Wrong alignment on BFGVariableType_QuestCounter_GetValueForQuestCounter");
static_assert(sizeof(BFGVariableType_QuestCounter_GetValueForQuestCounter) == 0x000008, "Wrong size on BFGVariableType_QuestCounter_GetValueForQuestCounter");
static_assert(offsetof(BFGVariableType_QuestCounter_GetValueForQuestCounter, _iQuantity) == 0x000000, "Member 'BFGVariableType_QuestCounter_GetValueForQuestCounter::_iQuantity' has a wrong offset!");
static_assert(offsetof(BFGVariableType_QuestCounter_GetValueForQuestCounter, ReturnValue) == 0x000004, "Member 'BFGVariableType_QuestCounter_GetValueForQuestCounter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_QuestCounter.GetValueNameByQuestCounter
// 0x000C (0x000C - 0x0000)
struct BFGVariableType_QuestCounter_GetValueNameByQuestCounter final
{
public:
	int32                                         _iQuantity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_QuestCounter_GetValueNameByQuestCounter) == 0x000004, "Wrong alignment on BFGVariableType_QuestCounter_GetValueNameByQuestCounter");
static_assert(sizeof(BFGVariableType_QuestCounter_GetValueNameByQuestCounter) == 0x00000C, "Wrong size on BFGVariableType_QuestCounter_GetValueNameByQuestCounter");
static_assert(offsetof(BFGVariableType_QuestCounter_GetValueNameByQuestCounter, _iQuantity) == 0x000000, "Member 'BFGVariableType_QuestCounter_GetValueNameByQuestCounter::_iQuantity' has a wrong offset!");
static_assert(offsetof(BFGVariableType_QuestCounter_GetValueNameByQuestCounter, ReturnValue) == 0x000004, "Member 'BFGVariableType_QuestCounter_GetValueNameByQuestCounter::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Timer.GetState_TimerEnd
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Timer_GetState_TimerEnd final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Timer_GetState_TimerEnd) == 0x000004, "Wrong alignment on BFGVariableType_Timer_GetState_TimerEnd");
static_assert(sizeof(BFGVariableType_Timer_GetState_TimerEnd) == 0x000008, "Wrong size on BFGVariableType_Timer_GetState_TimerEnd");
static_assert(offsetof(BFGVariableType_Timer_GetState_TimerEnd, ReturnValue) == 0x000000, "Member 'BFGVariableType_Timer_GetState_TimerEnd::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Timer.GetState_TimerRunning
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Timer_GetState_TimerRunning final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Timer_GetState_TimerRunning) == 0x000004, "Wrong alignment on BFGVariableType_Timer_GetState_TimerRunning");
static_assert(sizeof(BFGVariableType_Timer_GetState_TimerRunning) == 0x000008, "Wrong size on BFGVariableType_Timer_GetState_TimerRunning");
static_assert(offsetof(BFGVariableType_Timer_GetState_TimerRunning, ReturnValue) == 0x000000, "Member 'BFGVariableType_Timer_GetState_TimerRunning::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Timer.GetState_TimerStart
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Timer_GetState_TimerStart final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Timer_GetState_TimerStart) == 0x000004, "Wrong alignment on BFGVariableType_Timer_GetState_TimerStart");
static_assert(sizeof(BFGVariableType_Timer_GetState_TimerStart) == 0x000008, "Wrong size on BFGVariableType_Timer_GetState_TimerStart");
static_assert(offsetof(BFGVariableType_Timer_GetState_TimerStart, ReturnValue) == 0x000000, "Member 'BFGVariableType_Timer_GetState_TimerStart::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Timer.GetState_TimerStopped
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Timer_GetState_TimerStopped final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Timer_GetState_TimerStopped) == 0x000004, "Wrong alignment on BFGVariableType_Timer_GetState_TimerStopped");
static_assert(sizeof(BFGVariableType_Timer_GetState_TimerStopped) == 0x000008, "Wrong size on BFGVariableType_Timer_GetState_TimerStopped");
static_assert(offsetof(BFGVariableType_Timer_GetState_TimerStopped, ReturnValue) == 0x000000, "Member 'BFGVariableType_Timer_GetState_TimerStopped::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVariableType_Timer.GetTypeName_Timer
// 0x0008 (0x0008 - 0x0000)
struct BFGVariableType_Timer_GetTypeName_Timer final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVariableType_Timer_GetTypeName_Timer) == 0x000004, "Wrong alignment on BFGVariableType_Timer_GetTypeName_Timer");
static_assert(sizeof(BFGVariableType_Timer_GetTypeName_Timer) == 0x000008, "Wrong size on BFGVariableType_Timer_GetTypeName_Timer");
static_assert(offsetof(BFGVariableType_Timer_GetTypeName_Timer, ReturnValue) == 0x000000, "Member 'BFGVariableType_Timer_GetTypeName_Timer::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVehicleInterface.DestroySpotLight
// 0x0002 (0x0002 - 0x0000)
struct BFGVehicleInterface_DestroySpotLight final
{
public:
	bool                                          _bRightSpot;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bLeftSpot;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVehicleInterface_DestroySpotLight) == 0x000001, "Wrong alignment on BFGVehicleInterface_DestroySpotLight");
static_assert(sizeof(BFGVehicleInterface_DestroySpotLight) == 0x000002, "Wrong size on BFGVehicleInterface_DestroySpotLight");
static_assert(offsetof(BFGVehicleInterface_DestroySpotLight, _bRightSpot) == 0x000000, "Member 'BFGVehicleInterface_DestroySpotLight::_bRightSpot' has a wrong offset!");
static_assert(offsetof(BFGVehicleInterface_DestroySpotLight, _bLeftSpot) == 0x000001, "Member 'BFGVehicleInterface_DestroySpotLight::_bLeftSpot' has a wrong offset!");

// Function BFGCore.BFGVehicleInterface.DetachVehicleComponent
// 0x0018 (0x0018 - 0x0000)
struct BFGVehicleInterface_DetachVehicleComponent final
{
public:
	class UStaticMeshComponent*                   MeshToDetach;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseAngularJitter;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityFactorDivisor;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVehicleInterface_DetachVehicleComponent) == 0x000008, "Wrong alignment on BFGVehicleInterface_DetachVehicleComponent");
static_assert(sizeof(BFGVehicleInterface_DetachVehicleComponent) == 0x000018, "Wrong size on BFGVehicleInterface_DetachVehicleComponent");
static_assert(offsetof(BFGVehicleInterface_DetachVehicleComponent, MeshToDetach) == 0x000000, "Member 'BFGVehicleInterface_DetachVehicleComponent::MeshToDetach' has a wrong offset!");
static_assert(offsetof(BFGVehicleInterface_DetachVehicleComponent, ImpulseAngularJitter) == 0x000008, "Member 'BFGVehicleInterface_DetachVehicleComponent::ImpulseAngularJitter' has a wrong offset!");
static_assert(offsetof(BFGVehicleInterface_DetachVehicleComponent, VelocityFactorDivisor) == 0x00000C, "Member 'BFGVehicleInterface_DetachVehicleComponent::VelocityFactorDivisor' has a wrong offset!");
static_assert(offsetof(BFGVehicleInterface_DetachVehicleComponent, ReturnValue) == 0x000010, "Member 'BFGVehicleInterface_DetachVehicleComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVehicleInterface.ReleaseVehicleComponent
// 0x0010 (0x0010 - 0x0000)
struct BFGVehicleInterface_ReleaseVehicleComponent final
{
public:
	class UStaticMeshComponent*                   MeshToRelease;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVehicleInterface_ReleaseVehicleComponent) == 0x000008, "Wrong alignment on BFGVehicleInterface_ReleaseVehicleComponent");
static_assert(sizeof(BFGVehicleInterface_ReleaseVehicleComponent) == 0x000010, "Wrong size on BFGVehicleInterface_ReleaseVehicleComponent");
static_assert(offsetof(BFGVehicleInterface_ReleaseVehicleComponent, MeshToRelease) == 0x000000, "Member 'BFGVehicleInterface_ReleaseVehicleComponent::MeshToRelease' has a wrong offset!");
static_assert(offsetof(BFGVehicleInterface_ReleaseVehicleComponent, ReturnValue) == 0x000008, "Member 'BFGVehicleInterface_ReleaseVehicleComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVehicleInterface.SetEngineMeshesHiddenInGame
// 0x0001 (0x0001 - 0x0000)
struct BFGVehicleInterface_SetEngineMeshesHiddenInGame final
{
public:
	bool                                          _bHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVehicleInterface_SetEngineMeshesHiddenInGame) == 0x000001, "Wrong alignment on BFGVehicleInterface_SetEngineMeshesHiddenInGame");
static_assert(sizeof(BFGVehicleInterface_SetEngineMeshesHiddenInGame) == 0x000001, "Wrong size on BFGVehicleInterface_SetEngineMeshesHiddenInGame");
static_assert(offsetof(BFGVehicleInterface_SetEngineMeshesHiddenInGame, _bHidden) == 0x000000, "Member 'BFGVehicleInterface_SetEngineMeshesHiddenInGame::_bHidden' has a wrong offset!");

// Function BFGCore.BFGVehiclePassengerContainer.OnInteractAnimationChangedCallback
// 0x00D0 (0x00D0 - 0x0000)
struct BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback final
{
public:
	TScriptInterface<class IBFGInteractAnimationPlayerInterface> _pInteractAnimationPlayer;                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _newData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBFGInteractAnimationData              _oldData;                                          // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback) == 0x000008, "Wrong alignment on BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback");
static_assert(sizeof(BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback) == 0x0000D0, "Wrong size on BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback");
static_assert(offsetof(BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback, _pInteractAnimationPlayer) == 0x000000, "Member 'BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback::_pInteractAnimationPlayer' has a wrong offset!");
static_assert(offsetof(BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback, _newData) == 0x000010, "Member 'BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback::_newData' has a wrong offset!");
static_assert(offsetof(BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback, _oldData) == 0x000070, "Member 'BFGVehiclePassengerContainer_OnInteractAnimationChangedCallback::_oldData' has a wrong offset!");

// Function BFGCore.BFGVehiclePassengerContainer.OnPassengerKilled
// 0x0018 (0x0018 - 0x0000)
struct BFGVehiclePassengerContainer_OnPassengerKilled final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _pActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAttached;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVehiclePassengerContainer_OnPassengerKilled) == 0x000008, "Wrong alignment on BFGVehiclePassengerContainer_OnPassengerKilled");
static_assert(sizeof(BFGVehiclePassengerContainer_OnPassengerKilled) == 0x000018, "Wrong size on BFGVehiclePassengerContainer_OnPassengerKilled");
static_assert(offsetof(BFGVehiclePassengerContainer_OnPassengerKilled, _pAgent) == 0x000000, "Member 'BFGVehiclePassengerContainer_OnPassengerKilled::_pAgent' has a wrong offset!");
static_assert(offsetof(BFGVehiclePassengerContainer_OnPassengerKilled, _pActor) == 0x000008, "Member 'BFGVehiclePassengerContainer_OnPassengerKilled::_pActor' has a wrong offset!");
static_assert(offsetof(BFGVehiclePassengerContainer_OnPassengerKilled, _bAttached) == 0x000010, "Member 'BFGVehiclePassengerContainer_OnPassengerKilled::_bAttached' has a wrong offset!");

// Function BFGCore.BFGVehiclePassengerContainer.OnVehicleDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BFGVehiclePassengerContainer_OnVehicleDestroyed final
{
public:
	class UBFGNetworkPathAgent*                   _pAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVehiclePassengerContainer_OnVehicleDestroyed) == 0x000008, "Wrong alignment on BFGVehiclePassengerContainer_OnVehicleDestroyed");
static_assert(sizeof(BFGVehiclePassengerContainer_OnVehicleDestroyed) == 0x000008, "Wrong size on BFGVehiclePassengerContainer_OnVehicleDestroyed");
static_assert(offsetof(BFGVehiclePassengerContainer_OnVehicleDestroyed, _pAgent) == 0x000000, "Member 'BFGVehiclePassengerContainer_OnVehicleDestroyed::_pAgent' has a wrong offset!");

// Function BFGCore.BFGVirtualCrowdManager.GetCrowdActor
// 0x0008 (0x0008 - 0x0000)
struct BFGVirtualCrowdManager_GetCrowdActor final
{
public:
	class ABFGVirtualCrowd*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVirtualCrowdManager_GetCrowdActor) == 0x000008, "Wrong alignment on BFGVirtualCrowdManager_GetCrowdActor");
static_assert(sizeof(BFGVirtualCrowdManager_GetCrowdActor) == 0x000008, "Wrong size on BFGVirtualCrowdManager_GetCrowdActor");
static_assert(offsetof(BFGVirtualCrowdManager_GetCrowdActor, ReturnValue) == 0x000000, "Member 'BFGVirtualCrowdManager_GetCrowdActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverPlaybackActor.CancelItem_NetMulticast
// 0x0004 (0x0004 - 0x0000)
struct BFGVoiceoverPlaybackActor_CancelItem_NetMulticast final
{
public:
	float                                         _fOverrideFadeoutDuration;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverPlaybackActor_CancelItem_NetMulticast) == 0x000004, "Wrong alignment on BFGVoiceoverPlaybackActor_CancelItem_NetMulticast");
static_assert(sizeof(BFGVoiceoverPlaybackActor_CancelItem_NetMulticast) == 0x000004, "Wrong size on BFGVoiceoverPlaybackActor_CancelItem_NetMulticast");
static_assert(offsetof(BFGVoiceoverPlaybackActor_CancelItem_NetMulticast, _fOverrideFadeoutDuration) == 0x000000, "Member 'BFGVoiceoverPlaybackActor_CancelItem_NetMulticast::_fOverrideFadeoutDuration' has a wrong offset!");

// Function BFGCore.BFGVoiceoverPlaybackActor.PlayItem_NetMulticast
// 0x0130 (0x0130 - 0x0000)
struct BFGVoiceoverPlaybackActor_PlayItem_NetMulticast final
{
public:
	struct FBFGVoiceoverPlaybackRequest           _queueItem;                                        // 0x0000(0x0130)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverPlaybackActor_PlayItem_NetMulticast) == 0x000008, "Wrong alignment on BFGVoiceoverPlaybackActor_PlayItem_NetMulticast");
static_assert(sizeof(BFGVoiceoverPlaybackActor_PlayItem_NetMulticast) == 0x000130, "Wrong size on BFGVoiceoverPlaybackActor_PlayItem_NetMulticast");
static_assert(offsetof(BFGVoiceoverPlaybackActor_PlayItem_NetMulticast, _queueItem) == 0x000000, "Member 'BFGVoiceoverPlaybackActor_PlayItem_NetMulticast::_queueItem' has a wrong offset!");

// Function BFGCore.BFGVoiceoverPlaybackActor.SetPauseItem_NetMulticast
// 0x0001 (0x0001 - 0x0000)
struct BFGVoiceoverPlaybackActor_SetPauseItem_NetMulticast final
{
public:
	bool                                          _bIsPaused;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverPlaybackActor_SetPauseItem_NetMulticast) == 0x000001, "Wrong alignment on BFGVoiceoverPlaybackActor_SetPauseItem_NetMulticast");
static_assert(sizeof(BFGVoiceoverPlaybackActor_SetPauseItem_NetMulticast) == 0x000001, "Wrong size on BFGVoiceoverPlaybackActor_SetPauseItem_NetMulticast");
static_assert(offsetof(BFGVoiceoverPlaybackActor_SetPauseItem_NetMulticast, _bIsPaused) == 0x000000, "Member 'BFGVoiceoverPlaybackActor_SetPauseItem_NetMulticast::_bIsPaused' has a wrong offset!");

// Function BFGCore.BFGVoiceoverQueue.CountSpeakerInQueue
// 0x000C (0x000C - 0x0000)
struct BFGVoiceoverQueue_CountSpeakerInQueue final
{
public:
	class FName                                   _speakerVoice;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverQueue_CountSpeakerInQueue) == 0x000004, "Wrong alignment on BFGVoiceoverQueue_CountSpeakerInQueue");
static_assert(sizeof(BFGVoiceoverQueue_CountSpeakerInQueue) == 0x00000C, "Wrong size on BFGVoiceoverQueue_CountSpeakerInQueue");
static_assert(offsetof(BFGVoiceoverQueue_CountSpeakerInQueue, _speakerVoice) == 0x000000, "Member 'BFGVoiceoverQueue_CountSpeakerInQueue::_speakerVoice' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverQueue_CountSpeakerInQueue, ReturnValue) == 0x000008, "Member 'BFGVoiceoverQueue_CountSpeakerInQueue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverQueue.GetCurrentPlayingComponent
// 0x0008 (0x0008 - 0x0000)
struct BFGVoiceoverQueue_GetCurrentPlayingComponent final
{
public:
	class UBFGVoiceoverPlaybackComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverQueue_GetCurrentPlayingComponent) == 0x000008, "Wrong alignment on BFGVoiceoverQueue_GetCurrentPlayingComponent");
static_assert(sizeof(BFGVoiceoverQueue_GetCurrentPlayingComponent) == 0x000008, "Wrong size on BFGVoiceoverQueue_GetCurrentPlayingComponent");
static_assert(offsetof(BFGVoiceoverQueue_GetCurrentPlayingComponent, ReturnValue) == 0x000000, "Member 'BFGVoiceoverQueue_GetCurrentPlayingComponent::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverRouter.OnItemEvent
// 0x00B0 (0x00B0 - 0x0000)
struct BFGVoiceoverRouter_OnItemEvent final
{
public:
	struct FBFGVoiceoverItem                      _item;                                             // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBFGVoiceoverItemEventType                    _type;                                             // 0x00A8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverRouter_OnItemEvent) == 0x000008, "Wrong alignment on BFGVoiceoverRouter_OnItemEvent");
static_assert(sizeof(BFGVoiceoverRouter_OnItemEvent) == 0x0000B0, "Wrong size on BFGVoiceoverRouter_OnItemEvent");
static_assert(offsetof(BFGVoiceoverRouter_OnItemEvent, _item) == 0x000000, "Member 'BFGVoiceoverRouter_OnItemEvent::_item' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverRouter_OnItemEvent, _type) == 0x0000A8, "Member 'BFGVoiceoverRouter_OnItemEvent::_type' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.AreAllVoiceoverGroupsMuted
// 0x0010 (0x0010 - 0x0000)
struct BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted");
static_assert(sizeof(BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted) == 0x000010, "Wrong size on BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted");
static_assert(offsetof(BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted, ReturnValue) == 0x000008, "Member 'BFGVoiceoverUtils_AreAllVoiceoverGroupsMuted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.IsAnyVoiceoverPlaying
// 0x0010 (0x0010 - 0x0000)
struct BFGVoiceoverUtils_IsAnyVoiceoverPlaying final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_IsAnyVoiceoverPlaying) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_IsAnyVoiceoverPlaying");
static_assert(sizeof(BFGVoiceoverUtils_IsAnyVoiceoverPlaying) == 0x000010, "Wrong size on BFGVoiceoverUtils_IsAnyVoiceoverPlaying");
static_assert(offsetof(BFGVoiceoverUtils_IsAnyVoiceoverPlaying, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_IsAnyVoiceoverPlaying::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_IsAnyVoiceoverPlaying, ReturnValue) == 0x000008, "Member 'BFGVoiceoverUtils_IsAnyVoiceoverPlaying::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.IsVoiceoverGroupMuted
// 0x0038 (0x0038 - 0x0000)
struct BFGVoiceoverUtils_IsVoiceoverGroupMuted final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBFGVoiceoverGroup>      _pGroup;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_IsVoiceoverGroupMuted) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_IsVoiceoverGroupMuted");
static_assert(sizeof(BFGVoiceoverUtils_IsVoiceoverGroupMuted) == 0x000038, "Wrong size on BFGVoiceoverUtils_IsVoiceoverGroupMuted");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverGroupMuted, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_IsVoiceoverGroupMuted::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverGroupMuted, _pGroup) == 0x000008, "Member 'BFGVoiceoverUtils_IsVoiceoverGroupMuted::_pGroup' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverGroupMuted, ReturnValue) == 0x000030, "Member 'BFGVoiceoverUtils_IsVoiceoverGroupMuted::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.IsVoiceoverGroupPlaying
// 0x0038 (0x0038 - 0x0000)
struct BFGVoiceoverUtils_IsVoiceoverGroupPlaying final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBFGVoiceoverGroup>      _pGroup;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGVoiceoverPlaybackState                    ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_IsVoiceoverGroupPlaying) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_IsVoiceoverGroupPlaying");
static_assert(sizeof(BFGVoiceoverUtils_IsVoiceoverGroupPlaying) == 0x000038, "Wrong size on BFGVoiceoverUtils_IsVoiceoverGroupPlaying");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverGroupPlaying, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_IsVoiceoverGroupPlaying::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverGroupPlaying, _pGroup) == 0x000008, "Member 'BFGVoiceoverUtils_IsVoiceoverGroupPlaying::_pGroup' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverGroupPlaying, ReturnValue) == 0x000030, "Member 'BFGVoiceoverUtils_IsVoiceoverGroupPlaying::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.IsVoiceoverPlaying
// 0x0028 (0x0028 - 0x0000)
struct BFGVoiceoverUtils_IsVoiceoverPlaying final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _stringTableEntry;                                 // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	EBFGVoiceoverPlaybackState                    ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_IsVoiceoverPlaying) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_IsVoiceoverPlaying");
static_assert(sizeof(BFGVoiceoverUtils_IsVoiceoverPlaying) == 0x000028, "Wrong size on BFGVoiceoverUtils_IsVoiceoverPlaying");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverPlaying, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_IsVoiceoverPlaying::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverPlaying, _stringTableEntry) == 0x000008, "Member 'BFGVoiceoverUtils_IsVoiceoverPlaying::_stringTableEntry' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_IsVoiceoverPlaying, ReturnValue) == 0x000020, "Member 'BFGVoiceoverUtils_IsVoiceoverPlaying::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.MuteAllVoiceoverGroups
// 0x0010 (0x0010 - 0x0000)
struct BFGVoiceoverUtils_MuteAllVoiceoverGroups final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCancelIfPlayingItem;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_MuteAllVoiceoverGroups) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_MuteAllVoiceoverGroups");
static_assert(sizeof(BFGVoiceoverUtils_MuteAllVoiceoverGroups) == 0x000010, "Wrong size on BFGVoiceoverUtils_MuteAllVoiceoverGroups");
static_assert(offsetof(BFGVoiceoverUtils_MuteAllVoiceoverGroups, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_MuteAllVoiceoverGroups::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_MuteAllVoiceoverGroups, _bCancelIfPlayingItem) == 0x000008, "Member 'BFGVoiceoverUtils_MuteAllVoiceoverGroups::_bCancelIfPlayingItem' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.MuteVoiceoverGroup
// 0x0038 (0x0038 - 0x0000)
struct BFGVoiceoverUtils_MuteVoiceoverGroup final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBFGVoiceoverGroup>      _pGroup;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCancelIfPlayingItem;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_MuteVoiceoverGroup) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_MuteVoiceoverGroup");
static_assert(sizeof(BFGVoiceoverUtils_MuteVoiceoverGroup) == 0x000038, "Wrong size on BFGVoiceoverUtils_MuteVoiceoverGroup");
static_assert(offsetof(BFGVoiceoverUtils_MuteVoiceoverGroup, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_MuteVoiceoverGroup::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_MuteVoiceoverGroup, _pGroup) == 0x000008, "Member 'BFGVoiceoverUtils_MuteVoiceoverGroup::_pGroup' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_MuteVoiceoverGroup, _bCancelIfPlayingItem) == 0x000030, "Member 'BFGVoiceoverUtils_MuteVoiceoverGroup::_bCancelIfPlayingItem' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.PlayVoiceover
// 0x0170 (0x0170 - 0x0000)
struct BFGVoiceoverUtils_PlayVoiceover final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _stringTableEntry;                                 // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FBFGVoiceoverPlaybackRequest           _request;                                          // 0x0020(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      _latentInfo;                                       // 0x0150(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EBFGVoiceoverResultType                       _outResult;                                        // 0x0168(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_PlayVoiceover) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_PlayVoiceover");
static_assert(sizeof(BFGVoiceoverUtils_PlayVoiceover) == 0x000170, "Wrong size on BFGVoiceoverUtils_PlayVoiceover");
static_assert(offsetof(BFGVoiceoverUtils_PlayVoiceover, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_PlayVoiceover::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_PlayVoiceover, _stringTableEntry) == 0x000008, "Member 'BFGVoiceoverUtils_PlayVoiceover::_stringTableEntry' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_PlayVoiceover, _request) == 0x000020, "Member 'BFGVoiceoverUtils_PlayVoiceover::_request' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_PlayVoiceover, _latentInfo) == 0x000150, "Member 'BFGVoiceoverUtils_PlayVoiceover::_latentInfo' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_PlayVoiceover, _outResult) == 0x000168, "Member 'BFGVoiceoverUtils_PlayVoiceover::_outResult' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.SetRunWhileGameplayPaused
// 0x0010 (0x0010 - 0x0000)
struct BFGVoiceoverUtils_SetRunWhileGameplayPaused final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRunWhileGameplayPaused;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_SetRunWhileGameplayPaused) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_SetRunWhileGameplayPaused");
static_assert(sizeof(BFGVoiceoverUtils_SetRunWhileGameplayPaused) == 0x000010, "Wrong size on BFGVoiceoverUtils_SetRunWhileGameplayPaused");
static_assert(offsetof(BFGVoiceoverUtils_SetRunWhileGameplayPaused, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_SetRunWhileGameplayPaused::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_SetRunWhileGameplayPaused, _bRunWhileGameplayPaused) == 0x000008, "Member 'BFGVoiceoverUtils_SetRunWhileGameplayPaused::_bRunWhileGameplayPaused' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.StopAllVoiceoversInGroup
// 0x0038 (0x0038 - 0x0000)
struct BFGVoiceoverUtils_StopAllVoiceoversInGroup final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBFGVoiceoverGroup>      _pGroup;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCancelIfPlayingItem;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_StopAllVoiceoversInGroup) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_StopAllVoiceoversInGroup");
static_assert(sizeof(BFGVoiceoverUtils_StopAllVoiceoversInGroup) == 0x000038, "Wrong size on BFGVoiceoverUtils_StopAllVoiceoversInGroup");
static_assert(offsetof(BFGVoiceoverUtils_StopAllVoiceoversInGroup, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_StopAllVoiceoversInGroup::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_StopAllVoiceoversInGroup, _pGroup) == 0x000008, "Member 'BFGVoiceoverUtils_StopAllVoiceoversInGroup::_pGroup' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_StopAllVoiceoversInGroup, _bCancelIfPlayingItem) == 0x000030, "Member 'BFGVoiceoverUtils_StopAllVoiceoversInGroup::_bCancelIfPlayingItem' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.StopAllVoicovers
// 0x0010 (0x0010 - 0x0000)
struct BFGVoiceoverUtils_StopAllVoicovers final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCancelPlayingItem;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fOverrideFadeoutDuration;                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverUtils_StopAllVoicovers) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_StopAllVoicovers");
static_assert(sizeof(BFGVoiceoverUtils_StopAllVoicovers) == 0x000010, "Wrong size on BFGVoiceoverUtils_StopAllVoicovers");
static_assert(offsetof(BFGVoiceoverUtils_StopAllVoicovers, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_StopAllVoicovers::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_StopAllVoicovers, _bCancelPlayingItem) == 0x000008, "Member 'BFGVoiceoverUtils_StopAllVoicovers::_bCancelPlayingItem' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_StopAllVoicovers, _fOverrideFadeoutDuration) == 0x00000C, "Member 'BFGVoiceoverUtils_StopAllVoicovers::_fOverrideFadeoutDuration' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.StopVoiceover
// 0x0028 (0x0028 - 0x0000)
struct BFGVoiceoverUtils_StopVoiceover final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _stringTableEntry;                                 // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          _bCancelIfPlayingItem;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_StopVoiceover) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_StopVoiceover");
static_assert(sizeof(BFGVoiceoverUtils_StopVoiceover) == 0x000028, "Wrong size on BFGVoiceoverUtils_StopVoiceover");
static_assert(offsetof(BFGVoiceoverUtils_StopVoiceover, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_StopVoiceover::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_StopVoiceover, _stringTableEntry) == 0x000008, "Member 'BFGVoiceoverUtils_StopVoiceover::_stringTableEntry' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_StopVoiceover, _bCancelIfPlayingItem) == 0x000020, "Member 'BFGVoiceoverUtils_StopVoiceover::_bCancelIfPlayingItem' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.TriggerVoiceover
// 0x0150 (0x0150 - 0x0000)
struct BFGVoiceoverUtils_TriggerVoiceover final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _stringTableEntry;                                 // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FBFGVoiceoverPlaybackRequest           _request;                                          // 0x0020(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverUtils_TriggerVoiceover) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_TriggerVoiceover");
static_assert(sizeof(BFGVoiceoverUtils_TriggerVoiceover) == 0x000150, "Wrong size on BFGVoiceoverUtils_TriggerVoiceover");
static_assert(offsetof(BFGVoiceoverUtils_TriggerVoiceover, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_TriggerVoiceover::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_TriggerVoiceover, _stringTableEntry) == 0x000008, "Member 'BFGVoiceoverUtils_TriggerVoiceover::_stringTableEntry' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_TriggerVoiceover, _request) == 0x000020, "Member 'BFGVoiceoverUtils_TriggerVoiceover::_request' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.UnmuteAllVoiceoverGroups
// 0x0010 (0x0010 - 0x0000)
struct BFGVoiceoverUtils_UnmuteAllVoiceoverGroups final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fSilenceDuration;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRestoreExceptions;                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_UnmuteAllVoiceoverGroups) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_UnmuteAllVoiceoverGroups");
static_assert(sizeof(BFGVoiceoverUtils_UnmuteAllVoiceoverGroups) == 0x000010, "Wrong size on BFGVoiceoverUtils_UnmuteAllVoiceoverGroups");
static_assert(offsetof(BFGVoiceoverUtils_UnmuteAllVoiceoverGroups, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_UnmuteAllVoiceoverGroups::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_UnmuteAllVoiceoverGroups, _fSilenceDuration) == 0x000008, "Member 'BFGVoiceoverUtils_UnmuteAllVoiceoverGroups::_fSilenceDuration' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_UnmuteAllVoiceoverGroups, _bRestoreExceptions) == 0x00000C, "Member 'BFGVoiceoverUtils_UnmuteAllVoiceoverGroups::_bRestoreExceptions' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.UnmuteVoiceoverGroup
// 0x0038 (0x0038 - 0x0000)
struct BFGVoiceoverUtils_UnmuteVoiceoverGroup final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBFGVoiceoverGroup>      _pGroup;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fAddSilenceDuration;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_UnmuteVoiceoverGroup) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_UnmuteVoiceoverGroup");
static_assert(sizeof(BFGVoiceoverUtils_UnmuteVoiceoverGroup) == 0x000038, "Wrong size on BFGVoiceoverUtils_UnmuteVoiceoverGroup");
static_assert(offsetof(BFGVoiceoverUtils_UnmuteVoiceoverGroup, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_UnmuteVoiceoverGroup::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_UnmuteVoiceoverGroup, _pGroup) == 0x000008, "Member 'BFGVoiceoverUtils_UnmuteVoiceoverGroup::_pGroup' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_UnmuteVoiceoverGroup, _fAddSilenceDuration) == 0x000030, "Member 'BFGVoiceoverUtils_UnmuteVoiceoverGroup::_fAddSilenceDuration' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.WaitForVoiceover
// 0x0040 (0x0040 - 0x0000)
struct BFGVoiceoverUtils_WaitForVoiceover final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _stringTableEntry;                                 // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      _latentInfo;                                       // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EBFGVoiceoverResultType                       _outResult;                                        // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGVoiceoverUtils_WaitForVoiceover) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_WaitForVoiceover");
static_assert(sizeof(BFGVoiceoverUtils_WaitForVoiceover) == 0x000040, "Wrong size on BFGVoiceoverUtils_WaitForVoiceover");
static_assert(offsetof(BFGVoiceoverUtils_WaitForVoiceover, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_WaitForVoiceover::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_WaitForVoiceover, _stringTableEntry) == 0x000008, "Member 'BFGVoiceoverUtils_WaitForVoiceover::_stringTableEntry' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_WaitForVoiceover, _latentInfo) == 0x000020, "Member 'BFGVoiceoverUtils_WaitForVoiceover::_latentInfo' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_WaitForVoiceover, _outResult) == 0x000038, "Member 'BFGVoiceoverUtils_WaitForVoiceover::_outResult' has a wrong offset!");

// Function BFGCore.BFGVoiceoverUtils.WaitForVoiceoverGroup
// 0x0048 (0x0048 - 0x0000)
struct BFGVoiceoverUtils_WaitForVoiceoverGroup final
{
public:
	class UObject*                                _pWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBFGVoiceoverGroup>      _pGroup;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      _latentInfo;                                       // 0x0030(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGVoiceoverUtils_WaitForVoiceoverGroup) == 0x000008, "Wrong alignment on BFGVoiceoverUtils_WaitForVoiceoverGroup");
static_assert(sizeof(BFGVoiceoverUtils_WaitForVoiceoverGroup) == 0x000048, "Wrong size on BFGVoiceoverUtils_WaitForVoiceoverGroup");
static_assert(offsetof(BFGVoiceoverUtils_WaitForVoiceoverGroup, _pWorldContextObject) == 0x000000, "Member 'BFGVoiceoverUtils_WaitForVoiceoverGroup::_pWorldContextObject' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_WaitForVoiceoverGroup, _pGroup) == 0x000008, "Member 'BFGVoiceoverUtils_WaitForVoiceoverGroup::_pGroup' has a wrong offset!");
static_assert(offsetof(BFGVoiceoverUtils_WaitForVoiceoverGroup, _latentInfo) == 0x000030, "Member 'BFGVoiceoverUtils_WaitForVoiceoverGroup::_latentInfo' has a wrong offset!");

// Function BFGCore.BFGWeapon_AnalProbe.GetMinigameSuccessThreshold
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_AnalProbe_GetMinigameSuccessThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_AnalProbe_GetMinigameSuccessThreshold) == 0x000004, "Wrong alignment on BFGWeapon_AnalProbe_GetMinigameSuccessThreshold");
static_assert(sizeof(BFGWeapon_AnalProbe_GetMinigameSuccessThreshold) == 0x000004, "Wrong size on BFGWeapon_AnalProbe_GetMinigameSuccessThreshold");
static_assert(offsetof(BFGWeapon_AnalProbe_GetMinigameSuccessThreshold, ReturnValue) == 0x000000, "Member 'BFGWeapon_AnalProbe_GetMinigameSuccessThreshold::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_AnalProbe.GetMinigameValue
// 0x0004 (0x0004 - 0x0000)
struct BFGWeapon_AnalProbe_GetMinigameValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_AnalProbe_GetMinigameValue) == 0x000004, "Wrong alignment on BFGWeapon_AnalProbe_GetMinigameValue");
static_assert(sizeof(BFGWeapon_AnalProbe_GetMinigameValue) == 0x000004, "Wrong size on BFGWeapon_AnalProbe_GetMinigameValue");
static_assert(offsetof(BFGWeapon_AnalProbe_GetMinigameValue, ReturnValue) == 0x000000, "Member 'BFGWeapon_AnalProbe_GetMinigameValue::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_AnalProbe.IsMiniGameActive
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_AnalProbe_IsMiniGameActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_AnalProbe_IsMiniGameActive) == 0x000001, "Wrong alignment on BFGWeapon_AnalProbe_IsMiniGameActive");
static_assert(sizeof(BFGWeapon_AnalProbe_IsMiniGameActive) == 0x000001, "Wrong size on BFGWeapon_AnalProbe_IsMiniGameActive");
static_assert(offsetof(BFGWeapon_AnalProbe_IsMiniGameActive, ReturnValue) == 0x000000, "Member 'BFGWeapon_AnalProbe_IsMiniGameActive::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_AnalProbe.IsShotInAir
// 0x0001 (0x0001 - 0x0000)
struct BFGWeapon_AnalProbe_IsShotInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_AnalProbe_IsShotInAir) == 0x000001, "Wrong alignment on BFGWeapon_AnalProbe_IsShotInAir");
static_assert(sizeof(BFGWeapon_AnalProbe_IsShotInAir) == 0x000001, "Wrong size on BFGWeapon_AnalProbe_IsShotInAir");
static_assert(offsetof(BFGWeapon_AnalProbe_IsShotInAir, ReturnValue) == 0x000000, "Member 'BFGWeapon_AnalProbe_IsShotInAir::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossAOE_ParticleExploder.OnMineExploded
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_BossAOE_ParticleExploder_OnMineExploded final
{
public:
	class ABFGNPCCharacterEnemy_Mine_ParticleExploder* _pMine;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BossAOE_ParticleExploder_OnMineExploded) == 0x000008, "Wrong alignment on BFGWeapon_BossAOE_ParticleExploder_OnMineExploded");
static_assert(sizeof(BFGWeapon_BossAOE_ParticleExploder_OnMineExploded) == 0x000008, "Wrong size on BFGWeapon_BossAOE_ParticleExploder_OnMineExploded");
static_assert(offsetof(BFGWeapon_BossAOE_ParticleExploder_OnMineExploded, _pMine) == 0x000000, "Member 'BFGWeapon_BossAOE_ParticleExploder_OnMineExploded::_pMine' has a wrong offset!");

// Function BFGCore.BFGWeapon_BossAOE_ParticleExploder.OnMineTriggerRangeEntered
// 0x0008 (0x0008 - 0x0000)
struct BFGWeapon_BossAOE_ParticleExploder_OnMineTriggerRangeEntered final
{
public:
	class ABFGNPCCharacterEnemy_Mine_ParticleExploder* _pMine;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_BossAOE_ParticleExploder_OnMineTriggerRangeEntered) == 0x000008, "Wrong alignment on BFGWeapon_BossAOE_ParticleExploder_OnMineTriggerRangeEntered");
static_assert(sizeof(BFGWeapon_BossAOE_ParticleExploder_OnMineTriggerRangeEntered) == 0x000008, "Wrong size on BFGWeapon_BossAOE_ParticleExploder_OnMineTriggerRangeEntered");
static_assert(offsetof(BFGWeapon_BossAOE_ParticleExploder_OnMineTriggerRangeEntered, _pMine) == 0x000000, "Member 'BFGWeapon_BossAOE_ParticleExploder_OnMineTriggerRangeEntered::_pMine' has a wrong offset!");

// Function BFGCore.BFGWeapon_DisintegratorRay.OnDotApplied
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_DisintegratorRay_OnDotApplied final
{
public:
	class AActor*                                 _pTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iStackCount;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWeapon_DisintegratorRay_OnDotApplied) == 0x000008, "Wrong alignment on BFGWeapon_DisintegratorRay_OnDotApplied");
static_assert(sizeof(BFGWeapon_DisintegratorRay_OnDotApplied) == 0x000010, "Wrong size on BFGWeapon_DisintegratorRay_OnDotApplied");
static_assert(offsetof(BFGWeapon_DisintegratorRay_OnDotApplied, _pTarget) == 0x000000, "Member 'BFGWeapon_DisintegratorRay_OnDotApplied::_pTarget' has a wrong offset!");
static_assert(offsetof(BFGWeapon_DisintegratorRay_OnDotApplied, _iStackCount) == 0x000008, "Member 'BFGWeapon_DisintegratorRay_OnDotApplied::_iStackCount' has a wrong offset!");

// Function BFGCore.BFGWeapon_EnemyNasalProbe.FireNasalProbe
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_EnemyNasalProbe_FireNasalProbe final
{
public:
	int32                                         _iRetargetAttempts;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABFGProjectile_Object*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_EnemyNasalProbe_FireNasalProbe) == 0x000008, "Wrong alignment on BFGWeapon_EnemyNasalProbe_FireNasalProbe");
static_assert(sizeof(BFGWeapon_EnemyNasalProbe_FireNasalProbe) == 0x000010, "Wrong size on BFGWeapon_EnemyNasalProbe_FireNasalProbe");
static_assert(offsetof(BFGWeapon_EnemyNasalProbe_FireNasalProbe, _iRetargetAttempts) == 0x000000, "Member 'BFGWeapon_EnemyNasalProbe_FireNasalProbe::_iRetargetAttempts' has a wrong offset!");
static_assert(offsetof(BFGWeapon_EnemyNasalProbe_FireNasalProbe, ReturnValue) == 0x000008, "Member 'BFGWeapon_EnemyNasalProbe_FireNasalProbe::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWeapon_MultiMissiles.OnHolderDeath
// 0x0010 (0x0010 - 0x0000)
struct BFGWeapon_MultiMissiles_OnHolderDeath final
{
public:
	class AActor*                                 _pActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBFGActorStat_Bool*                     _pStat;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWeapon_MultiMissiles_OnHolderDeath) == 0x000008, "Wrong alignment on BFGWeapon_MultiMissiles_OnHolderDeath");
static_assert(sizeof(BFGWeapon_MultiMissiles_OnHolderDeath) == 0x000010, "Wrong size on BFGWeapon_MultiMissiles_OnHolderDeath");
static_assert(offsetof(BFGWeapon_MultiMissiles_OnHolderDeath, _pActor) == 0x000000, "Member 'BFGWeapon_MultiMissiles_OnHolderDeath::_pActor' has a wrong offset!");
static_assert(offsetof(BFGWeapon_MultiMissiles_OnHolderDeath, _pStat) == 0x000008, "Member 'BFGWeapon_MultiMissiles_OnHolderDeath::_pStat' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetAlert.OnAIStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_WidgetAlert_OnAIStateChanged final
{
public:
	EBFGBehaviourState_NPC                        _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetAlert_OnAIStateChanged) == 0x000001, "Wrong alignment on BFGActorComponent_WidgetAlert_OnAIStateChanged");
static_assert(sizeof(BFGActorComponent_WidgetAlert_OnAIStateChanged) == 0x000001, "Wrong size on BFGActorComponent_WidgetAlert_OnAIStateChanged");
static_assert(offsetof(BFGActorComponent_WidgetAlert_OnAIStateChanged, _eState) == 0x000000, "Member 'BFGActorComponent_WidgetAlert_OnAIStateChanged::_eState' has a wrong offset!");

// Function BFGCore.BFGActorComponent_WidgetAlert.OnDeadStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGActorComponent_WidgetAlert_OnDeadStateChanged final
{
public:
	bool                                          _bState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGActorComponent_WidgetAlert_OnDeadStateChanged) == 0x000001, "Wrong alignment on BFGActorComponent_WidgetAlert_OnDeadStateChanged");
static_assert(sizeof(BFGActorComponent_WidgetAlert_OnDeadStateChanged) == 0x000001, "Wrong size on BFGActorComponent_WidgetAlert_OnDeadStateChanged");
static_assert(offsetof(BFGActorComponent_WidgetAlert_OnDeadStateChanged, _bState) == 0x000000, "Member 'BFGActorComponent_WidgetAlert_OnDeadStateChanged::_bState' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_AlertOverhead.UpdateState
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_AR_AlertOverhead_UpdateState final
{
public:
	EBFGBehaviourState_NPC                        _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_AlertOverhead_UpdateState) == 0x000001, "Wrong alignment on BFGWidget_AR_AlertOverhead_UpdateState");
static_assert(sizeof(BFGWidget_AR_AlertOverhead_UpdateState) == 0x000001, "Wrong size on BFGWidget_AR_AlertOverhead_UpdateState");
static_assert(offsetof(BFGWidget_AR_AlertOverhead_UpdateState, _eState) == 0x000000, "Member 'BFGWidget_AR_AlertOverhead_UpdateState::_eState' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_SimpleOverheadText.ChangeText
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_AR_SimpleOverheadText_ChangeText final
{
public:
	class FText                                   _newText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_SimpleOverheadText_ChangeText) == 0x000008, "Wrong alignment on BFGWidget_AR_SimpleOverheadText_ChangeText");
static_assert(sizeof(BFGWidget_AR_SimpleOverheadText_ChangeText) == 0x000018, "Wrong size on BFGWidget_AR_SimpleOverheadText_ChangeText");
static_assert(offsetof(BFGWidget_AR_SimpleOverheadText_ChangeText, _newText) == 0x000000, "Member 'BFGWidget_AR_SimpleOverheadText_ChangeText::_newText' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_SimpleOverheadText.ShowWidget
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_AR_SimpleOverheadText_ShowWidget final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_SimpleOverheadText_ShowWidget) == 0x000001, "Wrong alignment on BFGWidget_AR_SimpleOverheadText_ShowWidget");
static_assert(sizeof(BFGWidget_AR_SimpleOverheadText_ShowWidget) == 0x000001, "Wrong size on BFGWidget_AR_SimpleOverheadText_ShowWidget");
static_assert(offsetof(BFGWidget_AR_SimpleOverheadText_ShowWidget, _bShow) == 0x000000, "Member 'BFGWidget_AR_SimpleOverheadText_ShowWidget::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_SimpleOverheadText.UpdateRichtTextBox
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _strText;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox) == 0x000008, "Wrong alignment on BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox");
static_assert(sizeof(BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox) == 0x000020, "Wrong size on BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox");
static_assert(offsetof(BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox, _iIndex) == 0x000000, "Member 'BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox, _strText) == 0x000008, "Member 'BFGWidget_AR_SimpleOverheadText_UpdateRichtTextBox::_strText' has a wrong offset!");

// Function BFGCore.BFGWidget_AR_SimpleOverheadText.GetBFGGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_AR_SimpleOverheadText_GetBFGGameInstance final
{
public:
	class UBFGGameInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_AR_SimpleOverheadText_GetBFGGameInstance) == 0x000008, "Wrong alignment on BFGWidget_AR_SimpleOverheadText_GetBFGGameInstance");
static_assert(sizeof(BFGWidget_AR_SimpleOverheadText_GetBFGGameInstance) == 0x000008, "Wrong size on BFGWidget_AR_SimpleOverheadText_GetBFGGameInstance");
static_assert(offsetof(BFGWidget_AR_SimpleOverheadText_GetBFGGameInstance, ReturnValue) == 0x000000, "Member 'BFGWidget_AR_SimpleOverheadText_GetBFGGameInstance::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_FuronHandbook.AddChapterToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_FuronHandbook_AddChapterToLayout final
{
public:
	class UBFGWidget_Archive_FuronHandbookChapter* _pChapter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_FuronHandbook_AddChapterToLayout) == 0x000008, "Wrong alignment on BFGWidget_Archive_FuronHandbook_AddChapterToLayout");
static_assert(sizeof(BFGWidget_Archive_FuronHandbook_AddChapterToLayout) == 0x000008, "Wrong size on BFGWidget_Archive_FuronHandbook_AddChapterToLayout");
static_assert(offsetof(BFGWidget_Archive_FuronHandbook_AddChapterToLayout, _pChapter) == 0x000000, "Member 'BFGWidget_Archive_FuronHandbook_AddChapterToLayout::_pChapter' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.ChangeButtonDescription
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_ChangeButtonDescription final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	EButtonState                                  _oButtonState;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_ChangeButtonDescription) == 0x000008, "Wrong alignment on BFGWidget_Archive_HolobobDeck_ChangeButtonDescription");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_ChangeButtonDescription) == 0x000020, "Wrong size on BFGWidget_Archive_HolobobDeck_ChangeButtonDescription");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_ChangeButtonDescription, _strText) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_ChangeButtonDescription::_strText' has a wrong offset!");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_ChangeButtonDescription, _oButtonState) == 0x000018, "Member 'BFGWidget_Archive_HolobobDeck_ChangeButtonDescription::_oButtonState' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.OnAddOptiontoLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_OnAddOptiontoLayout final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_OnAddOptiontoLayout) == 0x000008, "Wrong alignment on BFGWidget_Archive_HolobobDeck_OnAddOptiontoLayout");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_OnAddOptiontoLayout) == 0x000008, "Wrong size on BFGWidget_Archive_HolobobDeck_OnAddOptiontoLayout");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_OnAddOptiontoLayout, _pOption) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_OnAddOptiontoLayout::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.OnConfimationPromptClosed
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_OnConfimationPromptClosed final
{
public:
	bool                                          _bResult;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_OnConfimationPromptClosed) == 0x000001, "Wrong alignment on BFGWidget_Archive_HolobobDeck_OnConfimationPromptClosed");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_OnConfimationPromptClosed) == 0x000001, "Wrong size on BFGWidget_Archive_HolobobDeck_OnConfimationPromptClosed");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_OnConfimationPromptClosed, _bResult) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_OnConfimationPromptClosed::_bResult' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.OnRewardGained
// 0x0030 (0x0030 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_OnRewardGained final
{
public:
	class FText                                   _inTopic;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _inDescription;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_OnRewardGained) == 0x000008, "Wrong alignment on BFGWidget_Archive_HolobobDeck_OnRewardGained");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_OnRewardGained) == 0x000030, "Wrong size on BFGWidget_Archive_HolobobDeck_OnRewardGained");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_OnRewardGained, _inTopic) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_OnRewardGained::_inTopic' has a wrong offset!");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_OnRewardGained, _inDescription) == 0x000018, "Member 'BFGWidget_Archive_HolobobDeck_OnRewardGained::_inDescription' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.OnShowContentLayout
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_OnShowContentLayout final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_OnShowContentLayout) == 0x000001, "Wrong alignment on BFGWidget_Archive_HolobobDeck_OnShowContentLayout");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_OnShowContentLayout) == 0x000001, "Wrong size on BFGWidget_Archive_HolobobDeck_OnShowContentLayout");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_OnShowContentLayout, _bShow) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_OnShowContentLayout::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.OnUpdateInfoMission
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_OnUpdateInfoMission final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_OnUpdateInfoMission) == 0x000004, "Wrong alignment on BFGWidget_Archive_HolobobDeck_OnUpdateInfoMission");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_OnUpdateInfoMission) == 0x000004, "Wrong size on BFGWidget_Archive_HolobobDeck_OnUpdateInfoMission");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_OnUpdateInfoMission, _iIndex) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_OnUpdateInfoMission::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.Scroll
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_Scroll final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_Scroll) == 0x000004, "Wrong alignment on BFGWidget_Archive_HolobobDeck_Scroll");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_Scroll) == 0x000004, "Wrong size on BFGWidget_Archive_HolobobDeck_Scroll");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_Scroll, _fValue) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_Scroll::_fValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.ScrolltoWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_ScrolltoWidget final
{
public:
	class UBFGWidget_DialogOption*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_ScrolltoWidget) == 0x000008, "Wrong alignment on BFGWidget_Archive_HolobobDeck_ScrolltoWidget");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_ScrolltoWidget) == 0x000008, "Wrong size on BFGWidget_Archive_HolobobDeck_ScrolltoWidget");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_ScrolltoWidget, _pOption) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_ScrolltoWidget::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_HolobobDeck.UpdateMissionInfo
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Archive_HolobobDeck_UpdateMissionInfo final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_HolobobDeck_UpdateMissionInfo) == 0x000004, "Wrong alignment on BFGWidget_Archive_HolobobDeck_UpdateMissionInfo");
static_assert(sizeof(BFGWidget_Archive_HolobobDeck_UpdateMissionInfo) == 0x000004, "Wrong size on BFGWidget_Archive_HolobobDeck_UpdateMissionInfo");
static_assert(offsetof(BFGWidget_Archive_HolobobDeck_UpdateMissionInfo, _iIndex) == 0x000000, "Member 'BFGWidget_Archive_HolobobDeck_UpdateMissionInfo::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_SkinMenu.GetSpinningWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Archive_SkinMenu_GetSpinningWidget final
{
public:
	class UBFGSpinningWidget*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_SkinMenu_GetSpinningWidget) == 0x000008, "Wrong alignment on BFGWidget_Archive_SkinMenu_GetSpinningWidget");
static_assert(sizeof(BFGWidget_Archive_SkinMenu_GetSpinningWidget) == 0x000008, "Wrong size on BFGWidget_Archive_SkinMenu_GetSpinningWidget");
static_assert(offsetof(BFGWidget_Archive_SkinMenu_GetSpinningWidget, ReturnValue) == 0x000000, "Member 'BFGWidget_Archive_SkinMenu_GetSpinningWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_SkinMenu.HasSpinningWidget
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Archive_SkinMenu_HasSpinningWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_SkinMenu_HasSpinningWidget) == 0x000001, "Wrong alignment on BFGWidget_Archive_SkinMenu_HasSpinningWidget");
static_assert(sizeof(BFGWidget_Archive_SkinMenu_HasSpinningWidget) == 0x000001, "Wrong size on BFGWidget_Archive_SkinMenu_HasSpinningWidget");
static_assert(offsetof(BFGWidget_Archive_SkinMenu_HasSpinningWidget, ReturnValue) == 0x000000, "Member 'BFGWidget_Archive_SkinMenu_HasSpinningWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_SkinMenu.OnRotateSkin
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Archive_SkinMenu_OnRotateSkin final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_SkinMenu_OnRotateSkin) == 0x000004, "Wrong alignment on BFGWidget_Archive_SkinMenu_OnRotateSkin");
static_assert(sizeof(BFGWidget_Archive_SkinMenu_OnRotateSkin) == 0x000004, "Wrong size on BFGWidget_Archive_SkinMenu_OnRotateSkin");
static_assert(offsetof(BFGWidget_Archive_SkinMenu_OnRotateSkin, _fValue) == 0x000000, "Member 'BFGWidget_Archive_SkinMenu_OnRotateSkin::_fValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_SkinMenu.OnUpdateSkinConditionText
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText final
{
public:
	bool                                          _bShowText;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _strText;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText) == 0x000008, "Wrong alignment on BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText");
static_assert(sizeof(BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText) == 0x000020, "Wrong size on BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText");
static_assert(offsetof(BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText, _bShowText) == 0x000000, "Member 'BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText::_bShowText' has a wrong offset!");
static_assert(offsetof(BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText, _strText) == 0x000008, "Member 'BFGWidget_Archive_SkinMenu_OnUpdateSkinConditionText::_strText' has a wrong offset!");

// Function BFGCore.BFGWidget_Archive_SkinMenu.UpdateDescriptionPanel
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Archive_SkinMenu_UpdateDescriptionPanel final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Archive_SkinMenu_UpdateDescriptionPanel) == 0x000004, "Wrong alignment on BFGWidget_Archive_SkinMenu_UpdateDescriptionPanel");
static_assert(sizeof(BFGWidget_Archive_SkinMenu_UpdateDescriptionPanel) == 0x000004, "Wrong size on BFGWidget_Archive_SkinMenu_UpdateDescriptionPanel");
static_assert(offsetof(BFGWidget_Archive_SkinMenu_UpdateDescriptionPanel, _iIndex) == 0x000000, "Member 'BFGWidget_Archive_SkinMenu_UpdateDescriptionPanel::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_ControllerDisconnected.OnApplicationPostInputKeyDownEvent
// 0x0038 (0x0038 - 0x0000)
struct BFGWidget_ControllerDisconnected_OnApplicationPostInputKeyDownEvent final
{
public:
	struct FKeyEvent                              _keyEvent;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_ControllerDisconnected_OnApplicationPostInputKeyDownEvent) == 0x000008, "Wrong alignment on BFGWidget_ControllerDisconnected_OnApplicationPostInputKeyDownEvent");
static_assert(sizeof(BFGWidget_ControllerDisconnected_OnApplicationPostInputKeyDownEvent) == 0x000038, "Wrong size on BFGWidget_ControllerDisconnected_OnApplicationPostInputKeyDownEvent");
static_assert(offsetof(BFGWidget_ControllerDisconnected_OnApplicationPostInputKeyDownEvent, _keyEvent) == 0x000000, "Member 'BFGWidget_ControllerDisconnected_OnApplicationPostInputKeyDownEvent::_keyEvent' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_CreditsTextPanel.Action_OnCreditsTextPanelDone__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_CreditsTextPanel_Action_OnCreditsTextPanelDone__DelegateSignature final
{
public:
	class UBFGWidget_CreditsTextPanel*            _pPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_CreditsTextPanel_Action_OnCreditsTextPanelDone__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_CreditsTextPanel_Action_OnCreditsTextPanelDone__DelegateSignature");
static_assert(sizeof(BFGWidget_CreditsTextPanel_Action_OnCreditsTextPanelDone__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_CreditsTextPanel_Action_OnCreditsTextPanelDone__DelegateSignature");
static_assert(offsetof(BFGWidget_CreditsTextPanel_Action_OnCreditsTextPanelDone__DelegateSignature, _pPanel) == 0x000000, "Member 'BFGWidget_CreditsTextPanel_Action_OnCreditsTextPanelDone__DelegateSignature::_pPanel' has a wrong offset!");

// Function BFGCore.BFGWidget_CreditsTextPanel.SetFont
// 0x0050 (0x0050 - 0x0000)
struct BFGWidget_CreditsTextPanel_SetFont final
{
public:
	struct FSlateFontInfo                         _oFontInfo;                                        // 0x0000(0x0050)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_CreditsTextPanel_SetFont) == 0x000008, "Wrong alignment on BFGWidget_CreditsTextPanel_SetFont");
static_assert(sizeof(BFGWidget_CreditsTextPanel_SetFont) == 0x000050, "Wrong size on BFGWidget_CreditsTextPanel_SetFont");
static_assert(offsetof(BFGWidget_CreditsTextPanel_SetFont, _oFontInfo) == 0x000000, "Member 'BFGWidget_CreditsTextPanel_SetFont::_oFontInfo' has a wrong offset!");

// Function BFGCore.BFGWidget_CreditsTextPanel.SetText
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_CreditsTextPanel_SetText final
{
public:
	class FText                                   _rText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_CreditsTextPanel_SetText) == 0x000008, "Wrong alignment on BFGWidget_CreditsTextPanel_SetText");
static_assert(sizeof(BFGWidget_CreditsTextPanel_SetText) == 0x000018, "Wrong size on BFGWidget_CreditsTextPanel_SetText");
static_assert(offsetof(BFGWidget_CreditsTextPanel_SetText, _rText) == 0x000000, "Member 'BFGWidget_CreditsTextPanel_SetText::_rText' has a wrong offset!");

// Function BFGCore.BFGWidget_CreditsTextPanel.TriggerScrollAnimation
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_CreditsTextPanel_TriggerScrollAnimation final
{
public:
	float                                         _fPlaybackSpeed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_CreditsTextPanel_TriggerScrollAnimation) == 0x000004, "Wrong alignment on BFGWidget_CreditsTextPanel_TriggerScrollAnimation");
static_assert(sizeof(BFGWidget_CreditsTextPanel_TriggerScrollAnimation) == 0x000004, "Wrong size on BFGWidget_CreditsTextPanel_TriggerScrollAnimation");
static_assert(offsetof(BFGWidget_CreditsTextPanel_TriggerScrollAnimation, _fPlaybackSpeed) == 0x000000, "Member 'BFGWidget_CreditsTextPanel_TriggerScrollAnimation::_fPlaybackSpeed' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_DialogOption_AssignKey.ActionKeyAssignment__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature final
{
public:
	class UBFGWidget_DialogOption_AssignKey*      _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   _oKey;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature");
static_assert(sizeof(BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature) == 0x000028, "Wrong size on BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature, _pOption) == 0x000000, "Member 'BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature::_pOption' has a wrong offset!");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature, _oKey) == 0x000008, "Member 'BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature::_oKey' has a wrong offset!");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature, _iIndex) == 0x000020, "Member 'BFGWidget_DialogOption_AssignKey_ActionKeyAssignment__DelegateSignature::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_AssignKey.OnKeySlotClicked
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_DialogOption_AssignKey_OnKeySlotClicked final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_AssignKey_OnKeySlotClicked) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_AssignKey_OnKeySlotClicked");
static_assert(sizeof(BFGWidget_DialogOption_AssignKey_OnKeySlotClicked) == 0x000004, "Wrong size on BFGWidget_DialogOption_AssignKey_OnKeySlotClicked");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_OnKeySlotClicked, _iIndex) == 0x000000, "Member 'BFGWidget_DialogOption_AssignKey_OnKeySlotClicked::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_AssignKey.SetCurrentSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_DialogOption_AssignKey_SetCurrentSlotIndex final
{
public:
	int32                                         _iSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_AssignKey_SetCurrentSlotIndex) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_AssignKey_SetCurrentSlotIndex");
static_assert(sizeof(BFGWidget_DialogOption_AssignKey_SetCurrentSlotIndex) == 0x000004, "Wrong size on BFGWidget_DialogOption_AssignKey_SetCurrentSlotIndex");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_SetCurrentSlotIndex, _iSlotIndex) == 0x000000, "Member 'BFGWidget_DialogOption_AssignKey_SetCurrentSlotIndex::_iSlotIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_AssignKey.SetKeySlotText
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_DialogOption_AssignKey_SetKeySlotText final
{
public:
	int32                                         _iIndexSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _strText;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_AssignKey_SetKeySlotText) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_AssignKey_SetKeySlotText");
static_assert(sizeof(BFGWidget_DialogOption_AssignKey_SetKeySlotText) == 0x000020, "Wrong size on BFGWidget_DialogOption_AssignKey_SetKeySlotText");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_SetKeySlotText, _iIndexSlot) == 0x000000, "Member 'BFGWidget_DialogOption_AssignKey_SetKeySlotText::_iIndexSlot' has a wrong offset!");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_SetKeySlotText, _strText) == 0x000008, "Member 'BFGWidget_DialogOption_AssignKey_SetKeySlotText::_strText' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_AssignKey.UpdateSlotIndexHighlightState
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState final
{
public:
	int32                                         _Index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHighlighted;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState");
static_assert(sizeof(BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState) == 0x000008, "Wrong size on BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState, _Index) == 0x000000, "Member 'BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState::_Index' has a wrong offset!");
static_assert(offsetof(BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState, _bHighlighted) == 0x000004, "Member 'BFGWidget_DialogOption_AssignKey_UpdateSlotIndexHighlightState::_bHighlighted' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_DialogOption_Selector.ActionSelector__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_DialogOption_Selector_ActionSelector__DelegateSignature final
{
public:
	class UBFGWidget_DialogOption_Selector*       _pSelector;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Selector_ActionSelector__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_Selector_ActionSelector__DelegateSignature");
static_assert(sizeof(BFGWidget_DialogOption_Selector_ActionSelector__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_DialogOption_Selector_ActionSelector__DelegateSignature");
static_assert(offsetof(BFGWidget_DialogOption_Selector_ActionSelector__DelegateSignature, _pSelector) == 0x000000, "Member 'BFGWidget_DialogOption_Selector_ActionSelector__DelegateSignature::_pSelector' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Selector.AddOptionToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_DialogOption_Selector_AddOptionToLayout final
{
public:
	class UBFGWidget_SelectorItem*                _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Selector_AddOptionToLayout) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_Selector_AddOptionToLayout");
static_assert(sizeof(BFGWidget_DialogOption_Selector_AddOptionToLayout) == 0x000008, "Wrong size on BFGWidget_DialogOption_Selector_AddOptionToLayout");
static_assert(offsetof(BFGWidget_DialogOption_Selector_AddOptionToLayout, _pOption) == 0x000000, "Member 'BFGWidget_DialogOption_Selector_AddOptionToLayout::_pOption' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Selector.OnOptionClicked
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_DialogOption_Selector_OnOptionClicked final
{
public:
	int32                                         _iOption;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Selector_OnOptionClicked) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_Selector_OnOptionClicked");
static_assert(sizeof(BFGWidget_DialogOption_Selector_OnOptionClicked) == 0x000004, "Wrong size on BFGWidget_DialogOption_Selector_OnOptionClicked");
static_assert(offsetof(BFGWidget_DialogOption_Selector_OnOptionClicked, _iOption) == 0x000000, "Member 'BFGWidget_DialogOption_Selector_OnOptionClicked::_iOption' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_DialogOption_Slider.ActionSlider__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_DialogOption_Slider_ActionSlider__DelegateSignature final
{
public:
	class UBFGWidget_DialogOption_Slider*         _pSlider;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Slider_ActionSlider__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_DialogOption_Slider_ActionSlider__DelegateSignature");
static_assert(sizeof(BFGWidget_DialogOption_Slider_ActionSlider__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_DialogOption_Slider_ActionSlider__DelegateSignature");
static_assert(offsetof(BFGWidget_DialogOption_Slider_ActionSlider__DelegateSignature, _pSlider) == 0x000000, "Member 'BFGWidget_DialogOption_Slider_ActionSlider__DelegateSignature::_pSlider' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Slider.SetRelativeValue
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_DialogOption_Slider_SetRelativeValue final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBroadcast;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_DialogOption_Slider_SetRelativeValue) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_Slider_SetRelativeValue");
static_assert(sizeof(BFGWidget_DialogOption_Slider_SetRelativeValue) == 0x000008, "Wrong size on BFGWidget_DialogOption_Slider_SetRelativeValue");
static_assert(offsetof(BFGWidget_DialogOption_Slider_SetRelativeValue, _fValue) == 0x000000, "Member 'BFGWidget_DialogOption_Slider_SetRelativeValue::_fValue' has a wrong offset!");
static_assert(offsetof(BFGWidget_DialogOption_Slider_SetRelativeValue, _bBroadcast) == 0x000004, "Member 'BFGWidget_DialogOption_Slider_SetRelativeValue::_bBroadcast' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Slider.SetValueAsAbsolute
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_DialogOption_Slider_SetValueAsAbsolute final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBroadcast;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_DialogOption_Slider_SetValueAsAbsolute) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_Slider_SetValueAsAbsolute");
static_assert(sizeof(BFGWidget_DialogOption_Slider_SetValueAsAbsolute) == 0x000008, "Wrong size on BFGWidget_DialogOption_Slider_SetValueAsAbsolute");
static_assert(offsetof(BFGWidget_DialogOption_Slider_SetValueAsAbsolute, _fValue) == 0x000000, "Member 'BFGWidget_DialogOption_Slider_SetValueAsAbsolute::_fValue' has a wrong offset!");
static_assert(offsetof(BFGWidget_DialogOption_Slider_SetValueAsAbsolute, _bBroadcast) == 0x000004, "Member 'BFGWidget_DialogOption_Slider_SetValueAsAbsolute::_bBroadcast' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Slider.UpdateFloat
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_DialogOption_Slider_UpdateFloat final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Slider_UpdateFloat) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_Slider_UpdateFloat");
static_assert(sizeof(BFGWidget_DialogOption_Slider_UpdateFloat) == 0x000004, "Wrong size on BFGWidget_DialogOption_Slider_UpdateFloat");
static_assert(offsetof(BFGWidget_DialogOption_Slider_UpdateFloat, _fValue) == 0x000000, "Member 'BFGWidget_DialogOption_Slider_UpdateFloat::_fValue' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Slider.UpdatePercent
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_DialogOption_Slider_UpdatePercent final
{
public:
	int32                                         _iPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Slider_UpdatePercent) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_Slider_UpdatePercent");
static_assert(sizeof(BFGWidget_DialogOption_Slider_UpdatePercent) == 0x000004, "Wrong size on BFGWidget_DialogOption_Slider_UpdatePercent");
static_assert(offsetof(BFGWidget_DialogOption_Slider_UpdatePercent, _iPercent) == 0x000000, "Member 'BFGWidget_DialogOption_Slider_UpdatePercent::_iPercent' has a wrong offset!");

// Function BFGCore.BFGWidget_DialogOption_Slider.UpdateSlider
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_DialogOption_Slider_UpdateSlider final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_DialogOption_Slider_UpdateSlider) == 0x000004, "Wrong alignment on BFGWidget_DialogOption_Slider_UpdateSlider");
static_assert(sizeof(BFGWidget_DialogOption_Slider_UpdateSlider) == 0x000004, "Wrong size on BFGWidget_DialogOption_Slider_UpdateSlider");
static_assert(offsetof(BFGWidget_DialogOption_Slider_UpdateSlider, _fValue) == 0x000000, "Member 'BFGWidget_DialogOption_Slider_UpdateSlider::_fValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_KeyAssignmentWindow.ActionName__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_KeyAssignmentWindow_ActionName__DelegateSignature final
{
public:
	class FName                                   _oName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_KeyAssignmentWindow_ActionName__DelegateSignature) == 0x000004, "Wrong alignment on BFGWidget_KeyAssignmentWindow_ActionName__DelegateSignature");
static_assert(sizeof(BFGWidget_KeyAssignmentWindow_ActionName__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_KeyAssignmentWindow_ActionName__DelegateSignature");
static_assert(offsetof(BFGWidget_KeyAssignmentWindow_ActionName__DelegateSignature, _oName) == 0x000000, "Member 'BFGWidget_KeyAssignmentWindow_ActionName__DelegateSignature::_oName' has a wrong offset!");

// Function BFGCore.BFGWidget_KeyAssignmentWindow.OnAssignmentStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_KeyAssignmentWindow_OnAssignmentStateChanged final
{
public:
	EBFGKeyAssignmentState                        _eCurrentState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_KeyAssignmentWindow_OnAssignmentStateChanged) == 0x000001, "Wrong alignment on BFGWidget_KeyAssignmentWindow_OnAssignmentStateChanged");
static_assert(sizeof(BFGWidget_KeyAssignmentWindow_OnAssignmentStateChanged) == 0x000001, "Wrong size on BFGWidget_KeyAssignmentWindow_OnAssignmentStateChanged");
static_assert(offsetof(BFGWidget_KeyAssignmentWindow_OnAssignmentStateChanged, _eCurrentState) == 0x000000, "Member 'BFGWidget_KeyAssignmentWindow_OnAssignmentStateChanged::_eCurrentState' has a wrong offset!");

// Function BFGCore.BFGWidget_KeyAssignmentWindow.OnButtonHover_Accept
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_KeyAssignmentWindow_OnButtonHover_Accept final
{
public:
	bool                                          _bHover;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_KeyAssignmentWindow_OnButtonHover_Accept) == 0x000001, "Wrong alignment on BFGWidget_KeyAssignmentWindow_OnButtonHover_Accept");
static_assert(sizeof(BFGWidget_KeyAssignmentWindow_OnButtonHover_Accept) == 0x000001, "Wrong size on BFGWidget_KeyAssignmentWindow_OnButtonHover_Accept");
static_assert(offsetof(BFGWidget_KeyAssignmentWindow_OnButtonHover_Accept, _bHover) == 0x000000, "Member 'BFGWidget_KeyAssignmentWindow_OnButtonHover_Accept::_bHover' has a wrong offset!");

// Function BFGCore.BFGWidget_KeyAssignmentWindow.OnButtonHover_Cancel
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_KeyAssignmentWindow_OnButtonHover_Cancel final
{
public:
	bool                                          _bHover;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_KeyAssignmentWindow_OnButtonHover_Cancel) == 0x000001, "Wrong alignment on BFGWidget_KeyAssignmentWindow_OnButtonHover_Cancel");
static_assert(sizeof(BFGWidget_KeyAssignmentWindow_OnButtonHover_Cancel) == 0x000001, "Wrong size on BFGWidget_KeyAssignmentWindow_OnButtonHover_Cancel");
static_assert(offsetof(BFGWidget_KeyAssignmentWindow_OnButtonHover_Cancel, _bHover) == 0x000000, "Member 'BFGWidget_KeyAssignmentWindow_OnButtonHover_Cancel::_bHover' has a wrong offset!");

// Function BFGCore.BFGWidget_KeyAssignmentWindow.OnCurrentKeySet
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_KeyAssignmentWindow_OnCurrentKeySet final
{
public:
	class FText                                   _strCurrentKey;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_KeyAssignmentWindow_OnCurrentKeySet) == 0x000008, "Wrong alignment on BFGWidget_KeyAssignmentWindow_OnCurrentKeySet");
static_assert(sizeof(BFGWidget_KeyAssignmentWindow_OnCurrentKeySet) == 0x000018, "Wrong size on BFGWidget_KeyAssignmentWindow_OnCurrentKeySet");
static_assert(offsetof(BFGWidget_KeyAssignmentWindow_OnCurrentKeySet, _strCurrentKey) == 0x000000, "Member 'BFGWidget_KeyAssignmentWindow_OnCurrentKeySet::_strCurrentKey' has a wrong offset!");

// Function BFGCore.BFGWidget_KeyAssignmentWindow.OnIndexSet
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_KeyAssignmentWindow_OnIndexSet final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_KeyAssignmentWindow_OnIndexSet) == 0x000004, "Wrong alignment on BFGWidget_KeyAssignmentWindow_OnIndexSet");
static_assert(sizeof(BFGWidget_KeyAssignmentWindow_OnIndexSet) == 0x000004, "Wrong size on BFGWidget_KeyAssignmentWindow_OnIndexSet");
static_assert(offsetof(BFGWidget_KeyAssignmentWindow_OnIndexSet, _iIndex) == 0x000000, "Member 'BFGWidget_KeyAssignmentWindow_OnIndexSet::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_KeyAssignmentWindow.OnUsedControlTextSet
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_KeyAssignmentWindow_OnUsedControlTextSet final
{
public:
	class FText                                   _strUsedControl;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_KeyAssignmentWindow_OnUsedControlTextSet) == 0x000008, "Wrong alignment on BFGWidget_KeyAssignmentWindow_OnUsedControlTextSet");
static_assert(sizeof(BFGWidget_KeyAssignmentWindow_OnUsedControlTextSet) == 0x000018, "Wrong size on BFGWidget_KeyAssignmentWindow_OnUsedControlTextSet");
static_assert(offsetof(BFGWidget_KeyAssignmentWindow_OnUsedControlTextSet, _strUsedControl) == 0x000000, "Member 'BFGWidget_KeyAssignmentWindow_OnUsedControlTextSet::_strUsedControl' has a wrong offset!");

// Function BFGCore.BFGWidget_GameplayEnd_BackgroundBlur.GetBlurStrength
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_GameplayEnd_BackgroundBlur_GetBlurStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameplayEnd_BackgroundBlur_GetBlurStrength) == 0x000004, "Wrong alignment on BFGWidget_GameplayEnd_BackgroundBlur_GetBlurStrength");
static_assert(sizeof(BFGWidget_GameplayEnd_BackgroundBlur_GetBlurStrength) == 0x000004, "Wrong size on BFGWidget_GameplayEnd_BackgroundBlur_GetBlurStrength");
static_assert(offsetof(BFGWidget_GameplayEnd_BackgroundBlur_GetBlurStrength, ReturnValue) == 0x000000, "Member 'BFGWidget_GameplayEnd_BackgroundBlur_GetBlurStrength::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_GameplayTags.Event__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_GameplayTags_Event__DelegateSignature final
{
public:
	class UBFGWidget_GameplayTagOption*           _pWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameplayTags_Event__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_GameplayTags_Event__DelegateSignature");
static_assert(sizeof(BFGWidget_GameplayTags_Event__DelegateSignature) == 0x000008, "Wrong size on BFGWidget_GameplayTags_Event__DelegateSignature");
static_assert(offsetof(BFGWidget_GameplayTags_Event__DelegateSignature, _pWidget) == 0x000000, "Member 'BFGWidget_GameplayTags_Event__DelegateSignature::_pWidget' has a wrong offset!");

// Function BFGCore.BFGWidget_GameplayTags.UpdateData
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_GameplayTags_UpdateData final
{
public:
	TArray<class UBFGMentalAbilityBase*>          _apAvailableAbilities;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GameplayTags_UpdateData) == 0x000008, "Wrong alignment on BFGWidget_GameplayTags_UpdateData");
static_assert(sizeof(BFGWidget_GameplayTags_UpdateData) == 0x000010, "Wrong size on BFGWidget_GameplayTags_UpdateData");
static_assert(offsetof(BFGWidget_GameplayTags_UpdateData, _apAvailableAbilities) == 0x000000, "Member 'BFGWidget_GameplayTags_UpdateData::_apAvailableAbilities' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericHold.Enable
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_GenericHold_Enable final
{
public:
	bool                                          _bIsEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAnimate;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericHold_Enable) == 0x000001, "Wrong alignment on BFGWidget_GenericHold_Enable");
static_assert(sizeof(BFGWidget_GenericHold_Enable) == 0x000002, "Wrong size on BFGWidget_GenericHold_Enable");
static_assert(offsetof(BFGWidget_GenericHold_Enable, _bIsEnabled) == 0x000000, "Member 'BFGWidget_GenericHold_Enable::_bIsEnabled' has a wrong offset!");
static_assert(offsetof(BFGWidget_GenericHold_Enable, _bAnimate) == 0x000001, "Member 'BFGWidget_GenericHold_Enable::_bAnimate' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericHold.Hide_Internal
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_GenericHold_Hide_Internal final
{
public:
	bool                                          _bAnimate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericHold_Hide_Internal) == 0x000001, "Wrong alignment on BFGWidget_GenericHold_Hide_Internal");
static_assert(sizeof(BFGWidget_GenericHold_Hide_Internal) == 0x000001, "Wrong size on BFGWidget_GenericHold_Hide_Internal");
static_assert(offsetof(BFGWidget_GenericHold_Hide_Internal, _bAnimate) == 0x000000, "Member 'BFGWidget_GenericHold_Hide_Internal::_bAnimate' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericHold.Show
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_GenericHold_Show final
{
public:
	bool                                          _bIsVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAnimate;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericHold_Show) == 0x000001, "Wrong alignment on BFGWidget_GenericHold_Show");
static_assert(sizeof(BFGWidget_GenericHold_Show) == 0x000002, "Wrong size on BFGWidget_GenericHold_Show");
static_assert(offsetof(BFGWidget_GenericHold_Show, _bIsVisible) == 0x000000, "Member 'BFGWidget_GenericHold_Show::_bIsVisible' has a wrong offset!");
static_assert(offsetof(BFGWidget_GenericHold_Show, _bAnimate) == 0x000001, "Member 'BFGWidget_GenericHold_Show::_bAnimate' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericHold.Show_Internal
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_GenericHold_Show_Internal final
{
public:
	bool                                          _bAnimate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericHold_Show_Internal) == 0x000001, "Wrong alignment on BFGWidget_GenericHold_Show_Internal");
static_assert(sizeof(BFGWidget_GenericHold_Show_Internal) == 0x000001, "Wrong size on BFGWidget_GenericHold_Show_Internal");
static_assert(offsetof(BFGWidget_GenericHold_Show_Internal, _bAnimate) == 0x000000, "Member 'BFGWidget_GenericHold_Show_Internal::_bAnimate' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericHold.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_GenericHold_UpdateProgress final
{
public:
	float                                         _fPercentage;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericHold_UpdateProgress) == 0x000004, "Wrong alignment on BFGWidget_GenericHold_UpdateProgress");
static_assert(sizeof(BFGWidget_GenericHold_UpdateProgress) == 0x000004, "Wrong size on BFGWidget_GenericHold_UpdateProgress");
static_assert(offsetof(BFGWidget_GenericHold_UpdateProgress, _fPercentage) == 0x000000, "Member 'BFGWidget_GenericHold_UpdateProgress::_fPercentage' has a wrong offset!");

// Function BFGCore.BFGWidget_GenericHold.GetBtnHint
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_GenericHold_GetBtnHint final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_GenericHold_GetBtnHint) == 0x000008, "Wrong alignment on BFGWidget_GenericHold_GetBtnHint");
static_assert(sizeof(BFGWidget_GenericHold_GetBtnHint) == 0x000018, "Wrong size on BFGWidget_GenericHold_GetBtnHint");
static_assert(offsetof(BFGWidget_GenericHold_GetBtnHint, ReturnValue) == 0x000000, "Member 'BFGWidget_GenericHold_GetBtnHint::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_Crosshair.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_Crosshair_GetWeapon final
{
public:
	class ABFGWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_Crosshair_GetWeapon) == 0x000008, "Wrong alignment on BFGWidget_HUD_Crosshair_GetWeapon");
static_assert(sizeof(BFGWidget_HUD_Crosshair_GetWeapon) == 0x000008, "Wrong size on BFGWidget_HUD_Crosshair_GetWeapon");
static_assert(offsetof(BFGWidget_HUD_Crosshair_GetWeapon, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_Crosshair_GetWeapon::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_Crosshair.SetWeapon
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_Crosshair_SetWeapon final
{
public:
	class ABFGWeapon*                             _pWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_Crosshair_SetWeapon) == 0x000008, "Wrong alignment on BFGWidget_HUD_Crosshair_SetWeapon");
static_assert(sizeof(BFGWidget_HUD_Crosshair_SetWeapon) == 0x000008, "Wrong size on BFGWidget_HUD_Crosshair_SetWeapon");
static_assert(offsetof(BFGWidget_HUD_Crosshair_SetWeapon, _pWeapon) == 0x000000, "Member 'BFGWidget_HUD_Crosshair_SetWeapon::_pWeapon' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_HealthIndicator.SetActor
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_HealthIndicator_SetActor final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_HealthIndicator_SetActor) == 0x000008, "Wrong alignment on BFGWidget_HUD_HealthIndicator_SetActor");
static_assert(sizeof(BFGWidget_HUD_HealthIndicator_SetActor) == 0x000008, "Wrong size on BFGWidget_HUD_HealthIndicator_SetActor");
static_assert(offsetof(BFGWidget_HUD_HealthIndicator_SetActor, PActor) == 0x000000, "Member 'BFGWidget_HUD_HealthIndicator_SetActor::PActor' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_HealthIndicator.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_HealthIndicator_SetHealth final
{
public:
	float                                         _fValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_HealthIndicator_SetHealth) == 0x000004, "Wrong alignment on BFGWidget_HUD_HealthIndicator_SetHealth");
static_assert(sizeof(BFGWidget_HUD_HealthIndicator_SetHealth) == 0x000004, "Wrong size on BFGWidget_HUD_HealthIndicator_SetHealth");
static_assert(offsetof(BFGWidget_HUD_HealthIndicator_SetHealth, _fValue) == 0x000000, "Member 'BFGWidget_HUD_HealthIndicator_SetHealth::_fValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_OrthoBox.ShowWidget
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_HUD_OrthoBox_ShowWidget final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_OrthoBox_ShowWidget) == 0x000001, "Wrong alignment on BFGWidget_HUD_OrthoBox_ShowWidget");
static_assert(sizeof(BFGWidget_HUD_OrthoBox_ShowWidget) == 0x000001, "Wrong size on BFGWidget_HUD_OrthoBox_ShowWidget");
static_assert(offsetof(BFGWidget_HUD_OrthoBox_ShowWidget, _bShow) == 0x000000, "Member 'BFGWidget_HUD_OrthoBox_ShowWidget::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_SubquestEntry.TriggerFinishedAnimation
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_SubquestEntry_TriggerFinishedAnimation final
{
public:
	bool                                          _bFailed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_SubquestEntry_TriggerFinishedAnimation) == 0x000001, "Wrong alignment on BFGWidget_SubquestEntry_TriggerFinishedAnimation");
static_assert(sizeof(BFGWidget_SubquestEntry_TriggerFinishedAnimation) == 0x000001, "Wrong size on BFGWidget_SubquestEntry_TriggerFinishedAnimation");
static_assert(offsetof(BFGWidget_SubquestEntry_TriggerFinishedAnimation, _bFailed) == 0x000000, "Member 'BFGWidget_SubquestEntry_TriggerFinishedAnimation::_bFailed' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_Radar.GetRadarPanel
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_Radar_GetRadarPanel final
{
public:
	class UCanvasPanel*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_Radar_GetRadarPanel) == 0x000008, "Wrong alignment on BFGWidget_HUD_Radar_GetRadarPanel");
static_assert(sizeof(BFGWidget_HUD_Radar_GetRadarPanel) == 0x000008, "Wrong size on BFGWidget_HUD_Radar_GetRadarPanel");
static_assert(offsetof(BFGWidget_HUD_Radar_GetRadarPanel, ReturnValue) == 0x000000, "Member 'BFGWidget_HUD_Radar_GetRadarPanel::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_Radar.OnRadarObjectsUpdated
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_HUD_Radar_OnRadarObjectsUpdated final
{
public:
	class UBFGRadarManager*                       _pRadarManager;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_Radar_OnRadarObjectsUpdated) == 0x000008, "Wrong alignment on BFGWidget_HUD_Radar_OnRadarObjectsUpdated");
static_assert(sizeof(BFGWidget_HUD_Radar_OnRadarObjectsUpdated) == 0x000008, "Wrong size on BFGWidget_HUD_Radar_OnRadarObjectsUpdated");
static_assert(offsetof(BFGWidget_HUD_Radar_OnRadarObjectsUpdated, _pRadarManager) == 0x000000, "Member 'BFGWidget_HUD_Radar_OnRadarObjectsUpdated::_pRadarManager' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_Radar.UpdateOrientation
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_HUD_Radar_UpdateOrientation final
{
public:
	float                                         _fAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_Radar_UpdateOrientation) == 0x000004, "Wrong alignment on BFGWidget_HUD_Radar_UpdateOrientation");
static_assert(sizeof(BFGWidget_HUD_Radar_UpdateOrientation) == 0x000004, "Wrong size on BFGWidget_HUD_Radar_UpdateOrientation");
static_assert(offsetof(BFGWidget_HUD_Radar_UpdateOrientation, _fAngle) == 0x000000, "Member 'BFGWidget_HUD_Radar_UpdateOrientation::_fAngle' has a wrong offset!");

// Function BFGCore.BFGWidget_HUD_TutorialPanel.AddPageToCanvas
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_HUD_TutorialPanel_AddPageToCanvas final
{
public:
	class UBFGWidget_TutorialPage*                InPage;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_HUD_TutorialPanel_AddPageToCanvas) == 0x000008, "Wrong alignment on BFGWidget_HUD_TutorialPanel_AddPageToCanvas");
static_assert(sizeof(BFGWidget_HUD_TutorialPanel_AddPageToCanvas) == 0x000010, "Wrong size on BFGWidget_HUD_TutorialPanel_AddPageToCanvas");
static_assert(offsetof(BFGWidget_HUD_TutorialPanel_AddPageToCanvas, InPage) == 0x000000, "Member 'BFGWidget_HUD_TutorialPanel_AddPageToCanvas::InPage' has a wrong offset!");
static_assert(offsetof(BFGWidget_HUD_TutorialPanel_AddPageToCanvas, ReturnValue) == 0x000008, "Member 'BFGWidget_HUD_TutorialPanel_AddPageToCanvas::ReturnValue' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_LinearGraph.ActionLinearGraphNode__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature final
{
public:
	class UBFGWidget_LinearGraph*                 _pGraph;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iNodeIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature");
static_assert(sizeof(BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature) == 0x000010, "Wrong size on BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature");
static_assert(offsetof(BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature, _pGraph) == 0x000000, "Member 'BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature::_pGraph' has a wrong offset!");
static_assert(offsetof(BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature, _iNodeIndex) == 0x000008, "Member 'BFGWidget_LinearGraph_ActionLinearGraphNode__DelegateSignature::_iNodeIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_LinearGraph.SetOptionSelected
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_LinearGraph_SetOptionSelected final
{
public:
	int32                                         IIndex;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_LinearGraph_SetOptionSelected) == 0x000004, "Wrong alignment on BFGWidget_LinearGraph_SetOptionSelected");
static_assert(sizeof(BFGWidget_LinearGraph_SetOptionSelected) == 0x000004, "Wrong size on BFGWidget_LinearGraph_SetOptionSelected");
static_assert(offsetof(BFGWidget_LinearGraph_SetOptionSelected, IIndex) == 0x000000, "Member 'BFGWidget_LinearGraph_SetOptionSelected::IIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_LinearGraph.HasNodes
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_LinearGraph_HasNodes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_LinearGraph_HasNodes) == 0x000001, "Wrong alignment on BFGWidget_LinearGraph_HasNodes");
static_assert(sizeof(BFGWidget_LinearGraph_HasNodes) == 0x000001, "Wrong size on BFGWidget_LinearGraph_HasNodes");
static_assert(offsetof(BFGWidget_LinearGraph_HasNodes, ReturnValue) == 0x000000, "Member 'BFGWidget_LinearGraph_HasNodes::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_MissionResults.EnableContinueButton
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MissionResults_EnableContinueButton final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MissionResults_EnableContinueButton) == 0x000001, "Wrong alignment on BFGWidget_MissionResults_EnableContinueButton");
static_assert(sizeof(BFGWidget_MissionResults_EnableContinueButton) == 0x000001, "Wrong size on BFGWidget_MissionResults_EnableContinueButton");
static_assert(offsetof(BFGWidget_MissionResults_EnableContinueButton, _bEnable) == 0x000000, "Member 'BFGWidget_MissionResults_EnableContinueButton::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_MissionResults.EnableExitButton
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MissionResults_EnableExitButton final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MissionResults_EnableExitButton) == 0x000001, "Wrong alignment on BFGWidget_MissionResults_EnableExitButton");
static_assert(sizeof(BFGWidget_MissionResults_EnableExitButton) == 0x000001, "Wrong size on BFGWidget_MissionResults_EnableExitButton");
static_assert(offsetof(BFGWidget_MissionResults_EnableExitButton, _bEnable) == 0x000000, "Member 'BFGWidget_MissionResults_EnableExitButton::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_MissionResults.EnableMinimalMissionResultInfo
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MissionResults_EnableMinimalMissionResultInfo final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MissionResults_EnableMinimalMissionResultInfo) == 0x000001, "Wrong alignment on BFGWidget_MissionResults_EnableMinimalMissionResultInfo");
static_assert(sizeof(BFGWidget_MissionResults_EnableMinimalMissionResultInfo) == 0x000001, "Wrong size on BFGWidget_MissionResults_EnableMinimalMissionResultInfo");
static_assert(offsetof(BFGWidget_MissionResults_EnableMinimalMissionResultInfo, _bEnable) == 0x000000, "Member 'BFGWidget_MissionResults_EnableMinimalMissionResultInfo::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_MissionResults.EnableMissionFailedInfo
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MissionResults_EnableMissionFailedInfo final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MissionResults_EnableMissionFailedInfo) == 0x000001, "Wrong alignment on BFGWidget_MissionResults_EnableMissionFailedInfo");
static_assert(sizeof(BFGWidget_MissionResults_EnableMissionFailedInfo) == 0x000001, "Wrong size on BFGWidget_MissionResults_EnableMissionFailedInfo");
static_assert(offsetof(BFGWidget_MissionResults_EnableMissionFailedInfo, _bEnable) == 0x000000, "Member 'BFGWidget_MissionResults_EnableMissionFailedInfo::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_MissionResults.EnableMissionResultInfo
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MissionResults_EnableMissionResultInfo final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MissionResults_EnableMissionResultInfo) == 0x000001, "Wrong alignment on BFGWidget_MissionResults_EnableMissionResultInfo");
static_assert(sizeof(BFGWidget_MissionResults_EnableMissionResultInfo) == 0x000001, "Wrong size on BFGWidget_MissionResults_EnableMissionResultInfo");
static_assert(offsetof(BFGWidget_MissionResults_EnableMissionResultInfo, _bEnable) == 0x000000, "Member 'BFGWidget_MissionResults_EnableMissionResultInfo::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_MissionResults.EnableReplayButton
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MissionResults_EnableReplayButton final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MissionResults_EnableReplayButton) == 0x000001, "Wrong alignment on BFGWidget_MissionResults_EnableReplayButton");
static_assert(sizeof(BFGWidget_MissionResults_EnableReplayButton) == 0x000001, "Wrong size on BFGWidget_MissionResults_EnableReplayButton");
static_assert(offsetof(BFGWidget_MissionResults_EnableReplayButton, _bEnable) == 0x000000, "Member 'BFGWidget_MissionResults_EnableReplayButton::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_MissionResults.OnRewardGained
// 0x0030 (0x0030 - 0x0000)
struct BFGWidget_MissionResults_OnRewardGained final
{
public:
	class FText                                   _inTopic;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _inDescription;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MissionResults_OnRewardGained) == 0x000008, "Wrong alignment on BFGWidget_MissionResults_OnRewardGained");
static_assert(sizeof(BFGWidget_MissionResults_OnRewardGained) == 0x000030, "Wrong size on BFGWidget_MissionResults_OnRewardGained");
static_assert(offsetof(BFGWidget_MissionResults_OnRewardGained, _inTopic) == 0x000000, "Member 'BFGWidget_MissionResults_OnRewardGained::_inTopic' has a wrong offset!");
static_assert(offsetof(BFGWidget_MissionResults_OnRewardGained, _inDescription) == 0x000018, "Member 'BFGWidget_MissionResults_OnRewardGained::_inDescription' has a wrong offset!");

// Function BFGCore.BFGWidget_MissionResults.SetMissionResultInternal
// 0x0098 (0x0098 - 0x0000)
struct BFGWidget_MissionResults_SetMissionResultInternal final
{
public:
	struct FBFGMissionResultInfo                  _oResultInfo;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBFGMissionResultType                         _ResultType;                                       // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_MissionResults_SetMissionResultInternal) == 0x000008, "Wrong alignment on BFGWidget_MissionResults_SetMissionResultInternal");
static_assert(sizeof(BFGWidget_MissionResults_SetMissionResultInternal) == 0x000098, "Wrong size on BFGWidget_MissionResults_SetMissionResultInternal");
static_assert(offsetof(BFGWidget_MissionResults_SetMissionResultInternal, _oResultInfo) == 0x000000, "Member 'BFGWidget_MissionResults_SetMissionResultInternal::_oResultInfo' has a wrong offset!");
static_assert(offsetof(BFGWidget_MissionResults_SetMissionResultInternal, _ResultType) == 0x000090, "Member 'BFGWidget_MissionResults_SetMissionResultInternal::_ResultType' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.AddSubmenuToLayout
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_Main_AddSubmenuToLayout final
{
public:
	class UBFGWidget_Mothership_Submenu*          _pWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_AddSubmenuToLayout) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Main_AddSubmenuToLayout");
static_assert(sizeof(BFGWidget_Mothership_Main_AddSubmenuToLayout) == 0x000008, "Wrong size on BFGWidget_Mothership_Main_AddSubmenuToLayout");
static_assert(offsetof(BFGWidget_Mothership_Main_AddSubmenuToLayout, _pWidget) == 0x000000, "Member 'BFGWidget_Mothership_Main_AddSubmenuToLayout::_pWidget' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.EnableButtonAccept
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Mothership_Main_EnableButtonAccept final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_EnableButtonAccept) == 0x000001, "Wrong alignment on BFGWidget_Mothership_Main_EnableButtonAccept");
static_assert(sizeof(BFGWidget_Mothership_Main_EnableButtonAccept) == 0x000001, "Wrong size on BFGWidget_Mothership_Main_EnableButtonAccept");
static_assert(offsetof(BFGWidget_Mothership_Main_EnableButtonAccept, _bEnable) == 0x000000, "Member 'BFGWidget_Mothership_Main_EnableButtonAccept::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.EnableButtonBack
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Mothership_Main_EnableButtonBack final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_EnableButtonBack) == 0x000001, "Wrong alignment on BFGWidget_Mothership_Main_EnableButtonBack");
static_assert(sizeof(BFGWidget_Mothership_Main_EnableButtonBack) == 0x000001, "Wrong size on BFGWidget_Mothership_Main_EnableButtonBack");
static_assert(offsetof(BFGWidget_Mothership_Main_EnableButtonBack, _bEnable) == 0x000000, "Member 'BFGWidget_Mothership_Main_EnableButtonBack::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.EnableButtonOption1
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_Mothership_Main_EnableButtonOption1 final
{
public:
	bool                                          _bEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_EnableButtonOption1) == 0x000001, "Wrong alignment on BFGWidget_Mothership_Main_EnableButtonOption1");
static_assert(sizeof(BFGWidget_Mothership_Main_EnableButtonOption1) == 0x000001, "Wrong size on BFGWidget_Mothership_Main_EnableButtonOption1");
static_assert(offsetof(BFGWidget_Mothership_Main_EnableButtonOption1, _bEnable) == 0x000000, "Member 'BFGWidget_Mothership_Main_EnableButtonOption1::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.OnChildNotificationSeen
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_Main_OnChildNotificationSeen final
{
public:
	class FName                                   _oHandlerName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_OnChildNotificationSeen) == 0x000004, "Wrong alignment on BFGWidget_Mothership_Main_OnChildNotificationSeen");
static_assert(sizeof(BFGWidget_Mothership_Main_OnChildNotificationSeen) == 0x000008, "Wrong size on BFGWidget_Mothership_Main_OnChildNotificationSeen");
static_assert(offsetof(BFGWidget_Mothership_Main_OnChildNotificationSeen, _oHandlerName) == 0x000000, "Member 'BFGWidget_Mothership_Main_OnChildNotificationSeen::_oHandlerName' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.OnMenuContextChanged
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_Mothership_Main_OnMenuContextChanged final
{
public:
	TArray<struct FBFGTreeMenuContext>            _apMenuContext;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_OnMenuContextChanged) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Main_OnMenuContextChanged");
static_assert(sizeof(BFGWidget_Mothership_Main_OnMenuContextChanged) == 0x000010, "Wrong size on BFGWidget_Mothership_Main_OnMenuContextChanged");
static_assert(offsetof(BFGWidget_Mothership_Main_OnMenuContextChanged, _apMenuContext) == 0x000000, "Member 'BFGWidget_Mothership_Main_OnMenuContextChanged::_apMenuContext' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.OnUpdateDNAAmountWidget
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_Mothership_Main_OnUpdateDNAAmountWidget final
{
public:
	int32                                         _fDNA;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_OnUpdateDNAAmountWidget) == 0x000004, "Wrong alignment on BFGWidget_Mothership_Main_OnUpdateDNAAmountWidget");
static_assert(sizeof(BFGWidget_Mothership_Main_OnUpdateDNAAmountWidget) == 0x000004, "Wrong size on BFGWidget_Mothership_Main_OnUpdateDNAAmountWidget");
static_assert(offsetof(BFGWidget_Mothership_Main_OnUpdateDNAAmountWidget, _fDNA) == 0x000000, "Member 'BFGWidget_Mothership_Main_OnUpdateDNAAmountWidget::_fDNA' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.SetButtonTextAccept
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Mothership_Main_SetButtonTextAccept final
{
public:
	class FText                                   _oButtonTextAccept;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_SetButtonTextAccept) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Main_SetButtonTextAccept");
static_assert(sizeof(BFGWidget_Mothership_Main_SetButtonTextAccept) == 0x000018, "Wrong size on BFGWidget_Mothership_Main_SetButtonTextAccept");
static_assert(offsetof(BFGWidget_Mothership_Main_SetButtonTextAccept, _oButtonTextAccept) == 0x000000, "Member 'BFGWidget_Mothership_Main_SetButtonTextAccept::_oButtonTextAccept' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.SetButtonTextBack
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Mothership_Main_SetButtonTextBack final
{
public:
	class FText                                   _oButtonTextBack;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_SetButtonTextBack) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Main_SetButtonTextBack");
static_assert(sizeof(BFGWidget_Mothership_Main_SetButtonTextBack) == 0x000018, "Wrong size on BFGWidget_Mothership_Main_SetButtonTextBack");
static_assert(offsetof(BFGWidget_Mothership_Main_SetButtonTextBack, _oButtonTextBack) == 0x000000, "Member 'BFGWidget_Mothership_Main_SetButtonTextBack::_oButtonTextBack' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.SetButtonTextOption1
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Mothership_Main_SetButtonTextOption1 final
{
public:
	class FText                                   _oButtonTextOption1;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_SetButtonTextOption1) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Main_SetButtonTextOption1");
static_assert(sizeof(BFGWidget_Mothership_Main_SetButtonTextOption1) == 0x000018, "Wrong size on BFGWidget_Mothership_Main_SetButtonTextOption1");
static_assert(offsetof(BFGWidget_Mothership_Main_SetButtonTextOption1, _oButtonTextOption1) == 0x000000, "Member 'BFGWidget_Mothership_Main_SetButtonTextOption1::_oButtonTextOption1' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_Mothership_Main_SetTitle final
{
public:
	class FText                                   _oTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_SetTitle) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Main_SetTitle");
static_assert(sizeof(BFGWidget_Mothership_Main_SetTitle) == 0x000018, "Wrong size on BFGWidget_Mothership_Main_SetTitle");
static_assert(offsetof(BFGWidget_Mothership_Main_SetTitle, _oTitle) == 0x000000, "Member 'BFGWidget_Mothership_Main_SetTitle::_oTitle' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.GetActiveSubmenu
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_Mothership_Main_GetActiveSubmenu final
{
public:
	class UBFGWidget_Mothership_Submenu*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_Mothership_Main_GetActiveSubmenu) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Main_GetActiveSubmenu");
static_assert(sizeof(BFGWidget_Mothership_Main_GetActiveSubmenu) == 0x000008, "Wrong size on BFGWidget_Mothership_Main_GetActiveSubmenu");
static_assert(offsetof(BFGWidget_Mothership_Main_GetActiveSubmenu, ReturnValue) == 0x000000, "Member 'BFGWidget_Mothership_Main_GetActiveSubmenu::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_Mothership_Main.GetIndexSubmenu
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_Mothership_Main_GetIndexSubmenu final
{
public:
	class UBFGWidget_Mothership_Submenu*          _pSubmenu;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_Mothership_Main_GetIndexSubmenu) == 0x000008, "Wrong alignment on BFGWidget_Mothership_Main_GetIndexSubmenu");
static_assert(sizeof(BFGWidget_Mothership_Main_GetIndexSubmenu) == 0x000010, "Wrong size on BFGWidget_Mothership_Main_GetIndexSubmenu");
static_assert(offsetof(BFGWidget_Mothership_Main_GetIndexSubmenu, _pSubmenu) == 0x000000, "Member 'BFGWidget_Mothership_Main_GetIndexSubmenu::_pSubmenu' has a wrong offset!");
static_assert(offsetof(BFGWidget_Mothership_Main_GetIndexSubmenu, ReturnValue) == 0x000008, "Member 'BFGWidget_Mothership_Main_GetIndexSubmenu::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidgetMissionSelectionNode.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct BFGWidgetMissionSelectionNode_GetPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetMissionSelectionNode_GetPosition) == 0x000004, "Wrong alignment on BFGWidgetMissionSelectionNode_GetPosition");
static_assert(sizeof(BFGWidgetMissionSelectionNode_GetPosition) == 0x000008, "Wrong size on BFGWidgetMissionSelectionNode_GetPosition");
static_assert(offsetof(BFGWidgetMissionSelectionNode_GetPosition, ReturnValue) == 0x000000, "Member 'BFGWidgetMissionSelectionNode_GetPosition::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidgetMissionSelectionNode.SetHighlighted
// 0x0001 (0x0001 - 0x0000)
struct BFGWidgetMissionSelectionNode_SetHighlighted final
{
public:
	bool                                          _bHighlighted;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetMissionSelectionNode_SetHighlighted) == 0x000001, "Wrong alignment on BFGWidgetMissionSelectionNode_SetHighlighted");
static_assert(sizeof(BFGWidgetMissionSelectionNode_SetHighlighted) == 0x000001, "Wrong size on BFGWidgetMissionSelectionNode_SetHighlighted");
static_assert(offsetof(BFGWidgetMissionSelectionNode_SetHighlighted, _bHighlighted) == 0x000000, "Member 'BFGWidgetMissionSelectionNode_SetHighlighted::_bHighlighted' has a wrong offset!");

// Function BFGCore.BFGWidgetMissionSelectionNode.SetNewContentAvailable
// 0x0001 (0x0001 - 0x0000)
struct BFGWidgetMissionSelectionNode_SetNewContentAvailable final
{
public:
	bool                                          _bNewContentAvailable;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetMissionSelectionNode_SetNewContentAvailable) == 0x000001, "Wrong alignment on BFGWidgetMissionSelectionNode_SetNewContentAvailable");
static_assert(sizeof(BFGWidgetMissionSelectionNode_SetNewContentAvailable) == 0x000001, "Wrong size on BFGWidgetMissionSelectionNode_SetNewContentAvailable");
static_assert(offsetof(BFGWidgetMissionSelectionNode_SetNewContentAvailable, _bNewContentAvailable) == 0x000000, "Member 'BFGWidgetMissionSelectionNode_SetNewContentAvailable::_bNewContentAvailable' has a wrong offset!");

// Function BFGCore.BFGWidgetMissionSelectionNode.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct BFGWidgetMissionSelectionNode_SetPosition final
{
public:
	struct FVector2D                              _vPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetMissionSelectionNode_SetPosition) == 0x000004, "Wrong alignment on BFGWidgetMissionSelectionNode_SetPosition");
static_assert(sizeof(BFGWidgetMissionSelectionNode_SetPosition) == 0x000008, "Wrong size on BFGWidgetMissionSelectionNode_SetPosition");
static_assert(offsetof(BFGWidgetMissionSelectionNode_SetPosition, _vPos) == 0x000000, "Member 'BFGWidgetMissionSelectionNode_SetPosition::_vPos' has a wrong offset!");

// Function BFGCore.BFGWidgetMissionSelectionNode.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct BFGWidgetMissionSelectionNode_SetSelected final
{
public:
	bool                                          _bSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetMissionSelectionNode_SetSelected) == 0x000001, "Wrong alignment on BFGWidgetMissionSelectionNode_SetSelected");
static_assert(sizeof(BFGWidgetMissionSelectionNode_SetSelected) == 0x000001, "Wrong size on BFGWidgetMissionSelectionNode_SetSelected");
static_assert(offsetof(BFGWidgetMissionSelectionNode_SetSelected, _bSelected) == 0x000000, "Member 'BFGWidgetMissionSelectionNode_SetSelected::_bSelected' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.AddUniqueUpgrade
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_AddUniqueUpgrade final
{
public:
	class UBFGDataAssetPoxLabUpgrade*             _pUpgrade;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_AddUniqueUpgrade) == 0x000008, "Wrong alignment on BFGWidget_MotherShip_PoxLab_AddUniqueUpgrade");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_AddUniqueUpgrade) == 0x000008, "Wrong size on BFGWidget_MotherShip_PoxLab_AddUniqueUpgrade");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_AddUniqueUpgrade, _pUpgrade) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_AddUniqueUpgrade::_pUpgrade' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.AddUpgrade
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_AddUpgrade final
{
public:
	class UBFGDataAssetPoxLabUpgrade*             _pUpgrade;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_AddUpgrade) == 0x000008, "Wrong alignment on BFGWidget_MotherShip_PoxLab_AddUpgrade");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_AddUpgrade) == 0x000008, "Wrong size on BFGWidget_MotherShip_PoxLab_AddUpgrade");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_AddUpgrade, _pUpgrade) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_AddUpgrade::_pUpgrade' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.ComputeDNAAmount
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_ComputeDNAAmount final
{
public:
	bool                                          _bSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_ComputeDNAAmount) == 0x000001, "Wrong alignment on BFGWidget_MotherShip_PoxLab_ComputeDNAAmount");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_ComputeDNAAmount) == 0x000001, "Wrong size on BFGWidget_MotherShip_PoxLab_ComputeDNAAmount");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_ComputeDNAAmount, _bSuccess) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_ComputeDNAAmount::_bSuccess' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.EnableWidget
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_EnableWidget final
{
public:
	EBFGMotherShipPoxLabType                      _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_EnableWidget) == 0x000001, "Wrong alignment on BFGWidget_MotherShip_PoxLab_EnableWidget");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_EnableWidget) == 0x000001, "Wrong size on BFGWidget_MotherShip_PoxLab_EnableWidget");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_EnableWidget, _eType) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_EnableWidget::_eType' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.GetEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_GetEntryWidget final
{
public:
	class UBFGWidgetPoxLabEntryPoint*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_GetEntryWidget) == 0x000008, "Wrong alignment on BFGWidget_MotherShip_PoxLab_GetEntryWidget");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_GetEntryWidget) == 0x000008, "Wrong size on BFGWidget_MotherShip_PoxLab_GetEntryWidget");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_GetEntryWidget, ReturnValue) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_GetEntryWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.GetSubMenu
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_GetSubMenu final
{
public:
	EBFGMotherShipPoxLabType                      _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGWidget_PoxLabSubmenu*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_GetSubMenu) == 0x000008, "Wrong alignment on BFGWidget_MotherShip_PoxLab_GetSubMenu");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_GetSubMenu) == 0x000010, "Wrong size on BFGWidget_MotherShip_PoxLab_GetSubMenu");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_GetSubMenu, _eType) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_GetSubMenu::_eType' has a wrong offset!");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_GetSubMenu, ReturnValue) == 0x000008, "Member 'BFGWidget_MotherShip_PoxLab_GetSubMenu::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.InitializeUpgrades
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_InitializeUpgrades final
{
public:
	EBFGMotherShipPoxLabType                      _ePoxLabType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBFGDataAssetPoxLabUpgrade*>     _apUpgrades;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _iDNA;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_InitializeUpgrades) == 0x000008, "Wrong alignment on BFGWidget_MotherShip_PoxLab_InitializeUpgrades");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_InitializeUpgrades) == 0x000020, "Wrong size on BFGWidget_MotherShip_PoxLab_InitializeUpgrades");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_InitializeUpgrades, _ePoxLabType) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_InitializeUpgrades::_ePoxLabType' has a wrong offset!");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_InitializeUpgrades, _apUpgrades) == 0x000008, "Member 'BFGWidget_MotherShip_PoxLab_InitializeUpgrades::_apUpgrades' has a wrong offset!");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_InitializeUpgrades, _iDNA) == 0x000018, "Member 'BFGWidget_MotherShip_PoxLab_InitializeUpgrades::_iDNA' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.OnEntryPointOptionClicked
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_OnEntryPointOptionClicked final
{
public:
	EBFGMotherShipPoxLabType                      _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_OnEntryPointOptionClicked) == 0x000001, "Wrong alignment on BFGWidget_MotherShip_PoxLab_OnEntryPointOptionClicked");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_OnEntryPointOptionClicked) == 0x000001, "Wrong size on BFGWidget_MotherShip_PoxLab_OnEntryPointOptionClicked");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_OnEntryPointOptionClicked, _eType) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_OnEntryPointOptionClicked::_eType' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.OnNotifyUpgradeStatus
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_OnNotifyUpgradeStatus final
{
public:
	bool                                          _bSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_OnNotifyUpgradeStatus) == 0x000001, "Wrong alignment on BFGWidget_MotherShip_PoxLab_OnNotifyUpgradeStatus");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_OnNotifyUpgradeStatus) == 0x000001, "Wrong size on BFGWidget_MotherShip_PoxLab_OnNotifyUpgradeStatus");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_OnNotifyUpgradeStatus, _bSuccess) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_OnNotifyUpgradeStatus::_bSuccess' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.OnUpdateDescriptionPanel
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel final
{
public:
	struct FBFGUpgradeItem                        _pUpgrade;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _bUpgraded;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsPurchaseAble;                                  // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel) == 0x000008, "Wrong alignment on BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel) == 0x000018, "Wrong size on BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel, _pUpgrade) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel::_pUpgrade' has a wrong offset!");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel, _bUpgraded) == 0x000010, "Member 'BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel::_bUpgraded' has a wrong offset!");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel, _bIsPurchaseAble) == 0x000011, "Member 'BFGWidget_MotherShip_PoxLab_OnUpdateDescriptionPanel::_bIsPurchaseAble' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.OnUpdateDNAAmount
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_OnUpdateDNAAmount final
{
public:
	int32                                         _iAmountDNA;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_OnUpdateDNAAmount) == 0x000004, "Wrong alignment on BFGWidget_MotherShip_PoxLab_OnUpdateDNAAmount");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_OnUpdateDNAAmount) == 0x000004, "Wrong size on BFGWidget_MotherShip_PoxLab_OnUpdateDNAAmount");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_OnUpdateDNAAmount, _iAmountDNA) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_OnUpdateDNAAmount::_iAmountDNA' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.OnUpgradeAvailable
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable final
{
public:
	EBFGMotherShipPoxLabType                      _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUpgradeAvailable;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable) == 0x000001, "Wrong alignment on BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable) == 0x000002, "Wrong size on BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable, _eType) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable::_eType' has a wrong offset!");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable, _bUpgradeAvailable) == 0x000001, "Member 'BFGWidget_MotherShip_PoxLab_OnUpgradeAvailable::_bUpgradeAvailable' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.RemoveUpgradeAt
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_RemoveUpgradeAt final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_RemoveUpgradeAt) == 0x000004, "Wrong alignment on BFGWidget_MotherShip_PoxLab_RemoveUpgradeAt");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_RemoveUpgradeAt) == 0x000004, "Wrong size on BFGWidget_MotherShip_PoxLab_RemoveUpgradeAt");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_RemoveUpgradeAt, _iIndex) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_RemoveUpgradeAt::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.SetState
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_SetState final
{
public:
	EBFGMotherShipPoxLabType                      _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_SetState) == 0x000001, "Wrong alignment on BFGWidget_MotherShip_PoxLab_SetState");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_SetState) == 0x000001, "Wrong size on BFGWidget_MotherShip_PoxLab_SetState");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_SetState, _eState) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_SetState::_eState' has a wrong offset!");

// Function BFGCore.BFGWidget_MotherShip_PoxLab.UpdateWidgetState
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_MotherShip_PoxLab_UpdateWidgetState final
{
public:
	EBFGMotherShipPoxLabType                      _eState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MotherShip_PoxLab_UpdateWidgetState) == 0x000001, "Wrong alignment on BFGWidget_MotherShip_PoxLab_UpdateWidgetState");
static_assert(sizeof(BFGWidget_MotherShip_PoxLab_UpdateWidgetState) == 0x000001, "Wrong size on BFGWidget_MotherShip_PoxLab_UpdateWidgetState");
static_assert(offsetof(BFGWidget_MotherShip_PoxLab_UpdateWidgetState, _eState) == 0x000000, "Member 'BFGWidget_MotherShip_PoxLab_UpdateWidgetState::_eState' has a wrong offset!");

// Function BFGCore.BFGWidget_MovieSubtitles.SetNewSubtitle
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_MovieSubtitles_SetNewSubtitle final
{
public:
	class FText                                   _strNewSubtitle;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MovieSubtitles_SetNewSubtitle) == 0x000008, "Wrong alignment on BFGWidget_MovieSubtitles_SetNewSubtitle");
static_assert(sizeof(BFGWidget_MovieSubtitles_SetNewSubtitle) == 0x000018, "Wrong size on BFGWidget_MovieSubtitles_SetNewSubtitle");
static_assert(offsetof(BFGWidget_MovieSubtitles_SetNewSubtitle, _strNewSubtitle) == 0x000000, "Member 'BFGWidget_MovieSubtitles_SetNewSubtitle::_strNewSubtitle' has a wrong offset!");

// Function BFGCore.BFGWidget_MovieSubtitles.SetTimeMS
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_MovieSubtitles_SetTimeMS final
{
public:
	int32                                         _iTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_MovieSubtitles_SetTimeMS) == 0x000004, "Wrong alignment on BFGWidget_MovieSubtitles_SetTimeMS");
static_assert(sizeof(BFGWidget_MovieSubtitles_SetTimeMS) == 0x000004, "Wrong size on BFGWidget_MovieSubtitles_SetTimeMS");
static_assert(offsetof(BFGWidget_MovieSubtitles_SetTimeMS, _iTime) == 0x000000, "Member 'BFGWidget_MovieSubtitles_SetTimeMS::_iTime' has a wrong offset!");

// Function BFGCore.BFGWidget_NarrativeSequence.EnableSkipButton
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_NarrativeSequence_EnableSkipButton final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAnimate;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_NarrativeSequence_EnableSkipButton) == 0x000001, "Wrong alignment on BFGWidget_NarrativeSequence_EnableSkipButton");
static_assert(sizeof(BFGWidget_NarrativeSequence_EnableSkipButton) == 0x000002, "Wrong size on BFGWidget_NarrativeSequence_EnableSkipButton");
static_assert(offsetof(BFGWidget_NarrativeSequence_EnableSkipButton, _bShow) == 0x000000, "Member 'BFGWidget_NarrativeSequence_EnableSkipButton::_bShow' has a wrong offset!");
static_assert(offsetof(BFGWidget_NarrativeSequence_EnableSkipButton, _bAnimate) == 0x000001, "Member 'BFGWidget_NarrativeSequence_EnableSkipButton::_bAnimate' has a wrong offset!");

// Function BFGCore.BFGWidget_NarrativeSequence.OnMoodChanged
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_NarrativeSequence_OnMoodChanged final
{
public:
	float                                         _fMood;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_NarrativeSequence_OnMoodChanged) == 0x000004, "Wrong alignment on BFGWidget_NarrativeSequence_OnMoodChanged");
static_assert(sizeof(BFGWidget_NarrativeSequence_OnMoodChanged) == 0x000004, "Wrong size on BFGWidget_NarrativeSequence_OnMoodChanged");
static_assert(offsetof(BFGWidget_NarrativeSequence_OnMoodChanged, _fMood) == 0x000000, "Member 'BFGWidget_NarrativeSequence_OnMoodChanged::_fMood' has a wrong offset!");

// Function BFGCore.BFGWidget_NarrativeSequence.ShowStrikes
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_NarrativeSequence_ShowStrikes final
{
public:
	bool                                          _bShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_NarrativeSequence_ShowStrikes) == 0x000001, "Wrong alignment on BFGWidget_NarrativeSequence_ShowStrikes");
static_assert(sizeof(BFGWidget_NarrativeSequence_ShowStrikes) == 0x000001, "Wrong size on BFGWidget_NarrativeSequence_ShowStrikes");
static_assert(offsetof(BFGWidget_NarrativeSequence_ShowStrikes, _bShow) == 0x000000, "Member 'BFGWidget_NarrativeSequence_ShowStrikes::_bShow' has a wrong offset!");

// Function BFGCore.BFGWidget_NarrativeSequence.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_NarrativeSequence_GetOptions final
{
public:
	TArray<class UBFGWidget_DialogOption*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_NarrativeSequence_GetOptions) == 0x000008, "Wrong alignment on BFGWidget_NarrativeSequence_GetOptions");
static_assert(sizeof(BFGWidget_NarrativeSequence_GetOptions) == 0x000010, "Wrong size on BFGWidget_NarrativeSequence_GetOptions");
static_assert(offsetof(BFGWidget_NarrativeSequence_GetOptions, ReturnValue) == 0x000000, "Member 'BFGWidget_NarrativeSequence_GetOptions::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_PausedTutorial.OnStepActive
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_PausedTutorial_OnStepActive final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PausedTutorial_OnStepActive) == 0x000004, "Wrong alignment on BFGWidget_PausedTutorial_OnStepActive");
static_assert(sizeof(BFGWidget_PausedTutorial_OnStepActive) == 0x000004, "Wrong size on BFGWidget_PausedTutorial_OnStepActive");
static_assert(offsetof(BFGWidget_PausedTutorial_OnStepActive, _iIndex) == 0x000000, "Member 'BFGWidget_PausedTutorial_OnStepActive::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_PausedTutorial.SetSkipEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_PausedTutorial_SetSkipEnabled final
{
public:
	bool                                          _bEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PausedTutorial_SetSkipEnabled) == 0x000001, "Wrong alignment on BFGWidget_PausedTutorial_SetSkipEnabled");
static_assert(sizeof(BFGWidget_PausedTutorial_SetSkipEnabled) == 0x000001, "Wrong size on BFGWidget_PausedTutorial_SetSkipEnabled");
static_assert(offsetof(BFGWidget_PausedTutorial_SetSkipEnabled, _bEnabled) == 0x000000, "Member 'BFGWidget_PausedTutorial_SetSkipEnabled::_bEnabled' has a wrong offset!");

// Function BFGCore.BFGWidget_PausedTutorial.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct BFGWidget_PausedTutorial_SetTitle final
{
public:
	class FText                                   _strTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PausedTutorial_SetTitle) == 0x000008, "Wrong alignment on BFGWidget_PausedTutorial_SetTitle");
static_assert(sizeof(BFGWidget_PausedTutorial_SetTitle) == 0x000018, "Wrong size on BFGWidget_PausedTutorial_SetTitle");
static_assert(offsetof(BFGWidget_PausedTutorial_SetTitle, _strTitle) == 0x000000, "Member 'BFGWidget_PausedTutorial_SetTitle::_strTitle' has a wrong offset!");

// Function BFGCore.BFGWidget_PausedTutorial.SetupStep
// 0x00A8 (0x00A8 - 0x0000)
struct BFGWidget_PausedTutorial_SetupStep final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _strDescription;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            _oImage;                                           // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PausedTutorial_SetupStep) == 0x000008, "Wrong alignment on BFGWidget_PausedTutorial_SetupStep");
static_assert(sizeof(BFGWidget_PausedTutorial_SetupStep) == 0x0000A8, "Wrong size on BFGWidget_PausedTutorial_SetupStep");
static_assert(offsetof(BFGWidget_PausedTutorial_SetupStep, _iIndex) == 0x000000, "Member 'BFGWidget_PausedTutorial_SetupStep::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGWidget_PausedTutorial_SetupStep, _strDescription) == 0x000008, "Member 'BFGWidget_PausedTutorial_SetupStep::_strDescription' has a wrong offset!");
static_assert(offsetof(BFGWidget_PausedTutorial_SetupStep, _oImage) == 0x000020, "Member 'BFGWidget_PausedTutorial_SetupStep::_oImage' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLab_UpgradeGraph.EnableBar
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_PoxLab_UpgradeGraph_EnableBar final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEnable;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_PoxLab_UpgradeGraph_EnableBar) == 0x000004, "Wrong alignment on BFGWidget_PoxLab_UpgradeGraph_EnableBar");
static_assert(sizeof(BFGWidget_PoxLab_UpgradeGraph_EnableBar) == 0x000008, "Wrong size on BFGWidget_PoxLab_UpgradeGraph_EnableBar");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraph_EnableBar, _iIndex) == 0x000000, "Member 'BFGWidget_PoxLab_UpgradeGraph_EnableBar::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraph_EnableBar, _bEnable) == 0x000004, "Member 'BFGWidget_PoxLab_UpgradeGraph_EnableBar::_bEnable' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLab_UpgradeGraph.GetHorizontalBox
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_PoxLab_UpgradeGraph_GetHorizontalBox final
{
public:
	class UHorizontalBox*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLab_UpgradeGraph_GetHorizontalBox) == 0x000008, "Wrong alignment on BFGWidget_PoxLab_UpgradeGraph_GetHorizontalBox");
static_assert(sizeof(BFGWidget_PoxLab_UpgradeGraph_GetHorizontalBox) == 0x000008, "Wrong size on BFGWidget_PoxLab_UpgradeGraph_GetHorizontalBox");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraph_GetHorizontalBox, ReturnValue) == 0x000000, "Member 'BFGWidget_PoxLab_UpgradeGraph_GetHorizontalBox::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLab_UpgradeGraph.InitializeGraph
// 0x0020 (0x0020 - 0x0000)
struct BFGWidget_PoxLab_UpgradeGraph_InitializeGraph final
{
public:
	struct FBFGPlayerState_UpgradesQueryResponse  _rGraphEntries;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         _iUpgradeIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_PoxLab_UpgradeGraph_InitializeGraph) == 0x000008, "Wrong alignment on BFGWidget_PoxLab_UpgradeGraph_InitializeGraph");
static_assert(sizeof(BFGWidget_PoxLab_UpgradeGraph_InitializeGraph) == 0x000020, "Wrong size on BFGWidget_PoxLab_UpgradeGraph_InitializeGraph");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraph_InitializeGraph, _rGraphEntries) == 0x000000, "Member 'BFGWidget_PoxLab_UpgradeGraph_InitializeGraph::_rGraphEntries' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraph_InitializeGraph, _iUpgradeIndex) == 0x000018, "Member 'BFGWidget_PoxLab_UpgradeGraph_InitializeGraph::_iUpgradeIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLab_UpgradeGraph.OnConfimationPromptClosed
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_PoxLab_UpgradeGraph_OnConfimationPromptClosed final
{
public:
	bool                                          _bResult;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLab_UpgradeGraph_OnConfimationPromptClosed) == 0x000001, "Wrong alignment on BFGWidget_PoxLab_UpgradeGraph_OnConfimationPromptClosed");
static_assert(sizeof(BFGWidget_PoxLab_UpgradeGraph_OnConfimationPromptClosed) == 0x000001, "Wrong size on BFGWidget_PoxLab_UpgradeGraph_OnConfimationPromptClosed");
static_assert(offsetof(BFGWidget_PoxLab_UpgradeGraph_OnConfimationPromptClosed, _bResult) == 0x000000, "Member 'BFGWidget_PoxLab_UpgradeGraph_OnConfimationPromptClosed::_bResult' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidget_PoxLabSubmenu.ActionPoxUpgradeNotify__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature final
{
public:
	EBFGMotherShipPoxLabType                      _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bValue;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature) == 0x000001, "Wrong alignment on BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature) == 0x000002, "Wrong size on BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature, _eType) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature::_eType' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature, _bValue) == 0x000001, "Member 'BFGWidget_PoxLabSubmenu_ActionPoxUpgradeNotify__DelegateSignature::_bValue' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.GetLinearGraph
// 0x0010 (0x0010 - 0x0000)
struct BFGWidget_PoxLabSubmenu_GetLinearGraph final
{
public:
	EBFGPoxLabSubmenu                             _ePanel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGWidget_PoxLab_UpgradeGraph*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_GetLinearGraph) == 0x000008, "Wrong alignment on BFGWidget_PoxLabSubmenu_GetLinearGraph");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_GetLinearGraph) == 0x000010, "Wrong size on BFGWidget_PoxLabSubmenu_GetLinearGraph");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_GetLinearGraph, _ePanel) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_GetLinearGraph::_ePanel' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_GetLinearGraph, ReturnValue) == 0x000008, "Member 'BFGWidget_PoxLabSubmenu_GetLinearGraph::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.GetSpinningWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_PoxLabSubmenu_GetSpinningWidget final
{
public:
	class UBFGSpinningWidget*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_GetSpinningWidget) == 0x000008, "Wrong alignment on BFGWidget_PoxLabSubmenu_GetSpinningWidget");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_GetSpinningWidget) == 0x000008, "Wrong size on BFGWidget_PoxLabSubmenu_GetSpinningWidget");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_GetSpinningWidget, ReturnValue) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_GetSpinningWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.OnShowItemDescription
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_PoxLabSubmenu_OnShowItemDescription final
{
public:
	EBFGSelectionStatePoxLab                      _eSelectionState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_OnShowItemDescription) == 0x000001, "Wrong alignment on BFGWidget_PoxLabSubmenu_OnShowItemDescription");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_OnShowItemDescription) == 0x000001, "Wrong size on BFGWidget_PoxLabSubmenu_OnShowItemDescription");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_OnShowItemDescription, _eSelectionState) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_OnShowItemDescription::_eSelectionState' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.OnUpdateSubMenu
// 0x0001 (0x0001 - 0x0000)
struct BFGWidget_PoxLabSubmenu_OnUpdateSubMenu final
{
public:
	EBFGSelectionStatePoxLab                      _eNewState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_OnUpdateSubMenu) == 0x000001, "Wrong alignment on BFGWidget_PoxLabSubmenu_OnUpdateSubMenu");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_OnUpdateSubMenu) == 0x000001, "Wrong size on BFGWidget_PoxLabSubmenu_OnUpdateSubMenu");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_OnUpdateSubMenu, _eNewState) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_OnUpdateSubMenu::_eNewState' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.OnUpdateUpgradeDescriptionPanel
// 0x0038 (0x0038 - 0x0000)
struct BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel final
{
public:
	class FText                                   _strUpgradeName;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _strUpgradeDescription;                            // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _iUpgradeCost;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel) == 0x000008, "Wrong alignment on BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel) == 0x000038, "Wrong size on BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel, _strUpgradeName) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel::_strUpgradeName' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel, _strUpgradeDescription) == 0x000018, "Member 'BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel::_strUpgradeDescription' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel, _iUpgradeCost) == 0x000030, "Member 'BFGWidget_PoxLabSubmenu_OnUpdateUpgradeDescriptionPanel::_iUpgradeCost' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.UpdateDescriptionPanel
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_PoxLabSubmenu_UpdateDescriptionPanel final
{
public:
	int32                                         _iIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_UpdateDescriptionPanel) == 0x000004, "Wrong alignment on BFGWidget_PoxLabSubmenu_UpdateDescriptionPanel");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_UpdateDescriptionPanel) == 0x000004, "Wrong size on BFGWidget_PoxLabSubmenu_UpdateDescriptionPanel");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_UpdateDescriptionPanel, _iIndex) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_UpdateDescriptionPanel::_iIndex' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.UpdateSpinningWidget
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_PoxLabSubmenu_UpdateSpinningWidget final
{
public:
	float                                         _fValueX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fValueY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_UpdateSpinningWidget) == 0x000004, "Wrong alignment on BFGWidget_PoxLabSubmenu_UpdateSpinningWidget");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_UpdateSpinningWidget) == 0x000008, "Wrong size on BFGWidget_PoxLabSubmenu_UpdateSpinningWidget");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_UpdateSpinningWidget, _fValueX) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_UpdateSpinningWidget::_fValueX' has a wrong offset!");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_UpdateSpinningWidget, _fValueY) == 0x000004, "Member 'BFGWidget_PoxLabSubmenu_UpdateSpinningWidget::_fValueY' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.UpdateUpgradeItemPanel
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_PoxLabSubmenu_UpdateUpgradeItemPanel final
{
public:
	class UBFGDataAssetPoxLabUpgrade*             _pUpgradeItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_UpdateUpgradeItemPanel) == 0x000008, "Wrong alignment on BFGWidget_PoxLabSubmenu_UpdateUpgradeItemPanel");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_UpdateUpgradeItemPanel) == 0x000008, "Wrong size on BFGWidget_PoxLabSubmenu_UpdateUpgradeItemPanel");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_UpdateUpgradeItemPanel, _pUpgradeItem) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_UpdateUpgradeItemPanel::_pUpgradeItem' has a wrong offset!");

// Function BFGCore.BFGWidget_PoxLabSubmenu.GetCurrentDNA
// 0x0004 (0x0004 - 0x0000)
struct BFGWidget_PoxLabSubmenu_GetCurrentDNA final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_PoxLabSubmenu_GetCurrentDNA) == 0x000004, "Wrong alignment on BFGWidget_PoxLabSubmenu_GetCurrentDNA");
static_assert(sizeof(BFGWidget_PoxLabSubmenu_GetCurrentDNA) == 0x000004, "Wrong size on BFGWidget_PoxLabSubmenu_GetCurrentDNA");
static_assert(offsetof(BFGWidget_PoxLabSubmenu_GetCurrentDNA, ReturnValue) == 0x000000, "Member 'BFGWidget_PoxLabSubmenu_GetCurrentDNA::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGWidget_TutorialHandbookChapter.AddOptionToOptionsList
// 0x0008 (0x0008 - 0x0000)
struct BFGWidget_TutorialHandbookChapter_AddOptionToOptionsList final
{
public:
	class UBFGWidget_TutorialHandbookEntry*       _pOption;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_TutorialHandbookChapter_AddOptionToOptionsList) == 0x000008, "Wrong alignment on BFGWidget_TutorialHandbookChapter_AddOptionToOptionsList");
static_assert(sizeof(BFGWidget_TutorialHandbookChapter_AddOptionToOptionsList) == 0x000008, "Wrong size on BFGWidget_TutorialHandbookChapter_AddOptionToOptionsList");
static_assert(offsetof(BFGWidget_TutorialHandbookChapter_AddOptionToOptionsList, _pOption) == 0x000000, "Member 'BFGWidget_TutorialHandbookChapter_AddOptionToOptionsList::_pOption' has a wrong offset!");

// Function BFGCore.BFGInputHintBlock.AddImageToGrid
// 0x0010 (0x0010 - 0x0000)
struct BFGInputHintBlock_AddImageToGrid final
{
public:
	class UImage*                                 _pImage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridSlot*                              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInputHintBlock_AddImageToGrid) == 0x000008, "Wrong alignment on BFGInputHintBlock_AddImageToGrid");
static_assert(sizeof(BFGInputHintBlock_AddImageToGrid) == 0x000010, "Wrong size on BFGInputHintBlock_AddImageToGrid");
static_assert(offsetof(BFGInputHintBlock_AddImageToGrid, _pImage) == 0x000000, "Member 'BFGInputHintBlock_AddImageToGrid::_pImage' has a wrong offset!");
static_assert(offsetof(BFGInputHintBlock_AddImageToGrid, ReturnValue) == 0x000008, "Member 'BFGInputHintBlock_AddImageToGrid::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGLabeledImage_InputAction.SetType
// 0x0001 (0x0001 - 0x0000)
struct BFGLabeledImage_InputAction_SetType final
{
public:
	EBFGInputActionWidgetType                     _eType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGLabeledImage_InputAction_SetType) == 0x000001, "Wrong alignment on BFGLabeledImage_InputAction_SetType");
static_assert(sizeof(BFGLabeledImage_InputAction_SetType) == 0x000001, "Wrong size on BFGLabeledImage_InputAction_SetType");
static_assert(offsetof(BFGLabeledImage_InputAction_SetType, _eType) == 0x000000, "Member 'BFGLabeledImage_InputAction_SetType::_eType' has a wrong offset!");

// Function BFGCore.BFGWidget_UserSignedOut.OnApplicationPostInputKeyDownEvent
// 0x0038 (0x0038 - 0x0000)
struct BFGWidget_UserSignedOut_OnApplicationPostInputKeyDownEvent final
{
public:
	struct FKeyEvent                              _keyEvent;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidget_UserSignedOut_OnApplicationPostInputKeyDownEvent) == 0x000008, "Wrong alignment on BFGWidget_UserSignedOut_OnApplicationPostInputKeyDownEvent");
static_assert(sizeof(BFGWidget_UserSignedOut_OnApplicationPostInputKeyDownEvent) == 0x000038, "Wrong size on BFGWidget_UserSignedOut_OnApplicationPostInputKeyDownEvent");
static_assert(offsetof(BFGWidget_UserSignedOut_OnApplicationPostInputKeyDownEvent, _keyEvent) == 0x000000, "Member 'BFGWidget_UserSignedOut_OnApplicationPostInputKeyDownEvent::_keyEvent' has a wrong offset!");

// DelegateFunction BFGCore.BFGWidgetAnimationState.ActionSubState__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BFGWidgetAnimationState_ActionSubState__DelegateSignature final
{
public:
	class UBFGWidgetAnimationState*               _pTargetState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBFGWidgetAnimationSubState                   _eSubState;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGWidgetAnimationState_ActionSubState__DelegateSignature) == 0x000008, "Wrong alignment on BFGWidgetAnimationState_ActionSubState__DelegateSignature");
static_assert(sizeof(BFGWidgetAnimationState_ActionSubState__DelegateSignature) == 0x000010, "Wrong size on BFGWidgetAnimationState_ActionSubState__DelegateSignature");
static_assert(offsetof(BFGWidgetAnimationState_ActionSubState__DelegateSignature, _pTargetState) == 0x000000, "Member 'BFGWidgetAnimationState_ActionSubState__DelegateSignature::_pTargetState' has a wrong offset!");
static_assert(offsetof(BFGWidgetAnimationState_ActionSubState__DelegateSignature, _eSubState) == 0x000008, "Member 'BFGWidgetAnimationState_ActionSubState__DelegateSignature::_eSubState' has a wrong offset!");

// Function BFGCore.BFGWidgetAnimationState.RequestSubState
// 0x0002 (0x0002 - 0x0000)
struct BFGWidgetAnimationState_RequestSubState final
{
public:
	EBFGWidgetAnimationSubState                   _eTargetSubState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForce;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGWidgetAnimationState_RequestSubState) == 0x000001, "Wrong alignment on BFGWidgetAnimationState_RequestSubState");
static_assert(sizeof(BFGWidgetAnimationState_RequestSubState) == 0x000002, "Wrong size on BFGWidgetAnimationState_RequestSubState");
static_assert(offsetof(BFGWidgetAnimationState_RequestSubState, _eTargetSubState) == 0x000000, "Member 'BFGWidgetAnimationState_RequestSubState::_eTargetSubState' has a wrong offset!");
static_assert(offsetof(BFGWidgetAnimationState_RequestSubState, _bForce) == 0x000001, "Member 'BFGWidgetAnimationState_RequestSubState::_bForce' has a wrong offset!");

// Function BFGCore.BFGContextualAction.GetActor
// 0x0008 (0x0008 - 0x0000)
struct BFGContextualAction_GetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGContextualAction_GetActor) == 0x000008, "Wrong alignment on BFGContextualAction_GetActor");
static_assert(sizeof(BFGContextualAction_GetActor) == 0x000008, "Wrong size on BFGContextualAction_GetActor");
static_assert(offsetof(BFGContextualAction_GetActor, ReturnValue) == 0x000000, "Member 'BFGContextualAction_GetActor::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGContextualAction.IsActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct BFGContextualAction_IsActionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGContextualAction_IsActionEnabled) == 0x000001, "Wrong alignment on BFGContextualAction_IsActionEnabled");
static_assert(sizeof(BFGContextualAction_IsActionEnabled) == 0x000001, "Wrong size on BFGContextualAction_IsActionEnabled");
static_assert(offsetof(BFGContextualAction_IsActionEnabled, ReturnValue) == 0x000000, "Member 'BFGContextualAction_IsActionEnabled::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGContextualAction.IsFocusable
// 0x0001 (0x0001 - 0x0000)
struct BFGContextualAction_IsFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGContextualAction_IsFocusable) == 0x000001, "Wrong alignment on BFGContextualAction_IsFocusable");
static_assert(sizeof(BFGContextualAction_IsFocusable) == 0x000001, "Wrong size on BFGContextualAction_IsFocusable");
static_assert(offsetof(BFGContextualAction_IsFocusable, ReturnValue) == 0x000000, "Member 'BFGContextualAction_IsFocusable::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGContextualAction.OnFocused
// 0x0008 (0x0008 - 0x0000)
struct BFGContextualAction_OnFocused final
{
public:
	class AController*                            _pUser;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGContextualAction_OnFocused) == 0x000008, "Wrong alignment on BFGContextualAction_OnFocused");
static_assert(sizeof(BFGContextualAction_OnFocused) == 0x000008, "Wrong size on BFGContextualAction_OnFocused");
static_assert(offsetof(BFGContextualAction_OnFocused, _pUser) == 0x000000, "Member 'BFGContextualAction_OnFocused::_pUser' has a wrong offset!");

// Function BFGCore.BFGContextualAction.OnUsed
// 0x0008 (0x0008 - 0x0000)
struct BFGContextualAction_OnUsed final
{
public:
	class AController*                            _pUser;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGContextualAction_OnUsed) == 0x000008, "Wrong alignment on BFGContextualAction_OnUsed");
static_assert(sizeof(BFGContextualAction_OnUsed) == 0x000008, "Wrong size on BFGContextualAction_OnUsed");
static_assert(offsetof(BFGContextualAction_OnUsed, _pUser) == 0x000000, "Member 'BFGContextualAction_OnUsed::_pUser' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetArrayEnumasInt
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetArrayEnumasInt final
{
public:
	TArray<int32>                                 _results;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetArrayEnumasInt) == 0x000008, "Wrong alignment on BFGDataProvider_GetArrayEnumasInt");
static_assert(sizeof(BFGDataProvider_GetArrayEnumasInt) == 0x000020, "Wrong size on BFGDataProvider_GetArrayEnumasInt");
static_assert(offsetof(BFGDataProvider_GetArrayEnumasInt, _results) == 0x000000, "Member 'BFGDataProvider_GetArrayEnumasInt::_results' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayEnumasInt, _name) == 0x000010, "Member 'BFGDataProvider_GetArrayEnumasInt::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayEnumasInt, _iIndex) == 0x000018, "Member 'BFGDataProvider_GetArrayEnumasInt::_iIndex' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetArrayFloat
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetArrayFloat final
{
public:
	TArray<float>                                 _result;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetArrayFloat) == 0x000008, "Wrong alignment on BFGDataProvider_GetArrayFloat");
static_assert(sizeof(BFGDataProvider_GetArrayFloat) == 0x000020, "Wrong size on BFGDataProvider_GetArrayFloat");
static_assert(offsetof(BFGDataProvider_GetArrayFloat, _result) == 0x000000, "Member 'BFGDataProvider_GetArrayFloat::_result' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayFloat, _name) == 0x000010, "Member 'BFGDataProvider_GetArrayFloat::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayFloat, _iIndex) == 0x000018, "Member 'BFGDataProvider_GetArrayFloat::_iIndex' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetArrayInt
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetArrayInt final
{
public:
	TArray<int32>                                 _result;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetArrayInt) == 0x000008, "Wrong alignment on BFGDataProvider_GetArrayInt");
static_assert(sizeof(BFGDataProvider_GetArrayInt) == 0x000020, "Wrong size on BFGDataProvider_GetArrayInt");
static_assert(offsetof(BFGDataProvider_GetArrayInt, _result) == 0x000000, "Member 'BFGDataProvider_GetArrayInt::_result' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayInt, _name) == 0x000010, "Member 'BFGDataProvider_GetArrayInt::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayInt, _iIndex) == 0x000018, "Member 'BFGDataProvider_GetArrayInt::_iIndex' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetArrayName
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetArrayName final
{
public:
	TArray<class FName>                           _result;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetArrayName) == 0x000008, "Wrong alignment on BFGDataProvider_GetArrayName");
static_assert(sizeof(BFGDataProvider_GetArrayName) == 0x000020, "Wrong size on BFGDataProvider_GetArrayName");
static_assert(offsetof(BFGDataProvider_GetArrayName, _result) == 0x000000, "Member 'BFGDataProvider_GetArrayName::_result' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayName, _name) == 0x000010, "Member 'BFGDataProvider_GetArrayName::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayName, _iIndex) == 0x000018, "Member 'BFGDataProvider_GetArrayName::_iIndex' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetArrayObject
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetArrayObject final
{
public:
	TArray<class UObject*>                        _results;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetArrayObject) == 0x000008, "Wrong alignment on BFGDataProvider_GetArrayObject");
static_assert(sizeof(BFGDataProvider_GetArrayObject) == 0x000020, "Wrong size on BFGDataProvider_GetArrayObject");
static_assert(offsetof(BFGDataProvider_GetArrayObject, _results) == 0x000000, "Member 'BFGDataProvider_GetArrayObject::_results' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayObject, _name) == 0x000010, "Member 'BFGDataProvider_GetArrayObject::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayObject, _iIndex) == 0x000018, "Member 'BFGDataProvider_GetArrayObject::_iIndex' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetArrayString
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetArrayString final
{
public:
	TArray<class FString>                         _result;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetArrayString) == 0x000008, "Wrong alignment on BFGDataProvider_GetArrayString");
static_assert(sizeof(BFGDataProvider_GetArrayString) == 0x000020, "Wrong size on BFGDataProvider_GetArrayString");
static_assert(offsetof(BFGDataProvider_GetArrayString, _result) == 0x000000, "Member 'BFGDataProvider_GetArrayString::_result' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayString, _name) == 0x000010, "Member 'BFGDataProvider_GetArrayString::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayString, _iIndex) == 0x000018, "Member 'BFGDataProvider_GetArrayString::_iIndex' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetArrayText
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetArrayText final
{
public:
	TArray<class FText>                           _result;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetArrayText) == 0x000008, "Wrong alignment on BFGDataProvider_GetArrayText");
static_assert(sizeof(BFGDataProvider_GetArrayText) == 0x000020, "Wrong size on BFGDataProvider_GetArrayText");
static_assert(offsetof(BFGDataProvider_GetArrayText, _result) == 0x000000, "Member 'BFGDataProvider_GetArrayText::_result' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayText, _name) == 0x000010, "Member 'BFGDataProvider_GetArrayText::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayText, _iIndex) == 0x000018, "Member 'BFGDataProvider_GetArrayText::_iIndex' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetArrayVector
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetArrayVector final
{
public:
	TArray<struct FVector>                        _result;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _name;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetArrayVector) == 0x000008, "Wrong alignment on BFGDataProvider_GetArrayVector");
static_assert(sizeof(BFGDataProvider_GetArrayVector) == 0x000020, "Wrong size on BFGDataProvider_GetArrayVector");
static_assert(offsetof(BFGDataProvider_GetArrayVector, _result) == 0x000000, "Member 'BFGDataProvider_GetArrayVector::_result' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayVector, _name) == 0x000010, "Member 'BFGDataProvider_GetArrayVector::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetArrayVector, _iIndex) == 0x000018, "Member 'BFGDataProvider_GetArrayVector::_iIndex' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetBool
// 0x0010 (0x0010 - 0x0000)
struct BFGDataProvider_GetBool final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGDataProvider_GetBool) == 0x000004, "Wrong alignment on BFGDataProvider_GetBool");
static_assert(sizeof(BFGDataProvider_GetBool) == 0x000010, "Wrong size on BFGDataProvider_GetBool");
static_assert(offsetof(BFGDataProvider_GetBool, _name) == 0x000000, "Member 'BFGDataProvider_GetBool::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetBool, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetBool::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetBool, ReturnValue) == 0x00000C, "Member 'BFGDataProvider_GetBool::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetEnumasInt
// 0x0010 (0x0010 - 0x0000)
struct BFGDataProvider_GetEnumasInt final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetEnumasInt) == 0x000004, "Wrong alignment on BFGDataProvider_GetEnumasInt");
static_assert(sizeof(BFGDataProvider_GetEnumasInt) == 0x000010, "Wrong size on BFGDataProvider_GetEnumasInt");
static_assert(offsetof(BFGDataProvider_GetEnumasInt, _name) == 0x000000, "Member 'BFGDataProvider_GetEnumasInt::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetEnumasInt, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetEnumasInt::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetEnumasInt, ReturnValue) == 0x00000C, "Member 'BFGDataProvider_GetEnumasInt::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetFloat
// 0x0010 (0x0010 - 0x0000)
struct BFGDataProvider_GetFloat final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetFloat) == 0x000004, "Wrong alignment on BFGDataProvider_GetFloat");
static_assert(sizeof(BFGDataProvider_GetFloat) == 0x000010, "Wrong size on BFGDataProvider_GetFloat");
static_assert(offsetof(BFGDataProvider_GetFloat, _name) == 0x000000, "Member 'BFGDataProvider_GetFloat::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetFloat, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetFloat::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetFloat, ReturnValue) == 0x00000C, "Member 'BFGDataProvider_GetFloat::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetInt
// 0x0010 (0x0010 - 0x0000)
struct BFGDataProvider_GetInt final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetInt) == 0x000004, "Wrong alignment on BFGDataProvider_GetInt");
static_assert(sizeof(BFGDataProvider_GetInt) == 0x000010, "Wrong size on BFGDataProvider_GetInt");
static_assert(offsetof(BFGDataProvider_GetInt, _name) == 0x000000, "Member 'BFGDataProvider_GetInt::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetInt, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetInt::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetInt, ReturnValue) == 0x00000C, "Member 'BFGDataProvider_GetInt::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetName
// 0x0014 (0x0014 - 0x0000)
struct BFGDataProvider_GetName final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetName) == 0x000004, "Wrong alignment on BFGDataProvider_GetName");
static_assert(sizeof(BFGDataProvider_GetName) == 0x000014, "Wrong size on BFGDataProvider_GetName");
static_assert(offsetof(BFGDataProvider_GetName, _name) == 0x000000, "Member 'BFGDataProvider_GetName::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetName, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetName::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetName, ReturnValue) == 0x00000C, "Member 'BFGDataProvider_GetName::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetObject
// 0x0018 (0x0018 - 0x0000)
struct BFGDataProvider_GetObject final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetObject) == 0x000008, "Wrong alignment on BFGDataProvider_GetObject");
static_assert(sizeof(BFGDataProvider_GetObject) == 0x000018, "Wrong size on BFGDataProvider_GetObject");
static_assert(offsetof(BFGDataProvider_GetObject, _name) == 0x000000, "Member 'BFGDataProvider_GetObject::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetObject, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetObject::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetObject, ReturnValue) == 0x000010, "Member 'BFGDataProvider_GetObject::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetString
// 0x0020 (0x0020 - 0x0000)
struct BFGDataProvider_GetString final
{
public:
	class FName                                   _nam;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetString) == 0x000008, "Wrong alignment on BFGDataProvider_GetString");
static_assert(sizeof(BFGDataProvider_GetString) == 0x000020, "Wrong size on BFGDataProvider_GetString");
static_assert(offsetof(BFGDataProvider_GetString, _nam) == 0x000000, "Member 'BFGDataProvider_GetString::_nam' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetString, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetString::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetString, ReturnValue) == 0x000010, "Member 'BFGDataProvider_GetString::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetText
// 0x0028 (0x0028 - 0x0000)
struct BFGDataProvider_GetText final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetText) == 0x000008, "Wrong alignment on BFGDataProvider_GetText");
static_assert(sizeof(BFGDataProvider_GetText) == 0x000028, "Wrong size on BFGDataProvider_GetText");
static_assert(offsetof(BFGDataProvider_GetText, _name) == 0x000000, "Member 'BFGDataProvider_GetText::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetText, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetText::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetText, ReturnValue) == 0x000010, "Member 'BFGDataProvider_GetText::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetTexture
// 0x0018 (0x0018 - 0x0000)
struct BFGDataProvider_GetTexture final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetTexture) == 0x000008, "Wrong alignment on BFGDataProvider_GetTexture");
static_assert(sizeof(BFGDataProvider_GetTexture) == 0x000018, "Wrong size on BFGDataProvider_GetTexture");
static_assert(offsetof(BFGDataProvider_GetTexture, _name) == 0x000000, "Member 'BFGDataProvider_GetTexture::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetTexture, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetTexture::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetTexture, ReturnValue) == 0x000010, "Member 'BFGDataProvider_GetTexture::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetVector
// 0x0018 (0x0018 - 0x0000)
struct BFGDataProvider_GetVector final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetVector) == 0x000004, "Wrong alignment on BFGDataProvider_GetVector");
static_assert(sizeof(BFGDataProvider_GetVector) == 0x000018, "Wrong size on BFGDataProvider_GetVector");
static_assert(offsetof(BFGDataProvider_GetVector, _name) == 0x000000, "Member 'BFGDataProvider_GetVector::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetVector, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetVector::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetVector, ReturnValue) == 0x00000C, "Member 'BFGDataProvider_GetVector::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGDataProvider.GetWidget
// 0x0018 (0x0018 - 0x0000)
struct BFGDataProvider_GetWidget final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _iIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGDataProvider_GetWidget) == 0x000008, "Wrong alignment on BFGDataProvider_GetWidget");
static_assert(sizeof(BFGDataProvider_GetWidget) == 0x000018, "Wrong size on BFGDataProvider_GetWidget");
static_assert(offsetof(BFGDataProvider_GetWidget, _name) == 0x000000, "Member 'BFGDataProvider_GetWidget::_name' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetWidget, _iIndex) == 0x000008, "Member 'BFGDataProvider_GetWidget::_iIndex' has a wrong offset!");
static_assert(offsetof(BFGDataProvider_GetWidget, ReturnValue) == 0x000010, "Member 'BFGDataProvider_GetWidget::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInteractAnimationPlayerInterface.PlayInteractAnimationSequence
// 0x0020 (0x0020 - 0x0000)
struct BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence final
{
public:
	struct FBFGInteractAnimationSequence          _sequence;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _bInterupt;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence) == 0x000008, "Wrong alignment on BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence");
static_assert(sizeof(BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence) == 0x000020, "Wrong size on BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence");
static_assert(offsetof(BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence, _sequence) == 0x000000, "Member 'BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence::_sequence' has a wrong offset!");
static_assert(offsetof(BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence, _bInterupt) == 0x000018, "Member 'BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence::_bInterupt' has a wrong offset!");
static_assert(offsetof(BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence, ReturnValue) == 0x000019, "Member 'BFGInteractAnimationPlayerInterface_PlayInteractAnimationSequence::ReturnValue' has a wrong offset!");

// Function BFGCore.BFGInteractAnimationPlayerInterface.Update
// 0x0004 (0x0004 - 0x0000)
struct BFGInteractAnimationPlayerInterface_Update final
{
public:
	float                                         _fDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGInteractAnimationPlayerInterface_Update) == 0x000004, "Wrong alignment on BFGInteractAnimationPlayerInterface_Update");
static_assert(sizeof(BFGInteractAnimationPlayerInterface_Update) == 0x000004, "Wrong size on BFGInteractAnimationPlayerInterface_Update");
static_assert(offsetof(BFGInteractAnimationPlayerInterface_Update, _fDeltaTime) == 0x000000, "Member 'BFGInteractAnimationPlayerInterface_Update::_fDeltaTime' has a wrong offset!");

}

