#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BurningGround

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BurningGround.BP_BurningGround_C
// 0x00D8 (0x04E0 - 0x0408)
class ABP_BurningGround_C final : public ABFGBurningGround
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0408(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDecalComponent*                        PostProcessDecal;                                  // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaterialBlender;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadesOutSpeed_BurnEffect;                          // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadesOutSpeed_Glow;                                // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialPainter;                                   // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaterialSplash_Channeled;                          // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSoftLock;                                         // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFlushNextUpdate;                                  // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43A[0x2];                                      // 0x043A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastHit;                                           // 0x043C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastAngle;                                         // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAngle;                                      // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastAcc;                                           // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocDamperBuffer;                                   // 0x0454(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExtraSteps;                                        // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DrawSize;                                          // 0x0464(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrokeSmoothOverTimeRatio;                         // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Accumulation;                                      // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvas*                                CurrentCanvas;                                     // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDrawToRenderTargetContext             CurrentDrawContext;                                // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         SafeRatioCheck;                                    // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceJitterAllowed;                          // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentGlowJitter;                                 // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSizeJitter;                                 // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SizeJitterMinMax;                                  // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              GlowJitterMinMax;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SizeJitterDampening;                               // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlowJitterDampening;                               // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActorDeltaTime;                                    // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MaterialSplash_Splash;                             // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwapRTDuration;                                    // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpdateJitterValues;                               // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBFGBurningGroundManager*               Manager;                                           // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisualGlowDurationFactor;                          // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BurningGround(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RTHistory_Write_SingleSplash(const struct FVector& WorldspaceLocation, float SplashRadius, class AActor* WrittingActor, float Glow);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RTHistory_Write_Channeled_Start(const struct FVector& VTargetLocation, bool bHitTarget, class UPrimitiveComponent* HitComponent, float BurningDuration, float Radius);
	void RTHistory_Write_Channeled_Stop();
	void SpawnTransitionMesh(class UStaticMesh* InMesh, const struct FTransform& InTransform, const struct FVector& InWorldspaceImpactLocation);
	void Util_GetDrawSplatPivot(const struct FVector2D& DrawSize_0, struct FVector2D* TwoDPivot);
	void Util_InitializeSetup();
	void Update_JitterValues(float DeltaTime);
	void InitiateFoliageTransition(class UBP_Foliage_Interactive_Burnable_C* InBurnableFoliageComponent, int32 InInstanceIndex, const struct FVector& InHitImpactPoint);
	void StartChanneledWrite(const struct FVector& InTargetLocation, bool InHitTarget, class UPrimitiveComponent* InHitComponent, float BurningDuration, float Radius);
	void DoSingleSplash(const struct FVector& InWorldSpacePosition, float InSplashRadius, float InGlow);
	void HandleTick(float InDelta);
	void BurnFoliage(const struct FHitResult& HitResult);
	void Util_ChangeGlowDuration(float NewDuration);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BurningGround_C">();
	}
	static class ABP_BurningGround_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BurningGround_C>();
	}
};
static_assert(alignof(ABP_BurningGround_C) == 0x000008, "Wrong alignment on ABP_BurningGround_C");
static_assert(sizeof(ABP_BurningGround_C) == 0x0004E0, "Wrong size on ABP_BurningGround_C");
static_assert(offsetof(ABP_BurningGround_C, UberGraphFrame) == 0x000408, "Member 'ABP_BurningGround_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, PostProcessDecal) == 0x000410, "Member 'ABP_BurningGround_C::PostProcessDecal' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, MaterialBlender) == 0x000418, "Member 'ABP_BurningGround_C::MaterialBlender' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, FadesOutSpeed_BurnEffect) == 0x000420, "Member 'ABP_BurningGround_C::FadesOutSpeed_BurnEffect' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, FadesOutSpeed_Glow) == 0x000424, "Member 'ABP_BurningGround_C::FadesOutSpeed_Glow' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, MaterialPainter) == 0x000428, "Member 'ABP_BurningGround_C::MaterialPainter' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, MaterialSplash_Channeled) == 0x000430, "Member 'ABP_BurningGround_C::MaterialSplash_Channeled' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, bSoftLock) == 0x000438, "Member 'ABP_BurningGround_C::bSoftLock' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, bFlushNextUpdate) == 0x000439, "Member 'ABP_BurningGround_C::bFlushNextUpdate' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, LastHit) == 0x00043C, "Member 'ABP_BurningGround_C::LastHit' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, LastAngle) == 0x000448, "Member 'ABP_BurningGround_C::LastAngle' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, CurrentAngle) == 0x00044C, "Member 'ABP_BurningGround_C::CurrentAngle' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, LastAcc) == 0x000450, "Member 'ABP_BurningGround_C::LastAcc' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, LocDamperBuffer) == 0x000454, "Member 'ABP_BurningGround_C::LocDamperBuffer' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, ExtraSteps) == 0x000460, "Member 'ABP_BurningGround_C::ExtraSteps' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, DrawSize) == 0x000464, "Member 'ABP_BurningGround_C::DrawSize' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, StrokeSmoothOverTimeRatio) == 0x00046C, "Member 'ABP_BurningGround_C::StrokeSmoothOverTimeRatio' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, Accumulation) == 0x000470, "Member 'ABP_BurningGround_C::Accumulation' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, CurrentCanvas) == 0x000478, "Member 'ABP_BurningGround_C::CurrentCanvas' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, CurrentDrawContext) == 0x000480, "Member 'ABP_BurningGround_C::CurrentDrawContext' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, SafeRatioCheck) == 0x000490, "Member 'ABP_BurningGround_C::SafeRatioCheck' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, MaxDistanceJitterAllowed) == 0x000494, "Member 'ABP_BurningGround_C::MaxDistanceJitterAllowed' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, CurrentGlowJitter) == 0x000498, "Member 'ABP_BurningGround_C::CurrentGlowJitter' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, CurrentSizeJitter) == 0x00049C, "Member 'ABP_BurningGround_C::CurrentSizeJitter' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, SizeJitterMinMax) == 0x0004A0, "Member 'ABP_BurningGround_C::SizeJitterMinMax' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, GlowJitterMinMax) == 0x0004A8, "Member 'ABP_BurningGround_C::GlowJitterMinMax' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, SizeJitterDampening) == 0x0004B0, "Member 'ABP_BurningGround_C::SizeJitterDampening' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, GlowJitterDampening) == 0x0004B4, "Member 'ABP_BurningGround_C::GlowJitterDampening' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, ActorDeltaTime) == 0x0004B8, "Member 'ABP_BurningGround_C::ActorDeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, MaterialSplash_Splash) == 0x0004C0, "Member 'ABP_BurningGround_C::MaterialSplash_Splash' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, SwapRTDuration) == 0x0004C8, "Member 'ABP_BurningGround_C::SwapRTDuration' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, bUpdateJitterValues) == 0x0004CC, "Member 'ABP_BurningGround_C::bUpdateJitterValues' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, Manager) == 0x0004D0, "Member 'ABP_BurningGround_C::Manager' has a wrong offset!");
static_assert(offsetof(ABP_BurningGround_C, VisualGlowDurationFactor) == 0x0004D8, "Member 'ABP_BurningGround_C::VisualGlowDurationFactor' has a wrong offset!");

}

