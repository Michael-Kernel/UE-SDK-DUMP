#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OculusMR

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "OculusMR_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class OculusMR.OculusMRFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UOculusMRFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UOculusMR_Settings* GetOculusMRSettings();
	static class USceneComponent* GetTrackingReferenceComponent();
	static void SetTrackingReferenceComponent(class USceneComponent* Component);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMRFunctionLibrary">();
	}
	static class UOculusMRFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMRFunctionLibrary>();
	}
};
static_assert(alignof(UOculusMRFunctionLibrary) == 0x000008, "Wrong alignment on UOculusMRFunctionLibrary");
static_assert(sizeof(UOculusMRFunctionLibrary) == 0x000028, "Wrong size on UOculusMRFunctionLibrary");

// Class OculusMR.OculusMR_BoundaryActor
// 0x0008 (0x03E0 - 0x03D8)
class AOculusMR_BoundaryActor final : public AActor
{
public:
	class UOculusMR_BoundaryMeshComponent*        BoundaryMeshComponent;                             // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_BoundaryActor">();
	}
	static class AOculusMR_BoundaryActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOculusMR_BoundaryActor>();
	}
};
static_assert(alignof(AOculusMR_BoundaryActor) == 0x000008, "Wrong alignment on AOculusMR_BoundaryActor");
static_assert(sizeof(AOculusMR_BoundaryActor) == 0x0003E0, "Wrong size on AOculusMR_BoundaryActor");
static_assert(offsetof(AOculusMR_BoundaryActor, BoundaryMeshComponent) == 0x0003D8, "Member 'AOculusMR_BoundaryActor::BoundaryMeshComponent' has a wrong offset!");

// Class OculusMR.OculusMR_BoundaryMeshComponent
// 0x0030 (0x06C0 - 0x0690)
class UOculusMR_BoundaryMeshComponent final : public UMeshComponent
{
public:
	EOculusMR_BoundaryType                        BoundaryType;                                      // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_691[0x3];                                      // 0x0691(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BottomZ;                                           // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopZ;                                              // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              WhiteMaterial;                                     // 0x06A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AOculusMR_CastingCameraActor*           CastingCameraActor;                                // 0x06A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B0[0x10];                                     // 0x06B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_BoundaryMeshComponent">();
	}
	static class UOculusMR_BoundaryMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMR_BoundaryMeshComponent>();
	}
};
static_assert(alignof(UOculusMR_BoundaryMeshComponent) == 0x000008, "Wrong alignment on UOculusMR_BoundaryMeshComponent");
static_assert(sizeof(UOculusMR_BoundaryMeshComponent) == 0x0006C0, "Wrong size on UOculusMR_BoundaryMeshComponent");
static_assert(offsetof(UOculusMR_BoundaryMeshComponent, BoundaryType) == 0x000690, "Member 'UOculusMR_BoundaryMeshComponent::BoundaryType' has a wrong offset!");
static_assert(offsetof(UOculusMR_BoundaryMeshComponent, BottomZ) == 0x000694, "Member 'UOculusMR_BoundaryMeshComponent::BottomZ' has a wrong offset!");
static_assert(offsetof(UOculusMR_BoundaryMeshComponent, TopZ) == 0x000698, "Member 'UOculusMR_BoundaryMeshComponent::TopZ' has a wrong offset!");
static_assert(offsetof(UOculusMR_BoundaryMeshComponent, WhiteMaterial) == 0x0006A0, "Member 'UOculusMR_BoundaryMeshComponent::WhiteMaterial' has a wrong offset!");
static_assert(offsetof(UOculusMR_BoundaryMeshComponent, CastingCameraActor) == 0x0006A8, "Member 'UOculusMR_BoundaryMeshComponent::CastingCameraActor' has a wrong offset!");

// Class OculusMR.OculusMR_CastingCameraActor
// 0x0100 (0x04F0 - 0x03F0)
class AOculusMR_CastingCameraActor final : public ASceneCapture2D
{
public:
	class UVRNotificationsComponent*              VRNotificationComponent;                           // 0x03F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CameraColorTexture;                                // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CameraDepthTexture;                                // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOculusMR_PlaneMeshComponent*           PlaneMeshComponent;                                // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              ChromaKeyMaterial;                                 // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              ChromaKeyLitMaterial;                              // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              OpaqueColoredMaterial;                             // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ChromaKeyMaterialInstance;                         // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ChromaKeyLitMaterialInstance;                      // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CameraFrameMaterialInstance;                       // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               BackdropMaterialInstance;                          // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AOculusMR_BoundaryActor*                BoundaryActor;                                     // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASceneCapture2D*                        BoundarySceneCaptureActor;                         // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultTexture_White;                              // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_460[0x68];                                     // 0x0460(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 BackgroundRenderTarget;                            // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASceneCapture2D*                        ForegroundCaptureActor;                            // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureRenderTarget2D*                 ForegroundRenderTarget;                            // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOculusMR_Settings*                     MRSettings;                                        // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOculusMR_State*                        MRState;                                           // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_CastingCameraActor">();
	}
	static class AOculusMR_CastingCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOculusMR_CastingCameraActor>();
	}
};
static_assert(alignof(AOculusMR_CastingCameraActor) == 0x000008, "Wrong alignment on AOculusMR_CastingCameraActor");
static_assert(sizeof(AOculusMR_CastingCameraActor) == 0x0004F0, "Wrong size on AOculusMR_CastingCameraActor");
static_assert(offsetof(AOculusMR_CastingCameraActor, VRNotificationComponent) == 0x0003F0, "Member 'AOculusMR_CastingCameraActor::VRNotificationComponent' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, CameraColorTexture) == 0x0003F8, "Member 'AOculusMR_CastingCameraActor::CameraColorTexture' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, CameraDepthTexture) == 0x000400, "Member 'AOculusMR_CastingCameraActor::CameraDepthTexture' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, PlaneMeshComponent) == 0x000408, "Member 'AOculusMR_CastingCameraActor::PlaneMeshComponent' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ChromaKeyMaterial) == 0x000410, "Member 'AOculusMR_CastingCameraActor::ChromaKeyMaterial' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ChromaKeyLitMaterial) == 0x000418, "Member 'AOculusMR_CastingCameraActor::ChromaKeyLitMaterial' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, OpaqueColoredMaterial) == 0x000420, "Member 'AOculusMR_CastingCameraActor::OpaqueColoredMaterial' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ChromaKeyMaterialInstance) == 0x000428, "Member 'AOculusMR_CastingCameraActor::ChromaKeyMaterialInstance' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ChromaKeyLitMaterialInstance) == 0x000430, "Member 'AOculusMR_CastingCameraActor::ChromaKeyLitMaterialInstance' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, CameraFrameMaterialInstance) == 0x000438, "Member 'AOculusMR_CastingCameraActor::CameraFrameMaterialInstance' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, BackdropMaterialInstance) == 0x000440, "Member 'AOculusMR_CastingCameraActor::BackdropMaterialInstance' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, BoundaryActor) == 0x000448, "Member 'AOculusMR_CastingCameraActor::BoundaryActor' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, BoundarySceneCaptureActor) == 0x000450, "Member 'AOculusMR_CastingCameraActor::BoundarySceneCaptureActor' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, DefaultTexture_White) == 0x000458, "Member 'AOculusMR_CastingCameraActor::DefaultTexture_White' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, BackgroundRenderTarget) == 0x0004C8, "Member 'AOculusMR_CastingCameraActor::BackgroundRenderTarget' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ForegroundCaptureActor) == 0x0004D0, "Member 'AOculusMR_CastingCameraActor::ForegroundCaptureActor' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, ForegroundRenderTarget) == 0x0004D8, "Member 'AOculusMR_CastingCameraActor::ForegroundRenderTarget' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, MRSettings) == 0x0004E0, "Member 'AOculusMR_CastingCameraActor::MRSettings' has a wrong offset!");
static_assert(offsetof(AOculusMR_CastingCameraActor, MRState) == 0x0004E8, "Member 'AOculusMR_CastingCameraActor::MRState' has a wrong offset!");

// Class OculusMR.OculusMR_PlaneMeshComponent
// 0x0020 (0x06B0 - 0x0690)
class UOculusMR_PlaneMeshComponent final : public UMeshComponent
{
public:
	uint8                                         Pad_690[0x20];                                     // 0x0690(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCustomMeshTriangles(const TArray<struct FOculusMR_PlaneMeshTriangle>& Triangles);
	void ClearCustomMeshTriangles();
	bool SetCustomMeshTriangles(const TArray<struct FOculusMR_PlaneMeshTriangle>& Triangles);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_PlaneMeshComponent">();
	}
	static class UOculusMR_PlaneMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMR_PlaneMeshComponent>();
	}
};
static_assert(alignof(UOculusMR_PlaneMeshComponent) == 0x000008, "Wrong alignment on UOculusMR_PlaneMeshComponent");
static_assert(sizeof(UOculusMR_PlaneMeshComponent) == 0x0006B0, "Wrong size on UOculusMR_PlaneMeshComponent");

// Class OculusMR.OculusMR_Settings
// 0x00A0 (0x00C8 - 0x0028)
class UOculusMR_Settings final : public UObject
{
public:
	EOculusMR_ClippingReference                   ClippingReference;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTrackedCameraResolution;                       // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WidthPerView;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeightPerView;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CastingLatency;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandPoseStateLatency;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ChromaKeyColor;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaKeySimilarity;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaKeySmoothRange;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaKeySpillRange;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOculusMR_VirtualGreenScreenType              VirtualGreenScreenType;                            // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DynamicLightingDepthSmoothFactor;                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicLightingDepthVariationClampingValue;        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOculusMR_PostProcessEffects                  ExternalCompositionPostProcessEffects;             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCasting;                                        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EOculusMR_CompositionMethod                   CompositionMethod;                                 // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EOculusMR_CameraDeviceEnum                    CapturingCamera;                                   // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseDynamicLighting;                               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EOculusMR_DepthQuality                        DepthQuality;                                      // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5E[0x6A];                                      // 0x005E(0x006A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToTrackedCameraIndexIfAvailable(int32 InTrackedCameraIndex);
	int32 GetBindToTrackedCameraIndex();
	EOculusMR_CameraDeviceEnum GetCapturingCamera();
	EOculusMR_CompositionMethod GetCompositionMethod();
	EOculusMR_DepthQuality GetDepthQuality();
	bool GetIsCasting();
	bool GetUseDynamicLighting();
	void LoadFromIni();
	void SetCapturingCamera(EOculusMR_CameraDeviceEnum Val);
	void SetCompositionMethod(EOculusMR_CompositionMethod Val);
	void SetDepthQuality(EOculusMR_DepthQuality Val);
	void SetIsCasting(bool Val);
	void SetUseDynamicLighting(bool Val);

	void SaveToIni() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_Settings">();
	}
	static class UOculusMR_Settings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMR_Settings>();
	}
};
static_assert(alignof(UOculusMR_Settings) == 0x000008, "Wrong alignment on UOculusMR_Settings");
static_assert(sizeof(UOculusMR_Settings) == 0x0000C8, "Wrong size on UOculusMR_Settings");
static_assert(offsetof(UOculusMR_Settings, ClippingReference) == 0x000028, "Member 'UOculusMR_Settings::ClippingReference' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, bUseTrackedCameraResolution) == 0x000029, "Member 'UOculusMR_Settings::bUseTrackedCameraResolution' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, WidthPerView) == 0x00002C, "Member 'UOculusMR_Settings::WidthPerView' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, HeightPerView) == 0x000030, "Member 'UOculusMR_Settings::HeightPerView' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, CastingLatency) == 0x000034, "Member 'UOculusMR_Settings::CastingLatency' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, HandPoseStateLatency) == 0x000038, "Member 'UOculusMR_Settings::HandPoseStateLatency' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ChromaKeyColor) == 0x00003C, "Member 'UOculusMR_Settings::ChromaKeyColor' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ChromaKeySimilarity) == 0x000040, "Member 'UOculusMR_Settings::ChromaKeySimilarity' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ChromaKeySmoothRange) == 0x000044, "Member 'UOculusMR_Settings::ChromaKeySmoothRange' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ChromaKeySpillRange) == 0x000048, "Member 'UOculusMR_Settings::ChromaKeySpillRange' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, VirtualGreenScreenType) == 0x00004C, "Member 'UOculusMR_Settings::VirtualGreenScreenType' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, DynamicLightingDepthSmoothFactor) == 0x000050, "Member 'UOculusMR_Settings::DynamicLightingDepthSmoothFactor' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, DynamicLightingDepthVariationClampingValue) == 0x000054, "Member 'UOculusMR_Settings::DynamicLightingDepthVariationClampingValue' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, ExternalCompositionPostProcessEffects) == 0x000058, "Member 'UOculusMR_Settings::ExternalCompositionPostProcessEffects' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, bIsCasting) == 0x000059, "Member 'UOculusMR_Settings::bIsCasting' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, CompositionMethod) == 0x00005A, "Member 'UOculusMR_Settings::CompositionMethod' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, CapturingCamera) == 0x00005B, "Member 'UOculusMR_Settings::CapturingCamera' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, bUseDynamicLighting) == 0x00005C, "Member 'UOculusMR_Settings::bUseDynamicLighting' has a wrong offset!");
static_assert(offsetof(UOculusMR_Settings, DepthQuality) == 0x00005D, "Member 'UOculusMR_Settings::DepthQuality' has a wrong offset!");

// Class OculusMR.OculusMR_State
// 0x0068 (0x0090 - 0x0028)
class UOculusMR_State final : public UObject
{
public:
	struct FTrackedCamera                         TrackedCamera;                                     // 0x0028(0x0058)(NativeAccessSpecifierPublic)
	class USceneComponent*                        TrackingReferenceComponent;                        // 0x0080(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x4];                                       // 0x0088(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ChangeCameraStateRequested;                        // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BindToTrackedCameraIndexRequested;                 // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusMR_State">();
	}
	static class UOculusMR_State* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusMR_State>();
	}
};
static_assert(alignof(UOculusMR_State) == 0x000008, "Wrong alignment on UOculusMR_State");
static_assert(sizeof(UOculusMR_State) == 0x000090, "Wrong size on UOculusMR_State");
static_assert(offsetof(UOculusMR_State, TrackedCamera) == 0x000028, "Member 'UOculusMR_State::TrackedCamera' has a wrong offset!");
static_assert(offsetof(UOculusMR_State, TrackingReferenceComponent) == 0x000080, "Member 'UOculusMR_State::TrackingReferenceComponent' has a wrong offset!");
static_assert(offsetof(UOculusMR_State, ChangeCameraStateRequested) == 0x00008C, "Member 'UOculusMR_State::ChangeCameraStateRequested' has a wrong offset!");
static_assert(offsetof(UOculusMR_State, BindToTrackedCameraIndexRequested) == 0x00008D, "Member 'UOculusMR_State::BindToTrackedCameraIndexRequested' has a wrong offset!");

}

