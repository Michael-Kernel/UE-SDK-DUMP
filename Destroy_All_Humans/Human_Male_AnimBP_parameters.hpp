#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Human_Male_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BFGCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// DelegateFunction Human_Male_AnimBP.Human_Male_AnimBP_C.BFGAnimation_EventWeaponObject__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Human_Male_AnimBP_C_BFGAnimation_EventWeaponObject__DelegateSignature final
{
public:
	class ABFGWeapon*                             bpp___pWeapon__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_BFGAnimation_EventWeaponObject__DelegateSignature) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_BFGAnimation_EventWeaponObject__DelegateSignature");
static_assert(sizeof(Human_Male_AnimBP_C_BFGAnimation_EventWeaponObject__DelegateSignature) == 0x000008, "Wrong size on Human_Male_AnimBP_C_BFGAnimation_EventWeaponObject__DelegateSignature");
static_assert(offsetof(Human_Male_AnimBP_C_BFGAnimation_EventWeaponObject__DelegateSignature, bpp___pWeapon__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_BFGAnimation_EventWeaponObject__DelegateSignature::bpp___pWeapon__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.AlertRunLookAtNothingCondition
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_AlertRunLookAtNothingCondition final
{
public:
	bool                                          bpp__ShouldLookAtNothing__pf;                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_AlertRunLookAtNothingCondition) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_AlertRunLookAtNothingCondition");
static_assert(sizeof(Human_Male_AnimBP_C_AlertRunLookAtNothingCondition) == 0x000001, "Wrong size on Human_Male_AnimBP_C_AlertRunLookAtNothingCondition");
static_assert(offsetof(Human_Male_AnimBP_C_AlertRunLookAtNothingCondition, bpp__ShouldLookAtNothing__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_AlertRunLookAtNothingCondition::bpp__ShouldLookAtNothing__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.AlertRunLookAtPlayerCondition
// 0x0002 (0x0002 - 0x0000)
struct Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition final
{
public:
	EBFGAlertSystemSeenState                      bpp__SeenState__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__LookAt__pf;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition");
static_assert(sizeof(Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition) == 0x000002, "Wrong size on Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition");
static_assert(offsetof(Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition, bpp__SeenState__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition::bpp__SeenState__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition, bpp__LookAt__pf) == 0x000001, "Member 'Human_Male_AnimBP_C_AlertRunLookAtPlayerCondition::bpp__LookAt__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         bpp__DeltaTimeX__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(Human_Male_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on Human_Male_AnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(Human_Male_AnimBP_C_BlueprintUpdateAnimation, bpp__DeltaTimeX__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_BlueprintUpdateAnimation::bpp__DeltaTimeX__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.CheckFullBodyMontagePlaying
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_CheckFullBodyMontagePlaying final
{
public:
	bool                                          bpp__FullBodyMontagePlaying__pf;                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_CheckFullBodyMontagePlaying) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_CheckFullBodyMontagePlaying");
static_assert(sizeof(Human_Male_AnimBP_C_CheckFullBodyMontagePlaying) == 0x000001, "Wrong size on Human_Male_AnimBP_C_CheckFullBodyMontagePlaying");
static_assert(offsetof(Human_Male_AnimBP_C_CheckFullBodyMontagePlaying, bpp__FullBodyMontagePlaying__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_CheckFullBodyMontagePlaying::bpp__FullBodyMontagePlaying__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ComputeCardinalDirectionVelocity
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_ComputeCardinalDirectionVelocity final
{
public:
	float                                         bpp__HorizontalMoveDirection__pf;                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ComputeCardinalDirectionVelocity) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ComputeCardinalDirectionVelocity");
static_assert(sizeof(Human_Male_AnimBP_C_ComputeCardinalDirectionVelocity) == 0x000004, "Wrong size on Human_Male_AnimBP_C_ComputeCardinalDirectionVelocity");
static_assert(offsetof(Human_Male_AnimBP_C_ComputeCardinalDirectionVelocity, bpp__HorizontalMoveDirection__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ComputeCardinalDirectionVelocity::bpp__HorizontalMoveDirection__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ComputeCardinalVelocityDelta
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_ComputeCardinalVelocityDelta final
{
public:
	float                                         bpp__CardinalDirectionValue__pf;                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ComputeCardinalVelocityDelta) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ComputeCardinalVelocityDelta");
static_assert(sizeof(Human_Male_AnimBP_C_ComputeCardinalVelocityDelta) == 0x000004, "Wrong size on Human_Male_AnimBP_C_ComputeCardinalVelocityDelta");
static_assert(offsetof(Human_Male_AnimBP_C_ComputeCardinalVelocityDelta, bpp__CardinalDirectionValue__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ComputeCardinalVelocityDelta::bpp__CardinalDirectionValue__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ComputeHitDirection
// 0x000C (0x000C - 0x0000)
struct Human_Male_AnimBP_C_ComputeHitDirection final
{
public:
	struct FVector                                bpp__HitDir__pf;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ComputeHitDirection) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ComputeHitDirection");
static_assert(sizeof(Human_Male_AnimBP_C_ComputeHitDirection) == 0x00000C, "Wrong size on Human_Male_AnimBP_C_ComputeHitDirection");
static_assert(offsetof(Human_Male_AnimBP_C_ComputeHitDirection, bpp__HitDir__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ComputeHitDirection::bpp__HitDir__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ComputeSpeedWarpingAdjustment
// 0x0014 (0x0014 - 0x0000)
struct Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment final
{
public:
	float                                         bpp__Speed__pf;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PlayRateIKPercentageAbove__pf;                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PlayRateIKPercentageBelow__pf;                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PlayRate__pf;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__IKAdjustmentXY__pf;                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment");
static_assert(sizeof(Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment) == 0x000014, "Wrong size on Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment");
static_assert(offsetof(Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__Speed__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__Speed__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__PlayRateIKPercentageAbove__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__PlayRateIKPercentageAbove__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__PlayRateIKPercentageBelow__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__PlayRateIKPercentageBelow__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__PlayRate__pf) == 0x00000C, "Member 'Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__PlayRate__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment, bpp__IKAdjustmentXY__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_ComputeSpeedWarpingAdjustment::bpp__IKAdjustmentXY__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.Example
// 0x0010 (0x0010 - 0x0000)
struct Human_Male_AnimBP_C_Example final
{
public:
	EBFGAnimation_WeaponPosture                   bpp__NewParam1__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__NewParam__pf;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_Example) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_Example");
static_assert(sizeof(Human_Male_AnimBP_C_Example) == 0x000010, "Wrong size on Human_Male_AnimBP_C_Example");
static_assert(offsetof(Human_Male_AnimBP_C_Example, bpp__NewParam1__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_Example::bpp__NewParam1__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_Example, bpp__NewParam__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_Example::bpp__NewParam__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ExecuteUbergraph_Human_Male_AnimBP_0
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_0 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_0) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_0");
static_assert(sizeof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_0) == 0x000004, "Wrong size on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_0");
static_assert(offsetof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_0, bpp__EntryPoint__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_0::bpp__EntryPoint__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ExecuteUbergraph_Human_Male_AnimBP_10
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_10 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_10) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_10");
static_assert(sizeof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_10) == 0x000004, "Wrong size on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_10");
static_assert(offsetof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_10, bpp__EntryPoint__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_10::bpp__EntryPoint__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ExecuteUbergraph_Human_Male_AnimBP_25
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_25 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_25) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_25");
static_assert(sizeof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_25) == 0x000004, "Wrong size on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_25");
static_assert(offsetof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_25, bpp__EntryPoint__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_25::bpp__EntryPoint__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ExecuteUbergraph_Human_Male_AnimBP_27
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_27 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_27) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_27");
static_assert(sizeof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_27) == 0x000004, "Wrong size on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_27");
static_assert(offsetof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_27, bpp__EntryPoint__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_27::bpp__EntryPoint__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ExecuteUbergraph_Human_Male_AnimBP_3
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_3 final
{
public:
	int32                                         bpp__EntryPoint__pf;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_3) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_3");
static_assert(sizeof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_3) == 0x000004, "Wrong size on Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_3");
static_assert(offsetof(Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_3, bpp__EntryPoint__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ExecuteUbergraph_Human_Male_AnimBP_3::bpp__EntryPoint__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.G2AEvade
// 0x0010 (0x0010 - 0x0000)
struct Human_Male_AnimBP_C_G2AEvade final
{
public:
	EBFGEvadeDirection                            bpp___direction__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 bpp___pEvadeFromActor__pf;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_G2AEvade) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_G2AEvade");
static_assert(sizeof(Human_Male_AnimBP_C_G2AEvade) == 0x000010, "Wrong size on Human_Male_AnimBP_C_G2AEvade");
static_assert(offsetof(Human_Male_AnimBP_C_G2AEvade, bpp___direction__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_G2AEvade::bpp___direction__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_G2AEvade, bpp___pEvadeFromActor__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_G2AEvade::bpp___pEvadeFromActor__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.G2AGetHit
// 0x0018 (0x0018 - 0x0000)
struct Human_Male_AnimBP_C_G2AGetHit final
{
public:
	struct FVector                                bpp___vHitDirection__pf__const;                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UBFGDamageType*                   bpp___pDamageType__pf__const;                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_G2AGetHit) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_G2AGetHit");
static_assert(sizeof(Human_Male_AnimBP_C_G2AGetHit) == 0x000018, "Wrong size on Human_Male_AnimBP_C_G2AGetHit");
static_assert(offsetof(Human_Male_AnimBP_C_G2AGetHit, bpp___vHitDirection__pf__const) == 0x000000, "Member 'Human_Male_AnimBP_C_G2AGetHit::bpp___vHitDirection__pf__const' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_G2AGetHit, bpp___pDamageType__pf__const) == 0x000010, "Member 'Human_Male_AnimBP_C_G2AGetHit::bpp___pDamageType__pf__const' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.G2AHitByPhysicsObject
// 0x0018 (0x0018 - 0x0000)
struct Human_Male_AnimBP_C_G2AHitByPhysicsObject final
{
public:
	struct FVector                                bpp___vHitDirection__pf;                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp___fVelocity__pf;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp___pHitByActor__pf;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_G2AHitByPhysicsObject) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_G2AHitByPhysicsObject");
static_assert(sizeof(Human_Male_AnimBP_C_G2AHitByPhysicsObject) == 0x000018, "Wrong size on Human_Male_AnimBP_C_G2AHitByPhysicsObject");
static_assert(offsetof(Human_Male_AnimBP_C_G2AHitByPhysicsObject, bpp___vHitDirection__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_G2AHitByPhysicsObject::bpp___vHitDirection__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_G2AHitByPhysicsObject, bpp___fVelocity__pf) == 0x00000C, "Member 'Human_Male_AnimBP_C_G2AHitByPhysicsObject::bpp___fVelocity__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_G2AHitByPhysicsObject, bpp___pHitByActor__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_G2AHitByPhysicsObject::bpp___pHitByActor__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.G2APlayerBumped
// 0x0018 (0x0018 - 0x0000)
struct Human_Male_AnimBP_C_G2APlayerBumped final
{
public:
	struct FVector                                bpp___vHitDirection__pf;                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp___fVelocity__pf;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 bpp___pHitByActor__pf;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_G2APlayerBumped) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_G2APlayerBumped");
static_assert(sizeof(Human_Male_AnimBP_C_G2APlayerBumped) == 0x000018, "Wrong size on Human_Male_AnimBP_C_G2APlayerBumped");
static_assert(offsetof(Human_Male_AnimBP_C_G2APlayerBumped, bpp___vHitDirection__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_G2APlayerBumped::bpp___vHitDirection__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_G2APlayerBumped, bpp___fVelocity__pf) == 0x00000C, "Member 'Human_Male_AnimBP_C_G2APlayerBumped::bpp___fVelocity__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_G2APlayerBumped, bpp___pHitByActor__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_G2APlayerBumped::bpp___pHitByActor__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.G2AShotFire
// 0x0008 (0x0008 - 0x0000)
struct Human_Male_AnimBP_C_G2AShotFire final
{
public:
	class FName                                   bpp___nSocketName__pf;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_G2AShotFire) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_G2AShotFire");
static_assert(sizeof(Human_Male_AnimBP_C_G2AShotFire) == 0x000008, "Wrong size on Human_Male_AnimBP_C_G2AShotFire");
static_assert(offsetof(Human_Male_AnimBP_C_G2AShotFire, bpp___nSocketName__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_G2AShotFire::bpp___nSocketName__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.G2AWeaponTelegraphingStart
// 0x0008 (0x0008 - 0x0000)
struct Human_Male_AnimBP_C_G2AWeaponTelegraphingStart final
{
public:
	class ABFGWeapon*                             bpp___pWeapon__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_G2AWeaponTelegraphingStart) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_G2AWeaponTelegraphingStart");
static_assert(sizeof(Human_Male_AnimBP_C_G2AWeaponTelegraphingStart) == 0x000008, "Wrong size on Human_Male_AnimBP_C_G2AWeaponTelegraphingStart");
static_assert(offsetof(Human_Male_AnimBP_C_G2AWeaponTelegraphingStart, bpp___pWeapon__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_G2AWeaponTelegraphingStart::bpp___pWeapon__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.GenerateLookRange
// 0x0010 (0x0010 - 0x0000)
struct Human_Male_AnimBP_C_GenerateLookRange final
{
public:
	float                                         bpp__YawLower__pf;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__YawUpper__pf;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PitchLower__pf;                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PitchUpper__pf;                               // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_GenerateLookRange) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_GenerateLookRange");
static_assert(sizeof(Human_Male_AnimBP_C_GenerateLookRange) == 0x000010, "Wrong size on Human_Male_AnimBP_C_GenerateLookRange");
static_assert(offsetof(Human_Male_AnimBP_C_GenerateLookRange, bpp__YawLower__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_GenerateLookRange::bpp__YawLower__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_GenerateLookRange, bpp__YawUpper__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_GenerateLookRange::bpp__YawUpper__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_GenerateLookRange, bpp__PitchLower__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_GenerateLookRange::bpp__PitchLower__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_GenerateLookRange, bpp__PitchUpper__pf) == 0x00000C, "Member 'Human_Male_AnimBP_C_GenerateLookRange::bpp__PitchUpper__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.GetInteractBlendTime_In
// 0x0004 (0x0004 - 0x0000)
struct Human_Male_AnimBP_C_GetInteractBlendTime_In final
{
public:
	float                                         bpp__Out__pf;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_GetInteractBlendTime_In) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_GetInteractBlendTime_In");
static_assert(sizeof(Human_Male_AnimBP_C_GetInteractBlendTime_In) == 0x000004, "Wrong size on Human_Male_AnimBP_C_GetInteractBlendTime_In");
static_assert(offsetof(Human_Male_AnimBP_C_GetInteractBlendTime_In, bpp__Out__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_GetInteractBlendTime_In::bpp__Out__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.GetMontageForShootBzPosture
// 0x0010 (0x0010 - 0x0000)
struct Human_Male_AnimBP_C_GetMontageForShootBzPosture final
{
public:
	EBFGAnimation_WeaponPosture                   bpp__NewParam1__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__NewParam__pf;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_GetMontageForShootBzPosture) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_GetMontageForShootBzPosture");
static_assert(sizeof(Human_Male_AnimBP_C_GetMontageForShootBzPosture) == 0x000010, "Wrong size on Human_Male_AnimBP_C_GetMontageForShootBzPosture");
static_assert(offsetof(Human_Male_AnimBP_C_GetMontageForShootBzPosture, bpp__NewParam1__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_GetMontageForShootBzPosture::bpp__NewParam1__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_GetMontageForShootBzPosture, bpp__NewParam__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_GetMontageForShootBzPosture::bpp__NewParam__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.GetRandomArrayElement
// 0x000C (0x000C - 0x0000)
struct Human_Male_AnimBP_C_GetRandomArrayElement final
{
public:
	int32                                         bpp__SelectedInt__pf;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bpp__IdleSectionName__pf;                          // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_GetRandomArrayElement) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_GetRandomArrayElement");
static_assert(sizeof(Human_Male_AnimBP_C_GetRandomArrayElement) == 0x00000C, "Wrong size on Human_Male_AnimBP_C_GetRandomArrayElement");
static_assert(offsetof(Human_Male_AnimBP_C_GetRandomArrayElement, bpp__SelectedInt__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_GetRandomArrayElement::bpp__SelectedInt__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_GetRandomArrayElement, bpp__IdleSectionName__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_GetRandomArrayElement::bpp__IdleSectionName__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.IsLodTransitionActive
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_IsLodTransitionActive final
{
public:
	bool                                          bpp__Out__pf;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_IsLodTransitionActive) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_IsLodTransitionActive");
static_assert(sizeof(Human_Male_AnimBP_C_IsLodTransitionActive) == 0x000001, "Wrong size on Human_Male_AnimBP_C_IsLodTransitionActive");
static_assert(offsetof(Human_Male_AnimBP_C_IsLodTransitionActive, bpp__Out__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_IsLodTransitionActive::bpp__Out__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.LodTransitionStarted
// 0x0040 (0x0040 - 0x0000)
struct Human_Male_AnimBP_C_LodTransitionStarted final
{
public:
	struct FPoseSnapshot                          bpp___oPoseSnapshot__pf__const;                    // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         bpp___fTransitionTime__pf;                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Human_Male_AnimBP_C_LodTransitionStarted) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_LodTransitionStarted");
static_assert(sizeof(Human_Male_AnimBP_C_LodTransitionStarted) == 0x000040, "Wrong size on Human_Male_AnimBP_C_LodTransitionStarted");
static_assert(offsetof(Human_Male_AnimBP_C_LodTransitionStarted, bpp___oPoseSnapshot__pf__const) == 0x000000, "Member 'Human_Male_AnimBP_C_LodTransitionStarted::bpp___oPoseSnapshot__pf__const' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LodTransitionStarted, bpp___fTransitionTime__pf) == 0x000038, "Member 'Human_Male_AnimBP_C_LodTransitionStarted::bpp___fTransitionTime__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.LodTransitionUpdated
// 0x0038 (0x0038 - 0x0000)
struct Human_Male_AnimBP_C_LodTransitionUpdated final
{
public:
	struct FPoseSnapshot                          bpp___oPoseSnapshot__pf__const;                    // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_LodTransitionUpdated) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_LodTransitionUpdated");
static_assert(sizeof(Human_Male_AnimBP_C_LodTransitionUpdated) == 0x000038, "Wrong size on Human_Male_AnimBP_C_LodTransitionUpdated");
static_assert(offsetof(Human_Male_AnimBP_C_LodTransitionUpdated, bpp___oPoseSnapshot__pf__const) == 0x000000, "Member 'Human_Male_AnimBP_C_LodTransitionUpdated::bpp___oPoseSnapshot__pf__const' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.LookTimer
// 0x0024 (0x0024 - 0x0000)
struct Human_Male_AnimBP_C_LookTimer final
{
public:
	bool                                          bpp__ActivateTimer__pf;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__SwitchTimeLowest__pf;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__SwitchTimeHighest__pf;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__YawLookResultRangeLower__pf;                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__YawLookResultRangeUpper__pf;                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PitchLookResultRangeLower__pf;                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PitchLookResultRangeUpper__pf;                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__YawLookResult__pf;                            // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__PitchLookResult__pf;                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_LookTimer) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_LookTimer");
static_assert(sizeof(Human_Male_AnimBP_C_LookTimer) == 0x000024, "Wrong size on Human_Male_AnimBP_C_LookTimer");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__ActivateTimer__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__ActivateTimer__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__SwitchTimeLowest__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__SwitchTimeLowest__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__SwitchTimeHighest__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__SwitchTimeHighest__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__YawLookResultRangeLower__pf) == 0x00000C, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__YawLookResultRangeLower__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__YawLookResultRangeUpper__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__YawLookResultRangeUpper__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__PitchLookResultRangeLower__pf) == 0x000014, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__PitchLookResultRangeLower__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__PitchLookResultRangeUpper__pf) == 0x000018, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__PitchLookResultRangeUpper__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__YawLookResult__pf) == 0x00001C, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__YawLookResult__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_LookTimer, bpp__PitchLookResult__pf) == 0x000020, "Member 'Human_Male_AnimBP_C_LookTimer::bpp__PitchLookResult__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.OnWeaponEquip
// 0x0008 (0x0008 - 0x0000)
struct Human_Male_AnimBP_C_OnWeaponEquip final
{
public:
	class ABFGWeapon*                             bpp___pWeapon__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_OnWeaponEquip) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_OnWeaponEquip");
static_assert(sizeof(Human_Male_AnimBP_C_OnWeaponEquip) == 0x000008, "Wrong size on Human_Male_AnimBP_C_OnWeaponEquip");
static_assert(offsetof(Human_Male_AnimBP_C_OnWeaponEquip, bpp___pWeapon__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_OnWeaponEquip::bpp___pWeapon__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.OnWeaponUnequip
// 0x0008 (0x0008 - 0x0000)
struct Human_Male_AnimBP_C_OnWeaponUnequip final
{
public:
	class ABFGWeapon*                             bpp___pWeapon__pf;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_OnWeaponUnequip) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_OnWeaponUnequip");
static_assert(sizeof(Human_Male_AnimBP_C_OnWeaponUnequip) == 0x000008, "Wrong size on Human_Male_AnimBP_C_OnWeaponUnequip");
static_assert(offsetof(Human_Male_AnimBP_C_OnWeaponUnequip, bpp___pWeapon__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_OnWeaponUnequip::bpp___pWeapon__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.PlayEvadeMontage
// 0x0008 (0x0008 - 0x0000)
struct Human_Male_AnimBP_C_PlayEvadeMontage final
{
public:
	class UAnimMontage*                           bpp__EvadeMontage__pf;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_PlayEvadeMontage) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_PlayEvadeMontage");
static_assert(sizeof(Human_Male_AnimBP_C_PlayEvadeMontage) == 0x000008, "Wrong size on Human_Male_AnimBP_C_PlayEvadeMontage");
static_assert(offsetof(Human_Male_AnimBP_C_PlayEvadeMontage, bpp__EvadeMontage__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_PlayEvadeMontage::bpp__EvadeMontage__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.PlayIdleMontage
// 0x0010 (0x0010 - 0x0000)
struct Human_Male_AnimBP_C_PlayIdleMontage final
{
public:
	class FName                                   bpp__SectionName__pf;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           bpp__Montage__pf;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_PlayIdleMontage) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_PlayIdleMontage");
static_assert(sizeof(Human_Male_AnimBP_C_PlayIdleMontage) == 0x000010, "Wrong size on Human_Male_AnimBP_C_PlayIdleMontage");
static_assert(offsetof(Human_Male_AnimBP_C_PlayIdleMontage, bpp__SectionName__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_PlayIdleMontage::bpp__SectionName__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_PlayIdleMontage, bpp__Montage__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_PlayIdleMontage::bpp__Montage__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.PlayMontageEquip
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_PlayMontageEquip final
{
public:
	EBFGAnimation_WeaponPosture                   bpp__WeaponPosture__pf;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_PlayMontageEquip) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_PlayMontageEquip");
static_assert(sizeof(Human_Male_AnimBP_C_PlayMontageEquip) == 0x000001, "Wrong size on Human_Male_AnimBP_C_PlayMontageEquip");
static_assert(offsetof(Human_Male_AnimBP_C_PlayMontageEquip, bpp__WeaponPosture__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_PlayMontageEquip::bpp__WeaponPosture__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.PlayMontageGetUp
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_PlayMontageGetUp final
{
public:
	bool                                          bpp__IsFaceDown__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_PlayMontageGetUp) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_PlayMontageGetUp");
static_assert(sizeof(Human_Male_AnimBP_C_PlayMontageGetUp) == 0x000001, "Wrong size on Human_Male_AnimBP_C_PlayMontageGetUp");
static_assert(offsetof(Human_Male_AnimBP_C_PlayMontageGetUp, bpp__IsFaceDown__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_PlayMontageGetUp::bpp__IsFaceDown__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.PlayMontageUnEquip
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_PlayMontageUnEquip final
{
public:
	EBFGAnimation_WeaponPosture                   bpp__WeaponPosture__pf;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_PlayMontageUnEquip) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_PlayMontageUnEquip");
static_assert(sizeof(Human_Male_AnimBP_C_PlayMontageUnEquip) == 0x000001, "Wrong size on Human_Male_AnimBP_C_PlayMontageUnEquip");
static_assert(offsetof(Human_Male_AnimBP_C_PlayMontageUnEquip, bpp__WeaponPosture__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_PlayMontageUnEquip::bpp__WeaponPosture__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectEquipMontage
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_SelectEquipMontage final
{
public:
	EBFGAnimation_WeaponPosture                   bpp__WeaponPosture__pf;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SelectEquipMontage) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_SelectEquipMontage");
static_assert(sizeof(Human_Male_AnimBP_C_SelectEquipMontage) == 0x000001, "Wrong size on Human_Male_AnimBP_C_SelectEquipMontage");
static_assert(offsetof(Human_Male_AnimBP_C_SelectEquipMontage, bpp__WeaponPosture__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectEquipMontage::bpp__WeaponPosture__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectEvadeMontage
// 0x0010 (0x0010 - 0x0000)
struct Human_Male_AnimBP_C_SelectEvadeMontage final
{
public:
	EBFGEvadeDirection                            bpp__Direction__pf;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           bpp__SelectedMontage__pf;                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SelectEvadeMontage) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_SelectEvadeMontage");
static_assert(sizeof(Human_Male_AnimBP_C_SelectEvadeMontage) == 0x000010, "Wrong size on Human_Male_AnimBP_C_SelectEvadeMontage");
static_assert(offsetof(Human_Male_AnimBP_C_SelectEvadeMontage, bpp__Direction__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectEvadeMontage::bpp__Direction__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectEvadeMontage, bpp__SelectedMontage__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SelectEvadeMontage::bpp__SelectedMontage__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectGetUpMontage
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_SelectGetUpMontage final
{
public:
	bool                                          bpp__IsFaceDown__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SelectGetUpMontage) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_SelectGetUpMontage");
static_assert(sizeof(Human_Male_AnimBP_C_SelectGetUpMontage) == 0x000001, "Wrong size on Human_Male_AnimBP_C_SelectGetUpMontage");
static_assert(offsetof(Human_Male_AnimBP_C_SelectGetUpMontage, bpp__IsFaceDown__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectGetUpMontage::bpp__IsFaceDown__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectGrenadeThrowMontage
// 0x0008 (0x0008 - 0x0000)
struct Human_Male_AnimBP_C_SelectGrenadeThrowMontage final
{
public:
	class UAnimMontage*                           bpp__GrenadeThrowMontage__pf;                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SelectGrenadeThrowMontage) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_SelectGrenadeThrowMontage");
static_assert(sizeof(Human_Male_AnimBP_C_SelectGrenadeThrowMontage) == 0x000008, "Wrong size on Human_Male_AnimBP_C_SelectGrenadeThrowMontage");
static_assert(offsetof(Human_Male_AnimBP_C_SelectGrenadeThrowMontage, bpp__GrenadeThrowMontage__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectGrenadeThrowMontage::bpp__GrenadeThrowMontage__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectInteractFacialExpression
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_SelectInteractFacialExpression final
{
public:
	EBFGAnimation_Interact                        bpp__InteractID__pf;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SelectInteractFacialExpression) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_SelectInteractFacialExpression");
static_assert(sizeof(Human_Male_AnimBP_C_SelectInteractFacialExpression) == 0x000001, "Wrong size on Human_Male_AnimBP_C_SelectInteractFacialExpression");
static_assert(offsetof(Human_Male_AnimBP_C_SelectInteractFacialExpression, bpp__InteractID__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectInteractFacialExpression::bpp__InteractID__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectSpeedWarpingDirection
// 0x0008 (0x0008 - 0x0000)
struct Human_Male_AnimBP_C_SelectSpeedWarpingDirection final
{
public:
	float                                         bpp__XY__pf;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Z__pf;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SelectSpeedWarpingDirection) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_SelectSpeedWarpingDirection");
static_assert(sizeof(Human_Male_AnimBP_C_SelectSpeedWarpingDirection) == 0x000008, "Wrong size on Human_Male_AnimBP_C_SelectSpeedWarpingDirection");
static_assert(offsetof(Human_Male_AnimBP_C_SelectSpeedWarpingDirection, bpp__XY__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectSpeedWarpingDirection::bpp__XY__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectSpeedWarpingDirection, bpp__Z__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_SelectSpeedWarpingDirection::bpp__Z__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectTransitionAnimations
// 0x0070 (0x0070 - 0x0000)
struct Human_Male_AnimBP_C_SelectTransitionAnimations final
{
public:
	class UAnimSequence*                          bpp__UB_F__pf;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__UB_R__pf;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__UB_L__pf;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__UB_B__pf;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LB_F__pf;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LB_R__pf;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LB_L__pf;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LB_B__pf;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Direction__pf;                                // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          bpp__AnimA__pf;                                    // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimA_additive__pf;                           // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimB__pf;                                    // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__AnimB_additive__pf;                           // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__BlendValue__pf;                               // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Human_Male_AnimBP_C_SelectTransitionAnimations) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_SelectTransitionAnimations");
static_assert(sizeof(Human_Male_AnimBP_C_SelectTransitionAnimations) == 0x000070, "Wrong size on Human_Male_AnimBP_C_SelectTransitionAnimations");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__UB_F__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__UB_F__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__UB_R__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__UB_R__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__UB_L__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__UB_L__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__UB_B__pf) == 0x000018, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__UB_B__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__LB_F__pf) == 0x000020, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__LB_F__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__LB_R__pf) == 0x000028, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__LB_R__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__LB_L__pf) == 0x000030, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__LB_L__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__LB_B__pf) == 0x000038, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__LB_B__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__Direction__pf) == 0x000040, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__Direction__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__AnimA__pf) == 0x000048, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__AnimA__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__AnimA_additive__pf) == 0x000050, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__AnimA_additive__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__AnimB__pf) == 0x000058, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__AnimB__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__AnimB_additive__pf) == 0x000060, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__AnimB_additive__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTransitionAnimations, bpp__BlendValue__pf) == 0x000068, "Member 'Human_Male_AnimBP_C_SelectTransitionAnimations::bpp__BlendValue__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectTurnAnimationsUnarmed
// 0x0028 (0x0028 - 0x0000)
struct Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed final
{
public:
	class UAnimSequence*                          bpp__L90__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__R90__pf;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__L180__pf;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__R180__pf;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Yaw__pf;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed");
static_assert(sizeof(Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed) == 0x000028, "Wrong size on Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed, bpp__L90__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed::bpp__L90__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed, bpp__R90__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed::bpp__R90__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed, bpp__L180__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed::bpp__L180__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed, bpp__R180__pf) == 0x000018, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed::bpp__R180__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed, bpp__Yaw__pf) == 0x000020, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsUnarmed::bpp__Yaw__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectTurnAnimationsWeapon
// 0x0048 (0x0048 - 0x0000)
struct Human_Male_AnimBP_C_SelectTurnAnimationsWeapon final
{
public:
	class UAnimSequence*                          bpp__L90__pf;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__R90__pf;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__L180__pf;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__R180__pf;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__L90_ADD__pf;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__R90_ADD__pf;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__L180_ADD__pf;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__R180_ADD__pf;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__Yaw__pf;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_SelectTurnAnimationsWeapon");
static_assert(sizeof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon) == 0x000048, "Wrong size on Human_Male_AnimBP_C_SelectTurnAnimationsWeapon");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__L90__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__L90__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__R90__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__R90__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__L180__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__L180__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__R180__pf) == 0x000018, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__R180__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__L90_ADD__pf) == 0x000020, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__L90_ADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__R90_ADD__pf) == 0x000028, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__R90_ADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__L180_ADD__pf) == 0x000030, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__L180_ADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__R180_ADD__pf) == 0x000038, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__R180_ADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SelectTurnAnimationsWeapon, bpp__Yaw__pf) == 0x000040, "Member 'Human_Male_AnimBP_C_SelectTurnAnimationsWeapon::bpp__Yaw__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SelectUnEquipMontage
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_SelectUnEquipMontage final
{
public:
	EBFGAnimation_WeaponPosture                   bpp__WeaponPosture__pf;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SelectUnEquipMontage) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_SelectUnEquipMontage");
static_assert(sizeof(Human_Male_AnimBP_C_SelectUnEquipMontage) == 0x000001, "Wrong size on Human_Male_AnimBP_C_SelectUnEquipMontage");
static_assert(offsetof(Human_Male_AnimBP_C_SelectUnEquipMontage, bpp__WeaponPosture__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SelectUnEquipMontage::bpp__WeaponPosture__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SetAimBlendspace
// 0x0010 (0x0010 - 0x0000)
struct Human_Male_AnimBP_C_SetAimBlendspace final
{
public:
	class UBlendSpace*                            bpp__AimBlendspace__pf;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__AimAdjustment__pf;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Human_Male_AnimBP_C_SetAimBlendspace) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_SetAimBlendspace");
static_assert(sizeof(Human_Male_AnimBP_C_SetAimBlendspace) == 0x000010, "Wrong size on Human_Male_AnimBP_C_SetAimBlendspace");
static_assert(offsetof(Human_Male_AnimBP_C_SetAimBlendspace, bpp__AimBlendspace__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SetAimBlendspace::bpp__AimBlendspace__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetAimBlendspace, bpp__AimAdjustment__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SetAimBlendspace::bpp__AimAdjustment__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SetBaseSpeedVariables
// 0x0018 (0x0018 - 0x0000)
struct Human_Male_AnimBP_C_SetBaseSpeedVariables final
{
public:
	float                                         bpp__WalkSpeed__pf;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__RunSpeed__pf;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__WalkPlayRateIKPercentageBelow__pf;            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__WalkPlayRateIKPercentageAbove__pf;            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__RunPlayRateIKPercentageBelow__pf;             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__RunPlayRateIKPercentageAbove__pf;             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SetBaseSpeedVariables) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_SetBaseSpeedVariables");
static_assert(sizeof(Human_Male_AnimBP_C_SetBaseSpeedVariables) == 0x000018, "Wrong size on Human_Male_AnimBP_C_SetBaseSpeedVariables");
static_assert(offsetof(Human_Male_AnimBP_C_SetBaseSpeedVariables, bpp__WalkSpeed__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SetBaseSpeedVariables::bpp__WalkSpeed__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetBaseSpeedVariables, bpp__RunSpeed__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_SetBaseSpeedVariables::bpp__RunSpeed__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetBaseSpeedVariables, bpp__WalkPlayRateIKPercentageBelow__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SetBaseSpeedVariables::bpp__WalkPlayRateIKPercentageBelow__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetBaseSpeedVariables, bpp__WalkPlayRateIKPercentageAbove__pf) == 0x00000C, "Member 'Human_Male_AnimBP_C_SetBaseSpeedVariables::bpp__WalkPlayRateIKPercentageAbove__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetBaseSpeedVariables, bpp__RunPlayRateIKPercentageBelow__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_SetBaseSpeedVariables::bpp__RunPlayRateIKPercentageBelow__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetBaseSpeedVariables, bpp__RunPlayRateIKPercentageAbove__pf) == 0x000014, "Member 'Human_Male_AnimBP_C_SetBaseSpeedVariables::bpp__RunPlayRateIKPercentageAbove__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SetLookDirection
// 0x000C (0x000C - 0x0000)
struct Human_Male_AnimBP_C_SetLookDirection final
{
public:
	bool                                          bpp__ShouldLookAtNothing__pf;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bpp__ShouldLookAtPlayer__pf;                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         bpp__RandomLookPitch__pf;                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__RandomLookYaw__pf;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SetLookDirection) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_SetLookDirection");
static_assert(sizeof(Human_Male_AnimBP_C_SetLookDirection) == 0x00000C, "Wrong size on Human_Male_AnimBP_C_SetLookDirection");
static_assert(offsetof(Human_Male_AnimBP_C_SetLookDirection, bpp__ShouldLookAtNothing__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SetLookDirection::bpp__ShouldLookAtNothing__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetLookDirection, bpp__ShouldLookAtPlayer__pf) == 0x000001, "Member 'Human_Male_AnimBP_C_SetLookDirection::bpp__ShouldLookAtPlayer__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetLookDirection, bpp__RandomLookPitch__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_SetLookDirection::bpp__RandomLookPitch__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetLookDirection, bpp__RandomLookYaw__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SetLookDirection::bpp__RandomLookYaw__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SetStopAnims
// 0x0028 (0x0028 - 0x0000)
struct Human_Male_AnimBP_C_SetStopAnims final
{
public:
	class UAnimSequence*                          bpp__Anim_A__pf;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__Anim_A_Additive__pf;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__Anim_B__pf;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__Anim_B_Additive__pf;                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__BlendValue__pf;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Human_Male_AnimBP_C_SetStopAnims) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_SetStopAnims");
static_assert(sizeof(Human_Male_AnimBP_C_SetStopAnims) == 0x000028, "Wrong size on Human_Male_AnimBP_C_SetStopAnims");
static_assert(offsetof(Human_Male_AnimBP_C_SetStopAnims, bpp__Anim_A__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SetStopAnims::bpp__Anim_A__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetStopAnims, bpp__Anim_A_Additive__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SetStopAnims::bpp__Anim_A_Additive__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetStopAnims, bpp__Anim_B__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_SetStopAnims::bpp__Anim_B__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetStopAnims, bpp__Anim_B_Additive__pf) == 0x000018, "Member 'Human_Male_AnimBP_C_SetStopAnims::bpp__Anim_B_Additive__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetStopAnims, bpp__BlendValue__pf) == 0x000020, "Member 'Human_Male_AnimBP_C_SetStopAnims::bpp__BlendValue__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SetUnarmedRunBaseSpeedVariables
// 0x000C (0x000C - 0x0000)
struct Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables final
{
public:
	float                                         bpp__RunSpeed__pf;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__RunPlayRateIKPercentageBelow__pf;             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__RunPlayRateIKPercentageAbove__pf;             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables");
static_assert(sizeof(Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables) == 0x00000C, "Wrong size on Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables");
static_assert(offsetof(Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables, bpp__RunSpeed__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables::bpp__RunSpeed__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables, bpp__RunPlayRateIKPercentageBelow__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables::bpp__RunPlayRateIKPercentageBelow__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables, bpp__RunPlayRateIKPercentageAbove__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SetUnarmedRunBaseSpeedVariables::bpp__RunPlayRateIKPercentageAbove__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SetUnarmedWalkBaseSpeedVariables
// 0x000C (0x000C - 0x0000)
struct Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables final
{
public:
	float                                         bpp__WalkSpeed__pf;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__WalkPlayRateIKPercentageBelow__pf;            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bpp__WalkPlayRateIKPercentageAbove__pf;            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables) == 0x000004, "Wrong alignment on Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables");
static_assert(sizeof(Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables) == 0x00000C, "Wrong size on Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables");
static_assert(offsetof(Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables, bpp__WalkSpeed__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables::bpp__WalkSpeed__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables, bpp__WalkPlayRateIKPercentageBelow__pf) == 0x000004, "Member 'Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables::bpp__WalkPlayRateIKPercentageBelow__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables, bpp__WalkPlayRateIKPercentageAbove__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SetUnarmedWalkBaseSpeedVariables::bpp__WalkPlayRateIKPercentageAbove__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SetWeaponAnims
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_SetWeaponAnims final
{
public:
	EBFGAnimation_WeaponPosture                   bpp__WeaponPosture__pf;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SetWeaponAnims) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_SetWeaponAnims");
static_assert(sizeof(Human_Male_AnimBP_C_SetWeaponAnims) == 0x000001, "Wrong size on Human_Male_AnimBP_C_SetWeaponAnims");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnims, bpp__WeaponPosture__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SetWeaponAnims::bpp__WeaponPosture__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.SetWeaponAnimSet
// 0x00F0 (0x00F0 - 0x0000)
struct Human_Male_AnimBP_C_SetWeaponAnimSet final
{
public:
	class UAnimSequence*                          bpp__ForwardWeaponAimRunADD__pf;                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__BackwardWeaponAimRunADD__pf;                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LeftWeaponAimRunADD__pf;                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__RightWeaponAimRunADD__pf;                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__ForwardWeaponAimWalkADD__pf;                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__BackwardWeaponAimWalkADD__pf;                 // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__LeftWeaponAimWalkADD__pf;                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__RightWeaponAimWalkADD__pf;                    // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__ForwardWeaponRunADD__pf;                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__ForwardWeaponWalkADD__pf;                     // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__ForwardWeaponHuntRunADD__pf;                  // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__ForwardWeaponHuntWalkADD__pf;                 // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__ForwardWeaponAimRun__pf;                      // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__BackwardWeaponAimRun__pf;                     // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__LeftWeaponAimRun__pf;                         // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__RightWeaponAimRun__pf;                        // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__ForwardWeaponAimWalk__pf;                     // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__BackwardWeaponAimWalk__pf;                    // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__LeftWeaponAimWalk__pf;                        // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__RightWeaponAimWalk__pf;                       // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__ForwardWeaponRun__pf;                         // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__ForwardWeaponWalk__pf;                        // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__ForwardWeaponHuntRun__pf;                     // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            bpp__ForwardWeaponHuntWalk__pf;                    // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__StandADD__pf;                                 // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__StandAimADD__pf;                              // 0x00C8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__StandHuntADD__pf;                             // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__Stand__pf;                                    // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__StandAim__pf;                                 // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          bpp__StandHunt__pf;                                // 0x00E8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_SetWeaponAnimSet) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_SetWeaponAnimSet");
static_assert(sizeof(Human_Male_AnimBP_C_SetWeaponAnimSet) == 0x0000F0, "Wrong size on Human_Male_AnimBP_C_SetWeaponAnimSet");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponAimRunADD__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponAimRunADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__BackwardWeaponAimRunADD__pf) == 0x000008, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__BackwardWeaponAimRunADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__LeftWeaponAimRunADD__pf) == 0x000010, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__LeftWeaponAimRunADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__RightWeaponAimRunADD__pf) == 0x000018, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__RightWeaponAimRunADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponAimWalkADD__pf) == 0x000020, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponAimWalkADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__BackwardWeaponAimWalkADD__pf) == 0x000028, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__BackwardWeaponAimWalkADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__LeftWeaponAimWalkADD__pf) == 0x000030, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__LeftWeaponAimWalkADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__RightWeaponAimWalkADD__pf) == 0x000038, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__RightWeaponAimWalkADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponRunADD__pf) == 0x000040, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponRunADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponWalkADD__pf) == 0x000048, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponWalkADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponHuntRunADD__pf) == 0x000050, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponHuntRunADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponHuntWalkADD__pf) == 0x000058, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponHuntWalkADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponAimRun__pf) == 0x000060, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponAimRun__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__BackwardWeaponAimRun__pf) == 0x000068, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__BackwardWeaponAimRun__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__LeftWeaponAimRun__pf) == 0x000070, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__LeftWeaponAimRun__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__RightWeaponAimRun__pf) == 0x000078, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__RightWeaponAimRun__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponAimWalk__pf) == 0x000080, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponAimWalk__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__BackwardWeaponAimWalk__pf) == 0x000088, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__BackwardWeaponAimWalk__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__LeftWeaponAimWalk__pf) == 0x000090, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__LeftWeaponAimWalk__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__RightWeaponAimWalk__pf) == 0x000098, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__RightWeaponAimWalk__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponRun__pf) == 0x0000A0, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponRun__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponWalk__pf) == 0x0000A8, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponWalk__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponHuntRun__pf) == 0x0000B0, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponHuntRun__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__ForwardWeaponHuntWalk__pf) == 0x0000B8, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__ForwardWeaponHuntWalk__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__StandADD__pf) == 0x0000C0, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__StandADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__StandAimADD__pf) == 0x0000C8, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__StandAimADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__StandHuntADD__pf) == 0x0000D0, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__StandHuntADD__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__Stand__pf) == 0x0000D8, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__Stand__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__StandAim__pf) == 0x0000E0, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__StandAim__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_SetWeaponAnimSet, bpp__StandHunt__pf) == 0x0000E8, "Member 'Human_Male_AnimBP_C_SetWeaponAnimSet::bpp__StandHunt__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.ShouldLookAtPlayer
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_ShouldLookAtPlayer final
{
public:
	bool                                          bpp__LookAtPlayer__pf;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_ShouldLookAtPlayer) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_ShouldLookAtPlayer");
static_assert(sizeof(Human_Male_AnimBP_C_ShouldLookAtPlayer) == 0x000001, "Wrong size on Human_Male_AnimBP_C_ShouldLookAtPlayer");
static_assert(offsetof(Human_Male_AnimBP_C_ShouldLookAtPlayer, bpp__LookAtPlayer__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_ShouldLookAtPlayer::bpp__LookAtPlayer__pf' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.StandUpStarted
// 0x0040 (0x0040 - 0x0000)
struct Human_Male_AnimBP_C_StandUpStarted final
{
public:
	bool                                          bpp___bIsFaceDown__pf;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSnapshot                          bpp___oPoseSnapshot__pf__const;                    // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_StandUpStarted) == 0x000008, "Wrong alignment on Human_Male_AnimBP_C_StandUpStarted");
static_assert(sizeof(Human_Male_AnimBP_C_StandUpStarted) == 0x000040, "Wrong size on Human_Male_AnimBP_C_StandUpStarted");
static_assert(offsetof(Human_Male_AnimBP_C_StandUpStarted, bpp___bIsFaceDown__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_StandUpStarted::bpp___bIsFaceDown__pf' has a wrong offset!");
static_assert(offsetof(Human_Male_AnimBP_C_StandUpStarted, bpp___oPoseSnapshot__pf__const) == 0x000008, "Member 'Human_Male_AnimBP_C_StandUpStarted::bpp___oPoseSnapshot__pf__const' has a wrong offset!");

// Function Human_Male_AnimBP.Human_Male_AnimBP_C.WasPreviouslyRunning?
// 0x0001 (0x0001 - 0x0000)
struct Human_Male_AnimBP_C_WasPreviouslyRunning_ final
{
public:
	bool                                          bpp__WasPreviouslyRunning__pf;                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Human_Male_AnimBP_C_WasPreviouslyRunning_) == 0x000001, "Wrong alignment on Human_Male_AnimBP_C_WasPreviouslyRunning_");
static_assert(sizeof(Human_Male_AnimBP_C_WasPreviouslyRunning_) == 0x000001, "Wrong size on Human_Male_AnimBP_C_WasPreviouslyRunning_");
static_assert(offsetof(Human_Male_AnimBP_C_WasPreviouslyRunning_, bpp__WasPreviouslyRunning__pf) == 0x000000, "Member 'Human_Male_AnimBP_C_WasPreviouslyRunning_::bpp__WasPreviouslyRunning__pf' has a wrong offset!");

}

