#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DeathRayBeam

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BFGCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DeathRayBeam.BP_DeathRayBeam_C
// 0x00C0 (0x0708 - 0x0648)
class ABP_DeathRayBeam_C final : public ABFGProjectile_BeamDeathray
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0648(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               PFX_DeathRay_muzzle_loop;                          // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Charge_effect;                                     // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Deathray_Base;                               // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BurningGroundActorComponent_C*      BP_RTHistoryWriter;                                // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_target_laser;                           // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_target;                                 // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight_source;                                 // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PFX_DeathRay_hit_loop_01;                          // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_DeathRay_Beam_1;                                // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_TargetLight_intensity_A8FDBACC4ED91FA78295AE92A0BBC412; // 0x06A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_A8FDBACC4ED91FA78295AE92A0BBC412; // 0x06AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AD[0x3];                                      // 0x06AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dyn_beam_material_1;                               // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LaserPointer_active;                               // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Target_light_offset;                               // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Light_offset_laser;                         // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_TargetLight_intensity;                         // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Last_TargetLight_position;                         // 0x06D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DC[0x4];                                      // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackComponent*                ForceFeedbackEffect_Beam;                          // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalHitLocation;                                  // 0x06E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4[0x4];                                      // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComponent;                                      // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP__deathRay_water_hit_C*              WaterHitActor;                                     // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DeathRayBeam(int32 EntryPoint);
	void UpdateBeamOnOcean(const struct FVector& _vTargetLocation, bool _bHitTarget, const struct FVector& _vImpactNormal);
	void OnWeaponEquipStateChanged(class ABFGWeapon* _pWeapon, bool _bEnabled);
	void OnBeamDelayStarted(const struct FVector& _vTargetLocation, bool _bHitTarget, bool _bHitEnvironment, const struct FVector& _vImpactNormal);
	void OnHitFoliage(const struct FHitResult& _oHitResult);
	void OnTickDeadzone(const struct FBFGDeathrayZoneData& _oDeadzone);
	void UpdateBeamWhileInactive(const struct FVector& _vTargetLocation, bool _bHitTarget, const struct FVector& _vImpactNormal);
	void UpdateBeam(const struct FVector& _vTargetLocation, bool _bHitTarget, const struct FVector& _vImpactNormal);
	void StopBeam();
	void StartBeam(const struct FVector& _vTargetLocation, bool _bHitTarget, bool _bHitEnvironment, const struct FVector& _vImpactNormal);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void HandleUpdateBeamVFX(const struct FVector& Target, const struct FVector& Source);
	void HandleStartBeam(const struct FVector& InTargetLocation);
	void HandleStopBeam();
	void HandleUpdateBeam(const struct FVector& InTargetLocation, bool InHitTarget, const struct FVector& InImpactNormal, float BurningDuration);
	void HandleBeamWhenInactive(const struct FVector& InTargetLocation, const struct FVector& InTargetNormal);
	void HitWater(const struct FHitResult& HitRes);
	void HitOcean(const struct FHitResult& HitRes);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DeathRayBeam_C">();
	}
	static class ABP_DeathRayBeam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DeathRayBeam_C>();
	}
};
static_assert(alignof(ABP_DeathRayBeam_C) == 0x000008, "Wrong alignment on ABP_DeathRayBeam_C");
static_assert(sizeof(ABP_DeathRayBeam_C) == 0x000708, "Wrong size on ABP_DeathRayBeam_C");
static_assert(offsetof(ABP_DeathRayBeam_C, UberGraphFrame) == 0x000648, "Member 'ABP_DeathRayBeam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, PFX_DeathRay_muzzle_loop) == 0x000650, "Member 'ABP_DeathRayBeam_C::PFX_DeathRay_muzzle_loop' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Charge_effect) == 0x000658, "Member 'ABP_DeathRayBeam_C::Charge_effect' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Audio_Deathray_Base) == 0x000660, "Member 'ABP_DeathRayBeam_C::Audio_Deathray_Base' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, BP_RTHistoryWriter) == 0x000668, "Member 'ABP_DeathRayBeam_C::BP_RTHistoryWriter' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, PointLight_target_laser) == 0x000670, "Member 'ABP_DeathRayBeam_C::PointLight_target_laser' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, PointLight_target) == 0x000678, "Member 'ABP_DeathRayBeam_C::PointLight_target' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, PointLight_source) == 0x000680, "Member 'ABP_DeathRayBeam_C::PointLight_source' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, PFX_DeathRay_hit_loop_01) == 0x000688, "Member 'ABP_DeathRayBeam_C::PFX_DeathRay_hit_loop_01' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, SM_DeathRay_Beam_1) == 0x000690, "Member 'ABP_DeathRayBeam_C::SM_DeathRay_Beam_1' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Arrow) == 0x000698, "Member 'ABP_DeathRayBeam_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, DefaultSceneRoot) == 0x0006A0, "Member 'ABP_DeathRayBeam_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Timeline_0_TargetLight_intensity_A8FDBACC4ED91FA78295AE92A0BBC412) == 0x0006A8, "Member 'ABP_DeathRayBeam_C::Timeline_0_TargetLight_intensity_A8FDBACC4ED91FA78295AE92A0BBC412' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Timeline_0__Direction_A8FDBACC4ED91FA78295AE92A0BBC412) == 0x0006AC, "Member 'ABP_DeathRayBeam_C::Timeline_0__Direction_A8FDBACC4ED91FA78295AE92A0BBC412' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Timeline_0) == 0x0006B0, "Member 'ABP_DeathRayBeam_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Dyn_beam_material_1) == 0x0006B8, "Member 'ABP_DeathRayBeam_C::Dyn_beam_material_1' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, LaserPointer_active) == 0x0006C0, "Member 'ABP_DeathRayBeam_C::LaserPointer_active' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Target_light_offset) == 0x0006C4, "Member 'ABP_DeathRayBeam_C::Target_light_offset' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Target_Light_offset_laser) == 0x0006C8, "Member 'ABP_DeathRayBeam_C::Target_Light_offset_laser' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Max_TargetLight_intensity) == 0x0006CC, "Member 'ABP_DeathRayBeam_C::Max_TargetLight_intensity' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, Last_TargetLight_position) == 0x0006D0, "Member 'ABP_DeathRayBeam_C::Last_TargetLight_position' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, ForceFeedbackEffect_Beam) == 0x0006E0, "Member 'ABP_DeathRayBeam_C::ForceFeedbackEffect_Beam' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, LocalHitLocation) == 0x0006E8, "Member 'ABP_DeathRayBeam_C::LocalHitLocation' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, HitComponent) == 0x0006F8, "Member 'ABP_DeathRayBeam_C::HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_DeathRayBeam_C, WaterHitActor) == 0x000700, "Member 'ABP_DeathRayBeam_C::WaterHitActor' has a wrong offset!");

}

