#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ATSpecialTrack

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "AT_structs.hpp"


namespace SDK
{

// Enum ATSpecialTrack.ESECTION_SE_TYPE
// NumValues: 0x0008
enum class ESECTION_SE_TYPE : uint8
{
	USE_COMMON_SE                            = 0,
	USE_FIELD_SE                             = 1,
	USE_BATTLE_SE                            = 2,
	USE_MINIGAME_SE                          = 3,
	USE_AMBIENT_SE                           = 4,
	USE_TCG_SE                               = 5,
	ESE_TYPE_MAX                             = 6,
	ESECTION_SE_MAX                          = 7,
};

// Enum ATSpecialTrack.ESECTION_CMN_SE_TYPE
// NumValues: 0x0004
enum class ESECTION_CMN_SE_TYPE : uint8
{
	USE_SND_CODE                             = 0,
	USE_SND_CODE_CMN                         = 1,
	ECMNSE_TYPE_MAX                          = 2,
	ESECTION_CMN_SE_MAX                      = 3,
};

// Enum ATSpecialTrack.EFUNC_TYPE
// NumValues: 0x000D
enum class EFUNC_TYPE : uint8
{
	FUNC_TYPE                                = 0,
	BGM_PLAY                                 = 1,
	BGM_STOP                                 = 2,
	SE_PLAY                                  = 3,
	SE_STOP                                  = 4,
	VOICE_PLAY                               = 5,
	VOLUME_MAIN                              = 6,
	VOLUME_BGM                               = 7,
	VOLUME_SE                                = 8,
	VOLUME_VOICE                             = 9,
	VOLUME_MOVIE                             = 10,
	EFUNC_TYPE_MAX                           = 11,
	EFUNC_MAX                                = 12,
};

// ScriptStruct ATSpecialTrack.DirectionKey
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDirectionKey final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionKey) == 0x000008, "Wrong alignment on FDirectionKey");
static_assert(sizeof(FDirectionKey) == 0x000008, "Wrong size on FDirectionKey");
static_assert(offsetof(FDirectionKey, EventName) == 0x000000, "Member 'FDirectionKey::EventName' has a wrong offset!");

// ScriptStruct ATSpecialTrack.MovieSceneDirectionSectionData
// 0x0088 (0x0090 - 0x0008)
struct FMovieSceneDirectionSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FDirectionKey>                  KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x68];                                      // 0x0028(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneDirectionSectionData) == 0x000008, "Wrong alignment on FMovieSceneDirectionSectionData");
static_assert(sizeof(FMovieSceneDirectionSectionData) == 0x000090, "Wrong size on FMovieSceneDirectionSectionData");
static_assert(offsetof(FMovieSceneDirectionSectionData, Times) == 0x000008, "Member 'FMovieSceneDirectionSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneDirectionSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneDirectionSectionData::KeyValues' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneNearClipSectionTemplate
// 0x00A0 (0x00C0 - 0x0020)
struct FATMovieSceneNearClipSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneFloatChannel                FloatCurve;                                        // 0x0020(0x00A0)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneNearClipSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneNearClipSectionTemplate");
static_assert(sizeof(FATMovieSceneNearClipSectionTemplate) == 0x0000C0, "Wrong size on FATMovieSceneNearClipSectionTemplate");
static_assert(offsetof(FATMovieSceneNearClipSectionTemplate, FloatCurve) == 0x000020, "Member 'FATMovieSceneNearClipSectionTemplate::FloatCurve' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneCharaIntroductionSectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FATMovieSceneCharaIntroductionSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CharacterID;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PopularNameID;                                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              DispPos;                                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsLargeSize;                                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATMovieSceneCharaIntroductionSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneCharaIntroductionSectionTemplate");
static_assert(sizeof(FATMovieSceneCharaIntroductionSectionTemplate) == 0x000048, "Wrong size on FATMovieSceneCharaIntroductionSectionTemplate");
static_assert(offsetof(FATMovieSceneCharaIntroductionSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneCharaIntroductionSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneCharaIntroductionSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneCharaIntroductionSectionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneCharaIntroductionSectionTemplate, CharacterID) == 0x000028, "Member 'FATMovieSceneCharaIntroductionSectionTemplate::CharacterID' has a wrong offset!");
static_assert(offsetof(FATMovieSceneCharaIntroductionSectionTemplate, PopularNameID) == 0x000030, "Member 'FATMovieSceneCharaIntroductionSectionTemplate::PopularNameID' has a wrong offset!");
static_assert(offsetof(FATMovieSceneCharaIntroductionSectionTemplate, DispPos) == 0x000038, "Member 'FATMovieSceneCharaIntroductionSectionTemplate::DispPos' has a wrong offset!");
static_assert(offsetof(FATMovieSceneCharaIntroductionSectionTemplate, IsLargeSize) == 0x000040, "Member 'FATMovieSceneCharaIntroductionSectionTemplate::IsLargeSize' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneDirectionSectionTemplate
// 0x0090 (0x00B0 - 0x0020)
struct FATMovieSceneDirectionSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneDirectionSectionData        DirectionsData;                                    // 0x0020(0x0090)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneDirectionSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneDirectionSectionTemplate");
static_assert(sizeof(FATMovieSceneDirectionSectionTemplate) == 0x0000B0, "Wrong size on FATMovieSceneDirectionSectionTemplate");
static_assert(offsetof(FATMovieSceneDirectionSectionTemplate, DirectionsData) == 0x000020, "Member 'FATMovieSceneDirectionSectionTemplate::DirectionsData' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneNextPreviewDetailData
// 0x0020 (0x0020 - 0x0000)
struct FATMovieSceneNextPreviewDetailData final
{
public:
	class FString                                 HeaderMessageId;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubjectMessageId;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATMovieSceneNextPreviewDetailData) == 0x000008, "Wrong alignment on FATMovieSceneNextPreviewDetailData");
static_assert(sizeof(FATMovieSceneNextPreviewDetailData) == 0x000020, "Wrong size on FATMovieSceneNextPreviewDetailData");
static_assert(offsetof(FATMovieSceneNextPreviewDetailData, HeaderMessageId) == 0x000000, "Member 'FATMovieSceneNextPreviewDetailData::HeaderMessageId' has a wrong offset!");
static_assert(offsetof(FATMovieSceneNextPreviewDetailData, SubjectMessageId) == 0x000010, "Member 'FATMovieSceneNextPreviewDetailData::SubjectMessageId' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneFutureVisionTemplate
// 0x0048 (0x0068 - 0x0020)
struct FATMovieSceneFutureVisionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AATFutureVisionTrack>       FutureVisionTrackClass;                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UTexture2D>>      PictureTexturePath;                                // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	int32                                         OmenCount;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FadeInTime;                                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 DrawPictureTime;                                   // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SubTitleID;                                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrossFadeTime;                                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATMovieSceneFutureVisionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneFutureVisionTemplate");
static_assert(sizeof(FATMovieSceneFutureVisionTemplate) == 0x000068, "Wrong size on FATMovieSceneFutureVisionTemplate");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneFutureVisionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneFutureVisionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, FutureVisionTrackClass) == 0x000028, "Member 'FATMovieSceneFutureVisionTemplate::FutureVisionTrackClass' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, PictureTexturePath) == 0x000030, "Member 'FATMovieSceneFutureVisionTemplate::PictureTexturePath' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, OmenCount) == 0x000040, "Member 'FATMovieSceneFutureVisionTemplate::OmenCount' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, FadeInTime) == 0x000044, "Member 'FATMovieSceneFutureVisionTemplate::FadeInTime' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, DrawPictureTime) == 0x000048, "Member 'FATMovieSceneFutureVisionTemplate::DrawPictureTime' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, SubTitleID) == 0x000058, "Member 'FATMovieSceneFutureVisionTemplate::SubTitleID' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFutureVisionTemplate, CrossFadeTime) == 0x000060, "Member 'FATMovieSceneFutureVisionTemplate::CrossFadeTime' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneFadeSectionTemplate
// 0x0010 (0x0030 - 0x0020)
struct FATMovieSceneFadeSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	int32                                         SectionStartTime;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SectionEndTime;                                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EUMG_FADE_TYPE                                FadeType;                                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EUMG_FADE_COLOR                               FadeColor;                                         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bImmidiate;                                        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsFirstSection;                                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsNeedFirstTickEvaluate;                           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsFlashBackFade;                                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATMovieSceneFadeSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneFadeSectionTemplate");
static_assert(sizeof(FATMovieSceneFadeSectionTemplate) == 0x000030, "Wrong size on FATMovieSceneFadeSectionTemplate");
static_assert(offsetof(FATMovieSceneFadeSectionTemplate, SectionStartTime) == 0x000020, "Member 'FATMovieSceneFadeSectionTemplate::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFadeSectionTemplate, SectionEndTime) == 0x000024, "Member 'FATMovieSceneFadeSectionTemplate::SectionEndTime' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFadeSectionTemplate, FadeType) == 0x000028, "Member 'FATMovieSceneFadeSectionTemplate::FadeType' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFadeSectionTemplate, FadeColor) == 0x000029, "Member 'FATMovieSceneFadeSectionTemplate::FadeColor' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFadeSectionTemplate, bImmidiate) == 0x00002A, "Member 'FATMovieSceneFadeSectionTemplate::bImmidiate' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFadeSectionTemplate, IsFirstSection) == 0x00002B, "Member 'FATMovieSceneFadeSectionTemplate::IsFirstSection' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFadeSectionTemplate, IsNeedFirstTickEvaluate) == 0x00002C, "Member 'FATMovieSceneFadeSectionTemplate::IsNeedFirstTickEvaluate' has a wrong offset!");
static_assert(offsetof(FATMovieSceneFadeSectionTemplate, IsFlashBackFade) == 0x00002D, "Member 'FATMovieSceneFadeSectionTemplate::IsFlashBackFade' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneForcedLodSectionTemplate
// 0x0010 (0x0030 - 0x0020)
struct FATMovieSceneForcedLodSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ForcedLodModel;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetType;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneForcedLodSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneForcedLodSectionTemplate");
static_assert(sizeof(FATMovieSceneForcedLodSectionTemplate) == 0x000030, "Wrong size on FATMovieSceneForcedLodSectionTemplate");
static_assert(offsetof(FATMovieSceneForcedLodSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneForcedLodSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneForcedLodSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneForcedLodSectionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneForcedLodSectionTemplate, ForcedLodModel) == 0x000028, "Member 'FATMovieSceneForcedLodSectionTemplate::ForcedLodModel' has a wrong offset!");
static_assert(offsetof(FATMovieSceneForcedLodSectionTemplate, TargetType) == 0x00002C, "Member 'FATMovieSceneForcedLodSectionTemplate::TargetType' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneLipSyncSectionTemplate
// 0x0018 (0x0038 - 0x0020)
struct FATMovieSceneLipSyncSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubTitleID;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlendSpace*                            BlendSpaceAsset;                                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneLipSyncSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneLipSyncSectionTemplate");
static_assert(sizeof(FATMovieSceneLipSyncSectionTemplate) == 0x000038, "Wrong size on FATMovieSceneLipSyncSectionTemplate");
static_assert(offsetof(FATMovieSceneLipSyncSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneLipSyncSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneLipSyncSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneLipSyncSectionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneLipSyncSectionTemplate, SubTitleID) == 0x000028, "Member 'FATMovieSceneLipSyncSectionTemplate::SubTitleID' has a wrong offset!");
static_assert(offsetof(FATMovieSceneLipSyncSectionTemplate, BlendSpaceAsset) == 0x000030, "Member 'FATMovieSceneLipSyncSectionTemplate::BlendSpaceAsset' has a wrong offset!");

// ScriptStruct ATSpecialTrack.DemoLocationInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDemoLocationInfo final
{
public:
	class FName                                   LocationID;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDemoLocationInfo) == 0x000008, "Wrong alignment on FDemoLocationInfo");
static_assert(sizeof(FDemoLocationInfo) == 0x000018, "Wrong size on FDemoLocationInfo");
static_assert(offsetof(FDemoLocationInfo, LocationID) == 0x000000, "Member 'FDemoLocationInfo::LocationID' has a wrong offset!");
static_assert(offsetof(FDemoLocationInfo, Position) == 0x000008, "Member 'FDemoLocationInfo::Position' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneLocationSectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FATMovieSceneLocationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AreaID;                                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDEMO_TYPE                                    DemoType;                                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDemoLocationInfo>              LocationInfo;                                      // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneLocationSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneLocationSectionTemplate");
static_assert(sizeof(FATMovieSceneLocationSectionTemplate) == 0x000048, "Wrong size on FATMovieSceneLocationSectionTemplate");
static_assert(offsetof(FATMovieSceneLocationSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneLocationSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneLocationSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneLocationSectionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneLocationSectionTemplate, AreaID) == 0x000028, "Member 'FATMovieSceneLocationSectionTemplate::AreaID' has a wrong offset!");
static_assert(offsetof(FATMovieSceneLocationSectionTemplate, DemoType) == 0x000030, "Member 'FATMovieSceneLocationSectionTemplate::DemoType' has a wrong offset!");
static_assert(offsetof(FATMovieSceneLocationSectionTemplate, LocationInfo) == 0x000038, "Member 'FATMovieSceneLocationSectionTemplate::LocationInfo' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneMovieSectionTemplate
// 0x0008 (0x0028 - 0x0020)
struct FATMovieSceneMovieSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	int32                                         SectionStartTime;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SectionEndTime;                                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneMovieSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneMovieSectionTemplate");
static_assert(sizeof(FATMovieSceneMovieSectionTemplate) == 0x000028, "Wrong size on FATMovieSceneMovieSectionTemplate");
static_assert(offsetof(FATMovieSceneMovieSectionTemplate, SectionStartTime) == 0x000020, "Member 'FATMovieSceneMovieSectionTemplate::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FATMovieSceneMovieSectionTemplate, SectionEndTime) == 0x000024, "Member 'FATMovieSceneMovieSectionTemplate::SectionEndTime' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneNextPreviewTitleData
// 0x0010 (0x0010 - 0x0000)
struct FATMovieSceneNextPreviewTitleData final
{
public:
	class FString                                 TitleMessageId;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATMovieSceneNextPreviewTitleData) == 0x000008, "Wrong alignment on FATMovieSceneNextPreviewTitleData");
static_assert(sizeof(FATMovieSceneNextPreviewTitleData) == 0x000010, "Wrong size on FATMovieSceneNextPreviewTitleData");
static_assert(offsetof(FATMovieSceneNextPreviewTitleData, TitleMessageId) == 0x000000, "Member 'FATMovieSceneNextPreviewTitleData::TitleMessageId' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneNextPreviewSectionTemplate
// 0x0048 (0x0068 - 0x0020)
struct FATMovieSceneNextPreviewSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTitle;                                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TitleMessageId;                                    // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bDetail;                                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DetailHeaderMessageId;                             // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DetailSubjectMessageId;                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneNextPreviewSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneNextPreviewSectionTemplate");
static_assert(sizeof(FATMovieSceneNextPreviewSectionTemplate) == 0x000068, "Wrong size on FATMovieSceneNextPreviewSectionTemplate");
static_assert(offsetof(FATMovieSceneNextPreviewSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneNextPreviewSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneNextPreviewSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneNextPreviewSectionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneNextPreviewSectionTemplate, bTitle) == 0x000028, "Member 'FATMovieSceneNextPreviewSectionTemplate::bTitle' has a wrong offset!");
static_assert(offsetof(FATMovieSceneNextPreviewSectionTemplate, TitleMessageId) == 0x000030, "Member 'FATMovieSceneNextPreviewSectionTemplate::TitleMessageId' has a wrong offset!");
static_assert(offsetof(FATMovieSceneNextPreviewSectionTemplate, bDetail) == 0x000040, "Member 'FATMovieSceneNextPreviewSectionTemplate::bDetail' has a wrong offset!");
static_assert(offsetof(FATMovieSceneNextPreviewSectionTemplate, DetailHeaderMessageId) == 0x000048, "Member 'FATMovieSceneNextPreviewSectionTemplate::DetailHeaderMessageId' has a wrong offset!");
static_assert(offsetof(FATMovieSceneNextPreviewSectionTemplate, DetailSubjectMessageId) == 0x000058, "Member 'FATMovieSceneNextPreviewSectionTemplate::DetailSubjectMessageId' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneThankYouSectionTemplate
// 0x0008 (0x0028 - 0x0020)
struct FATMovieSceneThankYouSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneThankYouSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneThankYouSectionTemplate");
static_assert(sizeof(FATMovieSceneThankYouSectionTemplate) == 0x000028, "Wrong size on FATMovieSceneThankYouSectionTemplate");
static_assert(offsetof(FATMovieSceneThankYouSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneThankYouSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneThankYouSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneThankYouSectionTemplate::SectionEndFrame' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneQuestMainLogoSectionTemplate
// 0x0008 (0x0028 - 0x0020)
struct FATMovieSceneQuestMainLogoSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneQuestMainLogoSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneQuestMainLogoSectionTemplate");
static_assert(sizeof(FATMovieSceneQuestMainLogoSectionTemplate) == 0x000028, "Wrong size on FATMovieSceneQuestMainLogoSectionTemplate");
static_assert(offsetof(FATMovieSceneQuestMainLogoSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneQuestMainLogoSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneQuestMainLogoSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneQuestMainLogoSectionTemplate::SectionEndFrame' has a wrong offset!");

// ScriptStruct ATSpecialTrack.SoundVoiceOptionData
// 0x0002 (0x0002 - 0x0000)
struct FSoundVoiceOptionData final
{
public:
	EPlBattleVoice_ID                             Code;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               Charatype;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundVoiceOptionData) == 0x000001, "Wrong alignment on FSoundVoiceOptionData");
static_assert(sizeof(FSoundVoiceOptionData) == 0x000002, "Wrong size on FSoundVoiceOptionData");
static_assert(offsetof(FSoundVoiceOptionData, Code) == 0x000000, "Member 'FSoundVoiceOptionData::Code' has a wrong offset!");
static_assert(offsetof(FSoundVoiceOptionData, Charatype) == 0x000001, "Member 'FSoundVoiceOptionData::Charatype' has a wrong offset!");

// ScriptStruct ATSpecialTrack.SoundBgmOptionData
// 0x0008 (0x0008 - 0x0000)
struct FSoundBgmOptionData final
{
public:
	EBgmCode                                      bgmID;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Channel;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundBgmOptionData) == 0x000004, "Wrong alignment on FSoundBgmOptionData");
static_assert(sizeof(FSoundBgmOptionData) == 0x000008, "Wrong size on FSoundBgmOptionData");
static_assert(offsetof(FSoundBgmOptionData, bgmID) == 0x000000, "Member 'FSoundBgmOptionData::bgmID' has a wrong offset!");
static_assert(offsetof(FSoundBgmOptionData, Channel) == 0x000004, "Member 'FSoundBgmOptionData::Channel' has a wrong offset!");

// ScriptStruct ATSpecialTrack.SoundSeOptionData
// 0x000C (0x000C - 0x0000)
struct FSoundSeOptionData final
{
public:
	ESECTION_SE_TYPE                              SeType;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESndCodeCmn                                   CommonCode;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESndCodeField                                 FieldCode;                                         // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESndCodeBattle                                battleCode;                                        // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESndCodeMinigame                              MinigameCode;                                      // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESndCodeAmbient                               AmbientCode;                                       // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESndCodeTcg                                   TcgCode;                                           // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Pitch;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundSeOptionData) == 0x000004, "Wrong alignment on FSoundSeOptionData");
static_assert(sizeof(FSoundSeOptionData) == 0x00000C, "Wrong size on FSoundSeOptionData");
static_assert(offsetof(FSoundSeOptionData, SeType) == 0x000000, "Member 'FSoundSeOptionData::SeType' has a wrong offset!");
static_assert(offsetof(FSoundSeOptionData, CommonCode) == 0x000001, "Member 'FSoundSeOptionData::CommonCode' has a wrong offset!");
static_assert(offsetof(FSoundSeOptionData, FieldCode) == 0x000002, "Member 'FSoundSeOptionData::FieldCode' has a wrong offset!");
static_assert(offsetof(FSoundSeOptionData, battleCode) == 0x000003, "Member 'FSoundSeOptionData::battleCode' has a wrong offset!");
static_assert(offsetof(FSoundSeOptionData, MinigameCode) == 0x000004, "Member 'FSoundSeOptionData::MinigameCode' has a wrong offset!");
static_assert(offsetof(FSoundSeOptionData, AmbientCode) == 0x000005, "Member 'FSoundSeOptionData::AmbientCode' has a wrong offset!");
static_assert(offsetof(FSoundSeOptionData, TcgCode) == 0x000006, "Member 'FSoundSeOptionData::TcgCode' has a wrong offset!");
static_assert(offsetof(FSoundSeOptionData, Pitch) == 0x000008, "Member 'FSoundSeOptionData::Pitch' has a wrong offset!");

// ScriptStruct ATSpecialTrack.DemoSoundInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDemoSoundInfo final
{
public:
	class FName                                   LocationID;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDemoSoundInfo) == 0x000008, "Wrong alignment on FDemoSoundInfo");
static_assert(sizeof(FDemoSoundInfo) == 0x000018, "Wrong size on FDemoSoundInfo");
static_assert(offsetof(FDemoSoundInfo, LocationID) == 0x000000, "Member 'FDemoSoundInfo::LocationID' has a wrong offset!");
static_assert(offsetof(FDemoSoundInfo, Position) == 0x000008, "Member 'FDemoSoundInfo::Position' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneSoundSectionTemplate
// 0x0020 (0x0040 - 0x0020)
struct FATMovieSceneSoundSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartTime;                                  // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndTime;                                    // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFUNC_TYPE                                    FuncType;                                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AreaID;                                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UATMovieSceneSoundSection*              MovSection;                                        // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneSoundSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneSoundSectionTemplate");
static_assert(sizeof(FATMovieSceneSoundSectionTemplate) == 0x000040, "Wrong size on FATMovieSceneSoundSectionTemplate");
static_assert(offsetof(FATMovieSceneSoundSectionTemplate, SectionStartTime) == 0x000020, "Member 'FATMovieSceneSoundSectionTemplate::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSoundSectionTemplate, SectionEndTime) == 0x000024, "Member 'FATMovieSceneSoundSectionTemplate::SectionEndTime' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSoundSectionTemplate, FuncType) == 0x000028, "Member 'FATMovieSceneSoundSectionTemplate::FuncType' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSoundSectionTemplate, AreaID) == 0x000030, "Member 'FATMovieSceneSoundSectionTemplate::AreaID' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSoundSectionTemplate, MovSection) == 0x000038, "Member 'FATMovieSceneSoundSectionTemplate::MovSection' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneSubtitleSectionTemplate
// 0x0020 (0x0040 - 0x0020)
struct FATMovieSceneSubtitleSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableSubtitle;                                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SubTitleID;                                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bContinue;                                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOnlyVoice;                                        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetCh;                                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneSubtitleSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneSubtitleSectionTemplate");
static_assert(sizeof(FATMovieSceneSubtitleSectionTemplate) == 0x000040, "Wrong size on FATMovieSceneSubtitleSectionTemplate");
static_assert(offsetof(FATMovieSceneSubtitleSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneSubtitleSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSubtitleSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneSubtitleSectionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSubtitleSectionTemplate, bEnableSubtitle) == 0x000028, "Member 'FATMovieSceneSubtitleSectionTemplate::bEnableSubtitle' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSubtitleSectionTemplate, SubTitleID) == 0x000030, "Member 'FATMovieSceneSubtitleSectionTemplate::SubTitleID' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSubtitleSectionTemplate, bContinue) == 0x000038, "Member 'FATMovieSceneSubtitleSectionTemplate::bContinue' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSubtitleSectionTemplate, bOnlyVoice) == 0x000039, "Member 'FATMovieSceneSubtitleSectionTemplate::bOnlyVoice' has a wrong offset!");
static_assert(offsetof(FATMovieSceneSubtitleSectionTemplate, TargetCh) == 0x00003C, "Member 'FATMovieSceneSubtitleSectionTemplate::TargetCh' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneTelopExSectionTemplate
// 0x0060 (0x0080 - 0x0020)
struct FATMovieSceneTelopExSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTelopInfo                             TelopInfo;                                         // 0x0028(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FTelopInfo                             TelopInfo2;                                        // 0x0050(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
	float                                         TelopScale;                                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATMovieSceneTelopExSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneTelopExSectionTemplate");
static_assert(sizeof(FATMovieSceneTelopExSectionTemplate) == 0x000080, "Wrong size on FATMovieSceneTelopExSectionTemplate");
static_assert(offsetof(FATMovieSceneTelopExSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneTelopExSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneTelopExSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneTelopExSectionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneTelopExSectionTemplate, TelopInfo) == 0x000028, "Member 'FATMovieSceneTelopExSectionTemplate::TelopInfo' has a wrong offset!");
static_assert(offsetof(FATMovieSceneTelopExSectionTemplate, TelopInfo2) == 0x000050, "Member 'FATMovieSceneTelopExSectionTemplate::TelopInfo2' has a wrong offset!");
static_assert(offsetof(FATMovieSceneTelopExSectionTemplate, TelopScale) == 0x000078, "Member 'FATMovieSceneTelopExSectionTemplate::TelopScale' has a wrong offset!");

// ScriptStruct ATSpecialTrack.ATMovieSceneTelopSectionTemplate
// 0x0058 (0x0078 - 0x0020)
struct FATMovieSceneTelopSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FFrameNumber                           SectionStartFrame;                                 // 0x0020(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionEndFrame;                                   // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTelopInfo                             TelopInfo;                                         // 0x0028(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FTelopInfo                             TelopInfo2;                                        // 0x0050(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATMovieSceneTelopSectionTemplate) == 0x000008, "Wrong alignment on FATMovieSceneTelopSectionTemplate");
static_assert(sizeof(FATMovieSceneTelopSectionTemplate) == 0x000078, "Wrong size on FATMovieSceneTelopSectionTemplate");
static_assert(offsetof(FATMovieSceneTelopSectionTemplate, SectionStartFrame) == 0x000020, "Member 'FATMovieSceneTelopSectionTemplate::SectionStartFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneTelopSectionTemplate, SectionEndFrame) == 0x000024, "Member 'FATMovieSceneTelopSectionTemplate::SectionEndFrame' has a wrong offset!");
static_assert(offsetof(FATMovieSceneTelopSectionTemplate, TelopInfo) == 0x000028, "Member 'FATMovieSceneTelopSectionTemplate::TelopInfo' has a wrong offset!");
static_assert(offsetof(FATMovieSceneTelopSectionTemplate, TelopInfo2) == 0x000050, "Member 'FATMovieSceneTelopSectionTemplate::TelopInfo2' has a wrong offset!");

}

