#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AT

#include "Basic.hpp"

#include "AT_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "CFramework_structs.hpp"
#include "ATExt_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK::Params
{

// Function AT.FishPawnCPP.GetEscapeLoopFlg
// 0x0001 (0x0001 - 0x0000)
struct FishPawnCPP_GetEscapeLoopFlg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FishPawnCPP_GetEscapeLoopFlg) == 0x000001, "Wrong alignment on FishPawnCPP_GetEscapeLoopFlg");
static_assert(sizeof(FishPawnCPP_GetEscapeLoopFlg) == 0x000001, "Wrong size on FishPawnCPP_GetEscapeLoopFlg");
static_assert(offsetof(FishPawnCPP_GetEscapeLoopFlg, ReturnValue) == 0x000000, "Member 'FishPawnCPP_GetEscapeLoopFlg::ReturnValue' has a wrong offset!");

// Function AT.FishPawnCPP.GetState
// 0x0001 (0x0001 - 0x0000)
struct FishPawnCPP_GetState final
{
public:
	EFishState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FishPawnCPP_GetState) == 0x000001, "Wrong alignment on FishPawnCPP_GetState");
static_assert(sizeof(FishPawnCPP_GetState) == 0x000001, "Wrong size on FishPawnCPP_GetState");
static_assert(offsetof(FishPawnCPP_GetState, ReturnValue) == 0x000000, "Member 'FishPawnCPP_GetState::ReturnValue' has a wrong offset!");

// Function AT.ATActBase.OnFireProjectile
// 0x0008 (0x0008 - 0x0000)
struct ATActBase_OnFireProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActBase_OnFireProjectile) == 0x000008, "Wrong alignment on ATActBase_OnFireProjectile");
static_assert(sizeof(ATActBase_OnFireProjectile) == 0x000008, "Wrong size on ATActBase_OnFireProjectile");
static_assert(offsetof(ATActBase_OnFireProjectile, InProjectile) == 0x000000, "Member 'ATActBase_OnFireProjectile::InProjectile' has a wrong offset!");

// Function AT.AccessPointBase.FinishedEffect
// 0x0008 (0x0008 - 0x0000)
struct AccessPointBase_FinishedEffect final
{
public:
	class UParticleSystemComponent*               PSysComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccessPointBase_FinishedEffect) == 0x000008, "Wrong alignment on AccessPointBase_FinishedEffect");
static_assert(sizeof(AccessPointBase_FinishedEffect) == 0x000008, "Wrong size on AccessPointBase_FinishedEffect");
static_assert(offsetof(AccessPointBase_FinishedEffect, PSysComp) == 0x000000, "Member 'AccessPointBase_FinishedEffect::PSysComp' has a wrong offset!");

// Function AT.ATUIUserWidget.SetForceTick
// 0x0001 (0x0001 - 0x0000)
struct ATUIUserWidget_SetForceTick final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATUIUserWidget_SetForceTick) == 0x000001, "Wrong alignment on ATUIUserWidget_SetForceTick");
static_assert(sizeof(ATUIUserWidget_SetForceTick) == 0x000001, "Wrong size on ATUIUserWidget_SetForceTick");
static_assert(offsetof(ATUIUserWidget_SetForceTick, IsOn) == 0x000000, "Member 'ATUIUserWidget_SetForceTick::IsOn' has a wrong offset!");

// Function AT.AT_LightTowerEffectComponent.OnQuestTiming
// 0x0010 (0x0010 - 0x0000)
struct AT_LightTowerEffectComponent_OnQuestTiming final
{
public:
	EQUEST_ACTOR_TIMING_TYPE                      Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_LightTowerEffectComponent_OnQuestTiming) == 0x000008, "Wrong alignment on AT_LightTowerEffectComponent_OnQuestTiming");
static_assert(sizeof(AT_LightTowerEffectComponent_OnQuestTiming) == 0x000010, "Wrong size on AT_LightTowerEffectComponent_OnQuestTiming");
static_assert(offsetof(AT_LightTowerEffectComponent_OnQuestTiming, Timing) == 0x000000, "Member 'AT_LightTowerEffectComponent_OnQuestTiming::Timing' has a wrong offset!");
static_assert(offsetof(AT_LightTowerEffectComponent_OnQuestTiming, Actor) == 0x000008, "Member 'AT_LightTowerEffectComponent_OnQuestTiming::Actor' has a wrong offset!");

// Function AT.AT_UIDemoSkipDialog.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct AT_UIDemoSkipDialog_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIDemoSkipDialog_OnDemoTiming) == 0x000004, "Wrong alignment on AT_UIDemoSkipDialog_OnDemoTiming");
static_assert(sizeof(AT_UIDemoSkipDialog_OnDemoTiming) == 0x000018, "Wrong size on AT_UIDemoSkipDialog_OnDemoTiming");
static_assert(offsetof(AT_UIDemoSkipDialog_OnDemoTiming, DemoType) == 0x000000, "Member 'AT_UIDemoSkipDialog_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(AT_UIDemoSkipDialog_OnDemoTiming, DemoTiming) == 0x000001, "Member 'AT_UIDemoSkipDialog_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(AT_UIDemoSkipDialog_OnDemoTiming, DemoName) == 0x000008, "Member 'AT_UIDemoSkipDialog_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(AT_UIDemoSkipDialog_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'AT_UIDemoSkipDialog_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.ATBattleAIBehaviorGroundMoveStep.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct ATBattleAIBehaviorGroundMoveStep_OnChangeAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATBattleAIBehaviorGroundMoveStep_OnChangeAction) == 0x000008, "Wrong alignment on ATBattleAIBehaviorGroundMoveStep_OnChangeAction");
static_assert(sizeof(ATBattleAIBehaviorGroundMoveStep_OnChangeAction) == 0x000010, "Wrong size on ATBattleAIBehaviorGroundMoveStep_OnChangeAction");
static_assert(offsetof(ATBattleAIBehaviorGroundMoveStep_OnChangeAction, InCharacter) == 0x000000, "Member 'ATBattleAIBehaviorGroundMoveStep_OnChangeAction::InCharacter' has a wrong offset!");
static_assert(offsetof(ATBattleAIBehaviorGroundMoveStep_OnChangeAction, InActionIdPrev) == 0x000008, "Member 'ATBattleAIBehaviorGroundMoveStep_OnChangeAction::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATBattleAIBehaviorGroundMoveStep_OnChangeAction, InActionIdNext) == 0x00000C, "Member 'ATBattleAIBehaviorGroundMoveStep_OnChangeAction::InActionIdNext' has a wrong offset!");

// Function AT.AccompanyAI.OnUpdateAnimation
// 0x0001 (0x0001 - 0x0000)
struct AccompanyAI_OnUpdateAnimation final
{
public:
	EATCharacterMoveState                         InMoveType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccompanyAI_OnUpdateAnimation) == 0x000001, "Wrong alignment on AccompanyAI_OnUpdateAnimation");
static_assert(sizeof(AccompanyAI_OnUpdateAnimation) == 0x000001, "Wrong size on AccompanyAI_OnUpdateAnimation");
static_assert(offsetof(AccompanyAI_OnUpdateAnimation, InMoveType) == 0x000000, "Member 'AccompanyAI_OnUpdateAnimation::InMoveType' has a wrong offset!");

// Function AT.AccompanyAI.StopEvent
// 0x0008 (0x0008 - 0x0000)
struct AccompanyAI_StopEvent final
{
public:
	class AAT_Character*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccompanyAI_StopEvent) == 0x000008, "Wrong alignment on AccompanyAI_StopEvent");
static_assert(sizeof(AccompanyAI_StopEvent) == 0x000008, "Wrong size on AccompanyAI_StopEvent");
static_assert(offsetof(AccompanyAI_StopEvent, Chara) == 0x000000, "Member 'AccompanyAI_StopEvent::Chara' has a wrong offset!");

// Function AT.ATCookResourceLoader.CompleteClear
// 0x0008 (0x0008 - 0x0000)
struct ATCookResourceLoader_CompleteClear final
{
public:
	class UATDataAssetCookingDemoCharacterResourceAsyncLoad* ResourceLoad;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCookResourceLoader_CompleteClear) == 0x000008, "Wrong alignment on ATCookResourceLoader_CompleteClear");
static_assert(sizeof(ATCookResourceLoader_CompleteClear) == 0x000008, "Wrong size on ATCookResourceLoader_CompleteClear");
static_assert(offsetof(ATCookResourceLoader_CompleteClear, ResourceLoad) == 0x000000, "Member 'ATCookResourceLoader_CompleteClear::ResourceLoad' has a wrong offset!");

// Function AT.ATCookResourceLoader.CompleteLoad
// 0x0008 (0x0008 - 0x0000)
struct ATCookResourceLoader_CompleteLoad final
{
public:
	class UATDataAssetCookingDemoCharacterResourceAsyncLoad* ResourceLoad;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCookResourceLoader_CompleteLoad) == 0x000008, "Wrong alignment on ATCookResourceLoader_CompleteLoad");
static_assert(sizeof(ATCookResourceLoader_CompleteLoad) == 0x000008, "Wrong size on ATCookResourceLoader_CompleteLoad");
static_assert(offsetof(ATCookResourceLoader_CompleteLoad, ResourceLoad) == 0x000000, "Member 'ATCookResourceLoader_CompleteLoad::ResourceLoad' has a wrong offset!");

// Function AT.AT_UIBattleTipsList.SetOffSet
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleTipsList_SetOffSet final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleTipsList_SetOffSet) == 0x000004, "Wrong alignment on AT_UIBattleTipsList_SetOffSet");
static_assert(sizeof(AT_UIBattleTipsList_SetOffSet) == 0x000004, "Wrong size on AT_UIBattleTipsList_SetOffSet");
static_assert(offsetof(AT_UIBattleTipsList_SetOffSet, Offset) == 0x000000, "Member 'AT_UIBattleTipsList_SetOffSet::Offset' has a wrong offset!");

// Function AT.AT_UIBattleTipsList.SetText
// 0x0010 (0x0010 - 0x0000)
struct AT_UIBattleTipsList_SetText final
{
public:
	class FName                                   InBtnMsgId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InOpeMsgId;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleTipsList_SetText) == 0x000004, "Wrong alignment on AT_UIBattleTipsList_SetText");
static_assert(sizeof(AT_UIBattleTipsList_SetText) == 0x000010, "Wrong size on AT_UIBattleTipsList_SetText");
static_assert(offsetof(AT_UIBattleTipsList_SetText, InBtnMsgId) == 0x000000, "Member 'AT_UIBattleTipsList_SetText::InBtnMsgId' has a wrong offset!");
static_assert(offsetof(AT_UIBattleTipsList_SetText, InOpeMsgId) == 0x000008, "Member 'AT_UIBattleTipsList_SetText::InOpeMsgId' has a wrong offset!");

// Function AT.ActorTrackingEffectComponent.DeleteTrackingEffect
// 0x0008 (0x0008 - 0x0000)
struct ActorTrackingEffectComponent_DeleteTrackingEffect final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorTrackingEffectComponent_DeleteTrackingEffect) == 0x000008, "Wrong alignment on ActorTrackingEffectComponent_DeleteTrackingEffect");
static_assert(sizeof(ActorTrackingEffectComponent_DeleteTrackingEffect) == 0x000008, "Wrong size on ActorTrackingEffectComponent_DeleteTrackingEffect");
static_assert(offsetof(ActorTrackingEffectComponent_DeleteTrackingEffect, Owner) == 0x000000, "Member 'ActorTrackingEffectComponent_DeleteTrackingEffect::Owner' has a wrong offset!");

// Function AT.NpcPawn.GetNpcMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct NpcPawn_GetNpcMovementComponent final
{
public:
	class UNpcMovementComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcPawn_GetNpcMovementComponent) == 0x000008, "Wrong alignment on NpcPawn_GetNpcMovementComponent");
static_assert(sizeof(NpcPawn_GetNpcMovementComponent) == 0x000008, "Wrong size on NpcPawn_GetNpcMovementComponent");
static_assert(offsetof(NpcPawn_GetNpcMovementComponent, ReturnValue) == 0x000000, "Member 'NpcPawn_GetNpcMovementComponent::ReturnValue' has a wrong offset!");

// Function AT.AT_MobBase.OnCollisionHit
// 0x00B0 (0x00B0 - 0x0000)
struct AT_MobBase_OnCollisionHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_MobBase_OnCollisionHit) == 0x000008, "Wrong alignment on AT_MobBase_OnCollisionHit");
static_assert(sizeof(AT_MobBase_OnCollisionHit) == 0x0000B0, "Wrong size on AT_MobBase_OnCollisionHit");
static_assert(offsetof(AT_MobBase_OnCollisionHit, HitComponent) == 0x000000, "Member 'AT_MobBase_OnCollisionHit::HitComponent' has a wrong offset!");
static_assert(offsetof(AT_MobBase_OnCollisionHit, OtherActor) == 0x000008, "Member 'AT_MobBase_OnCollisionHit::OtherActor' has a wrong offset!");
static_assert(offsetof(AT_MobBase_OnCollisionHit, OtherComp) == 0x000010, "Member 'AT_MobBase_OnCollisionHit::OtherComp' has a wrong offset!");
static_assert(offsetof(AT_MobBase_OnCollisionHit, NormalImpulse) == 0x000018, "Member 'AT_MobBase_OnCollisionHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(AT_MobBase_OnCollisionHit, Hit) == 0x000028, "Member 'AT_MobBase_OnCollisionHit::Hit' has a wrong offset!");

// Function AT.AT_MobBase_Static.OnVisibleChanged
// 0x0001 (0x0001 - 0x0000)
struct AT_MobBase_Static_OnVisibleChanged final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_MobBase_Static_OnVisibleChanged) == 0x000001, "Wrong alignment on AT_MobBase_Static_OnVisibleChanged");
static_assert(sizeof(AT_MobBase_Static_OnVisibleChanged) == 0x000001, "Wrong size on AT_MobBase_Static_OnVisibleChanged");
static_assert(offsetof(AT_MobBase_Static_OnVisibleChanged, Visible) == 0x000000, "Member 'AT_MobBase_Static_OnVisibleChanged::Visible' has a wrong offset!");

// Function AT.ATActGroundBattleDmgBound.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActGroundBattleDmgBound_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActGroundBattleDmgBound_OnHitPhoton) == 0x000008, "Wrong alignment on ATActGroundBattleDmgBound_OnHitPhoton");
static_assert(sizeof(ATActGroundBattleDmgBound_OnHitPhoton) == 0x000020, "Wrong size on ATActGroundBattleDmgBound_OnHitPhoton");
static_assert(offsetof(ATActGroundBattleDmgBound_OnHitPhoton, InResults) == 0x000000, "Member 'ATActGroundBattleDmgBound_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActGroundBattleDmgBound_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActGroundBattleDmgBound_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.AnimNotifyState_AG_Trail.OverridePSTemplate
// 0x0018 (0x0018 - 0x0000)
struct AnimNotifyState_AG_Trail_OverridePSTemplate final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_AG_Trail_OverridePSTemplate) == 0x000008, "Wrong alignment on AnimNotifyState_AG_Trail_OverridePSTemplate");
static_assert(sizeof(AnimNotifyState_AG_Trail_OverridePSTemplate) == 0x000018, "Wrong size on AnimNotifyState_AG_Trail_OverridePSTemplate");
static_assert(offsetof(AnimNotifyState_AG_Trail_OverridePSTemplate, MeshComp) == 0x000000, "Member 'AnimNotifyState_AG_Trail_OverridePSTemplate::MeshComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AG_Trail_OverridePSTemplate, Animation) == 0x000008, "Member 'AnimNotifyState_AG_Trail_OverridePSTemplate::Animation' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AG_Trail_OverridePSTemplate, ReturnValue) == 0x000010, "Member 'AnimNotifyState_AG_Trail_OverridePSTemplate::ReturnValue' has a wrong offset!");

// Function AT.Projectile.DamageApplied
// 0x0088 (0x0088 - 0x0000)
struct Projectile_DamageApplied final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_DamageApplied) == 0x000008, "Wrong alignment on Projectile_DamageApplied");
static_assert(sizeof(Projectile_DamageApplied) == 0x000088, "Wrong size on Projectile_DamageApplied");
static_assert(offsetof(Projectile_DamageApplied, HitResult) == 0x000000, "Member 'Projectile_DamageApplied::HitResult' has a wrong offset!");

// Function AT.Projectile.OffsetAbsorb
// 0x0088 (0x0088 - 0x0000)
struct Projectile_OffsetAbsorb final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_OffsetAbsorb) == 0x000008, "Wrong alignment on Projectile_OffsetAbsorb");
static_assert(sizeof(Projectile_OffsetAbsorb) == 0x000088, "Wrong size on Projectile_OffsetAbsorb");
static_assert(offsetof(Projectile_OffsetAbsorb, HitResult) == 0x000000, "Member 'Projectile_OffsetAbsorb::HitResult' has a wrong offset!");

// Function AT.Projectile.OffsetDraw
// 0x0088 (0x0088 - 0x0000)
struct Projectile_OffsetDraw final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_OffsetDraw) == 0x000008, "Wrong alignment on Projectile_OffsetDraw");
static_assert(sizeof(Projectile_OffsetDraw) == 0x000088, "Wrong size on Projectile_OffsetDraw");
static_assert(offsetof(Projectile_OffsetDraw, HitResult) == 0x000000, "Member 'Projectile_OffsetDraw::HitResult' has a wrong offset!");

// Function AT.Projectile.OffsetLose
// 0x0088 (0x0088 - 0x0000)
struct Projectile_OffsetLose final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_OffsetLose) == 0x000008, "Wrong alignment on Projectile_OffsetLose");
static_assert(sizeof(Projectile_OffsetLose) == 0x000088, "Wrong size on Projectile_OffsetLose");
static_assert(offsetof(Projectile_OffsetLose, HitResult) == 0x000000, "Member 'Projectile_OffsetLose::HitResult' has a wrong offset!");

// Function AT.Projectile.OffsetReflect
// 0x0088 (0x0088 - 0x0000)
struct Projectile_OffsetReflect final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_OffsetReflect) == 0x000008, "Wrong alignment on Projectile_OffsetReflect");
static_assert(sizeof(Projectile_OffsetReflect) == 0x000088, "Wrong size on Projectile_OffsetReflect");
static_assert(offsetof(Projectile_OffsetReflect, HitResult) == 0x000000, "Member 'Projectile_OffsetReflect::HitResult' has a wrong offset!");

// Function AT.ATProjectileBullet.HitRootSphere
// 0x0088 (0x0088 - 0x0000)
struct ATProjectileBullet_HitRootSphere final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATProjectileBullet_HitRootSphere) == 0x000008, "Wrong alignment on ATProjectileBullet_HitRootSphere");
static_assert(sizeof(ATProjectileBullet_HitRootSphere) == 0x000088, "Wrong size on ATProjectileBullet_HitRootSphere");
static_assert(offsetof(ATProjectileBullet_HitRootSphere, ImpactResult) == 0x000000, "Member 'ATProjectileBullet_HitRootSphere::ImpactResult' has a wrong offset!");

// Function AT.AIBase.BehaviorCheck
// 0x0004 (0x0004 - 0x0000)
struct AIBase_BehaviorCheck final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_BehaviorCheck) == 0x000004, "Wrong alignment on AIBase_BehaviorCheck");
static_assert(sizeof(AIBase_BehaviorCheck) == 0x000004, "Wrong size on AIBase_BehaviorCheck");
static_assert(offsetof(AIBase_BehaviorCheck, DeltaTime) == 0x000000, "Member 'AIBase_BehaviorCheck::DeltaTime' has a wrong offset!");

// Function AT.AIBase.BehaviorLot
// 0x0004 (0x0004 - 0x0000)
struct AIBase_BehaviorLot final
{
public:
	float                                         FDlt;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_BehaviorLot) == 0x000004, "Wrong alignment on AIBase_BehaviorLot");
static_assert(sizeof(AIBase_BehaviorLot) == 0x000004, "Wrong size on AIBase_BehaviorLot");
static_assert(offsetof(AIBase_BehaviorLot, FDlt) == 0x000000, "Member 'AIBase_BehaviorLot::FDlt' has a wrong offset!");

// Function AT.AIBase.CheckSeq
// 0x0002 (0x0002 - 0x0000)
struct AIBase_CheckSeq final
{
public:
	E_SEQ_AI                                      Seq;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_CheckSeq) == 0x000001, "Wrong alignment on AIBase_CheckSeq");
static_assert(sizeof(AIBase_CheckSeq) == 0x000002, "Wrong size on AIBase_CheckSeq");
static_assert(offsetof(AIBase_CheckSeq, Seq) == 0x000000, "Member 'AIBase_CheckSeq::Seq' has a wrong offset!");
static_assert(offsetof(AIBase_CheckSeq, ReturnValue) == 0x000001, "Member 'AIBase_CheckSeq::ReturnValue' has a wrong offset!");

// Function AT.AIBase.CheckState
// 0x0002 (0x0002 - 0x0000)
struct AIBase_CheckState final
{
public:
	E_AI_STATE                                    State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_CheckState) == 0x000001, "Wrong alignment on AIBase_CheckState");
static_assert(sizeof(AIBase_CheckState) == 0x000002, "Wrong size on AIBase_CheckState");
static_assert(offsetof(AIBase_CheckState, State) == 0x000000, "Member 'AIBase_CheckState::State' has a wrong offset!");
static_assert(offsetof(AIBase_CheckState, ReturnValue) == 0x000001, "Member 'AIBase_CheckState::ReturnValue' has a wrong offset!");

// Function AT.AIBase.DoMiniGame
// 0x0001 (0x0001 - 0x0000)
struct AIBase_DoMiniGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_DoMiniGame) == 0x000001, "Wrong alignment on AIBase_DoMiniGame");
static_assert(sizeof(AIBase_DoMiniGame) == 0x000001, "Wrong size on AIBase_DoMiniGame");
static_assert(offsetof(AIBase_DoMiniGame, ReturnValue) == 0x000000, "Member 'AIBase_DoMiniGame::ReturnValue' has a wrong offset!");

// Function AT.AIBase.GetAIStopEvent
// 0x0001 (0x0001 - 0x0000)
struct AIBase_GetAIStopEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_GetAIStopEvent) == 0x000001, "Wrong alignment on AIBase_GetAIStopEvent");
static_assert(sizeof(AIBase_GetAIStopEvent) == 0x000001, "Wrong size on AIBase_GetAIStopEvent");
static_assert(offsetof(AIBase_GetAIStopEvent, ReturnValue) == 0x000000, "Member 'AIBase_GetAIStopEvent::ReturnValue' has a wrong offset!");

// Function AT.AIBase.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct AIBase_GetCharacter final
{
public:
	class AAT_Character*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_GetCharacter) == 0x000008, "Wrong alignment on AIBase_GetCharacter");
static_assert(sizeof(AIBase_GetCharacter) == 0x000008, "Wrong size on AIBase_GetCharacter");
static_assert(offsetof(AIBase_GetCharacter, ReturnValue) == 0x000000, "Member 'AIBase_GetCharacter::ReturnValue' has a wrong offset!");

// Function AT.AIBase.GetDebugAIStop
// 0x0001 (0x0001 - 0x0000)
struct AIBase_GetDebugAIStop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_GetDebugAIStop) == 0x000001, "Wrong alignment on AIBase_GetDebugAIStop");
static_assert(sizeof(AIBase_GetDebugAIStop) == 0x000001, "Wrong size on AIBase_GetDebugAIStop");
static_assert(offsetof(AIBase_GetDebugAIStop, ReturnValue) == 0x000000, "Member 'AIBase_GetDebugAIStop::ReturnValue' has a wrong offset!");

// Function AT.AIBase.GetDebugFlg
// 0x0004 (0x0004 - 0x0000)
struct AIBase_GetDebugFlg final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_GetDebugFlg) == 0x000004, "Wrong alignment on AIBase_GetDebugFlg");
static_assert(sizeof(AIBase_GetDebugFlg) == 0x000004, "Wrong size on AIBase_GetDebugFlg");
static_assert(offsetof(AIBase_GetDebugFlg, ReturnValue) == 0x000000, "Member 'AIBase_GetDebugFlg::ReturnValue' has a wrong offset!");

// Function AT.AIBase.GetSlopeX
// 0x0004 (0x0004 - 0x0000)
struct AIBase_GetSlopeX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_GetSlopeX) == 0x000004, "Wrong alignment on AIBase_GetSlopeX");
static_assert(sizeof(AIBase_GetSlopeX) == 0x000004, "Wrong size on AIBase_GetSlopeX");
static_assert(offsetof(AIBase_GetSlopeX, ReturnValue) == 0x000000, "Member 'AIBase_GetSlopeX::ReturnValue' has a wrong offset!");

// Function AT.AIBase.GetSlopeY
// 0x0004 (0x0004 - 0x0000)
struct AIBase_GetSlopeY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_GetSlopeY) == 0x000004, "Wrong alignment on AIBase_GetSlopeY");
static_assert(sizeof(AIBase_GetSlopeY) == 0x000004, "Wrong size on AIBase_GetSlopeY");
static_assert(offsetof(AIBase_GetSlopeY, ReturnValue) == 0x000000, "Member 'AIBase_GetSlopeY::ReturnValue' has a wrong offset!");

// Function AT.AIBase.OnCookingTiming
// 0x0001 (0x0001 - 0x0000)
struct AIBase_OnCookingTiming final
{
public:
	EEventTimingType                              Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_OnCookingTiming) == 0x000001, "Wrong alignment on AIBase_OnCookingTiming");
static_assert(sizeof(AIBase_OnCookingTiming) == 0x000001, "Wrong size on AIBase_OnCookingTiming");
static_assert(offsetof(AIBase_OnCookingTiming, Timing) == 0x000000, "Member 'AIBase_OnCookingTiming::Timing' has a wrong offset!");

// Function AT.AIBase.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct AIBase_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIBase_OnDemoTiming) == 0x000004, "Wrong alignment on AIBase_OnDemoTiming");
static_assert(sizeof(AIBase_OnDemoTiming) == 0x000018, "Wrong size on AIBase_OnDemoTiming");
static_assert(offsetof(AIBase_OnDemoTiming, DemoType) == 0x000000, "Member 'AIBase_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(AIBase_OnDemoTiming, DemoTiming) == 0x000001, "Member 'AIBase_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(AIBase_OnDemoTiming, DemoName) == 0x000008, "Member 'AIBase_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(AIBase_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'AIBase_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.AIBase.RequestBehaviorCheck
// 0x0001 (0x0001 - 0x0000)
struct AIBase_RequestBehaviorCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_RequestBehaviorCheck) == 0x000001, "Wrong alignment on AIBase_RequestBehaviorCheck");
static_assert(sizeof(AIBase_RequestBehaviorCheck) == 0x000001, "Wrong size on AIBase_RequestBehaviorCheck");
static_assert(offsetof(AIBase_RequestBehaviorCheck, ReturnValue) == 0x000000, "Member 'AIBase_RequestBehaviorCheck::ReturnValue' has a wrong offset!");

// Function AT.AIBase.RequestCheck
// 0x0001 (0x0001 - 0x0000)
struct AIBase_RequestCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_RequestCheck) == 0x000001, "Wrong alignment on AIBase_RequestCheck");
static_assert(sizeof(AIBase_RequestCheck) == 0x000001, "Wrong size on AIBase_RequestCheck");
static_assert(offsetof(AIBase_RequestCheck, ReturnValue) == 0x000000, "Member 'AIBase_RequestCheck::ReturnValue' has a wrong offset!");

// Function AT.AIBase.SetMiniGame
// 0x0001 (0x0001 - 0x0000)
struct AIBase_SetMiniGame final
{
public:
	E_AI_MINIGAME                                 Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_SetMiniGame) == 0x000001, "Wrong alignment on AIBase_SetMiniGame");
static_assert(sizeof(AIBase_SetMiniGame) == 0x000001, "Wrong size on AIBase_SetMiniGame");
static_assert(offsetof(AIBase_SetMiniGame, Value) == 0x000000, "Member 'AIBase_SetMiniGame::Value' has a wrong offset!");

// Function AT.AIBase.SetSpecialBehavior
// 0x0001 (0x0001 - 0x0000)
struct AIBase_SetSpecialBehavior final
{
public:
	E_AI_SPECIAL                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_SetSpecialBehavior) == 0x000001, "Wrong alignment on AIBase_SetSpecialBehavior");
static_assert(sizeof(AIBase_SetSpecialBehavior) == 0x000001, "Wrong size on AIBase_SetSpecialBehavior");
static_assert(offsetof(AIBase_SetSpecialBehavior, Type) == 0x000000, "Member 'AIBase_SetSpecialBehavior::Type' has a wrong offset!");

// Function AT.AIBase.UpdataStatus
// 0x0004 (0x0004 - 0x0000)
struct AIBase_UpdataStatus final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_UpdataStatus) == 0x000004, "Wrong alignment on AIBase_UpdataStatus");
static_assert(sizeof(AIBase_UpdataStatus) == 0x000004, "Wrong size on AIBase_UpdataStatus");
static_assert(offsetof(AIBase_UpdataStatus, DeltaTime) == 0x000000, "Member 'AIBase_UpdataStatus::DeltaTime' has a wrong offset!");

// Function AT.AIBase.GetMiniGame
// 0x0001 (0x0001 - 0x0000)
struct AIBase_GetMiniGame final
{
public:
	E_AI_MINIGAME                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIBase_GetMiniGame) == 0x000001, "Wrong alignment on AIBase_GetMiniGame");
static_assert(sizeof(AIBase_GetMiniGame) == 0x000001, "Wrong size on AIBase_GetMiniGame");
static_assert(offsetof(AIBase_GetMiniGame, ReturnValue) == 0x000000, "Member 'AIBase_GetMiniGame::ReturnValue' has a wrong offset!");

// Function AT.ATActDmgBlowoffRoll.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActDmgBlowoffRoll_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActDmgBlowoffRoll_OnHitPhoton) == 0x000008, "Wrong alignment on ATActDmgBlowoffRoll_OnHitPhoton");
static_assert(sizeof(ATActDmgBlowoffRoll_OnHitPhoton) == 0x000020, "Wrong size on ATActDmgBlowoffRoll_OnHitPhoton");
static_assert(offsetof(ATActDmgBlowoffRoll_OnHitPhoton, InResults) == 0x000000, "Member 'ATActDmgBlowoffRoll_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActDmgBlowoffRoll_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActDmgBlowoffRoll_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.AIManager.CreateFriendDetails
// 0x0028 (0x0028 - 0x0000)
struct AIManager_CreateFriendDetails final
{
public:
	ECHARACTER_TYPE                               CHARACTER_TYPE;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFalling;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIndependent;                                      // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AAT_Character*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIManager_CreateFriendDetails) == 0x000008, "Wrong alignment on AIManager_CreateFriendDetails");
static_assert(sizeof(AIManager_CreateFriendDetails) == 0x000028, "Wrong size on AIManager_CreateFriendDetails");
static_assert(offsetof(AIManager_CreateFriendDetails, CHARACTER_TYPE) == 0x000000, "Member 'AIManager_CreateFriendDetails::CHARACTER_TYPE' has a wrong offset!");
static_assert(offsetof(AIManager_CreateFriendDetails, Pos) == 0x000004, "Member 'AIManager_CreateFriendDetails::Pos' has a wrong offset!");
static_assert(offsetof(AIManager_CreateFriendDetails, Rot) == 0x000010, "Member 'AIManager_CreateFriendDetails::Rot' has a wrong offset!");
static_assert(offsetof(AIManager_CreateFriendDetails, bFalling) == 0x00001C, "Member 'AIManager_CreateFriendDetails::bFalling' has a wrong offset!");
static_assert(offsetof(AIManager_CreateFriendDetails, bIndependent) == 0x00001D, "Member 'AIManager_CreateFriendDetails::bIndependent' has a wrong offset!");
static_assert(offsetof(AIManager_CreateFriendDetails, ReturnValue) == 0x000020, "Member 'AIManager_CreateFriendDetails::ReturnValue' has a wrong offset!");

// Function AT.AIManager.DeleteFriend
// 0x0008 (0x0008 - 0x0000)
struct AIManager_DeleteFriend final
{
public:
	class AAT_Character*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIManager_DeleteFriend) == 0x000008, "Wrong alignment on AIManager_DeleteFriend");
static_assert(sizeof(AIManager_DeleteFriend) == 0x000008, "Wrong size on AIManager_DeleteFriend");
static_assert(offsetof(AIManager_DeleteFriend, Chara) == 0x000000, "Member 'AIManager_DeleteFriend::Chara' has a wrong offset!");

// Function AT.RideCharacterBase.OnCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct RideCharacterBase_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideCharacterBase_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on RideCharacterBase_OnCollisionOverlapBegin");
static_assert(sizeof(RideCharacterBase_OnCollisionOverlapBegin) == 0x0000A8, "Wrong size on RideCharacterBase_OnCollisionOverlapBegin");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapBegin, OverlappedComponent) == 0x000000, "Member 'RideCharacterBase_OnCollisionOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'RideCharacterBase_OnCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'RideCharacterBase_OnCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'RideCharacterBase_OnCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'RideCharacterBase_OnCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'RideCharacterBase_OnCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function AT.RideCharacterBase.OnCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct RideCharacterBase_OnCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RideCharacterBase_OnCollisionOverlapEnd) == 0x000008, "Wrong alignment on RideCharacterBase_OnCollisionOverlapEnd");
static_assert(sizeof(RideCharacterBase_OnCollisionOverlapEnd) == 0x000020, "Wrong size on RideCharacterBase_OnCollisionOverlapEnd");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapEnd, OverlappedComponent) == 0x000000, "Member 'RideCharacterBase_OnCollisionOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapEnd, OtherActor) == 0x000008, "Member 'RideCharacterBase_OnCollisionOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapEnd, OtherComp) == 0x000010, "Member 'RideCharacterBase_OnCollisionOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(RideCharacterBase_OnCollisionOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'RideCharacterBase_OnCollisionOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function AT.ATActDmgBlowoff.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActDmgBlowoff_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActDmgBlowoff_OnHitPhoton) == 0x000008, "Wrong alignment on ATActDmgBlowoff_OnHitPhoton");
static_assert(sizeof(ATActDmgBlowoff_OnHitPhoton) == 0x000020, "Wrong size on ATActDmgBlowoff_OnHitPhoton");
static_assert(offsetof(ATActDmgBlowoff_OnHitPhoton, InResults) == 0x000000, "Member 'ATActDmgBlowoff_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActDmgBlowoff_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActDmgBlowoff_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.RidePlayerControllerBase.GetAxisValue
// 0x0008 (0x0008 - 0x0000)
struct RidePlayerControllerBase_GetAxisValue final
{
public:
	EAT_CONTROL_INPUT_AXIS                        AxisType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PastTickNum;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidePlayerControllerBase_GetAxisValue) == 0x000004, "Wrong alignment on RidePlayerControllerBase_GetAxisValue");
static_assert(sizeof(RidePlayerControllerBase_GetAxisValue) == 0x000008, "Wrong size on RidePlayerControllerBase_GetAxisValue");
static_assert(offsetof(RidePlayerControllerBase_GetAxisValue, AxisType) == 0x000000, "Member 'RidePlayerControllerBase_GetAxisValue::AxisType' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_GetAxisValue, PastTickNum) == 0x000001, "Member 'RidePlayerControllerBase_GetAxisValue::PastTickNum' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_GetAxisValue, ReturnValue) == 0x000004, "Member 'RidePlayerControllerBase_GetAxisValue::ReturnValue' has a wrong offset!");

// Function AT.RidePlayerControllerBase.IsPressed
// 0x0002 (0x0002 - 0x0000)
struct RidePlayerControllerBase_IsPressed final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidePlayerControllerBase_IsPressed) == 0x000001, "Wrong alignment on RidePlayerControllerBase_IsPressed");
static_assert(sizeof(RidePlayerControllerBase_IsPressed) == 0x000002, "Wrong size on RidePlayerControllerBase_IsPressed");
static_assert(offsetof(RidePlayerControllerBase_IsPressed, ActionType) == 0x000000, "Member 'RidePlayerControllerBase_IsPressed::ActionType' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_IsPressed, ReturnValue) == 0x000001, "Member 'RidePlayerControllerBase_IsPressed::ReturnValue' has a wrong offset!");

// Function AT.RidePlayerControllerBase.PressedSimultaneous
// 0x0005 (0x0005 - 0x0000)
struct RidePlayerControllerBase_PressedSimultaneous final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType1;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAT_CONTROL_INPUT_ACTION                      ActionType2;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PastTickNum;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermitHoldDown;                                   // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidePlayerControllerBase_PressedSimultaneous) == 0x000001, "Wrong alignment on RidePlayerControllerBase_PressedSimultaneous");
static_assert(sizeof(RidePlayerControllerBase_PressedSimultaneous) == 0x000005, "Wrong size on RidePlayerControllerBase_PressedSimultaneous");
static_assert(offsetof(RidePlayerControllerBase_PressedSimultaneous, ActionType1) == 0x000000, "Member 'RidePlayerControllerBase_PressedSimultaneous::ActionType1' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_PressedSimultaneous, ActionType2) == 0x000001, "Member 'RidePlayerControllerBase_PressedSimultaneous::ActionType2' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_PressedSimultaneous, PastTickNum) == 0x000002, "Member 'RidePlayerControllerBase_PressedSimultaneous::PastTickNum' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_PressedSimultaneous, bPermitHoldDown) == 0x000003, "Member 'RidePlayerControllerBase_PressedSimultaneous::bPermitHoldDown' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_PressedSimultaneous, ReturnValue) == 0x000004, "Member 'RidePlayerControllerBase_PressedSimultaneous::ReturnValue' has a wrong offset!");

// Function AT.RidePlayerControllerBase.SetPauseMenu
// 0x0001 (0x0001 - 0x0000)
struct RidePlayerControllerBase_SetPauseMenu final
{
public:
	bool                                          bMenuPauseOff;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidePlayerControllerBase_SetPauseMenu) == 0x000001, "Wrong alignment on RidePlayerControllerBase_SetPauseMenu");
static_assert(sizeof(RidePlayerControllerBase_SetPauseMenu) == 0x000001, "Wrong size on RidePlayerControllerBase_SetPauseMenu");
static_assert(offsetof(RidePlayerControllerBase_SetPauseMenu, bMenuPauseOff) == 0x000000, "Member 'RidePlayerControllerBase_SetPauseMenu::bMenuPauseOff' has a wrong offset!");

// Function AT.RidePlayerControllerBase.WasJustPressed
// 0x0002 (0x0002 - 0x0000)
struct RidePlayerControllerBase_WasJustPressed final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidePlayerControllerBase_WasJustPressed) == 0x000001, "Wrong alignment on RidePlayerControllerBase_WasJustPressed");
static_assert(sizeof(RidePlayerControllerBase_WasJustPressed) == 0x000002, "Wrong size on RidePlayerControllerBase_WasJustPressed");
static_assert(offsetof(RidePlayerControllerBase_WasJustPressed, ActionType) == 0x000000, "Member 'RidePlayerControllerBase_WasJustPressed::ActionType' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_WasJustPressed, ReturnValue) == 0x000001, "Member 'RidePlayerControllerBase_WasJustPressed::ReturnValue' has a wrong offset!");

// Function AT.RidePlayerControllerBase.WasJustReleased
// 0x0002 (0x0002 - 0x0000)
struct RidePlayerControllerBase_WasJustReleased final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidePlayerControllerBase_WasJustReleased) == 0x000001, "Wrong alignment on RidePlayerControllerBase_WasJustReleased");
static_assert(sizeof(RidePlayerControllerBase_WasJustReleased) == 0x000002, "Wrong size on RidePlayerControllerBase_WasJustReleased");
static_assert(offsetof(RidePlayerControllerBase_WasJustReleased, ActionType) == 0x000000, "Member 'RidePlayerControllerBase_WasJustReleased::ActionType' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_WasJustReleased, ReturnValue) == 0x000001, "Member 'RidePlayerControllerBase_WasJustReleased::ReturnValue' has a wrong offset!");

// Function AT.RidePlayerControllerBase.WasPressed
// 0x0004 (0x0004 - 0x0000)
struct RidePlayerControllerBase_WasPressed final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PastTickNum;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermitHoldDown;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidePlayerControllerBase_WasPressed) == 0x000001, "Wrong alignment on RidePlayerControllerBase_WasPressed");
static_assert(sizeof(RidePlayerControllerBase_WasPressed) == 0x000004, "Wrong size on RidePlayerControllerBase_WasPressed");
static_assert(offsetof(RidePlayerControllerBase_WasPressed, ActionType) == 0x000000, "Member 'RidePlayerControllerBase_WasPressed::ActionType' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_WasPressed, PastTickNum) == 0x000001, "Member 'RidePlayerControllerBase_WasPressed::PastTickNum' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_WasPressed, bPermitHoldDown) == 0x000002, "Member 'RidePlayerControllerBase_WasPressed::bPermitHoldDown' has a wrong offset!");
static_assert(offsetof(RidePlayerControllerBase_WasPressed, ReturnValue) == 0x000003, "Member 'RidePlayerControllerBase_WasPressed::ReturnValue' has a wrong offset!");

// Function AT.ATBattleCheerConditionBase.ReceiveEvent
// 0x0108 (0x0108 - 0x0000)
struct ATBattleCheerConditionBase_ReceiveEvent final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATBattleCheerConditionBase_ReceiveEvent) == 0x000008, "Wrong alignment on ATBattleCheerConditionBase_ReceiveEvent");
static_assert(sizeof(ATBattleCheerConditionBase_ReceiveEvent) == 0x000108, "Wrong size on ATBattleCheerConditionBase_ReceiveEvent");
static_assert(offsetof(ATBattleCheerConditionBase_ReceiveEvent, Param) == 0x000000, "Member 'ATBattleCheerConditionBase_ReceiveEvent::Param' has a wrong offset!");

// Function AT.ATActSpecialMoveZigzag.DamageApplied
// 0x0088 (0x0088 - 0x0000)
struct ATActSpecialMoveZigzag_DamageApplied final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActSpecialMoveZigzag_DamageApplied) == 0x000008, "Wrong alignment on ATActSpecialMoveZigzag_DamageApplied");
static_assert(sizeof(ATActSpecialMoveZigzag_DamageApplied) == 0x000088, "Wrong size on ATActSpecialMoveZigzag_DamageApplied");
static_assert(offsetof(ATActSpecialMoveZigzag_DamageApplied, HitResult) == 0x000000, "Member 'ATActSpecialMoveZigzag_DamageApplied::HitResult' has a wrong offset!");

// Function AT.AndroidAssaultDroneBase.OnHitDamageComponent
// 0x00B0 (0x00B0 - 0x0000)
struct AndroidAssaultDroneBase_OnHitDamageComponent final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AndroidAssaultDroneBase_OnHitDamageComponent) == 0x000008, "Wrong alignment on AndroidAssaultDroneBase_OnHitDamageComponent");
static_assert(sizeof(AndroidAssaultDroneBase_OnHitDamageComponent) == 0x0000B0, "Wrong size on AndroidAssaultDroneBase_OnHitDamageComponent");
static_assert(offsetof(AndroidAssaultDroneBase_OnHitDamageComponent, HitComponent) == 0x000000, "Member 'AndroidAssaultDroneBase_OnHitDamageComponent::HitComponent' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneBase_OnHitDamageComponent, OtherActor) == 0x000008, "Member 'AndroidAssaultDroneBase_OnHitDamageComponent::OtherActor' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneBase_OnHitDamageComponent, OtherComp) == 0x000010, "Member 'AndroidAssaultDroneBase_OnHitDamageComponent::OtherComp' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneBase_OnHitDamageComponent, NormalImpulse) == 0x000018, "Member 'AndroidAssaultDroneBase_OnHitDamageComponent::NormalImpulse' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneBase_OnHitDamageComponent, HitResult) == 0x000028, "Member 'AndroidAssaultDroneBase_OnHitDamageComponent::HitResult' has a wrong offset!");

// Function AT.AndroidAssaultDroneControllerInterface.GetMoveLocation
// 0x000C (0x000C - 0x0000)
struct AndroidAssaultDroneControllerInterface_GetMoveLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AndroidAssaultDroneControllerInterface_GetMoveLocation) == 0x000004, "Wrong alignment on AndroidAssaultDroneControllerInterface_GetMoveLocation");
static_assert(sizeof(AndroidAssaultDroneControllerInterface_GetMoveLocation) == 0x00000C, "Wrong size on AndroidAssaultDroneControllerInterface_GetMoveLocation");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_GetMoveLocation, ReturnValue) == 0x000000, "Member 'AndroidAssaultDroneControllerInterface_GetMoveLocation::ReturnValue' has a wrong offset!");

// Function AT.AndroidAssaultDroneControllerInterface.IsInChasePlayer
// 0x0008 (0x0008 - 0x0000)
struct AndroidAssaultDroneControllerInterface_IsInChasePlayer final
{
public:
	float                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AndroidAssaultDroneControllerInterface_IsInChasePlayer) == 0x000004, "Wrong alignment on AndroidAssaultDroneControllerInterface_IsInChasePlayer");
static_assert(sizeof(AndroidAssaultDroneControllerInterface_IsInChasePlayer) == 0x000008, "Wrong size on AndroidAssaultDroneControllerInterface_IsInChasePlayer");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_IsInChasePlayer, InLength) == 0x000000, "Member 'AndroidAssaultDroneControllerInterface_IsInChasePlayer::InLength' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_IsInChasePlayer, ReturnValue) == 0x000004, "Member 'AndroidAssaultDroneControllerInterface_IsInChasePlayer::ReturnValue' has a wrong offset!");

// Function AT.AndroidAssaultDroneControllerInterface.MoveToLocationKeepDistance
// 0x0020 (0x0020 - 0x0000)
struct AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance final
{
public:
	struct FVector                                InTargetLocation;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAcceptanceRadius;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InKeepDistance;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSensingDistance;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDTime;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance) == 0x000004, "Wrong alignment on AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance");
static_assert(sizeof(AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance) == 0x000020, "Wrong size on AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance, InTargetLocation) == 0x000000, "Member 'AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance::InTargetLocation' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance, InAcceptanceRadius) == 0x00000C, "Member 'AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance::InAcceptanceRadius' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance, InKeepDistance) == 0x000010, "Member 'AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance::InKeepDistance' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance, InSensingDistance) == 0x000014, "Member 'AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance::InSensingDistance' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance, InDTime) == 0x000018, "Member 'AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance::InDTime' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance, ReturnValue) == 0x00001C, "Member 'AndroidAssaultDroneControllerInterface_MoveToLocationKeepDistance::ReturnValue' has a wrong offset!");

// Function AT.AndroidAssaultDCI_ChaseSupporter.ChaseSupporter
// 0x000C (0x000C - 0x0000)
struct AndroidAssaultDCI_ChaseSupporter_ChaseSupporter final
{
public:
	float                                         InDTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRotInterp;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDistance;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AndroidAssaultDCI_ChaseSupporter_ChaseSupporter) == 0x000004, "Wrong alignment on AndroidAssaultDCI_ChaseSupporter_ChaseSupporter");
static_assert(sizeof(AndroidAssaultDCI_ChaseSupporter_ChaseSupporter) == 0x00000C, "Wrong size on AndroidAssaultDCI_ChaseSupporter_ChaseSupporter");
static_assert(offsetof(AndroidAssaultDCI_ChaseSupporter_ChaseSupporter, InDTime) == 0x000000, "Member 'AndroidAssaultDCI_ChaseSupporter_ChaseSupporter::InDTime' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDCI_ChaseSupporter_ChaseSupporter, InRotInterp) == 0x000004, "Member 'AndroidAssaultDCI_ChaseSupporter_ChaseSupporter::InRotInterp' has a wrong offset!");
static_assert(offsetof(AndroidAssaultDCI_ChaseSupporter_ChaseSupporter, InDistance) == 0x000008, "Member 'AndroidAssaultDCI_ChaseSupporter_ChaseSupporter::InDistance' has a wrong offset!");

// Function AT.AT_UIFieldTalkWin.OnMobMessage
// 0x0028 (0x0028 - 0x0000)
struct AT_UIFieldTalkWin_OnMobMessage final
{
public:
	class FString                                 Speaker;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButtonVisible;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldTalkWin_OnMobMessage) == 0x000008, "Wrong alignment on AT_UIFieldTalkWin_OnMobMessage");
static_assert(sizeof(AT_UIFieldTalkWin_OnMobMessage) == 0x000028, "Wrong size on AT_UIFieldTalkWin_OnMobMessage");
static_assert(offsetof(AT_UIFieldTalkWin_OnMobMessage, Speaker) == 0x000000, "Member 'AT_UIFieldTalkWin_OnMobMessage::Speaker' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkWin_OnMobMessage, Message) == 0x000010, "Member 'AT_UIFieldTalkWin_OnMobMessage::Message' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkWin_OnMobMessage, bButtonVisible) == 0x000020, "Member 'AT_UIFieldTalkWin_OnMobMessage::bButtonVisible' has a wrong offset!");

// Function AT.AT_UIFieldTalkWin.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldTalkWin_SetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldTalkWin_SetVisible) == 0x000001, "Wrong alignment on AT_UIFieldTalkWin_SetVisible");
static_assert(sizeof(AT_UIFieldTalkWin_SetVisible) == 0x000001, "Wrong size on AT_UIFieldTalkWin_SetVisible");
static_assert(offsetof(AT_UIFieldTalkWin_SetVisible, bVisible) == 0x000000, "Member 'AT_UIFieldTalkWin_SetVisible::bVisible' has a wrong offset!");

// Function AT.AndroidAssaultManager.OnRideEnd
// 0x0008 (0x0008 - 0x0000)
struct AndroidAssaultManager_OnRideEnd final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AndroidAssaultManager_OnRideEnd) == 0x000008, "Wrong alignment on AndroidAssaultManager_OnRideEnd");
static_assert(sizeof(AndroidAssaultManager_OnRideEnd) == 0x000008, "Wrong size on AndroidAssaultManager_OnRideEnd");
static_assert(offsetof(AndroidAssaultManager_OnRideEnd, InCharacter) == 0x000000, "Member 'AndroidAssaultManager_OnRideEnd::InCharacter' has a wrong offset!");

// Function AT.AndroidAssaultSearchComponent.IsInAlertArea
// 0x0001 (0x0001 - 0x0000)
struct AndroidAssaultSearchComponent_IsInAlertArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AndroidAssaultSearchComponent_IsInAlertArea) == 0x000001, "Wrong alignment on AndroidAssaultSearchComponent_IsInAlertArea");
static_assert(sizeof(AndroidAssaultSearchComponent_IsInAlertArea) == 0x000001, "Wrong size on AndroidAssaultSearchComponent_IsInAlertArea");
static_assert(offsetof(AndroidAssaultSearchComponent_IsInAlertArea, ReturnValue) == 0x000000, "Member 'AndroidAssaultSearchComponent_IsInAlertArea::ReturnValue' has a wrong offset!");

// Function AT.AndroidAssaultSearchComponent.IsInSearchArea
// 0x0001 (0x0001 - 0x0000)
struct AndroidAssaultSearchComponent_IsInSearchArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AndroidAssaultSearchComponent_IsInSearchArea) == 0x000001, "Wrong alignment on AndroidAssaultSearchComponent_IsInSearchArea");
static_assert(sizeof(AndroidAssaultSearchComponent_IsInSearchArea) == 0x000001, "Wrong size on AndroidAssaultSearchComponent_IsInSearchArea");
static_assert(offsetof(AndroidAssaultSearchComponent_IsInSearchArea, ReturnValue) == 0x000000, "Member 'AndroidAssaultSearchComponent_IsInSearchArea::ReturnValue' has a wrong offset!");

// Function AT.AnimalAccessPoint.FinishedEffect
// 0x0008 (0x0008 - 0x0000)
struct AnimalAccessPoint_FinishedEffect final
{
public:
	class UParticleSystemComponent*               PSysComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimalAccessPoint_FinishedEffect) == 0x000008, "Wrong alignment on AnimalAccessPoint_FinishedEffect");
static_assert(sizeof(AnimalAccessPoint_FinishedEffect) == 0x000008, "Wrong size on AnimalAccessPoint_FinishedEffect");
static_assert(offsetof(AnimalAccessPoint_FinishedEffect, PSysComp) == 0x000000, "Member 'AnimalAccessPoint_FinishedEffect::PSysComp' has a wrong offset!");

// Function AT.NpcComponentBase.OnMontageBlendingOut_Call
// 0x0010 (0x0010 - 0x0000)
struct NpcComponentBase_OnMontageBlendingOut_Call final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcComponentBase_OnMontageBlendingOut_Call) == 0x000008, "Wrong alignment on NpcComponentBase_OnMontageBlendingOut_Call");
static_assert(sizeof(NpcComponentBase_OnMontageBlendingOut_Call) == 0x000010, "Wrong size on NpcComponentBase_OnMontageBlendingOut_Call");
static_assert(offsetof(NpcComponentBase_OnMontageBlendingOut_Call, PMontage) == 0x000000, "Member 'NpcComponentBase_OnMontageBlendingOut_Call::PMontage' has a wrong offset!");
static_assert(offsetof(NpcComponentBase_OnMontageBlendingOut_Call, bInterrupted) == 0x000008, "Member 'NpcComponentBase_OnMontageBlendingOut_Call::bInterrupted' has a wrong offset!");

// Function AT.NpcComponentBase.OnMontageEnded_Call
// 0x0010 (0x0010 - 0x0000)
struct NpcComponentBase_OnMontageEnded_Call final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcComponentBase_OnMontageEnded_Call) == 0x000008, "Wrong alignment on NpcComponentBase_OnMontageEnded_Call");
static_assert(sizeof(NpcComponentBase_OnMontageEnded_Call) == 0x000010, "Wrong size on NpcComponentBase_OnMontageEnded_Call");
static_assert(offsetof(NpcComponentBase_OnMontageEnded_Call, PMontage) == 0x000000, "Member 'NpcComponentBase_OnMontageEnded_Call::PMontage' has a wrong offset!");
static_assert(offsetof(NpcComponentBase_OnMontageEnded_Call, bInterrupted) == 0x000008, "Member 'NpcComponentBase_OnMontageEnded_Call::bInterrupted' has a wrong offset!");

// Function AT.NpcComponentBase.SplineMoveProc
// 0x0004 (0x0004 - 0x0000)
struct NpcComponentBase_SplineMoveProc final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcComponentBase_SplineMoveProc) == 0x000004, "Wrong alignment on NpcComponentBase_SplineMoveProc");
static_assert(sizeof(NpcComponentBase_SplineMoveProc) == 0x000004, "Wrong size on NpcComponentBase_SplineMoveProc");
static_assert(offsetof(NpcComponentBase_SplineMoveProc, DeltaTime) == 0x000000, "Member 'NpcComponentBase_SplineMoveProc::DeltaTime' has a wrong offset!");

// Function AT.ATDamageCollisionBase.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct ATDamageCollisionBase_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDamageCollisionBase_BeginOverlap) == 0x000008, "Wrong alignment on ATDamageCollisionBase_BeginOverlap");
static_assert(sizeof(ATDamageCollisionBase_BeginOverlap) == 0x0000A8, "Wrong size on ATDamageCollisionBase_BeginOverlap");
static_assert(offsetof(ATDamageCollisionBase_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'ATDamageCollisionBase_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATDamageCollisionBase_BeginOverlap, OtherActor) == 0x000008, "Member 'ATDamageCollisionBase_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ATDamageCollisionBase_BeginOverlap, OtherComp) == 0x000010, "Member 'ATDamageCollisionBase_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ATDamageCollisionBase_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'ATDamageCollisionBase_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ATDamageCollisionBase_BeginOverlap, bFromSweep) == 0x00001C, "Member 'ATDamageCollisionBase_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(ATDamageCollisionBase_BeginOverlap, SweepResult) == 0x000020, "Member 'ATDamageCollisionBase_BeginOverlap::SweepResult' has a wrong offset!");

// Function AT.ATDamageCollisionBase.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct ATDamageCollisionBase_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATDamageCollisionBase_EndOverlap) == 0x000008, "Wrong alignment on ATDamageCollisionBase_EndOverlap");
static_assert(sizeof(ATDamageCollisionBase_EndOverlap) == 0x000020, "Wrong size on ATDamageCollisionBase_EndOverlap");
static_assert(offsetof(ATDamageCollisionBase_EndOverlap, OverlappedComponent) == 0x000000, "Member 'ATDamageCollisionBase_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATDamageCollisionBase_EndOverlap, OtherActor) == 0x000008, "Member 'ATDamageCollisionBase_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ATDamageCollisionBase_EndOverlap, OtherComp) == 0x000010, "Member 'ATDamageCollisionBase_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ATDamageCollisionBase_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'ATDamageCollisionBase_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function AT.AT_CharacterBase.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct AT_CharacterBase_GetAnimInstance final
{
public:
	class UAnimInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_GetAnimInstance) == 0x000008, "Wrong alignment on AT_CharacterBase_GetAnimInstance");
static_assert(sizeof(AT_CharacterBase_GetAnimInstance) == 0x000008, "Wrong size on AT_CharacterBase_GetAnimInstance");
static_assert(offsetof(AT_CharacterBase_GetAnimInstance, ReturnValue) == 0x000000, "Member 'AT_CharacterBase_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function AT.AT_CharacterBase.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct AT_CharacterBase_OnActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_OnActorBeginOverlap) == 0x000008, "Wrong alignment on AT_CharacterBase_OnActorBeginOverlap");
static_assert(sizeof(AT_CharacterBase_OnActorBeginOverlap) == 0x000010, "Wrong size on AT_CharacterBase_OnActorBeginOverlap");
static_assert(offsetof(AT_CharacterBase_OnActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'AT_CharacterBase_OnActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnActorBeginOverlap, OtherActor) == 0x000008, "Member 'AT_CharacterBase_OnActorBeginOverlap::OtherActor' has a wrong offset!");

// Function AT.AT_CharacterBase.OnActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct AT_CharacterBase_OnActorEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_OnActorEndOverlap) == 0x000008, "Wrong alignment on AT_CharacterBase_OnActorEndOverlap");
static_assert(sizeof(AT_CharacterBase_OnActorEndOverlap) == 0x000010, "Wrong size on AT_CharacterBase_OnActorEndOverlap");
static_assert(offsetof(AT_CharacterBase_OnActorEndOverlap, OverlappedActor) == 0x000000, "Member 'AT_CharacterBase_OnActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnActorEndOverlap, OtherActor) == 0x000008, "Member 'AT_CharacterBase_OnActorEndOverlap::OtherActor' has a wrong offset!");

// Function AT.AT_CharacterBase.OnActorHit
// 0x00A8 (0x00A8 - 0x0000)
struct AT_CharacterBase_OnActorHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_OnActorHit) == 0x000008, "Wrong alignment on AT_CharacterBase_OnActorHit");
static_assert(sizeof(AT_CharacterBase_OnActorHit) == 0x0000A8, "Wrong size on AT_CharacterBase_OnActorHit");
static_assert(offsetof(AT_CharacterBase_OnActorHit, SelfActor) == 0x000000, "Member 'AT_CharacterBase_OnActorHit::SelfActor' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnActorHit, OtherActor) == 0x000008, "Member 'AT_CharacterBase_OnActorHit::OtherActor' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnActorHit, NormalImpulse) == 0x000010, "Member 'AT_CharacterBase_OnActorHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnActorHit, Hit) == 0x000020, "Member 'AT_CharacterBase_OnActorHit::Hit' has a wrong offset!");

// Function AT.AT_CharacterBase.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct AT_CharacterBase_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_CharacterBase_OnMontageBlendingOut) == 0x000008, "Wrong alignment on AT_CharacterBase_OnMontageBlendingOut");
static_assert(sizeof(AT_CharacterBase_OnMontageBlendingOut) == 0x000010, "Wrong size on AT_CharacterBase_OnMontageBlendingOut");
static_assert(offsetof(AT_CharacterBase_OnMontageBlendingOut, PMontage) == 0x000000, "Member 'AT_CharacterBase_OnMontageBlendingOut::PMontage' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'AT_CharacterBase_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function AT.AT_CharacterBase.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct AT_CharacterBase_OnMontageEnded final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_CharacterBase_OnMontageEnded) == 0x000008, "Wrong alignment on AT_CharacterBase_OnMontageEnded");
static_assert(sizeof(AT_CharacterBase_OnMontageEnded) == 0x000010, "Wrong size on AT_CharacterBase_OnMontageEnded");
static_assert(offsetof(AT_CharacterBase_OnMontageEnded, PMontage) == 0x000000, "Member 'AT_CharacterBase_OnMontageEnded::PMontage' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnMontageEnded, bInterrupted) == 0x000008, "Member 'AT_CharacterBase_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function AT.AT_CharacterBase.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct AT_CharacterBase_OnMontageStarted final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_OnMontageStarted) == 0x000008, "Wrong alignment on AT_CharacterBase_OnMontageStarted");
static_assert(sizeof(AT_CharacterBase_OnMontageStarted) == 0x000008, "Wrong size on AT_CharacterBase_OnMontageStarted");
static_assert(offsetof(AT_CharacterBase_OnMontageStarted, PMontage) == 0x000000, "Member 'AT_CharacterBase_OnMontageStarted::PMontage' has a wrong offset!");

// Function AT.AT_CharacterBase.OnPostChangeAnimationBlueprint
// 0x0010 (0x0010 - 0x0000)
struct AT_CharacterBase_OnPostChangeAnimationBlueprint final
{
public:
	const class UClass*                           InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           InMesh;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_OnPostChangeAnimationBlueprint) == 0x000008, "Wrong alignment on AT_CharacterBase_OnPostChangeAnimationBlueprint");
static_assert(sizeof(AT_CharacterBase_OnPostChangeAnimationBlueprint) == 0x000010, "Wrong size on AT_CharacterBase_OnPostChangeAnimationBlueprint");
static_assert(offsetof(AT_CharacterBase_OnPostChangeAnimationBlueprint, InClass) == 0x000000, "Member 'AT_CharacterBase_OnPostChangeAnimationBlueprint::InClass' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnPostChangeAnimationBlueprint, InMesh) == 0x000008, "Member 'AT_CharacterBase_OnPostChangeAnimationBlueprint::InMesh' has a wrong offset!");

// Function AT.AT_CharacterBase.OnPreChangeAnimationBlueprint
// 0x0010 (0x0010 - 0x0000)
struct AT_CharacterBase_OnPreChangeAnimationBlueprint final
{
public:
	const class UClass*                           InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           InMesh;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_OnPreChangeAnimationBlueprint) == 0x000008, "Wrong alignment on AT_CharacterBase_OnPreChangeAnimationBlueprint");
static_assert(sizeof(AT_CharacterBase_OnPreChangeAnimationBlueprint) == 0x000010, "Wrong size on AT_CharacterBase_OnPreChangeAnimationBlueprint");
static_assert(offsetof(AT_CharacterBase_OnPreChangeAnimationBlueprint, InClass) == 0x000000, "Member 'AT_CharacterBase_OnPreChangeAnimationBlueprint::InClass' has a wrong offset!");
static_assert(offsetof(AT_CharacterBase_OnPreChangeAnimationBlueprint, InMesh) == 0x000008, "Member 'AT_CharacterBase_OnPreChangeAnimationBlueprint::InMesh' has a wrong offset!");

// Function AT.AT_CharacterBase.SetEnableLookAt
// 0x0001 (0x0001 - 0x0000)
struct AT_CharacterBase_SetEnableLookAt final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_SetEnableLookAt) == 0x000001, "Wrong alignment on AT_CharacterBase_SetEnableLookAt");
static_assert(sizeof(AT_CharacterBase_SetEnableLookAt) == 0x000001, "Wrong size on AT_CharacterBase_SetEnableLookAt");
static_assert(offsetof(AT_CharacterBase_SetEnableLookAt, bEnable) == 0x000000, "Member 'AT_CharacterBase_SetEnableLookAt::bEnable' has a wrong offset!");

// Function AT.AT_CharacterBase.SetLookAtTarget
// 0x0008 (0x0008 - 0x0000)
struct AT_CharacterBase_SetLookAtTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_SetLookAtTarget) == 0x000008, "Wrong alignment on AT_CharacterBase_SetLookAtTarget");
static_assert(sizeof(AT_CharacterBase_SetLookAtTarget) == 0x000008, "Wrong size on AT_CharacterBase_SetLookAtTarget");
static_assert(offsetof(AT_CharacterBase_SetLookAtTarget, Target) == 0x000000, "Member 'AT_CharacterBase_SetLookAtTarget::Target' has a wrong offset!");

// Function AT.AT_CharacterBase.SetLookAtTargetLocation
// 0x000C (0x000C - 0x0000)
struct AT_CharacterBase_SetLookAtTargetLocation final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_SetLookAtTargetLocation) == 0x000004, "Wrong alignment on AT_CharacterBase_SetLookAtTargetLocation");
static_assert(sizeof(AT_CharacterBase_SetLookAtTargetLocation) == 0x00000C, "Wrong size on AT_CharacterBase_SetLookAtTargetLocation");
static_assert(offsetof(AT_CharacterBase_SetLookAtTargetLocation, Target) == 0x000000, "Member 'AT_CharacterBase_SetLookAtTargetLocation::Target' has a wrong offset!");

// Function AT.AT_CharacterBase.GetLookAtLocation
// 0x000C (0x000C - 0x0000)
struct AT_CharacterBase_GetLookAtLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_GetLookAtLocation) == 0x000004, "Wrong alignment on AT_CharacterBase_GetLookAtLocation");
static_assert(sizeof(AT_CharacterBase_GetLookAtLocation) == 0x00000C, "Wrong size on AT_CharacterBase_GetLookAtLocation");
static_assert(offsetof(AT_CharacterBase_GetLookAtLocation, ReturnValue) == 0x000000, "Member 'AT_CharacterBase_GetLookAtLocation::ReturnValue' has a wrong offset!");

// Function AT.AT_CharacterBase.HasFacial
// 0x0001 (0x0001 - 0x0000)
struct AT_CharacterBase_HasFacial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_HasFacial) == 0x000001, "Wrong alignment on AT_CharacterBase_HasFacial");
static_assert(sizeof(AT_CharacterBase_HasFacial) == 0x000001, "Wrong size on AT_CharacterBase_HasFacial");
static_assert(offsetof(AT_CharacterBase_HasFacial, ReturnValue) == 0x000000, "Member 'AT_CharacterBase_HasFacial::ReturnValue' has a wrong offset!");

// Function AT.AT_CharacterBase.IsBattleStepLoopAction
// 0x0001 (0x0001 - 0x0000)
struct AT_CharacterBase_IsBattleStepLoopAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_IsBattleStepLoopAction) == 0x000001, "Wrong alignment on AT_CharacterBase_IsBattleStepLoopAction");
static_assert(sizeof(AT_CharacterBase_IsBattleStepLoopAction) == 0x000001, "Wrong size on AT_CharacterBase_IsBattleStepLoopAction");
static_assert(offsetof(AT_CharacterBase_IsBattleStepLoopAction, ReturnValue) == 0x000000, "Member 'AT_CharacterBase_IsBattleStepLoopAction::ReturnValue' has a wrong offset!");

// Function AT.AT_CharacterBase.IsBattleStepStartAction
// 0x0001 (0x0001 - 0x0000)
struct AT_CharacterBase_IsBattleStepStartAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_IsBattleStepStartAction) == 0x000001, "Wrong alignment on AT_CharacterBase_IsBattleStepStartAction");
static_assert(sizeof(AT_CharacterBase_IsBattleStepStartAction) == 0x000001, "Wrong size on AT_CharacterBase_IsBattleStepStartAction");
static_assert(offsetof(AT_CharacterBase_IsBattleStepStartAction, ReturnValue) == 0x000000, "Member 'AT_CharacterBase_IsBattleStepStartAction::ReturnValue' has a wrong offset!");

// Function AT.AT_CharacterBase.IsFall
// 0x0001 (0x0001 - 0x0000)
struct AT_CharacterBase_IsFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_IsFall) == 0x000001, "Wrong alignment on AT_CharacterBase_IsFall");
static_assert(sizeof(AT_CharacterBase_IsFall) == 0x000001, "Wrong size on AT_CharacterBase_IsFall");
static_assert(offsetof(AT_CharacterBase_IsFall, ReturnValue) == 0x000000, "Member 'AT_CharacterBase_IsFall::ReturnValue' has a wrong offset!");

// Function AT.AT_CharacterBase.IsGetItemAutoPilotLoopAction
// 0x0001 (0x0001 - 0x0000)
struct AT_CharacterBase_IsGetItemAutoPilotLoopAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CharacterBase_IsGetItemAutoPilotLoopAction) == 0x000001, "Wrong alignment on AT_CharacterBase_IsGetItemAutoPilotLoopAction");
static_assert(sizeof(AT_CharacterBase_IsGetItemAutoPilotLoopAction) == 0x000001, "Wrong size on AT_CharacterBase_IsGetItemAutoPilotLoopAction");
static_assert(offsetof(AT_CharacterBase_IsGetItemAutoPilotLoopAction, ReturnValue) == 0x000000, "Member 'AT_CharacterBase_IsGetItemAutoPilotLoopAction::ReturnValue' has a wrong offset!");

// Function AT.AT_Character.ActiveLeafEffect
// 0x0008 (0x0008 - 0x0000)
struct AT_Character_ActiveLeafEffect final
{
public:
	class UParticleSystem*                        LeafEffect;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_ActiveLeafEffect) == 0x000008, "Wrong alignment on AT_Character_ActiveLeafEffect");
static_assert(sizeof(AT_Character_ActiveLeafEffect) == 0x000008, "Wrong size on AT_Character_ActiveLeafEffect");
static_assert(offsetof(AT_Character_ActiveLeafEffect, LeafEffect) == 0x000000, "Member 'AT_Character_ActiveLeafEffect::LeafEffect' has a wrong offset!");

// Function AT.AT_Character.IsWalkAction
// 0x0001 (0x0001 - 0x0000)
struct AT_Character_IsWalkAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_IsWalkAction) == 0x000001, "Wrong alignment on AT_Character_IsWalkAction");
static_assert(sizeof(AT_Character_IsWalkAction) == 0x000001, "Wrong size on AT_Character_IsWalkAction");
static_assert(offsetof(AT_Character_IsWalkAction, ReturnValue) == 0x000000, "Member 'AT_Character_IsWalkAction::ReturnValue' has a wrong offset!");

// Function AT.AT_Character.OnAbsorbApplied
// 0x0088 (0x0088 - 0x0000)
struct AT_Character_OnAbsorbApplied final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_OnAbsorbApplied) == 0x000008, "Wrong alignment on AT_Character_OnAbsorbApplied");
static_assert(sizeof(AT_Character_OnAbsorbApplied) == 0x000088, "Wrong size on AT_Character_OnAbsorbApplied");
static_assert(offsetof(AT_Character_OnAbsorbApplied, HitResult) == 0x000000, "Member 'AT_Character_OnAbsorbApplied::HitResult' has a wrong offset!");

// Function AT.AT_Character.OnActorRide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_Character_OnActorRide final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_OnActorRide) == 0x000008, "Wrong alignment on AT_Character_OnActorRide");
static_assert(sizeof(AT_Character_OnActorRide) == 0x0000A8, "Wrong size on AT_Character_OnActorRide");
static_assert(offsetof(AT_Character_OnActorRide, SelfActor) == 0x000000, "Member 'AT_Character_OnActorRide::SelfActor' has a wrong offset!");
static_assert(offsetof(AT_Character_OnActorRide, OtherActor) == 0x000008, "Member 'AT_Character_OnActorRide::OtherActor' has a wrong offset!");
static_assert(offsetof(AT_Character_OnActorRide, NormalImpulse) == 0x000010, "Member 'AT_Character_OnActorRide::NormalImpulse' has a wrong offset!");
static_assert(offsetof(AT_Character_OnActorRide, Hit) == 0x000020, "Member 'AT_Character_OnActorRide::Hit' has a wrong offset!");

// Function AT.AT_Character.OnCookingTiming
// 0x0001 (0x0001 - 0x0000)
struct AT_Character_OnCookingTiming final
{
public:
	EEventTimingType                              TimingType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_OnCookingTiming) == 0x000001, "Wrong alignment on AT_Character_OnCookingTiming");
static_assert(sizeof(AT_Character_OnCookingTiming) == 0x000001, "Wrong size on AT_Character_OnCookingTiming");
static_assert(offsetof(AT_Character_OnCookingTiming, TimingType) == 0x000000, "Member 'AT_Character_OnCookingTiming::TimingType' has a wrong offset!");

// Function AT.AT_Character.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct AT_Character_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_Character_OnDemoTiming) == 0x000004, "Wrong alignment on AT_Character_OnDemoTiming");
static_assert(sizeof(AT_Character_OnDemoTiming) == 0x000018, "Wrong size on AT_Character_OnDemoTiming");
static_assert(offsetof(AT_Character_OnDemoTiming, DemoType) == 0x000000, "Member 'AT_Character_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(AT_Character_OnDemoTiming, DemoTiming) == 0x000001, "Member 'AT_Character_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(AT_Character_OnDemoTiming, DemoName) == 0x000008, "Member 'AT_Character_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(AT_Character_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'AT_Character_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.AT_Character.OnLevelUp
// 0x0008 (0x0008 - 0x0000)
struct AT_Character_OnLevelUp final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_OnLevelUp) == 0x000008, "Wrong alignment on AT_Character_OnLevelUp");
static_assert(sizeof(AT_Character_OnLevelUp) == 0x000008, "Wrong size on AT_Character_OnLevelUp");
static_assert(offsetof(AT_Character_OnLevelUp, Character) == 0x000000, "Member 'AT_Character_OnLevelUp::Character' has a wrong offset!");

// Function AT.AT_Character.OnStartBattleRideEnd
// 0x0008 (0x0008 - 0x0000)
struct AT_Character_OnStartBattleRideEnd final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_OnStartBattleRideEnd) == 0x000008, "Wrong alignment on AT_Character_OnStartBattleRideEnd");
static_assert(sizeof(AT_Character_OnStartBattleRideEnd) == 0x000008, "Wrong size on AT_Character_OnStartBattleRideEnd");
static_assert(offsetof(AT_Character_OnStartBattleRideEnd, InCharacter) == 0x000000, "Member 'AT_Character_OnStartBattleRideEnd::InCharacter' has a wrong offset!");

// Function AT.AT_Character.ResetCharacter
// 0x001C (0x001C - 0x0000)
struct AT_Character_ResetCharacter final
{
public:
	EATCharacterReset                             InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPos;                                             // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDir;                                             // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_ResetCharacter) == 0x000004, "Wrong alignment on AT_Character_ResetCharacter");
static_assert(sizeof(AT_Character_ResetCharacter) == 0x00001C, "Wrong size on AT_Character_ResetCharacter");
static_assert(offsetof(AT_Character_ResetCharacter, InState) == 0x000000, "Member 'AT_Character_ResetCharacter::InState' has a wrong offset!");
static_assert(offsetof(AT_Character_ResetCharacter, InPos) == 0x000004, "Member 'AT_Character_ResetCharacter::InPos' has a wrong offset!");
static_assert(offsetof(AT_Character_ResetCharacter, InDir) == 0x000010, "Member 'AT_Character_ResetCharacter::InDir' has a wrong offset!");

// Function AT.AT_Character.SetHairMorphingValue
// 0x0028 (0x0028 - 0x0000)
struct AT_Character_SetHairMorphingValue final
{
public:
	TArray<class FName>                           STargetNames;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsMove;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepeat;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Fvalue;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMin;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMax;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FRate;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_Character_SetHairMorphingValue) == 0x000008, "Wrong alignment on AT_Character_SetHairMorphingValue");
static_assert(sizeof(AT_Character_SetHairMorphingValue) == 0x000028, "Wrong size on AT_Character_SetHairMorphingValue");
static_assert(offsetof(AT_Character_SetHairMorphingValue, STargetNames) == 0x000000, "Member 'AT_Character_SetHairMorphingValue::STargetNames' has a wrong offset!");
static_assert(offsetof(AT_Character_SetHairMorphingValue, bIsMove) == 0x000010, "Member 'AT_Character_SetHairMorphingValue::bIsMove' has a wrong offset!");
static_assert(offsetof(AT_Character_SetHairMorphingValue, bRepeat) == 0x000011, "Member 'AT_Character_SetHairMorphingValue::bRepeat' has a wrong offset!");
static_assert(offsetof(AT_Character_SetHairMorphingValue, Fvalue) == 0x000014, "Member 'AT_Character_SetHairMorphingValue::Fvalue' has a wrong offset!");
static_assert(offsetof(AT_Character_SetHairMorphingValue, FMin) == 0x000018, "Member 'AT_Character_SetHairMorphingValue::FMin' has a wrong offset!");
static_assert(offsetof(AT_Character_SetHairMorphingValue, FMax) == 0x00001C, "Member 'AT_Character_SetHairMorphingValue::FMax' has a wrong offset!");
static_assert(offsetof(AT_Character_SetHairMorphingValue, FRate) == 0x000020, "Member 'AT_Character_SetHairMorphingValue::FRate' has a wrong offset!");

// Function AT.AT_Character.CheckIsApplyBoostCameraShake
// 0x0001 (0x0001 - 0x0000)
struct AT_Character_CheckIsApplyBoostCameraShake final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_CheckIsApplyBoostCameraShake) == 0x000001, "Wrong alignment on AT_Character_CheckIsApplyBoostCameraShake");
static_assert(sizeof(AT_Character_CheckIsApplyBoostCameraShake) == 0x000001, "Wrong size on AT_Character_CheckIsApplyBoostCameraShake");
static_assert(offsetof(AT_Character_CheckIsApplyBoostCameraShake, ReturnValue) == 0x000000, "Member 'AT_Character_CheckIsApplyBoostCameraShake::ReturnValue' has a wrong offset!");

// Function AT.AT_Character.GetRestrictMoveControl
// 0x0008 (0x0008 - 0x0000)
struct AT_Character_GetRestrictMoveControl final
{
public:
	class UATRestrictMoveControl*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_GetRestrictMoveControl) == 0x000008, "Wrong alignment on AT_Character_GetRestrictMoveControl");
static_assert(sizeof(AT_Character_GetRestrictMoveControl) == 0x000008, "Wrong size on AT_Character_GetRestrictMoveControl");
static_assert(offsetof(AT_Character_GetRestrictMoveControl, ReturnValue) == 0x000000, "Member 'AT_Character_GetRestrictMoveControl::ReturnValue' has a wrong offset!");

// Function AT.AT_Character.GetTargetCharacter
// 0x0008 (0x0008 - 0x0000)
struct AT_Character_GetTargetCharacter final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_GetTargetCharacter) == 0x000008, "Wrong alignment on AT_Character_GetTargetCharacter");
static_assert(sizeof(AT_Character_GetTargetCharacter) == 0x000008, "Wrong size on AT_Character_GetTargetCharacter");
static_assert(offsetof(AT_Character_GetTargetCharacter, ReturnValue) == 0x000000, "Member 'AT_Character_GetTargetCharacter::ReturnValue' has a wrong offset!");

// Function AT.AT_Character.GetTargetVector
// 0x000C (0x000C - 0x0000)
struct AT_Character_GetTargetVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_GetTargetVector) == 0x000004, "Wrong alignment on AT_Character_GetTargetVector");
static_assert(sizeof(AT_Character_GetTargetVector) == 0x00000C, "Wrong size on AT_Character_GetTargetVector");
static_assert(offsetof(AT_Character_GetTargetVector, ReturnValue) == 0x000000, "Member 'AT_Character_GetTargetVector::ReturnValue' has a wrong offset!");

// Function AT.AT_Character.GetVirtualController
// 0x0008 (0x0008 - 0x0000)
struct AT_Character_GetVirtualController final
{
public:
	class UATVirtualController*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_GetVirtualController) == 0x000008, "Wrong alignment on AT_Character_GetVirtualController");
static_assert(sizeof(AT_Character_GetVirtualController) == 0x000008, "Wrong size on AT_Character_GetVirtualController");
static_assert(offsetof(AT_Character_GetVirtualController, ReturnValue) == 0x000000, "Member 'AT_Character_GetVirtualController::ReturnValue' has a wrong offset!");

// Function AT.AT_Character.IsTargetCharacter
// 0x0001 (0x0001 - 0x0000)
struct AT_Character_IsTargetCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_Character_IsTargetCharacter) == 0x000001, "Wrong alignment on AT_Character_IsTargetCharacter");
static_assert(sizeof(AT_Character_IsTargetCharacter) == 0x000001, "Wrong size on AT_Character_IsTargetCharacter");
static_assert(offsetof(AT_Character_IsTargetCharacter, ReturnValue) == 0x000000, "Member 'AT_Character_IsTargetCharacter::ReturnValue' has a wrong offset!");

// Function AT.AnimalSpawnerVolumeGround.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct AnimalSpawnerVolumeGround_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimalSpawnerVolumeGround_OnOverlapBegin) == 0x000008, "Wrong alignment on AnimalSpawnerVolumeGround_OnOverlapBegin");
static_assert(sizeof(AnimalSpawnerVolumeGround_OnOverlapBegin) == 0x000010, "Wrong size on AnimalSpawnerVolumeGround_OnOverlapBegin");
static_assert(offsetof(AnimalSpawnerVolumeGround_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'AnimalSpawnerVolumeGround_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AnimalSpawnerVolumeGround_OnOverlapBegin, OtherActor) == 0x000008, "Member 'AnimalSpawnerVolumeGround_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.AnimalSpawnerVolumeGround.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct AnimalSpawnerVolumeGround_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimalSpawnerVolumeGround_OnOverlapEnd) == 0x000008, "Wrong alignment on AnimalSpawnerVolumeGround_OnOverlapEnd");
static_assert(sizeof(AnimalSpawnerVolumeGround_OnOverlapEnd) == 0x000010, "Wrong size on AnimalSpawnerVolumeGround_OnOverlapEnd");
static_assert(offsetof(AnimalSpawnerVolumeGround_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'AnimalSpawnerVolumeGround_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AnimalSpawnerVolumeGround_OnOverlapEnd, OtherActor) == 0x000008, "Member 'AnimalSpawnerVolumeGround_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.AnimalSpawnerVolumeSky.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct AnimalSpawnerVolumeSky_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimalSpawnerVolumeSky_OnOverlapBegin) == 0x000008, "Wrong alignment on AnimalSpawnerVolumeSky_OnOverlapBegin");
static_assert(sizeof(AnimalSpawnerVolumeSky_OnOverlapBegin) == 0x000010, "Wrong size on AnimalSpawnerVolumeSky_OnOverlapBegin");
static_assert(offsetof(AnimalSpawnerVolumeSky_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'AnimalSpawnerVolumeSky_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AnimalSpawnerVolumeSky_OnOverlapBegin, OtherActor) == 0x000008, "Member 'AnimalSpawnerVolumeSky_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.AnimalSpawnerVolumeSky.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct AnimalSpawnerVolumeSky_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimalSpawnerVolumeSky_OnOverlapEnd) == 0x000008, "Wrong alignment on AnimalSpawnerVolumeSky_OnOverlapEnd");
static_assert(sizeof(AnimalSpawnerVolumeSky_OnOverlapEnd) == 0x000010, "Wrong size on AnimalSpawnerVolumeSky_OnOverlapEnd");
static_assert(offsetof(AnimalSpawnerVolumeSky_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'AnimalSpawnerVolumeSky_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AnimalSpawnerVolumeSky_OnOverlapEnd, OtherActor) == 0x000008, "Member 'AnimalSpawnerVolumeSky_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayerSpo.OnChangeCostume
// 0x0002 (0x0002 - 0x0000)
struct AT_UIBattleHudPlayerSpo_OnChangeCostume final
{
public:
	uint8                                         InVariationID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InFormID;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudPlayerSpo_OnChangeCostume) == 0x000001, "Wrong alignment on AT_UIBattleHudPlayerSpo_OnChangeCostume");
static_assert(sizeof(AT_UIBattleHudPlayerSpo_OnChangeCostume) == 0x000002, "Wrong size on AT_UIBattleHudPlayerSpo_OnChangeCostume");
static_assert(offsetof(AT_UIBattleHudPlayerSpo_OnChangeCostume, InVariationID) == 0x000000, "Member 'AT_UIBattleHudPlayerSpo_OnChangeCostume::InVariationID' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudPlayerSpo_OnChangeCostume, InFormID) == 0x000001, "Member 'AT_UIBattleHudPlayerSpo_OnChangeCostume::InFormID' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayerSpo.OnFormChange
// 0x0003 (0x0003 - 0x0000)
struct AT_UIBattleHudPlayerSpo_OnFormChange final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InVariationID;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InFormID;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudPlayerSpo_OnFormChange) == 0x000001, "Wrong alignment on AT_UIBattleHudPlayerSpo_OnFormChange");
static_assert(sizeof(AT_UIBattleHudPlayerSpo_OnFormChange) == 0x000003, "Wrong size on AT_UIBattleHudPlayerSpo_OnFormChange");
static_assert(offsetof(AT_UIBattleHudPlayerSpo_OnFormChange, IsOn) == 0x000000, "Member 'AT_UIBattleHudPlayerSpo_OnFormChange::IsOn' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudPlayerSpo_OnFormChange, InVariationID) == 0x000001, "Member 'AT_UIBattleHudPlayerSpo_OnFormChange::InVariationID' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudPlayerSpo_OnFormChange, InFormID) == 0x000002, "Member 'AT_UIBattleHudPlayerSpo_OnFormChange::InFormID' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayerSpo.OnSkillBegin
// 0x0008 (0x0008 - 0x0000)
struct AT_UIBattleHudPlayerSpo_OnSkillBegin final
{
public:
	class USkill*                                 Skill;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudPlayerSpo_OnSkillBegin) == 0x000008, "Wrong alignment on AT_UIBattleHudPlayerSpo_OnSkillBegin");
static_assert(sizeof(AT_UIBattleHudPlayerSpo_OnSkillBegin) == 0x000008, "Wrong size on AT_UIBattleHudPlayerSpo_OnSkillBegin");
static_assert(offsetof(AT_UIBattleHudPlayerSpo_OnSkillBegin, Skill) == 0x000000, "Member 'AT_UIBattleHudPlayerSpo_OnSkillBegin::Skill' has a wrong offset!");

// Function AT.ATActCpl034SkillPunishmentStorm.OnSpawnProjectile
// 0x0010 (0x0010 - 0x0000)
struct ATActCpl034SkillPunishmentStorm_OnSpawnProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl034SkillPunishmentStorm_OnSpawnProjectile) == 0x000008, "Wrong alignment on ATActCpl034SkillPunishmentStorm_OnSpawnProjectile");
static_assert(sizeof(ATActCpl034SkillPunishmentStorm_OnSpawnProjectile) == 0x000010, "Wrong size on ATActCpl034SkillPunishmentStorm_OnSpawnProjectile");
static_assert(offsetof(ATActCpl034SkillPunishmentStorm_OnSpawnProjectile, InProjectile) == 0x000000, "Member 'ATActCpl034SkillPunishmentStorm_OnSpawnProjectile::InProjectile' has a wrong offset!");
static_assert(offsetof(ATActCpl034SkillPunishmentStorm_OnSpawnProjectile, InOwner) == 0x000008, "Member 'ATActCpl034SkillPunishmentStorm_OnSpawnProjectile::InOwner' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.AddSparkingSkill
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_AddSparkingSkill final
{
public:
	ECHARACTER_TYPE                               InCharacterType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InSkillID;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_AddSparkingSkill) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_AddSparkingSkill");
static_assert(sizeof(AT_BlueprintFunctionLibrary_AddSparkingSkill) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_AddSparkingSkill");
static_assert(offsetof(AT_BlueprintFunctionLibrary_AddSparkingSkill, InCharacterType) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_AddSparkingSkill::InCharacterType' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_AddSparkingSkill, InSkillID) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_AddSparkingSkill::InSkillID' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.BannedAndRipoffSkill
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_BannedAndRipoffSkill final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SkillId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_BannedAndRipoffSkill) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_BannedAndRipoffSkill");
static_assert(sizeof(AT_BlueprintFunctionLibrary_BannedAndRipoffSkill) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_BannedAndRipoffSkill");
static_assert(offsetof(AT_BlueprintFunctionLibrary_BannedAndRipoffSkill, CharacterType) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_BannedAndRipoffSkill::CharacterType' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_BannedAndRipoffSkill, SkillId) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_BannedAndRipoffSkill::SkillId' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.CallFavorRateUp_CONTROL
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL final
{
public:
	int32                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL");
static_assert(sizeof(AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL, Input) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL::Input' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL, ReturnValue) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_CallFavorRateUp_CONTROL::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.CallFavorRateUp_IN
// 0x0004 (0x0004 - 0x0000)
struct AT_BlueprintFunctionLibrary_CallFavorRateUp_IN final
{
public:
	int32                                         Target;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_CallFavorRateUp_IN) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_CallFavorRateUp_IN");
static_assert(sizeof(AT_BlueprintFunctionLibrary_CallFavorRateUp_IN) == 0x000004, "Wrong size on AT_BlueprintFunctionLibrary_CallFavorRateUp_IN");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallFavorRateUp_IN, Target) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_CallFavorRateUp_IN::Target' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.CallMainQuestEnd_CONTROL
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL final
{
public:
	int32                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL");
static_assert(sizeof(AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL, Input) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL::Input' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL, Delta) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_CallMainQuestEnd_CONTROL::Delta' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.CallMainQuestEnd_IN
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN final
{
public:
	int32                                         ChapterNum;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EpisodeNum;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN");
static_assert(sizeof(AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN, ChapterNum) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN::ChapterNum' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN, EpisodeNum) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_CallMainQuestEnd_IN::EpisodeNum' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.CallTutorialTips_CONTROL
// 0x0004 (0x0004 - 0x0000)
struct AT_BlueprintFunctionLibrary_CallTutorialTips_CONTROL final
{
public:
	int32                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_CallTutorialTips_CONTROL) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_CallTutorialTips_CONTROL");
static_assert(sizeof(AT_BlueprintFunctionLibrary_CallTutorialTips_CONTROL) == 0x000004, "Wrong size on AT_BlueprintFunctionLibrary_CallTutorialTips_CONTROL");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallTutorialTips_CONTROL, Input) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_CallTutorialTips_CONTROL::Input' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.CallTutorialTips_IN
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_CallTutorialTips_IN final
{
public:
	class FName                                   TipsId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforce;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_CallTutorialTips_IN) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_CallTutorialTips_IN");
static_assert(sizeof(AT_BlueprintFunctionLibrary_CallTutorialTips_IN) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_CallTutorialTips_IN");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallTutorialTips_IN, TipsId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_CallTutorialTips_IN::TipsId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_CallTutorialTips_IN, bEnforce) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_CallTutorialTips_IN::bEnforce' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.EnableDepthOfField
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_EnableDepthOfField final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_EnableDepthOfField) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_EnableDepthOfField");
static_assert(sizeof(AT_BlueprintFunctionLibrary_EnableDepthOfField) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_EnableDepthOfField");
static_assert(offsetof(AT_BlueprintFunctionLibrary_EnableDepthOfField, WorldContextObject) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_EnableDepthOfField::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_EnableDepthOfField, Enable) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_EnableDepthOfField::Enable' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.EnumToBitFlag
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_EnumToBitFlag final
{
public:
	int32                                         Enum;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_EnumToBitFlag) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_EnumToBitFlag");
static_assert(sizeof(AT_BlueprintFunctionLibrary_EnumToBitFlag) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_EnumToBitFlag");
static_assert(offsetof(AT_BlueprintFunctionLibrary_EnumToBitFlag, Enum) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_EnumToBitFlag::Enum' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_EnumToBitFlag, ReturnValue) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_EnumToBitFlag::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ForceRequestOutDisplayNameUI
// 0x0004 (0x0004 - 0x0000)
struct AT_BlueprintFunctionLibrary_ForceRequestOutDisplayNameUI final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ForceRequestOutDisplayNameUI) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_ForceRequestOutDisplayNameUI");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ForceRequestOutDisplayNameUI) == 0x000004, "Wrong size on AT_BlueprintFunctionLibrary_ForceRequestOutDisplayNameUI");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ForceRequestOutDisplayNameUI, Index_0) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ForceRequestOutDisplayNameUI::Index_0' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetActor
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetActor final
{
public:
	int32                                         UniqueId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetActor) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetActor");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetActor) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_GetActor");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetActor, UniqueId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetActor::UniqueId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetActor, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetActor::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetActorByClassTag
// 0x0020 (0x0020 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetActorByClassTag final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetActorByClassTag) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetActorByClassTag");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetActorByClassTag) == 0x000020, "Wrong size on AT_BlueprintFunctionLibrary_GetActorByClassTag");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetActorByClassTag, Class_0) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetActorByClassTag::Class_0' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetActorByClassTag, TagName) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetActorByClassTag::TagName' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetActorByClassTag, ReturnValue) == 0x000010, "Member 'AT_BlueprintFunctionLibrary_GetActorByClassTag::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetActorByTag
// 0x0018 (0x0018 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetActorByTag final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetActorByTag) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetActorByTag");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetActorByTag) == 0x000018, "Wrong size on AT_BlueprintFunctionLibrary_GetActorByTag");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetActorByTag, TagName) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetActorByTag::TagName' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetActorByTag, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetActorByTag::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetAIBase
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetAIBase final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIBase*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetAIBase) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetAIBase");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetAIBase) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_GetAIBase");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetAIBase, InPawn) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetAIBase::InPawn' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetAIBase, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetAIBase::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetAIManager
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetAIManager final
{
public:
	class UAIManager*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetAIManager) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetAIManager");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetAIManager) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetAIManager");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetAIManager, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetAIManager::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetATCharacter
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetATCharacter final
{
public:
	int32                                         UniqueId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAT_Character*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetATCharacter) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetATCharacter");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetATCharacter) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_GetATCharacter");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetATCharacter, UniqueId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetATCharacter::UniqueId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetATCharacter, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetATCharacter::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetATCharacterByType
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetATCharacterByType final
{
public:
	ECHARACTER_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAT_Character*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetATCharacterByType) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetATCharacterByType");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetATCharacterByType) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_GetATCharacterByType");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetATCharacterByType, Type) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetATCharacterByType::Type' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetATCharacterByType, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetATCharacterByType::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetAtmosphericFogs
// 0x0018 (0x0018 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetAtmosphericFogs final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AAtmosphericFog*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetAtmosphericFogs) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetAtmosphericFogs");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetAtmosphericFogs) == 0x000018, "Wrong size on AT_BlueprintFunctionLibrary_GetAtmosphericFogs");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetAtmosphericFogs, TagName) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetAtmosphericFogs::TagName' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetAtmosphericFogs, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetAtmosphericFogs::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetATVersion
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetATVersion final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetATVersion) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_GetATVersion");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetATVersion) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetATVersion");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetATVersion, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetATVersion::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetBaseballGameManager
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetBaseballGameManager final
{
public:
	class UBaseballGameManager*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetBaseballGameManager) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetBaseballGameManager");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetBaseballGameManager) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetBaseballGameManager");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetBaseballGameManager, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetBaseballGameManager::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetBuildConfiguration
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetBuildConfiguration final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetBuildConfiguration) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetBuildConfiguration");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetBuildConfiguration) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_GetBuildConfiguration");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetBuildConfiguration, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetBuildConfiguration::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetCaptureManager
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetCaptureManager final
{
public:
	class UATUiCaptureManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetCaptureManager) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetCaptureManager");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetCaptureManager) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetCaptureManager");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetCaptureManager, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetCaptureManager::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetCharacterName
// 0x0020 (0x0020 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetCharacterName final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetCharacterName) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetCharacterName");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetCharacterName) == 0x000020, "Wrong size on AT_BlueprintFunctionLibrary_GetCharacterName");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetCharacterName, ID) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetCharacterName::ID' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetCharacterName, ReturnValue) == 0x000010, "Member 'AT_BlueprintFunctionLibrary_GetCharacterName::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetDebugMenu
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetDebugMenu final
{
public:
	class UDebugMenu*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetDebugMenu) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetDebugMenu");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetDebugMenu) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetDebugMenu");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetDebugMenu, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetDebugMenu::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetDefaultGameHud
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetDefaultGameHud final
{
public:
	class AAT_GameHUD*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetDefaultGameHud) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetDefaultGameHud");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetDefaultGameHud) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetDefaultGameHud");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetDefaultGameHud, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetDefaultGameHud::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetDemoManageComponent
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetDemoManageComponent final
{
public:
	class UATDemoManageComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetDemoManageComponent) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetDemoManageComponent");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetDemoManageComponent) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetDemoManageComponent");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetDemoManageComponent, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetDemoManageComponent::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetDragonBallManager
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetDragonBallManager final
{
public:
	class UDragonBallManager*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetDragonBallManager) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetDragonBallManager");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetDragonBallManager) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetDragonBallManager");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetDragonBallManager, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetDragonBallManager::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetHeightFogs
// 0x0018 (0x0018 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetHeightFogs final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AExponentialHeightFog*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetHeightFogs) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetHeightFogs");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetHeightFogs) == 0x000018, "Wrong size on AT_BlueprintFunctionLibrary_GetHeightFogs");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetHeightFogs, TagName) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetHeightFogs::TagName' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetHeightFogs, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetHeightFogs::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetQuestManager
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetQuestManager final
{
public:
	class UQuestManager*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetQuestManager) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetQuestManager");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetQuestManager) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetQuestManager");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetQuestManager, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetQuestManager::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetRaceGameManager
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetRaceGameManager final
{
public:
	class URaceGameManager*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetRaceGameManager) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetRaceGameManager");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetRaceGameManager) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetRaceGameManager");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetRaceGameManager, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetRaceGameManager::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetRideManager
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetRideManager final
{
public:
	class URideManager*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetRideManager) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetRideManager");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetRideManager) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetRideManager");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetRideManager, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetRideManager::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetSkyConditionManager
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetSkyConditionManager final
{
public:
	class USkyConditionManager*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetSkyConditionManager) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetSkyConditionManager");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetSkyConditionManager) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_GetSkyConditionManager");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetSkyConditionManager, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetSkyConditionManager::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetSkyLights
// 0x0018 (0x0018 - 0x0000)
struct AT_BlueprintFunctionLibrary_GetSkyLights final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASkyLight*>                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetSkyLights) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_GetSkyLights");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetSkyLights) == 0x000018, "Wrong size on AT_BlueprintFunctionLibrary_GetSkyLights");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetSkyLights, TagName) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetSkyLights::TagName' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetSkyLights, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetSkyLights::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.GetToClearFlagSuperTraining
// 0x000C (0x000C - 0x0000)
struct AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining final
{
public:
	ESuperTrainingType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrainingID;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               Character;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining");
static_assert(sizeof(AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining) == 0x00000C, "Wrong size on AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining, Type) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining::Type' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining, TrainingID) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining::TrainingID' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining, Character) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining::Character' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining, ReturnValue) == 0x000009, "Member 'AT_BlueprintFunctionLibrary_GetToClearFlagSuperTraining::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.HasSkill
// 0x0018 (0x0018 - 0x0000)
struct AT_BlueprintFunctionLibrary_HasSkill final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SkillId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_HasSkill) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_HasSkill");
static_assert(sizeof(AT_BlueprintFunctionLibrary_HasSkill) == 0x000018, "Wrong size on AT_BlueprintFunctionLibrary_HasSkill");
static_assert(offsetof(AT_BlueprintFunctionLibrary_HasSkill, CharacterType) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_HasSkill::CharacterType' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_HasSkill, SkillId) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_HasSkill::SkillId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_HasSkill, ReturnValue) == 0x000010, "Member 'AT_BlueprintFunctionLibrary_HasSkill::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.isFlagOn
// 0x000C (0x000C - 0x0000)
struct AT_BlueprintFunctionLibrary_IsFlagOn final
{
public:
	int32                                         Source;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Enum;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_IsFlagOn) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_IsFlagOn");
static_assert(sizeof(AT_BlueprintFunctionLibrary_IsFlagOn) == 0x00000C, "Wrong size on AT_BlueprintFunctionLibrary_IsFlagOn");
static_assert(offsetof(AT_BlueprintFunctionLibrary_IsFlagOn, Source) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_IsFlagOn::Source' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_IsFlagOn, Enum) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_IsFlagOn::Enum' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_IsFlagOn, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_IsFlagOn::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.IsGameModeStateField
// 0x0001 (0x0001 - 0x0000)
struct AT_BlueprintFunctionLibrary_IsGameModeStateField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_IsGameModeStateField) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_IsGameModeStateField");
static_assert(sizeof(AT_BlueprintFunctionLibrary_IsGameModeStateField) == 0x000001, "Wrong size on AT_BlueprintFunctionLibrary_IsGameModeStateField");
static_assert(offsetof(AT_BlueprintFunctionLibrary_IsGameModeStateField, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_IsGameModeStateField::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.LaunchSuperTrainingMenu
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenu final
{
public:
	class UActorComponent*                        OwnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenu) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenu");
static_assert(sizeof(AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenu) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenu");
static_assert(offsetof(AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenu, OwnerComponent) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenu::OwnerComponent' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.LaunchSuperTrainingMenuFindlistID
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenuFindlistID final
{
public:
	class FString                                 FindlistID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenuFindlistID) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenuFindlistID");
static_assert(sizeof(AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenuFindlistID) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenuFindlistID");
static_assert(offsetof(AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenuFindlistID, FindlistID) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_LaunchSuperTrainingMenuFindlistID::FindlistID' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ModifyBattleHudAppearance
// 0x0001 (0x0001 - 0x0000)
struct AT_BlueprintFunctionLibrary_ModifyBattleHudAppearance final
{
public:
	EPlayerBattleHUDAppearance                    InApperance;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ModifyBattleHudAppearance) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_ModifyBattleHudAppearance");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ModifyBattleHudAppearance) == 0x000001, "Wrong size on AT_BlueprintFunctionLibrary_ModifyBattleHudAppearance");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ModifyBattleHudAppearance, InApperance) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ModifyBattleHudAppearance::InApperance' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ModifySpGaugeAppearance
// 0x0001 (0x0001 - 0x0000)
struct AT_BlueprintFunctionLibrary_ModifySpGaugeAppearance final
{
public:
	ESpGaugeOverlayAppearance                     InApperance;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ModifySpGaugeAppearance) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_ModifySpGaugeAppearance");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ModifySpGaugeAppearance) == 0x000001, "Wrong size on AT_BlueprintFunctionLibrary_ModifySpGaugeAppearance");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ModifySpGaugeAppearance, InApperance) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ModifySpGaugeAppearance::InApperance' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.OpenCommunityMenuByTutorialMode
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_OpenCommunityMenuByTutorialMode final
{
public:
	class FName                                   UniqueId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_OpenCommunityMenuByTutorialMode) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_OpenCommunityMenuByTutorialMode");
static_assert(sizeof(AT_BlueprintFunctionLibrary_OpenCommunityMenuByTutorialMode) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_OpenCommunityMenuByTutorialMode");
static_assert(offsetof(AT_BlueprintFunctionLibrary_OpenCommunityMenuByTutorialMode, UniqueId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_OpenCommunityMenuByTutorialMode::UniqueId' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.OpenCookingMenuChichi
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_OpenCookingMenuChichi final
{
public:
	class UActorComponent*                        OwnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_OpenCookingMenuChichi) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_OpenCookingMenuChichi");
static_assert(sizeof(AT_BlueprintFunctionLibrary_OpenCookingMenuChichi) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_OpenCookingMenuChichi");
static_assert(offsetof(AT_BlueprintFunctionLibrary_OpenCookingMenuChichi, OwnerComponent) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_OpenCookingMenuChichi::OwnerComponent' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.OpenCookingMenuChichiActorName
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_OpenCookingMenuChichiActorName final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_OpenCookingMenuChichiActorName) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_OpenCookingMenuChichiActorName");
static_assert(sizeof(AT_BlueprintFunctionLibrary_OpenCookingMenuChichiActorName) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_OpenCookingMenuChichiActorName");
static_assert(offsetof(AT_BlueprintFunctionLibrary_OpenCookingMenuChichiActorName, ActorName) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_OpenCookingMenuChichiActorName::ActorName' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.OpenItemMenuByTutorialMode
// 0x0001 (0x0001 - 0x0000)
struct AT_BlueprintFunctionLibrary_OpenItemMenuByTutorialMode final
{
public:
	EQuestTutorialType                            TutorialType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_OpenItemMenuByTutorialMode) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_OpenItemMenuByTutorialMode");
static_assert(sizeof(AT_BlueprintFunctionLibrary_OpenItemMenuByTutorialMode) == 0x000001, "Wrong size on AT_BlueprintFunctionLibrary_OpenItemMenuByTutorialMode");
static_assert(offsetof(AT_BlueprintFunctionLibrary_OpenItemMenuByTutorialMode, TutorialType) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_OpenItemMenuByTutorialMode::TutorialType' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.OpenZCollectionBreakthroughTraining
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_OpenZCollectionBreakthroughTraining final
{
public:
	class FName                                   EventBattleID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_OpenZCollectionBreakthroughTraining) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_OpenZCollectionBreakthroughTraining");
static_assert(sizeof(AT_BlueprintFunctionLibrary_OpenZCollectionBreakthroughTraining) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_OpenZCollectionBreakthroughTraining");
static_assert(offsetof(AT_BlueprintFunctionLibrary_OpenZCollectionBreakthroughTraining, EventBattleID) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_OpenZCollectionBreakthroughTraining::EventBattleID' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.OpenZCollectionChallengeToGodOfDestruction
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_OpenZCollectionChallengeToGodOfDestruction final
{
public:
	class FName                                   EventBattleID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_OpenZCollectionChallengeToGodOfDestruction) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_OpenZCollectionChallengeToGodOfDestruction");
static_assert(sizeof(AT_BlueprintFunctionLibrary_OpenZCollectionChallengeToGodOfDestruction) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_OpenZCollectionChallengeToGodOfDestruction");
static_assert(offsetof(AT_BlueprintFunctionLibrary_OpenZCollectionChallengeToGodOfDestruction, EventBattleID) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_OpenZCollectionChallengeToGodOfDestruction::EventBattleID' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.OverrideSpGaugeValueDisplay
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMakeVisible;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay");
static_assert(sizeof(AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay");
static_assert(offsetof(AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay, InValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay::InValue' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay, bInMakeVisible) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_OverrideSpGaugeValueDisplay::bInMakeVisible' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.PauseMainQuestTitleAnim
// 0x0020 (0x0020 - 0x0000)
struct AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim");
static_assert(sizeof(AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim) == 0x000020, "Wrong size on AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim");
static_assert(offsetof(AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim, WorldContextObject) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim, LatentInfo) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_PauseMainQuestTitleAnim::LatentInfo' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.PermissionSkill
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_PermissionSkill final
{
public:
	class FName                                   SkillId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_PermissionSkill) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_PermissionSkill");
static_assert(sizeof(AT_BlueprintFunctionLibrary_PermissionSkill) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_PermissionSkill");
static_assert(offsetof(AT_BlueprintFunctionLibrary_PermissionSkill, SkillId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_PermissionSkill::SkillId' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.PhaseID2QuestID
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_PhaseID2QuestID final
{
public:
	class FName                                   InPhaseID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_PhaseID2QuestID) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_PhaseID2QuestID");
static_assert(sizeof(AT_BlueprintFunctionLibrary_PhaseID2QuestID) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_PhaseID2QuestID");
static_assert(offsetof(AT_BlueprintFunctionLibrary_PhaseID2QuestID, InPhaseID) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_PhaseID2QuestID::InPhaseID' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_PhaseID2QuestID, ReturnValue) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_PhaseID2QuestID::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.PlayBgm
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_PlayBgm final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_PlayBgm) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_PlayBgm");
static_assert(sizeof(AT_BlueprintFunctionLibrary_PlayBgm) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_PlayBgm");
static_assert(offsetof(AT_BlueprintFunctionLibrary_PlayBgm, ID) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_PlayBgm::ID' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.Progress_DebugSet
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_Progress_DebugSet final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase_no;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_Progress_DebugSet) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_Progress_DebugSet");
static_assert(sizeof(AT_BlueprintFunctionLibrary_Progress_DebugSet) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_Progress_DebugSet");
static_assert(offsetof(AT_BlueprintFunctionLibrary_Progress_DebugSet, Name_0) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_Progress_DebugSet::Name_0' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_Progress_DebugSet, Phase_no) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_Progress_DebugSet::Phase_no' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.Progress_GetName
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_Progress_GetName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_Progress_GetName) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_Progress_GetName");
static_assert(sizeof(AT_BlueprintFunctionLibrary_Progress_GetName) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_Progress_GetName");
static_assert(offsetof(AT_BlueprintFunctionLibrary_Progress_GetName, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_Progress_GetName::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.Progress_Set
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_Progress_Set final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase_no;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_Progress_Set) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_Progress_Set");
static_assert(sizeof(AT_BlueprintFunctionLibrary_Progress_Set) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_Progress_Set");
static_assert(offsetof(AT_BlueprintFunctionLibrary_Progress_Set, Name_0) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_Progress_Set::Name_0' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_Progress_Set, Phase_no) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_Progress_Set::Phase_no' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ReleasedCpl071
// 0x0001 (0x0001 - 0x0000)
struct AT_BlueprintFunctionLibrary_ReleasedCpl071 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ReleasedCpl071) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_ReleasedCpl071");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ReleasedCpl071) == 0x000001, "Wrong size on AT_BlueprintFunctionLibrary_ReleasedCpl071");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReleasedCpl071, ReturnValue) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ReleasedCpl071::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ReplaceFloatMacro
// 0x0030 (0x0030 - 0x0000)
struct AT_BlueprintFunctionLibrary_ReplaceFloatMacro final
{
public:
	class FString                                 TxtId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 RepplaceFloatCtn;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ReplaceFloatMacro) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_ReplaceFloatMacro");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ReplaceFloatMacro) == 0x000030, "Wrong size on AT_BlueprintFunctionLibrary_ReplaceFloatMacro");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceFloatMacro, TxtId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ReplaceFloatMacro::TxtId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceFloatMacro, RepplaceFloatCtn) == 0x000010, "Member 'AT_BlueprintFunctionLibrary_ReplaceFloatMacro::RepplaceFloatCtn' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceFloatMacro, ReturnValue) == 0x000020, "Member 'AT_BlueprintFunctionLibrary_ReplaceFloatMacro::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ReplaceIntegerMacro
// 0x0030 (0x0030 - 0x0000)
struct AT_BlueprintFunctionLibrary_ReplaceIntegerMacro final
{
public:
	class FString                                 TxtId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReplaceIntCtn;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ReplaceIntegerMacro) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_ReplaceIntegerMacro");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ReplaceIntegerMacro) == 0x000030, "Wrong size on AT_BlueprintFunctionLibrary_ReplaceIntegerMacro");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceIntegerMacro, TxtId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ReplaceIntegerMacro::TxtId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceIntegerMacro, ReplaceIntCtn) == 0x000010, "Member 'AT_BlueprintFunctionLibrary_ReplaceIntegerMacro::ReplaceIntCtn' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceIntegerMacro, ReturnValue) == 0x000020, "Member 'AT_BlueprintFunctionLibrary_ReplaceIntegerMacro::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ReplaceTxtMacro
// 0x0030 (0x0030 - 0x0000)
struct AT_BlueprintFunctionLibrary_ReplaceTxtMacro final
{
public:
	class FString                                 TxtId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReplaceTxtIdCtn;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ReplaceTxtMacro) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_ReplaceTxtMacro");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ReplaceTxtMacro) == 0x000030, "Wrong size on AT_BlueprintFunctionLibrary_ReplaceTxtMacro");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceTxtMacro, TxtId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ReplaceTxtMacro::TxtId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceTxtMacro, ReplaceTxtIdCtn) == 0x000010, "Member 'AT_BlueprintFunctionLibrary_ReplaceTxtMacro::ReplaceTxtIdCtn' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ReplaceTxtMacro, ReturnValue) == 0x000020, "Member 'AT_BlueprintFunctionLibrary_ReplaceTxtMacro::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.RequestBattleDemoDamage
// 0x0004 (0x0004 - 0x0000)
struct AT_BlueprintFunctionLibrary_RequestBattleDemoDamage final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_RequestBattleDemoDamage) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_RequestBattleDemoDamage");
static_assert(sizeof(AT_BlueprintFunctionLibrary_RequestBattleDemoDamage) == 0x000004, "Wrong size on AT_BlueprintFunctionLibrary_RequestBattleDemoDamage");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestBattleDemoDamage, InRate) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_RequestBattleDemoDamage::InRate' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.RequestCtrlWindow
// 0x0001 (0x0001 - 0x0000)
struct AT_BlueprintFunctionLibrary_RequestCtrlWindow final
{
public:
	bool                                          InbCtrlWindow;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_RequestCtrlWindow) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_RequestCtrlWindow");
static_assert(sizeof(AT_BlueprintFunctionLibrary_RequestCtrlWindow) == 0x000001, "Wrong size on AT_BlueprintFunctionLibrary_RequestCtrlWindow");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestCtrlWindow, InbCtrlWindow) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_RequestCtrlWindow::InbCtrlWindow' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.RequestInDisplayNameUI
// 0x0018 (0x0018 - 0x0000)
struct AT_BlueprintFunctionLibrary_RequestInDisplayNameUI final
{
public:
	class FName                                   NameMsg;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DispPos;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_RequestInDisplayNameUI) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_RequestInDisplayNameUI");
static_assert(sizeof(AT_BlueprintFunctionLibrary_RequestInDisplayNameUI) == 0x000018, "Wrong size on AT_BlueprintFunctionLibrary_RequestInDisplayNameUI");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayNameUI, NameMsg) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayNameUI::NameMsg' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayNameUI, DispPos) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayNameUI::DispPos' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayNameUI, DisplayTime) == 0x000010, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayNameUI::DisplayTime' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayNameUI, ReturnValue) == 0x000014, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayNameUI::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.RequestInDisplayPopularNameUI
// 0x0028 (0x0028 - 0x0000)
struct AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI final
{
public:
	class FName                                   NameMsg;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PopularNameMsg;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DispPos;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLargeSize;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI");
static_assert(sizeof(AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI) == 0x000028, "Wrong size on AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI, NameMsg) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI::NameMsg' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI, PopularNameMsg) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI::PopularNameMsg' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI, DispPos) == 0x000010, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI::DispPos' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI, DisplayTime) == 0x000018, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI::DisplayTime' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI, IsLargeSize) == 0x00001C, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI::IsLargeSize' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI, ReturnValue) == 0x000020, "Member 'AT_BlueprintFunctionLibrary_RequestInDisplayPopularNameUI::ReturnValue' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.RequestLoadUiCaptureByCharacter
// 0x0003 (0x0003 - 0x0000)
struct AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationId;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FormID;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter");
static_assert(sizeof(AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter) == 0x000003, "Wrong size on AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter, CharacterType) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter::CharacterType' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter, VariationId) == 0x000001, "Member 'AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter::VariationId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter, FormID) == 0x000002, "Member 'AT_BlueprintFunctionLibrary_RequestLoadUiCaptureByCharacter::FormID' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.RequestLoadUiCaptureById
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_RequestLoadUiCaptureById final
{
public:
	class FName                                   MasterId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_RequestLoadUiCaptureById) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_RequestLoadUiCaptureById");
static_assert(sizeof(AT_BlueprintFunctionLibrary_RequestLoadUiCaptureById) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_RequestLoadUiCaptureById");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestLoadUiCaptureById, MasterId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_RequestLoadUiCaptureById::MasterId' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.RequestRushInputQteDemoDamage
// 0x0004 (0x0004 - 0x0000)
struct AT_BlueprintFunctionLibrary_RequestRushInputQteDemoDamage final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_RequestRushInputQteDemoDamage) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_RequestRushInputQteDemoDamage");
static_assert(sizeof(AT_BlueprintFunctionLibrary_RequestRushInputQteDemoDamage) == 0x000004, "Wrong size on AT_BlueprintFunctionLibrary_RequestRushInputQteDemoDamage");
static_assert(offsetof(AT_BlueprintFunctionLibrary_RequestRushInputQteDemoDamage, InRate) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_RequestRushInputQteDemoDamage::InRate' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.SetFieldRideSelectBlock
// 0x0001 (0x0001 - 0x0000)
struct AT_BlueprintFunctionLibrary_SetFieldRideSelectBlock final
{
public:
	bool                                          bBlock;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_SetFieldRideSelectBlock) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_SetFieldRideSelectBlock");
static_assert(sizeof(AT_BlueprintFunctionLibrary_SetFieldRideSelectBlock) == 0x000001, "Wrong size on AT_BlueprintFunctionLibrary_SetFieldRideSelectBlock");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetFieldRideSelectBlock, bBlock) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_SetFieldRideSelectBlock::bBlock' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.SetKeyGuideCtrlMode
// 0x0002 (0x0002 - 0x0000)
struct AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode final
{
public:
	EKeyGuideCtrlMode                             InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoIn;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode");
static_assert(sizeof(AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode) == 0x000002, "Wrong size on AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode, InMode) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode::InMode' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode, bAutoIn) == 0x000001, "Member 'AT_BlueprintFunctionLibrary_SetKeyGuideCtrlMode::bAutoIn' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.SetKeyGuideType
// 0x0001 (0x0001 - 0x0000)
struct AT_BlueprintFunctionLibrary_SetKeyGuideType final
{
public:
	EKeyGuideType                                 InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_SetKeyGuideType) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_SetKeyGuideType");
static_assert(sizeof(AT_BlueprintFunctionLibrary_SetKeyGuideType) == 0x000001, "Wrong size on AT_BlueprintFunctionLibrary_SetKeyGuideType");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetKeyGuideType, InMode) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_SetKeyGuideType::InMode' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.SetScreenResolution
// 0x000C (0x000C - 0x0000)
struct AT_BlueprintFunctionLibrary_SetScreenResolution final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindowMode                                   WindowMode;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_SetScreenResolution) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_SetScreenResolution");
static_assert(sizeof(AT_BlueprintFunctionLibrary_SetScreenResolution) == 0x00000C, "Wrong size on AT_BlueprintFunctionLibrary_SetScreenResolution");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetScreenResolution, Width) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_SetScreenResolution::Width' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetScreenResolution, Height) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_SetScreenResolution::Height' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetScreenResolution, WindowMode) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_SetScreenResolution::WindowMode' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.SetToClearFlagSuperTraining
// 0x000C (0x000C - 0x0000)
struct AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining final
{
public:
	ESuperTrainingType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrainingID;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               Character;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining");
static_assert(sizeof(AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining) == 0x00000C, "Wrong size on AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining, Type) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining::Type' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining, TrainingID) == 0x000004, "Member 'AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining::TrainingID' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining, Character) == 0x000008, "Member 'AT_BlueprintFunctionLibrary_SetToClearFlagSuperTraining::Character' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ShutDownSuperTrainingMenu
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenu final
{
public:
	class UActorComponent*                        OwnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenu) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenu");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenu) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenu");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenu, OwnerComponent) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenu::OwnerComponent' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.ShutDownSuperTrainingMenuFindlistID
// 0x0010 (0x0010 - 0x0000)
struct AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenuFindlistID final
{
public:
	class FString                                 FindlistID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenuFindlistID) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenuFindlistID");
static_assert(sizeof(AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenuFindlistID) == 0x000010, "Wrong size on AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenuFindlistID");
static_assert(offsetof(AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenuFindlistID, FindlistID) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_ShutDownSuperTrainingMenuFindlistID::FindlistID' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.StartQuest
// 0x0080 (0x0080 - 0x0000)
struct AT_BlueprintFunctionLibrary_StartQuest final
{
public:
	struct FUIQuestInfo                           InQuestInfo;                                       // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_StartQuest) == 0x000008, "Wrong alignment on AT_BlueprintFunctionLibrary_StartQuest");
static_assert(sizeof(AT_BlueprintFunctionLibrary_StartQuest) == 0x000080, "Wrong size on AT_BlueprintFunctionLibrary_StartQuest");
static_assert(offsetof(AT_BlueprintFunctionLibrary_StartQuest, InQuestInfo) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_StartQuest::InQuestInfo' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.UnloadUiCaptureByCharacter
// 0x0003 (0x0003 - 0x0000)
struct AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationId;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FormID;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter) == 0x000001, "Wrong alignment on AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter");
static_assert(sizeof(AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter) == 0x000003, "Wrong size on AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter");
static_assert(offsetof(AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter, CharacterType) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter::CharacterType' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter, VariationId) == 0x000001, "Member 'AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter::VariationId' has a wrong offset!");
static_assert(offsetof(AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter, FormID) == 0x000002, "Member 'AT_BlueprintFunctionLibrary_UnloadUiCaptureByCharacter::FormID' has a wrong offset!");

// Function AT.AT_BlueprintFunctionLibrary.UnloadUiCaptureById
// 0x0008 (0x0008 - 0x0000)
struct AT_BlueprintFunctionLibrary_UnloadUiCaptureById final
{
public:
	class FName                                   MasterId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BlueprintFunctionLibrary_UnloadUiCaptureById) == 0x000004, "Wrong alignment on AT_BlueprintFunctionLibrary_UnloadUiCaptureById");
static_assert(sizeof(AT_BlueprintFunctionLibrary_UnloadUiCaptureById) == 0x000008, "Wrong size on AT_BlueprintFunctionLibrary_UnloadUiCaptureById");
static_assert(offsetof(AT_BlueprintFunctionLibrary_UnloadUiCaptureById, MasterId) == 0x000000, "Member 'AT_BlueprintFunctionLibrary_UnloadUiCaptureById::MasterId' has a wrong offset!");

// Function AT.AT_UI3DCaptureOptional.CompleteLoad
// 0x0008 (0x0008 - 0x0000)
struct AT_UI3DCaptureOptional_CompleteLoad final
{
public:
	class UATDataAssetUiCaptureAsyncLoad*         Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureOptional_CompleteLoad) == 0x000008, "Wrong alignment on AT_UI3DCaptureOptional_CompleteLoad");
static_assert(sizeof(AT_UI3DCaptureOptional_CompleteLoad) == 0x000008, "Wrong size on AT_UI3DCaptureOptional_CompleteLoad");
static_assert(offsetof(AT_UI3DCaptureOptional_CompleteLoad, Loader) == 0x000000, "Member 'AT_UI3DCaptureOptional_CompleteLoad::Loader' has a wrong offset!");

// Function AT.UpperFacialAnimation.SetEnableUpperFaceAnimation
// 0x0001 (0x0001 - 0x0000)
struct UpperFacialAnimation_SetEnableUpperFaceAnimation final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperFacialAnimation_SetEnableUpperFaceAnimation) == 0x000001, "Wrong alignment on UpperFacialAnimation_SetEnableUpperFaceAnimation");
static_assert(sizeof(UpperFacialAnimation_SetEnableUpperFaceAnimation) == 0x000001, "Wrong size on UpperFacialAnimation_SetEnableUpperFaceAnimation");
static_assert(offsetof(UpperFacialAnimation_SetEnableUpperFaceAnimation, bEnable) == 0x000000, "Member 'UpperFacialAnimation_SetEnableUpperFaceAnimation::bEnable' has a wrong offset!");

// Function AT.UpperFacialAnimation.IsEnableUpperFaceAnimation
// 0x0001 (0x0001 - 0x0000)
struct UpperFacialAnimation_IsEnableUpperFaceAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperFacialAnimation_IsEnableUpperFaceAnimation) == 0x000001, "Wrong alignment on UpperFacialAnimation_IsEnableUpperFaceAnimation");
static_assert(sizeof(UpperFacialAnimation_IsEnableUpperFaceAnimation) == 0x000001, "Wrong size on UpperFacialAnimation_IsEnableUpperFaceAnimation");
static_assert(offsetof(UpperFacialAnimation_IsEnableUpperFaceAnimation, ReturnValue) == 0x000000, "Member 'UpperFacialAnimation_IsEnableUpperFaceAnimation::ReturnValue' has a wrong offset!");

// Function AT.AreaBoundsVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct AreaBoundsVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaBoundsVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on AreaBoundsVolume_OnOverlapBegin");
static_assert(sizeof(AreaBoundsVolume_OnOverlapBegin) == 0x000010, "Wrong size on AreaBoundsVolume_OnOverlapBegin");
static_assert(offsetof(AreaBoundsVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'AreaBoundsVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AreaBoundsVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'AreaBoundsVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.AreaBoundsVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct AreaBoundsVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaBoundsVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on AreaBoundsVolume_OnOverlapEnd");
static_assert(sizeof(AreaBoundsVolume_OnOverlapEnd) == 0x000010, "Wrong size on AreaBoundsVolume_OnOverlapEnd");
static_assert(offsetof(AreaBoundsVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'AreaBoundsVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AreaBoundsVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'AreaBoundsVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.TriggerStaticActor.OnTouchSphereCollision
// 0x0008 (0x0008 - 0x0000)
struct TriggerStaticActor_OnTouchSphereCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerStaticActor_OnTouchSphereCollision) == 0x000008, "Wrong alignment on TriggerStaticActor_OnTouchSphereCollision");
static_assert(sizeof(TriggerStaticActor_OnTouchSphereCollision) == 0x000008, "Wrong size on TriggerStaticActor_OnTouchSphereCollision");
static_assert(offsetof(TriggerStaticActor_OnTouchSphereCollision, Actor) == 0x000000, "Member 'TriggerStaticActor_OnTouchSphereCollision::Actor' has a wrong offset!");

// Function AT.TriggerStaticActor.OnUntouchSphereCollision
// 0x0008 (0x0008 - 0x0000)
struct TriggerStaticActor_OnUntouchSphereCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerStaticActor_OnUntouchSphereCollision) == 0x000008, "Wrong alignment on TriggerStaticActor_OnUntouchSphereCollision");
static_assert(sizeof(TriggerStaticActor_OnUntouchSphereCollision) == 0x000008, "Wrong size on TriggerStaticActor_OnUntouchSphereCollision");
static_assert(offsetof(TriggerStaticActor_OnUntouchSphereCollision, Actor) == 0x000000, "Member 'TriggerStaticActor_OnUntouchSphereCollision::Actor' has a wrong offset!");

// Function AT.TriggerStaticActor.IsBattleEndCallable
// 0x0001 (0x0001 - 0x0000)
struct TriggerStaticActor_IsBattleEndCallable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerStaticActor_IsBattleEndCallable) == 0x000001, "Wrong alignment on TriggerStaticActor_IsBattleEndCallable");
static_assert(sizeof(TriggerStaticActor_IsBattleEndCallable) == 0x000001, "Wrong size on TriggerStaticActor_IsBattleEndCallable");
static_assert(offsetof(TriggerStaticActor_IsBattleEndCallable, ReturnValue) == 0x000000, "Member 'TriggerStaticActor_IsBattleEndCallable::ReturnValue' has a wrong offset!");

// Function AT.AT_BaseHUD.CanvasSize
// 0x0008 (0x0008 - 0x0000)
struct AT_BaseHUD_CanvasSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_BaseHUD_CanvasSize) == 0x000004, "Wrong alignment on AT_BaseHUD_CanvasSize");
static_assert(sizeof(AT_BaseHUD_CanvasSize) == 0x000008, "Wrong size on AT_BaseHUD_CanvasSize");
static_assert(offsetof(AT_BaseHUD_CanvasSize, ReturnValue) == 0x000000, "Member 'AT_BaseHUD_CanvasSize::ReturnValue' has a wrong offset!");

// Function AT.AnimNotify_SpawnEnemyAttackSign.OnFinishedSignEffectST
// 0x0008 (0x0008 - 0x0000)
struct AnimNotify_SpawnEnemyAttackSign_OnFinishedSignEffectST final
{
public:
	class UParticleSystemComponent*               InParticle;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_SpawnEnemyAttackSign_OnFinishedSignEffectST) == 0x000008, "Wrong alignment on AnimNotify_SpawnEnemyAttackSign_OnFinishedSignEffectST");
static_assert(sizeof(AnimNotify_SpawnEnemyAttackSign_OnFinishedSignEffectST) == 0x000008, "Wrong size on AnimNotify_SpawnEnemyAttackSign_OnFinishedSignEffectST");
static_assert(offsetof(AnimNotify_SpawnEnemyAttackSign_OnFinishedSignEffectST, InParticle) == 0x000000, "Member 'AnimNotify_SpawnEnemyAttackSign_OnFinishedSignEffectST::InParticle' has a wrong offset!");

// Function AT.ATDataAssetAsyncLoad.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct ATDataAssetAsyncLoad_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDataAssetAsyncLoad_IsLoaded) == 0x000001, "Wrong alignment on ATDataAssetAsyncLoad_IsLoaded");
static_assert(sizeof(ATDataAssetAsyncLoad_IsLoaded) == 0x000001, "Wrong size on ATDataAssetAsyncLoad_IsLoaded");
static_assert(offsetof(ATDataAssetAsyncLoad_IsLoaded, ReturnValue) == 0x000000, "Member 'ATDataAssetAsyncLoad_IsLoaded::ReturnValue' has a wrong offset!");

// Function AT.ATActCpl036BSkill004.Cpl036BSkill004ResetCamera
// 0x0010 (0x0010 - 0x0000)
struct ATActCpl036BSkill004_Cpl036BSkill004ResetCamera final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl036BSkill004_Cpl036BSkill004ResetCamera) == 0x000008, "Wrong alignment on ATActCpl036BSkill004_Cpl036BSkill004ResetCamera");
static_assert(sizeof(ATActCpl036BSkill004_Cpl036BSkill004ResetCamera) == 0x000010, "Wrong size on ATActCpl036BSkill004_Cpl036BSkill004ResetCamera");
static_assert(offsetof(ATActCpl036BSkill004_Cpl036BSkill004ResetCamera, InCharacter) == 0x000000, "Member 'ATActCpl036BSkill004_Cpl036BSkill004ResetCamera::InCharacter' has a wrong offset!");
static_assert(offsetof(ATActCpl036BSkill004_Cpl036BSkill004ResetCamera, InActionIdPrev) == 0x000008, "Member 'ATActCpl036BSkill004_Cpl036BSkill004ResetCamera::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATActCpl036BSkill004_Cpl036BSkill004ResetCamera, InActionIdNext) == 0x00000C, "Member 'ATActCpl036BSkill004_Cpl036BSkill004ResetCamera::InActionIdNext' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AddDeactivateCharacterInEvent
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_AddDeactivateCharacterInEvent final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_AddDeactivateCharacterInEvent) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_AddDeactivateCharacterInEvent");
static_assert(sizeof(EventBlueprintFunctionLibrary_AddDeactivateCharacterInEvent) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_AddDeactivateCharacterInEvent");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddDeactivateCharacterInEvent, CharacterName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AddDeactivateCharacterInEvent::CharacterName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AddDestination
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_AddDestination final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDESTINATION_TYPE                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_AddDestination) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_AddDestination");
static_assert(sizeof(EventBlueprintFunctionLibrary_AddDestination) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_AddDestination");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddDestination, Actor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AddDestination::Actor' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddDestination, Type) == 0x000008, "Member 'EventBlueprintFunctionLibrary_AddDestination::Type' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AddItem
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_AddItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_AddItem) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_AddItem");
static_assert(sizeof(EventBlueprintFunctionLibrary_AddItem) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_AddItem");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddItem, ItemId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AddItem::ItemId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddItem, Num) == 0x000008, "Member 'EventBlueprintFunctionLibrary_AddItem::Num' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AddItemsToInventory
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_AddItemsToInventory final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_AddItemsToInventory) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_AddItemsToInventory");
static_assert(sizeof(EventBlueprintFunctionLibrary_AddItemsToInventory) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_AddItemsToInventory");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddItemsToInventory, ItemId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AddItemsToInventory::ItemId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddItemsToInventory, Num) == 0x000008, "Member 'EventBlueprintFunctionLibrary_AddItemsToInventory::Num' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AddQuestCompletedCount
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_AddQuestCompletedCount final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_AddQuestCompletedCount) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_AddQuestCompletedCount");
static_assert(sizeof(EventBlueprintFunctionLibrary_AddQuestCompletedCount) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_AddQuestCompletedCount");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddQuestCompletedCount, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AddQuestCompletedCount::QuestId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AddSpeakerMap
// 0x0020 (0x0020 - 0x0000)
struct EventBlueprintFunctionLibrary_AddSpeakerMap final
{
public:
	class FString                                 SpeakerID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_AddSpeakerMap) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_AddSpeakerMap");
static_assert(sizeof(EventBlueprintFunctionLibrary_AddSpeakerMap) == 0x000020, "Wrong size on EventBlueprintFunctionLibrary_AddSpeakerMap");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddSpeakerMap, SpeakerID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AddSpeakerMap::SpeakerID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddSpeakerMap, ActorName) == 0x000010, "Member 'EventBlueprintFunctionLibrary_AddSpeakerMap::ActorName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AddSpeakerMapActor
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_AddSpeakerMapActor final
{
public:
	class FString                                 SpeakerID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_AddSpeakerMapActor) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_AddSpeakerMapActor");
static_assert(sizeof(EventBlueprintFunctionLibrary_AddSpeakerMapActor) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_AddSpeakerMapActor");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddSpeakerMapActor, SpeakerID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AddSpeakerMapActor::SpeakerID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddSpeakerMapActor, Actor) == 0x000010, "Member 'EventBlueprintFunctionLibrary_AddSpeakerMapActor::Actor' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AddSpeakerMapPlayer
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_AddSpeakerMapPlayer final
{
public:
	class FString                                 SpeakerID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_AddSpeakerMapPlayer) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_AddSpeakerMapPlayer");
static_assert(sizeof(EventBlueprintFunctionLibrary_AddSpeakerMapPlayer) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_AddSpeakerMapPlayer");
static_assert(offsetof(EventBlueprintFunctionLibrary_AddSpeakerMapPlayer, SpeakerID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AddSpeakerMapPlayer::SpeakerID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AndroidAssaultAreaActivate
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TakeOver;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate");
static_assert(sizeof(EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate");
static_assert(offsetof(EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate, AreaName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate::AreaName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate, TakeOver) == 0x000008, "Member 'EventBlueprintFunctionLibrary_AndroidAssaultAreaActivate::TakeOver' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AndroidAssaultAreaActivateGroup
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup final
{
public:
	class FName                                   AreaGroup;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TakeOver;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup");
static_assert(sizeof(EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup");
static_assert(offsetof(EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup, AreaGroup) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup::AreaGroup' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup, TakeOver) == 0x000008, "Member 'EventBlueprintFunctionLibrary_AndroidAssaultAreaActivateGroup::TakeOver' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AndroidAssaultAreaDeactivate
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivate final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivate) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivate");
static_assert(sizeof(EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivate) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivate");
static_assert(offsetof(EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivate, AreaName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivate::AreaName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AndroidAssaultAreaDeactivateGroup
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivateGroup final
{
public:
	class FName                                   AreaGroup;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivateGroup) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivateGroup");
static_assert(sizeof(EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivateGroup) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivateGroup");
static_assert(offsetof(EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivateGroup, AreaGroup) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AndroidAssaultAreaDeactivateGroup::AreaGroup' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AreaChangeTrainingRetire
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_AreaChangeTrainingRetire final
{
public:
	bool                                          bFadeOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_AreaChangeTrainingRetire) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_AreaChangeTrainingRetire");
static_assert(sizeof(EventBlueprintFunctionLibrary_AreaChangeTrainingRetire) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_AreaChangeTrainingRetire");
static_assert(offsetof(EventBlueprintFunctionLibrary_AreaChangeTrainingRetire, bFadeOut) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AreaChangeTrainingRetire::bFadeOut' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.AutoMoveToActor
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_AutoMoveToActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AutoMoveCamera;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InGoalRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharStateChange;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATCharacterAutoMoveBP                        CharChangeState;                                   // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetOffVehicle;                                    // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_AutoMoveToActor) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_AutoMoveToActor");
static_assert(sizeof(EventBlueprintFunctionLibrary_AutoMoveToActor) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_AutoMoveToActor");
static_assert(offsetof(EventBlueprintFunctionLibrary_AutoMoveToActor, Target) == 0x000000, "Member 'EventBlueprintFunctionLibrary_AutoMoveToActor::Target' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AutoMoveToActor, AutoMoveCamera) == 0x000008, "Member 'EventBlueprintFunctionLibrary_AutoMoveToActor::AutoMoveCamera' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AutoMoveToActor, InGoalRadius) == 0x000010, "Member 'EventBlueprintFunctionLibrary_AutoMoveToActor::InGoalRadius' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AutoMoveToActor, bCharStateChange) == 0x000014, "Member 'EventBlueprintFunctionLibrary_AutoMoveToActor::bCharStateChange' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AutoMoveToActor, CharChangeState) == 0x000015, "Member 'EventBlueprintFunctionLibrary_AutoMoveToActor::CharChangeState' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_AutoMoveToActor, bGetOffVehicle) == 0x000016, "Member 'EventBlueprintFunctionLibrary_AutoMoveToActor::bGetOffVehicle' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.BackTalkTimes
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_BackTalkTimes final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_BackTalkTimes) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_BackTalkTimes");
static_assert(sizeof(EventBlueprintFunctionLibrary_BackTalkTimes) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_BackTalkTimes");
static_assert(offsetof(EventBlueprintFunctionLibrary_BackTalkTimes, Actor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_BackTalkTimes::Actor' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.BreakQuest
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_BreakQuest final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_BreakQuest) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_BreakQuest");
static_assert(sizeof(EventBlueprintFunctionLibrary_BreakQuest) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_BreakQuest");
static_assert(offsetof(EventBlueprintFunctionLibrary_BreakQuest, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_BreakQuest::QuestId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CanAndroidAssaultAreaReactivate
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate final
{
public:
	class FName                                   CountName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate");
static_assert(sizeof(EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate");
static_assert(offsetof(EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate, CountName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate::CountName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_CanAndroidAssaultAreaReactivate::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CancelCrossTalk
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_CancelCrossTalk final
{
public:
	TArray<class FName>                           CrossTalkIds;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_CancelCrossTalk) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CancelCrossTalk");
static_assert(sizeof(EventBlueprintFunctionLibrary_CancelCrossTalk) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_CancelCrossTalk");
static_assert(offsetof(EventBlueprintFunctionLibrary_CancelCrossTalk, CrossTalkIds) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CancelCrossTalk::CrossTalkIds' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeActorEnable
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeActorEnable final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeActorEnable) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeActorEnable");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeActorEnable) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ChangeActorEnable");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeActorEnable, TargetActor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeActorEnable::TargetActor' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeActorEnable, bEnable) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ChangeActorEnable::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeCharacterParts
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeCharacterParts final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Variation;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeCharacterParts) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeCharacterParts");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeCharacterParts) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ChangeCharacterParts");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeCharacterParts, Character) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeCharacterParts::Character' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeCharacterParts, Variation) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ChangeCharacterParts::Variation' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeCharacterParts, Form) == 0x000009, "Member 'EventBlueprintFunctionLibrary_ChangeCharacterParts::Form' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeDragonBallState
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeDragonBallState final
{
public:
	bool                                          bUsedState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeDragonBallState) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeDragonBallState");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeDragonBallState) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_ChangeDragonBallState");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeDragonBallState, bUsedState) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeDragonBallState::bUsedState' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeFieldCondition
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeFieldCondition final
{
public:
	EQuestFieldConditionType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeFieldCondition) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeFieldCondition");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeFieldCondition) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_ChangeFieldCondition");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeFieldCondition, Type) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeFieldCondition::Type' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeFriendAIStop
// 0x0002 (0x0002 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeFriendAIStop final
{
public:
	bool                                          Flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WaitActionFlg;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeFriendAIStop) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeFriendAIStop");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeFriendAIStop) == 0x000002, "Wrong size on EventBlueprintFunctionLibrary_ChangeFriendAIStop");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeFriendAIStop, Flg) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeFriendAIStop::Flg' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeFriendAIStop, WaitActionFlg) == 0x000001, "Member 'EventBlueprintFunctionLibrary_ChangeFriendAIStop::WaitActionFlg' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeMobCharacterEnable
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeMobCharacterEnable final
{
public:
	class AAT_MobBase*                            TargetMob;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeMobCharacterEnable) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeMobCharacterEnable");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeMobCharacterEnable) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ChangeMobCharacterEnable");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeMobCharacterEnable, TargetMob) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeMobCharacterEnable::TargetMob' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeMobCharacterEnable, bEnable) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ChangeMobCharacterEnable::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeMobTalkID
// 0x0020 (0x0020 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeMobTalkID final
{
public:
	class FName                                   Actor_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Talk_id;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReset;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeMobTalkID) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeMobTalkID");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeMobTalkID) == 0x000020, "Wrong size on EventBlueprintFunctionLibrary_ChangeMobTalkID");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeMobTalkID, Actor_name) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeMobTalkID::Actor_name' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeMobTalkID, Talk_id) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ChangeMobTalkID::Talk_id' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeMobTalkID, bForceReset) == 0x000018, "Member 'EventBlueprintFunctionLibrary_ChangeMobTalkID::bForceReset' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeNpcTalkIcon
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeNpcTalkIcon final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeNpcTalkIcon) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeNpcTalkIcon");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeNpcTalkIcon) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_ChangeNpcTalkIcon");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeNpcTalkIcon, ActorName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeNpcTalkIcon::ActorName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeNpcTalkID
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeNpcTalkID final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReset;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeNpcTalkID) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeNpcTalkID");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeNpcTalkID) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_ChangeNpcTalkID");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeNpcTalkID, TargetActor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeNpcTalkID::TargetActor' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeNpcTalkID, TalkID) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ChangeNpcTalkID::TalkID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeNpcTalkID, bForceReset) == 0x000010, "Member 'EventBlueprintFunctionLibrary_ChangeNpcTalkID::bForceReset' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangePlayerParts
// 0x0002 (0x0002 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangePlayerParts final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangePlayerParts) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_ChangePlayerParts");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangePlayerParts) == 0x000002, "Wrong size on EventBlueprintFunctionLibrary_ChangePlayerParts");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangePlayerParts, Variation) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangePlayerParts::Variation' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangePlayerParts, Form) == 0x000001, "Member 'EventBlueprintFunctionLibrary_ChangePlayerParts::Form' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeQuestActorEnable
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeQuestActorEnable final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeQuestActorEnable) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeQuestActorEnable");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeQuestActorEnable) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ChangeQuestActorEnable");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeQuestActorEnable, TargetActor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeQuestActorEnable::TargetActor' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeQuestActorEnable, bEnable) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ChangeQuestActorEnable::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeQuestCharacterParts
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeQuestCharacterParts final
{
public:
	class FName                                   FindName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Variation;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeQuestCharacterParts) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeQuestCharacterParts");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeQuestCharacterParts) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ChangeQuestCharacterParts");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeQuestCharacterParts, FindName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeQuestCharacterParts::FindName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeQuestCharacterParts, Variation) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ChangeQuestCharacterParts::Variation' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeQuestCharacterParts, Form) == 0x000009, "Member 'EventBlueprintFunctionLibrary_ChangeQuestCharacterParts::Form' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeSubtitle
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeSubtitle final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InMessageId;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeSubtitle) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeSubtitle");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeSubtitle) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ChangeSubtitle");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeSubtitle, bEnable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeSubtitle::bEnable' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeSubtitle, InMessageId) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ChangeSubtitle::InMessageId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ChangeTeamMember
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_ChangeTeamMember final
{
public:
	int32                                         TeamNo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ChangeTeamMember) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_ChangeTeamMember");
static_assert(sizeof(EventBlueprintFunctionLibrary_ChangeTeamMember) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_ChangeTeamMember");
static_assert(offsetof(EventBlueprintFunctionLibrary_ChangeTeamMember, TeamNo) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ChangeTeamMember::TeamNo' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CharacterAddExp
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_CharacterAddExp final
{
public:
	ECHARACTER_TYPE                               Charatype;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddExp;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_CharacterAddExp) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_CharacterAddExp");
static_assert(sizeof(EventBlueprintFunctionLibrary_CharacterAddExp) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_CharacterAddExp");
static_assert(offsetof(EventBlueprintFunctionLibrary_CharacterAddExp, Charatype) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CharacterAddExp::Charatype' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CharacterAddExp, AddExp) == 0x000004, "Member 'EventBlueprintFunctionLibrary_CharacterAddExp::AddExp' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CheckBreakingTrigger
// 0x0028 (0x0028 - 0x0000)
struct EventBlueprintFunctionLibrary_CheckBreakingTrigger final
{
public:
	TArray<class FName>                           InOnTriggerIdList;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           InOffTriggerIdList;                                // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_CheckBreakingTrigger) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CheckBreakingTrigger");
static_assert(sizeof(EventBlueprintFunctionLibrary_CheckBreakingTrigger) == 0x000028, "Wrong size on EventBlueprintFunctionLibrary_CheckBreakingTrigger");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTrigger, InOnTriggerIdList) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTrigger::InOnTriggerIdList' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTrigger, InOffTriggerIdList) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTrigger::InOffTriggerIdList' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTrigger, ReturnValue) == 0x000020, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTrigger::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CheckBreakingTriggerFromBreakableObj
// 0x0028 (0x0028 - 0x0000)
struct EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj final
{
public:
	TArray<class AWideUseBreakablePoint*>         InOnBreakableObjects;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AWideUseBreakablePoint*>         InOffBreakableObjects;                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj");
static_assert(sizeof(EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj) == 0x000028, "Wrong size on EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj, InOnBreakableObjects) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj::InOnBreakableObjects' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj, InOffBreakableObjects) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj::InOffBreakableObjects' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj, ReturnValue) == 0x000020, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerFromBreakableObj::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CheckBreakingTriggerWithReason
// 0x0028 (0x0028 - 0x0000)
struct EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason final
{
public:
	TArray<class FName>                           InOnTriggerIdList;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           InOffTriggerIdList;                                // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBrokenReason                                 InBrokenReason;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason");
static_assert(sizeof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason) == 0x000028, "Wrong size on EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason, InOnTriggerIdList) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason::InOnTriggerIdList' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason, InOffTriggerIdList) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason::InOffTriggerIdList' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason, InBrokenReason) == 0x000020, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason::InBrokenReason' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason, ReturnValue) == 0x000021, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReason::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CheckBreakingTriggerWithReasonFromBreakableObj
// 0x0028 (0x0028 - 0x0000)
struct EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj final
{
public:
	TArray<class AWideUseBreakablePoint*>         InOnBreakableObjects;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AWideUseBreakablePoint*>         InOffBreakableObjects;                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBrokenReason                                 InBrokenReason;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj");
static_assert(sizeof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj) == 0x000028, "Wrong size on EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj, InOnBreakableObjects) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj::InOnBreakableObjects' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj, InOffBreakableObjects) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj::InOffBreakableObjects' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj, InBrokenReason) == 0x000020, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj::InBrokenReason' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj, ReturnValue) == 0x000021, "Member 'EventBlueprintFunctionLibrary_CheckBreakingTriggerWithReasonFromBreakableObj::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CountBreakingTriggerOn
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_CountBreakingTriggerOn final
{
public:
	TArray<class FName>                           InTriggerIdList;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_CountBreakingTriggerOn) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CountBreakingTriggerOn");
static_assert(sizeof(EventBlueprintFunctionLibrary_CountBreakingTriggerOn) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_CountBreakingTriggerOn");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOn, InTriggerIdList) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOn::InTriggerIdList' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOn, ReturnValue) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOn::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CountBreakingTriggerOnFromBreakableObj
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj final
{
public:
	TArray<class AWideUseBreakablePoint*>         InBreakableObjects;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj");
static_assert(sizeof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj, InBreakableObjects) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj::InBreakableObjects' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj, ReturnValue) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOnFromBreakableObj::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CountBreakingTriggerOnWithReason
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason final
{
public:
	TArray<class FName>                           InTriggerIdList;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBrokenReason                                 InBrokenReason;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason");
static_assert(sizeof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason, InTriggerIdList) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason::InTriggerIdList' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason, InBrokenReason) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason::InBrokenReason' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason, ReturnValue) == 0x000014, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReason::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CountBreakingTriggerOnWithReasonFromBreakableObj
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj final
{
public:
	TArray<class AWideUseBreakablePoint*>         InBreakableObjects;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBrokenReason                                 InBrokenReason;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj");
static_assert(sizeof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj, InBreakableObjects) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj::InBreakableObjects' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj, InBrokenReason) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj::InBrokenReason' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj, ReturnValue) == 0x000014, "Member 'EventBlueprintFunctionLibrary_CountBreakingTriggerOnWithReasonFromBreakableObj::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CreateFriendDetails
// 0x0028 (0x0028 - 0x0000)
struct EventBlueprintFunctionLibrary_CreateFriendDetails final
{
public:
	ECHARACTER_TYPE                               CHARACTER_TYPE;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFalling;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAT_Character*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_CreateFriendDetails) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_CreateFriendDetails");
static_assert(sizeof(EventBlueprintFunctionLibrary_CreateFriendDetails) == 0x000028, "Wrong size on EventBlueprintFunctionLibrary_CreateFriendDetails");
static_assert(offsetof(EventBlueprintFunctionLibrary_CreateFriendDetails, CHARACTER_TYPE) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CreateFriendDetails::CHARACTER_TYPE' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CreateFriendDetails, Pos) == 0x000004, "Member 'EventBlueprintFunctionLibrary_CreateFriendDetails::Pos' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CreateFriendDetails, Rot) == 0x000010, "Member 'EventBlueprintFunctionLibrary_CreateFriendDetails::Rot' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CreateFriendDetails, bFalling) == 0x00001C, "Member 'EventBlueprintFunctionLibrary_CreateFriendDetails::bFalling' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CreateFriendDetails, ReturnValue) == 0x000020, "Member 'EventBlueprintFunctionLibrary_CreateFriendDetails::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.CreateFusionCharacter
// 0x0002 (0x0002 - 0x0000)
struct EventBlueprintFunctionLibrary_CreateFusionCharacter final
{
public:
	ECHARACTER_TYPE                               Support_left_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               Support_right_type;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_CreateFusionCharacter) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_CreateFusionCharacter");
static_assert(sizeof(EventBlueprintFunctionLibrary_CreateFusionCharacter) == 0x000002, "Wrong size on EventBlueprintFunctionLibrary_CreateFusionCharacter");
static_assert(offsetof(EventBlueprintFunctionLibrary_CreateFusionCharacter, Support_left_type) == 0x000000, "Member 'EventBlueprintFunctionLibrary_CreateFusionCharacter::Support_left_type' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_CreateFusionCharacter, Support_right_type) == 0x000001, "Member 'EventBlueprintFunctionLibrary_CreateFusionCharacter::Support_right_type' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.DebugAddMoney
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_DebugAddMoney final
{
public:
	int32                                         MoneyNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_DebugAddMoney) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_DebugAddMoney");
static_assert(sizeof(EventBlueprintFunctionLibrary_DebugAddMoney) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_DebugAddMoney");
static_assert(offsetof(EventBlueprintFunctionLibrary_DebugAddMoney, MoneyNum) == 0x000000, "Member 'EventBlueprintFunctionLibrary_DebugAddMoney::MoneyNum' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.DebugChangeBalloonTalkId
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId");
static_assert(sizeof(EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId");
static_assert(offsetof(EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId, TargetActor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId::TargetActor' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId, TalkID) == 0x000008, "Member 'EventBlueprintFunctionLibrary_DebugChangeBalloonTalkId::TalkID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.DeleteFriend
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_DeleteFriend final
{
public:
	class AAT_Character*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_DeleteFriend) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_DeleteFriend");
static_assert(sizeof(EventBlueprintFunctionLibrary_DeleteFriend) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_DeleteFriend");
static_assert(offsetof(EventBlueprintFunctionLibrary_DeleteFriend, Chara) == 0x000000, "Member 'EventBlueprintFunctionLibrary_DeleteFriend::Chara' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.DisableFieldAction
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_DisableFieldAction final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisalbe;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_DisableFieldAction) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_DisableFieldAction");
static_assert(sizeof(EventBlueprintFunctionLibrary_DisableFieldAction) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_DisableFieldAction");
static_assert(offsetof(EventBlueprintFunctionLibrary_DisableFieldAction, Owner) == 0x000000, "Member 'EventBlueprintFunctionLibrary_DisableFieldAction::Owner' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_DisableFieldAction, bDisalbe) == 0x000008, "Member 'EventBlueprintFunctionLibrary_DisableFieldAction::bDisalbe' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.DisableNpcHeadIcon
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_DisableNpcHeadIcon final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_DisableNpcHeadIcon) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_DisableNpcHeadIcon");
static_assert(sizeof(EventBlueprintFunctionLibrary_DisableNpcHeadIcon) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_DisableNpcHeadIcon");
static_assert(offsetof(EventBlueprintFunctionLibrary_DisableNpcHeadIcon, ActorName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_DisableNpcHeadIcon::ActorName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.EndQuestDirection
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_EndQuestDirection final
{
public:
	class FName                                   DirectionId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_EndQuestDirection) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_EndQuestDirection");
static_assert(sizeof(EventBlueprintFunctionLibrary_EndQuestDirection) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_EndQuestDirection");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestDirection, DirectionId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_EndQuestDirection::DirectionId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.EndQuestGeneralTalkEvent
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent final
{
public:
	class FName                                   DirectionId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnbindingControl;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchGeneraTalkLookAt;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotTakeOverBGM;                                    // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleLeader;                                    // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleSupporters;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleCloud;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleLandmark;                                  // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent");
static_assert(sizeof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent, DirectionId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent::DirectionId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent, bUnbindingControl) == 0x000008, "Member 'EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent::bUnbindingControl' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent, bSwitchGeneraTalkLookAt) == 0x000009, "Member 'EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent::bSwitchGeneraTalkLookAt' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent, NotTakeOverBGM) == 0x00000A, "Member 'EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent::NotTakeOverBGM' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent, bVisibleLeader) == 0x00000B, "Member 'EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent::bVisibleLeader' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent, bVisibleSupporters) == 0x00000C, "Member 'EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent::bVisibleSupporters' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent, bVisibleCloud) == 0x00000D, "Member 'EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent::bVisibleCloud' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent, bVisibleLandmark) == 0x00000E, "Member 'EventBlueprintFunctionLibrary_EndQuestGeneralTalkEvent::bVisibleLandmark' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.EventBattleLoad
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_EventBattleLoad final
{
public:
	class FName                                   BattleName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_EventBattleLoad) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_EventBattleLoad");
static_assert(sizeof(EventBlueprintFunctionLibrary_EventBattleLoad) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_EventBattleLoad");
static_assert(offsetof(EventBlueprintFunctionLibrary_EventBattleLoad, BattleName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_EventBattleLoad::BattleName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.FetchSequentialEventBattleId
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_FetchSequentialEventBattleId final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_FetchSequentialEventBattleId) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_FetchSequentialEventBattleId");
static_assert(sizeof(EventBlueprintFunctionLibrary_FetchSequentialEventBattleId) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_FetchSequentialEventBattleId");
static_assert(offsetof(EventBlueprintFunctionLibrary_FetchSequentialEventBattleId, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_FetchSequentialEventBattleId::QuestId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_FetchSequentialEventBattleId, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_FetchSequentialEventBattleId::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.FlashBackFade
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_FlashBackFade final
{
public:
	int32                                         FadeType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T_fade;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_FlashBackFade) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_FlashBackFade");
static_assert(sizeof(EventBlueprintFunctionLibrary_FlashBackFade) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_FlashBackFade");
static_assert(offsetof(EventBlueprintFunctionLibrary_FlashBackFade, FadeType) == 0x000000, "Member 'EventBlueprintFunctionLibrary_FlashBackFade::FadeType' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_FlashBackFade, T_fade) == 0x000004, "Member 'EventBlueprintFunctionLibrary_FlashBackFade::T_fade' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ForceFetchUniqueId
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ForceFetchUniqueId final
{
public:
	class AQuestCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ForceFetchUniqueId) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ForceFetchUniqueId");
static_assert(sizeof(EventBlueprintFunctionLibrary_ForceFetchUniqueId) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ForceFetchUniqueId");
static_assert(offsetof(EventBlueprintFunctionLibrary_ForceFetchUniqueId, TargetCharacter) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ForceFetchUniqueId::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ForceFetchUniqueId, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ForceFetchUniqueId::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ForceLoadAssetMobHuman
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_ForceLoadAssetMobHuman final
{
public:
	class FName                                   PresetID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ForceLoadAssetMobHuman) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_ForceLoadAssetMobHuman");
static_assert(sizeof(EventBlueprintFunctionLibrary_ForceLoadAssetMobHuman) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_ForceLoadAssetMobHuman");
static_assert(offsetof(EventBlueprintFunctionLibrary_ForceLoadAssetMobHuman, PresetID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ForceLoadAssetMobHuman::PresetID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetAndroidAssaultBattleStartAreaGroup
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaGroup final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaGroup) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaGroup");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaGroup) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaGroup");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaGroup, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaGroup::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetAndroidAssaultBattleStartAreaId
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaId) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaId");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaId) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaId");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaId, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaId::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetAndroidAssaultBattleStartAreaName
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaName) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaName");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaName) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaName");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaName, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetAndroidAssaultBattleStartAreaName::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetAtrociousLaps
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_GetAtrociousLaps final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetAtrociousLaps) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetAtrociousLaps");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetAtrociousLaps) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_GetAtrociousLaps");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetAtrociousLaps, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetAtrociousLaps::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetBrokenReason
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_GetBrokenReason final
{
public:
	class FName                                   InTriggerId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrokenReason                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetBrokenReason) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetBrokenReason");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetBrokenReason) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_GetBrokenReason");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetBrokenReason, InTriggerId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetBrokenReason::InTriggerId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetBrokenReason, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_GetBrokenReason::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetBrokenReasonFromBreakableObj
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj final
{
public:
	class AWideUseBreakablePoint*                 InBreakableObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrokenReason                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj, InBreakableObject) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj::InBreakableObject' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_GetBrokenReasonFromBreakableObj::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetCharacterMoveState
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_GetCharacterMoveState final
{
public:
	EATCharacterMoveState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetCharacterMoveState) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_GetCharacterMoveState");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetCharacterMoveState) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_GetCharacterMoveState");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetCharacterMoveState, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetCharacterMoveState::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetCurrentDLCId
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetCurrentDLCId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetCurrentDLCId) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetCurrentDLCId");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetCurrentDLCId) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetCurrentDLCId");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetCurrentDLCId, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetCurrentDLCId::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetEventBattleId
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetEventBattleId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetEventBattleId) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetEventBattleId");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetEventBattleId) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetEventBattleId");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetEventBattleId, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetEventBattleId::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetExterminationStrengthLevel
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_GetExterminationStrengthLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetExterminationStrengthLevel) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetExterminationStrengthLevel");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetExterminationStrengthLevel) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_GetExterminationStrengthLevel");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetExterminationStrengthLevel, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetExterminationStrengthLevel::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetItemNum
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_GetItemNum final
{
public:
	class FName                                   MasterId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetItemNum) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetItemNum");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetItemNum) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_GetItemNum");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetItemNum, MasterId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetItemNum::MasterId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetItemNum, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_GetItemNum::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetMessageFromID
// 0x0020 (0x0020 - 0x0000)
struct EventBlueprintFunctionLibrary_GetMessageFromID final
{
public:
	class FString                                 StringID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetMessageFromID) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_GetMessageFromID");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetMessageFromID) == 0x000020, "Wrong size on EventBlueprintFunctionLibrary_GetMessageFromID");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetMessageFromID, StringID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetMessageFromID::StringID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetMessageFromID, ReturnValue) == 0x000010, "Member 'EventBlueprintFunctionLibrary_GetMessageFromID::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetPartyLeader
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetPartyLeader final
{
public:
	class AAT_Character*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetPartyLeader) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_GetPartyLeader");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetPartyLeader) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetPartyLeader");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetPartyLeader, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetPartyLeader::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetPartySupportLeft
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetPartySupportLeft final
{
public:
	class AAT_Character*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetPartySupportLeft) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_GetPartySupportLeft");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetPartySupportLeft) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetPartySupportLeft");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetPartySupportLeft, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetPartySupportLeft::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetPartySupportRight
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetPartySupportRight final
{
public:
	class AAT_Character*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetPartySupportRight) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_GetPartySupportRight");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetPartySupportRight) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetPartySupportRight");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetPartySupportRight, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetPartySupportRight::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetPlayer
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetPlayer final
{
public:
	class AAT_Character*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetPlayer) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_GetPlayer");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetPlayer) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetPlayer");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetPlayer, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetPlayer::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetQuestCompletedCount
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_GetQuestCompletedCount final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetQuestCompletedCount) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetQuestCompletedCount");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetQuestCompletedCount) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_GetQuestCompletedCount");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetQuestCompletedCount, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetQuestCompletedCount::QuestId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetQuestCompletedCount, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_GetQuestCompletedCount::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetQuestMainLogoHideTotalFrames
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_GetQuestMainLogoHideTotalFrames final
{
public:
	struct FFrameNumber                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetQuestMainLogoHideTotalFrames) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetQuestMainLogoHideTotalFrames");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetQuestMainLogoHideTotalFrames) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_GetQuestMainLogoHideTotalFrames");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetQuestMainLogoHideTotalFrames, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetQuestMainLogoHideTotalFrames::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetSelectedRetryProgress
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_GetSelectedRetryProgress final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetSelectedRetryProgress) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetSelectedRetryProgress");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetSelectedRetryProgress) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_GetSelectedRetryProgress");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetSelectedRetryProgress, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetSelectedRetryProgress::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetSpeakerFromID
// 0x0020 (0x0020 - 0x0000)
struct EventBlueprintFunctionLibrary_GetSpeakerFromID final
{
public:
	class FString                                 StringID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetSpeakerFromID) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_GetSpeakerFromID");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetSpeakerFromID) == 0x000020, "Wrong size on EventBlueprintFunctionLibrary_GetSpeakerFromID");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetSpeakerFromID, StringID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetSpeakerFromID::StringID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetSpeakerFromID, ReturnValue) == 0x000010, "Member 'EventBlueprintFunctionLibrary_GetSpeakerFromID::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetStarFinishOffPostProcess_DLC6
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_GetStarFinishOffPostProcess_DLC6 final
{
public:
	TArray<class APostProcessVolume*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetStarFinishOffPostProcess_DLC6) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_GetStarFinishOffPostProcess_DLC6");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetStarFinishOffPostProcess_DLC6) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_GetStarFinishOffPostProcess_DLC6");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetStarFinishOffPostProcess_DLC6, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetStarFinishOffPostProcess_DLC6::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GetThankYouHideTotalFrames
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_GetThankYouHideTotalFrames final
{
public:
	struct FFrameNumber                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GetThankYouHideTotalFrames) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_GetThankYouHideTotalFrames");
static_assert(sizeof(EventBlueprintFunctionLibrary_GetThankYouHideTotalFrames) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_GetThankYouHideTotalFrames");
static_assert(offsetof(EventBlueprintFunctionLibrary_GetThankYouHideTotalFrames, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GetThankYouHideTotalFrames::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.GettingDownVehiclePlayer
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_GettingDownVehiclePlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_GettingDownVehiclePlayer) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_GettingDownVehiclePlayer");
static_assert(sizeof(EventBlueprintFunctionLibrary_GettingDownVehiclePlayer) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_GettingDownVehiclePlayer");
static_assert(offsetof(EventBlueprintFunctionLibrary_GettingDownVehiclePlayer, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_GettingDownVehiclePlayer::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.Is_DLC_06_03002_B_Flg
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_Is_DLC_06_03002_B_Flg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_Is_DLC_06_03002_B_Flg) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_Is_DLC_06_03002_B_Flg");
static_assert(sizeof(EventBlueprintFunctionLibrary_Is_DLC_06_03002_B_Flg) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_Is_DLC_06_03002_B_Flg");
static_assert(offsetof(EventBlueprintFunctionLibrary_Is_DLC_06_03002_B_Flg, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_Is_DLC_06_03002_B_Flg::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsActivatedWindow
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsActivatedWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsActivatedWindow) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsActivatedWindow");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsActivatedWindow) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsActivatedWindow");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsActivatedWindow, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsActivatedWindow::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsActivePlayerCharaType
// 0x0002 (0x0002 - 0x0000)
struct EventBlueprintFunctionLibrary_IsActivePlayerCharaType final
{
public:
	ECHARACTER_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsActivePlayerCharaType) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsActivePlayerCharaType");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsActivePlayerCharaType) == 0x000002, "Wrong size on EventBlueprintFunctionLibrary_IsActivePlayerCharaType");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsActivePlayerCharaType, Type) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsActivePlayerCharaType::Type' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsActivePlayerCharaType, ReturnValue) == 0x000001, "Member 'EventBlueprintFunctionLibrary_IsActivePlayerCharaType::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsAndroidAssaultActiveAreaGroupId
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId final
{
public:
	class FName                                   AreaGroup;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId, AreaGroup) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId::AreaGroup' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaGroupId::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsAndroidAssaultActiveAreaId
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId, AreaName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId::AreaName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_IsAndroidAssaultActiveAreaId::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsAvailableTrunks
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsAvailableTrunks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsAvailableTrunks) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsAvailableTrunks");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsAvailableTrunks) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsAvailableTrunks");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsAvailableTrunks, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsAvailableTrunks::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsBreakingTriggerOn
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_IsBreakingTriggerOn final
{
public:
	class FName                                   InTriggerId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsBreakingTriggerOn) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_IsBreakingTriggerOn");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsBreakingTriggerOn) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_IsBreakingTriggerOn");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsBreakingTriggerOn, InTriggerId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsBreakingTriggerOn::InTriggerId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsBreakingTriggerOn, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_IsBreakingTriggerOn::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsBreakingTriggerOnFromBreakableObj
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj final
{
public:
	class AWideUseBreakablePoint*                 InBreakableObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj, InBreakableObject) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj::InBreakableObject' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_IsBreakingTriggerOnFromBreakableObj::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsCompletedAtrociousPhase
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PhaseNo;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase, LevelName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase::LevelName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase, PhaseNo) == 0x000008, "Member 'EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase::PhaseNo' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase, ReturnValue) == 0x000009, "Member 'EventBlueprintFunctionLibrary_IsCompletedAtrociousPhase::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsCurrentExterminationEvent
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsCurrentExterminationEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsCurrentExterminationEvent) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsCurrentExterminationEvent");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsCurrentExterminationEvent) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsCurrentExterminationEvent");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsCurrentExterminationEvent, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsCurrentExterminationEvent::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsEnableQuestTalkEventHUDType
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsEnableQuestTalkEventHUDType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsEnableQuestTalkEventHUDType) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsEnableQuestTalkEventHUDType");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsEnableQuestTalkEventHUDType) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsEnableQuestTalkEventHUDType");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsEnableQuestTalkEventHUDType, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsEnableQuestTalkEventHUDType::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsEqualTalkingCondition
// 0x0028 (0x0028 - 0x0000)
struct EventBlueprintFunctionLibrary_IsEqualTalkingCondition final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsEqualTalkingCondition) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_IsEqualTalkingCondition");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsEqualTalkingCondition) == 0x000028, "Wrong size on EventBlueprintFunctionLibrary_IsEqualTalkingCondition");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsEqualTalkingCondition, Key) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsEqualTalkingCondition::Key' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsEqualTalkingCondition, Value) == 0x000010, "Member 'EventBlueprintFunctionLibrary_IsEqualTalkingCondition::Value' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsEqualTalkingCondition, ReturnValue) == 0x000020, "Member 'EventBlueprintFunctionLibrary_IsEqualTalkingCondition::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsEventBattleLoaded
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsEventBattleLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsEventBattleLoaded) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsEventBattleLoaded");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsEventBattleLoaded) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsEventBattleLoaded");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsEventBattleLoaded, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsEventBattleLoaded::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsExterminationBattleEnd
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_IsExterminationBattleEnd final
{
public:
	class FName                                   BastionId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsExterminationBattleEnd) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_IsExterminationBattleEnd");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsExterminationBattleEnd) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_IsExterminationBattleEnd");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsExterminationBattleEnd, BastionId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsExterminationBattleEnd::BastionId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsExterminationBattleEnd, ReturnValue) == 0x000008, "Member 'EventBlueprintFunctionLibrary_IsExterminationBattleEnd::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsGeneralTalkingEvent
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsGeneralTalkingEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsGeneralTalkingEvent) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsGeneralTalkingEvent");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsGeneralTalkingEvent) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsGeneralTalkingEvent");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsGeneralTalkingEvent, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsGeneralTalkingEvent::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsLoadedParts
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_IsLoadedParts final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Variation;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsLoadedParts) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsLoadedParts");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsLoadedParts) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_IsLoadedParts");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsLoadedParts, CharacterType) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsLoadedParts::CharacterType' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsLoadedParts, Variation) == 0x000001, "Member 'EventBlueprintFunctionLibrary_IsLoadedParts::Variation' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsLoadedParts, Form) == 0x000002, "Member 'EventBlueprintFunctionLibrary_IsLoadedParts::Form' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsLoadedParts, ReturnValue) == 0x000003, "Member 'EventBlueprintFunctionLibrary_IsLoadedParts::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsLoadedPartsWithFacial
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Variation;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial, CharacterType) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial::CharacterType' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial, Variation) == 0x000001, "Member 'EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial::Variation' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial, Form) == 0x000002, "Member 'EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial::Form' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial, ReturnValue) == 0x000003, "Member 'EventBlueprintFunctionLibrary_IsLoadedPartsWithFacial::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsNormalBattle
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsNormalBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsNormalBattle) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsNormalBattle");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsNormalBattle) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsNormalBattle");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsNormalBattle, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsNormalBattle::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsPlayerPartyIgnoreSE
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsPlayerPartyIgnoreSE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsPlayerPartyIgnoreSE) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsPlayerPartyIgnoreSE");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsPlayerPartyIgnoreSE) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsPlayerPartyIgnoreSE");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsPlayerPartyIgnoreSE, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsPlayerPartyIgnoreSE::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsRetryEventBattle
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsRetryEventBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsRetryEventBattle) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsRetryEventBattle");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsRetryEventBattle) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsRetryEventBattle");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsRetryEventBattle, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsRetryEventBattle::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsRetryingQuest
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsRetryingQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsRetryingQuest) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsRetryingQuest");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsRetryingQuest) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsRetryingQuest");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsRetryingQuest, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsRetryingQuest::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsReturnedFromDLC3
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsReturnedFromDLC3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsReturnedFromDLC3) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsReturnedFromDLC3");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsReturnedFromDLC3) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsReturnedFromDLC3");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsReturnedFromDLC3, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsReturnedFromDLC3::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsRiding
// 0x0002 (0x0002 - 0x0000)
struct EventBlueprintFunctionLibrary_IsRiding final
{
public:
	bool                                          bEnableNimbus;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsRiding) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsRiding");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsRiding) == 0x000002, "Wrong size on EventBlueprintFunctionLibrary_IsRiding");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsRiding, bEnableNimbus) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsRiding::bEnableNimbus' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsRiding, ReturnValue) == 0x000001, "Member 'EventBlueprintFunctionLibrary_IsRiding::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsSceneFreeLoading
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsSceneFreeLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsSceneFreeLoading) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsSceneFreeLoading");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsSceneFreeLoading) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsSceneFreeLoading");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsSceneFreeLoading, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsSceneFreeLoading::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.IsStarFinishDirection
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_IsStarFinishDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_IsStarFinishDirection) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_IsStarFinishDirection");
static_assert(sizeof(EventBlueprintFunctionLibrary_IsStarFinishDirection) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_IsStarFinishDirection");
static_assert(offsetof(EventBlueprintFunctionLibrary_IsStarFinishDirection, ReturnValue) == 0x000000, "Member 'EventBlueprintFunctionLibrary_IsStarFinishDirection::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.LearnCharacterSkill
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_LearnCharacterSkill final
{
public:
	ECHARACTER_TYPE                               Target;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SkillId;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetPalette;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_LearnCharacterSkill) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_LearnCharacterSkill");
static_assert(sizeof(EventBlueprintFunctionLibrary_LearnCharacterSkill) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_LearnCharacterSkill");
static_assert(offsetof(EventBlueprintFunctionLibrary_LearnCharacterSkill, Target) == 0x000000, "Member 'EventBlueprintFunctionLibrary_LearnCharacterSkill::Target' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_LearnCharacterSkill, SkillId) == 0x000008, "Member 'EventBlueprintFunctionLibrary_LearnCharacterSkill::SkillId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_LearnCharacterSkill, bSetPalette) == 0x000010, "Member 'EventBlueprintFunctionLibrary_LearnCharacterSkill::bSetPalette' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.LoadQuestImage
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_LoadQuestImage final
{
public:
	class FName                                   ReferenceId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_LoadQuestImage) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_LoadQuestImage");
static_assert(sizeof(EventBlueprintFunctionLibrary_LoadQuestImage) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_LoadQuestImage");
static_assert(offsetof(EventBlueprintFunctionLibrary_LoadQuestImage, ReferenceId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_LoadQuestImage::ReferenceId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.OpenChangePlayerAnim2D
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_OpenChangePlayerAnim2D final
{
public:
	class FString                                 MesId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_OpenChangePlayerAnim2D) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_OpenChangePlayerAnim2D");
static_assert(sizeof(EventBlueprintFunctionLibrary_OpenChangePlayerAnim2D) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_OpenChangePlayerAnim2D");
static_assert(offsetof(EventBlueprintFunctionLibrary_OpenChangePlayerAnim2D, MesId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_OpenChangePlayerAnim2D::MesId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.OpenChangePlayerWindow
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_OpenChangePlayerWindow final
{
public:
	class FString                                 MesId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_OpenChangePlayerWindow) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_OpenChangePlayerWindow");
static_assert(sizeof(EventBlueprintFunctionLibrary_OpenChangePlayerWindow) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_OpenChangePlayerWindow");
static_assert(offsetof(EventBlueprintFunctionLibrary_OpenChangePlayerWindow, MesId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_OpenChangePlayerWindow::MesId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.OpenCommunityFavorRateUpMenu
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_OpenCommunityFavorRateUpMenu final
{
public:
	class FName                                   UniqueId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_OpenCommunityFavorRateUpMenu) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_OpenCommunityFavorRateUpMenu");
static_assert(sizeof(EventBlueprintFunctionLibrary_OpenCommunityFavorRateUpMenu) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_OpenCommunityFavorRateUpMenu");
static_assert(offsetof(EventBlueprintFunctionLibrary_OpenCommunityFavorRateUpMenu, UniqueId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_OpenCommunityFavorRateUpMenu::UniqueId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.OpenSystemWindow
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_OpenSystemWindow final
{
public:
	class FString                                 MesId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_OpenSystemWindow) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_OpenSystemWindow");
static_assert(sizeof(EventBlueprintFunctionLibrary_OpenSystemWindow) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_OpenSystemWindow");
static_assert(offsetof(EventBlueprintFunctionLibrary_OpenSystemWindow, MesId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_OpenSystemWindow::MesId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.OpenSystemWindowAppendMessage
// 0x0020 (0x0020 - 0x0000)
struct EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage final
{
public:
	class FString                                 MesId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MesId2;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage");
static_assert(sizeof(EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage) == 0x000020, "Wrong size on EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage");
static_assert(offsetof(EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage, MesId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage::MesId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage, MesId2) == 0x000010, "Member 'EventBlueprintFunctionLibrary_OpenSystemWindowAppendMessage::MesId2' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.OpenSystemWindowReplacedStrings
// 0x0020 (0x0020 - 0x0000)
struct EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings final
{
public:
	class FString                                 MessageId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReplacedStrings;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings");
static_assert(sizeof(EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings) == 0x000020, "Wrong size on EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings");
static_assert(offsetof(EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings, MessageId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings::MessageId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings, ReplacedStrings) == 0x000010, "Member 'EventBlueprintFunctionLibrary_OpenSystemWindowReplacedStrings::ReplacedStrings' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.PlayTalkEvent
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_PlayTalkEvent final
{
public:
	class FName                                   TalkEventID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_PlayTalkEvent) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_PlayTalkEvent");
static_assert(sizeof(EventBlueprintFunctionLibrary_PlayTalkEvent) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_PlayTalkEvent");
static_assert(offsetof(EventBlueprintFunctionLibrary_PlayTalkEvent, TalkEventID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_PlayTalkEvent::TalkEventID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.PlayTownBGM
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_PlayTownBGM final
{
public:
	class FName                                   bgmID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_PlayTownBGM) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_PlayTownBGM");
static_assert(sizeof(EventBlueprintFunctionLibrary_PlayTownBGM) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_PlayTownBGM");
static_assert(offsetof(EventBlueprintFunctionLibrary_PlayTownBGM, bgmID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_PlayTownBGM::bgmID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.Recovery
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_Recovery final
{
public:
	bool                                          bHealth;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMagicPoint;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MagicPointRatio;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_Recovery) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_Recovery");
static_assert(sizeof(EventBlueprintFunctionLibrary_Recovery) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_Recovery");
static_assert(offsetof(EventBlueprintFunctionLibrary_Recovery, bHealth) == 0x000000, "Member 'EventBlueprintFunctionLibrary_Recovery::bHealth' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_Recovery, HealthRatio) == 0x000004, "Member 'EventBlueprintFunctionLibrary_Recovery::HealthRatio' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_Recovery, bMagicPoint) == 0x000008, "Member 'EventBlueprintFunctionLibrary_Recovery::bMagicPoint' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_Recovery, MagicPointRatio) == 0x00000C, "Member 'EventBlueprintFunctionLibrary_Recovery::MagicPointRatio' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ReleaseZCollection
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_ReleaseZCollection final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ReleaseZCollection) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_ReleaseZCollection");
static_assert(sizeof(EventBlueprintFunctionLibrary_ReleaseZCollection) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_ReleaseZCollection");
static_assert(offsetof(EventBlueprintFunctionLibrary_ReleaseZCollection, bRelease) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ReleaseZCollection::bRelease' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RemoveDeactivateCharacterInEvent
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_RemoveDeactivateCharacterInEvent final
{
public:
	class FName                                   CharacterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RemoveDeactivateCharacterInEvent) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_RemoveDeactivateCharacterInEvent");
static_assert(sizeof(EventBlueprintFunctionLibrary_RemoveDeactivateCharacterInEvent) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_RemoveDeactivateCharacterInEvent");
static_assert(offsetof(EventBlueprintFunctionLibrary_RemoveDeactivateCharacterInEvent, CharacterName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RemoveDeactivateCharacterInEvent::CharacterName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RemoveDestination
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_RemoveDestination final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RemoveDestination) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_RemoveDestination");
static_assert(sizeof(EventBlueprintFunctionLibrary_RemoveDestination) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_RemoveDestination");
static_assert(offsetof(EventBlueprintFunctionLibrary_RemoveDestination, Actor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RemoveDestination::Actor' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RemoveHaveDBCharacter
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_RemoveHaveDBCharacter final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RemoveHaveDBCharacter) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_RemoveHaveDBCharacter");
static_assert(sizeof(EventBlueprintFunctionLibrary_RemoveHaveDBCharacter) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_RemoveHaveDBCharacter");
static_assert(offsetof(EventBlueprintFunctionLibrary_RemoveHaveDBCharacter, Character) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RemoveHaveDBCharacter::Character' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RemoveMainQuestIcon
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_RemoveMainQuestIcon final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RemoveMainQuestIcon) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_RemoveMainQuestIcon");
static_assert(sizeof(EventBlueprintFunctionLibrary_RemoveMainQuestIcon) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_RemoveMainQuestIcon");
static_assert(offsetof(EventBlueprintFunctionLibrary_RemoveMainQuestIcon, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RemoveMainQuestIcon::QuestId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RemoveMainQuestIcon, ActorName) == 0x000008, "Member 'EventBlueprintFunctionLibrary_RemoveMainQuestIcon::ActorName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RemoveSubQuestIcon
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_RemoveSubQuestIcon final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RemoveSubQuestIcon) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_RemoveSubQuestIcon");
static_assert(sizeof(EventBlueprintFunctionLibrary_RemoveSubQuestIcon) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_RemoveSubQuestIcon");
static_assert(offsetof(EventBlueprintFunctionLibrary_RemoveSubQuestIcon, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RemoveSubQuestIcon::QuestId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RemoveSubQuestIcon, ActorName) == 0x000008, "Member 'EventBlueprintFunctionLibrary_RemoveSubQuestIcon::ActorName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestAddQuestActorName
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestAddQuestActorName final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FindlistID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestAddQuestActorName) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_RequestAddQuestActorName");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestAddQuestActorName) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_RequestAddQuestActorName");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestAddQuestActorName, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestAddQuestActorName::QuestId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestAddQuestActorName, FindlistID) == 0x000008, "Member 'EventBlueprintFunctionLibrary_RequestAddQuestActorName::FindlistID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestChangePlayerCharaFromCType
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestChangePlayerCharaFromCType final
{
public:
	ECHARACTER_TYPE                               CHARACTER_TYPE;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestChangePlayerCharaFromCType) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_RequestChangePlayerCharaFromCType");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestChangePlayerCharaFromCType) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_RequestChangePlayerCharaFromCType");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestChangePlayerCharaFromCType, CHARACTER_TYPE) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestChangePlayerCharaFromCType::CHARACTER_TYPE' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestChangeTalkId
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestChangeTalkId final
{
public:
	class FString                                 TalkID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FindlistID;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestChangeTalkId) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_RequestChangeTalkId");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestChangeTalkId) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_RequestChangeTalkId");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestChangeTalkId, TalkID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestChangeTalkId::TalkID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestChangeTalkId, FindlistID) == 0x000010, "Member 'EventBlueprintFunctionLibrary_RequestChangeTalkId::FindlistID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestCrossTalk
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestCrossTalk final
{
public:
	class FName                                   CrossTalkId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestCrossTalk) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_RequestCrossTalk");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestCrossTalk) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_RequestCrossTalk");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestCrossTalk, CrossTalkId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestCrossTalk::CrossTalkId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestFormChange
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestFormChange final
{
public:
	class AAT_Character*                          TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillId;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestFormChange) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_RequestFormChange");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestFormChange) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_RequestFormChange");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestFormChange, TargetCharacter) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestFormChange::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestFormChange, SkillId) == 0x000008, "Member 'EventBlueprintFunctionLibrary_RequestFormChange::SkillId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestLoadCharacterCostume
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestLoadCharacterCostume final
{
public:
	class AQuestCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestLoadCharacterCostume) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_RequestLoadCharacterCostume");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestLoadCharacterCostume) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_RequestLoadCharacterCostume");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestLoadCharacterCostume, TargetCharacter) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestLoadCharacterCostume::TargetCharacter' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestLoadNpcAssets
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestLoadNpcAssets final
{
public:
	class FName                                   CallbackQuestId;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestLoadNpcAssets) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_RequestLoadNpcAssets");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestLoadNpcAssets) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_RequestLoadNpcAssets");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestLoadNpcAssets, CallbackQuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestLoadNpcAssets::CallbackQuestId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestLoadParts
// 0x0003 (0x0003 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestLoadParts final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Variation;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestLoadParts) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_RequestLoadParts");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestLoadParts) == 0x000003, "Wrong size on EventBlueprintFunctionLibrary_RequestLoadParts");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestLoadParts, CharacterType) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestLoadParts::CharacterType' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestLoadParts, Variation) == 0x000001, "Member 'EventBlueprintFunctionLibrary_RequestLoadParts::Variation' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestLoadParts, Form) == 0x000002, "Member 'EventBlueprintFunctionLibrary_RequestLoadParts::Form' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestLoadPartsWithFacial
// 0x0003 (0x0003 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Variation;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial) == 0x000003, "Wrong size on EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial, CharacterType) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial::CharacterType' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial, Variation) == 0x000001, "Member 'EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial::Variation' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial, Form) == 0x000002, "Member 'EventBlueprintFunctionLibrary_RequestLoadPartsWithFacial::Form' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestOpenLevelWhenResultClosed
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestOpenLevelWhenResultClosed final
{
public:
	class FString                                 AreaName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestOpenLevelWhenResultClosed) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_RequestOpenLevelWhenResultClosed");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestOpenLevelWhenResultClosed) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_RequestOpenLevelWhenResultClosed");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestOpenLevelWhenResultClosed, AreaName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestOpenLevelWhenResultClosed::AreaName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestQuestCommand
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestQuestCommand final
{
public:
	class FString                                 CommandId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestQuestCommand) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_RequestQuestCommand");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestQuestCommand) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_RequestQuestCommand");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestQuestCommand, CommandId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestQuestCommand::CommandId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestQuestNotification
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestQuestNotification final
{
public:
	class FName                                   NotifiId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestQuestNotification) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_RequestQuestNotification");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestQuestNotification) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_RequestQuestNotification");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestQuestNotification, NotifiId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestQuestNotification::NotifiId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestResumeQuest
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestResumeQuest final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestResumeQuest) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_RequestResumeQuest");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestResumeQuest) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_RequestResumeQuest");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestResumeQuest, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestResumeQuest::QuestId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.RequestSimpleWindow
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_RequestSimpleWindow final
{
public:
	class FString                                 SimpleWindowId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimpleTalkWindow*                      ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_RequestSimpleWindow) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_RequestSimpleWindow");
static_assert(sizeof(EventBlueprintFunctionLibrary_RequestSimpleWindow) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_RequestSimpleWindow");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestSimpleWindow, SimpleWindowId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_RequestSimpleWindow::SimpleWindowId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_RequestSimpleWindow, ReturnValue) == 0x000010, "Member 'EventBlueprintFunctionLibrary_RequestSimpleWindow::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ResetHaveDBCharacter
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ResetHaveDBCharacter final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Db_id;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ResetHaveDBCharacter) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ResetHaveDBCharacter");
static_assert(sizeof(EventBlueprintFunctionLibrary_ResetHaveDBCharacter) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ResetHaveDBCharacter");
static_assert(offsetof(EventBlueprintFunctionLibrary_ResetHaveDBCharacter, Character) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ResetHaveDBCharacter::Character' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ResetHaveDBCharacter, Db_id) == 0x000008, "Member 'EventBlueprintFunctionLibrary_ResetHaveDBCharacter::Db_id' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ResetMobTalkID
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_ResetMobTalkID final
{
public:
	class FName                                   Actor_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ResetMobTalkID) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_ResetMobTalkID");
static_assert(sizeof(EventBlueprintFunctionLibrary_ResetMobTalkID) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_ResetMobTalkID");
static_assert(offsetof(EventBlueprintFunctionLibrary_ResetMobTalkID, Actor_name) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ResetMobTalkID::Actor_name' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ResetTriggerQuestStart
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_ResetTriggerQuestStart final
{
public:
	class FName                                   Actor_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ResetTriggerQuestStart) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_ResetTriggerQuestStart");
static_assert(sizeof(EventBlueprintFunctionLibrary_ResetTriggerQuestStart) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_ResetTriggerQuestStart");
static_assert(offsetof(EventBlueprintFunctionLibrary_ResetTriggerQuestStart, Actor_name) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ResetTriggerQuestStart::Actor_name' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.Set_DLC_06_03002_B_Flg
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_Set_DLC_06_03002_B_Flg final
{
public:
	bool                                          Flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_Set_DLC_06_03002_B_Flg) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_Set_DLC_06_03002_B_Flg");
static_assert(sizeof(EventBlueprintFunctionLibrary_Set_DLC_06_03002_B_Flg) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_Set_DLC_06_03002_B_Flg");
static_assert(offsetof(EventBlueprintFunctionLibrary_Set_DLC_06_03002_B_Flg, Flg) == 0x000000, "Member 'EventBlueprintFunctionLibrary_Set_DLC_06_03002_B_Flg::Flg' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetAvailableTrunks
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetAvailableTrunks final
{
public:
	bool                                          FlagAvailable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetAvailableTrunks) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetAvailableTrunks");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetAvailableTrunks) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetAvailableTrunks");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetAvailableTrunks, FlagAvailable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetAvailableTrunks::FlagAvailable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetCameraAngle
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_SetCameraAngle final
{
public:
	float                                         InYaw;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPitch;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetCameraAngle) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetCameraAngle");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetCameraAngle) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_SetCameraAngle");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetCameraAngle, InYaw) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetCameraAngle::InYaw' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetCameraAngle, InPitch) == 0x000004, "Member 'EventBlueprintFunctionLibrary_SetCameraAngle::InPitch' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetCharacterSpeakerId
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_SetCharacterSpeakerId final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpeakerID;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetCharacterSpeakerId) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetCharacterSpeakerId");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetCharacterSpeakerId) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_SetCharacterSpeakerId");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetCharacterSpeakerId, ActorName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetCharacterSpeakerId::ActorName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetCharacterSpeakerId, SpeakerID) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetCharacterSpeakerId::SpeakerID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetDisableChangeBgmForAssaultBattle
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetDisableChangeBgmForAssaultBattle final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetDisableChangeBgmForAssaultBattle) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetDisableChangeBgmForAssaultBattle");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetDisableChangeBgmForAssaultBattle) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetDisableChangeBgmForAssaultBattle");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetDisableChangeBgmForAssaultBattle, bDisable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetDisableChangeBgmForAssaultBattle::bDisable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetDisableCompletedSave
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_SetDisableCompletedSave final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetDisableCompletedSave) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetDisableCompletedSave");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetDisableCompletedSave) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_SetDisableCompletedSave");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetDisableCompletedSave, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetDisableCompletedSave::QuestId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetDisableCompletedSave, bDisable) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetDisableCompletedSave::bDisable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetDisabledAutoSave
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetDisabledAutoSave final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetDisabledAutoSave) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetDisabledAutoSave");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetDisabledAutoSave) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetDisabledAutoSave");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetDisabledAutoSave, bDisable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetDisabledAutoSave::bDisable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetDisabledAutoSaveUI
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetDisabledAutoSaveUI final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetDisabledAutoSaveUI) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetDisabledAutoSaveUI");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetDisabledAutoSaveUI) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetDisabledAutoSaveUI");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetDisabledAutoSaveUI, bDisable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetDisabledAutoSaveUI::bDisable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetDrawActor
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_SetDrawActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetDrawActor) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetDrawActor");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetDrawActor) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_SetDrawActor");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetDrawActor, Actor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetDrawActor::Actor' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetDrawActor, Flag) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetDrawActor::Flag' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetEnableCrossTalkLipSync
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetEnableCrossTalkLipSync final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetEnableCrossTalkLipSync) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetEnableCrossTalkLipSync");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetEnableCrossTalkLipSync) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetEnableCrossTalkLipSync");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnableCrossTalkLipSync, bIsEnable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetEnableCrossTalkLipSync::bIsEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetEnableDinasaurs
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetEnableDinasaurs final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetEnableDinasaurs) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetEnableDinasaurs");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetEnableDinasaurs) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetEnableDinasaurs");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnableDinasaurs, bEnable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetEnableDinasaurs::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetEnableIdlingUntilDoorMoved
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PhaseID;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved::QuestId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved, PhaseID) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved::PhaseID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved, bEnable) == 0x000010, "Member 'EventBlueprintFunctionLibrary_SetEnableIdlingUntilDoorMoved::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetEnablePlatformFeatures
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_SetEnablePlatformFeatures final
{
public:
	bool                                          bEnableRecording;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStreaming;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableScreenshots;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSharing;                                    // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetEnablePlatformFeatures) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetEnablePlatformFeatures");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetEnablePlatformFeatures) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_SetEnablePlatformFeatures");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnablePlatformFeatures, bEnableRecording) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetEnablePlatformFeatures::bEnableRecording' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnablePlatformFeatures, bEnableStreaming) == 0x000001, "Member 'EventBlueprintFunctionLibrary_SetEnablePlatformFeatures::bEnableStreaming' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnablePlatformFeatures, bEnableScreenshots) == 0x000002, "Member 'EventBlueprintFunctionLibrary_SetEnablePlatformFeatures::bEnableScreenshots' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnablePlatformFeatures, bEnableSharing) == 0x000003, "Member 'EventBlueprintFunctionLibrary_SetEnablePlatformFeatures::bEnableSharing' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetEnablePlayerCameraUpdate
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetEnablePlayerCameraUpdate final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetEnablePlayerCameraUpdate) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetEnablePlayerCameraUpdate");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetEnablePlayerCameraUpdate) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetEnablePlayerCameraUpdate");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnablePlayerCameraUpdate, bEnable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetEnablePlayerCameraUpdate::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetEnablePlayerCameraView
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetEnablePlayerCameraView final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetEnablePlayerCameraView) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetEnablePlayerCameraView");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetEnablePlayerCameraView) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetEnablePlayerCameraView");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnablePlayerCameraView, bEnable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetEnablePlayerCameraView::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetEnableRidingOnQuest
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetEnableRidingOnQuest final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetEnableRidingOnQuest) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetEnableRidingOnQuest");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetEnableRidingOnQuest) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetEnableRidingOnQuest");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnableRidingOnQuest, bEnabled) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetEnableRidingOnQuest::bEnabled' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetEnableScreenFade
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetEnableScreenFade final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetEnableScreenFade) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetEnableScreenFade");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetEnableScreenFade) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetEnableScreenFade");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetEnableScreenFade, bEnable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetEnableScreenFade::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetExtendQuestProgress
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_SetExtendQuestProgress final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetExtendQuestProgress) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetExtendQuestProgress");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetExtendQuestProgress) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_SetExtendQuestProgress");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetExtendQuestProgress, ProgressID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetExtendQuestProgress::ProgressID' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetHaveDBCharacter
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_SetHaveDBCharacter final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Db_id;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetHaveDBCharacter) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetHaveDBCharacter");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetHaveDBCharacter) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_SetHaveDBCharacter");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetHaveDBCharacter, Character) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetHaveDBCharacter::Character' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetHaveDBCharacter, Db_id) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetHaveDBCharacter::Db_id' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetMessageIDDelayTime
// 0x0020 (0x0020 - 0x0000)
struct EventBlueprintFunctionLibrary_SetMessageIDDelayTime final
{
public:
	class FString                                 StringID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	E_MSG_FACE_ICON                               Icon;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DispTime;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetMessageIDDelayTime) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetMessageIDDelayTime");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetMessageIDDelayTime) == 0x000020, "Wrong size on EventBlueprintFunctionLibrary_SetMessageIDDelayTime");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetMessageIDDelayTime, StringID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetMessageIDDelayTime::StringID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetMessageIDDelayTime, Icon) == 0x000010, "Member 'EventBlueprintFunctionLibrary_SetMessageIDDelayTime::Icon' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetMessageIDDelayTime, DispTime) == 0x000014, "Member 'EventBlueprintFunctionLibrary_SetMessageIDDelayTime::DispTime' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetMessageIDDelayTime, DelayTime) == 0x000018, "Member 'EventBlueprintFunctionLibrary_SetMessageIDDelayTime::DelayTime' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetNpcLightTower
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_SetNpcLightTower final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightTowerKind                               LightTowerType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivate;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetNpcLightTower) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetNpcLightTower");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetNpcLightTower) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_SetNpcLightTower");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetNpcLightTower, ActorName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetNpcLightTower::ActorName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetNpcLightTower, LightTowerType) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetNpcLightTower::LightTowerType' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetNpcLightTower, bActivate) == 0x000009, "Member 'EventBlueprintFunctionLibrary_SetNpcLightTower::bActivate' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetNpcTalkIcon
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_SetNpcTalkIcon final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMOB_ICON_TYPE                                IconType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetNpcTalkIcon) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetNpcTalkIcon");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetNpcTalkIcon) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_SetNpcTalkIcon");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetNpcTalkIcon, ActorName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetNpcTalkIcon::ActorName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetNpcTalkIcon, IconType) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetNpcTalkIcon::IconType' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetPlayerLocation
// 0x000C (0x000C - 0x0000)
struct EventBlueprintFunctionLibrary_SetPlayerLocation final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetPlayerLocation) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetPlayerLocation");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetPlayerLocation) == 0x00000C, "Wrong size on EventBlueprintFunctionLibrary_SetPlayerLocation");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetPlayerLocation, Loc) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetPlayerLocation::Loc' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetPlayerPartyIgnoreSE
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetPlayerPartyIgnoreSE final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetPlayerPartyIgnoreSE) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetPlayerPartyIgnoreSE");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetPlayerPartyIgnoreSE) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetPlayerPartyIgnoreSE");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetPlayerPartyIgnoreSE, bEnable) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetPlayerPartyIgnoreSE::bEnable' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetSelectRideIcon
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetSelectRideIcon final
{
public:
	ERIDE_ICON_TYPE                               InIcon;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetSelectRideIcon) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetSelectRideIcon");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetSelectRideIcon) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetSelectRideIcon");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetSelectRideIcon, InIcon) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetSelectRideIcon::InIcon' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetSubtitles
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_SetSubtitles final
{
public:
	class FString                                 StringID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DispTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetSubtitles) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetSubtitles");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetSubtitles) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_SetSubtitles");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetSubtitles, StringID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetSubtitles::StringID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetSubtitles, DispTime) == 0x000010, "Member 'EventBlueprintFunctionLibrary_SetSubtitles::DispTime' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetSubtitlesQuest
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_SetSubtitlesQuest final
{
public:
	class FString                                 StringID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DispTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetSubtitlesQuest) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetSubtitlesQuest");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetSubtitlesQuest) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_SetSubtitlesQuest");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetSubtitlesQuest, StringID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetSubtitlesQuest::StringID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetSubtitlesQuest, DispTime) == 0x000010, "Member 'EventBlueprintFunctionLibrary_SetSubtitlesQuest::DispTime' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetSubtitlesQuestDelayTime
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime final
{
public:
	class FString                                 StringID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DispTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime, StringID) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime::StringID' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime, DispTime) == 0x000010, "Member 'EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime::DispTime' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime, DelayTime) == 0x000014, "Member 'EventBlueprintFunctionLibrary_SetSubtitlesQuestDelayTime::DelayTime' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetTargetAim
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_SetTargetAim final
{
public:
	class AAT_Character*                          Charctor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAT_Character*                          Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetTargetAim) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetTargetAim");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetTargetAim) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_SetTargetAim");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetTargetAim, Charctor) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetTargetAim::Charctor' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetTargetAim, Target) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetTargetAim::Target' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetupAndroidAssaultBattleCondition
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_SetupAndroidAssaultBattleCondition final
{
public:
	class FName                                   BattleName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetupAndroidAssaultBattleCondition) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetupAndroidAssaultBattleCondition");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetupAndroidAssaultBattleCondition) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_SetupAndroidAssaultBattleCondition");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetupAndroidAssaultBattleCondition, BattleName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetupAndroidAssaultBattleCondition::BattleName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetupCharacterCostume
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_SetupCharacterCostume final
{
public:
	class AQuestCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetupCharacterCostume) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetupCharacterCostume");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetupCharacterCostume) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_SetupCharacterCostume");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetupCharacterCostume, TargetCharacter) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetupCharacterCostume::TargetCharacter' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetUpdateSleepOtherQuest
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_SetUpdateSleepOtherQuest final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetUpdateSleepOtherQuest) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetUpdateSleepOtherQuest");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetUpdateSleepOtherQuest) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_SetUpdateSleepOtherQuest");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetUpdateSleepOtherQuest, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetUpdateSleepOtherQuest::QuestId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetUpdateSleepQuest
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_SetUpdateSleepQuest final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSleep;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetUpdateSleepQuest) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetUpdateSleepQuest");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetUpdateSleepQuest) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_SetUpdateSleepQuest");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetUpdateSleepQuest, QuestId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetUpdateSleepQuest::QuestId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetUpdateSleepQuest, bSleep) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetUpdateSleepQuest::bSleep' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetViewByControlCharacter
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_SetViewByControlCharacter final
{
public:
	bool                                          InbImmediate;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetViewByControlCharacter) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_SetViewByControlCharacter");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetViewByControlCharacter) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_SetViewByControlCharacter");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetViewByControlCharacter, InbImmediate) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetViewByControlCharacter::InbImmediate' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetViewByControlCharacterWithBlemdTime
// 0x0004 (0x0004 - 0x0000)
struct EventBlueprintFunctionLibrary_SetViewByControlCharacterWithBlemdTime final
{
public:
	float                                         FBlendTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetViewByControlCharacterWithBlemdTime) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_SetViewByControlCharacterWithBlemdTime");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetViewByControlCharacterWithBlemdTime) == 0x000004, "Wrong size on EventBlueprintFunctionLibrary_SetViewByControlCharacterWithBlemdTime");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetViewByControlCharacterWithBlemdTime, FBlendTime) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetViewByControlCharacterWithBlemdTime::FBlendTime' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SetViewTarget
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_SetViewTarget final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_SetViewTarget) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_SetViewTarget");
static_assert(sizeof(EventBlueprintFunctionLibrary_SetViewTarget) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_SetViewTarget");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetViewTarget, NewViewTarget) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SetViewTarget::NewViewTarget' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetViewTarget, BlendTime) == 0x000008, "Member 'EventBlueprintFunctionLibrary_SetViewTarget::BlendTime' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetViewTarget, BlendFunc) == 0x00000C, "Member 'EventBlueprintFunctionLibrary_SetViewTarget::BlendFunc' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetViewTarget, BlendExp) == 0x000010, "Member 'EventBlueprintFunctionLibrary_SetViewTarget::BlendExp' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SetViewTarget, bLockOutgoing) == 0x000014, "Member 'EventBlueprintFunctionLibrary_SetViewTarget::bLockOutgoing' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ShowNextPreviewDetail
// 0x0020 (0x0020 - 0x0000)
struct EventBlueprintFunctionLibrary_ShowNextPreviewDetail final
{
public:
	class FString                                 HeaderMessageId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubjectMessageId;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ShowNextPreviewDetail) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ShowNextPreviewDetail");
static_assert(sizeof(EventBlueprintFunctionLibrary_ShowNextPreviewDetail) == 0x000020, "Wrong size on EventBlueprintFunctionLibrary_ShowNextPreviewDetail");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowNextPreviewDetail, HeaderMessageId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ShowNextPreviewDetail::HeaderMessageId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowNextPreviewDetail, SubjectMessageId) == 0x000010, "Member 'EventBlueprintFunctionLibrary_ShowNextPreviewDetail::SubjectMessageId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ShowNextPreviewTitle
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_ShowNextPreviewTitle final
{
public:
	class FString                                 TitleMessageId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ShowNextPreviewTitle) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ShowNextPreviewTitle");
static_assert(sizeof(EventBlueprintFunctionLibrary_ShowNextPreviewTitle) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_ShowNextPreviewTitle");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowNextPreviewTitle, TitleMessageId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ShowNextPreviewTitle::TitleMessageId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ShowQuestImage
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_ShowQuestImage final
{
public:
	class FName                                   ReferenceId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ShowQuestImage) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_ShowQuestImage");
static_assert(sizeof(EventBlueprintFunctionLibrary_ShowQuestImage) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_ShowQuestImage");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowQuestImage, ReferenceId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ShowQuestImage::ReferenceId' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ShowTelop
// 0x0050 (0x0050 - 0x0000)
struct EventBlueprintFunctionLibrary_ShowTelop final
{
public:
	struct FTelopInfo                             TelopInfo;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTelopInfo                             TelopInfo2;                                        // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_ShowTelop) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ShowTelop");
static_assert(sizeof(EventBlueprintFunctionLibrary_ShowTelop) == 0x000050, "Wrong size on EventBlueprintFunctionLibrary_ShowTelop");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowTelop, TelopInfo) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ShowTelop::TelopInfo' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowTelop, TelopInfo2) == 0x000028, "Member 'EventBlueprintFunctionLibrary_ShowTelop::TelopInfo2' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.ShowTelopWithScale
// 0x0058 (0x0058 - 0x0000)
struct EventBlueprintFunctionLibrary_ShowTelopWithScale final
{
public:
	struct FTelopInfo                             TelopInfo;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTelopInfo                             TelopInfo2;                                        // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SizeRate;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_ShowTelopWithScale) == 0x000008, "Wrong alignment on EventBlueprintFunctionLibrary_ShowTelopWithScale");
static_assert(sizeof(EventBlueprintFunctionLibrary_ShowTelopWithScale) == 0x000058, "Wrong size on EventBlueprintFunctionLibrary_ShowTelopWithScale");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowTelopWithScale, TelopInfo) == 0x000000, "Member 'EventBlueprintFunctionLibrary_ShowTelopWithScale::TelopInfo' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowTelopWithScale, TelopInfo2) == 0x000028, "Member 'EventBlueprintFunctionLibrary_ShowTelopWithScale::TelopInfo2' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_ShowTelopWithScale, SizeRate) == 0x000050, "Member 'EventBlueprintFunctionLibrary_ShowTelopWithScale::SizeRate' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.SpawnActorWithName
// 0x0050 (0x0050 - 0x0000)
struct EventBlueprintFunctionLibrary_SpawnActorWithName final
{
public:
	class UClass*                                 ClassName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_SpawnActorWithName) == 0x000010, "Wrong alignment on EventBlueprintFunctionLibrary_SpawnActorWithName");
static_assert(sizeof(EventBlueprintFunctionLibrary_SpawnActorWithName) == 0x000050, "Wrong size on EventBlueprintFunctionLibrary_SpawnActorWithName");
static_assert(offsetof(EventBlueprintFunctionLibrary_SpawnActorWithName, ClassName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_SpawnActorWithName::ClassName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SpawnActorWithName, Transform) == 0x000010, "Member 'EventBlueprintFunctionLibrary_SpawnActorWithName::Transform' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SpawnActorWithName, ActorName) == 0x000040, "Member 'EventBlueprintFunctionLibrary_SpawnActorWithName::ActorName' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_SpawnActorWithName, ReturnValue) == 0x000048, "Member 'EventBlueprintFunctionLibrary_SpawnActorWithName::ReturnValue' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.StartAndroidAssaultReactiveCount
// 0x0008 (0x0008 - 0x0000)
struct EventBlueprintFunctionLibrary_StartAndroidAssaultReactiveCount final
{
public:
	class FName                                   CountName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_StartAndroidAssaultReactiveCount) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_StartAndroidAssaultReactiveCount");
static_assert(sizeof(EventBlueprintFunctionLibrary_StartAndroidAssaultReactiveCount) == 0x000008, "Wrong size on EventBlueprintFunctionLibrary_StartAndroidAssaultReactiveCount");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartAndroidAssaultReactiveCount, CountName) == 0x000000, "Member 'EventBlueprintFunctionLibrary_StartAndroidAssaultReactiveCount::CountName' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.StartQuestDirection
// 0x0010 (0x0010 - 0x0000)
struct EventBlueprintFunctionLibrary_StartQuestDirection final
{
public:
	class FName                                   DirectionId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenSuppoters;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_StartQuestDirection) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_StartQuestDirection");
static_assert(sizeof(EventBlueprintFunctionLibrary_StartQuestDirection) == 0x000010, "Wrong size on EventBlueprintFunctionLibrary_StartQuestDirection");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestDirection, DirectionId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_StartQuestDirection::DirectionId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestDirection, bHiddenSuppoters) == 0x000008, "Member 'EventBlueprintFunctionLibrary_StartQuestDirection::bHiddenSuppoters' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.StartQuestGeneralTalkEvent
// 0x0018 (0x0018 - 0x0000)
struct EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent final
{
public:
	class FName                                   DirectionId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBindingControl;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableIK;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAutoMove;                                     // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchGeneraTalkLookAt;                           // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenMobCharacters;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenLeader;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenSuppoters;                                  // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenClound;                                     // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenLandmark;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent) == 0x000004, "Wrong alignment on EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent");
static_assert(sizeof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent) == 0x000018, "Wrong size on EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, DirectionId) == 0x000000, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::DirectionId' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bBindingControl) == 0x000008, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bBindingControl' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bDisableIK) == 0x000009, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bDisableIK' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bStopAutoMove) == 0x00000A, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bStopAutoMove' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bSwitchGeneraTalkLookAt) == 0x00000B, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bSwitchGeneraTalkLookAt' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bHiddenMobCharacters) == 0x00000C, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bHiddenMobCharacters' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bHiddenLeader) == 0x00000D, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bHiddenLeader' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bHiddenSuppoters) == 0x00000E, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bHiddenSuppoters' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bHiddenClound) == 0x00000F, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bHiddenClound' has a wrong offset!");
static_assert(offsetof(EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent, bHiddenLandmark) == 0x000010, "Member 'EventBlueprintFunctionLibrary_StartQuestGeneralTalkEvent::bHiddenLandmark' has a wrong offset!");

// Function AT.EventBlueprintFunctionLibrary.StopDinosaurs
// 0x0001 (0x0001 - 0x0000)
struct EventBlueprintFunctionLibrary_StopDinosaurs final
{
public:
	bool                                          bStop;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBlueprintFunctionLibrary_StopDinosaurs) == 0x000001, "Wrong alignment on EventBlueprintFunctionLibrary_StopDinosaurs");
static_assert(sizeof(EventBlueprintFunctionLibrary_StopDinosaurs) == 0x000001, "Wrong size on EventBlueprintFunctionLibrary_StopDinosaurs");
static_assert(offsetof(EventBlueprintFunctionLibrary_StopDinosaurs, bStop) == 0x000000, "Member 'EventBlueprintFunctionLibrary_StopDinosaurs::bStop' has a wrong offset!");

// Function AT.FieldActionBonfireActor.OnProgressChanged
// 0x0004 (0x0004 - 0x0000)
struct FieldActionBonfireActor_OnProgressChanged final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldActionBonfireActor_OnProgressChanged) == 0x000004, "Wrong alignment on FieldActionBonfireActor_OnProgressChanged");
static_assert(sizeof(FieldActionBonfireActor_OnProgressChanged) == 0x000004, "Wrong size on FieldActionBonfireActor_OnProgressChanged");
static_assert(offsetof(FieldActionBonfireActor_OnProgressChanged, NextPhase) == 0x000000, "Member 'FieldActionBonfireActor_OnProgressChanged::NextPhase' has a wrong offset!");

// Function AT.ATActCpl034SkillBarrier.OnSpawnProjectile
// 0x0010 (0x0010 - 0x0000)
struct ATActCpl034SkillBarrier_OnSpawnProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl034SkillBarrier_OnSpawnProjectile) == 0x000008, "Wrong alignment on ATActCpl034SkillBarrier_OnSpawnProjectile");
static_assert(sizeof(ATActCpl034SkillBarrier_OnSpawnProjectile) == 0x000010, "Wrong size on ATActCpl034SkillBarrier_OnSpawnProjectile");
static_assert(offsetof(ATActCpl034SkillBarrier_OnSpawnProjectile, InProjectile) == 0x000000, "Member 'ATActCpl034SkillBarrier_OnSpawnProjectile::InProjectile' has a wrong offset!");
static_assert(offsetof(ATActCpl034SkillBarrier_OnSpawnProjectile, InOwner) == 0x000008, "Member 'ATActCpl034SkillBarrier_OnSpawnProjectile::InOwner' has a wrong offset!");

// Function AT.AT_UIMenuBarBase03.GetSelectValue
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuBarBase03_GetSelectValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuBarBase03_GetSelectValue) == 0x000004, "Wrong alignment on AT_UIMenuBarBase03_GetSelectValue");
static_assert(sizeof(AT_UIMenuBarBase03_GetSelectValue) == 0x000004, "Wrong size on AT_UIMenuBarBase03_GetSelectValue");
static_assert(offsetof(AT_UIMenuBarBase03_GetSelectValue, ReturnValue) == 0x000000, "Member 'AT_UIMenuBarBase03_GetSelectValue::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuBarBase03.InitListSetting
// 0x0018 (0x0018 - 0x0000)
struct AT_UIMenuBarBase03_InitListSetting final
{
public:
	TArray<struct FCmnMenuBar03Param>             MenuItemCtn;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectNo;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMenuBarBase03_InitListSetting) == 0x000008, "Wrong alignment on AT_UIMenuBarBase03_InitListSetting");
static_assert(sizeof(AT_UIMenuBarBase03_InitListSetting) == 0x000018, "Wrong size on AT_UIMenuBarBase03_InitListSetting");
static_assert(offsetof(AT_UIMenuBarBase03_InitListSetting, MenuItemCtn) == 0x000000, "Member 'AT_UIMenuBarBase03_InitListSetting::MenuItemCtn' has a wrong offset!");
static_assert(offsetof(AT_UIMenuBarBase03_InitListSetting, SelectNo) == 0x000010, "Member 'AT_UIMenuBarBase03_InitListSetting::SelectNo' has a wrong offset!");

// Function AT.AT_UIMenuBarBase03.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuBarBase03_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuBarBase03_MouseWheel) == 0x000004, "Wrong alignment on AT_UIMenuBarBase03_MouseWheel");
static_assert(sizeof(AT_UIMenuBarBase03_MouseWheel) == 0x000004, "Wrong size on AT_UIMenuBarBase03_MouseWheel");
static_assert(offsetof(AT_UIMenuBarBase03_MouseWheel, Dir) == 0x000000, "Member 'AT_UIMenuBarBase03_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIMenuBarBase03.MouseWheelOuter
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMenuBarBase03_MouseWheelOuter final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMenuBarBase03_MouseWheelOuter) == 0x000004, "Wrong alignment on AT_UIMenuBarBase03_MouseWheelOuter");
static_assert(sizeof(AT_UIMenuBarBase03_MouseWheelOuter) == 0x000008, "Wrong size on AT_UIMenuBarBase03_MouseWheelOuter");
static_assert(offsetof(AT_UIMenuBarBase03_MouseWheelOuter, Dir) == 0x000000, "Member 'AT_UIMenuBarBase03_MouseWheelOuter::Dir' has a wrong offset!");
static_assert(offsetof(AT_UIMenuBarBase03_MouseWheelOuter, ReturnValue) == 0x000004, "Member 'AT_UIMenuBarBase03_MouseWheelOuter::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuBarBase03.PageDown
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuBarBase03_PageDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuBarBase03_PageDown) == 0x000001, "Wrong alignment on AT_UIMenuBarBase03_PageDown");
static_assert(sizeof(AT_UIMenuBarBase03_PageDown) == 0x000001, "Wrong size on AT_UIMenuBarBase03_PageDown");
static_assert(offsetof(AT_UIMenuBarBase03_PageDown, ReturnValue) == 0x000000, "Member 'AT_UIMenuBarBase03_PageDown::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuBarBase03.PageUp
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuBarBase03_PageUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuBarBase03_PageUp) == 0x000001, "Wrong alignment on AT_UIMenuBarBase03_PageUp");
static_assert(sizeof(AT_UIMenuBarBase03_PageUp) == 0x000001, "Wrong size on AT_UIMenuBarBase03_PageUp");
static_assert(offsetof(AT_UIMenuBarBase03_PageUp, ReturnValue) == 0x000000, "Member 'AT_UIMenuBarBase03_PageUp::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuBarBase03.PlayArrow
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuBarBase03_PlayArrow final
{
public:
	bool                                          bLeft;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuBarBase03_PlayArrow) == 0x000001, "Wrong alignment on AT_UIMenuBarBase03_PlayArrow");
static_assert(sizeof(AT_UIMenuBarBase03_PlayArrow) == 0x000001, "Wrong size on AT_UIMenuBarBase03_PlayArrow");
static_assert(offsetof(AT_UIMenuBarBase03_PlayArrow, bLeft) == 0x000000, "Member 'AT_UIMenuBarBase03_PlayArrow::bLeft' has a wrong offset!");

// Function AT.AT_UIMenuBarBase03.SetEnableLoop
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuBarBase03_SetEnableLoop final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuBarBase03_SetEnableLoop) == 0x000001, "Wrong alignment on AT_UIMenuBarBase03_SetEnableLoop");
static_assert(sizeof(AT_UIMenuBarBase03_SetEnableLoop) == 0x000001, "Wrong size on AT_UIMenuBarBase03_SetEnableLoop");
static_assert(offsetof(AT_UIMenuBarBase03_SetEnableLoop, IsEnable) == 0x000000, "Member 'AT_UIMenuBarBase03_SetEnableLoop::IsEnable' has a wrong offset!");

// Function AT.UnderWaterRestartVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct UnderWaterRestartVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnderWaterRestartVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on UnderWaterRestartVolume_OnOverlapBegin");
static_assert(sizeof(UnderWaterRestartVolume_OnOverlapBegin) == 0x000010, "Wrong size on UnderWaterRestartVolume_OnOverlapBegin");
static_assert(offsetof(UnderWaterRestartVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'UnderWaterRestartVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(UnderWaterRestartVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'UnderWaterRestartVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.UnderWaterRestartVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct UnderWaterRestartVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnderWaterRestartVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on UnderWaterRestartVolume_OnOverlapEnd");
static_assert(sizeof(UnderWaterRestartVolume_OnOverlapEnd) == 0x000010, "Wrong size on UnderWaterRestartVolume_OnOverlapEnd");
static_assert(offsetof(UnderWaterRestartVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'UnderWaterRestartVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(UnderWaterRestartVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'UnderWaterRestartVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.FieldPointComponent.DebugUpdate
// 0x0004 (0x0004 - 0x0000)
struct FieldPointComponent_DebugUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldPointComponent_DebugUpdate) == 0x000004, "Wrong alignment on FieldPointComponent_DebugUpdate");
static_assert(sizeof(FieldPointComponent_DebugUpdate) == 0x000004, "Wrong size on FieldPointComponent_DebugUpdate");
static_assert(offsetof(FieldPointComponent_DebugUpdate, DeltaTime) == 0x000000, "Member 'FieldPointComponent_DebugUpdate::DeltaTime' has a wrong offset!");

// Function AT.MineralMiningPointNormal.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct MineralMiningPointNormal_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MineralMiningPointNormal_OnActionChange) == 0x000008, "Wrong alignment on MineralMiningPointNormal_OnActionChange");
static_assert(sizeof(MineralMiningPointNormal_OnActionChange) == 0x000010, "Wrong size on MineralMiningPointNormal_OnActionChange");
static_assert(offsetof(MineralMiningPointNormal_OnActionChange, InCharacter) == 0x000000, "Member 'MineralMiningPointNormal_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(MineralMiningPointNormal_OnActionChange, InActionIdPrev) == 0x000008, "Member 'MineralMiningPointNormal_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(MineralMiningPointNormal_OnActionChange, InActionIdNext) == 0x00000C, "Member 'MineralMiningPointNormal_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.MineralMiningPointNormal.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct MineralMiningPointNormal_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MineralMiningPointNormal_OnComponentHit) == 0x000008, "Wrong alignment on MineralMiningPointNormal_OnComponentHit");
static_assert(sizeof(MineralMiningPointNormal_OnComponentHit) == 0x0000B0, "Wrong size on MineralMiningPointNormal_OnComponentHit");
static_assert(offsetof(MineralMiningPointNormal_OnComponentHit, HitComponent) == 0x000000, "Member 'MineralMiningPointNormal_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(MineralMiningPointNormal_OnComponentHit, OtherActor) == 0x000008, "Member 'MineralMiningPointNormal_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(MineralMiningPointNormal_OnComponentHit, OtherComp) == 0x000010, "Member 'MineralMiningPointNormal_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(MineralMiningPointNormal_OnComponentHit, NormalImpulse) == 0x000018, "Member 'MineralMiningPointNormal_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(MineralMiningPointNormal_OnComponentHit, Hit) == 0x000028, "Member 'MineralMiningPointNormal_OnComponentHit::Hit' has a wrong offset!");

// Function AT.ATAtrociousBattleBase.OnBeginPlayLevelTiming
// 0x0008 (0x0008 - 0x0000)
struct ATAtrociousBattleBase_OnBeginPlayLevelTiming final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATAtrociousBattleBase_OnBeginPlayLevelTiming) == 0x000004, "Wrong alignment on ATAtrociousBattleBase_OnBeginPlayLevelTiming");
static_assert(sizeof(ATAtrociousBattleBase_OnBeginPlayLevelTiming) == 0x000008, "Wrong size on ATAtrociousBattleBase_OnBeginPlayLevelTiming");
static_assert(offsetof(ATAtrociousBattleBase_OnBeginPlayLevelTiming, LevelName) == 0x000000, "Member 'ATAtrociousBattleBase_OnBeginPlayLevelTiming::LevelName' has a wrong offset!");

// Function AT.ATWorldMapInfo.OnInGameBeginPlay
// 0x0108 (0x0108 - 0x0000)
struct ATWorldMapInfo_OnInGameBeginPlay final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWorldMapInfo_OnInGameBeginPlay) == 0x000008, "Wrong alignment on ATWorldMapInfo_OnInGameBeginPlay");
static_assert(sizeof(ATWorldMapInfo_OnInGameBeginPlay) == 0x000108, "Wrong size on ATWorldMapInfo_OnInGameBeginPlay");
static_assert(offsetof(ATWorldMapInfo_OnInGameBeginPlay, EventParam) == 0x000000, "Member 'ATWorldMapInfo_OnInGameBeginPlay::EventParam' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayer.OnChangeCostume
// 0x0002 (0x0002 - 0x0000)
struct AT_UIBattleHudPlayer_OnChangeCostume final
{
public:
	uint8                                         InVatiationID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InFormID;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudPlayer_OnChangeCostume) == 0x000001, "Wrong alignment on AT_UIBattleHudPlayer_OnChangeCostume");
static_assert(sizeof(AT_UIBattleHudPlayer_OnChangeCostume) == 0x000002, "Wrong size on AT_UIBattleHudPlayer_OnChangeCostume");
static_assert(offsetof(AT_UIBattleHudPlayer_OnChangeCostume, InVatiationID) == 0x000000, "Member 'AT_UIBattleHudPlayer_OnChangeCostume::InVatiationID' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudPlayer_OnChangeCostume, InFormID) == 0x000001, "Member 'AT_UIBattleHudPlayer_OnChangeCostume::InFormID' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayer.OnChangePlayer
// 0x0008 (0x0008 - 0x0000)
struct AT_UIBattleHudPlayer_OnChangePlayer final
{
public:
	class AAT_Character*                          InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudPlayer_OnChangePlayer) == 0x000008, "Wrong alignment on AT_UIBattleHudPlayer_OnChangePlayer");
static_assert(sizeof(AT_UIBattleHudPlayer_OnChangePlayer) == 0x000008, "Wrong size on AT_UIBattleHudPlayer_OnChangePlayer");
static_assert(offsetof(AT_UIBattleHudPlayer_OnChangePlayer, InChar) == 0x000000, "Member 'AT_UIBattleHudPlayer_OnChangePlayer::InChar' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayer.OnEntrySupport
// 0x0030 (0x0030 - 0x0000)
struct AT_UIBattleHudPlayer_OnEntrySupport final
{
public:
	struct FPartyMember                           InMember;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         InMemberType;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIBattleHudPlayer_OnEntrySupport) == 0x000008, "Wrong alignment on AT_UIBattleHudPlayer_OnEntrySupport");
static_assert(sizeof(AT_UIBattleHudPlayer_OnEntrySupport) == 0x000030, "Wrong size on AT_UIBattleHudPlayer_OnEntrySupport");
static_assert(offsetof(AT_UIBattleHudPlayer_OnEntrySupport, InMember) == 0x000000, "Member 'AT_UIBattleHudPlayer_OnEntrySupport::InMember' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudPlayer_OnEntrySupport, InMemberType) == 0x000028, "Member 'AT_UIBattleHudPlayer_OnEntrySupport::InMemberType' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayer.OnExitSupport
// 0x0030 (0x0030 - 0x0000)
struct AT_UIBattleHudPlayer_OnExitSupport final
{
public:
	struct FPartyMember                           InMember;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         InMemberType;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIBattleHudPlayer_OnExitSupport) == 0x000008, "Wrong alignment on AT_UIBattleHudPlayer_OnExitSupport");
static_assert(sizeof(AT_UIBattleHudPlayer_OnExitSupport) == 0x000030, "Wrong size on AT_UIBattleHudPlayer_OnExitSupport");
static_assert(offsetof(AT_UIBattleHudPlayer_OnExitSupport, InMember) == 0x000000, "Member 'AT_UIBattleHudPlayer_OnExitSupport::InMember' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudPlayer_OnExitSupport, InMemberType) == 0x000028, "Member 'AT_UIBattleHudPlayer_OnExitSupport::InMemberType' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayer.OnFormChange
// 0x0003 (0x0003 - 0x0000)
struct AT_UIBattleHudPlayer_OnFormChange final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationId;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FormID;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudPlayer_OnFormChange) == 0x000001, "Wrong alignment on AT_UIBattleHudPlayer_OnFormChange");
static_assert(sizeof(AT_UIBattleHudPlayer_OnFormChange) == 0x000003, "Wrong size on AT_UIBattleHudPlayer_OnFormChange");
static_assert(offsetof(AT_UIBattleHudPlayer_OnFormChange, IsOn) == 0x000000, "Member 'AT_UIBattleHudPlayer_OnFormChange::IsOn' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudPlayer_OnFormChange, VariationId) == 0x000001, "Member 'AT_UIBattleHudPlayer_OnFormChange::VariationId' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudPlayer_OnFormChange, FormID) == 0x000002, "Member 'AT_UIBattleHudPlayer_OnFormChange::FormID' has a wrong offset!");

// Function AT.AT_UIBattleHudPlayer.OnFusionEnd
// 0x0008 (0x0008 - 0x0000)
struct AT_UIBattleHudPlayer_OnFusionEnd final
{
public:
	class UATParty*                               PlayerParty;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudPlayer_OnFusionEnd) == 0x000008, "Wrong alignment on AT_UIBattleHudPlayer_OnFusionEnd");
static_assert(sizeof(AT_UIBattleHudPlayer_OnFusionEnd) == 0x000008, "Wrong size on AT_UIBattleHudPlayer_OnFusionEnd");
static_assert(offsetof(AT_UIBattleHudPlayer_OnFusionEnd, PlayerParty) == 0x000000, "Member 'AT_UIBattleHudPlayer_OnFusionEnd::PlayerParty' has a wrong offset!");

// Function AT.AnimNotifyState_AG_CharacterTrail.OverridePSTemplate
// 0x0018 (0x0018 - 0x0000)
struct AnimNotifyState_AG_CharacterTrail_OverridePSTemplate final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_AG_CharacterTrail_OverridePSTemplate) == 0x000008, "Wrong alignment on AnimNotifyState_AG_CharacterTrail_OverridePSTemplate");
static_assert(sizeof(AnimNotifyState_AG_CharacterTrail_OverridePSTemplate) == 0x000018, "Wrong size on AnimNotifyState_AG_CharacterTrail_OverridePSTemplate");
static_assert(offsetof(AnimNotifyState_AG_CharacterTrail_OverridePSTemplate, MeshComp) == 0x000000, "Member 'AnimNotifyState_AG_CharacterTrail_OverridePSTemplate::MeshComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AG_CharacterTrail_OverridePSTemplate, Animation) == 0x000008, "Member 'AnimNotifyState_AG_CharacterTrail_OverridePSTemplate::Animation' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AG_CharacterTrail_OverridePSTemplate, ReturnValue) == 0x000010, "Member 'AnimNotifyState_AG_CharacterTrail_OverridePSTemplate::ReturnValue' has a wrong offset!");

// Function AT.AnimNotifyState_AttachObject.GetAttachedObject
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_AttachObject_GetAttachedObject final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_AttachObject_GetAttachedObject) == 0x000008, "Wrong alignment on AnimNotifyState_AttachObject_GetAttachedObject");
static_assert(sizeof(AnimNotifyState_AttachObject_GetAttachedObject) == 0x000010, "Wrong size on AnimNotifyState_AttachObject_GetAttachedObject");
static_assert(offsetof(AnimNotifyState_AttachObject_GetAttachedObject, MeshComp) == 0x000000, "Member 'AnimNotifyState_AttachObject_GetAttachedObject::MeshComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AttachObject_GetAttachedObject, ReturnValue) == 0x000008, "Member 'AnimNotifyState_AttachObject_GetAttachedObject::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.ForceSetSelect
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMenuListBase00_ForceSetSelect final
{
public:
	int32                                         NO;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayInAnim;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMenuListBase00_ForceSetSelect) == 0x000004, "Wrong alignment on AT_UIMenuListBase00_ForceSetSelect");
static_assert(sizeof(AT_UIMenuListBase00_ForceSetSelect) == 0x000008, "Wrong size on AT_UIMenuListBase00_ForceSetSelect");
static_assert(offsetof(AT_UIMenuListBase00_ForceSetSelect, NO) == 0x000000, "Member 'AT_UIMenuListBase00_ForceSetSelect::NO' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_ForceSetSelect, IsPlayInAnim) == 0x000004, "Member 'AT_UIMenuListBase00_ForceSetSelect::IsPlayInAnim' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.InitListSetting
// 0x0038 (0x0038 - 0x0000)
struct AT_UIMenuListBase00_InitListSetting final
{
public:
	class FString                                 TitleTxt;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NumTxt;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCmnMenuList00Param>            MenuItemCtn;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectNo;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRankStar;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMenuListBase00_InitListSetting) == 0x000008, "Wrong alignment on AT_UIMenuListBase00_InitListSetting");
static_assert(sizeof(AT_UIMenuListBase00_InitListSetting) == 0x000038, "Wrong size on AT_UIMenuListBase00_InitListSetting");
static_assert(offsetof(AT_UIMenuListBase00_InitListSetting, TitleTxt) == 0x000000, "Member 'AT_UIMenuListBase00_InitListSetting::TitleTxt' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_InitListSetting, NumTxt) == 0x000010, "Member 'AT_UIMenuListBase00_InitListSetting::NumTxt' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_InitListSetting, MenuItemCtn) == 0x000020, "Member 'AT_UIMenuListBase00_InitListSetting::MenuItemCtn' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_InitListSetting, SelectNo) == 0x000030, "Member 'AT_UIMenuListBase00_InitListSetting::SelectNo' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_InitListSetting, IsRankStar) == 0x000034, "Member 'AT_UIMenuListBase00_InitListSetting::IsRankStar' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.InitSkillListSetting
// 0x0028 (0x0028 - 0x0000)
struct AT_UIMenuListBase00_InitSkillListSetting final
{
public:
	class FString                                 TitleTxt;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCmnSkillMenuList00Param>       MenuItemCtn;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectNo;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMenuListBase00_InitSkillListSetting) == 0x000008, "Wrong alignment on AT_UIMenuListBase00_InitSkillListSetting");
static_assert(sizeof(AT_UIMenuListBase00_InitSkillListSetting) == 0x000028, "Wrong size on AT_UIMenuListBase00_InitSkillListSetting");
static_assert(offsetof(AT_UIMenuListBase00_InitSkillListSetting, TitleTxt) == 0x000000, "Member 'AT_UIMenuListBase00_InitSkillListSetting::TitleTxt' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_InitSkillListSetting, MenuItemCtn) == 0x000010, "Member 'AT_UIMenuListBase00_InitSkillListSetting::MenuItemCtn' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_InitSkillListSetting, SelectNo) == 0x000020, "Member 'AT_UIMenuListBase00_InitSkillListSetting::SelectNo' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuListBase00_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_MouseWheel) == 0x000004, "Wrong alignment on AT_UIMenuListBase00_MouseWheel");
static_assert(sizeof(AT_UIMenuListBase00_MouseWheel) == 0x000004, "Wrong size on AT_UIMenuListBase00_MouseWheel");
static_assert(offsetof(AT_UIMenuListBase00_MouseWheel, Dir) == 0x000000, "Member 'AT_UIMenuListBase00_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.PageDown
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase00_PageDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_PageDown) == 0x000001, "Wrong alignment on AT_UIMenuListBase00_PageDown");
static_assert(sizeof(AT_UIMenuListBase00_PageDown) == 0x000001, "Wrong size on AT_UIMenuListBase00_PageDown");
static_assert(offsetof(AT_UIMenuListBase00_PageDown, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase00_PageDown::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.PageUp
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase00_PageUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_PageUp) == 0x000001, "Wrong alignment on AT_UIMenuListBase00_PageUp");
static_assert(sizeof(AT_UIMenuListBase00_PageUp) == 0x000001, "Wrong size on AT_UIMenuListBase00_PageUp");
static_assert(offsetof(AT_UIMenuListBase00_PageUp, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase00_PageUp::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.RequestEnterAnim
// 0x0002 (0x0002 - 0x0000)
struct AT_UIMenuListBase00_RequestEnterAnim final
{
public:
	bool                                          IsEndDeactive;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOut;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_RequestEnterAnim) == 0x000001, "Wrong alignment on AT_UIMenuListBase00_RequestEnterAnim");
static_assert(sizeof(AT_UIMenuListBase00_RequestEnterAnim) == 0x000002, "Wrong size on AT_UIMenuListBase00_RequestEnterAnim");
static_assert(offsetof(AT_UIMenuListBase00_RequestEnterAnim, IsEndDeactive) == 0x000000, "Member 'AT_UIMenuListBase00_RequestEnterAnim::IsEndDeactive' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_RequestEnterAnim, IsOut) == 0x000001, "Member 'AT_UIMenuListBase00_RequestEnterAnim::IsOut' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.SetEnableLoop
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase00_SetEnableLoop final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_SetEnableLoop) == 0x000001, "Wrong alignment on AT_UIMenuListBase00_SetEnableLoop");
static_assert(sizeof(AT_UIMenuListBase00_SetEnableLoop) == 0x000001, "Wrong size on AT_UIMenuListBase00_SetEnableLoop");
static_assert(offsetof(AT_UIMenuListBase00_SetEnableLoop, IsEnable) == 0x000000, "Member 'AT_UIMenuListBase00_SetEnableLoop::IsEnable' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.SetListActive
// 0x000C (0x000C - 0x0000)
struct AT_UIMenuListBase00_SetListActive final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartIdx;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_SetListActive) == 0x000004, "Wrong alignment on AT_UIMenuListBase00_SetListActive");
static_assert(sizeof(AT_UIMenuListBase00_SetListActive) == 0x00000C, "Wrong size on AT_UIMenuListBase00_SetListActive");
static_assert(offsetof(AT_UIMenuListBase00_SetListActive, bIsActive) == 0x000000, "Member 'AT_UIMenuListBase00_SetListActive::bIsActive' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_SetListActive, StartIdx) == 0x000004, "Member 'AT_UIMenuListBase00_SetListActive::StartIdx' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase00_SetListActive, EndIdx) == 0x000008, "Member 'AT_UIMenuListBase00_SetListActive::EndIdx' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.SetThinMode
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase00_SetThinMode final
{
public:
	bool                                          bIsThin;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_SetThinMode) == 0x000001, "Wrong alignment on AT_UIMenuListBase00_SetThinMode");
static_assert(sizeof(AT_UIMenuListBase00_SetThinMode) == 0x000001, "Wrong size on AT_UIMenuListBase00_SetThinMode");
static_assert(offsetof(AT_UIMenuListBase00_SetThinMode, bIsThin) == 0x000000, "Member 'AT_UIMenuListBase00_SetThinMode::bIsThin' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuListBase00_SetWidth final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_SetWidth) == 0x000004, "Wrong alignment on AT_UIMenuListBase00_SetWidth");
static_assert(sizeof(AT_UIMenuListBase00_SetWidth) == 0x000004, "Wrong size on AT_UIMenuListBase00_SetWidth");
static_assert(offsetof(AT_UIMenuListBase00_SetWidth, Width) == 0x000000, "Member 'AT_UIMenuListBase00_SetWidth::Width' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.GetListNum
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuListBase00_GetListNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_GetListNum) == 0x000004, "Wrong alignment on AT_UIMenuListBase00_GetListNum");
static_assert(sizeof(AT_UIMenuListBase00_GetListNum) == 0x000004, "Wrong size on AT_UIMenuListBase00_GetListNum");
static_assert(offsetof(AT_UIMenuListBase00_GetListNum, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase00_GetListNum::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase00.GetSelectValue
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuListBase00_GetSelectValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase00_GetSelectValue) == 0x000004, "Wrong alignment on AT_UIMenuListBase00_GetSelectValue");
static_assert(sizeof(AT_UIMenuListBase00_GetSelectValue) == 0x000004, "Wrong size on AT_UIMenuListBase00_GetSelectValue");
static_assert(offsetof(AT_UIMenuListBase00_GetSelectValue, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase00_GetSelectValue::ReturnValue' has a wrong offset!");

// Function AT.AnimNotifyState_AttackHitAttachPhoton.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct AnimNotifyState_AttackHitAttachPhoton_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_AttackHitAttachPhoton_BeginOverlap) == 0x000008, "Wrong alignment on AnimNotifyState_AttackHitAttachPhoton_BeginOverlap");
static_assert(sizeof(AnimNotifyState_AttackHitAttachPhoton_BeginOverlap) == 0x0000A8, "Wrong size on AnimNotifyState_AttackHitAttachPhoton_BeginOverlap");
static_assert(offsetof(AnimNotifyState_AttackHitAttachPhoton_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'AnimNotifyState_AttackHitAttachPhoton_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AttackHitAttachPhoton_BeginOverlap, OtherActor) == 0x000008, "Member 'AnimNotifyState_AttackHitAttachPhoton_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AttackHitAttachPhoton_BeginOverlap, OtherComp) == 0x000010, "Member 'AnimNotifyState_AttackHitAttachPhoton_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AttackHitAttachPhoton_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'AnimNotifyState_AttackHitAttachPhoton_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AttackHitAttachPhoton_BeginOverlap, bFromSweep) == 0x00001C, "Member 'AnimNotifyState_AttackHitAttachPhoton_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_AttackHitAttachPhoton_BeginOverlap, SweepResult) == 0x000020, "Member 'AnimNotifyState_AttackHitAttachPhoton_BeginOverlap::SweepResult' has a wrong offset!");

// Function AT.AT_UIMenuListBase01.GetSelectValue
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuListBase01_GetSelectValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase01_GetSelectValue) == 0x000004, "Wrong alignment on AT_UIMenuListBase01_GetSelectValue");
static_assert(sizeof(AT_UIMenuListBase01_GetSelectValue) == 0x000004, "Wrong size on AT_UIMenuListBase01_GetSelectValue");
static_assert(offsetof(AT_UIMenuListBase01_GetSelectValue, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase01_GetSelectValue::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase01.InitListSetting
// 0x0038 (0x0038 - 0x0000)
struct AT_UIMenuListBase01_InitListSetting final
{
public:
	class FString                                 TitleTxt;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NumTxt;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCmnMenuListParam>              MenuItemCtn;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectNo;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllDisp;                                           // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMenuListBase01_InitListSetting) == 0x000008, "Wrong alignment on AT_UIMenuListBase01_InitListSetting");
static_assert(sizeof(AT_UIMenuListBase01_InitListSetting) == 0x000038, "Wrong size on AT_UIMenuListBase01_InitListSetting");
static_assert(offsetof(AT_UIMenuListBase01_InitListSetting, TitleTxt) == 0x000000, "Member 'AT_UIMenuListBase01_InitListSetting::TitleTxt' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase01_InitListSetting, NumTxt) == 0x000010, "Member 'AT_UIMenuListBase01_InitListSetting::NumTxt' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase01_InitListSetting, MenuItemCtn) == 0x000020, "Member 'AT_UIMenuListBase01_InitListSetting::MenuItemCtn' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase01_InitListSetting, SelectNo) == 0x000030, "Member 'AT_UIMenuListBase01_InitListSetting::SelectNo' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase01_InitListSetting, AllDisp) == 0x000034, "Member 'AT_UIMenuListBase01_InitListSetting::AllDisp' has a wrong offset!");

// Function AT.AT_UIMenuListBase01.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuListBase01_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase01_MouseWheel) == 0x000004, "Wrong alignment on AT_UIMenuListBase01_MouseWheel");
static_assert(sizeof(AT_UIMenuListBase01_MouseWheel) == 0x000004, "Wrong size on AT_UIMenuListBase01_MouseWheel");
static_assert(offsetof(AT_UIMenuListBase01_MouseWheel, Dir) == 0x000000, "Member 'AT_UIMenuListBase01_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIMenuListBase01.PageDown
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase01_PageDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase01_PageDown) == 0x000001, "Wrong alignment on AT_UIMenuListBase01_PageDown");
static_assert(sizeof(AT_UIMenuListBase01_PageDown) == 0x000001, "Wrong size on AT_UIMenuListBase01_PageDown");
static_assert(offsetof(AT_UIMenuListBase01_PageDown, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase01_PageDown::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase01.PageUp
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase01_PageUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase01_PageUp) == 0x000001, "Wrong alignment on AT_UIMenuListBase01_PageUp");
static_assert(sizeof(AT_UIMenuListBase01_PageUp) == 0x000001, "Wrong size on AT_UIMenuListBase01_PageUp");
static_assert(offsetof(AT_UIMenuListBase01_PageUp, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase01_PageUp::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase01.RequestPlayInAnim
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase01_RequestPlayInAnim final
{
public:
	bool                                          IsFade;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase01_RequestPlayInAnim) == 0x000001, "Wrong alignment on AT_UIMenuListBase01_RequestPlayInAnim");
static_assert(sizeof(AT_UIMenuListBase01_RequestPlayInAnim) == 0x000001, "Wrong size on AT_UIMenuListBase01_RequestPlayInAnim");
static_assert(offsetof(AT_UIMenuListBase01_RequestPlayInAnim, IsFade) == 0x000000, "Member 'AT_UIMenuListBase01_RequestPlayInAnim::IsFade' has a wrong offset!");

// Function AT.AT_UIMenuListBase01.RequestPlayOutAnim
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase01_RequestPlayOutAnim final
{
public:
	bool                                          IsFade;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase01_RequestPlayOutAnim) == 0x000001, "Wrong alignment on AT_UIMenuListBase01_RequestPlayOutAnim");
static_assert(sizeof(AT_UIMenuListBase01_RequestPlayOutAnim) == 0x000001, "Wrong size on AT_UIMenuListBase01_RequestPlayOutAnim");
static_assert(offsetof(AT_UIMenuListBase01_RequestPlayOutAnim, IsFade) == 0x000000, "Member 'AT_UIMenuListBase01_RequestPlayOutAnim::IsFade' has a wrong offset!");

// Function AT.AT_UIMenuListBase01.SetEnableLoop
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase01_SetEnableLoop final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase01_SetEnableLoop) == 0x000001, "Wrong alignment on AT_UIMenuListBase01_SetEnableLoop");
static_assert(sizeof(AT_UIMenuListBase01_SetEnableLoop) == 0x000001, "Wrong size on AT_UIMenuListBase01_SetEnableLoop");
static_assert(offsetof(AT_UIMenuListBase01_SetEnableLoop, IsEnable) == 0x000000, "Member 'AT_UIMenuListBase01_SetEnableLoop::IsEnable' has a wrong offset!");

// Function AT.AT_UIMenuListBase03.GetSelectValue
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuListBase03_GetSelectValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase03_GetSelectValue) == 0x000004, "Wrong alignment on AT_UIMenuListBase03_GetSelectValue");
static_assert(sizeof(AT_UIMenuListBase03_GetSelectValue) == 0x000004, "Wrong size on AT_UIMenuListBase03_GetSelectValue");
static_assert(offsetof(AT_UIMenuListBase03_GetSelectValue, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase03_GetSelectValue::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase03.InitListSetting
// 0x0028 (0x0028 - 0x0000)
struct AT_UIMenuListBase03_InitListSetting final
{
public:
	class FString                                 TitleTxt;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCmnMenuList03Param>            MenuItemCtn;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectNo;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMenuListBase03_InitListSetting) == 0x000008, "Wrong alignment on AT_UIMenuListBase03_InitListSetting");
static_assert(sizeof(AT_UIMenuListBase03_InitListSetting) == 0x000028, "Wrong size on AT_UIMenuListBase03_InitListSetting");
static_assert(offsetof(AT_UIMenuListBase03_InitListSetting, TitleTxt) == 0x000000, "Member 'AT_UIMenuListBase03_InitListSetting::TitleTxt' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase03_InitListSetting, MenuItemCtn) == 0x000010, "Member 'AT_UIMenuListBase03_InitListSetting::MenuItemCtn' has a wrong offset!");
static_assert(offsetof(AT_UIMenuListBase03_InitListSetting, SelectNo) == 0x000020, "Member 'AT_UIMenuListBase03_InitListSetting::SelectNo' has a wrong offset!");

// Function AT.AT_UIMenuListBase03.SetEnableLoop
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase03_SetEnableLoop final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase03_SetEnableLoop) == 0x000001, "Wrong alignment on AT_UIMenuListBase03_SetEnableLoop");
static_assert(sizeof(AT_UIMenuListBase03_SetEnableLoop) == 0x000001, "Wrong size on AT_UIMenuListBase03_SetEnableLoop");
static_assert(offsetof(AT_UIMenuListBase03_SetEnableLoop, IsEnable) == 0x000000, "Member 'AT_UIMenuListBase03_SetEnableLoop::IsEnable' has a wrong offset!");

// Function AT.ATActAssaultAttack.OnSettleEvent
// 0x0108 (0x0108 - 0x0000)
struct ATActAssaultAttack_OnSettleEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActAssaultAttack_OnSettleEvent) == 0x000008, "Wrong alignment on ATActAssaultAttack_OnSettleEvent");
static_assert(sizeof(ATActAssaultAttack_OnSettleEvent) == 0x000108, "Wrong size on ATActAssaultAttack_OnSettleEvent");
static_assert(offsetof(ATActAssaultAttack_OnSettleEvent, EvParam) == 0x000000, "Member 'ATActAssaultAttack_OnSettleEvent::EvParam' has a wrong offset!");

// Function AT.AnimNotifyState_DirectionCamera.OnNotifyBegin
// 0x0018 (0x0018 - 0x0000)
struct AnimNotifyState_DirectionCamera_OnNotifyBegin final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimNotifyState_DirectionCamera_OnNotifyBegin) == 0x000008, "Wrong alignment on AnimNotifyState_DirectionCamera_OnNotifyBegin");
static_assert(sizeof(AnimNotifyState_DirectionCamera_OnNotifyBegin) == 0x000018, "Wrong size on AnimNotifyState_DirectionCamera_OnNotifyBegin");
static_assert(offsetof(AnimNotifyState_DirectionCamera_OnNotifyBegin, MeshComp) == 0x000000, "Member 'AnimNotifyState_DirectionCamera_OnNotifyBegin::MeshComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_DirectionCamera_OnNotifyBegin, Animation) == 0x000008, "Member 'AnimNotifyState_DirectionCamera_OnNotifyBegin::Animation' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_DirectionCamera_OnNotifyBegin, TotalDuration) == 0x000010, "Member 'AnimNotifyState_DirectionCamera_OnNotifyBegin::TotalDuration' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_DirectionCamera_OnNotifyBegin, ReturnValue) == 0x000014, "Member 'AnimNotifyState_DirectionCamera_OnNotifyBegin::ReturnValue' has a wrong offset!");

// Function AT.AnimNotifyState_DirectionCamera.OnNotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct AnimNotifyState_DirectionCamera_OnNotifyEnd final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimNotifyState_DirectionCamera_OnNotifyEnd) == 0x000008, "Wrong alignment on AnimNotifyState_DirectionCamera_OnNotifyEnd");
static_assert(sizeof(AnimNotifyState_DirectionCamera_OnNotifyEnd) == 0x000018, "Wrong size on AnimNotifyState_DirectionCamera_OnNotifyEnd");
static_assert(offsetof(AnimNotifyState_DirectionCamera_OnNotifyEnd, MeshComp) == 0x000000, "Member 'AnimNotifyState_DirectionCamera_OnNotifyEnd::MeshComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_DirectionCamera_OnNotifyEnd, Animation) == 0x000008, "Member 'AnimNotifyState_DirectionCamera_OnNotifyEnd::Animation' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_DirectionCamera_OnNotifyEnd, ReturnValue) == 0x000010, "Member 'AnimNotifyState_DirectionCamera_OnNotifyEnd::ReturnValue' has a wrong offset!");

// Function AT.AT_UIBattleManager.OnBattleCutinAnimEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UIBattleManager_OnBattleCutinAnimEnd final
{
public:
	EBattleCutin_AnimType                         InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleManager_OnBattleCutinAnimEnd) == 0x000001, "Wrong alignment on AT_UIBattleManager_OnBattleCutinAnimEnd");
static_assert(sizeof(AT_UIBattleManager_OnBattleCutinAnimEnd) == 0x000001, "Wrong size on AT_UIBattleManager_OnBattleCutinAnimEnd");
static_assert(offsetof(AT_UIBattleManager_OnBattleCutinAnimEnd, InType) == 0x000000, "Member 'AT_UIBattleManager_OnBattleCutinAnimEnd::InType' has a wrong offset!");

// Function AT.AT_UIBattleManager.OnPause
// 0x0108 (0x0108 - 0x0000)
struct AT_UIBattleManager_OnPause final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleManager_OnPause) == 0x000008, "Wrong alignment on AT_UIBattleManager_OnPause");
static_assert(sizeof(AT_UIBattleManager_OnPause) == 0x000108, "Wrong size on AT_UIBattleManager_OnPause");
static_assert(offsetof(AT_UIBattleManager_OnPause, EventParam) == 0x000000, "Member 'AT_UIBattleManager_OnPause::EventParam' has a wrong offset!");

// Function AT.AT_UIMenuListBase06.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMenuListBase06_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase06_MouseWheel) == 0x000004, "Wrong alignment on AT_UIMenuListBase06_MouseWheel");
static_assert(sizeof(AT_UIMenuListBase06_MouseWheel) == 0x000004, "Wrong size on AT_UIMenuListBase06_MouseWheel");
static_assert(offsetof(AT_UIMenuListBase06_MouseWheel, Dir) == 0x000000, "Member 'AT_UIMenuListBase06_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIMenuListBase06.PageDown
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase06_PageDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase06_PageDown) == 0x000001, "Wrong alignment on AT_UIMenuListBase06_PageDown");
static_assert(sizeof(AT_UIMenuListBase06_PageDown) == 0x000001, "Wrong size on AT_UIMenuListBase06_PageDown");
static_assert(offsetof(AT_UIMenuListBase06_PageDown, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase06_PageDown::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuListBase06.PageUp
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMenuListBase06_PageUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuListBase06_PageUp) == 0x000001, "Wrong alignment on AT_UIMenuListBase06_PageUp");
static_assert(sizeof(AT_UIMenuListBase06_PageUp) == 0x000001, "Wrong size on AT_UIMenuListBase06_PageUp");
static_assert(offsetof(AT_UIMenuListBase06_PageUp, ReturnValue) == 0x000000, "Member 'AT_UIMenuListBase06_PageUp::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.ATStopSlotAnimation
// 0x0010 (0x0010 - 0x0000)
struct AT_AnimInstance_ATStopSlotAnimation final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlotNodeName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_ATStopSlotAnimation) == 0x000004, "Wrong alignment on AT_AnimInstance_ATStopSlotAnimation");
static_assert(sizeof(AT_AnimInstance_ATStopSlotAnimation) == 0x000010, "Wrong size on AT_AnimInstance_ATStopSlotAnimation");
static_assert(offsetof(AT_AnimInstance_ATStopSlotAnimation, InBlendOutTime) == 0x000000, "Member 'AT_AnimInstance_ATStopSlotAnimation::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(AT_AnimInstance_ATStopSlotAnimation, SlotNodeName) == 0x000008, "Member 'AT_AnimInstance_ATStopSlotAnimation::SlotNodeName' has a wrong offset!");

// Function AT.AT_AnimInstance.GetIsJoinIngameDemo
// 0x0001 (0x0001 - 0x0000)
struct AT_AnimInstance_GetIsJoinIngameDemo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_GetIsJoinIngameDemo) == 0x000001, "Wrong alignment on AT_AnimInstance_GetIsJoinIngameDemo");
static_assert(sizeof(AT_AnimInstance_GetIsJoinIngameDemo) == 0x000001, "Wrong size on AT_AnimInstance_GetIsJoinIngameDemo");
static_assert(offsetof(AT_AnimInstance_GetIsJoinIngameDemo, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_GetIsJoinIngameDemo::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.IsSlotAnimationExtend
// 0x0001 (0x0001 - 0x0000)
struct AT_AnimInstance_IsSlotAnimationExtend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_IsSlotAnimationExtend) == 0x000001, "Wrong alignment on AT_AnimInstance_IsSlotAnimationExtend");
static_assert(sizeof(AT_AnimInstance_IsSlotAnimationExtend) == 0x000001, "Wrong size on AT_AnimInstance_IsSlotAnimationExtend");
static_assert(offsetof(AT_AnimInstance_IsSlotAnimationExtend, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_IsSlotAnimationExtend::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct AT_AnimInstance_GetCharacter final
{
public:
	class AAT_CharacterBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_GetCharacter) == 0x000008, "Wrong alignment on AT_AnimInstance_GetCharacter");
static_assert(sizeof(AT_AnimInstance_GetCharacter) == 0x000008, "Wrong size on AT_AnimInstance_GetCharacter");
static_assert(offsetof(AT_AnimInstance_GetCharacter, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_GetCharacter::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.GetClothesAdditiveAlpha
// 0x0004 (0x0004 - 0x0000)
struct AT_AnimInstance_GetClothesAdditiveAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_GetClothesAdditiveAlpha) == 0x000004, "Wrong alignment on AT_AnimInstance_GetClothesAdditiveAlpha");
static_assert(sizeof(AT_AnimInstance_GetClothesAdditiveAlpha) == 0x000004, "Wrong size on AT_AnimInstance_GetClothesAdditiveAlpha");
static_assert(offsetof(AT_AnimInstance_GetClothesAdditiveAlpha, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_GetClothesAdditiveAlpha::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.GetHairAdditiveAlpha
// 0x0004 (0x0004 - 0x0000)
struct AT_AnimInstance_GetHairAdditiveAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_GetHairAdditiveAlpha) == 0x000004, "Wrong alignment on AT_AnimInstance_GetHairAdditiveAlpha");
static_assert(sizeof(AT_AnimInstance_GetHairAdditiveAlpha) == 0x000004, "Wrong size on AT_AnimInstance_GetHairAdditiveAlpha");
static_assert(offsetof(AT_AnimInstance_GetHairAdditiveAlpha, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_GetHairAdditiveAlpha::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.GetOptionsAdditiveAlpha
// 0x0004 (0x0004 - 0x0000)
struct AT_AnimInstance_GetOptionsAdditiveAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_GetOptionsAdditiveAlpha) == 0x000004, "Wrong alignment on AT_AnimInstance_GetOptionsAdditiveAlpha");
static_assert(sizeof(AT_AnimInstance_GetOptionsAdditiveAlpha) == 0x000004, "Wrong size on AT_AnimInstance_GetOptionsAdditiveAlpha");
static_assert(offsetof(AT_AnimInstance_GetOptionsAdditiveAlpha, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_GetOptionsAdditiveAlpha::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.IsAdditiveClothes
// 0x0001 (0x0001 - 0x0000)
struct AT_AnimInstance_IsAdditiveClothes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_IsAdditiveClothes) == 0x000001, "Wrong alignment on AT_AnimInstance_IsAdditiveClothes");
static_assert(sizeof(AT_AnimInstance_IsAdditiveClothes) == 0x000001, "Wrong size on AT_AnimInstance_IsAdditiveClothes");
static_assert(offsetof(AT_AnimInstance_IsAdditiveClothes, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_IsAdditiveClothes::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.IsAdditiveHair
// 0x0001 (0x0001 - 0x0000)
struct AT_AnimInstance_IsAdditiveHair final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_IsAdditiveHair) == 0x000001, "Wrong alignment on AT_AnimInstance_IsAdditiveHair");
static_assert(sizeof(AT_AnimInstance_IsAdditiveHair) == 0x000001, "Wrong size on AT_AnimInstance_IsAdditiveHair");
static_assert(offsetof(AT_AnimInstance_IsAdditiveHair, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_IsAdditiveHair::ReturnValue' has a wrong offset!");

// Function AT.AT_AnimInstance.IsAdditiveOptions
// 0x0001 (0x0001 - 0x0000)
struct AT_AnimInstance_IsAdditiveOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_AnimInstance_IsAdditiveOptions) == 0x000001, "Wrong alignment on AT_AnimInstance_IsAdditiveOptions");
static_assert(sizeof(AT_AnimInstance_IsAdditiveOptions) == 0x000001, "Wrong size on AT_AnimInstance_IsAdditiveOptions");
static_assert(offsetof(AT_AnimInstance_IsAdditiveOptions, ReturnValue) == 0x000000, "Member 'AT_AnimInstance_IsAdditiveOptions::ReturnValue' has a wrong offset!");

// Function AT.ATDirectionBase.OnBeginDirection
// 0x0048 (0x0048 - 0x0000)
struct ATDirectionBase_OnBeginDirection final
{
public:
	struct FDirectionParameter                    InParameter;                                       // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDirectionBase_OnBeginDirection) == 0x000008, "Wrong alignment on ATDirectionBase_OnBeginDirection");
static_assert(sizeof(ATDirectionBase_OnBeginDirection) == 0x000048, "Wrong size on ATDirectionBase_OnBeginDirection");
static_assert(offsetof(ATDirectionBase_OnBeginDirection, InParameter) == 0x000000, "Member 'ATDirectionBase_OnBeginDirection::InParameter' has a wrong offset!");

// Function AT.AT_DamageExpCharacter.ApplyAppearance
// 0x0001 (0x0001 - 0x0000)
struct AT_DamageExpCharacter_ApplyAppearance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_DamageExpCharacter_ApplyAppearance) == 0x000001, "Wrong alignment on AT_DamageExpCharacter_ApplyAppearance");
static_assert(sizeof(AT_DamageExpCharacter_ApplyAppearance) == 0x000001, "Wrong size on AT_DamageExpCharacter_ApplyAppearance");
static_assert(offsetof(AT_DamageExpCharacter_ApplyAppearance, ReturnValue) == 0x000000, "Member 'AT_DamageExpCharacter_ApplyAppearance::ReturnValue' has a wrong offset!");

// Function AT.ATDLC6FieldMemoriesActor.OnClosedConfirmWindow
// 0x0004 (0x0004 - 0x0000)
struct ATDLC6FieldMemoriesActor_OnClosedConfirmWindow final
{
public:
	int32                                         SelectID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDLC6FieldMemoriesActor_OnClosedConfirmWindow) == 0x000004, "Wrong alignment on ATDLC6FieldMemoriesActor_OnClosedConfirmWindow");
static_assert(sizeof(ATDLC6FieldMemoriesActor_OnClosedConfirmWindow) == 0x000004, "Wrong size on ATDLC6FieldMemoriesActor_OnClosedConfirmWindow");
static_assert(offsetof(ATDLC6FieldMemoriesActor_OnClosedConfirmWindow, SelectID) == 0x000000, "Member 'ATDLC6FieldMemoriesActor_OnClosedConfirmWindow::SelectID' has a wrong offset!");

// Function AT.AT_DepthOfFieldManager.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct AT_DepthOfFieldManager_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueFlag;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_DepthOfFieldManager_OnDemoTiming) == 0x000004, "Wrong alignment on AT_DepthOfFieldManager_OnDemoTiming");
static_assert(sizeof(AT_DepthOfFieldManager_OnDemoTiming) == 0x000018, "Wrong size on AT_DepthOfFieldManager_OnDemoTiming");
static_assert(offsetof(AT_DepthOfFieldManager_OnDemoTiming, DemoType) == 0x000000, "Member 'AT_DepthOfFieldManager_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(AT_DepthOfFieldManager_OnDemoTiming, DemoTiming) == 0x000001, "Member 'AT_DepthOfFieldManager_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(AT_DepthOfFieldManager_OnDemoTiming, DemoName) == 0x000008, "Member 'AT_DepthOfFieldManager_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(AT_DepthOfFieldManager_OnDemoTiming, bContinueFlag) == 0x000010, "Member 'AT_DepthOfFieldManager_OnDemoTiming::bContinueFlag' has a wrong offset!");

// Function AT.AT_EffectStatics.BeginTrail
// 0x0030 (0x0030 - 0x0000)
struct AT_EffectStatics_BeginTrail final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        PParticle;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstSocketName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondSocketName;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               WidthMode;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestroyOtherParticle;                              // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_EffectStatics_BeginTrail) == 0x000008, "Wrong alignment on AT_EffectStatics_BeginTrail");
static_assert(sizeof(AT_EffectStatics_BeginTrail) == 0x000030, "Wrong size on AT_EffectStatics_BeginTrail");
static_assert(offsetof(AT_EffectStatics_BeginTrail, MeshComp) == 0x000000, "Member 'AT_EffectStatics_BeginTrail::MeshComp' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_BeginTrail, PParticle) == 0x000008, "Member 'AT_EffectStatics_BeginTrail::PParticle' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_BeginTrail, FirstSocketName) == 0x000010, "Member 'AT_EffectStatics_BeginTrail::FirstSocketName' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_BeginTrail, SecondSocketName) == 0x000018, "Member 'AT_EffectStatics_BeginTrail::SecondSocketName' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_BeginTrail, WidthMode) == 0x000020, "Member 'AT_EffectStatics_BeginTrail::WidthMode' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_BeginTrail, DestroyOtherParticle) == 0x000021, "Member 'AT_EffectStatics_BeginTrail::DestroyOtherParticle' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_BeginTrail, ReturnValue) == 0x000028, "Member 'AT_EffectStatics_BeginTrail::ReturnValue' has a wrong offset!");

// Function AT.AT_EffectStatics.CallGuardHitEffectCPP
// 0x0020 (0x0020 - 0x0000)
struct AT_EffectStatics_CallGuardHitEffectCPP final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageOwner;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        EffectType;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetSize;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_EffectStatics_CallGuardHitEffectCPP) == 0x000008, "Wrong alignment on AT_EffectStatics_CallGuardHitEffectCPP");
static_assert(sizeof(AT_EffectStatics_CallGuardHitEffectCPP) == 0x000020, "Wrong size on AT_EffectStatics_CallGuardHitEffectCPP");
static_assert(offsetof(AT_EffectStatics_CallGuardHitEffectCPP, HitActor) == 0x000000, "Member 'AT_EffectStatics_CallGuardHitEffectCPP::HitActor' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallGuardHitEffectCPP, DamageOwner) == 0x000008, "Member 'AT_EffectStatics_CallGuardHitEffectCPP::DamageOwner' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallGuardHitEffectCPP, EffectType) == 0x000010, "Member 'AT_EffectStatics_CallGuardHitEffectCPP::EffectType' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallGuardHitEffectCPP, OffsetSize) == 0x000018, "Member 'AT_EffectStatics_CallGuardHitEffectCPP::OffsetSize' has a wrong offset!");

// Function AT.AT_EffectStatics.CallHitEffectCPP
// 0x0048 (0x0048 - 0x0000)
struct AT_EffectStatics_CallHitEffectCPP final
{
public:
	struct FVector                                HitPosition;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        Effect;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttachToActor;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_EffectStatics_CallHitEffectCPP) == 0x000008, "Wrong alignment on AT_EffectStatics_CallHitEffectCPP");
static_assert(sizeof(AT_EffectStatics_CallHitEffectCPP) == 0x000048, "Wrong size on AT_EffectStatics_CallHitEffectCPP");
static_assert(offsetof(AT_EffectStatics_CallHitEffectCPP, HitPosition) == 0x000000, "Member 'AT_EffectStatics_CallHitEffectCPP::HitPosition' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallHitEffectCPP, Origin) == 0x00000C, "Member 'AT_EffectStatics_CallHitEffectCPP::Origin' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallHitEffectCPP, HitActor) == 0x000018, "Member 'AT_EffectStatics_CallHitEffectCPP::HitActor' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallHitEffectCPP, Effect) == 0x000020, "Member 'AT_EffectStatics_CallHitEffectCPP::Effect' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallHitEffectCPP, Rotation) == 0x000028, "Member 'AT_EffectStatics_CallHitEffectCPP::Rotation' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallHitEffectCPP, AttachToActor) == 0x000038, "Member 'AT_EffectStatics_CallHitEffectCPP::AttachToActor' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_CallHitEffectCPP, ReturnValue) == 0x000040, "Member 'AT_EffectStatics_CallHitEffectCPP::ReturnValue' has a wrong offset!");

// Function AT.AT_EffectStatics.DrawPhysicalSurfaceDebug
// 0x00B0 (0x00B0 - 0x0000)
struct AT_EffectStatics_DrawPhysicalSurfaceDebug final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Res;                                               // 0x0010(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                VStart;                                            // 0x0098(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VEnd;                                              // 0x00A4(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_EffectStatics_DrawPhysicalSurfaceDebug) == 0x000008, "Wrong alignment on AT_EffectStatics_DrawPhysicalSurfaceDebug");
static_assert(sizeof(AT_EffectStatics_DrawPhysicalSurfaceDebug) == 0x0000B0, "Wrong size on AT_EffectStatics_DrawPhysicalSurfaceDebug");
static_assert(offsetof(AT_EffectStatics_DrawPhysicalSurfaceDebug, Character) == 0x000000, "Member 'AT_EffectStatics_DrawPhysicalSurfaceDebug::Character' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_DrawPhysicalSurfaceDebug, TraceType) == 0x000008, "Member 'AT_EffectStatics_DrawPhysicalSurfaceDebug::TraceType' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_DrawPhysicalSurfaceDebug, Res) == 0x000010, "Member 'AT_EffectStatics_DrawPhysicalSurfaceDebug::Res' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_DrawPhysicalSurfaceDebug, VStart) == 0x000098, "Member 'AT_EffectStatics_DrawPhysicalSurfaceDebug::VStart' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_DrawPhysicalSurfaceDebug, VEnd) == 0x0000A4, "Member 'AT_EffectStatics_DrawPhysicalSurfaceDebug::VEnd' has a wrong offset!");

// Function AT.AT_EffectStatics.EndTrail
// 0x0008 (0x0008 - 0x0000)
struct AT_EffectStatics_EndTrail final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_EffectStatics_EndTrail) == 0x000008, "Wrong alignment on AT_EffectStatics_EndTrail");
static_assert(sizeof(AT_EffectStatics_EndTrail) == 0x000008, "Wrong size on AT_EffectStatics_EndTrail");
static_assert(offsetof(AT_EffectStatics_EndTrail, MeshComp) == 0x000000, "Member 'AT_EffectStatics_EndTrail::MeshComp' has a wrong offset!");

// Function AT.AT_EffectStatics.EnlargeEffect
// 0x0018 (0x0018 - 0x0000)
struct AT_EffectStatics_EnlargeEffect final
{
public:
	class UParticleSystemComponent*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KamehaSize;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OtherSmokeSize;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_EffectStatics_EnlargeEffect) == 0x000008, "Wrong alignment on AT_EffectStatics_EnlargeEffect");
static_assert(sizeof(AT_EffectStatics_EnlargeEffect) == 0x000018, "Wrong size on AT_EffectStatics_EnlargeEffect");
static_assert(offsetof(AT_EffectStatics_EnlargeEffect, Component) == 0x000000, "Member 'AT_EffectStatics_EnlargeEffect::Component' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_EnlargeEffect, KamehaSize) == 0x000008, "Member 'AT_EffectStatics_EnlargeEffect::KamehaSize' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_EnlargeEffect, OtherSmokeSize) == 0x00000C, "Member 'AT_EffectStatics_EnlargeEffect::OtherSmokeSize' has a wrong offset!");

// Function AT.AT_EffectStatics.IsNearCamera
// 0x0014 (0x0014 - 0x0000)
struct AT_EffectStatics_IsNearCamera final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thre;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_EffectStatics_IsNearCamera) == 0x000004, "Wrong alignment on AT_EffectStatics_IsNearCamera");
static_assert(sizeof(AT_EffectStatics_IsNearCamera) == 0x000014, "Wrong size on AT_EffectStatics_IsNearCamera");
static_assert(offsetof(AT_EffectStatics_IsNearCamera, ImpactPoint) == 0x000000, "Member 'AT_EffectStatics_IsNearCamera::ImpactPoint' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_IsNearCamera, Thre) == 0x00000C, "Member 'AT_EffectStatics_IsNearCamera::Thre' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_IsNearCamera, ReturnValue) == 0x000010, "Member 'AT_EffectStatics_IsNearCamera::ReturnValue' has a wrong offset!");

// Function AT.AT_EffectStatics.IsNearly
// 0x0098 (0x0098 - 0x0000)
struct AT_EffectStatics_IsNearly final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             ReturnValue;                                       // 0x0010(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_EffectStatics_IsNearly) == 0x000008, "Wrong alignment on AT_EffectStatics_IsNearly");
static_assert(sizeof(AT_EffectStatics_IsNearly) == 0x000098, "Wrong size on AT_EffectStatics_IsNearly");
static_assert(offsetof(AT_EffectStatics_IsNearly, Character) == 0x000000, "Member 'AT_EffectStatics_IsNearly::Character' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_IsNearly, TraceType) == 0x000008, "Member 'AT_EffectStatics_IsNearly::TraceType' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_IsNearly, ReturnValue) == 0x000010, "Member 'AT_EffectStatics_IsNearly::ReturnValue' has a wrong offset!");

// Function AT.AT_EffectStatics.IsNearlyGround
// 0x0090 (0x0090 - 0x0000)
struct AT_EffectStatics_IsNearlyGround final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ReturnValue;                                       // 0x0008(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_EffectStatics_IsNearlyGround) == 0x000008, "Wrong alignment on AT_EffectStatics_IsNearlyGround");
static_assert(sizeof(AT_EffectStatics_IsNearlyGround) == 0x000090, "Wrong size on AT_EffectStatics_IsNearlyGround");
static_assert(offsetof(AT_EffectStatics_IsNearlyGround, Character) == 0x000000, "Member 'AT_EffectStatics_IsNearlyGround::Character' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_IsNearlyGround, ReturnValue) == 0x000008, "Member 'AT_EffectStatics_IsNearlyGround::ReturnValue' has a wrong offset!");

// Function AT.AT_EffectStatics.TickTrail
// 0x0020 (0x0020 - 0x0000)
struct AT_EffectStatics_TickTrail final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstSocketName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondSocketName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               WidthMode;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_EffectStatics_TickTrail) == 0x000008, "Wrong alignment on AT_EffectStatics_TickTrail");
static_assert(sizeof(AT_EffectStatics_TickTrail) == 0x000020, "Wrong size on AT_EffectStatics_TickTrail");
static_assert(offsetof(AT_EffectStatics_TickTrail, MeshComp) == 0x000000, "Member 'AT_EffectStatics_TickTrail::MeshComp' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_TickTrail, FirstSocketName) == 0x000008, "Member 'AT_EffectStatics_TickTrail::FirstSocketName' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_TickTrail, SecondSocketName) == 0x000010, "Member 'AT_EffectStatics_TickTrail::SecondSocketName' has a wrong offset!");
static_assert(offsetof(AT_EffectStatics_TickTrail, WidthMode) == 0x000018, "Member 'AT_EffectStatics_TickTrail::WidthMode' has a wrong offset!");

// Function AT.UiCaptureSet.CreateSubCamera
// 0x00B0 (0x00B0 - 0x0000)
struct UiCaptureSet_CreateSubCamera final
{
public:
	struct FCreateCaptureSetParameter             Parameter;                                         // 0x0000(0x00A0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 Target;                                            // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedSkelMesh;                                      // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedLighting;                                      // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiCaptureSet_CreateSubCamera) == 0x000010, "Wrong alignment on UiCaptureSet_CreateSubCamera");
static_assert(sizeof(UiCaptureSet_CreateSubCamera) == 0x0000B0, "Wrong size on UiCaptureSet_CreateSubCamera");
static_assert(offsetof(UiCaptureSet_CreateSubCamera, Parameter) == 0x000000, "Member 'UiCaptureSet_CreateSubCamera::Parameter' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_CreateSubCamera, Target) == 0x0000A0, "Member 'UiCaptureSet_CreateSubCamera::Target' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_CreateSubCamera, NeedSkelMesh) == 0x0000A8, "Member 'UiCaptureSet_CreateSubCamera::NeedSkelMesh' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_CreateSubCamera, NeedLighting) == 0x0000A9, "Member 'UiCaptureSet_CreateSubCamera::NeedLighting' has a wrong offset!");

// Function AT.UiCaptureSet.DestroyActor
// 0x0004 (0x0004 - 0x0000)
struct UiCaptureSet_DestroyActor final
{
public:
	int32                                         ActorId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiCaptureSet_DestroyActor) == 0x000004, "Wrong alignment on UiCaptureSet_DestroyActor");
static_assert(sizeof(UiCaptureSet_DestroyActor) == 0x000004, "Wrong size on UiCaptureSet_DestroyActor");
static_assert(offsetof(UiCaptureSet_DestroyActor, ActorId) == 0x000000, "Member 'UiCaptureSet_DestroyActor::ActorId' has a wrong offset!");

// Function AT.UiCaptureSet.GetActor
// 0x0010 (0x0010 - 0x0000)
struct UiCaptureSet_GetActor final
{
public:
	int32                                         ActorId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUseCapturedCharacter;                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiCaptureSet_GetActor) == 0x000008, "Wrong alignment on UiCaptureSet_GetActor");
static_assert(sizeof(UiCaptureSet_GetActor) == 0x000010, "Wrong size on UiCaptureSet_GetActor");
static_assert(offsetof(UiCaptureSet_GetActor, ActorId) == 0x000000, "Member 'UiCaptureSet_GetActor::ActorId' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_GetActor, bInUseCapturedCharacter) == 0x000004, "Member 'UiCaptureSet_GetActor::bInUseCapturedCharacter' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_GetActor, ReturnValue) == 0x000008, "Member 'UiCaptureSet_GetActor::ReturnValue' has a wrong offset!");

// Function AT.UiCaptureSet.GetCamera
// 0x0008 (0x0008 - 0x0000)
struct UiCaptureSet_GetCamera final
{
public:
	class USceneCaptureComponent2D*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiCaptureSet_GetCamera) == 0x000008, "Wrong alignment on UiCaptureSet_GetCamera");
static_assert(sizeof(UiCaptureSet_GetCamera) == 0x000008, "Wrong size on UiCaptureSet_GetCamera");
static_assert(offsetof(UiCaptureSet_GetCamera, ReturnValue) == 0x000000, "Member 'UiCaptureSet_GetCamera::ReturnValue' has a wrong offset!");

// Function AT.UiCaptureSet.GetCameraActor
// 0x0008 (0x0008 - 0x0000)
struct UiCaptureSet_GetCameraActor final
{
public:
	class ASceneCapture2D*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiCaptureSet_GetCameraActor) == 0x000008, "Wrong alignment on UiCaptureSet_GetCameraActor");
static_assert(sizeof(UiCaptureSet_GetCameraActor) == 0x000008, "Wrong size on UiCaptureSet_GetCameraActor");
static_assert(offsetof(UiCaptureSet_GetCameraActor, ReturnValue) == 0x000000, "Member 'UiCaptureSet_GetCameraActor::ReturnValue' has a wrong offset!");

// Function AT.UiCaptureSet.MoveCaptureSet
// 0x0030 (0x0030 - 0x0000)
struct UiCaptureSet_MoveCaptureSet final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiCaptureSet_MoveCaptureSet) == 0x000010, "Wrong alignment on UiCaptureSet_MoveCaptureSet");
static_assert(sizeof(UiCaptureSet_MoveCaptureSet) == 0x000030, "Wrong size on UiCaptureSet_MoveCaptureSet");
static_assert(offsetof(UiCaptureSet_MoveCaptureSet, Transform) == 0x000000, "Member 'UiCaptureSet_MoveCaptureSet::Transform' has a wrong offset!");

// Function AT.UiCaptureSet.RequestSpawnByMasterId
// 0x0040 (0x0040 - 0x0000)
struct UiCaptureSet_RequestSpawnByMasterId final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   MasterId;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiCaptureSet_RequestSpawnByMasterId) == 0x000010, "Wrong alignment on UiCaptureSet_RequestSpawnByMasterId");
static_assert(sizeof(UiCaptureSet_RequestSpawnByMasterId) == 0x000040, "Wrong size on UiCaptureSet_RequestSpawnByMasterId");
static_assert(offsetof(UiCaptureSet_RequestSpawnByMasterId, Transform) == 0x000000, "Member 'UiCaptureSet_RequestSpawnByMasterId::Transform' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_RequestSpawnByMasterId, MasterId) == 0x000030, "Member 'UiCaptureSet_RequestSpawnByMasterId::MasterId' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_RequestSpawnByMasterId, ReturnValue) == 0x000038, "Member 'UiCaptureSet_RequestSpawnByMasterId::ReturnValue' has a wrong offset!");

// Function AT.UiCaptureSet.RequestSpawnCharacter
// 0x0060 (0x0060 - 0x0000)
struct UiCaptureSet_RequestSpawnCharacter final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UniqueId;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationId;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FormID;                                            // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MasterId;                                          // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAT_CapturedCharacter*                  ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UiCaptureSet_RequestSpawnCharacter) == 0x000010, "Wrong alignment on UiCaptureSet_RequestSpawnCharacter");
static_assert(sizeof(UiCaptureSet_RequestSpawnCharacter) == 0x000060, "Wrong size on UiCaptureSet_RequestSpawnCharacter");
static_assert(offsetof(UiCaptureSet_RequestSpawnCharacter, Transform) == 0x000000, "Member 'UiCaptureSet_RequestSpawnCharacter::Transform' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_RequestSpawnCharacter, CharacterType) == 0x000030, "Member 'UiCaptureSet_RequestSpawnCharacter::CharacterType' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_RequestSpawnCharacter, UniqueId) == 0x000038, "Member 'UiCaptureSet_RequestSpawnCharacter::UniqueId' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_RequestSpawnCharacter, VariationId) == 0x000040, "Member 'UiCaptureSet_RequestSpawnCharacter::VariationId' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_RequestSpawnCharacter, FormID) == 0x000041, "Member 'UiCaptureSet_RequestSpawnCharacter::FormID' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_RequestSpawnCharacter, MasterId) == 0x000048, "Member 'UiCaptureSet_RequestSpawnCharacter::MasterId' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_RequestSpawnCharacter, ReturnValue) == 0x000050, "Member 'UiCaptureSet_RequestSpawnCharacter::ReturnValue' has a wrong offset!");

// Function AT.UiCaptureSet.SetCameraShowFlags
// 0x0002 (0x0002 - 0x0000)
struct UiCaptureSet_SetCameraShowFlags final
{
public:
	bool                                          NeedSkelMesh;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedLighting;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiCaptureSet_SetCameraShowFlags) == 0x000001, "Wrong alignment on UiCaptureSet_SetCameraShowFlags");
static_assert(sizeof(UiCaptureSet_SetCameraShowFlags) == 0x000002, "Wrong size on UiCaptureSet_SetCameraShowFlags");
static_assert(offsetof(UiCaptureSet_SetCameraShowFlags, NeedSkelMesh) == 0x000000, "Member 'UiCaptureSet_SetCameraShowFlags::NeedSkelMesh' has a wrong offset!");
static_assert(offsetof(UiCaptureSet_SetCameraShowFlags, NeedLighting) == 0x000001, "Member 'UiCaptureSet_SetCameraShowFlags::NeedLighting' has a wrong offset!");

// Function AT.UiCaptureSet.SetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct UiCaptureSet_SetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UiCaptureSet_SetRenderTarget) == 0x000008, "Wrong alignment on UiCaptureSet_SetRenderTarget");
static_assert(sizeof(UiCaptureSet_SetRenderTarget) == 0x000008, "Wrong size on UiCaptureSet_SetRenderTarget");
static_assert(offsetof(UiCaptureSet_SetRenderTarget, Target) == 0x000000, "Member 'UiCaptureSet_SetRenderTarget::Target' has a wrong offset!");

// Function AT.AT_GameHUD.GetUIFieldManager
// 0x0008 (0x0008 - 0x0000)
struct AT_GameHUD_GetUIFieldManager final
{
public:
	class UAT_UIFieldManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameHUD_GetUIFieldManager) == 0x000008, "Wrong alignment on AT_GameHUD_GetUIFieldManager");
static_assert(sizeof(AT_GameHUD_GetUIFieldManager) == 0x000008, "Wrong size on AT_GameHUD_GetUIFieldManager");
static_assert(offsetof(AT_GameHUD_GetUIFieldManager, ReturnValue) == 0x000000, "Member 'AT_GameHUD_GetUIFieldManager::ReturnValue' has a wrong offset!");

// Function AT.AT_GameHUD.GetUIMiniGameManager
// 0x0008 (0x0008 - 0x0000)
struct AT_GameHUD_GetUIMiniGameManager final
{
public:
	class UAT_UIMiniGameManager*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameHUD_GetUIMiniGameManager) == 0x000008, "Wrong alignment on AT_GameHUD_GetUIMiniGameManager");
static_assert(sizeof(AT_GameHUD_GetUIMiniGameManager) == 0x000008, "Wrong size on AT_GameHUD_GetUIMiniGameManager");
static_assert(offsetof(AT_GameHUD_GetUIMiniGameManager, ReturnValue) == 0x000000, "Member 'AT_GameHUD_GetUIMiniGameManager::ReturnValue' has a wrong offset!");

// Function AT.AT_GameHUD.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct AT_GameHUD_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_GameHUD_OnDemoTiming) == 0x000004, "Wrong alignment on AT_GameHUD_OnDemoTiming");
static_assert(sizeof(AT_GameHUD_OnDemoTiming) == 0x000018, "Wrong size on AT_GameHUD_OnDemoTiming");
static_assert(offsetof(AT_GameHUD_OnDemoTiming, DemoType) == 0x000000, "Member 'AT_GameHUD_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnDemoTiming, DemoTiming) == 0x000001, "Member 'AT_GameHUD_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnDemoTiming, DemoName) == 0x000008, "Member 'AT_GameHUD_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'AT_GameHUD_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.AT_GameHUD.OnDisableBalloonDragonball
// 0x0010 (0x0010 - 0x0000)
struct AT_GameHUD_OnDisableBalloonDragonball final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NDbIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_GameHUD_OnDisableBalloonDragonball) == 0x000008, "Wrong alignment on AT_GameHUD_OnDisableBalloonDragonball");
static_assert(sizeof(AT_GameHUD_OnDisableBalloonDragonball) == 0x000010, "Wrong size on AT_GameHUD_OnDisableBalloonDragonball");
static_assert(offsetof(AT_GameHUD_OnDisableBalloonDragonball, PActor) == 0x000000, "Member 'AT_GameHUD_OnDisableBalloonDragonball::PActor' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnDisableBalloonDragonball, NDbIdx) == 0x000008, "Member 'AT_GameHUD_OnDisableBalloonDragonball::NDbIdx' has a wrong offset!");

// Function AT.AT_GameHUD.OnEnableBalloonDragonball
// 0x0010 (0x0010 - 0x0000)
struct AT_GameHUD_OnEnableBalloonDragonball final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NDbIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_GameHUD_OnEnableBalloonDragonball) == 0x000008, "Wrong alignment on AT_GameHUD_OnEnableBalloonDragonball");
static_assert(sizeof(AT_GameHUD_OnEnableBalloonDragonball) == 0x000010, "Wrong size on AT_GameHUD_OnEnableBalloonDragonball");
static_assert(offsetof(AT_GameHUD_OnEnableBalloonDragonball, PActor) == 0x000000, "Member 'AT_GameHUD_OnEnableBalloonDragonball::PActor' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnEnableBalloonDragonball, NDbIdx) == 0x000008, "Member 'AT_GameHUD_OnEnableBalloonDragonball::NDbIdx' has a wrong offset!");

// Function AT.AT_GameHUD.OnGetDragonball
// 0x0010 (0x0010 - 0x0000)
struct AT_GameHUD_OnGetDragonball final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NDbIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_GameHUD_OnGetDragonball) == 0x000008, "Wrong alignment on AT_GameHUD_OnGetDragonball");
static_assert(sizeof(AT_GameHUD_OnGetDragonball) == 0x000010, "Wrong size on AT_GameHUD_OnGetDragonball");
static_assert(offsetof(AT_GameHUD_OnGetDragonball, PActor) == 0x000000, "Member 'AT_GameHUD_OnGetDragonball::PActor' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnGetDragonball, NDbIdx) == 0x000008, "Member 'AT_GameHUD_OnGetDragonball::NDbIdx' has a wrong offset!");

// Function AT.AT_GameHUD.OnMobFrontMessage
// 0x0028 (0x0028 - 0x0000)
struct AT_GameHUD_OnMobFrontMessage final
{
public:
	class FString                                 Speaker;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          buttonVisible;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_GameHUD_OnMobFrontMessage) == 0x000008, "Wrong alignment on AT_GameHUD_OnMobFrontMessage");
static_assert(sizeof(AT_GameHUD_OnMobFrontMessage) == 0x000028, "Wrong size on AT_GameHUD_OnMobFrontMessage");
static_assert(offsetof(AT_GameHUD_OnMobFrontMessage, Speaker) == 0x000000, "Member 'AT_GameHUD_OnMobFrontMessage::Speaker' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnMobFrontMessage, Message) == 0x000010, "Member 'AT_GameHUD_OnMobFrontMessage::Message' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnMobFrontMessage, buttonVisible) == 0x000020, "Member 'AT_GameHUD_OnMobFrontMessage::buttonVisible' has a wrong offset!");

// Function AT.AT_GameHUD.OnMobMessage
// 0x0028 (0x0028 - 0x0000)
struct AT_GameHUD_OnMobMessage final
{
public:
	class FString                                 Speaker;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          buttonVisible;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_GameHUD_OnMobMessage) == 0x000008, "Wrong alignment on AT_GameHUD_OnMobMessage");
static_assert(sizeof(AT_GameHUD_OnMobMessage) == 0x000028, "Wrong size on AT_GameHUD_OnMobMessage");
static_assert(offsetof(AT_GameHUD_OnMobMessage, Speaker) == 0x000000, "Member 'AT_GameHUD_OnMobMessage::Speaker' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnMobMessage, Message) == 0x000010, "Member 'AT_GameHUD_OnMobMessage::Message' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnMobMessage, buttonVisible) == 0x000020, "Member 'AT_GameHUD_OnMobMessage::buttonVisible' has a wrong offset!");

// Function AT.AT_GameHUD.OnSpawnedDragonball
// 0x0010 (0x0010 - 0x0000)
struct AT_GameHUD_OnSpawnedDragonball final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NDbIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_GameHUD_OnSpawnedDragonball) == 0x000008, "Wrong alignment on AT_GameHUD_OnSpawnedDragonball");
static_assert(sizeof(AT_GameHUD_OnSpawnedDragonball) == 0x000010, "Wrong size on AT_GameHUD_OnSpawnedDragonball");
static_assert(offsetof(AT_GameHUD_OnSpawnedDragonball, PActor) == 0x000000, "Member 'AT_GameHUD_OnSpawnedDragonball::PActor' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnSpawnedDragonball, NDbIdx) == 0x000008, "Member 'AT_GameHUD_OnSpawnedDragonball::NDbIdx' has a wrong offset!");

// Function AT.AT_GameHUD.OnVisibleDragonBallActIcon
// 0x0010 (0x0010 - 0x0000)
struct AT_GameHUD_OnVisibleDragonBallActIcon final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PActor;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameHUD_OnVisibleDragonBallActIcon) == 0x000008, "Wrong alignment on AT_GameHUD_OnVisibleDragonBallActIcon");
static_assert(sizeof(AT_GameHUD_OnVisibleDragonBallActIcon) == 0x000010, "Wrong size on AT_GameHUD_OnVisibleDragonBallActIcon");
static_assert(offsetof(AT_GameHUD_OnVisibleDragonBallActIcon, bVisible) == 0x000000, "Member 'AT_GameHUD_OnVisibleDragonBallActIcon::bVisible' has a wrong offset!");
static_assert(offsetof(AT_GameHUD_OnVisibleDragonBallActIcon, PActor) == 0x000008, "Member 'AT_GameHUD_OnVisibleDragonBallActIcon::PActor' has a wrong offset!");

// Function AT.AT_GameHUD.OnVisibleMobSerif
// 0x0001 (0x0001 - 0x0000)
struct AT_GameHUD_OnVisibleMobSerif final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameHUD_OnVisibleMobSerif) == 0x000001, "Wrong alignment on AT_GameHUD_OnVisibleMobSerif");
static_assert(sizeof(AT_GameHUD_OnVisibleMobSerif) == 0x000001, "Wrong size on AT_GameHUD_OnVisibleMobSerif");
static_assert(offsetof(AT_GameHUD_OnVisibleMobSerif, bVisible) == 0x000000, "Member 'AT_GameHUD_OnVisibleMobSerif::bVisible' has a wrong offset!");

// Function AT.AT_GameHUD.SetHudVisible
// 0x0001 (0x0001 - 0x0000)
struct AT_GameHUD_SetHudVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameHUD_SetHudVisible) == 0x000001, "Wrong alignment on AT_GameHUD_SetHudVisible");
static_assert(sizeof(AT_GameHUD_SetHudVisible) == 0x000001, "Wrong size on AT_GameHUD_SetHudVisible");
static_assert(offsetof(AT_GameHUD_SetHudVisible, bVisible) == 0x000000, "Member 'AT_GameHUD_SetHudVisible::bVisible' has a wrong offset!");

// Function AT.AT_GameHUD.SetWidePosition
// 0x0001 (0x0001 - 0x0000)
struct AT_GameHUD_SetWidePosition final
{
public:
	bool                                          bWidePosition;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameHUD_SetWidePosition) == 0x000001, "Wrong alignment on AT_GameHUD_SetWidePosition");
static_assert(sizeof(AT_GameHUD_SetWidePosition) == 0x000001, "Wrong size on AT_GameHUD_SetWidePosition");
static_assert(offsetof(AT_GameHUD_SetWidePosition, bWidePosition) == 0x000000, "Member 'AT_GameHUD_SetWidePosition::bWidePosition' has a wrong offset!");

// Function AT.AT_GameInstance.GetCmnFade
// 0x0008 (0x0008 - 0x0000)
struct AT_GameInstance_GetCmnFade final
{
public:
	class UAT_UICmnFade*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameInstance_GetCmnFade) == 0x000008, "Wrong alignment on AT_GameInstance_GetCmnFade");
static_assert(sizeof(AT_GameInstance_GetCmnFade) == 0x000008, "Wrong size on AT_GameInstance_GetCmnFade");
static_assert(offsetof(AT_GameInstance_GetCmnFade, ReturnValue) == 0x000000, "Member 'AT_GameInstance_GetCmnFade::ReturnValue' has a wrong offset!");

// Function AT.AT_GameInstance.GetCmnSystemDialog
// 0x0008 (0x0008 - 0x0000)
struct AT_GameInstance_GetCmnSystemDialog final
{
public:
	class UAT_UIXcmnSystemDialog*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameInstance_GetCmnSystemDialog) == 0x000008, "Wrong alignment on AT_GameInstance_GetCmnSystemDialog");
static_assert(sizeof(AT_GameInstance_GetCmnSystemDialog) == 0x000008, "Wrong size on AT_GameInstance_GetCmnSystemDialog");
static_assert(offsetof(AT_GameInstance_GetCmnSystemDialog, ReturnValue) == 0x000000, "Member 'AT_GameInstance_GetCmnSystemDialog::ReturnValue' has a wrong offset!");

// Function AT.AT_GameInstance.GetCmnSystemIcon
// 0x0008 (0x0008 - 0x0000)
struct AT_GameInstance_GetCmnSystemIcon final
{
public:
	class UAT_UIXcmnSystemIcon*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameInstance_GetCmnSystemIcon) == 0x000008, "Wrong alignment on AT_GameInstance_GetCmnSystemIcon");
static_assert(sizeof(AT_GameInstance_GetCmnSystemIcon) == 0x000008, "Wrong size on AT_GameInstance_GetCmnSystemIcon");
static_assert(offsetof(AT_GameInstance_GetCmnSystemIcon, ReturnValue) == 0x000000, "Member 'AT_GameInstance_GetCmnSystemIcon::ReturnValue' has a wrong offset!");

// Function AT.AT_GameInstance.GetInstallUI
// 0x0008 (0x0008 - 0x0000)
struct AT_GameInstance_GetInstallUI final
{
public:
	class UAT_UIXcmnInstall*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameInstance_GetInstallUI) == 0x000008, "Wrong alignment on AT_GameInstance_GetInstallUI");
static_assert(sizeof(AT_GameInstance_GetInstallUI) == 0x000008, "Wrong size on AT_GameInstance_GetInstallUI");
static_assert(offsetof(AT_GameInstance_GetInstallUI, ReturnValue) == 0x000000, "Member 'AT_GameInstance_GetInstallUI::ReturnValue' has a wrong offset!");

// Function AT.AT_GameInstance.GetLoadScreen
// 0x0008 (0x0008 - 0x0000)
struct AT_GameInstance_GetLoadScreen final
{
public:
	class UAT_UILoadingScreen*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_GameInstance_GetLoadScreen) == 0x000008, "Wrong alignment on AT_GameInstance_GetLoadScreen");
static_assert(sizeof(AT_GameInstance_GetLoadScreen) == 0x000008, "Wrong size on AT_GameInstance_GetLoadScreen");
static_assert(offsetof(AT_GameInstance_GetLoadScreen, ReturnValue) == 0x000000, "Member 'AT_GameInstance_GetLoadScreen::ReturnValue' has a wrong offset!");

// Function AT.AT_MobAnimalBase.Get_AnimalParameter
// 0x00B0 (0x00B0 - 0x0000)
struct AT_MobAnimalBase_Get_AnimalParameter final
{
public:
	struct FAnimalParameterTable                  ReturnValue;                                       // 0x0000(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_MobAnimalBase_Get_AnimalParameter) == 0x000008, "Wrong alignment on AT_MobAnimalBase_Get_AnimalParameter");
static_assert(sizeof(AT_MobAnimalBase_Get_AnimalParameter) == 0x0000B0, "Wrong size on AT_MobAnimalBase_Get_AnimalParameter");
static_assert(offsetof(AT_MobAnimalBase_Get_AnimalParameter, ReturnValue) == 0x000000, "Member 'AT_MobAnimalBase_Get_AnimalParameter::ReturnValue' has a wrong offset!");

// Function AT.AT_MobAnimalBase.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct AT_MobAnimalBase_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_MobAnimalBase_OnActionChange) == 0x000008, "Wrong alignment on AT_MobAnimalBase_OnActionChange");
static_assert(sizeof(AT_MobAnimalBase_OnActionChange) == 0x000010, "Wrong size on AT_MobAnimalBase_OnActionChange");
static_assert(offsetof(AT_MobAnimalBase_OnActionChange, InCharacter) == 0x000000, "Member 'AT_MobAnimalBase_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(AT_MobAnimalBase_OnActionChange, InActionIdPrev) == 0x000008, "Member 'AT_MobAnimalBase_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(AT_MobAnimalBase_OnActionChange, InActionIdNext) == 0x00000C, "Member 'AT_MobAnimalBase_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.AT_TriggerStaticActorInterface.IsTouch
// 0x0001 (0x0001 - 0x0000)
struct AT_TriggerStaticActorInterface_IsTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_TriggerStaticActorInterface_IsTouch) == 0x000001, "Wrong alignment on AT_TriggerStaticActorInterface_IsTouch");
static_assert(sizeof(AT_TriggerStaticActorInterface_IsTouch) == 0x000001, "Wrong size on AT_TriggerStaticActorInterface_IsTouch");
static_assert(offsetof(AT_TriggerStaticActorInterface_IsTouch, ReturnValue) == 0x000000, "Member 'AT_TriggerStaticActorInterface_IsTouch::ReturnValue' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.AddRotation
// 0x000C (0x000C - 0x0000)
struct AT_UI3DCaptureWidget_AddRotation final
{
public:
	float                                         XAngle;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YAngle;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZAngle;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_AddRotation) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_AddRotation");
static_assert(sizeof(AT_UI3DCaptureWidget_AddRotation) == 0x00000C, "Wrong size on AT_UI3DCaptureWidget_AddRotation");
static_assert(offsetof(AT_UI3DCaptureWidget_AddRotation, XAngle) == 0x000000, "Member 'AT_UI3DCaptureWidget_AddRotation::XAngle' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_AddRotation, YAngle) == 0x000004, "Member 'AT_UI3DCaptureWidget_AddRotation::YAngle' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_AddRotation, ZAngle) == 0x000008, "Member 'AT_UI3DCaptureWidget_AddRotation::ZAngle' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.AddRotationHorizontal
// 0x0004 (0x0004 - 0x0000)
struct AT_UI3DCaptureWidget_AddRotationHorizontal final
{
public:
	float                                         InPower;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_AddRotationHorizontal) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_AddRotationHorizontal");
static_assert(sizeof(AT_UI3DCaptureWidget_AddRotationHorizontal) == 0x000004, "Wrong size on AT_UI3DCaptureWidget_AddRotationHorizontal");
static_assert(offsetof(AT_UI3DCaptureWidget_AddRotationHorizontal, InPower) == 0x000000, "Member 'AT_UI3DCaptureWidget_AddRotationHorizontal::InPower' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.AddTranslate
// 0x000C (0x000C - 0x0000)
struct AT_UI3DCaptureWidget_AddTranslate final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_AddTranslate) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_AddTranslate");
static_assert(sizeof(AT_UI3DCaptureWidget_AddTranslate) == 0x00000C, "Wrong size on AT_UI3DCaptureWidget_AddTranslate");
static_assert(offsetof(AT_UI3DCaptureWidget_AddTranslate, X) == 0x000000, "Member 'AT_UI3DCaptureWidget_AddTranslate::X' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_AddTranslate, Y) == 0x000004, "Member 'AT_UI3DCaptureWidget_AddTranslate::Y' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_AddTranslate, Z) == 0x000008, "Member 'AT_UI3DCaptureWidget_AddTranslate::Z' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.CompleteLoadFacialParts
// 0x0008 (0x0008 - 0x0000)
struct AT_UI3DCaptureWidget_CompleteLoadFacialParts final
{
public:
	class UATDataAssetFacialAsyncLoad*            Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_CompleteLoadFacialParts) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_CompleteLoadFacialParts");
static_assert(sizeof(AT_UI3DCaptureWidget_CompleteLoadFacialParts) == 0x000008, "Wrong size on AT_UI3DCaptureWidget_CompleteLoadFacialParts");
static_assert(offsetof(AT_UI3DCaptureWidget_CompleteLoadFacialParts, Loader) == 0x000000, "Member 'AT_UI3DCaptureWidget_CompleteLoadFacialParts::Loader' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.CompleteLoadForm
// 0x0008 (0x0008 - 0x0000)
struct AT_UI3DCaptureWidget_CompleteLoadForm final
{
public:
	class UATDataAssetFormMeshAsyncLoad*          Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_CompleteLoadForm) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_CompleteLoadForm");
static_assert(sizeof(AT_UI3DCaptureWidget_CompleteLoadForm) == 0x000008, "Wrong size on AT_UI3DCaptureWidget_CompleteLoadForm");
static_assert(offsetof(AT_UI3DCaptureWidget_CompleteLoadForm, Loader) == 0x000000, "Member 'AT_UI3DCaptureWidget_CompleteLoadForm::Loader' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.CompleteLoadFormId
// 0x0008 (0x0008 - 0x0000)
struct AT_UI3DCaptureWidget_CompleteLoadFormId final
{
public:
	class UATDataAssetUiCaptureAsyncLoad*         Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_CompleteLoadFormId) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_CompleteLoadFormId");
static_assert(sizeof(AT_UI3DCaptureWidget_CompleteLoadFormId) == 0x000008, "Wrong size on AT_UI3DCaptureWidget_CompleteLoadFormId");
static_assert(offsetof(AT_UI3DCaptureWidget_CompleteLoadFormId, Loader) == 0x000000, "Member 'AT_UI3DCaptureWidget_CompleteLoadFormId::Loader' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.CompleteLoadVariation
// 0x0008 (0x0008 - 0x0000)
struct AT_UI3DCaptureWidget_CompleteLoadVariation final
{
public:
	class UATDataAssetVariationMeshAsyncLoad*     Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_CompleteLoadVariation) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_CompleteLoadVariation");
static_assert(sizeof(AT_UI3DCaptureWidget_CompleteLoadVariation) == 0x000008, "Wrong size on AT_UI3DCaptureWidget_CompleteLoadVariation");
static_assert(offsetof(AT_UI3DCaptureWidget_CompleteLoadVariation, Loader) == 0x000000, "Member 'AT_UI3DCaptureWidget_CompleteLoadVariation::Loader' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.LoadModel
// 0x0048 (0x0048 - 0x0000)
struct AT_UI3DCaptureWidget_LoadModel final
{
public:
	class FString                                 ModelPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimPath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimBPPath;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MontagePath;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MasterId;                                          // 0x0040(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_LoadModel) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_LoadModel");
static_assert(sizeof(AT_UI3DCaptureWidget_LoadModel) == 0x000048, "Wrong size on AT_UI3DCaptureWidget_LoadModel");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModel, ModelPath) == 0x000000, "Member 'AT_UI3DCaptureWidget_LoadModel::ModelPath' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModel, AnimPath) == 0x000010, "Member 'AT_UI3DCaptureWidget_LoadModel::AnimPath' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModel, AnimBPPath) == 0x000020, "Member 'AT_UI3DCaptureWidget_LoadModel::AnimBPPath' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModel, MontagePath) == 0x000030, "Member 'AT_UI3DCaptureWidget_LoadModel::MontagePath' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModel, MasterId) == 0x000040, "Member 'AT_UI3DCaptureWidget_LoadModel::MasterId' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.LoadModelByCharacterType
// 0x0030 (0x0030 - 0x0000)
struct AT_UI3DCaptureWidget_LoadModelByCharacterType final
{
public:
	ECHARACTER_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Variation;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FaceId;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbAppendId;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UI3DCaptureWidget_LoadModelByCharacterType) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_LoadModelByCharacterType");
static_assert(sizeof(AT_UI3DCaptureWidget_LoadModelByCharacterType) == 0x000030, "Wrong size on AT_UI3DCaptureWidget_LoadModelByCharacterType");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByCharacterType, Type) == 0x000000, "Member 'AT_UI3DCaptureWidget_LoadModelByCharacterType::Type' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByCharacterType, Variation) == 0x000001, "Member 'AT_UI3DCaptureWidget_LoadModelByCharacterType::Variation' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByCharacterType, Form) == 0x000002, "Member 'AT_UI3DCaptureWidget_LoadModelByCharacterType::Form' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByCharacterType, AnimId) == 0x000008, "Member 'AT_UI3DCaptureWidget_LoadModelByCharacterType::AnimId' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByCharacterType, FaceId) == 0x000018, "Member 'AT_UI3DCaptureWidget_LoadModelByCharacterType::FaceId' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByCharacterType, InbAppendId) == 0x000028, "Member 'AT_UI3DCaptureWidget_LoadModelByCharacterType::InbAppendId' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.LoadModelById
// 0x0008 (0x0008 - 0x0000)
struct AT_UI3DCaptureWidget_LoadModelById final
{
public:
	class FName                                   MasterId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_LoadModelById) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_LoadModelById");
static_assert(sizeof(AT_UI3DCaptureWidget_LoadModelById) == 0x000008, "Wrong size on AT_UI3DCaptureWidget_LoadModelById");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelById, MasterId) == 0x000000, "Member 'AT_UI3DCaptureWidget_LoadModelById::MasterId' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.LoadModelByUniqueId
// 0x0040 (0x0040 - 0x0000)
struct AT_UI3DCaptureWidget_LoadModelByUniqueId final
{
public:
	ECHARACTER_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UniqueId;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Variation;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimId;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FaceId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbAppendId;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UI3DCaptureWidget_LoadModelByUniqueId) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_LoadModelByUniqueId");
static_assert(sizeof(AT_UI3DCaptureWidget_LoadModelByUniqueId) == 0x000040, "Wrong size on AT_UI3DCaptureWidget_LoadModelByUniqueId");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByUniqueId, Type) == 0x000000, "Member 'AT_UI3DCaptureWidget_LoadModelByUniqueId::Type' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByUniqueId, UniqueId) == 0x000008, "Member 'AT_UI3DCaptureWidget_LoadModelByUniqueId::UniqueId' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByUniqueId, Variation) == 0x000010, "Member 'AT_UI3DCaptureWidget_LoadModelByUniqueId::Variation' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByUniqueId, Form) == 0x000011, "Member 'AT_UI3DCaptureWidget_LoadModelByUniqueId::Form' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByUniqueId, AnimId) == 0x000018, "Member 'AT_UI3DCaptureWidget_LoadModelByUniqueId::AnimId' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByUniqueId, FaceId) == 0x000028, "Member 'AT_UI3DCaptureWidget_LoadModelByUniqueId::FaceId' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadModelByUniqueId, InbAppendId) == 0x000038, "Member 'AT_UI3DCaptureWidget_LoadModelByUniqueId::InbAppendId' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.LoadParticle
// 0x0018 (0x0018 - 0x0000)
struct AT_UI3DCaptureWidget_LoadParticle final
{
public:
	class FString                                 ParticlePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MasterId;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_LoadParticle) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_LoadParticle");
static_assert(sizeof(AT_UI3DCaptureWidget_LoadParticle) == 0x000018, "Wrong size on AT_UI3DCaptureWidget_LoadParticle");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadParticle, ParticlePath) == 0x000000, "Member 'AT_UI3DCaptureWidget_LoadParticle::ParticlePath' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_LoadParticle, MasterId) == 0x000010, "Member 'AT_UI3DCaptureWidget_LoadParticle::MasterId' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.SetCameraTransform
// 0x0030 (0x0030 - 0x0000)
struct AT_UI3DCaptureWidget_SetCameraTransform final
{
public:
	struct FTransform                             Trans;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_SetCameraTransform) == 0x000010, "Wrong alignment on AT_UI3DCaptureWidget_SetCameraTransform");
static_assert(sizeof(AT_UI3DCaptureWidget_SetCameraTransform) == 0x000030, "Wrong size on AT_UI3DCaptureWidget_SetCameraTransform");
static_assert(offsetof(AT_UI3DCaptureWidget_SetCameraTransform, Trans) == 0x000000, "Member 'AT_UI3DCaptureWidget_SetCameraTransform::Trans' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.SetFOV
// 0x0004 (0x0004 - 0x0000)
struct AT_UI3DCaptureWidget_SetFOV final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_SetFOV) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_SetFOV");
static_assert(sizeof(AT_UI3DCaptureWidget_SetFOV) == 0x000004, "Wrong size on AT_UI3DCaptureWidget_SetFOV");
static_assert(offsetof(AT_UI3DCaptureWidget_SetFOV, FOV) == 0x000000, "Member 'AT_UI3DCaptureWidget_SetFOV::FOV' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.SetLoadIcon
// 0x0008 (0x0008 - 0x0000)
struct AT_UI3DCaptureWidget_SetLoadIcon final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_SetLoadIcon) == 0x000008, "Wrong alignment on AT_UI3DCaptureWidget_SetLoadIcon");
static_assert(sizeof(AT_UI3DCaptureWidget_SetLoadIcon) == 0x000008, "Wrong size on AT_UI3DCaptureWidget_SetLoadIcon");
static_assert(offsetof(AT_UI3DCaptureWidget_SetLoadIcon, Widget) == 0x000000, "Member 'AT_UI3DCaptureWidget_SetLoadIcon::Widget' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.SetModelColor
// 0x0010 (0x0010 - 0x0000)
struct AT_UI3DCaptureWidget_SetModelColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_SetModelColor) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_SetModelColor");
static_assert(sizeof(AT_UI3DCaptureWidget_SetModelColor) == 0x000010, "Wrong size on AT_UI3DCaptureWidget_SetModelColor");
static_assert(offsetof(AT_UI3DCaptureWidget_SetModelColor, Color) == 0x000000, "Member 'AT_UI3DCaptureWidget_SetModelColor::Color' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.SetModelInitRotation
// 0x000C (0x000C - 0x0000)
struct AT_UI3DCaptureWidget_SetModelInitRotation final
{
public:
	float                                         XAngle;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YAngle;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZAngle;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_SetModelInitRotation) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_SetModelInitRotation");
static_assert(sizeof(AT_UI3DCaptureWidget_SetModelInitRotation) == 0x00000C, "Wrong size on AT_UI3DCaptureWidget_SetModelInitRotation");
static_assert(offsetof(AT_UI3DCaptureWidget_SetModelInitRotation, XAngle) == 0x000000, "Member 'AT_UI3DCaptureWidget_SetModelInitRotation::XAngle' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_SetModelInitRotation, YAngle) == 0x000004, "Member 'AT_UI3DCaptureWidget_SetModelInitRotation::YAngle' has a wrong offset!");
static_assert(offsetof(AT_UI3DCaptureWidget_SetModelInitRotation, ZAngle) == 0x000008, "Member 'AT_UI3DCaptureWidget_SetModelInitRotation::ZAngle' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.SetRenderTargetFromIndex
// 0x0004 (0x0004 - 0x0000)
struct AT_UI3DCaptureWidget_SetRenderTargetFromIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_SetRenderTargetFromIndex) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_SetRenderTargetFromIndex");
static_assert(sizeof(AT_UI3DCaptureWidget_SetRenderTargetFromIndex) == 0x000004, "Wrong size on AT_UI3DCaptureWidget_SetRenderTargetFromIndex");
static_assert(offsetof(AT_UI3DCaptureWidget_SetRenderTargetFromIndex, Index_0) == 0x000000, "Member 'AT_UI3DCaptureWidget_SetRenderTargetFromIndex::Index_0' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.Zoom
// 0x0004 (0x0004 - 0x0000)
struct AT_UI3DCaptureWidget_Zoom final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_Zoom) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_Zoom");
static_assert(sizeof(AT_UI3DCaptureWidget_Zoom) == 0x000004, "Wrong size on AT_UI3DCaptureWidget_Zoom");
static_assert(offsetof(AT_UI3DCaptureWidget_Zoom, Rate) == 0x000000, "Member 'AT_UI3DCaptureWidget_Zoom::Rate' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.GetCameraLocation
// 0x000C (0x000C - 0x0000)
struct AT_UI3DCaptureWidget_GetCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_GetCameraLocation) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_GetCameraLocation");
static_assert(sizeof(AT_UI3DCaptureWidget_GetCameraLocation) == 0x00000C, "Wrong size on AT_UI3DCaptureWidget_GetCameraLocation");
static_assert(offsetof(AT_UI3DCaptureWidget_GetCameraLocation, ReturnValue) == 0x000000, "Member 'AT_UI3DCaptureWidget_GetCameraLocation::ReturnValue' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.GetCameraTransform
// 0x0030 (0x0030 - 0x0000)
struct AT_UI3DCaptureWidget_GetCameraTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_GetCameraTransform) == 0x000010, "Wrong alignment on AT_UI3DCaptureWidget_GetCameraTransform");
static_assert(sizeof(AT_UI3DCaptureWidget_GetCameraTransform) == 0x000030, "Wrong size on AT_UI3DCaptureWidget_GetCameraTransform");
static_assert(offsetof(AT_UI3DCaptureWidget_GetCameraTransform, ReturnValue) == 0x000000, "Member 'AT_UI3DCaptureWidget_GetCameraTransform::ReturnValue' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.GetCurrentModelColor
// 0x0010 (0x0010 - 0x0000)
struct AT_UI3DCaptureWidget_GetCurrentModelColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_GetCurrentModelColor) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_GetCurrentModelColor");
static_assert(sizeof(AT_UI3DCaptureWidget_GetCurrentModelColor) == 0x000010, "Wrong size on AT_UI3DCaptureWidget_GetCurrentModelColor");
static_assert(offsetof(AT_UI3DCaptureWidget_GetCurrentModelColor, ReturnValue) == 0x000000, "Member 'AT_UI3DCaptureWidget_GetCurrentModelColor::ReturnValue' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.GetZoomRate
// 0x0004 (0x0004 - 0x0000)
struct AT_UI3DCaptureWidget_GetZoomRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_GetZoomRate) == 0x000004, "Wrong alignment on AT_UI3DCaptureWidget_GetZoomRate");
static_assert(sizeof(AT_UI3DCaptureWidget_GetZoomRate) == 0x000004, "Wrong size on AT_UI3DCaptureWidget_GetZoomRate");
static_assert(offsetof(AT_UI3DCaptureWidget_GetZoomRate, ReturnValue) == 0x000000, "Member 'AT_UI3DCaptureWidget_GetZoomRate::ReturnValue' has a wrong offset!");

// Function AT.AT_UI3DCaptureWidget.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct AT_UI3DCaptureWidget_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UI3DCaptureWidget_IsLoaded) == 0x000001, "Wrong alignment on AT_UI3DCaptureWidget_IsLoaded");
static_assert(sizeof(AT_UI3DCaptureWidget_IsLoaded) == 0x000001, "Wrong size on AT_UI3DCaptureWidget_IsLoaded");
static_assert(offsetof(AT_UI3DCaptureWidget_IsLoaded, ReturnValue) == 0x000000, "Member 'AT_UI3DCaptureWidget_IsLoaded::ReturnValue' has a wrong offset!");

// Function AT.AT_UIBattleCond.OnBattleCutinEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UIBattleCond_OnBattleCutinEnd final
{
public:
	EBattleCutin_AnimType                         InAnimType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleCond_OnBattleCutinEnd) == 0x000001, "Wrong alignment on AT_UIBattleCond_OnBattleCutinEnd");
static_assert(sizeof(AT_UIBattleCond_OnBattleCutinEnd) == 0x000001, "Wrong size on AT_UIBattleCond_OnBattleCutinEnd");
static_assert(offsetof(AT_UIBattleCond_OnBattleCutinEnd, InAnimType) == 0x000000, "Member 'AT_UIBattleCond_OnBattleCutinEnd::InAnimType' has a wrong offset!");

// Function AT.AT_UIBattleCrowd.DebugDamageBoostCount
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleCrowd_DebugDamageBoostCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleCrowd_DebugDamageBoostCount) == 0x000004, "Wrong alignment on AT_UIBattleCrowd_DebugDamageBoostCount");
static_assert(sizeof(AT_UIBattleCrowd_DebugDamageBoostCount) == 0x000004, "Wrong size on AT_UIBattleCrowd_DebugDamageBoostCount");
static_assert(offsetof(AT_UIBattleCrowd_DebugDamageBoostCount, Num) == 0x000000, "Member 'AT_UIBattleCrowd_DebugDamageBoostCount::Num' has a wrong offset!");

// Function AT.AT_UIBattleCrowd.DebugRemainingEnemiesCount
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleCrowd_DebugRemainingEnemiesCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleCrowd_DebugRemainingEnemiesCount) == 0x000004, "Wrong alignment on AT_UIBattleCrowd_DebugRemainingEnemiesCount");
static_assert(sizeof(AT_UIBattleCrowd_DebugRemainingEnemiesCount) == 0x000004, "Wrong size on AT_UIBattleCrowd_DebugRemainingEnemiesCount");
static_assert(offsetof(AT_UIBattleCrowd_DebugRemainingEnemiesCount, Num) == 0x000000, "Member 'AT_UIBattleCrowd_DebugRemainingEnemiesCount::Num' has a wrong offset!");

// Function AT.AT_UIBattleCrowd.DebugSetOverKillNum
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleCrowd_DebugSetOverKillNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleCrowd_DebugSetOverKillNum) == 0x000004, "Wrong alignment on AT_UIBattleCrowd_DebugSetOverKillNum");
static_assert(sizeof(AT_UIBattleCrowd_DebugSetOverKillNum) == 0x000004, "Wrong size on AT_UIBattleCrowd_DebugSetOverKillNum");
static_assert(offsetof(AT_UIBattleCrowd_DebugSetOverKillNum, Num) == 0x000000, "Member 'AT_UIBattleCrowd_DebugSetOverKillNum::Num' has a wrong offset!");

// Function AT.AT_UIBattleCrowd.InitEnemiesCount
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleCrowd_InitEnemiesCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleCrowd_InitEnemiesCount) == 0x000004, "Wrong alignment on AT_UIBattleCrowd_InitEnemiesCount");
static_assert(sizeof(AT_UIBattleCrowd_InitEnemiesCount) == 0x000004, "Wrong size on AT_UIBattleCrowd_InitEnemiesCount");
static_assert(offsetof(AT_UIBattleCrowd_InitEnemiesCount, Num) == 0x000000, "Member 'AT_UIBattleCrowd_InitEnemiesCount::Num' has a wrong offset!");

// Function AT.AT_UIBattleCrowd.OnCountupFinish
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleCrowd_OnCountupFinish final
{
public:
	int32                                         FinishNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleCrowd_OnCountupFinish) == 0x000004, "Wrong alignment on AT_UIBattleCrowd_OnCountupFinish");
static_assert(sizeof(AT_UIBattleCrowd_OnCountupFinish) == 0x000004, "Wrong size on AT_UIBattleCrowd_OnCountupFinish");
static_assert(offsetof(AT_UIBattleCrowd_OnCountupFinish, FinishNum) == 0x000000, "Member 'AT_UIBattleCrowd_OnCountupFinish::FinishNum' has a wrong offset!");

// Function AT.AT_UIBoostDamage.OnComboAddEvent
// 0x0108 (0x0108 - 0x0000)
struct AT_UIBoostDamage_OnComboAddEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBoostDamage_OnComboAddEvent) == 0x000008, "Wrong alignment on AT_UIBoostDamage_OnComboAddEvent");
static_assert(sizeof(AT_UIBoostDamage_OnComboAddEvent) == 0x000108, "Wrong size on AT_UIBoostDamage_OnComboAddEvent");
static_assert(offsetof(AT_UIBoostDamage_OnComboAddEvent, EvParam) == 0x000000, "Member 'AT_UIBoostDamage_OnComboAddEvent::EvParam' has a wrong offset!");

// Function AT.AT_UIBoostDamage.OnComboEndEvent
// 0x0108 (0x0108 - 0x0000)
struct AT_UIBoostDamage_OnComboEndEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBoostDamage_OnComboEndEvent) == 0x000008, "Wrong alignment on AT_UIBoostDamage_OnComboEndEvent");
static_assert(sizeof(AT_UIBoostDamage_OnComboEndEvent) == 0x000108, "Wrong size on AT_UIBoostDamage_OnComboEndEvent");
static_assert(offsetof(AT_UIBoostDamage_OnComboEndEvent, EvParam) == 0x000000, "Member 'AT_UIBoostDamage_OnComboEndEvent::EvParam' has a wrong offset!");

// Function AT.AT_UIBattleCrowdResult.DebugRequest
// 0x0008 (0x0008 - 0x0000)
struct AT_UIBattleCrowdResult_DebugRequest final
{
public:
	ECrowdResultType                              ResultType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrowdResultRank                              Rank;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Exp;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleCrowdResult_DebugRequest) == 0x000004, "Wrong alignment on AT_UIBattleCrowdResult_DebugRequest");
static_assert(sizeof(AT_UIBattleCrowdResult_DebugRequest) == 0x000008, "Wrong size on AT_UIBattleCrowdResult_DebugRequest");
static_assert(offsetof(AT_UIBattleCrowdResult_DebugRequest, ResultType) == 0x000000, "Member 'AT_UIBattleCrowdResult_DebugRequest::ResultType' has a wrong offset!");
static_assert(offsetof(AT_UIBattleCrowdResult_DebugRequest, Rank) == 0x000001, "Member 'AT_UIBattleCrowdResult_DebugRequest::Rank' has a wrong offset!");
static_assert(offsetof(AT_UIBattleCrowdResult_DebugRequest, Exp) == 0x000004, "Member 'AT_UIBattleCrowdResult_DebugRequest::Exp' has a wrong offset!");

// Function AT.ATActGroundBattleStraightBoost.DamageApplied
// 0x0088 (0x0088 - 0x0000)
struct ATActGroundBattleStraightBoost_DamageApplied final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActGroundBattleStraightBoost_DamageApplied) == 0x000008, "Wrong alignment on ATActGroundBattleStraightBoost_DamageApplied");
static_assert(sizeof(ATActGroundBattleStraightBoost_DamageApplied) == 0x000088, "Wrong size on ATActGroundBattleStraightBoost_DamageApplied");
static_assert(offsetof(ATActGroundBattleStraightBoost_DamageApplied, HitResult) == 0x000000, "Member 'ATActGroundBattleStraightBoost_DamageApplied::HitResult' has a wrong offset!");

// Function AT.AT_UIBattleHudEnemy.OnChangeTarget
// 0x0010 (0x0010 - 0x0000)
struct AT_UIBattleHudEnemy_OnChangeTarget final
{
public:
	class AAT_Character*                          InOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTargetEnemy;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudEnemy_OnChangeTarget) == 0x000008, "Wrong alignment on AT_UIBattleHudEnemy_OnChangeTarget");
static_assert(sizeof(AT_UIBattleHudEnemy_OnChangeTarget) == 0x000010, "Wrong size on AT_UIBattleHudEnemy_OnChangeTarget");
static_assert(offsetof(AT_UIBattleHudEnemy_OnChangeTarget, InOwner) == 0x000000, "Member 'AT_UIBattleHudEnemy_OnChangeTarget::InOwner' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudEnemy_OnChangeTarget, InTargetEnemy) == 0x000008, "Member 'AT_UIBattleHudEnemy_OnChangeTarget::InTargetEnemy' has a wrong offset!");

// Function AT.AT_UIBattleHudEnemy.OnExitMember
// 0x0030 (0x0030 - 0x0000)
struct AT_UIBattleHudEnemy_OnExitMember final
{
public:
	struct FPartyMember                           InMember;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         MemberType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIBattleHudEnemy_OnExitMember) == 0x000008, "Wrong alignment on AT_UIBattleHudEnemy_OnExitMember");
static_assert(sizeof(AT_UIBattleHudEnemy_OnExitMember) == 0x000030, "Wrong size on AT_UIBattleHudEnemy_OnExitMember");
static_assert(offsetof(AT_UIBattleHudEnemy_OnExitMember, InMember) == 0x000000, "Member 'AT_UIBattleHudEnemy_OnExitMember::InMember' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudEnemy_OnExitMember, MemberType) == 0x000028, "Member 'AT_UIBattleHudEnemy_OnExitMember::MemberType' has a wrong offset!");

// Function AT.AT_UIBattleHudEnemy.SetDebugBarMax
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleHudEnemy_SetDebugBarMax final
{
public:
	int32                                         InBar;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudEnemy_SetDebugBarMax) == 0x000004, "Wrong alignment on AT_UIBattleHudEnemy_SetDebugBarMax");
static_assert(sizeof(AT_UIBattleHudEnemy_SetDebugBarMax) == 0x000004, "Wrong size on AT_UIBattleHudEnemy_SetDebugBarMax");
static_assert(offsetof(AT_UIBattleHudEnemy_SetDebugBarMax, InBar) == 0x000000, "Member 'AT_UIBattleHudEnemy_SetDebugBarMax::InBar' has a wrong offset!");

// Function AT.AT_UIBattleHudEnemy.SetDebugBreak
// 0x0008 (0x0008 - 0x0000)
struct AT_UIBattleHudEnemy_SetDebugBreak final
{
public:
	int32                                         InVal;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnim;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIBattleHudEnemy_SetDebugBreak) == 0x000004, "Wrong alignment on AT_UIBattleHudEnemy_SetDebugBreak");
static_assert(sizeof(AT_UIBattleHudEnemy_SetDebugBreak) == 0x000008, "Wrong size on AT_UIBattleHudEnemy_SetDebugBreak");
static_assert(offsetof(AT_UIBattleHudEnemy_SetDebugBreak, InVal) == 0x000000, "Member 'AT_UIBattleHudEnemy_SetDebugBreak::InVal' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudEnemy_SetDebugBreak, bAnim) == 0x000004, "Member 'AT_UIBattleHudEnemy_SetDebugBreak::bAnim' has a wrong offset!");

// Function AT.AT_UIBattleHudEnemy.SetDebugBreakMax
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleHudEnemy_SetDebugBreakMax final
{
public:
	int32                                         InMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudEnemy_SetDebugBreakMax) == 0x000004, "Wrong alignment on AT_UIBattleHudEnemy_SetDebugBreakMax");
static_assert(sizeof(AT_UIBattleHudEnemy_SetDebugBreakMax) == 0x000004, "Wrong size on AT_UIBattleHudEnemy_SetDebugBreakMax");
static_assert(offsetof(AT_UIBattleHudEnemy_SetDebugBreakMax, InMax) == 0x000000, "Member 'AT_UIBattleHudEnemy_SetDebugBreakMax::InMax' has a wrong offset!");

// Function AT.AT_UIBattleHudEnemy.SetDebugHp
// 0x0008 (0x0008 - 0x0000)
struct AT_UIBattleHudEnemy_SetDebugHp final
{
public:
	int32                                         InVal;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnim;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIBattleHudEnemy_SetDebugHp) == 0x000004, "Wrong alignment on AT_UIBattleHudEnemy_SetDebugHp");
static_assert(sizeof(AT_UIBattleHudEnemy_SetDebugHp) == 0x000008, "Wrong size on AT_UIBattleHudEnemy_SetDebugHp");
static_assert(offsetof(AT_UIBattleHudEnemy_SetDebugHp, InVal) == 0x000000, "Member 'AT_UIBattleHudEnemy_SetDebugHp::InVal' has a wrong offset!");
static_assert(offsetof(AT_UIBattleHudEnemy_SetDebugHp, bAnim) == 0x000004, "Member 'AT_UIBattleHudEnemy_SetDebugHp::bAnim' has a wrong offset!");

// Function AT.AT_UIBattleHudEnemy.SetDebugHpMax
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleHudEnemy_SetDebugHpMax final
{
public:
	int32                                         InMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleHudEnemy_SetDebugHpMax) == 0x000004, "Wrong alignment on AT_UIBattleHudEnemy_SetDebugHpMax");
static_assert(sizeof(AT_UIBattleHudEnemy_SetDebugHpMax) == 0x000004, "Wrong size on AT_UIBattleHudEnemy_SetDebugHpMax");
static_assert(offsetof(AT_UIBattleHudEnemy_SetDebugHpMax, InMax) == 0x000000, "Member 'AT_UIBattleHudEnemy_SetDebugHpMax::InMax' has a wrong offset!");

// Function AT.ATEnemiesBaseBehaviour.OnCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct ATEnemiesBaseBehaviour_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEnemiesBaseBehaviour_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on ATEnemiesBaseBehaviour_OnCollisionOverlapBegin");
static_assert(sizeof(ATEnemiesBaseBehaviour_OnCollisionOverlapBegin) == 0x0000A8, "Wrong size on ATEnemiesBaseBehaviour_OnCollisionOverlapBegin");
static_assert(offsetof(ATEnemiesBaseBehaviour_OnCollisionOverlapBegin, OverlappedComponent) == 0x000000, "Member 'ATEnemiesBaseBehaviour_OnCollisionOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATEnemiesBaseBehaviour_OnCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'ATEnemiesBaseBehaviour_OnCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(ATEnemiesBaseBehaviour_OnCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'ATEnemiesBaseBehaviour_OnCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(ATEnemiesBaseBehaviour_OnCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'ATEnemiesBaseBehaviour_OnCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ATEnemiesBaseBehaviour_OnCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'ATEnemiesBaseBehaviour_OnCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(ATEnemiesBaseBehaviour_OnCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'ATEnemiesBaseBehaviour_OnCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function AT.AT_UIBattleResult.RequestStartAnim
// 0x0008 (0x0008 - 0x0000)
struct AT_UIBattleResult_RequestStartAnim final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalExp;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleResult_RequestStartAnim) == 0x000004, "Wrong alignment on AT_UIBattleResult_RequestStartAnim");
static_assert(sizeof(AT_UIBattleResult_RequestStartAnim) == 0x000008, "Wrong size on AT_UIBattleResult_RequestStartAnim");
static_assert(offsetof(AT_UIBattleResult_RequestStartAnim, Rank) == 0x000000, "Member 'AT_UIBattleResult_RequestStartAnim::Rank' has a wrong offset!");
static_assert(offsetof(AT_UIBattleResult_RequestStartAnim, TotalExp) == 0x000004, "Member 'AT_UIBattleResult_RequestStartAnim::TotalExp' has a wrong offset!");

// Function AT.AT_UIBattleResult.TestRequestAnim
// 0x0004 (0x0004 - 0x0000)
struct AT_UIBattleResult_TestRequestAnim final
{
public:
	int32                                         AnimType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleResult_TestRequestAnim) == 0x000004, "Wrong alignment on AT_UIBattleResult_TestRequestAnim");
static_assert(sizeof(AT_UIBattleResult_TestRequestAnim) == 0x000004, "Wrong size on AT_UIBattleResult_TestRequestAnim");
static_assert(offsetof(AT_UIBattleResult_TestRequestAnim, AnimType) == 0x000000, "Member 'AT_UIBattleResult_TestRequestAnim::AnimType' has a wrong offset!");

// Function AT.ATEventBattleCounterZComboCount.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct ATEventBattleCounterZComboCount_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleCounterZComboCount_OnActionChange) == 0x000008, "Wrong alignment on ATEventBattleCounterZComboCount_OnActionChange");
static_assert(sizeof(ATEventBattleCounterZComboCount_OnActionChange) == 0x000010, "Wrong size on ATEventBattleCounterZComboCount_OnActionChange");
static_assert(offsetof(ATEventBattleCounterZComboCount_OnActionChange, InCharacter) == 0x000000, "Member 'ATEventBattleCounterZComboCount_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(ATEventBattleCounterZComboCount_OnActionChange, InActionIdPrev) == 0x000008, "Member 'ATEventBattleCounterZComboCount_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATEventBattleCounterZComboCount_OnActionChange, InActionIdNext) == 0x00000C, "Member 'ATEventBattleCounterZComboCount_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.AT_UIBattleTipsTutorial.OnChangePlayer
// 0x0008 (0x0008 - 0x0000)
struct AT_UIBattleTipsTutorial_OnChangePlayer final
{
public:
	class AAT_Character*                          InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleTipsTutorial_OnChangePlayer) == 0x000008, "Wrong alignment on AT_UIBattleTipsTutorial_OnChangePlayer");
static_assert(sizeof(AT_UIBattleTipsTutorial_OnChangePlayer) == 0x000008, "Wrong size on AT_UIBattleTipsTutorial_OnChangePlayer");
static_assert(offsetof(AT_UIBattleTipsTutorial_OnChangePlayer, InChar) == 0x000000, "Member 'AT_UIBattleTipsTutorial_OnChangePlayer::InChar' has a wrong offset!");

// Function AT.AT_UIBattleTipsTutorial.SetCtrlMode
// 0x0001 (0x0001 - 0x0000)
struct AT_UIBattleTipsTutorial_SetCtrlMode final
{
public:
	EKeyGuideCtrlMode                             InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleTipsTutorial_SetCtrlMode) == 0x000001, "Wrong alignment on AT_UIBattleTipsTutorial_SetCtrlMode");
static_assert(sizeof(AT_UIBattleTipsTutorial_SetCtrlMode) == 0x000001, "Wrong size on AT_UIBattleTipsTutorial_SetCtrlMode");
static_assert(offsetof(AT_UIBattleTipsTutorial_SetCtrlMode, InMode) == 0x000000, "Member 'AT_UIBattleTipsTutorial_SetCtrlMode::InMode' has a wrong offset!");

// Function AT.AT_UIBattleTipsTutorial.SetGuideType
// 0x0001 (0x0001 - 0x0000)
struct AT_UIBattleTipsTutorial_SetGuideType final
{
public:
	EKeyGuideType                                 InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBattleTipsTutorial_SetGuideType) == 0x000001, "Wrong alignment on AT_UIBattleTipsTutorial_SetGuideType");
static_assert(sizeof(AT_UIBattleTipsTutorial_SetGuideType) == 0x000001, "Wrong size on AT_UIBattleTipsTutorial_SetGuideType");
static_assert(offsetof(AT_UIBattleTipsTutorial_SetGuideType, InType) == 0x000000, "Member 'AT_UIBattleTipsTutorial_SetGuideType::InType' has a wrong offset!");

// Function AT.ATEnvironmentEffectManager.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ATEnvironmentEffectManager_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATEnvironmentEffectManager_OnDemoTiming) == 0x000004, "Wrong alignment on ATEnvironmentEffectManager_OnDemoTiming");
static_assert(sizeof(ATEnvironmentEffectManager_OnDemoTiming) == 0x000018, "Wrong size on ATEnvironmentEffectManager_OnDemoTiming");
static_assert(offsetof(ATEnvironmentEffectManager_OnDemoTiming, DemoType) == 0x000000, "Member 'ATEnvironmentEffectManager_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(ATEnvironmentEffectManager_OnDemoTiming, DemoTiming) == 0x000001, "Member 'ATEnvironmentEffectManager_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(ATEnvironmentEffectManager_OnDemoTiming, DemoName) == 0x000008, "Member 'ATEnvironmentEffectManager_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(ATEnvironmentEffectManager_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'ATEnvironmentEffectManager_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.AT_UIBootLogo.IsComplete
// 0x0001 (0x0001 - 0x0000)
struct AT_UIBootLogo_IsComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBootLogo_IsComplete) == 0x000001, "Wrong alignment on AT_UIBootLogo_IsComplete");
static_assert(sizeof(AT_UIBootLogo_IsComplete) == 0x000001, "Wrong size on AT_UIBootLogo_IsComplete");
static_assert(offsetof(AT_UIBootLogo_IsComplete, ReturnValue) == 0x000000, "Member 'AT_UIBootLogo_IsComplete::ReturnValue' has a wrong offset!");

// Function AT.AT_UIBootLogo.IsLoadComplete
// 0x0001 (0x0001 - 0x0000)
struct AT_UIBootLogo_IsLoadComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIBootLogo_IsLoadComplete) == 0x000001, "Wrong alignment on AT_UIBootLogo_IsLoadComplete");
static_assert(sizeof(AT_UIBootLogo_IsLoadComplete) == 0x000001, "Wrong size on AT_UIBootLogo_IsLoadComplete");
static_assert(offsetof(AT_UIBootLogo_IsLoadComplete, ReturnValue) == 0x000000, "Member 'AT_UIBootLogo_IsLoadComplete::ReturnValue' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.GetEventTriggerValue
// 0x0020 (0x0020 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_GetEventTriggerValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_GetEventTriggerValue) == 0x000008, "Wrong alignment on ATLevelBlueprintFunctionLibrary_GetEventTriggerValue");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_GetEventTriggerValue) == 0x000020, "Wrong size on ATLevelBlueprintFunctionLibrary_GetEventTriggerValue");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_GetEventTriggerValue, Key) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_GetEventTriggerValue::Key' has a wrong offset!");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_GetEventTriggerValue, ReturnValue) == 0x000010, "Member 'ATLevelBlueprintFunctionLibrary_GetEventTriggerValue::ReturnValue' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.GetLevelManager
// 0x0008 (0x0008 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_GetLevelManager final
{
public:
	class AATLevelManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_GetLevelManager) == 0x000008, "Wrong alignment on ATLevelBlueprintFunctionLibrary_GetLevelManager");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_GetLevelManager) == 0x000008, "Wrong size on ATLevelBlueprintFunctionLibrary_GetLevelManager");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_GetLevelManager, ReturnValue) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_GetLevelManager::ReturnValue' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.IsEventTriggerTrue
// 0x0018 (0x0018 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue) == 0x000008, "Wrong alignment on ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue) == 0x000018, "Wrong size on ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue, Key) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue::Key' has a wrong offset!");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue, ReturnValue) == 0x000010, "Member 'ATLevelBlueprintFunctionLibrary_IsEventTriggerTrue::ReturnValue' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.IsInDoor
// 0x0001 (0x0001 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_IsInDoor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_IsInDoor) == 0x000001, "Wrong alignment on ATLevelBlueprintFunctionLibrary_IsInDoor");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_IsInDoor) == 0x000001, "Wrong size on ATLevelBlueprintFunctionLibrary_IsInDoor");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_IsInDoor, ReturnValue) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_IsInDoor::ReturnValue' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.Level_ActivateSubLevel
// 0x0008 (0x0008 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_Level_ActivateSubLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_Level_ActivateSubLevel) == 0x000004, "Wrong alignment on ATLevelBlueprintFunctionLibrary_Level_ActivateSubLevel");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_Level_ActivateSubLevel) == 0x000008, "Wrong size on ATLevelBlueprintFunctionLibrary_Level_ActivateSubLevel");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_Level_ActivateSubLevel, LevelName) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_Level_ActivateSubLevel::LevelName' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.Level_DeactivateSubLevel
// 0x0008 (0x0008 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_Level_DeactivateSubLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_Level_DeactivateSubLevel) == 0x000004, "Wrong alignment on ATLevelBlueprintFunctionLibrary_Level_DeactivateSubLevel");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_Level_DeactivateSubLevel) == 0x000008, "Wrong size on ATLevelBlueprintFunctionLibrary_Level_DeactivateSubLevel");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_Level_DeactivateSubLevel, LevelName) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_Level_DeactivateSubLevel::LevelName' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.Level_LoadSubLevel
// 0x0008 (0x0008 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_Level_LoadSubLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_Level_LoadSubLevel) == 0x000004, "Wrong alignment on ATLevelBlueprintFunctionLibrary_Level_LoadSubLevel");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_Level_LoadSubLevel) == 0x000008, "Wrong size on ATLevelBlueprintFunctionLibrary_Level_LoadSubLevel");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_Level_LoadSubLevel, LevelName) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_Level_LoadSubLevel::LevelName' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.Level_UnloadSubLevel
// 0x0008 (0x0008 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_Level_UnloadSubLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_Level_UnloadSubLevel) == 0x000004, "Wrong alignment on ATLevelBlueprintFunctionLibrary_Level_UnloadSubLevel");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_Level_UnloadSubLevel) == 0x000008, "Wrong size on ATLevelBlueprintFunctionLibrary_Level_UnloadSubLevel");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_Level_UnloadSubLevel, LevelName) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_Level_UnloadSubLevel::LevelName' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.RemoveLevelCondition
// 0x0008 (0x0008 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_RemoveLevelCondition final
{
public:
	class FName                                   LevelConditionId;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_RemoveLevelCondition) == 0x000004, "Wrong alignment on ATLevelBlueprintFunctionLibrary_RemoveLevelCondition");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_RemoveLevelCondition) == 0x000008, "Wrong size on ATLevelBlueprintFunctionLibrary_RemoveLevelCondition");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_RemoveLevelCondition, LevelConditionId) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_RemoveLevelCondition::LevelConditionId' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.RequestEvent
// 0x0020 (0x0020 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_RequestEvent final
{
public:
	struct FATLevelEventParam                     Param;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_RequestEvent) == 0x000008, "Wrong alignment on ATLevelBlueprintFunctionLibrary_RequestEvent");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_RequestEvent) == 0x000020, "Wrong size on ATLevelBlueprintFunctionLibrary_RequestEvent");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_RequestEvent, Param) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_RequestEvent::Param' has a wrong offset!");

// Function AT.ATLevelBlueprintFunctionLibrary.RequestFlagInWorldMap
// 0x0010 (0x0010 - 0x0000)
struct ATLevelBlueprintFunctionLibrary_RequestFlagInWorldMap final
{
public:
	class FString                                 InFlagName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelBlueprintFunctionLibrary_RequestFlagInWorldMap) == 0x000008, "Wrong alignment on ATLevelBlueprintFunctionLibrary_RequestFlagInWorldMap");
static_assert(sizeof(ATLevelBlueprintFunctionLibrary_RequestFlagInWorldMap) == 0x000010, "Wrong size on ATLevelBlueprintFunctionLibrary_RequestFlagInWorldMap");
static_assert(offsetof(ATLevelBlueprintFunctionLibrary_RequestFlagInWorldMap, InFlagName) == 0x000000, "Member 'ATLevelBlueprintFunctionLibrary_RequestFlagInWorldMap::InFlagName' has a wrong offset!");

// Function AT.AT_UICmnFade.StartFade
// 0x0010 (0x0010 - 0x0000)
struct AT_UICmnFade_StartFade final
{
public:
	EUMG_FADE_TYPE                                FadeType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMG_FADE_COLOR                               FadeColor;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeSecond;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETWEEN_TYPE                                   TweenType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartDelay;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICmnFade_StartFade) == 0x000004, "Wrong alignment on AT_UICmnFade_StartFade");
static_assert(sizeof(AT_UICmnFade_StartFade) == 0x000010, "Wrong size on AT_UICmnFade_StartFade");
static_assert(offsetof(AT_UICmnFade_StartFade, FadeType) == 0x000000, "Member 'AT_UICmnFade_StartFade::FadeType' has a wrong offset!");
static_assert(offsetof(AT_UICmnFade_StartFade, FadeColor) == 0x000001, "Member 'AT_UICmnFade_StartFade::FadeColor' has a wrong offset!");
static_assert(offsetof(AT_UICmnFade_StartFade, FadeSecond) == 0x000004, "Member 'AT_UICmnFade_StartFade::FadeSecond' has a wrong offset!");
static_assert(offsetof(AT_UICmnFade_StartFade, TweenType) == 0x000008, "Member 'AT_UICmnFade_StartFade::TweenType' has a wrong offset!");
static_assert(offsetof(AT_UICmnFade_StartFade, StartDelay) == 0x00000C, "Member 'AT_UICmnFade_StartFade::StartDelay' has a wrong offset!");

// Function AT.AT_UICmnFade.StartFadeWihthParam
// 0x0020 (0x0020 - 0x0000)
struct AT_UICmnFade_StartFadeWihthParam final
{
public:
	EUMG_FADE_TYPE                                FadeType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FadeColor;                                         // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeSecond;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETWEEN_TYPE                                   TweenType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartDelay;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICmnFade_StartFadeWihthParam) == 0x000004, "Wrong alignment on AT_UICmnFade_StartFadeWihthParam");
static_assert(sizeof(AT_UICmnFade_StartFadeWihthParam) == 0x000020, "Wrong size on AT_UICmnFade_StartFadeWihthParam");
static_assert(offsetof(AT_UICmnFade_StartFadeWihthParam, FadeType) == 0x000000, "Member 'AT_UICmnFade_StartFadeWihthParam::FadeType' has a wrong offset!");
static_assert(offsetof(AT_UICmnFade_StartFadeWihthParam, FadeColor) == 0x000004, "Member 'AT_UICmnFade_StartFadeWihthParam::FadeColor' has a wrong offset!");
static_assert(offsetof(AT_UICmnFade_StartFadeWihthParam, FadeSecond) == 0x000014, "Member 'AT_UICmnFade_StartFadeWihthParam::FadeSecond' has a wrong offset!");
static_assert(offsetof(AT_UICmnFade_StartFadeWihthParam, TweenType) == 0x000018, "Member 'AT_UICmnFade_StartFadeWihthParam::TweenType' has a wrong offset!");
static_assert(offsetof(AT_UICmnFade_StartFadeWihthParam, StartDelay) == 0x00001C, "Member 'AT_UICmnFade_StartFadeWihthParam::StartDelay' has a wrong offset!");

// Function AT.AT_UILoadingScreen.InitSetting
// 0x0001 (0x0001 - 0x0000)
struct AT_UILoadingScreen_InitSetting final
{
public:
	bool                                          IsSimple;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UILoadingScreen_InitSetting) == 0x000001, "Wrong alignment on AT_UILoadingScreen_InitSetting");
static_assert(sizeof(AT_UILoadingScreen_InitSetting) == 0x000001, "Wrong size on AT_UILoadingScreen_InitSetting");
static_assert(offsetof(AT_UILoadingScreen_InitSetting, IsSimple) == 0x000000, "Member 'AT_UILoadingScreen_InitSetting::IsSimple' has a wrong offset!");

// Function AT.AT_UILoadingScreen.IsEndAnim
// 0x0001 (0x0001 - 0x0000)
struct AT_UILoadingScreen_IsEndAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UILoadingScreen_IsEndAnim) == 0x000001, "Wrong alignment on AT_UILoadingScreen_IsEndAnim");
static_assert(sizeof(AT_UILoadingScreen_IsEndAnim) == 0x000001, "Wrong size on AT_UILoadingScreen_IsEndAnim");
static_assert(offsetof(AT_UILoadingScreen_IsEndAnim, ReturnValue) == 0x000000, "Member 'AT_UILoadingScreen_IsEndAnim::ReturnValue' has a wrong offset!");

// Function AT.AT_UILoadingScreen.IsInactive
// 0x0001 (0x0001 - 0x0000)
struct AT_UILoadingScreen_IsInactive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UILoadingScreen_IsInactive) == 0x000001, "Wrong alignment on AT_UILoadingScreen_IsInactive");
static_assert(sizeof(AT_UILoadingScreen_IsInactive) == 0x000001, "Wrong size on AT_UILoadingScreen_IsInactive");
static_assert(offsetof(AT_UILoadingScreen_IsInactive, ReturnValue) == 0x000000, "Member 'AT_UILoadingScreen_IsInactive::ReturnValue' has a wrong offset!");

// Function AT.AT_UILoadingScreen.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct AT_UILoadingScreen_UpdateProgress final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UILoadingScreen_UpdateProgress) == 0x000004, "Wrong alignment on AT_UILoadingScreen_UpdateProgress");
static_assert(sizeof(AT_UILoadingScreen_UpdateProgress) == 0x000004, "Wrong size on AT_UILoadingScreen_UpdateProgress");
static_assert(offsetof(AT_UILoadingScreen_UpdateProgress, Rate) == 0x000000, "Member 'AT_UILoadingScreen_UpdateProgress::Rate' has a wrong offset!");

// Function AT.LipSyncUtils.GetAreaRowByName
// 0x0030 (0x0030 - 0x0000)
struct LipSyncUtils_GetAreaRowByName final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PName;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLipSyncAreaData                       ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LipSyncUtils_GetAreaRowByName) == 0x000008, "Wrong alignment on LipSyncUtils_GetAreaRowByName");
static_assert(sizeof(LipSyncUtils_GetAreaRowByName) == 0x000030, "Wrong size on LipSyncUtils_GetAreaRowByName");
static_assert(offsetof(LipSyncUtils_GetAreaRowByName, DataTable) == 0x000000, "Member 'LipSyncUtils_GetAreaRowByName::DataTable' has a wrong offset!");
static_assert(offsetof(LipSyncUtils_GetAreaRowByName, PName) == 0x000008, "Member 'LipSyncUtils_GetAreaRowByName::PName' has a wrong offset!");
static_assert(offsetof(LipSyncUtils_GetAreaRowByName, Result) == 0x000010, "Member 'LipSyncUtils_GetAreaRowByName::Result' has a wrong offset!");
static_assert(offsetof(LipSyncUtils_GetAreaRowByName, ReturnValue) == 0x000018, "Member 'LipSyncUtils_GetAreaRowByName::ReturnValue' has a wrong offset!");

// Function AT.AT_UICmnLoadingBar.IsEndAnim
// 0x0001 (0x0001 - 0x0000)
struct AT_UICmnLoadingBar_IsEndAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICmnLoadingBar_IsEndAnim) == 0x000001, "Wrong alignment on AT_UICmnLoadingBar_IsEndAnim");
static_assert(sizeof(AT_UICmnLoadingBar_IsEndAnim) == 0x000001, "Wrong size on AT_UICmnLoadingBar_IsEndAnim");
static_assert(offsetof(AT_UICmnLoadingBar_IsEndAnim, ReturnValue) == 0x000000, "Member 'AT_UICmnLoadingBar_IsEndAnim::ReturnValue' has a wrong offset!");

// Function AT.AT_UICmnLoadingBar.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct AT_UICmnLoadingBar_SetProgress final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICmnLoadingBar_SetProgress) == 0x000004, "Wrong alignment on AT_UICmnLoadingBar_SetProgress");
static_assert(sizeof(AT_UICmnLoadingBar_SetProgress) == 0x000004, "Wrong size on AT_UICmnLoadingBar_SetProgress");
static_assert(offsetof(AT_UICmnLoadingBar_SetProgress, Rate) == 0x000000, "Member 'AT_UICmnLoadingBar_SetProgress::Rate' has a wrong offset!");

// Function AT.AT_UICmnTab.ChangeEnableSelect
// 0x0001 (0x0001 - 0x0000)
struct AT_UICmnTab_ChangeEnableSelect final
{
public:
	bool                                          IsLeft;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICmnTab_ChangeEnableSelect) == 0x000001, "Wrong alignment on AT_UICmnTab_ChangeEnableSelect");
static_assert(sizeof(AT_UICmnTab_ChangeEnableSelect) == 0x000001, "Wrong size on AT_UICmnTab_ChangeEnableSelect");
static_assert(offsetof(AT_UICmnTab_ChangeEnableSelect, IsLeft) == 0x000000, "Member 'AT_UICmnTab_ChangeEnableSelect::IsLeft' has a wrong offset!");

// Function AT.AT_UICmnTab.InitCategoryIcon
// 0x0010 (0x0010 - 0x0000)
struct AT_UICmnTab_InitCategoryIcon final
{
public:
	TArray<struct FCmnTabIconParam>               IconTypeCtn;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICmnTab_InitCategoryIcon) == 0x000008, "Wrong alignment on AT_UICmnTab_InitCategoryIcon");
static_assert(sizeof(AT_UICmnTab_InitCategoryIcon) == 0x000010, "Wrong size on AT_UICmnTab_InitCategoryIcon");
static_assert(offsetof(AT_UICmnTab_InitCategoryIcon, IconTypeCtn) == 0x000000, "Member 'AT_UICmnTab_InitCategoryIcon::IconTypeCtn' has a wrong offset!");

// Function AT.AT_UICmnTab.RequestPlayEnterAnim
// 0x0001 (0x0001 - 0x0000)
struct AT_UICmnTab_RequestPlayEnterAnim final
{
public:
	bool                                          IsLeftArraw;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICmnTab_RequestPlayEnterAnim) == 0x000001, "Wrong alignment on AT_UICmnTab_RequestPlayEnterAnim");
static_assert(sizeof(AT_UICmnTab_RequestPlayEnterAnim) == 0x000001, "Wrong size on AT_UICmnTab_RequestPlayEnterAnim");
static_assert(offsetof(AT_UICmnTab_RequestPlayEnterAnim, IsLeftArraw) == 0x000000, "Member 'AT_UICmnTab_RequestPlayEnterAnim::IsLeftArraw' has a wrong offset!");

// Function AT.AT_UICmnTab.SetEnable
// 0x0008 (0x0008 - 0x0000)
struct AT_UICmnTab_SetEnable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UICmnTab_SetEnable) == 0x000004, "Wrong alignment on AT_UICmnTab_SetEnable");
static_assert(sizeof(AT_UICmnTab_SetEnable) == 0x000008, "Wrong size on AT_UICmnTab_SetEnable");
static_assert(offsetof(AT_UICmnTab_SetEnable, Index_0) == 0x000000, "Member 'AT_UICmnTab_SetEnable::Index_0' has a wrong offset!");
static_assert(offsetof(AT_UICmnTab_SetEnable, IsEnable) == 0x000004, "Member 'AT_UICmnTab_SetEnable::IsEnable' has a wrong offset!");

// Function AT.AT_UICmnTab.SetEnableSelect
// 0x0004 (0x0004 - 0x0000)
struct AT_UICmnTab_SetEnableSelect final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICmnTab_SetEnableSelect) == 0x000004, "Wrong alignment on AT_UICmnTab_SetEnableSelect");
static_assert(sizeof(AT_UICmnTab_SetEnableSelect) == 0x000004, "Wrong size on AT_UICmnTab_SetEnableSelect");
static_assert(offsetof(AT_UICmnTab_SetEnableSelect, Index_0) == 0x000000, "Member 'AT_UICmnTab_SetEnableSelect::Index_0' has a wrong offset!");

// Function AT.AT_UICommandPalette.OnEntrySupport
// 0x0030 (0x0030 - 0x0000)
struct AT_UICommandPalette_OnEntrySupport final
{
public:
	struct FPartyMember                           InMember;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         InMemberType;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UICommandPalette_OnEntrySupport) == 0x000008, "Wrong alignment on AT_UICommandPalette_OnEntrySupport");
static_assert(sizeof(AT_UICommandPalette_OnEntrySupport) == 0x000030, "Wrong size on AT_UICommandPalette_OnEntrySupport");
static_assert(offsetof(AT_UICommandPalette_OnEntrySupport, InMember) == 0x000000, "Member 'AT_UICommandPalette_OnEntrySupport::InMember' has a wrong offset!");
static_assert(offsetof(AT_UICommandPalette_OnEntrySupport, InMemberType) == 0x000028, "Member 'AT_UICommandPalette_OnEntrySupport::InMemberType' has a wrong offset!");

// Function AT.AT_UICommandPalette.OnExitSupport
// 0x0030 (0x0030 - 0x0000)
struct AT_UICommandPalette_OnExitSupport final
{
public:
	struct FPartyMember                           InMember;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         InMemberType;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UICommandPalette_OnExitSupport) == 0x000008, "Wrong alignment on AT_UICommandPalette_OnExitSupport");
static_assert(sizeof(AT_UICommandPalette_OnExitSupport) == 0x000030, "Wrong size on AT_UICommandPalette_OnExitSupport");
static_assert(offsetof(AT_UICommandPalette_OnExitSupport, InMember) == 0x000000, "Member 'AT_UICommandPalette_OnExitSupport::InMember' has a wrong offset!");
static_assert(offsetof(AT_UICommandPalette_OnExitSupport, InMemberType) == 0x000028, "Member 'AT_UICommandPalette_OnExitSupport::InMemberType' has a wrong offset!");

// Function AT.AT_UICommandPalette.OnLoadedSpecialNameForLongAttackParam
// 0x0008 (0x0008 - 0x0000)
struct AT_UICommandPalette_OnLoadedSpecialNameForLongAttackParam final
{
public:
	class UATDataAssetUiAsyncLoad*                LoadOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommandPalette_OnLoadedSpecialNameForLongAttackParam) == 0x000008, "Wrong alignment on AT_UICommandPalette_OnLoadedSpecialNameForLongAttackParam");
static_assert(sizeof(AT_UICommandPalette_OnLoadedSpecialNameForLongAttackParam) == 0x000008, "Wrong size on AT_UICommandPalette_OnLoadedSpecialNameForLongAttackParam");
static_assert(offsetof(AT_UICommandPalette_OnLoadedSpecialNameForLongAttackParam, LoadOwner) == 0x000000, "Member 'AT_UICommandPalette_OnLoadedSpecialNameForLongAttackParam::LoadOwner' has a wrong offset!");

// Function AT.AT_UICommandPalette.OnPlayerChange
// 0x0008 (0x0008 - 0x0000)
struct AT_UICommandPalette_OnPlayerChange final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommandPalette_OnPlayerChange) == 0x000008, "Wrong alignment on AT_UICommandPalette_OnPlayerChange");
static_assert(sizeof(AT_UICommandPalette_OnPlayerChange) == 0x000008, "Wrong size on AT_UICommandPalette_OnPlayerChange");
static_assert(offsetof(AT_UICommandPalette_OnPlayerChange, Character) == 0x000000, "Member 'AT_UICommandPalette_OnPlayerChange::Character' has a wrong offset!");

// Function AT.AT_UICommandPalette.OnSkillBegin
// 0x0008 (0x0008 - 0x0000)
struct AT_UICommandPalette_OnSkillBegin final
{
public:
	class USkill*                                 Skill;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommandPalette_OnSkillBegin) == 0x000008, "Wrong alignment on AT_UICommandPalette_OnSkillBegin");
static_assert(sizeof(AT_UICommandPalette_OnSkillBegin) == 0x000008, "Wrong size on AT_UICommandPalette_OnSkillBegin");
static_assert(offsetof(AT_UICommandPalette_OnSkillBegin, Skill) == 0x000000, "Member 'AT_UICommandPalette_OnSkillBegin::Skill' has a wrong offset!");

// Function AT.AT_CapturedCharacter.ApplyAppearance
// 0x0001 (0x0001 - 0x0000)
struct AT_CapturedCharacter_ApplyAppearance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_CapturedCharacter_ApplyAppearance) == 0x000001, "Wrong alignment on AT_CapturedCharacter_ApplyAppearance");
static_assert(sizeof(AT_CapturedCharacter_ApplyAppearance) == 0x000001, "Wrong size on AT_CapturedCharacter_ApplyAppearance");
static_assert(offsetof(AT_CapturedCharacter_ApplyAppearance, ReturnValue) == 0x000000, "Member 'AT_CapturedCharacter_ApplyAppearance::ReturnValue' has a wrong offset!");

// Function AT.AT_CapturedCharacter.PlayFacialMontage
// 0x0010 (0x0010 - 0x0000)
struct AT_CapturedCharacter_PlayFacialMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_CapturedCharacter_PlayFacialMontage) == 0x000008, "Wrong alignment on AT_CapturedCharacter_PlayFacialMontage");
static_assert(sizeof(AT_CapturedCharacter_PlayFacialMontage) == 0x000010, "Wrong size on AT_CapturedCharacter_PlayFacialMontage");
static_assert(offsetof(AT_CapturedCharacter_PlayFacialMontage, Montage) == 0x000000, "Member 'AT_CapturedCharacter_PlayFacialMontage::Montage' has a wrong offset!");
static_assert(offsetof(AT_CapturedCharacter_PlayFacialMontage, ReturnValue) == 0x000008, "Member 'AT_CapturedCharacter_PlayFacialMontage::ReturnValue' has a wrong offset!");

// Function AT.AT_UICommunityBoard.SetSelectTab
// 0x0004 (0x0004 - 0x0000)
struct AT_UICommunityBoard_SetSelectTab final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommunityBoard_SetSelectTab) == 0x000004, "Wrong alignment on AT_UICommunityBoard_SetSelectTab");
static_assert(sizeof(AT_UICommunityBoard_SetSelectTab) == 0x000004, "Wrong size on AT_UICommunityBoard_SetSelectTab");
static_assert(offsetof(AT_UICommunityBoard_SetSelectTab, Index_0) == 0x000000, "Member 'AT_UICommunityBoard_SetSelectTab::Index_0' has a wrong offset!");

// Function AT.AT_UICommunityBoard_PanelFrame.OnLinkBonusChange
// 0x0010 (0x0010 - 0x0000)
struct AT_UICommunityBoard_PanelFrame_OnLinkBonusChange final
{
public:
	class FName                                   LinkBonusID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOccur;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UICommunityBoard_PanelFrame_OnLinkBonusChange) == 0x000004, "Wrong alignment on AT_UICommunityBoard_PanelFrame_OnLinkBonusChange");
static_assert(sizeof(AT_UICommunityBoard_PanelFrame_OnLinkBonusChange) == 0x000010, "Wrong size on AT_UICommunityBoard_PanelFrame_OnLinkBonusChange");
static_assert(offsetof(AT_UICommunityBoard_PanelFrame_OnLinkBonusChange, LinkBonusID) == 0x000000, "Member 'AT_UICommunityBoard_PanelFrame_OnLinkBonusChange::LinkBonusID' has a wrong offset!");
static_assert(offsetof(AT_UICommunityBoard_PanelFrame_OnLinkBonusChange, bIsOccur) == 0x000008, "Member 'AT_UICommunityBoard_PanelFrame_OnLinkBonusChange::bIsOccur' has a wrong offset!");

// Function AT.AT_UICommunityBoard_PanelFrame.SetReleaseLevel
// 0x0004 (0x0004 - 0x0000)
struct AT_UICommunityBoard_PanelFrame_SetReleaseLevel final
{
public:
	int32                                         RelLv;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommunityBoard_PanelFrame_SetReleaseLevel) == 0x000004, "Wrong alignment on AT_UICommunityBoard_PanelFrame_SetReleaseLevel");
static_assert(sizeof(AT_UICommunityBoard_PanelFrame_SetReleaseLevel) == 0x000004, "Wrong size on AT_UICommunityBoard_PanelFrame_SetReleaseLevel");
static_assert(offsetof(AT_UICommunityBoard_PanelFrame_SetReleaseLevel, RelLv) == 0x000000, "Member 'AT_UICommunityBoard_PanelFrame_SetReleaseLevel::RelLv' has a wrong offset!");

// Function AT.AT_UICommunityBoardDetail.SetCategory
// 0x0001 (0x0001 - 0x0000)
struct AT_UICommunityBoardDetail_SetCategory final
{
public:
	ECOMMUNITY_CATEGORY                           InCate;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommunityBoardDetail_SetCategory) == 0x000001, "Wrong alignment on AT_UICommunityBoardDetail_SetCategory");
static_assert(sizeof(AT_UICommunityBoardDetail_SetCategory) == 0x000001, "Wrong size on AT_UICommunityBoardDetail_SetCategory");
static_assert(offsetof(AT_UICommunityBoardDetail_SetCategory, InCate) == 0x000000, "Member 'AT_UICommunityBoardDetail_SetCategory::InCate' has a wrong offset!");

// Function AT.AT_UICommunityBoardDetail.SetPreSubLv
// 0x0008 (0x0008 - 0x0000)
struct AT_UICommunityBoardDetail_SetPreSubLv final
{
public:
	ECOMMUNITY_CATEGORY                           InCate;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InLv;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommunityBoardDetail_SetPreSubLv) == 0x000004, "Wrong alignment on AT_UICommunityBoardDetail_SetPreSubLv");
static_assert(sizeof(AT_UICommunityBoardDetail_SetPreSubLv) == 0x000008, "Wrong size on AT_UICommunityBoardDetail_SetPreSubLv");
static_assert(offsetof(AT_UICommunityBoardDetail_SetPreSubLv, InCate) == 0x000000, "Member 'AT_UICommunityBoardDetail_SetPreSubLv::InCate' has a wrong offset!");
static_assert(offsetof(AT_UICommunityBoardDetail_SetPreSubLv, InLv) == 0x000004, "Member 'AT_UICommunityBoardDetail_SetPreSubLv::InLv' has a wrong offset!");

// Function AT.ATC_CharacterActionManager.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct ATC_CharacterActionManager_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATC_CharacterActionManager_OnMontageBlendingOut) == 0x000008, "Wrong alignment on ATC_CharacterActionManager_OnMontageBlendingOut");
static_assert(sizeof(ATC_CharacterActionManager_OnMontageBlendingOut) == 0x000010, "Wrong size on ATC_CharacterActionManager_OnMontageBlendingOut");
static_assert(offsetof(ATC_CharacterActionManager_OnMontageBlendingOut, InMontage) == 0x000000, "Member 'ATC_CharacterActionManager_OnMontageBlendingOut::InMontage' has a wrong offset!");
static_assert(offsetof(ATC_CharacterActionManager_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'ATC_CharacterActionManager_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function AT.ATC_CharacterActionManager.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct ATC_CharacterActionManager_OnMontageEnded final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATC_CharacterActionManager_OnMontageEnded) == 0x000008, "Wrong alignment on ATC_CharacterActionManager_OnMontageEnded");
static_assert(sizeof(ATC_CharacterActionManager_OnMontageEnded) == 0x000010, "Wrong size on ATC_CharacterActionManager_OnMontageEnded");
static_assert(offsetof(ATC_CharacterActionManager_OnMontageEnded, InMontage) == 0x000000, "Member 'ATC_CharacterActionManager_OnMontageEnded::InMontage' has a wrong offset!");
static_assert(offsetof(ATC_CharacterActionManager_OnMontageEnded, bInterrupted) == 0x000008, "Member 'ATC_CharacterActionManager_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function AT.AT_UICommunityManager.OnLoadTexture
// 0x0018 (0x0018 - 0x0000)
struct AT_UICommunityManager_OnLoadTexture final
{
public:
	class FString                                 InPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             InTexture;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommunityManager_OnLoadTexture) == 0x000008, "Wrong alignment on AT_UICommunityManager_OnLoadTexture");
static_assert(sizeof(AT_UICommunityManager_OnLoadTexture) == 0x000018, "Wrong size on AT_UICommunityManager_OnLoadTexture");
static_assert(offsetof(AT_UICommunityManager_OnLoadTexture, InPath) == 0x000000, "Member 'AT_UICommunityManager_OnLoadTexture::InPath' has a wrong offset!");
static_assert(offsetof(AT_UICommunityManager_OnLoadTexture, InTexture) == 0x000010, "Member 'AT_UICommunityManager_OnLoadTexture::InTexture' has a wrong offset!");

// Function AT.AT_UICommunityManager.OnLoadWidget
// 0x0008 (0x0008 - 0x0000)
struct AT_UICommunityManager_OnLoadWidget final
{
public:
	class UATDataAssetUiAsyncLoad*                InLoader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommunityManager_OnLoadWidget) == 0x000008, "Wrong alignment on AT_UICommunityManager_OnLoadWidget");
static_assert(sizeof(AT_UICommunityManager_OnLoadWidget) == 0x000008, "Wrong size on AT_UICommunityManager_OnLoadWidget");
static_assert(offsetof(AT_UICommunityManager_OnLoadWidget, InLoader) == 0x000000, "Member 'AT_UICommunityManager_OnLoadWidget::InLoader' has a wrong offset!");

// Function AT.AT_UICommunityStart.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UICommunityStart_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICommunityStart_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UICommunityStart_MouseClickDecide");
static_assert(sizeof(AT_UICommunityStart_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UICommunityStart_MouseClickDecide");
static_assert(offsetof(AT_UICommunityStart_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UICommunityStart_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UICommunityStart_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UICommunityStart_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.ATSceneCapture2D.Activate
// 0x0001 (0x0001 - 0x0000)
struct ATSceneCapture2D_Activate final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSceneCapture2D_Activate) == 0x000001, "Wrong alignment on ATSceneCapture2D_Activate");
static_assert(sizeof(ATSceneCapture2D_Activate) == 0x000001, "Wrong size on ATSceneCapture2D_Activate");
static_assert(offsetof(ATSceneCapture2D_Activate, bEnable) == 0x000000, "Member 'ATSceneCapture2D_Activate::bEnable' has a wrong offset!");

// Function AT.AT_UIMapM.ChangeArea
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMapM_ChangeArea final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapM_ChangeArea) == 0x000004, "Wrong alignment on AT_UIMapM_ChangeArea");
static_assert(sizeof(AT_UIMapM_ChangeArea) == 0x000008, "Wrong size on AT_UIMapM_ChangeArea");
static_assert(offsetof(AT_UIMapM_ChangeArea, AreaName) == 0x000000, "Member 'AT_UIMapM_ChangeArea::AreaName' has a wrong offset!");

// Function AT.AT_UIMapM.IsMapTexLoaded
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMapM_IsMapTexLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapM_IsMapTexLoaded) == 0x000001, "Wrong alignment on AT_UIMapM_IsMapTexLoaded");
static_assert(sizeof(AT_UIMapM_IsMapTexLoaded) == 0x000001, "Wrong size on AT_UIMapM_IsMapTexLoaded");
static_assert(offsetof(AT_UIMapM_IsMapTexLoaded, ReturnValue) == 0x000000, "Member 'AT_UIMapM_IsMapTexLoaded::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMapM.IsMapTexValid
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMapM_IsMapTexValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapM_IsMapTexValid) == 0x000001, "Wrong alignment on AT_UIMapM_IsMapTexValid");
static_assert(sizeof(AT_UIMapM_IsMapTexValid) == 0x000001, "Wrong size on AT_UIMapM_IsMapTexValid");
static_assert(offsetof(AT_UIMapM_IsMapTexValid, ReturnValue) == 0x000000, "Member 'AT_UIMapM_IsMapTexValid::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMapM.LoadMapTexture
// 0x0010 (0x0010 - 0x0000)
struct AT_UIMapM_LoadMapTexture final
{
public:
	class FString                                 InLevelName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapM_LoadMapTexture) == 0x000008, "Wrong alignment on AT_UIMapM_LoadMapTexture");
static_assert(sizeof(AT_UIMapM_LoadMapTexture) == 0x000010, "Wrong size on AT_UIMapM_LoadMapTexture");
static_assert(offsetof(AT_UIMapM_LoadMapTexture, InLevelName) == 0x000000, "Member 'AT_UIMapM_LoadMapTexture::InLevelName' has a wrong offset!");

// Function AT.AT_UIKeyHelp.ClearKeyHelp
// 0x0001 (0x0001 - 0x0000)
struct AT_UIKeyHelp_ClearKeyHelp final
{
public:
	EKeyHelpGroup                                 InUserGroup;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIKeyHelp_ClearKeyHelp) == 0x000001, "Wrong alignment on AT_UIKeyHelp_ClearKeyHelp");
static_assert(sizeof(AT_UIKeyHelp_ClearKeyHelp) == 0x000001, "Wrong size on AT_UIKeyHelp_ClearKeyHelp");
static_assert(offsetof(AT_UIKeyHelp_ClearKeyHelp, InUserGroup) == 0x000000, "Member 'AT_UIKeyHelp_ClearKeyHelp::InUserGroup' has a wrong offset!");

// Function AT.AT_UIKeyHelp.IsKeyHelpAppeared
// 0x0001 (0x0001 - 0x0000)
struct AT_UIKeyHelp_IsKeyHelpAppeared final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIKeyHelp_IsKeyHelpAppeared) == 0x000001, "Wrong alignment on AT_UIKeyHelp_IsKeyHelpAppeared");
static_assert(sizeof(AT_UIKeyHelp_IsKeyHelpAppeared) == 0x000001, "Wrong size on AT_UIKeyHelp_IsKeyHelpAppeared");
static_assert(offsetof(AT_UIKeyHelp_IsKeyHelpAppeared, ReturnValue) == 0x000000, "Member 'AT_UIKeyHelp_IsKeyHelpAppeared::ReturnValue' has a wrong offset!");

// Function AT.AT_UIKeyHelp.IsKeyHelpExited
// 0x0001 (0x0001 - 0x0000)
struct AT_UIKeyHelp_IsKeyHelpExited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIKeyHelp_IsKeyHelpExited) == 0x000001, "Wrong alignment on AT_UIKeyHelp_IsKeyHelpExited");
static_assert(sizeof(AT_UIKeyHelp_IsKeyHelpExited) == 0x000001, "Wrong size on AT_UIKeyHelp_IsKeyHelpExited");
static_assert(offsetof(AT_UIKeyHelp_IsKeyHelpExited, ReturnValue) == 0x000000, "Member 'AT_UIKeyHelp_IsKeyHelpExited::ReturnValue' has a wrong offset!");

// Function AT.AT_UIKeyHelp.PushKeyHelp
// 0x0020 (0x0020 - 0x0000)
struct AT_UIKeyHelp_PushKeyHelp final
{
public:
	EKeyHelpId                                    InKeyHelpId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MsgId;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyHelpGroup                                 InUserGroup;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIKeyHelp_PushKeyHelp) == 0x000008, "Wrong alignment on AT_UIKeyHelp_PushKeyHelp");
static_assert(sizeof(AT_UIKeyHelp_PushKeyHelp) == 0x000020, "Wrong size on AT_UIKeyHelp_PushKeyHelp");
static_assert(offsetof(AT_UIKeyHelp_PushKeyHelp, InKeyHelpId) == 0x000000, "Member 'AT_UIKeyHelp_PushKeyHelp::InKeyHelpId' has a wrong offset!");
static_assert(offsetof(AT_UIKeyHelp_PushKeyHelp, MsgId) == 0x000008, "Member 'AT_UIKeyHelp_PushKeyHelp::MsgId' has a wrong offset!");
static_assert(offsetof(AT_UIKeyHelp_PushKeyHelp, InUserGroup) == 0x000018, "Member 'AT_UIKeyHelp_PushKeyHelp::InUserGroup' has a wrong offset!");

// Function AT.AT_UIKeyHelp.RequestKeyHelpHide
// 0x0001 (0x0001 - 0x0000)
struct AT_UIKeyHelp_RequestKeyHelpHide final
{
public:
	EKeyHelpGroup                                 InUserGroup;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIKeyHelp_RequestKeyHelpHide) == 0x000001, "Wrong alignment on AT_UIKeyHelp_RequestKeyHelpHide");
static_assert(sizeof(AT_UIKeyHelp_RequestKeyHelpHide) == 0x000001, "Wrong size on AT_UIKeyHelp_RequestKeyHelpHide");
static_assert(offsetof(AT_UIKeyHelp_RequestKeyHelpHide, InUserGroup) == 0x000000, "Member 'AT_UIKeyHelp_RequestKeyHelpHide::InUserGroup' has a wrong offset!");

// Function AT.AT_UIKeyHelp.RequestKeyHelpShow
// 0x0001 (0x0001 - 0x0000)
struct AT_UIKeyHelp_RequestKeyHelpShow final
{
public:
	EKeyHelpGroup                                 InUserGroup;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIKeyHelp_RequestKeyHelpShow) == 0x000001, "Wrong alignment on AT_UIKeyHelp_RequestKeyHelpShow");
static_assert(sizeof(AT_UIKeyHelp_RequestKeyHelpShow) == 0x000001, "Wrong size on AT_UIKeyHelp_RequestKeyHelpShow");
static_assert(offsetof(AT_UIKeyHelp_RequestKeyHelpShow, InUserGroup) == 0x000000, "Member 'AT_UIKeyHelp_RequestKeyHelpShow::InUserGroup' has a wrong offset!");

// Function AT.AT_UIKeyHelp.SetHelpMsgText
// 0x0010 (0x0010 - 0x0000)
struct AT_UIKeyHelp_SetHelpMsgText final
{
public:
	class FString                                 MsgId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIKeyHelp_SetHelpMsgText) == 0x000008, "Wrong alignment on AT_UIKeyHelp_SetHelpMsgText");
static_assert(sizeof(AT_UIKeyHelp_SetHelpMsgText) == 0x000010, "Wrong size on AT_UIKeyHelp_SetHelpMsgText");
static_assert(offsetof(AT_UIKeyHelp_SetHelpMsgText, MsgId) == 0x000000, "Member 'AT_UIKeyHelp_SetHelpMsgText::MsgId' has a wrong offset!");

// Function AT.AT_UIKeyHelp.SetHelpMsgTextTop
// 0x0010 (0x0010 - 0x0000)
struct AT_UIKeyHelp_SetHelpMsgTextTop final
{
public:
	class FString                                 MsgId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIKeyHelp_SetHelpMsgTextTop) == 0x000008, "Wrong alignment on AT_UIKeyHelp_SetHelpMsgTextTop");
static_assert(sizeof(AT_UIKeyHelp_SetHelpMsgTextTop) == 0x000010, "Wrong size on AT_UIKeyHelp_SetHelpMsgTextTop");
static_assert(offsetof(AT_UIKeyHelp_SetHelpMsgTextTop, MsgId) == 0x000000, "Member 'AT_UIKeyHelp_SetHelpMsgTextTop::MsgId' has a wrong offset!");

// Function AT.ATIngameDemoCtrl.OnIngameDemoActionEnd
// 0x0010 (0x0010 - 0x0000)
struct ATIngameDemoCtrl_OnIngameDemoActionEnd final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATIngameDemoCtrl_OnIngameDemoActionEnd) == 0x000008, "Wrong alignment on ATIngameDemoCtrl_OnIngameDemoActionEnd");
static_assert(sizeof(ATIngameDemoCtrl_OnIngameDemoActionEnd) == 0x000010, "Wrong size on ATIngameDemoCtrl_OnIngameDemoActionEnd");
static_assert(offsetof(ATIngameDemoCtrl_OnIngameDemoActionEnd, InCharacter) == 0x000000, "Member 'ATIngameDemoCtrl_OnIngameDemoActionEnd::InCharacter' has a wrong offset!");
static_assert(offsetof(ATIngameDemoCtrl_OnIngameDemoActionEnd, InActionIdPrev) == 0x000008, "Member 'ATIngameDemoCtrl_OnIngameDemoActionEnd::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATIngameDemoCtrl_OnIngameDemoActionEnd, InActionIdNext) == 0x00000C, "Member 'ATIngameDemoCtrl_OnIngameDemoActionEnd::InActionIdNext' has a wrong offset!");

// Function AT.AT_UIMapTex.OnChangePhaseTiming
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMapTex_OnChangePhaseTiming final
{
public:
	int32                                         Phase;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapTex_OnChangePhaseTiming) == 0x000004, "Wrong alignment on AT_UIMapTex_OnChangePhaseTiming");
static_assert(sizeof(AT_UIMapTex_OnChangePhaseTiming) == 0x000004, "Wrong size on AT_UIMapTex_OnChangePhaseTiming");
static_assert(offsetof(AT_UIMapTex_OnChangePhaseTiming, Phase) == 0x000000, "Member 'AT_UIMapTex_OnChangePhaseTiming::Phase' has a wrong offset!");

// Function AT.AT_UIMapTex.OnChangeQuestTiming
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMapTex_OnChangeQuestTiming final
{
public:
	class FName                                   NewName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapTex_OnChangeQuestTiming) == 0x000004, "Wrong alignment on AT_UIMapTex_OnChangeQuestTiming");
static_assert(sizeof(AT_UIMapTex_OnChangeQuestTiming) == 0x000008, "Wrong size on AT_UIMapTex_OnChangeQuestTiming");
static_assert(offsetof(AT_UIMapTex_OnChangeQuestTiming, NewName) == 0x000000, "Member 'AT_UIMapTex_OnChangeQuestTiming::NewName' has a wrong offset!");

// Function AT.AT_UIMapWorldWin.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMapWorldWin_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapWorldWin_MouseWheel) == 0x000004, "Wrong alignment on AT_UIMapWorldWin_MouseWheel");
static_assert(sizeof(AT_UIMapWorldWin_MouseWheel) == 0x000004, "Wrong size on AT_UIMapWorldWin_MouseWheel");
static_assert(offsetof(AT_UIMapWorldWin_MouseWheel, Dir) == 0x000000, "Member 'AT_UIMapWorldWin_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIMiniGameBar01.PlayChangeAnimation
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMiniGameBar01_PlayChangeAnimation final
{
public:
	float                                         StartAtTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameBar01_PlayChangeAnimation) == 0x000004, "Wrong alignment on AT_UIMiniGameBar01_PlayChangeAnimation");
static_assert(sizeof(AT_UIMiniGameBar01_PlayChangeAnimation) == 0x000004, "Wrong size on AT_UIMiniGameBar01_PlayChangeAnimation");
static_assert(offsetof(AT_UIMiniGameBar01_PlayChangeAnimation, StartAtTime) == 0x000000, "Member 'AT_UIMiniGameBar01_PlayChangeAnimation::StartAtTime' has a wrong offset!");

// Function AT.AT_UIMiniGameBar01.SetParamWithPoints
// 0x0020 (0x0020 - 0x0000)
struct AT_UIMiniGameBar01_SetParamWithPoints final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Points;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayer;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMiniGameBar01_SetParamWithPoints) == 0x000008, "Wrong alignment on AT_UIMiniGameBar01_SetParamWithPoints");
static_assert(sizeof(AT_UIMiniGameBar01_SetParamWithPoints) == 0x000020, "Wrong size on AT_UIMiniGameBar01_SetParamWithPoints");
static_assert(offsetof(AT_UIMiniGameBar01_SetParamWithPoints, Rank) == 0x000000, "Member 'AT_UIMiniGameBar01_SetParamWithPoints::Rank' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameBar01_SetParamWithPoints, Name_0) == 0x000008, "Member 'AT_UIMiniGameBar01_SetParamWithPoints::Name_0' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameBar01_SetParamWithPoints, Points) == 0x000018, "Member 'AT_UIMiniGameBar01_SetParamWithPoints::Points' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameBar01_SetParamWithPoints, IsPlayer) == 0x00001C, "Member 'AT_UIMiniGameBar01_SetParamWithPoints::IsPlayer' has a wrong offset!");

// Function AT.AT_UIMiniGameBar01.SetParamWithTime
// 0x0028 (0x0028 - 0x0000)
struct AT_UIMiniGameBar01_SetParamWithTime final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              Record;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShine;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIMiniGameBar01_SetParamWithTime) == 0x000008, "Wrong alignment on AT_UIMiniGameBar01_SetParamWithTime");
static_assert(sizeof(AT_UIMiniGameBar01_SetParamWithTime) == 0x000028, "Wrong size on AT_UIMiniGameBar01_SetParamWithTime");
static_assert(offsetof(AT_UIMiniGameBar01_SetParamWithTime, Rank) == 0x000000, "Member 'AT_UIMiniGameBar01_SetParamWithTime::Rank' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameBar01_SetParamWithTime, Name_0) == 0x000008, "Member 'AT_UIMiniGameBar01_SetParamWithTime::Name_0' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameBar01_SetParamWithTime, Record) == 0x000018, "Member 'AT_UIMiniGameBar01_SetParamWithTime::Record' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameBar01_SetParamWithTime, bIsShine) == 0x000020, "Member 'AT_UIMiniGameBar01_SetParamWithTime::bIsShine' has a wrong offset!");

// Function AT.AT_UICookingComplete.OpenDevelop
// 0x0018 (0x0018 - 0x0000)
struct AT_UICookingComplete_OpenDevelop final
{
public:
	class FString                                 TargetMsgId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLevelUp;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UICookingComplete_OpenDevelop) == 0x000008, "Wrong alignment on AT_UICookingComplete_OpenDevelop");
static_assert(sizeof(AT_UICookingComplete_OpenDevelop) == 0x000018, "Wrong size on AT_UICookingComplete_OpenDevelop");
static_assert(offsetof(AT_UICookingComplete_OpenDevelop, TargetMsgId) == 0x000000, "Member 'AT_UICookingComplete_OpenDevelop::TargetMsgId' has a wrong offset!");
static_assert(offsetof(AT_UICookingComplete_OpenDevelop, Grade) == 0x000010, "Member 'AT_UICookingComplete_OpenDevelop::Grade' has a wrong offset!");
static_assert(offsetof(AT_UICookingComplete_OpenDevelop, bLevelUp) == 0x000014, "Member 'AT_UICookingComplete_OpenDevelop::bLevelUp' has a wrong offset!");

// Function AT.Projectile_Cpl003SkillMakoho.HitRootSphere
// 0x0088 (0x0088 - 0x0000)
struct Projectile_Cpl003SkillMakoho_HitRootSphere final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl003SkillMakoho_HitRootSphere) == 0x000008, "Wrong alignment on Projectile_Cpl003SkillMakoho_HitRootSphere");
static_assert(sizeof(Projectile_Cpl003SkillMakoho_HitRootSphere) == 0x000088, "Wrong size on Projectile_Cpl003SkillMakoho_HitRootSphere");
static_assert(offsetof(Projectile_Cpl003SkillMakoho_HitRootSphere, ImpactResult) == 0x000000, "Member 'Projectile_Cpl003SkillMakoho_HitRootSphere::ImpactResult' has a wrong offset!");

// Function AT.AT_UICookingEffect.SetCookRank
// 0x0004 (0x0004 - 0x0000)
struct AT_UICookingEffect_SetCookRank final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingEffect_SetCookRank) == 0x000004, "Wrong alignment on AT_UICookingEffect_SetCookRank");
static_assert(sizeof(AT_UICookingEffect_SetCookRank) == 0x000004, "Wrong size on AT_UICookingEffect_SetCookRank");
static_assert(offsetof(AT_UICookingEffect_SetCookRank, Rank) == 0x000000, "Member 'AT_UICookingEffect_SetCookRank::Rank' has a wrong offset!");

// Function AT.AT_UICookingEffect.SetEffectType
// 0x0008 (0x0008 - 0x0000)
struct AT_UICookingEffect_SetEffectType final
{
public:
	int32                                         SmlType;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEFFECT_TYPE                                  InEffType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UICookingEffect_SetEffectType) == 0x000004, "Wrong alignment on AT_UICookingEffect_SetEffectType");
static_assert(sizeof(AT_UICookingEffect_SetEffectType) == 0x000008, "Wrong size on AT_UICookingEffect_SetEffectType");
static_assert(offsetof(AT_UICookingEffect_SetEffectType, SmlType) == 0x000000, "Member 'AT_UICookingEffect_SetEffectType::SmlType' has a wrong offset!");
static_assert(offsetof(AT_UICookingEffect_SetEffectType, InEffType) == 0x000004, "Member 'AT_UICookingEffect_SetEffectType::InEffType' has a wrong offset!");

// Function AT.AT_UICookingMenu.Close
// 0x0001 (0x0001 - 0x0000)
struct AT_UICookingMenu_Close final
{
public:
	bool                                          bIsCourse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingMenu_Close) == 0x000001, "Wrong alignment on AT_UICookingMenu_Close");
static_assert(sizeof(AT_UICookingMenu_Close) == 0x000001, "Wrong size on AT_UICookingMenu_Close");
static_assert(offsetof(AT_UICookingMenu_Close, bIsCourse) == 0x000000, "Member 'AT_UICookingMenu_Close::bIsCourse' has a wrong offset!");

// Function AT.AT_UICookingMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UICookingMenu_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingMenu_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UICookingMenu_MouseClickDecide");
static_assert(sizeof(AT_UICookingMenu_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UICookingMenu_MouseClickDecide");
static_assert(offsetof(AT_UICookingMenu_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UICookingMenu_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UICookingMenu_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UICookingMenu_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UICookingMenu.OnCookDemoEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UICookingMenu_OnCookDemoEnd final
{
public:
	int8                                          CutNo;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingMenu_OnCookDemoEnd) == 0x000001, "Wrong alignment on AT_UICookingMenu_OnCookDemoEnd");
static_assert(sizeof(AT_UICookingMenu_OnCookDemoEnd) == 0x000001, "Wrong size on AT_UICookingMenu_OnCookDemoEnd");
static_assert(offsetof(AT_UICookingMenu_OnCookDemoEnd, CutNo) == 0x000000, "Member 'AT_UICookingMenu_OnCookDemoEnd::CutNo' has a wrong offset!");

// Function AT.AT_UICookingMenu.OnCookDemoStart
// 0x0001 (0x0001 - 0x0000)
struct AT_UICookingMenu_OnCookDemoStart final
{
public:
	int8                                          CutNo;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingMenu_OnCookDemoStart) == 0x000001, "Wrong alignment on AT_UICookingMenu_OnCookDemoStart");
static_assert(sizeof(AT_UICookingMenu_OnCookDemoStart) == 0x000001, "Wrong size on AT_UICookingMenu_OnCookDemoStart");
static_assert(offsetof(AT_UICookingMenu_OnCookDemoStart, CutNo) == 0x000000, "Member 'AT_UICookingMenu_OnCookDemoStart::CutNo' has a wrong offset!");

// Function AT.AT_UICookingMenu.Open
// 0x0001 (0x0001 - 0x0000)
struct AT_UICookingMenu_Open final
{
public:
	ECOOKING_ACCESSER                             InAccesser;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingMenu_Open) == 0x000001, "Wrong alignment on AT_UICookingMenu_Open");
static_assert(sizeof(AT_UICookingMenu_Open) == 0x000001, "Wrong size on AT_UICookingMenu_Open");
static_assert(offsetof(AT_UICookingMenu_Open, InAccesser) == 0x000000, "Member 'AT_UICookingMenu_Open::InAccesser' has a wrong offset!");

// Function AT.AT_UICookingMenu.SetSelectTab
// 0x0004 (0x0004 - 0x0000)
struct AT_UICookingMenu_SetSelectTab final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingMenu_SetSelectTab) == 0x000004, "Wrong alignment on AT_UICookingMenu_SetSelectTab");
static_assert(sizeof(AT_UICookingMenu_SetSelectTab) == 0x000004, "Wrong size on AT_UICookingMenu_SetSelectTab");
static_assert(offsetof(AT_UICookingMenu_SetSelectTab, Index_0) == 0x000000, "Member 'AT_UICookingMenu_SetSelectTab::Index_0' has a wrong offset!");

// Function AT.AT_UICookingMenuShopList.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UICookingMenuShopList_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingMenuShopList_MouseWheel) == 0x000004, "Wrong alignment on AT_UICookingMenuShopList_MouseWheel");
static_assert(sizeof(AT_UICookingMenuShopList_MouseWheel) == 0x000004, "Wrong size on AT_UICookingMenuShopList_MouseWheel");
static_assert(offsetof(AT_UICookingMenuShopList_MouseWheel, Dir) == 0x000000, "Member 'AT_UICookingMenuShopList_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UICookingMenuShopList.OnLoadedOverWriteParam
// 0x0008 (0x0008 - 0x0000)
struct AT_UICookingMenuShopList_OnLoadedOverWriteParam final
{
public:
	class UATDataAssetUiAsyncLoad*                LoadOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingMenuShopList_OnLoadedOverWriteParam) == 0x000008, "Wrong alignment on AT_UICookingMenuShopList_OnLoadedOverWriteParam");
static_assert(sizeof(AT_UICookingMenuShopList_OnLoadedOverWriteParam) == 0x000008, "Wrong size on AT_UICookingMenuShopList_OnLoadedOverWriteParam");
static_assert(offsetof(AT_UICookingMenuShopList_OnLoadedOverWriteParam, LoadOwner) == 0x000000, "Member 'AT_UICookingMenuShopList_OnLoadedOverWriteParam::LoadOwner' has a wrong offset!");

// Function AT.ATPlatformFeatures.EnableRecording
// 0x0001 (0x0001 - 0x0000)
struct ATPlatformFeatures_EnableRecording final
{
public:
	bool                                          bEnableRecording;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlatformFeatures_EnableRecording) == 0x000001, "Wrong alignment on ATPlatformFeatures_EnableRecording");
static_assert(sizeof(ATPlatformFeatures_EnableRecording) == 0x000001, "Wrong size on ATPlatformFeatures_EnableRecording");
static_assert(offsetof(ATPlatformFeatures_EnableRecording, bEnableRecording) == 0x000000, "Member 'ATPlatformFeatures_EnableRecording::bEnableRecording' has a wrong offset!");

// Function AT.ATPlatformFeatures.EnableScreenshots
// 0x0001 (0x0001 - 0x0000)
struct ATPlatformFeatures_EnableScreenshots final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlatformFeatures_EnableScreenshots) == 0x000001, "Wrong alignment on ATPlatformFeatures_EnableScreenshots");
static_assert(sizeof(ATPlatformFeatures_EnableScreenshots) == 0x000001, "Wrong size on ATPlatformFeatures_EnableScreenshots");
static_assert(offsetof(ATPlatformFeatures_EnableScreenshots, bEnable) == 0x000000, "Member 'ATPlatformFeatures_EnableScreenshots::bEnable' has a wrong offset!");

// Function AT.ATPlatformFeatures.EnableSharing
// 0x0001 (0x0001 - 0x0000)
struct ATPlatformFeatures_EnableSharing final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlatformFeatures_EnableSharing) == 0x000001, "Wrong alignment on ATPlatformFeatures_EnableSharing");
static_assert(sizeof(ATPlatformFeatures_EnableSharing) == 0x000001, "Wrong size on ATPlatformFeatures_EnableSharing");
static_assert(offsetof(ATPlatformFeatures_EnableSharing, bEnable) == 0x000000, "Member 'ATPlatformFeatures_EnableSharing::bEnable' has a wrong offset!");

// Function AT.ATPlatformFeatures.EnableStreaming
// 0x0001 (0x0001 - 0x0000)
struct ATPlatformFeatures_EnableStreaming final
{
public:
	bool                                          bEnableStreaming;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlatformFeatures_EnableStreaming) == 0x000001, "Wrong alignment on ATPlatformFeatures_EnableStreaming");
static_assert(sizeof(ATPlatformFeatures_EnableStreaming) == 0x000001, "Wrong size on ATPlatformFeatures_EnableStreaming");
static_assert(offsetof(ATPlatformFeatures_EnableStreaming, bEnableStreaming) == 0x000000, "Member 'ATPlatformFeatures_EnableStreaming::bEnableStreaming' has a wrong offset!");

// Function AT.ATPlatformFeatures.IsEnabledRecording
// 0x0001 (0x0001 - 0x0000)
struct ATPlatformFeatures_IsEnabledRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlatformFeatures_IsEnabledRecording) == 0x000001, "Wrong alignment on ATPlatformFeatures_IsEnabledRecording");
static_assert(sizeof(ATPlatformFeatures_IsEnabledRecording) == 0x000001, "Wrong size on ATPlatformFeatures_IsEnabledRecording");
static_assert(offsetof(ATPlatformFeatures_IsEnabledRecording, ReturnValue) == 0x000000, "Member 'ATPlatformFeatures_IsEnabledRecording::ReturnValue' has a wrong offset!");

// Function AT.ATPlatformFeatures.IsEnabledScreenshots
// 0x0001 (0x0001 - 0x0000)
struct ATPlatformFeatures_IsEnabledScreenshots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlatformFeatures_IsEnabledScreenshots) == 0x000001, "Wrong alignment on ATPlatformFeatures_IsEnabledScreenshots");
static_assert(sizeof(ATPlatformFeatures_IsEnabledScreenshots) == 0x000001, "Wrong size on ATPlatformFeatures_IsEnabledScreenshots");
static_assert(offsetof(ATPlatformFeatures_IsEnabledScreenshots, ReturnValue) == 0x000000, "Member 'ATPlatformFeatures_IsEnabledScreenshots::ReturnValue' has a wrong offset!");

// Function AT.ATPlatformFeatures.IsEnabledSharing
// 0x0001 (0x0001 - 0x0000)
struct ATPlatformFeatures_IsEnabledSharing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlatformFeatures_IsEnabledSharing) == 0x000001, "Wrong alignment on ATPlatformFeatures_IsEnabledSharing");
static_assert(sizeof(ATPlatformFeatures_IsEnabledSharing) == 0x000001, "Wrong size on ATPlatformFeatures_IsEnabledSharing");
static_assert(offsetof(ATPlatformFeatures_IsEnabledSharing, ReturnValue) == 0x000000, "Member 'ATPlatformFeatures_IsEnabledSharing::ReturnValue' has a wrong offset!");

// Function AT.ATPlatformFeatures.IsEnabledStreaming
// 0x0001 (0x0001 - 0x0000)
struct ATPlatformFeatures_IsEnabledStreaming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlatformFeatures_IsEnabledStreaming) == 0x000001, "Wrong alignment on ATPlatformFeatures_IsEnabledStreaming");
static_assert(sizeof(ATPlatformFeatures_IsEnabledStreaming) == 0x000001, "Wrong size on ATPlatformFeatures_IsEnabledStreaming");
static_assert(offsetof(ATPlatformFeatures_IsEnabledStreaming, ReturnValue) == 0x000000, "Member 'ATPlatformFeatures_IsEnabledStreaming::ReturnValue' has a wrong offset!");

// Function AT.AT_UICookingResult.DebugRequest
// 0x0004 (0x0004 - 0x0000)
struct AT_UICookingResult_DebugRequest final
{
public:
	int32                                         InNo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UICookingResult_DebugRequest) == 0x000004, "Wrong alignment on AT_UICookingResult_DebugRequest");
static_assert(sizeof(AT_UICookingResult_DebugRequest) == 0x000004, "Wrong size on AT_UICookingResult_DebugRequest");
static_assert(offsetof(AT_UICookingResult_DebugRequest, InNo) == 0x000000, "Member 'AT_UICookingResult_DebugRequest::InNo' has a wrong offset!");

// Function AT.AT_UIDamagePop.AnimTextSetting
// 0x0010 (0x0010 - 0x0000)
struct AT_UIDamagePop_AnimTextSetting final
{
public:
	int32                                         InDamageValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      InNumMaterial;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIDamagePop_AnimTextSetting) == 0x000008, "Wrong alignment on AT_UIDamagePop_AnimTextSetting");
static_assert(sizeof(AT_UIDamagePop_AnimTextSetting) == 0x000010, "Wrong size on AT_UIDamagePop_AnimTextSetting");
static_assert(offsetof(AT_UIDamagePop_AnimTextSetting, InDamageValue) == 0x000000, "Member 'AT_UIDamagePop_AnimTextSetting::InDamageValue' has a wrong offset!");
static_assert(offsetof(AT_UIDamagePop_AnimTextSetting, InNumMaterial) == 0x000008, "Member 'AT_UIDamagePop_AnimTextSetting::InNumMaterial' has a wrong offset!");

// Function AT.AT_UIDamagePop.SetVisibleAndTickable
// 0x0001 (0x0001 - 0x0000)
struct AT_UIDamagePop_SetVisibleAndTickable final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIDamagePop_SetVisibleAndTickable) == 0x000001, "Wrong alignment on AT_UIDamagePop_SetVisibleAndTickable");
static_assert(sizeof(AT_UIDamagePop_SetVisibleAndTickable) == 0x000001, "Wrong size on AT_UIDamagePop_SetVisibleAndTickable");
static_assert(offsetof(AT_UIDamagePop_SetVisibleAndTickable, bVisible) == 0x000000, "Member 'AT_UIDamagePop_SetVisibleAndTickable::bVisible' has a wrong offset!");

// Function AT.ATPlayerAutoControlComponent.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerAutoControlComponent_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on ATPlayerAutoControlComponent_OnBeginOverlap");
static_assert(sizeof(ATPlayerAutoControlComponent_OnBeginOverlap) == 0x000010, "Wrong size on ATPlayerAutoControlComponent_OnBeginOverlap");
static_assert(offsetof(ATPlayerAutoControlComponent_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'ATPlayerAutoControlComponent_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ATPlayerAutoControlComponent_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function AT.ATPlayerAutoControlComponent.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerAutoControlComponent_OnEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlComponent_OnEndOverlap) == 0x000008, "Wrong alignment on ATPlayerAutoControlComponent_OnEndOverlap");
static_assert(sizeof(ATPlayerAutoControlComponent_OnEndOverlap) == 0x000010, "Wrong size on ATPlayerAutoControlComponent_OnEndOverlap");
static_assert(offsetof(ATPlayerAutoControlComponent_OnEndOverlap, OverlappedActor) == 0x000000, "Member 'ATPlayerAutoControlComponent_OnEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'ATPlayerAutoControlComponent_OnEndOverlap::OtherActor' has a wrong offset!");

// Function AT.ATPlayerAutoControlComponent.QuestChangePhaseTiming
// 0x0004 (0x0004 - 0x0000)
struct ATPlayerAutoControlComponent_QuestChangePhaseTiming final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlComponent_QuestChangePhaseTiming) == 0x000004, "Wrong alignment on ATPlayerAutoControlComponent_QuestChangePhaseTiming");
static_assert(sizeof(ATPlayerAutoControlComponent_QuestChangePhaseTiming) == 0x000004, "Wrong size on ATPlayerAutoControlComponent_QuestChangePhaseTiming");
static_assert(offsetof(ATPlayerAutoControlComponent_QuestChangePhaseTiming, NextPhase) == 0x000000, "Member 'ATPlayerAutoControlComponent_QuestChangePhaseTiming::NextPhase' has a wrong offset!");

// Function AT.AT_UIMiniGameTime.SetTime
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMiniGameTime_SetTime final
{
public:
	struct FTimespan                              TimeLimit;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameTime_SetTime) == 0x000008, "Wrong alignment on AT_UIMiniGameTime_SetTime");
static_assert(sizeof(AT_UIMiniGameTime_SetTime) == 0x000008, "Wrong size on AT_UIMiniGameTime_SetTime");
static_assert(offsetof(AT_UIMiniGameTime_SetTime, TimeLimit) == 0x000000, "Member 'AT_UIMiniGameTime_SetTime::TimeLimit' has a wrong offset!");

// Function AT.ATPillarObject.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct ATPillarObject_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPillarObject_OnComponentHit) == 0x000008, "Wrong alignment on ATPillarObject_OnComponentHit");
static_assert(sizeof(ATPillarObject_OnComponentHit) == 0x0000B0, "Wrong size on ATPillarObject_OnComponentHit");
static_assert(offsetof(ATPillarObject_OnComponentHit, HitComponent) == 0x000000, "Member 'ATPillarObject_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(ATPillarObject_OnComponentHit, OtherActor) == 0x000008, "Member 'ATPillarObject_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(ATPillarObject_OnComponentHit, OtherComp) == 0x000010, "Member 'ATPillarObject_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(ATPillarObject_OnComponentHit, NormalImpulse) == 0x000018, "Member 'ATPillarObject_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ATPillarObject_OnComponentHit, Hit) == 0x000028, "Member 'ATPillarObject_OnComponentHit::Hit' has a wrong offset!");

// Function AT.ATPillarObject.OnParticleSystemFinished
// 0x0008 (0x0008 - 0x0000)
struct ATPillarObject_OnParticleSystemFinished final
{
public:
	class UParticleSystemComponent*               FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPillarObject_OnParticleSystemFinished) == 0x000008, "Wrong alignment on ATPillarObject_OnParticleSystemFinished");
static_assert(sizeof(ATPillarObject_OnParticleSystemFinished) == 0x000008, "Wrong size on ATPillarObject_OnParticleSystemFinished");
static_assert(offsetof(ATPillarObject_OnParticleSystemFinished, FinishedComponent) == 0x000000, "Member 'ATPillarObject_OnParticleSystemFinished::FinishedComponent' has a wrong offset!");

// Function AT.AT_UIEncounterDirectionChild.SetEncounterDirectionType
// 0x0001 (0x0001 - 0x0000)
struct AT_UIEncounterDirectionChild_SetEncounterDirectionType final
{
public:
	EEncounterDirectionType                       Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIEncounterDirectionChild_SetEncounterDirectionType) == 0x000001, "Wrong alignment on AT_UIEncounterDirectionChild_SetEncounterDirectionType");
static_assert(sizeof(AT_UIEncounterDirectionChild_SetEncounterDirectionType) == 0x000001, "Wrong size on AT_UIEncounterDirectionChild_SetEncounterDirectionType");
static_assert(offsetof(AT_UIEncounterDirectionChild_SetEncounterDirectionType, Type) == 0x000000, "Member 'AT_UIEncounterDirectionChild_SetEncounterDirectionType::Type' has a wrong offset!");

// Function AT.ATEventBattleCounterJustDodgeCount.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct ATEventBattleCounterJustDodgeCount_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleCounterJustDodgeCount_OnActionChange) == 0x000008, "Wrong alignment on ATEventBattleCounterJustDodgeCount_OnActionChange");
static_assert(sizeof(ATEventBattleCounterJustDodgeCount_OnActionChange) == 0x000010, "Wrong size on ATEventBattleCounterJustDodgeCount_OnActionChange");
static_assert(offsetof(ATEventBattleCounterJustDodgeCount_OnActionChange, InCharacter) == 0x000000, "Member 'ATEventBattleCounterJustDodgeCount_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(ATEventBattleCounterJustDodgeCount_OnActionChange, InActionIdPrev) == 0x000008, "Member 'ATEventBattleCounterJustDodgeCount_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATEventBattleCounterJustDodgeCount_OnActionChange, InActionIdNext) == 0x00000C, "Member 'ATEventBattleCounterJustDodgeCount_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.AT_UIStateIconCtnBase.DebugAddStateIcon
// 0x0018 (0x0018 - 0x0000)
struct AT_UIStateIconCtnBase_DebugAddStateIcon final
{
public:
	TArray<E_STATE_ICON_TYPE>                     InBuff;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStateIconCtnBase_DebugAddStateIcon) == 0x000008, "Wrong alignment on AT_UIStateIconCtnBase_DebugAddStateIcon");
static_assert(sizeof(AT_UIStateIconCtnBase_DebugAddStateIcon) == 0x000018, "Wrong size on AT_UIStateIconCtnBase_DebugAddStateIcon");
static_assert(offsetof(AT_UIStateIconCtnBase_DebugAddStateIcon, InBuff) == 0x000000, "Member 'AT_UIStateIconCtnBase_DebugAddStateIcon::InBuff' has a wrong offset!");
static_assert(offsetof(AT_UIStateIconCtnBase_DebugAddStateIcon, Time) == 0x000010, "Member 'AT_UIStateIconCtnBase_DebugAddStateIcon::Time' has a wrong offset!");

// Function AT.AT_UIStateIconCtnBase.DebugRemoveStateIcon
// 0x0018 (0x0018 - 0x0000)
struct AT_UIStateIconCtnBase_DebugRemoveStateIcon final
{
public:
	TArray<E_STATE_ICON_TYPE>                     InBuff;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStateIconCtnBase_DebugRemoveStateIcon) == 0x000008, "Wrong alignment on AT_UIStateIconCtnBase_DebugRemoveStateIcon");
static_assert(sizeof(AT_UIStateIconCtnBase_DebugRemoveStateIcon) == 0x000018, "Wrong size on AT_UIStateIconCtnBase_DebugRemoveStateIcon");
static_assert(offsetof(AT_UIStateIconCtnBase_DebugRemoveStateIcon, InBuff) == 0x000000, "Member 'AT_UIStateIconCtnBase_DebugRemoveStateIcon::InBuff' has a wrong offset!");
static_assert(offsetof(AT_UIStateIconCtnBase_DebugRemoveStateIcon, Time) == 0x000010, "Member 'AT_UIStateIconCtnBase_DebugRemoveStateIcon::Time' has a wrong offset!");

// Function AT.AT_UIStateIconCtnBase.DebugTargetChange
// 0x0010 (0x0010 - 0x0000)
struct AT_UIStateIconCtnBase_DebugTargetChange final
{
public:
	TArray<E_STATE_ICON_TYPE>                     InBuffList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIconCtnBase_DebugTargetChange) == 0x000008, "Wrong alignment on AT_UIStateIconCtnBase_DebugTargetChange");
static_assert(sizeof(AT_UIStateIconCtnBase_DebugTargetChange) == 0x000010, "Wrong size on AT_UIStateIconCtnBase_DebugTargetChange");
static_assert(offsetof(AT_UIStateIconCtnBase_DebugTargetChange, InBuffList) == 0x000000, "Member 'AT_UIStateIconCtnBase_DebugTargetChange::InBuffList' has a wrong offset!");

// Function AT.AT_UIEnemyStateIcon.OnPlayerChange
// 0x0008 (0x0008 - 0x0000)
struct AT_UIEnemyStateIcon_OnPlayerChange final
{
public:
	class AAT_Character*                          InPlayerChar;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIEnemyStateIcon_OnPlayerChange) == 0x000008, "Wrong alignment on AT_UIEnemyStateIcon_OnPlayerChange");
static_assert(sizeof(AT_UIEnemyStateIcon_OnPlayerChange) == 0x000008, "Wrong size on AT_UIEnemyStateIcon_OnPlayerChange");
static_assert(offsetof(AT_UIEnemyStateIcon_OnPlayerChange, InPlayerChar) == 0x000000, "Member 'AT_UIEnemyStateIcon_OnPlayerChange::InPlayerChar' has a wrong offset!");

// Function AT.AT_UIEnemyStateIcon.OnTargetChange
// 0x0008 (0x0008 - 0x0000)
struct AT_UIEnemyStateIcon_OnTargetChange final
{
public:
	class AActor*                                 InEnemy;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIEnemyStateIcon_OnTargetChange) == 0x000008, "Wrong alignment on AT_UIEnemyStateIcon_OnTargetChange");
static_assert(sizeof(AT_UIEnemyStateIcon_OnTargetChange) == 0x000008, "Wrong size on AT_UIEnemyStateIcon_OnTargetChange");
static_assert(offsetof(AT_UIEnemyStateIcon_OnTargetChange, InEnemy) == 0x000000, "Member 'AT_UIEnemyStateIcon_OnTargetChange::InEnemy' has a wrong offset!");

// Function AT.AT_UINotificationManager.OnBattleEscapeCutinEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UINotificationManager_OnBattleEscapeCutinEnd final
{
public:
	EBattleCutin_AnimType                         InAnimType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UINotificationManager_OnBattleEscapeCutinEnd) == 0x000001, "Wrong alignment on AT_UINotificationManager_OnBattleEscapeCutinEnd");
static_assert(sizeof(AT_UINotificationManager_OnBattleEscapeCutinEnd) == 0x000001, "Wrong size on AT_UINotificationManager_OnBattleEscapeCutinEnd");
static_assert(offsetof(AT_UINotificationManager_OnBattleEscapeCutinEnd, InAnimType) == 0x000000, "Member 'AT_UINotificationManager_OnBattleEscapeCutinEnd::InAnimType' has a wrong offset!");

// Function AT.AT_UINotificationManager.OnBattleFinishCutinEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UINotificationManager_OnBattleFinishCutinEnd final
{
public:
	EBattleCutin_AnimType                         InAnimType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UINotificationManager_OnBattleFinishCutinEnd) == 0x000001, "Wrong alignment on AT_UINotificationManager_OnBattleFinishCutinEnd");
static_assert(sizeof(AT_UINotificationManager_OnBattleFinishCutinEnd) == 0x000001, "Wrong size on AT_UINotificationManager_OnBattleFinishCutinEnd");
static_assert(offsetof(AT_UINotificationManager_OnBattleFinishCutinEnd, InAnimType) == 0x000000, "Member 'AT_UINotificationManager_OnBattleFinishCutinEnd::InAnimType' has a wrong offset!");

// Function AT.ATExterminationBastionBase.OnEventBattleEnd
// 0x0108 (0x0108 - 0x0000)
struct ATExterminationBastionBase_OnEventBattleEnd final
{
public:
	struct FEventParam                            InParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATExterminationBastionBase_OnEventBattleEnd) == 0x000008, "Wrong alignment on ATExterminationBastionBase_OnEventBattleEnd");
static_assert(sizeof(ATExterminationBastionBase_OnEventBattleEnd) == 0x000108, "Wrong size on ATExterminationBastionBase_OnEventBattleEnd");
static_assert(offsetof(ATExterminationBastionBase_OnEventBattleEnd, InParam) == 0x000000, "Member 'ATExterminationBastionBase_OnEventBattleEnd::InParam' has a wrong offset!");

// Function AT.ATExterminationBastionBase.OnEventBattleStart
// 0x0108 (0x0108 - 0x0000)
struct ATExterminationBastionBase_OnEventBattleStart final
{
public:
	struct FEventParam                            InParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATExterminationBastionBase_OnEventBattleStart) == 0x000008, "Wrong alignment on ATExterminationBastionBase_OnEventBattleStart");
static_assert(sizeof(ATExterminationBastionBase_OnEventBattleStart) == 0x000108, "Wrong size on ATExterminationBastionBase_OnEventBattleStart");
static_assert(offsetof(ATExterminationBastionBase_OnEventBattleStart, InParam) == 0x000000, "Member 'ATExterminationBastionBase_OnEventBattleStart::InParam' has a wrong offset!");

// Function AT.ATExterminationBastionBase.OnHitCollision
// 0x00A8 (0x00A8 - 0x0000)
struct ATExterminationBastionBase_OnHitCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATExterminationBastionBase_OnHitCollision) == 0x000008, "Wrong alignment on ATExterminationBastionBase_OnHitCollision");
static_assert(sizeof(ATExterminationBastionBase_OnHitCollision) == 0x0000A8, "Wrong size on ATExterminationBastionBase_OnHitCollision");
static_assert(offsetof(ATExterminationBastionBase_OnHitCollision, OverlappedComponent) == 0x000000, "Member 'ATExterminationBastionBase_OnHitCollision::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATExterminationBastionBase_OnHitCollision, OtherActor) == 0x000008, "Member 'ATExterminationBastionBase_OnHitCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(ATExterminationBastionBase_OnHitCollision, OtherComp) == 0x000010, "Member 'ATExterminationBastionBase_OnHitCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(ATExterminationBastionBase_OnHitCollision, OtherBodyIndex) == 0x000018, "Member 'ATExterminationBastionBase_OnHitCollision::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ATExterminationBastionBase_OnHitCollision, bFromSweep) == 0x00001C, "Member 'ATExterminationBastionBase_OnHitCollision::bFromSweep' has a wrong offset!");
static_assert(offsetof(ATExterminationBastionBase_OnHitCollision, SweepResult) == 0x000020, "Member 'ATExterminationBastionBase_OnHitCollision::SweepResult' has a wrong offset!");

// Function AT.AT_UIFieldManager.GetUIFieldManagerInstance
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldManager_GetUIFieldManagerInstance final
{
public:
	class UAT_UIFieldManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_GetUIFieldManagerInstance) == 0x000008, "Wrong alignment on AT_UIFieldManager_GetUIFieldManagerInstance");
static_assert(sizeof(AT_UIFieldManager_GetUIFieldManagerInstance) == 0x000008, "Wrong size on AT_UIFieldManager_GetUIFieldManagerInstance");
static_assert(offsetof(AT_UIFieldManager_GetUIFieldManagerInstance, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_GetUIFieldManagerInstance::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.AddEventIcon
// 0x0018 (0x0018 - 0x0000)
struct AT_UIFieldManager_AddEventIcon final
{
public:
	EMapIcon                                      InIconType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldManager_AddEventIcon) == 0x000008, "Wrong alignment on AT_UIFieldManager_AddEventIcon");
static_assert(sizeof(AT_UIFieldManager_AddEventIcon) == 0x000018, "Wrong size on AT_UIFieldManager_AddEventIcon");
static_assert(offsetof(AT_UIFieldManager_AddEventIcon, InIconType) == 0x000000, "Member 'AT_UIFieldManager_AddEventIcon::InIconType' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_AddEventIcon, InOwner) == 0x000008, "Member 'AT_UIFieldManager_AddEventIcon::InOwner' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_AddEventIcon, CircleRadius) == 0x000010, "Member 'AT_UIFieldManager_AddEventIcon::CircleRadius' has a wrong offset!");

// Function AT.AT_UIFieldManager.BeginNextPreviewFadeIn
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldManager_BeginNextPreviewFadeIn final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMG_FADE_COLOR                               FadeColor;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldManager_BeginNextPreviewFadeIn) == 0x000004, "Wrong alignment on AT_UIFieldManager_BeginNextPreviewFadeIn");
static_assert(sizeof(AT_UIFieldManager_BeginNextPreviewFadeIn) == 0x000008, "Wrong size on AT_UIFieldManager_BeginNextPreviewFadeIn");
static_assert(offsetof(AT_UIFieldManager_BeginNextPreviewFadeIn, Duration) == 0x000000, "Member 'AT_UIFieldManager_BeginNextPreviewFadeIn::Duration' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_BeginNextPreviewFadeIn, FadeColor) == 0x000004, "Member 'AT_UIFieldManager_BeginNextPreviewFadeIn::FadeColor' has a wrong offset!");

// Function AT.AT_UIFieldManager.BeginNextPreviewFadeOut
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldManager_BeginNextPreviewFadeOut final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMG_FADE_COLOR                               FadeColor;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldManager_BeginNextPreviewFadeOut) == 0x000004, "Wrong alignment on AT_UIFieldManager_BeginNextPreviewFadeOut");
static_assert(sizeof(AT_UIFieldManager_BeginNextPreviewFadeOut) == 0x000008, "Wrong size on AT_UIFieldManager_BeginNextPreviewFadeOut");
static_assert(offsetof(AT_UIFieldManager_BeginNextPreviewFadeOut, Duration) == 0x000000, "Member 'AT_UIFieldManager_BeginNextPreviewFadeOut::Duration' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_BeginNextPreviewFadeOut, FadeColor) == 0x000004, "Member 'AT_UIFieldManager_BeginNextPreviewFadeOut::FadeColor' has a wrong offset!");

// Function AT.AT_UIFieldManager.BeginQuestImgFadeIn
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldManager_BeginQuestImgFadeIn final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMG_FADE_COLOR                               FadeColor;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldManager_BeginQuestImgFadeIn) == 0x000004, "Wrong alignment on AT_UIFieldManager_BeginQuestImgFadeIn");
static_assert(sizeof(AT_UIFieldManager_BeginQuestImgFadeIn) == 0x000008, "Wrong size on AT_UIFieldManager_BeginQuestImgFadeIn");
static_assert(offsetof(AT_UIFieldManager_BeginQuestImgFadeIn, Duration) == 0x000000, "Member 'AT_UIFieldManager_BeginQuestImgFadeIn::Duration' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_BeginQuestImgFadeIn, FadeColor) == 0x000004, "Member 'AT_UIFieldManager_BeginQuestImgFadeIn::FadeColor' has a wrong offset!");

// Function AT.AT_UIFieldManager.BeginQuestImgFadeOut
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldManager_BeginQuestImgFadeOut final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMG_FADE_COLOR                               FadeColor;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldManager_BeginQuestImgFadeOut) == 0x000004, "Wrong alignment on AT_UIFieldManager_BeginQuestImgFadeOut");
static_assert(sizeof(AT_UIFieldManager_BeginQuestImgFadeOut) == 0x000008, "Wrong size on AT_UIFieldManager_BeginQuestImgFadeOut");
static_assert(offsetof(AT_UIFieldManager_BeginQuestImgFadeOut, Duration) == 0x000000, "Member 'AT_UIFieldManager_BeginQuestImgFadeOut::Duration' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_BeginQuestImgFadeOut, FadeColor) == 0x000004, "Member 'AT_UIFieldManager_BeginQuestImgFadeOut::FadeColor' has a wrong offset!");

// Function AT.AT_UIFieldManager.GetDragonball
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldManager_GetDragonball final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NDbIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldManager_GetDragonball) == 0x000008, "Wrong alignment on AT_UIFieldManager_GetDragonball");
static_assert(sizeof(AT_UIFieldManager_GetDragonball) == 0x000010, "Wrong size on AT_UIFieldManager_GetDragonball");
static_assert(offsetof(AT_UIFieldManager_GetDragonball, PActor) == 0x000000, "Member 'AT_UIFieldManager_GetDragonball::PActor' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_GetDragonball, NDbIdx) == 0x000008, "Member 'AT_UIFieldManager_GetDragonball::NDbIdx' has a wrong offset!");

// Function AT.AT_UIFieldManager.GetMapManager
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldManager_GetMapManager final
{
public:
	class UAT_UIMapManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_GetMapManager) == 0x000008, "Wrong alignment on AT_UIFieldManager_GetMapManager");
static_assert(sizeof(AT_UIFieldManager_GetMapManager) == 0x000008, "Wrong size on AT_UIFieldManager_GetMapManager");
static_assert(offsetof(AT_UIFieldManager_GetMapManager, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_GetMapManager::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.GetXCmnFadeBlur
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldManager_GetXCmnFadeBlur final
{
public:
	class UAT_UIXcmnFadeBlur*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_GetXCmnFadeBlur) == 0x000008, "Wrong alignment on AT_UIFieldManager_GetXCmnFadeBlur");
static_assert(sizeof(AT_UIFieldManager_GetXCmnFadeBlur) == 0x000008, "Wrong size on AT_UIFieldManager_GetXCmnFadeBlur");
static_assert(offsetof(AT_UIFieldManager_GetXCmnFadeBlur, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_GetXCmnFadeBlur::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.GetXCmnHeader
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldManager_GetXCmnHeader final
{
public:
	class UAT_UIXCmnHeader*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_GetXCmnHeader) == 0x000008, "Wrong alignment on AT_UIFieldManager_GetXCmnHeader");
static_assert(sizeof(AT_UIFieldManager_GetXCmnHeader) == 0x000008, "Wrong size on AT_UIFieldManager_GetXCmnHeader");
static_assert(offsetof(AT_UIFieldManager_GetXCmnHeader, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_GetXCmnHeader::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.IsEventIcon
// 0x0018 (0x0018 - 0x0000)
struct AT_UIFieldManager_IsEventIcon final
{
public:
	EMapIcon                                      InIconType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldManager_IsEventIcon) == 0x000008, "Wrong alignment on AT_UIFieldManager_IsEventIcon");
static_assert(sizeof(AT_UIFieldManager_IsEventIcon) == 0x000018, "Wrong size on AT_UIFieldManager_IsEventIcon");
static_assert(offsetof(AT_UIFieldManager_IsEventIcon, InIconType) == 0x000000, "Member 'AT_UIFieldManager_IsEventIcon::InIconType' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_IsEventIcon, InOwner) == 0x000008, "Member 'AT_UIFieldManager_IsEventIcon::InOwner' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_IsEventIcon, ReturnValue) == 0x000010, "Member 'AT_UIFieldManager_IsEventIcon::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.IsNextPreviewFadeFinished
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldManager_IsNextPreviewFadeFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_IsNextPreviewFadeFinished) == 0x000001, "Wrong alignment on AT_UIFieldManager_IsNextPreviewFadeFinished");
static_assert(sizeof(AT_UIFieldManager_IsNextPreviewFadeFinished) == 0x000001, "Wrong size on AT_UIFieldManager_IsNextPreviewFadeFinished");
static_assert(offsetof(AT_UIFieldManager_IsNextPreviewFadeFinished, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_IsNextPreviewFadeFinished::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.IsQuestImgFadeFinished
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldManager_IsQuestImgFadeFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_IsQuestImgFadeFinished) == 0x000001, "Wrong alignment on AT_UIFieldManager_IsQuestImgFadeFinished");
static_assert(sizeof(AT_UIFieldManager_IsQuestImgFadeFinished) == 0x000001, "Wrong size on AT_UIFieldManager_IsQuestImgFadeFinished");
static_assert(offsetof(AT_UIFieldManager_IsQuestImgFadeFinished, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_IsQuestImgFadeFinished::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.IsQuestImgLoadedAsset
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldManager_IsQuestImgLoadedAsset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_IsQuestImgLoadedAsset) == 0x000001, "Wrong alignment on AT_UIFieldManager_IsQuestImgLoadedAsset");
static_assert(sizeof(AT_UIFieldManager_IsQuestImgLoadedAsset) == 0x000001, "Wrong size on AT_UIFieldManager_IsQuestImgLoadedAsset");
static_assert(offsetof(AT_UIFieldManager_IsQuestImgLoadedAsset, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_IsQuestImgLoadedAsset::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.IsShowQuestImgPicture
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldManager_IsShowQuestImgPicture final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_IsShowQuestImgPicture) == 0x000001, "Wrong alignment on AT_UIFieldManager_IsShowQuestImgPicture");
static_assert(sizeof(AT_UIFieldManager_IsShowQuestImgPicture) == 0x000001, "Wrong size on AT_UIFieldManager_IsShowQuestImgPicture");
static_assert(offsetof(AT_UIFieldManager_IsShowQuestImgPicture, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_IsShowQuestImgPicture::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.OnPause
// 0x0108 (0x0108 - 0x0000)
struct AT_UIFieldManager_OnPause final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_OnPause) == 0x000008, "Wrong alignment on AT_UIFieldManager_OnPause");
static_assert(sizeof(AT_UIFieldManager_OnPause) == 0x000108, "Wrong size on AT_UIFieldManager_OnPause");
static_assert(offsetof(AT_UIFieldManager_OnPause, EventParam) == 0x000000, "Member 'AT_UIFieldManager_OnPause::EventParam' has a wrong offset!");

// Function AT.AT_UIFieldManager.RemoveEventIcon
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldManager_RemoveEventIcon final
{
public:
	EMapIcon                                      InIconType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_RemoveEventIcon) == 0x000008, "Wrong alignment on AT_UIFieldManager_RemoveEventIcon");
static_assert(sizeof(AT_UIFieldManager_RemoveEventIcon) == 0x000010, "Wrong size on AT_UIFieldManager_RemoveEventIcon");
static_assert(offsetof(AT_UIFieldManager_RemoveEventIcon, InIconType) == 0x000000, "Member 'AT_UIFieldManager_RemoveEventIcon::InIconType' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_RemoveEventIcon, InOwner) == 0x000008, "Member 'AT_UIFieldManager_RemoveEventIcon::InOwner' has a wrong offset!");

// Function AT.AT_UIFieldManager.SetQuestImgAnimationInfo
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldManager_SetQuestImgAnimationInfo final
{
public:
	float                                         OverridePanTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            OverrideAnimEasingCurve;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_SetQuestImgAnimationInfo) == 0x000008, "Wrong alignment on AT_UIFieldManager_SetQuestImgAnimationInfo");
static_assert(sizeof(AT_UIFieldManager_SetQuestImgAnimationInfo) == 0x000010, "Wrong size on AT_UIFieldManager_SetQuestImgAnimationInfo");
static_assert(offsetof(AT_UIFieldManager_SetQuestImgAnimationInfo, OverridePanTime) == 0x000000, "Member 'AT_UIFieldManager_SetQuestImgAnimationInfo::OverridePanTime' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_SetQuestImgAnimationInfo, OverrideAnimEasingCurve) == 0x000008, "Member 'AT_UIFieldManager_SetQuestImgAnimationInfo::OverrideAnimEasingCurve' has a wrong offset!");

// Function AT.AT_UIFieldManager.SetQuestImgBaseColor
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldManager_SetQuestImgBaseColor final
{
public:
	struct FLinearColor                           LinearColor;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_SetQuestImgBaseColor) == 0x000004, "Wrong alignment on AT_UIFieldManager_SetQuestImgBaseColor");
static_assert(sizeof(AT_UIFieldManager_SetQuestImgBaseColor) == 0x000010, "Wrong size on AT_UIFieldManager_SetQuestImgBaseColor");
static_assert(offsetof(AT_UIFieldManager_SetQuestImgBaseColor, LinearColor) == 0x000000, "Member 'AT_UIFieldManager_SetQuestImgBaseColor::LinearColor' has a wrong offset!");

// Function AT.AT_UIFieldManager.SetQuestImgLayerOrder
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldManager_SetQuestImgLayerOrder final
{
public:
	EAddToViewportLayer                           LayerOrder;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_SetQuestImgLayerOrder) == 0x000001, "Wrong alignment on AT_UIFieldManager_SetQuestImgLayerOrder");
static_assert(sizeof(AT_UIFieldManager_SetQuestImgLayerOrder) == 0x000001, "Wrong size on AT_UIFieldManager_SetQuestImgLayerOrder");
static_assert(offsetof(AT_UIFieldManager_SetQuestImgLayerOrder, LayerOrder) == 0x000000, "Member 'AT_UIFieldManager_SetQuestImgLayerOrder::LayerOrder' has a wrong offset!");

// Function AT.AT_UIFieldManager.SetQuestImgLoadAsset
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldManager_SetQuestImgLoadAsset final
{
public:
	class FString                                 PathToImageAsset;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_SetQuestImgLoadAsset) == 0x000008, "Wrong alignment on AT_UIFieldManager_SetQuestImgLoadAsset");
static_assert(sizeof(AT_UIFieldManager_SetQuestImgLoadAsset) == 0x000010, "Wrong size on AT_UIFieldManager_SetQuestImgLoadAsset");
static_assert(offsetof(AT_UIFieldManager_SetQuestImgLoadAsset, PathToImageAsset) == 0x000000, "Member 'AT_UIFieldManager_SetQuestImgLoadAsset::PathToImageAsset' has a wrong offset!");

// Function AT.AT_UIFieldManager.SetQuestImgVisible
// 0x0003 (0x0003 - 0x0000)
struct AT_UIFieldManager_SetQuestImgVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestImageAnimationType                      InQuestImageAnimationType;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCrossFade;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_SetQuestImgVisible) == 0x000001, "Wrong alignment on AT_UIFieldManager_SetQuestImgVisible");
static_assert(sizeof(AT_UIFieldManager_SetQuestImgVisible) == 0x000003, "Wrong size on AT_UIFieldManager_SetQuestImgVisible");
static_assert(offsetof(AT_UIFieldManager_SetQuestImgVisible, bVisible) == 0x000000, "Member 'AT_UIFieldManager_SetQuestImgVisible::bVisible' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_SetQuestImgVisible, InQuestImageAnimationType) == 0x000001, "Member 'AT_UIFieldManager_SetQuestImgVisible::InQuestImageAnimationType' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_SetQuestImgVisible, bInCrossFade) == 0x000002, "Member 'AT_UIFieldManager_SetQuestImgVisible::bInCrossFade' has a wrong offset!");

// Function AT.AT_UIFieldManager.ShowNextPreviewDetail
// 0x0020 (0x0020 - 0x0000)
struct AT_UIFieldManager_ShowNextPreviewDetail final
{
public:
	class FString                                 HeaderMessageId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubjectMessageId;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_ShowNextPreviewDetail) == 0x000008, "Wrong alignment on AT_UIFieldManager_ShowNextPreviewDetail");
static_assert(sizeof(AT_UIFieldManager_ShowNextPreviewDetail) == 0x000020, "Wrong size on AT_UIFieldManager_ShowNextPreviewDetail");
static_assert(offsetof(AT_UIFieldManager_ShowNextPreviewDetail, HeaderMessageId) == 0x000000, "Member 'AT_UIFieldManager_ShowNextPreviewDetail::HeaderMessageId' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_ShowNextPreviewDetail, SubjectMessageId) == 0x000010, "Member 'AT_UIFieldManager_ShowNextPreviewDetail::SubjectMessageId' has a wrong offset!");

// Function AT.AT_UIFieldManager.ShowNextPreviewTitle
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldManager_ShowNextPreviewTitle final
{
public:
	class FString                                 TitleMessageId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_ShowNextPreviewTitle) == 0x000008, "Wrong alignment on AT_UIFieldManager_ShowNextPreviewTitle");
static_assert(sizeof(AT_UIFieldManager_ShowNextPreviewTitle) == 0x000010, "Wrong size on AT_UIFieldManager_ShowNextPreviewTitle");
static_assert(offsetof(AT_UIFieldManager_ShowNextPreviewTitle, TitleMessageId) == 0x000000, "Member 'AT_UIFieldManager_ShowNextPreviewTitle::TitleMessageId' has a wrong offset!");

// Function AT.AT_UIFieldManager.SpawnDragonball
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldManager_SpawnDragonball final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NDbIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldManager_SpawnDragonball) == 0x000008, "Wrong alignment on AT_UIFieldManager_SpawnDragonball");
static_assert(sizeof(AT_UIFieldManager_SpawnDragonball) == 0x000010, "Wrong size on AT_UIFieldManager_SpawnDragonball");
static_assert(offsetof(AT_UIFieldManager_SpawnDragonball, PActor) == 0x000000, "Member 'AT_UIFieldManager_SpawnDragonball::PActor' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_SpawnDragonball, NDbIdx) == 0x000008, "Member 'AT_UIFieldManager_SpawnDragonball::NDbIdx' has a wrong offset!");

// Function AT.AT_UIFieldManager.StartDragonballAcquisition
// 0x0004 (0x0004 - 0x0000)
struct AT_UIFieldManager_StartDragonballAcquisition final
{
public:
	int32                                         InDragonballIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_StartDragonballAcquisition) == 0x000004, "Wrong alignment on AT_UIFieldManager_StartDragonballAcquisition");
static_assert(sizeof(AT_UIFieldManager_StartDragonballAcquisition) == 0x000004, "Wrong size on AT_UIFieldManager_StartDragonballAcquisition");
static_assert(offsetof(AT_UIFieldManager_StartDragonballAcquisition, InDragonballIndex) == 0x000000, "Member 'AT_UIFieldManager_StartDragonballAcquisition::InDragonballIndex' has a wrong offset!");

// Function AT.AT_UIFieldManager.StartUsingQuestImg
// 0x0002 (0x0002 - 0x0000)
struct AT_UIFieldManager_StartUsingQuestImg final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_StartUsingQuestImg) == 0x000001, "Wrong alignment on AT_UIFieldManager_StartUsingQuestImg");
static_assert(sizeof(AT_UIFieldManager_StartUsingQuestImg) == 0x000002, "Wrong size on AT_UIFieldManager_StartUsingQuestImg");
static_assert(offsetof(AT_UIFieldManager_StartUsingQuestImg, bVisible) == 0x000000, "Member 'AT_UIFieldManager_StartUsingQuestImg::bVisible' has a wrong offset!");
static_assert(offsetof(AT_UIFieldManager_StartUsingQuestImg, ReturnValue) == 0x000001, "Member 'AT_UIFieldManager_StartUsingQuestImg::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldManager.IsUpdateState
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldManager_IsUpdateState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldManager_IsUpdateState) == 0x000001, "Wrong alignment on AT_UIFieldManager_IsUpdateState");
static_assert(sizeof(AT_UIFieldManager_IsUpdateState) == 0x000001, "Wrong size on AT_UIFieldManager_IsUpdateState");
static_assert(offsetof(AT_UIFieldManager_IsUpdateState, ReturnValue) == 0x000000, "Member 'AT_UIFieldManager_IsUpdateState::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsApplyFootIK
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsApplyFootIK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsApplyFootIK) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsApplyFootIK");
static_assert(sizeof(ATCharacterAnimInstance_IsApplyFootIK) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsApplyFootIK");
static_assert(offsetof(ATCharacterAnimInstance_IsApplyFootIK, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsApplyFootIK::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsThirdJumpRolling
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsThirdJumpRolling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsThirdJumpRolling) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsThirdJumpRolling");
static_assert(sizeof(ATCharacterAnimInstance_IsThirdJumpRolling) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsThirdJumpRolling");
static_assert(offsetof(ATCharacterAnimInstance_IsThirdJumpRolling, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsThirdJumpRolling::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.OnMontageBlendingOutDelegate
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterAnimInstance_OnMontageBlendingOutDelegate final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCharacterAnimInstance_OnMontageBlendingOutDelegate) == 0x000008, "Wrong alignment on ATCharacterAnimInstance_OnMontageBlendingOutDelegate");
static_assert(sizeof(ATCharacterAnimInstance_OnMontageBlendingOutDelegate) == 0x000010, "Wrong size on ATCharacterAnimInstance_OnMontageBlendingOutDelegate");
static_assert(offsetof(ATCharacterAnimInstance_OnMontageBlendingOutDelegate, Montage) == 0x000000, "Member 'ATCharacterAnimInstance_OnMontageBlendingOutDelegate::Montage' has a wrong offset!");
static_assert(offsetof(ATCharacterAnimInstance_OnMontageBlendingOutDelegate, bInterrupted) == 0x000008, "Member 'ATCharacterAnimInstance_OnMontageBlendingOutDelegate::bInterrupted' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.OnMontageStartedDelegate
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_OnMontageStartedDelegate final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_OnMontageStartedDelegate) == 0x000008, "Wrong alignment on ATCharacterAnimInstance_OnMontageStartedDelegate");
static_assert(sizeof(ATCharacterAnimInstance_OnMontageStartedDelegate) == 0x000008, "Wrong size on ATCharacterAnimInstance_OnMontageStartedDelegate");
static_assert(offsetof(ATCharacterAnimInstance_OnMontageStartedDelegate, Montage) == 0x000000, "Member 'ATCharacterAnimInstance_OnMontageStartedDelegate::Montage' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.SetFirstPersonView
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_SetFirstPersonView final
{
public:
	bool                                          InView;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_SetFirstPersonView) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_SetFirstPersonView");
static_assert(sizeof(ATCharacterAnimInstance_SetFirstPersonView) == 0x000001, "Wrong size on ATCharacterAnimInstance_SetFirstPersonView");
static_assert(offsetof(ATCharacterAnimInstance_SetFirstPersonView, InView) == 0x000000, "Member 'ATCharacterAnimInstance_SetFirstPersonView::InView' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtAngleHead
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtAngleHead final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtAngleHead) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtAngleHead");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtAngleHead) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtAngleHead");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtAngleHead, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtAngleHead::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtAngleHeadUpDown
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtAngleHeadUpDown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtAngleHeadUpDown) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtAngleHeadUpDown");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtAngleHeadUpDown) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtAngleHeadUpDown");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtAngleHeadUpDown, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtAngleHeadUpDown::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtAngleSpine01
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtAngleSpine01 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine01) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtAngleSpine01");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine01) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtAngleSpine01");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine01, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtAngleSpine01::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtAngleSpine02
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtAngleSpine02 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine02) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtAngleSpine02");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine02) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtAngleSpine02");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine02, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtAngleSpine02::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtAngleSpine03
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtAngleSpine03 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine03) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtAngleSpine03");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine03) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtAngleSpine03");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtAngleSpine03, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtAngleSpine03::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtBlendTime
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtBlendTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtBlendTime) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtBlendTime");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtBlendTime) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtBlendTime");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtBlendTime, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtBlendTime::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtBlendTimeCancel
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtBlendTimeCancel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtBlendTimeCancel) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtBlendTimeCancel");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtBlendTimeCancel) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtBlendTimeCancel");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtBlendTimeCancel, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtBlendTimeCancel::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtInitTargetLocation
// 0x000C (0x000C - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtInitTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtInitTargetLocation) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtInitTargetLocation");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtInitTargetLocation) == 0x00000C, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtInitTargetLocation");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtInitTargetLocation, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtInitTargetLocation::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtLocation
// 0x000C (0x000C - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtLocation) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtLocation");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtLocation) == 0x00000C, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtLocation");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtLocation, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtLocation::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleLookAtTriggerThreashold
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBattleLookAtTriggerThreashold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleLookAtTriggerThreashold) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBattleLookAtTriggerThreashold");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleLookAtTriggerThreashold) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBattleLookAtTriggerThreashold");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleLookAtTriggerThreashold, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleLookAtTriggerThreashold::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBattleStandStepBack
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetBattleStandStepBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBattleStandStepBack) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetBattleStandStepBack");
static_assert(sizeof(ATCharacterAnimInstance_GetBattleStandStepBack) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetBattleStandStepBack");
static_assert(offsetof(ATCharacterAnimInstance_GetBattleStandStepBack, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBattleStandStepBack::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBlendSpaceTypeForLipSync
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBlendSpaceTypeForLipSync final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBlendSpaceTypeForLipSync) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBlendSpaceTypeForLipSync");
static_assert(sizeof(ATCharacterAnimInstance_GetBlendSpaceTypeForLipSync) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBlendSpaceTypeForLipSync");
static_assert(offsetof(ATCharacterAnimInstance_GetBlendSpaceTypeForLipSync, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBlendSpaceTypeForLipSync::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBlendTimeLookAt
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBlendTimeLookAt final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBlendTimeLookAt) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBlendTimeLookAt");
static_assert(sizeof(ATCharacterAnimInstance_GetBlendTimeLookAt) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBlendTimeLookAt");
static_assert(offsetof(ATCharacterAnimInstance_GetBlendTimeLookAt, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBlendTimeLookAt::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBlendTimeLookAtCancel
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBlendTimeLookAtCancel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBlendTimeLookAtCancel) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBlendTimeLookAtCancel");
static_assert(sizeof(ATCharacterAnimInstance_GetBlendTimeLookAtCancel) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBlendTimeLookAtCancel");
static_assert(offsetof(ATCharacterAnimInstance_GetBlendTimeLookAtCancel, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBlendTimeLookAtCancel::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBsParamBattleMove
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetBsParamBattleMove final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBsParamBattleMove) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBsParamBattleMove");
static_assert(sizeof(ATCharacterAnimInstance_GetBsParamBattleMove) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetBsParamBattleMove");
static_assert(offsetof(ATCharacterAnimInstance_GetBsParamBattleMove, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBsParamBattleMove::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBsParamBattleStep
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetBsParamBattleStep final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBsParamBattleStep) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBsParamBattleStep");
static_assert(sizeof(ATCharacterAnimInstance_GetBsParamBattleStep) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetBsParamBattleStep");
static_assert(offsetof(ATCharacterAnimInstance_GetBsParamBattleStep, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBsParamBattleStep::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBsParamBattleTurn
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBsParamBattleTurn final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBsParamBattleTurn) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBsParamBattleTurn");
static_assert(sizeof(ATCharacterAnimInstance_GetBsParamBattleTurn) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBsParamBattleTurn");
static_assert(offsetof(ATCharacterAnimInstance_GetBsParamBattleTurn, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBsParamBattleTurn::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBsParamFloatMoveLP
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetBsParamFloatMoveLP final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBsParamFloatMoveLP) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBsParamFloatMoveLP");
static_assert(sizeof(ATCharacterAnimInstance_GetBsParamFloatMoveLP) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetBsParamFloatMoveLP");
static_assert(offsetof(ATCharacterAnimInstance_GetBsParamFloatMoveLP, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBsParamFloatMoveLP::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBsParamNimbusMoveLP
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetBsParamNimbusMoveLP final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBsParamNimbusMoveLP) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBsParamNimbusMoveLP");
static_assert(sizeof(ATCharacterAnimInstance_GetBsParamNimbusMoveLP) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetBsParamNimbusMoveLP");
static_assert(offsetof(ATCharacterAnimInstance_GetBsParamNimbusMoveLP, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBsParamNimbusMoveLP::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBsParamPillarMove
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetBsParamPillarMove final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBsParamPillarMove) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBsParamPillarMove");
static_assert(sizeof(ATCharacterAnimInstance_GetBsParamPillarMove) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetBsParamPillarMove");
static_assert(offsetof(ATCharacterAnimInstance_GetBsParamPillarMove, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBsParamPillarMove::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBsParamPillarReady
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetBsParamPillarReady final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBsParamPillarReady) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBsParamPillarReady");
static_assert(sizeof(ATCharacterAnimInstance_GetBsParamPillarReady) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetBsParamPillarReady");
static_assert(offsetof(ATCharacterAnimInstance_GetBsParamPillarReady, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBsParamPillarReady::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetBsParamStandMoveLP
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetBsParamStandMoveLP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetBsParamStandMoveLP) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetBsParamStandMoveLP");
static_assert(sizeof(ATCharacterAnimInstance_GetBsParamStandMoveLP) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetBsParamStandMoveLP");
static_assert(offsetof(ATCharacterAnimInstance_GetBsParamStandMoveLP, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetBsParamStandMoveLP::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetClampAngleHeadBone
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetClampAngleHeadBone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetClampAngleHeadBone) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetClampAngleHeadBone");
static_assert(sizeof(ATCharacterAnimInstance_GetClampAngleHeadBone) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetClampAngleHeadBone");
static_assert(offsetof(ATCharacterAnimInstance_GetClampAngleHeadBone, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetClampAngleHeadBone::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetClampAngleHeadBoneUpDown
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetClampAngleHeadBoneUpDown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetClampAngleHeadBoneUpDown) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetClampAngleHeadBoneUpDown");
static_assert(sizeof(ATCharacterAnimInstance_GetClampAngleHeadBoneUpDown) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetClampAngleHeadBoneUpDown");
static_assert(offsetof(ATCharacterAnimInstance_GetClampAngleHeadBoneUpDown, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetClampAngleHeadBoneUpDown::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetClampAnglePelvisBone
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetClampAnglePelvisBone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetClampAnglePelvisBone) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetClampAnglePelvisBone");
static_assert(sizeof(ATCharacterAnimInstance_GetClampAnglePelvisBone) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetClampAnglePelvisBone");
static_assert(offsetof(ATCharacterAnimInstance_GetClampAnglePelvisBone, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetClampAnglePelvisBone::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetClampAngleSpineBone
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetClampAngleSpineBone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetClampAngleSpineBone) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetClampAngleSpineBone");
static_assert(sizeof(ATCharacterAnimInstance_GetClampAngleSpineBone) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetClampAngleSpineBone");
static_assert(offsetof(ATCharacterAnimInstance_GetClampAngleSpineBone, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetClampAngleSpineBone::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetCurrentBattleFloatVariation
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetCurrentBattleFloatVariation final
{
public:
	EATCharacterBattleFloatVariation              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetCurrentBattleFloatVariation) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetCurrentBattleFloatVariation");
static_assert(sizeof(ATCharacterAnimInstance_GetCurrentBattleFloatVariation) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetCurrentBattleFloatVariation");
static_assert(offsetof(ATCharacterAnimInstance_GetCurrentBattleFloatVariation, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetCurrentBattleFloatVariation::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetCurrentFloatBoostMotionState
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetCurrentFloatBoostMotionState final
{
public:
	EATCharacterFloatBoostMotionState             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetCurrentFloatBoostMotionState) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetCurrentFloatBoostMotionState");
static_assert(sizeof(ATCharacterAnimInstance_GetCurrentFloatBoostMotionState) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetCurrentFloatBoostMotionState");
static_assert(offsetof(ATCharacterAnimInstance_GetCurrentFloatBoostMotionState, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetCurrentFloatBoostMotionState::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetCurrentFloatRoll
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetCurrentFloatRoll final
{
public:
	EATCharacterFloatRoll                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetCurrentFloatRoll) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetCurrentFloatRoll");
static_assert(sizeof(ATCharacterAnimInstance_GetCurrentFloatRoll) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetCurrentFloatRoll");
static_assert(offsetof(ATCharacterAnimInstance_GetCurrentFloatRoll, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetCurrentFloatRoll::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetCurrentJump
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetCurrentJump final
{
public:
	EATCharacterJump                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetCurrentJump) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetCurrentJump");
static_assert(sizeof(ATCharacterAnimInstance_GetCurrentJump) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetCurrentJump");
static_assert(offsetof(ATCharacterAnimInstance_GetCurrentJump, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetCurrentJump::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetCurrentMoveGear
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetCurrentMoveGear final
{
public:
	EATCharacterMoveGear                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetCurrentMoveGear) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetCurrentMoveGear");
static_assert(sizeof(ATCharacterAnimInstance_GetCurrentMoveGear) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetCurrentMoveGear");
static_assert(offsetof(ATCharacterAnimInstance_GetCurrentMoveGear, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetCurrentMoveGear::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetEnableGazing
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetEnableGazing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetEnableGazing) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetEnableGazing");
static_assert(sizeof(ATCharacterAnimInstance_GetEnableGazing) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetEnableGazing");
static_assert(offsetof(ATCharacterAnimInstance_GetEnableGazing, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetEnableGazing::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetEnableLookAt
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetEnableLookAt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetEnableLookAt) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetEnableLookAt");
static_assert(sizeof(ATCharacterAnimInstance_GetEnableLookAt) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetEnableLookAt");
static_assert(offsetof(ATCharacterAnimInstance_GetEnableLookAt, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetEnableLookAt::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetEyePupilScale
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetEyePupilScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetEyePupilScale) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetEyePupilScale");
static_assert(sizeof(ATCharacterAnimInstance_GetEyePupilScale) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetEyePupilScale");
static_assert(offsetof(ATCharacterAnimInstance_GetEyePupilScale, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetEyePupilScale::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetFloatSwitchGearMoveGear
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetFloatSwitchGearMoveGear final
{
public:
	EATCharacterMoveGear                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetFloatSwitchGearMoveGear) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetFloatSwitchGearMoveGear");
static_assert(sizeof(ATCharacterAnimInstance_GetFloatSwitchGearMoveGear) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetFloatSwitchGearMoveGear");
static_assert(offsetof(ATCharacterAnimInstance_GetFloatSwitchGearMoveGear, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetFloatSwitchGearMoveGear::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetGazeOffsetLH
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetGazeOffsetLH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetGazeOffsetLH) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetGazeOffsetLH");
static_assert(sizeof(ATCharacterAnimInstance_GetGazeOffsetLH) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetGazeOffsetLH");
static_assert(offsetof(ATCharacterAnimInstance_GetGazeOffsetLH, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetGazeOffsetLH::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetGazeOffsetLV
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetGazeOffsetLV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetGazeOffsetLV) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetGazeOffsetLV");
static_assert(sizeof(ATCharacterAnimInstance_GetGazeOffsetLV) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetGazeOffsetLV");
static_assert(offsetof(ATCharacterAnimInstance_GetGazeOffsetLV, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetGazeOffsetLV::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetGazeOffsetRH
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetGazeOffsetRH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetGazeOffsetRH) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetGazeOffsetRH");
static_assert(sizeof(ATCharacterAnimInstance_GetGazeOffsetRH) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetGazeOffsetRH");
static_assert(offsetof(ATCharacterAnimInstance_GetGazeOffsetRH, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetGazeOffsetRH::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetGazeOffsetRV
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetGazeOffsetRV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetGazeOffsetRV) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetGazeOffsetRV");
static_assert(sizeof(ATCharacterAnimInstance_GetGazeOffsetRV) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetGazeOffsetRV");
static_assert(offsetof(ATCharacterAnimInstance_GetGazeOffsetRV, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetGazeOffsetRV::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetGeneralBlendSpace
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetGeneralBlendSpace final
{
public:
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetGeneralBlendSpace) == 0x000008, "Wrong alignment on ATCharacterAnimInstance_GetGeneralBlendSpace");
static_assert(sizeof(ATCharacterAnimInstance_GetGeneralBlendSpace) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetGeneralBlendSpace");
static_assert(offsetof(ATCharacterAnimInstance_GetGeneralBlendSpace, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetGeneralBlendSpace::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetGeneralBlendSpaceAxisX
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetGeneralBlendSpaceAxisX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetGeneralBlendSpaceAxisX) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetGeneralBlendSpaceAxisX");
static_assert(sizeof(ATCharacterAnimInstance_GetGeneralBlendSpaceAxisX) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetGeneralBlendSpaceAxisX");
static_assert(offsetof(ATCharacterAnimInstance_GetGeneralBlendSpaceAxisX, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetGeneralBlendSpaceAxisX::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetGeneralBlendSpaceAxisY
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetGeneralBlendSpaceAxisY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetGeneralBlendSpaceAxisY) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetGeneralBlendSpaceAxisY");
static_assert(sizeof(ATCharacterAnimInstance_GetGeneralBlendSpaceAxisY) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetGeneralBlendSpaceAxisY");
static_assert(offsetof(ATCharacterAnimInstance_GetGeneralBlendSpaceAxisY, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetGeneralBlendSpaceAxisY::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetHeadBoneScaleForFpView
// 0x000C (0x000C - 0x0000)
struct ATCharacterAnimInstance_GetHeadBoneScaleForFpView final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetHeadBoneScaleForFpView) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetHeadBoneScaleForFpView");
static_assert(sizeof(ATCharacterAnimInstance_GetHeadBoneScaleForFpView) == 0x00000C, "Wrong size on ATCharacterAnimInstance_GetHeadBoneScaleForFpView");
static_assert(offsetof(ATCharacterAnimInstance_GetHeadBoneScaleForFpView, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetHeadBoneScaleForFpView::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetInterpolationBlendTypeForLookAt
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetInterpolationBlendTypeForLookAt final
{
public:
	EInterpolationBlend                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetInterpolationBlendTypeForLookAt) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetInterpolationBlendTypeForLookAt");
static_assert(sizeof(ATCharacterAnimInstance_GetInterpolationBlendTypeForLookAt) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetInterpolationBlendTypeForLookAt");
static_assert(offsetof(ATCharacterAnimInstance_GetInterpolationBlendTypeForLookAt, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetInterpolationBlendTypeForLookAt::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLastJump
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetLastJump final
{
public:
	EATCharacterJump                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLastJump) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetLastJump");
static_assert(sizeof(ATCharacterAnimInstance_GetLastJump) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetLastJump");
static_assert(offsetof(ATCharacterAnimInstance_GetLastJump, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetLastJump::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLeftFootEffectorLocation
// 0x000C (0x000C - 0x0000)
struct ATCharacterAnimInstance_GetLeftFootEffectorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLeftFootEffectorLocation) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetLeftFootEffectorLocation");
static_assert(sizeof(ATCharacterAnimInstance_GetLeftFootEffectorLocation) == 0x00000C, "Wrong size on ATCharacterAnimInstance_GetLeftFootEffectorLocation");
static_assert(offsetof(ATCharacterAnimInstance_GetLeftFootEffectorLocation, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetLeftFootEffectorLocation::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLeftJointTarget
// 0x000C (0x000C - 0x0000)
struct ATCharacterAnimInstance_GetLeftJointTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLeftJointTarget) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetLeftJointTarget");
static_assert(sizeof(ATCharacterAnimInstance_GetLeftJointTarget) == 0x00000C, "Wrong size on ATCharacterAnimInstance_GetLeftJointTarget");
static_assert(offsetof(ATCharacterAnimInstance_GetLeftJointTarget, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetLeftJointTarget::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLipSize
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetLipSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLipSize) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetLipSize");
static_assert(sizeof(ATCharacterAnimInstance_GetLipSize) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetLipSize");
static_assert(offsetof(ATCharacterAnimInstance_GetLipSize, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetLipSize::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLipWeight
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetLipWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLipWeight) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetLipWeight");
static_assert(sizeof(ATCharacterAnimInstance_GetLipWeight) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetLipWeight");
static_assert(offsetof(ATCharacterAnimInstance_GetLipWeight, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetLipWeight::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLookAtCalculator
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetLookAtCalculator final
{
public:
	class ULookAtCalculator*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLookAtCalculator) == 0x000008, "Wrong alignment on ATCharacterAnimInstance_GetLookAtCalculator");
static_assert(sizeof(ATCharacterAnimInstance_GetLookAtCalculator) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetLookAtCalculator");
static_assert(offsetof(ATCharacterAnimInstance_GetLookAtCalculator, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetLookAtCalculator::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLookAtLocationForward
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterAnimInstance_GetLookAtLocationForward final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLookAtLocationForward) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetLookAtLocationForward");
static_assert(sizeof(ATCharacterAnimInstance_GetLookAtLocationForward) == 0x000010, "Wrong size on ATCharacterAnimInstance_GetLookAtLocationForward");
static_assert(offsetof(ATCharacterAnimInstance_GetLookAtLocationForward, Length) == 0x000000, "Member 'ATCharacterAnimInstance_GetLookAtLocationForward::Length' has a wrong offset!");
static_assert(offsetof(ATCharacterAnimInstance_GetLookAtLocationForward, ReturnValue) == 0x000004, "Member 'ATCharacterAnimInstance_GetLookAtLocationForward::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLookAtTarget
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterAnimInstance_GetLookAtTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLookAtTarget) == 0x000008, "Wrong alignment on ATCharacterAnimInstance_GetLookAtTarget");
static_assert(sizeof(ATCharacterAnimInstance_GetLookAtTarget) == 0x000008, "Wrong size on ATCharacterAnimInstance_GetLookAtTarget");
static_assert(offsetof(ATCharacterAnimInstance_GetLookAtTarget, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetLookAtTarget::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetLookAtTargetLocation
// 0x000C (0x000C - 0x0000)
struct ATCharacterAnimInstance_GetLookAtTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetLookAtTargetLocation) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetLookAtTargetLocation");
static_assert(sizeof(ATCharacterAnimInstance_GetLookAtTargetLocation) == 0x00000C, "Wrong size on ATCharacterAnimInstance_GetLookAtTargetLocation");
static_assert(offsetof(ATCharacterAnimInstance_GetLookAtTargetLocation, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetLookAtTargetLocation::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetMontageBase
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetMontageBase final
{
public:
	EATCharacterMontageBase                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetMontageBase) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetMontageBase");
static_assert(sizeof(ATCharacterAnimInstance_GetMontageBase) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetMontageBase");
static_assert(offsetof(ATCharacterAnimInstance_GetMontageBase, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetMontageBase::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetMoveEDMoveGear
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetMoveEDMoveGear final
{
public:
	EATCharacterMoveGear                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetMoveEDMoveGear) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetMoveEDMoveGear");
static_assert(sizeof(ATCharacterAnimInstance_GetMoveEDMoveGear) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetMoveEDMoveGear");
static_assert(offsetof(ATCharacterAnimInstance_GetMoveEDMoveGear, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetMoveEDMoveGear::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetMoveSTMoveGear
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetMoveSTMoveGear final
{
public:
	EATCharacterMoveGear                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetMoveSTMoveGear) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetMoveSTMoveGear");
static_assert(sizeof(ATCharacterAnimInstance_GetMoveSTMoveGear) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetMoveSTMoveGear");
static_assert(offsetof(ATCharacterAnimInstance_GetMoveSTMoveGear, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetMoveSTMoveGear::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetNimbusRideType
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetNimbusRideType final
{
public:
	EATCharacterNimbusRide                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetNimbusRideType) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetNimbusRideType");
static_assert(sizeof(ATCharacterAnimInstance_GetNimbusRideType) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetNimbusRideType");
static_assert(offsetof(ATCharacterAnimInstance_GetNimbusRideType, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetNimbusRideType::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetRightFootEffectorLocation
// 0x000C (0x000C - 0x0000)
struct ATCharacterAnimInstance_GetRightFootEffectorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetRightFootEffectorLocation) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetRightFootEffectorLocation");
static_assert(sizeof(ATCharacterAnimInstance_GetRightFootEffectorLocation) == 0x00000C, "Wrong size on ATCharacterAnimInstance_GetRightFootEffectorLocation");
static_assert(offsetof(ATCharacterAnimInstance_GetRightFootEffectorLocation, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetRightFootEffectorLocation::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetRightJointTarget
// 0x000C (0x000C - 0x0000)
struct ATCharacterAnimInstance_GetRightJointTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetRightJointTarget) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetRightJointTarget");
static_assert(sizeof(ATCharacterAnimInstance_GetRightJointTarget) == 0x00000C, "Wrong size on ATCharacterAnimInstance_GetRightJointTarget");
static_assert(offsetof(ATCharacterAnimInstance_GetRightJointTarget, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetRightJointTarget::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetStandWaitVariation
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_GetStandWaitVariation final
{
public:
	EATCharacterStandWaitVariationState           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetStandWaitVariation) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_GetStandWaitVariation");
static_assert(sizeof(ATCharacterAnimInstance_GetStandWaitVariation) == 0x000001, "Wrong size on ATCharacterAnimInstance_GetStandWaitVariation");
static_assert(offsetof(ATCharacterAnimInstance_GetStandWaitVariation, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetStandWaitVariation::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetStandWaitVariationBlendTime
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetStandWaitVariationBlendTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetStandWaitVariationBlendTime) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetStandWaitVariationBlendTime");
static_assert(sizeof(ATCharacterAnimInstance_GetStandWaitVariationBlendTime) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetStandWaitVariationBlendTime");
static_assert(offsetof(ATCharacterAnimInstance_GetStandWaitVariationBlendTime, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetStandWaitVariationBlendTime::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetStandWalkEDAnimPlayRate
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetStandWalkEDAnimPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetStandWalkEDAnimPlayRate) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetStandWalkEDAnimPlayRate");
static_assert(sizeof(ATCharacterAnimInstance_GetStandWalkEDAnimPlayRate) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetStandWalkEDAnimPlayRate");
static_assert(offsetof(ATCharacterAnimInstance_GetStandWalkEDAnimPlayRate, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetStandWalkEDAnimPlayRate::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetStandWalkEDAnimStartPosition
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetStandWalkEDAnimStartPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetStandWalkEDAnimStartPosition) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetStandWalkEDAnimStartPosition");
static_assert(sizeof(ATCharacterAnimInstance_GetStandWalkEDAnimStartPosition) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetStandWalkEDAnimStartPosition");
static_assert(offsetof(ATCharacterAnimInstance_GetStandWalkEDAnimStartPosition, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetStandWalkEDAnimStartPosition::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.GetTriggerThreasholdLookAt
// 0x0004 (0x0004 - 0x0000)
struct ATCharacterAnimInstance_GetTriggerThreasholdLookAt final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_GetTriggerThreasholdLookAt) == 0x000004, "Wrong alignment on ATCharacterAnimInstance_GetTriggerThreasholdLookAt");
static_assert(sizeof(ATCharacterAnimInstance_GetTriggerThreasholdLookAt) == 0x000004, "Wrong size on ATCharacterAnimInstance_GetTriggerThreasholdLookAt");
static_assert(offsetof(ATCharacterAnimInstance_GetTriggerThreasholdLookAt, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_GetTriggerThreasholdLookAt::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsChangeLookAtRootNo
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsChangeLookAtRootNo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsChangeLookAtRootNo) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsChangeLookAtRootNo");
static_assert(sizeof(ATCharacterAnimInstance_IsChangeLookAtRootNo) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsChangeLookAtRootNo");
static_assert(offsetof(ATCharacterAnimInstance_IsChangeLookAtRootNo, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsChangeLookAtRootNo::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableBattleLookAt
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableBattleLookAt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableBattleLookAt) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableBattleLookAt");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableBattleLookAt) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableBattleLookAt");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableBattleLookAt, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableBattleLookAt::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableBattleLookAtCondition
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableBattleLookAtCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableBattleLookAtCondition) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableBattleLookAtCondition");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableBattleLookAtCondition) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableBattleLookAtCondition");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableBattleLookAtCondition, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableBattleLookAtCondition::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableBattleLookAtRotateHead
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableBattleLookAtRotateHead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateHead) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableBattleLookAtRotateHead");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateHead) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableBattleLookAtRotateHead");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateHead, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableBattleLookAtRotateHead::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableBattleLookAtRotateSpine01
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine01 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine01) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine01");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine01) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine01");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine01, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine01::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableBattleLookAtRotateSpine02
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine02 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine02) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine02");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine02) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine02");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine02, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine02::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableBattleLookAtRotateSpine03
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine03 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine03) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine03");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine03) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine03");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine03, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableBattleLookAtRotateSpine03::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableGeneralBlendSpace
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableGeneralBlendSpace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableGeneralBlendSpace) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableGeneralBlendSpace");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableGeneralBlendSpace) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableGeneralBlendSpace");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableGeneralBlendSpace, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableGeneralBlendSpace::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableLipSync
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableLipSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableLipSync) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableLipSync");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableLipSync) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableLipSync");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableLipSync, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableLipSync::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableLookAt
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableLookAt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableLookAt) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableLookAt");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableLookAt) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableLookAt");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableLookAt, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableLookAt::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableRotateHeadBone
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableRotateHeadBone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableRotateHeadBone) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableRotateHeadBone");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableRotateHeadBone) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableRotateHeadBone");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableRotateHeadBone, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableRotateHeadBone::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableRotatePelvisBone
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableRotatePelvisBone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableRotatePelvisBone) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableRotatePelvisBone");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableRotatePelvisBone) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableRotatePelvisBone");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableRotatePelvisBone, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableRotatePelvisBone::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsEnableRotateSpineBone
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsEnableRotateSpineBone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsEnableRotateSpineBone) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsEnableRotateSpineBone");
static_assert(sizeof(ATCharacterAnimInstance_IsEnableRotateSpineBone) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsEnableRotateSpineBone");
static_assert(offsetof(ATCharacterAnimInstance_IsEnableRotateSpineBone, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsEnableRotateSpineBone::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsFirstPersonView
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsFirstPersonView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsFirstPersonView) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsFirstPersonView");
static_assert(sizeof(ATCharacterAnimInstance_IsFirstPersonView) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsFirstPersonView");
static_assert(offsetof(ATCharacterAnimInstance_IsFirstPersonView, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsFirstPersonView::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsHighJump
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsHighJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsHighJump) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsHighJump");
static_assert(sizeof(ATCharacterAnimInstance_IsHighJump) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsHighJump");
static_assert(offsetof(ATCharacterAnimInstance_IsHighJump, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsHighJump::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsLookForwardMoving
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsLookForwardMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsLookForwardMoving) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsLookForwardMoving");
static_assert(sizeof(ATCharacterAnimInstance_IsLookForwardMoving) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsLookForwardMoving");
static_assert(offsetof(ATCharacterAnimInstance_IsLookForwardMoving, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsLookForwardMoving::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsShotBattleMove
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsShotBattleMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsShotBattleMove) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsShotBattleMove");
static_assert(sizeof(ATCharacterAnimInstance_IsShotBattleMove) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsShotBattleMove");
static_assert(offsetof(ATCharacterAnimInstance_IsShotBattleMove, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsShotBattleMove::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.IsThirdJumpLanding
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_IsThirdJumpLanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_IsThirdJumpLanding) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_IsThirdJumpLanding");
static_assert(sizeof(ATCharacterAnimInstance_IsThirdJumpLanding) == 0x000001, "Wrong size on ATCharacterAnimInstance_IsThirdJumpLanding");
static_assert(offsetof(ATCharacterAnimInstance_IsThirdJumpLanding, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_IsThirdJumpLanding::ReturnValue' has a wrong offset!");

// Function AT.ATCharacterAnimInstance.UseBattleLookAtInitLocation
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterAnimInstance_UseBattleLookAtInitLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterAnimInstance_UseBattleLookAtInitLocation) == 0x000001, "Wrong alignment on ATCharacterAnimInstance_UseBattleLookAtInitLocation");
static_assert(sizeof(ATCharacterAnimInstance_UseBattleLookAtInitLocation) == 0x000001, "Wrong size on ATCharacterAnimInstance_UseBattleLookAtInitLocation");
static_assert(offsetof(ATCharacterAnimInstance_UseBattleLookAtInitLocation, ReturnValue) == 0x000000, "Member 'ATCharacterAnimInstance_UseBattleLookAtInitLocation::ReturnValue' has a wrong offset!");

// Function AT.TerrainDecorateResourcesReferenceCounter.DecrementReferenceCounter
// 0x0008 (0x0008 - 0x0000)
struct TerrainDecorateResourcesReferenceCounter_DecrementReferenceCounter final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TerrainDecorateResourcesReferenceCounter_DecrementReferenceCounter) == 0x000008, "Wrong alignment on TerrainDecorateResourcesReferenceCounter_DecrementReferenceCounter");
static_assert(sizeof(TerrainDecorateResourcesReferenceCounter_DecrementReferenceCounter) == 0x000008, "Wrong size on TerrainDecorateResourcesReferenceCounter_DecrementReferenceCounter");
static_assert(offsetof(TerrainDecorateResourcesReferenceCounter_DecrementReferenceCounter, DestroyedActor) == 0x000000, "Member 'TerrainDecorateResourcesReferenceCounter_DecrementReferenceCounter::DestroyedActor' has a wrong offset!");

// Function AT.AT_UIFieldRideIcon.GetType
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldRideIcon_GetType final
{
public:
	ERIDE_ICON_TYPE                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldRideIcon_GetType) == 0x000001, "Wrong alignment on AT_UIFieldRideIcon_GetType");
static_assert(sizeof(AT_UIFieldRideIcon_GetType) == 0x000001, "Wrong size on AT_UIFieldRideIcon_GetType");
static_assert(offsetof(AT_UIFieldRideIcon_GetType, ReturnValue) == 0x000000, "Member 'AT_UIFieldRideIcon_GetType::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldRideIcon.SetBan
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldRideIcon_SetBan final
{
public:
	bool                                          IsBan;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldRideIcon_SetBan) == 0x000001, "Wrong alignment on AT_UIFieldRideIcon_SetBan");
static_assert(sizeof(AT_UIFieldRideIcon_SetBan) == 0x000001, "Wrong size on AT_UIFieldRideIcon_SetBan");
static_assert(offsetof(AT_UIFieldRideIcon_SetBan, IsBan) == 0x000000, "Member 'AT_UIFieldRideIcon_SetBan::IsBan' has a wrong offset!");

// Function AT.AT_UIFieldRideIcon.SetGauge
// 0x0004 (0x0004 - 0x0000)
struct AT_UIFieldRideIcon_SetGauge final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldRideIcon_SetGauge) == 0x000004, "Wrong alignment on AT_UIFieldRideIcon_SetGauge");
static_assert(sizeof(AT_UIFieldRideIcon_SetGauge) == 0x000004, "Wrong size on AT_UIFieldRideIcon_SetGauge");
static_assert(offsetof(AT_UIFieldRideIcon_SetGauge, Value) == 0x000000, "Member 'AT_UIFieldRideIcon_SetGauge::Value' has a wrong offset!");

// Function AT.AT_UIFieldRideIcon.SetRootVisibility
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldRideIcon_SetRootVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldRideIcon_SetRootVisibility) == 0x000001, "Wrong alignment on AT_UIFieldRideIcon_SetRootVisibility");
static_assert(sizeof(AT_UIFieldRideIcon_SetRootVisibility) == 0x000001, "Wrong size on AT_UIFieldRideIcon_SetRootVisibility");
static_assert(offsetof(AT_UIFieldRideIcon_SetRootVisibility, bVisible) == 0x000000, "Member 'AT_UIFieldRideIcon_SetRootVisibility::bVisible' has a wrong offset!");

// Function AT.AT_UIFieldRideIcon.SetType
// 0x0003 (0x0003 - 0x0000)
struct AT_UIFieldRideIcon_SetType final
{
public:
	ERIDE_ICON_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Highlight;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBan;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldRideIcon_SetType) == 0x000001, "Wrong alignment on AT_UIFieldRideIcon_SetType");
static_assert(sizeof(AT_UIFieldRideIcon_SetType) == 0x000003, "Wrong size on AT_UIFieldRideIcon_SetType");
static_assert(offsetof(AT_UIFieldRideIcon_SetType, Type) == 0x000000, "Member 'AT_UIFieldRideIcon_SetType::Type' has a wrong offset!");
static_assert(offsetof(AT_UIFieldRideIcon_SetType, Highlight) == 0x000001, "Member 'AT_UIFieldRideIcon_SetType::Highlight' has a wrong offset!");
static_assert(offsetof(AT_UIFieldRideIcon_SetType, IsBan) == 0x000002, "Member 'AT_UIFieldRideIcon_SetType::IsBan' has a wrong offset!");

// Function AT.AT_UIFieldSearch.DebugGetAT_UIFieldSearch_BP
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldSearch_DebugGetAT_UIFieldSearch_BP final
{
public:
	class UAT_UIFieldSearch*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldSearch_DebugGetAT_UIFieldSearch_BP) == 0x000008, "Wrong alignment on AT_UIFieldSearch_DebugGetAT_UIFieldSearch_BP");
static_assert(sizeof(AT_UIFieldSearch_DebugGetAT_UIFieldSearch_BP) == 0x000008, "Wrong size on AT_UIFieldSearch_DebugGetAT_UIFieldSearch_BP");
static_assert(offsetof(AT_UIFieldSearch_DebugGetAT_UIFieldSearch_BP, ReturnValue) == 0x000000, "Member 'AT_UIFieldSearch_DebugGetAT_UIFieldSearch_BP::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldSearch.AddSearchIcon
// 0x0014 (0x0014 - 0x0000)
struct AT_UIFieldSearch_AddSearchIcon final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EITEM_ICON_TYPE                               Icon;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldSearch_AddSearchIcon) == 0x000004, "Wrong alignment on AT_UIFieldSearch_AddSearchIcon");
static_assert(sizeof(AT_UIFieldSearch_AddSearchIcon) == 0x000014, "Wrong size on AT_UIFieldSearch_AddSearchIcon");
static_assert(offsetof(AT_UIFieldSearch_AddSearchIcon, Pos) == 0x000000, "Member 'AT_UIFieldSearch_AddSearchIcon::Pos' has a wrong offset!");
static_assert(offsetof(AT_UIFieldSearch_AddSearchIcon, Icon) == 0x00000C, "Member 'AT_UIFieldSearch_AddSearchIcon::Icon' has a wrong offset!");
static_assert(offsetof(AT_UIFieldSearch_AddSearchIcon, ReturnValue) == 0x000010, "Member 'AT_UIFieldSearch_AddSearchIcon::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldSearch.RemoveSearchIcon
// 0x0004 (0x0004 - 0x0000)
struct AT_UIFieldSearch_RemoveSearchIcon final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldSearch_RemoveSearchIcon) == 0x000004, "Wrong alignment on AT_UIFieldSearch_RemoveSearchIcon");
static_assert(sizeof(AT_UIFieldSearch_RemoveSearchIcon) == 0x000004, "Wrong size on AT_UIFieldSearch_RemoveSearchIcon");
static_assert(offsetof(AT_UIFieldSearch_RemoveSearchIcon, ID) == 0x000000, "Member 'AT_UIFieldSearch_RemoveSearchIcon::ID' has a wrong offset!");

// Function AT.AT_UIFieldSearch.SetCirclePosition
// 0x000C (0x000C - 0x0000)
struct AT_UIFieldSearch_SetCirclePosition final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldSearch_SetCirclePosition) == 0x000004, "Wrong alignment on AT_UIFieldSearch_SetCirclePosition");
static_assert(sizeof(AT_UIFieldSearch_SetCirclePosition) == 0x00000C, "Wrong size on AT_UIFieldSearch_SetCirclePosition");
static_assert(offsetof(AT_UIFieldSearch_SetCirclePosition, InPos) == 0x000000, "Member 'AT_UIFieldSearch_SetCirclePosition::InPos' has a wrong offset!");

// Function AT.AT_UIFieldSearch.SetCircleRange
// 0x0004 (0x0004 - 0x0000)
struct AT_UIFieldSearch_SetCircleRange final
{
public:
	float                                         InRange;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldSearch_SetCircleRange) == 0x000004, "Wrong alignment on AT_UIFieldSearch_SetCircleRange");
static_assert(sizeof(AT_UIFieldSearch_SetCircleRange) == 0x000004, "Wrong size on AT_UIFieldSearch_SetCircleRange");
static_assert(offsetof(AT_UIFieldSearch_SetCircleRange, InRange) == 0x000000, "Member 'AT_UIFieldSearch_SetCircleRange::InRange' has a wrong offset!");

// Function AT.AT_UIFieldSearch.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldSearch_SetVisible final
{
public:
	bool                                          InIsVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldSearch_SetVisible) == 0x000001, "Wrong alignment on AT_UIFieldSearch_SetVisible");
static_assert(sizeof(AT_UIFieldSearch_SetVisible) == 0x000001, "Wrong size on AT_UIFieldSearch_SetVisible");
static_assert(offsetof(AT_UIFieldSearch_SetVisible, InIsVisible) == 0x000000, "Member 'AT_UIFieldSearch_SetVisible::InIsVisible' has a wrong offset!");

// Function AT.AT_UIFieldTalkFree.DebugGetAT_UIFieldTalkFree_BP
// 0x0008 (0x0008 - 0x0000)
struct AT_UIFieldTalkFree_DebugGetAT_UIFieldTalkFree_BP final
{
public:
	class UAT_UIFieldTalkFree*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldTalkFree_DebugGetAT_UIFieldTalkFree_BP) == 0x000008, "Wrong alignment on AT_UIFieldTalkFree_DebugGetAT_UIFieldTalkFree_BP");
static_assert(sizeof(AT_UIFieldTalkFree_DebugGetAT_UIFieldTalkFree_BP) == 0x000008, "Wrong size on AT_UIFieldTalkFree_DebugGetAT_UIFieldTalkFree_BP");
static_assert(offsetof(AT_UIFieldTalkFree_DebugGetAT_UIFieldTalkFree_BP, ReturnValue) == 0x000000, "Member 'AT_UIFieldTalkFree_DebugGetAT_UIFieldTalkFree_BP::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldTalkFree.CheckEventSpeakOpened
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldTalkFree_CheckEventSpeakOpened final
{
public:
	const class AActor*                           ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldTalkFree_CheckEventSpeakOpened) == 0x000008, "Wrong alignment on AT_UIFieldTalkFree_CheckEventSpeakOpened");
static_assert(sizeof(AT_UIFieldTalkFree_CheckEventSpeakOpened) == 0x000010, "Wrong size on AT_UIFieldTalkFree_CheckEventSpeakOpened");
static_assert(offsetof(AT_UIFieldTalkFree_CheckEventSpeakOpened, ID) == 0x000000, "Member 'AT_UIFieldTalkFree_CheckEventSpeakOpened::ID' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_CheckEventSpeakOpened, ReturnValue) == 0x000008, "Member 'AT_UIFieldTalkFree_CheckEventSpeakOpened::ReturnValue' has a wrong offset!");

// Function AT.AT_UIFieldTalkFree.RequestCloseEventSpeak
// 0x0010 (0x0010 - 0x0000)
struct AT_UIFieldTalkFree_RequestCloseEventSpeak final
{
public:
	const class AActor*                           ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImmediateClose;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIFieldTalkFree_RequestCloseEventSpeak) == 0x000008, "Wrong alignment on AT_UIFieldTalkFree_RequestCloseEventSpeak");
static_assert(sizeof(AT_UIFieldTalkFree_RequestCloseEventSpeak) == 0x000010, "Wrong size on AT_UIFieldTalkFree_RequestCloseEventSpeak");
static_assert(offsetof(AT_UIFieldTalkFree_RequestCloseEventSpeak, ID) == 0x000000, "Member 'AT_UIFieldTalkFree_RequestCloseEventSpeak::ID' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_RequestCloseEventSpeak, IsImmediateClose) == 0x000008, "Member 'AT_UIFieldTalkFree_RequestCloseEventSpeak::IsImmediateClose' has a wrong offset!");

// Function AT.AT_UIFieldTalkFree.RequestOpenEventSpeak
// 0x0048 (0x0048 - 0x0000)
struct AT_UIFieldTalkFree_RequestOpenEventSpeak final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           InTarget;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUseSpecialFrame;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InSpeakerUniqueId;                                 // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AQuestCharacter*                        InOwner;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStringId;                                        // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InLifeTime;                                        // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldTalkFree_RequestOpenEventSpeak) == 0x000008, "Wrong alignment on AT_UIFieldTalkFree_RequestOpenEventSpeak");
static_assert(sizeof(AT_UIFieldTalkFree_RequestOpenEventSpeak) == 0x000048, "Wrong size on AT_UIFieldTalkFree_RequestOpenEventSpeak");
static_assert(offsetof(AT_UIFieldTalkFree_RequestOpenEventSpeak, InPos) == 0x000000, "Member 'AT_UIFieldTalkFree_RequestOpenEventSpeak::InPos' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_RequestOpenEventSpeak, InTarget) == 0x000010, "Member 'AT_UIFieldTalkFree_RequestOpenEventSpeak::InTarget' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_RequestOpenEventSpeak, bInUseSpecialFrame) == 0x000018, "Member 'AT_UIFieldTalkFree_RequestOpenEventSpeak::bInUseSpecialFrame' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_RequestOpenEventSpeak, InSpeakerUniqueId) == 0x000020, "Member 'AT_UIFieldTalkFree_RequestOpenEventSpeak::InSpeakerUniqueId' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_RequestOpenEventSpeak, InOwner) == 0x000028, "Member 'AT_UIFieldTalkFree_RequestOpenEventSpeak::InOwner' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_RequestOpenEventSpeak, InString) == 0x000030, "Member 'AT_UIFieldTalkFree_RequestOpenEventSpeak::InString' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_RequestOpenEventSpeak, IsStringId) == 0x000040, "Member 'AT_UIFieldTalkFree_RequestOpenEventSpeak::IsStringId' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFree_RequestOpenEventSpeak, InLifeTime) == 0x000044, "Member 'AT_UIFieldTalkFree_RequestOpenEventSpeak::InLifeTime' has a wrong offset!");

// Function AT.AT_UIFieldTalkFreeCore.DebugRequest
// 0x0018 (0x0018 - 0x0000)
struct AT_UIFieldTalkFreeCore_DebugRequest final
{
public:
	const class AActor*                           Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InStr;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldTalkFreeCore_DebugRequest) == 0x000008, "Wrong alignment on AT_UIFieldTalkFreeCore_DebugRequest");
static_assert(sizeof(AT_UIFieldTalkFreeCore_DebugRequest) == 0x000018, "Wrong size on AT_UIFieldTalkFreeCore_DebugRequest");
static_assert(offsetof(AT_UIFieldTalkFreeCore_DebugRequest, Obj) == 0x000000, "Member 'AT_UIFieldTalkFreeCore_DebugRequest::Obj' has a wrong offset!");
static_assert(offsetof(AT_UIFieldTalkFreeCore_DebugRequest, InStr) == 0x000008, "Member 'AT_UIFieldTalkFreeCore_DebugRequest::InStr' has a wrong offset!");

// Function AT.AT_UIFieldTalkFreeCore.IsEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UIFieldTalkFreeCore_IsEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIFieldTalkFreeCore_IsEnd) == 0x000001, "Wrong alignment on AT_UIFieldTalkFreeCore_IsEnd");
static_assert(sizeof(AT_UIFieldTalkFreeCore_IsEnd) == 0x000001, "Wrong size on AT_UIFieldTalkFreeCore_IsEnd");
static_assert(offsetof(AT_UIFieldTalkFreeCore_IsEnd, ReturnValue) == 0x000000, "Member 'AT_UIFieldTalkFreeCore_IsEnd::ReturnValue' has a wrong offset!");

// Function AT.AT_UIQuestNavigation.ClearSubQuestList
// 0x0008 (0x0008 - 0x0000)
struct AT_UIQuestNavigation_ClearSubQuestList final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestNavigation_ClearSubQuestList) == 0x000004, "Wrong alignment on AT_UIQuestNavigation_ClearSubQuestList");
static_assert(sizeof(AT_UIQuestNavigation_ClearSubQuestList) == 0x000008, "Wrong size on AT_UIQuestNavigation_ClearSubQuestList");
static_assert(offsetof(AT_UIQuestNavigation_ClearSubQuestList, QuestId) == 0x000000, "Member 'AT_UIQuestNavigation_ClearSubQuestList::QuestId' has a wrong offset!");

// Function AT.AT_UIQuestNavigation.OnChangedExtendProgress
// 0x0008 (0x0008 - 0x0000)
struct AT_UIQuestNavigation_OnChangedExtendProgress final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestNavigation_OnChangedExtendProgress) == 0x000004, "Wrong alignment on AT_UIQuestNavigation_OnChangedExtendProgress");
static_assert(sizeof(AT_UIQuestNavigation_OnChangedExtendProgress) == 0x000008, "Wrong size on AT_UIQuestNavigation_OnChangedExtendProgress");
static_assert(offsetof(AT_UIQuestNavigation_OnChangedExtendProgress, ProgressID) == 0x000000, "Member 'AT_UIQuestNavigation_OnChangedExtendProgress::ProgressID' has a wrong offset!");

// Function AT.AT_UIQuestNavigation.OnChangedProgress
// 0x0008 (0x0008 - 0x0000)
struct AT_UIQuestNavigation_OnChangedProgress final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestNavigation_OnChangedProgress) == 0x000004, "Wrong alignment on AT_UIQuestNavigation_OnChangedProgress");
static_assert(sizeof(AT_UIQuestNavigation_OnChangedProgress) == 0x000008, "Wrong size on AT_UIQuestNavigation_OnChangedProgress");
static_assert(offsetof(AT_UIQuestNavigation_OnChangedProgress, ProgressID) == 0x000000, "Member 'AT_UIQuestNavigation_OnChangedProgress::ProgressID' has a wrong offset!");

// Function AT.AT_UIQuestNavigation.PlayInQuestListAndUpdateList
// 0x0080 (0x0080 - 0x0000)
struct AT_UIQuestNavigation_PlayInQuestListAndUpdateList final
{
public:
	struct FUIQuestInfo                           InQuestInfo;                                       // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestNavigation_PlayInQuestListAndUpdateList) == 0x000008, "Wrong alignment on AT_UIQuestNavigation_PlayInQuestListAndUpdateList");
static_assert(sizeof(AT_UIQuestNavigation_PlayInQuestListAndUpdateList) == 0x000080, "Wrong size on AT_UIQuestNavigation_PlayInQuestListAndUpdateList");
static_assert(offsetof(AT_UIQuestNavigation_PlayInQuestListAndUpdateList, InQuestInfo) == 0x000000, "Member 'AT_UIQuestNavigation_PlayInQuestListAndUpdateList::InQuestInfo' has a wrong offset!");

// Function AT.AT_UIQuestNavigation.SetMainQuestCollectionNum
// 0x0008 (0x0008 - 0x0000)
struct AT_UIQuestNavigation_SetMainQuestCollectionNum final
{
public:
	int32                                         InListIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGetNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestNavigation_SetMainQuestCollectionNum) == 0x000004, "Wrong alignment on AT_UIQuestNavigation_SetMainQuestCollectionNum");
static_assert(sizeof(AT_UIQuestNavigation_SetMainQuestCollectionNum) == 0x000008, "Wrong size on AT_UIQuestNavigation_SetMainQuestCollectionNum");
static_assert(offsetof(AT_UIQuestNavigation_SetMainQuestCollectionNum, InListIndex) == 0x000000, "Member 'AT_UIQuestNavigation_SetMainQuestCollectionNum::InListIndex' has a wrong offset!");
static_assert(offsetof(AT_UIQuestNavigation_SetMainQuestCollectionNum, InGetNum) == 0x000004, "Member 'AT_UIQuestNavigation_SetMainQuestCollectionNum::InGetNum' has a wrong offset!");

// Function AT.AT_UIQuestNavigation.SetSubQuestCollectionNum
// 0x0008 (0x0008 - 0x0000)
struct AT_UIQuestNavigation_SetSubQuestCollectionNum final
{
public:
	int32                                         InListIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGetNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestNavigation_SetSubQuestCollectionNum) == 0x000004, "Wrong alignment on AT_UIQuestNavigation_SetSubQuestCollectionNum");
static_assert(sizeof(AT_UIQuestNavigation_SetSubQuestCollectionNum) == 0x000008, "Wrong size on AT_UIQuestNavigation_SetSubQuestCollectionNum");
static_assert(offsetof(AT_UIQuestNavigation_SetSubQuestCollectionNum, InListIndex) == 0x000000, "Member 'AT_UIQuestNavigation_SetSubQuestCollectionNum::InListIndex' has a wrong offset!");
static_assert(offsetof(AT_UIQuestNavigation_SetSubQuestCollectionNum, InGetNum) == 0x000004, "Member 'AT_UIQuestNavigation_SetSubQuestCollectionNum::InGetNum' has a wrong offset!");

// Function AT.AT_UIQuestNavigation.StartQuest
// 0x0080 (0x0080 - 0x0000)
struct AT_UIQuestNavigation_StartQuest final
{
public:
	struct FUIQuestInfo                           InQuestInfo;                                       // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestNavigation_StartQuest) == 0x000008, "Wrong alignment on AT_UIQuestNavigation_StartQuest");
static_assert(sizeof(AT_UIQuestNavigation_StartQuest) == 0x000080, "Wrong size on AT_UIQuestNavigation_StartQuest");
static_assert(offsetof(AT_UIQuestNavigation_StartQuest, InQuestInfo) == 0x000000, "Member 'AT_UIQuestNavigation_StartQuest::InQuestInfo' has a wrong offset!");

// Function AT.AT_UIQuestNavigation.UpdateQuestList
// 0x0080 (0x0080 - 0x0000)
struct AT_UIQuestNavigation_UpdateQuestList final
{
public:
	struct FUIQuestInfo                           InQuestInfo;                                       // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestNavigation_UpdateQuestList) == 0x000008, "Wrong alignment on AT_UIQuestNavigation_UpdateQuestList");
static_assert(sizeof(AT_UIQuestNavigation_UpdateQuestList) == 0x000080, "Wrong size on AT_UIQuestNavigation_UpdateQuestList");
static_assert(offsetof(AT_UIQuestNavigation_UpdateQuestList, InQuestInfo) == 0x000000, "Member 'AT_UIQuestNavigation_UpdateQuestList::InQuestInfo' has a wrong offset!");

// Function AT.AT_UIGameover.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIGameover_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIGameover_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIGameover_MouseClickDecide");
static_assert(sizeof(AT_UIGameover_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIGameover_MouseClickDecide");
static_assert(offsetof(AT_UIGameover_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIGameover_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIGameover_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIGameover_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIGameTitle.ListDown
// 0x0001 (0x0001 - 0x0000)
struct AT_UIGameTitle_ListDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIGameTitle_ListDown) == 0x000001, "Wrong alignment on AT_UIGameTitle_ListDown");
static_assert(sizeof(AT_UIGameTitle_ListDown) == 0x000001, "Wrong size on AT_UIGameTitle_ListDown");
static_assert(offsetof(AT_UIGameTitle_ListDown, ReturnValue) == 0x000000, "Member 'AT_UIGameTitle_ListDown::ReturnValue' has a wrong offset!");

// Function AT.AT_UIGameTitle.ListUp
// 0x0001 (0x0001 - 0x0000)
struct AT_UIGameTitle_ListUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIGameTitle_ListUp) == 0x000001, "Wrong alignment on AT_UIGameTitle_ListUp");
static_assert(sizeof(AT_UIGameTitle_ListUp) == 0x000001, "Wrong size on AT_UIGameTitle_ListUp");
static_assert(offsetof(AT_UIGameTitle_ListUp, ReturnValue) == 0x000000, "Member 'AT_UIGameTitle_ListUp::ReturnValue' has a wrong offset!");

// Function AT.AT_UIGameTitle.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIGameTitle_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIGameTitle_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIGameTitle_MouseClickDecide");
static_assert(sizeof(AT_UIGameTitle_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIGameTitle_MouseClickDecide");
static_assert(offsetof(AT_UIGameTitle_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIGameTitle_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIGameTitle_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIGameTitle_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIGameTitle.SetWorldContext
// 0x0008 (0x0008 - 0x0000)
struct AT_UIGameTitle_SetWorldContext final
{
public:
	class UObject*                                A_WorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIGameTitle_SetWorldContext) == 0x000008, "Wrong alignment on AT_UIGameTitle_SetWorldContext");
static_assert(sizeof(AT_UIGameTitle_SetWorldContext) == 0x000008, "Wrong size on AT_UIGameTitle_SetWorldContext");
static_assert(offsetof(AT_UIGameTitle_SetWorldContext, A_WorldContextObject) == 0x000000, "Member 'AT_UIGameTitle_SetWorldContext::A_WorldContextObject' has a wrong offset!");

// Function AT.AT_UIGameWindow.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIGameWindow_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIGameWindow_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIGameWindow_MouseClickDecide");
static_assert(sizeof(AT_UIGameWindow_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIGameWindow_MouseClickDecide");
static_assert(offsetof(AT_UIGameWindow_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIGameWindow_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIGameWindow_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIGameWindow_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIGameWindow.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIGameWindow_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIGameWindow_MouseWheel) == 0x000004, "Wrong alignment on AT_UIGameWindow_MouseWheel");
static_assert(sizeof(AT_UIGameWindow_MouseWheel) == 0x000004, "Wrong size on AT_UIGameWindow_MouseWheel");
static_assert(offsetof(AT_UIGameWindow_MouseWheel, Dir) == 0x000000, "Member 'AT_UIGameWindow_MouseWheel::Dir' has a wrong offset!");

// Function AT.QuestPhaseBase.RequestDisplayPurpose
// 0x0108 (0x0108 - 0x0000)
struct QuestPhaseBase_RequestDisplayPurpose final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestPhaseBase_RequestDisplayPurpose) == 0x000008, "Wrong alignment on QuestPhaseBase_RequestDisplayPurpose");
static_assert(sizeof(QuestPhaseBase_RequestDisplayPurpose) == 0x000108, "Wrong size on QuestPhaseBase_RequestDisplayPurpose");
static_assert(offsetof(QuestPhaseBase_RequestDisplayPurpose, EventParam) == 0x000000, "Member 'QuestPhaseBase_RequestDisplayPurpose::EventParam' has a wrong offset!");

// Function AT.AT_UIScrollText.SetText
// 0x0010 (0x0010 - 0x0000)
struct AT_UIScrollText_SetText final
{
public:
	class FString                                 StrTxt;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIScrollText_SetText) == 0x000008, "Wrong alignment on AT_UIScrollText_SetText");
static_assert(sizeof(AT_UIScrollText_SetText) == 0x000010, "Wrong size on AT_UIScrollText_SetText");
static_assert(offsetof(AT_UIScrollText_SetText, StrTxt) == 0x000000, "Member 'AT_UIScrollText_SetText::StrTxt' has a wrong offset!");

// Function AT.AT_UIItemMenu.ChangeSelectMenuPageDown
// 0x0001 (0x0001 - 0x0000)
struct AT_UIItemMenu_ChangeSelectMenuPageDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIItemMenu_ChangeSelectMenuPageDown) == 0x000001, "Wrong alignment on AT_UIItemMenu_ChangeSelectMenuPageDown");
static_assert(sizeof(AT_UIItemMenu_ChangeSelectMenuPageDown) == 0x000001, "Wrong size on AT_UIItemMenu_ChangeSelectMenuPageDown");
static_assert(offsetof(AT_UIItemMenu_ChangeSelectMenuPageDown, ReturnValue) == 0x000000, "Member 'AT_UIItemMenu_ChangeSelectMenuPageDown::ReturnValue' has a wrong offset!");

// Function AT.AT_UIItemMenu.ChangeSelectMenuPageUp
// 0x0001 (0x0001 - 0x0000)
struct AT_UIItemMenu_ChangeSelectMenuPageUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIItemMenu_ChangeSelectMenuPageUp) == 0x000001, "Wrong alignment on AT_UIItemMenu_ChangeSelectMenuPageUp");
static_assert(sizeof(AT_UIItemMenu_ChangeSelectMenuPageUp) == 0x000001, "Wrong size on AT_UIItemMenu_ChangeSelectMenuPageUp");
static_assert(offsetof(AT_UIItemMenu_ChangeSelectMenuPageUp, ReturnValue) == 0x000000, "Member 'AT_UIItemMenu_ChangeSelectMenuPageUp::ReturnValue' has a wrong offset!");

// Function AT.AT_UIItemMenu.ChangeSelectTab
// 0x0001 (0x0001 - 0x0000)
struct AT_UIItemMenu_ChangeSelectTab final
{
public:
	bool                                          IsLeft;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIItemMenu_ChangeSelectTab) == 0x000001, "Wrong alignment on AT_UIItemMenu_ChangeSelectTab");
static_assert(sizeof(AT_UIItemMenu_ChangeSelectTab) == 0x000001, "Wrong size on AT_UIItemMenu_ChangeSelectTab");
static_assert(offsetof(AT_UIItemMenu_ChangeSelectTab, IsLeft) == 0x000000, "Member 'AT_UIItemMenu_ChangeSelectTab::IsLeft' has a wrong offset!");

// Function AT.AT_UIItemMenu.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIItemMenu_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIItemMenu_MouseWheel) == 0x000004, "Wrong alignment on AT_UIItemMenu_MouseWheel");
static_assert(sizeof(AT_UIItemMenu_MouseWheel) == 0x000004, "Wrong size on AT_UIItemMenu_MouseWheel");
static_assert(offsetof(AT_UIItemMenu_MouseWheel, Dir) == 0x000000, "Member 'AT_UIItemMenu_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIItemMenu.SetSelectTab
// 0x0004 (0x0004 - 0x0000)
struct AT_UIItemMenu_SetSelectTab final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIItemMenu_SetSelectTab) == 0x000004, "Wrong alignment on AT_UIItemMenu_SetSelectTab");
static_assert(sizeof(AT_UIItemMenu_SetSelectTab) == 0x000004, "Wrong size on AT_UIItemMenu_SetSelectTab");
static_assert(offsetof(AT_UIItemMenu_SetSelectTab, Index_0) == 0x000000, "Member 'AT_UIItemMenu_SetSelectTab::Index_0' has a wrong offset!");

// Function AT.AT_UIItemMenu.IsAnimCompleted
// 0x0001 (0x0001 - 0x0000)
struct AT_UIItemMenu_IsAnimCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIItemMenu_IsAnimCompleted) == 0x000001, "Wrong alignment on AT_UIItemMenu_IsAnimCompleted");
static_assert(sizeof(AT_UIItemMenu_IsAnimCompleted) == 0x000001, "Wrong size on AT_UIItemMenu_IsAnimCompleted");
static_assert(offsetof(AT_UIItemMenu_IsAnimCompleted, ReturnValue) == 0x000000, "Member 'AT_UIItemMenu_IsAnimCompleted::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMapManager.SwitchMap
// 0x0002 (0x0002 - 0x0000)
struct AT_UIMapManager_SwitchMap final
{
public:
	uint8                                         MapState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AnimState;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapManager_SwitchMap) == 0x000001, "Wrong alignment on AT_UIMapManager_SwitchMap");
static_assert(sizeof(AT_UIMapManager_SwitchMap) == 0x000002, "Wrong size on AT_UIMapManager_SwitchMap");
static_assert(offsetof(AT_UIMapManager_SwitchMap, MapState) == 0x000000, "Member 'AT_UIMapManager_SwitchMap::MapState' has a wrong offset!");
static_assert(offsetof(AT_UIMapManager_SwitchMap, AnimState) == 0x000001, "Member 'AT_UIMapManager_SwitchMap::AnimState' has a wrong offset!");

// Function AT.AT_UIMapWorld.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIMapWorld_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapWorld_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIMapWorld_MouseClickDecide");
static_assert(sizeof(AT_UIMapWorld_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIMapWorld_MouseClickDecide");
static_assert(offsetof(AT_UIMapWorld_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIMapWorld_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIMapWorld_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIMapWorld_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIMapWorld.OnCursorMove
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIMapWorld_OnCursorMove final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMapWorld_OnCursorMove) == 0x000008, "Wrong alignment on AT_UIMapWorld_OnCursorMove");
static_assert(sizeof(AT_UIMapWorld_OnCursorMove) == 0x0000A8, "Wrong size on AT_UIMapWorld_OnCursorMove");
static_assert(offsetof(AT_UIMapWorld_OnCursorMove, InGeometry) == 0x000000, "Member 'AT_UIMapWorld_OnCursorMove::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIMapWorld_OnCursorMove, InMouseEvent) == 0x000038, "Member 'AT_UIMapWorld_OnCursorMove::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIList03Choice.SetMenu
// 0x0018 (0x0018 - 0x0000)
struct AT_UIList03Choice_SetMenu final
{
public:
	class FString                                 NameTxt;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewIcon;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsActive;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsCheck;                                         // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIList03Choice_SetMenu) == 0x000008, "Wrong alignment on AT_UIList03Choice_SetMenu");
static_assert(sizeof(AT_UIList03Choice_SetMenu) == 0x000018, "Wrong size on AT_UIList03Choice_SetMenu");
static_assert(offsetof(AT_UIList03Choice_SetMenu, NameTxt) == 0x000000, "Member 'AT_UIList03Choice_SetMenu::NameTxt' has a wrong offset!");
static_assert(offsetof(AT_UIList03Choice_SetMenu, IsNewIcon) == 0x000010, "Member 'AT_UIList03Choice_SetMenu::IsNewIcon' has a wrong offset!");
static_assert(offsetof(AT_UIList03Choice_SetMenu, InIsActive) == 0x000011, "Member 'AT_UIList03Choice_SetMenu::InIsActive' has a wrong offset!");
static_assert(offsetof(AT_UIList03Choice_SetMenu, InIsCheck) == 0x000012, "Member 'AT_UIList03Choice_SetMenu::InIsCheck' has a wrong offset!");

// Function AT.AT_UIList03Choice.SetSelect
// 0x0001 (0x0001 - 0x0000)
struct AT_UIList03Choice_SetSelect final
{
public:
	bool                                          IsSelect;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIList03Choice_SetSelect) == 0x000001, "Wrong alignment on AT_UIList03Choice_SetSelect");
static_assert(sizeof(AT_UIList03Choice_SetSelect) == 0x000001, "Wrong size on AT_UIList03Choice_SetSelect");
static_assert(offsetof(AT_UIList03Choice_SetSelect, IsSelect) == 0x000000, "Member 'AT_UIList03Choice_SetSelect::IsSelect' has a wrong offset!");

// Function AT.AT_UIList03Choice.CanSelect
// 0x0001 (0x0001 - 0x0000)
struct AT_UIList03Choice_CanSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIList03Choice_CanSelect) == 0x000001, "Wrong alignment on AT_UIList03Choice_CanSelect");
static_assert(sizeof(AT_UIList03Choice_CanSelect) == 0x000001, "Wrong size on AT_UIList03Choice_CanSelect");
static_assert(offsetof(AT_UIList03Choice_CanSelect, ReturnValue) == 0x000000, "Member 'AT_UIList03Choice_CanSelect::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMenuWindow.SetupListConfirmWindow
// 0x0030 (0x0030 - 0x0000)
struct AT_UIMenuWindow_SetupListConfirmWindow final
{
public:
	class FString                                 TitleTxt;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMenuWIndowSetupListNumMenuInfo> ListCtn;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ChoiceCtn;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMenuWindow_SetupListConfirmWindow) == 0x000008, "Wrong alignment on AT_UIMenuWindow_SetupListConfirmWindow");
static_assert(sizeof(AT_UIMenuWindow_SetupListConfirmWindow) == 0x000030, "Wrong size on AT_UIMenuWindow_SetupListConfirmWindow");
static_assert(offsetof(AT_UIMenuWindow_SetupListConfirmWindow, TitleTxt) == 0x000000, "Member 'AT_UIMenuWindow_SetupListConfirmWindow::TitleTxt' has a wrong offset!");
static_assert(offsetof(AT_UIMenuWindow_SetupListConfirmWindow, ListCtn) == 0x000010, "Member 'AT_UIMenuWindow_SetupListConfirmWindow::ListCtn' has a wrong offset!");
static_assert(offsetof(AT_UIMenuWindow_SetupListConfirmWindow, ChoiceCtn) == 0x000020, "Member 'AT_UIMenuWindow_SetupListConfirmWindow::ChoiceCtn' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.GetCircleRadius
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMiniGameRace_GetCircleRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_GetCircleRadius) == 0x000004, "Wrong alignment on AT_UIMiniGameRace_GetCircleRadius");
static_assert(sizeof(AT_UIMiniGameRace_GetCircleRadius) == 0x000004, "Wrong size on AT_UIMiniGameRace_GetCircleRadius");
static_assert(offsetof(AT_UIMiniGameRace_GetCircleRadius, ReturnValue) == 0x000000, "Member 'AT_UIMiniGameRace_GetCircleRadius::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.GetNextCheckPointLocation
// 0x000C (0x000C - 0x0000)
struct AT_UIMiniGameRace_GetNextCheckPointLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_GetNextCheckPointLocation) == 0x000004, "Wrong alignment on AT_UIMiniGameRace_GetNextCheckPointLocation");
static_assert(sizeof(AT_UIMiniGameRace_GetNextCheckPointLocation) == 0x00000C, "Wrong size on AT_UIMiniGameRace_GetNextCheckPointLocation");
static_assert(offsetof(AT_UIMiniGameRace_GetNextCheckPointLocation, ReturnValue) == 0x000000, "Member 'AT_UIMiniGameRace_GetNextCheckPointLocation::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.GetPlayerLocation
// 0x000C (0x000C - 0x0000)
struct AT_UIMiniGameRace_GetPlayerLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_GetPlayerLocation) == 0x000004, "Wrong alignment on AT_UIMiniGameRace_GetPlayerLocation");
static_assert(sizeof(AT_UIMiniGameRace_GetPlayerLocation) == 0x00000C, "Wrong size on AT_UIMiniGameRace_GetPlayerLocation");
static_assert(offsetof(AT_UIMiniGameRace_GetPlayerLocation, ReturnValue) == 0x000000, "Member 'AT_UIMiniGameRace_GetPlayerLocation::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.SetCheckPoint
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMiniGameRace_SetCheckPoint final
{
public:
	int32                                         NowNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_SetCheckPoint) == 0x000004, "Wrong alignment on AT_UIMiniGameRace_SetCheckPoint");
static_assert(sizeof(AT_UIMiniGameRace_SetCheckPoint) == 0x000008, "Wrong size on AT_UIMiniGameRace_SetCheckPoint");
static_assert(offsetof(AT_UIMiniGameRace_SetCheckPoint, NowNum) == 0x000000, "Member 'AT_UIMiniGameRace_SetCheckPoint::NowNum' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameRace_SetCheckPoint, MaxNum) == 0x000004, "Member 'AT_UIMiniGameRace_SetCheckPoint::MaxNum' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.SetCircleRadius
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMiniGameRace_SetCircleRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_SetCircleRadius) == 0x000004, "Wrong alignment on AT_UIMiniGameRace_SetCircleRadius");
static_assert(sizeof(AT_UIMiniGameRace_SetCircleRadius) == 0x000004, "Wrong size on AT_UIMiniGameRace_SetCircleRadius");
static_assert(offsetof(AT_UIMiniGameRace_SetCircleRadius, Radius) == 0x000000, "Member 'AT_UIMiniGameRace_SetCircleRadius::Radius' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.SetLimitTime
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMiniGameRace_SetLimitTime final
{
public:
	struct FTimespan                              TimeLimit;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_SetLimitTime) == 0x000008, "Wrong alignment on AT_UIMiniGameRace_SetLimitTime");
static_assert(sizeof(AT_UIMiniGameRace_SetLimitTime) == 0x000008, "Wrong size on AT_UIMiniGameRace_SetLimitTime");
static_assert(offsetof(AT_UIMiniGameRace_SetLimitTime, TimeLimit) == 0x000000, "Member 'AT_UIMiniGameRace_SetLimitTime::TimeLimit' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.SetNextCheckPointLocation
// 0x000C (0x000C - 0x0000)
struct AT_UIMiniGameRace_SetNextCheckPointLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_SetNextCheckPointLocation) == 0x000004, "Wrong alignment on AT_UIMiniGameRace_SetNextCheckPointLocation");
static_assert(sizeof(AT_UIMiniGameRace_SetNextCheckPointLocation) == 0x00000C, "Wrong size on AT_UIMiniGameRace_SetNextCheckPointLocation");
static_assert(offsetof(AT_UIMiniGameRace_SetNextCheckPointLocation, Location) == 0x000000, "Member 'AT_UIMiniGameRace_SetNextCheckPointLocation::Location' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.SetPlayerLocation
// 0x000C (0x000C - 0x0000)
struct AT_UIMiniGameRace_SetPlayerLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_SetPlayerLocation) == 0x000004, "Wrong alignment on AT_UIMiniGameRace_SetPlayerLocation");
static_assert(sizeof(AT_UIMiniGameRace_SetPlayerLocation) == 0x00000C, "Wrong size on AT_UIMiniGameRace_SetPlayerLocation");
static_assert(offsetof(AT_UIMiniGameRace_SetPlayerLocation, Location) == 0x000000, "Member 'AT_UIMiniGameRace_SetPlayerLocation::Location' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.SetSpped
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMiniGameRace_SetSpped final
{
public:
	int32                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_SetSpped) == 0x000004, "Wrong alignment on AT_UIMiniGameRace_SetSpped");
static_assert(sizeof(AT_UIMiniGameRace_SetSpped) == 0x000004, "Wrong size on AT_UIMiniGameRace_SetSpped");
static_assert(offsetof(AT_UIMiniGameRace_SetSpped, Speed) == 0x000000, "Member 'AT_UIMiniGameRace_SetSpped::Speed' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.SetTime
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMiniGameRace_SetTime final
{
public:
	struct FTimespan                              TimeLimit;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_SetTime) == 0x000008, "Wrong alignment on AT_UIMiniGameRace_SetTime");
static_assert(sizeof(AT_UIMiniGameRace_SetTime) == 0x000008, "Wrong size on AT_UIMiniGameRace_SetTime");
static_assert(offsetof(AT_UIMiniGameRace_SetTime, TimeLimit) == 0x000000, "Member 'AT_UIMiniGameRace_SetTime::TimeLimit' has a wrong offset!");

// Function AT.AT_UIMiniGameRace.UpdateDirection
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMiniGameRace_UpdateDirection final
{
public:
	class AHUD*                                   HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameRace_UpdateDirection) == 0x000008, "Wrong alignment on AT_UIMiniGameRace_UpdateDirection");
static_assert(sizeof(AT_UIMiniGameRace_UpdateDirection) == 0x000008, "Wrong size on AT_UIMiniGameRace_UpdateDirection");
static_assert(offsetof(AT_UIMiniGameRace_UpdateDirection, HUD) == 0x000000, "Member 'AT_UIMiniGameRace_UpdateDirection::HUD' has a wrong offset!");

// Function AT.AT_UIMiniGameResult.DebugOpenWindow
// 0x0004 (0x0004 - 0x0000)
struct AT_UIMiniGameResult_DebugOpenWindow final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameResult_DebugOpenWindow) == 0x000004, "Wrong alignment on AT_UIMiniGameResult_DebugOpenWindow");
static_assert(sizeof(AT_UIMiniGameResult_DebugOpenWindow) == 0x000004, "Wrong size on AT_UIMiniGameResult_DebugOpenWindow");
static_assert(offsetof(AT_UIMiniGameResult_DebugOpenWindow, Num) == 0x000000, "Member 'AT_UIMiniGameResult_DebugOpenWindow::Num' has a wrong offset!");

// Function AT.AT_UIMiniGameResult.DebugRequest
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMiniGameResult_DebugRequest final
{
public:
	EMiniGameType                                 MiniGameType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameResult_DebugRequest) == 0x000001, "Wrong alignment on AT_UIMiniGameResult_DebugRequest");
static_assert(sizeof(AT_UIMiniGameResult_DebugRequest) == 0x000001, "Wrong size on AT_UIMiniGameResult_DebugRequest");
static_assert(offsetof(AT_UIMiniGameResult_DebugRequest, MiniGameType) == 0x000000, "Member 'AT_UIMiniGameResult_DebugRequest::MiniGameType' has a wrong offset!");

// Function AT.AT_UIMiniGameTop.GetSelectItem
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMiniGameTop_GetSelectItem final
{
public:
	EUI_MINIGAME_TOP_ESELECT_ID                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameTop_GetSelectItem) == 0x000001, "Wrong alignment on AT_UIMiniGameTop_GetSelectItem");
static_assert(sizeof(AT_UIMiniGameTop_GetSelectItem) == 0x000001, "Wrong size on AT_UIMiniGameTop_GetSelectItem");
static_assert(offsetof(AT_UIMiniGameTop_GetSelectItem, ReturnValue) == 0x000000, "Member 'AT_UIMiniGameTop_GetSelectItem::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMiniGameTop.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIMiniGameTop_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameTop_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIMiniGameTop_MouseClickDecide");
static_assert(sizeof(AT_UIMiniGameTop_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIMiniGameTop_MouseClickDecide");
static_assert(offsetof(AT_UIMiniGameTop_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIMiniGameTop_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameTop_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIMiniGameTop_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIMiniGameTop.SetRecordWithPoints
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMiniGameTop_SetRecordWithPoints final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Points;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameTop_SetRecordWithPoints) == 0x000004, "Wrong alignment on AT_UIMiniGameTop_SetRecordWithPoints");
static_assert(sizeof(AT_UIMiniGameTop_SetRecordWithPoints) == 0x000008, "Wrong size on AT_UIMiniGameTop_SetRecordWithPoints");
static_assert(offsetof(AT_UIMiniGameTop_SetRecordWithPoints, Rank) == 0x000000, "Member 'AT_UIMiniGameTop_SetRecordWithPoints::Rank' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameTop_SetRecordWithPoints, Points) == 0x000004, "Member 'AT_UIMiniGameTop_SetRecordWithPoints::Points' has a wrong offset!");

// Function AT.AT_UIMiniGameTop.SetRecordWithTime
// 0x0010 (0x0010 - 0x0000)
struct AT_UIMiniGameTop_SetRecordWithTime final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              BestTime;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameTop_SetRecordWithTime) == 0x000008, "Wrong alignment on AT_UIMiniGameTop_SetRecordWithTime");
static_assert(sizeof(AT_UIMiniGameTop_SetRecordWithTime) == 0x000010, "Wrong size on AT_UIMiniGameTop_SetRecordWithTime");
static_assert(offsetof(AT_UIMiniGameTop_SetRecordWithTime, Rank) == 0x000000, "Member 'AT_UIMiniGameTop_SetRecordWithTime::Rank' has a wrong offset!");
static_assert(offsetof(AT_UIMiniGameTop_SetRecordWithTime, BestTime) == 0x000008, "Member 'AT_UIMiniGameTop_SetRecordWithTime::BestTime' has a wrong offset!");

// Function AT.AT_UIMiniGameTop.SetType
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMiniGameTop_SetType final
{
public:
	EMINIGAMETOPTYPE_ID                           InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameTop_SetType) == 0x000001, "Wrong alignment on AT_UIMiniGameTop_SetType");
static_assert(sizeof(AT_UIMiniGameTop_SetType) == 0x000001, "Wrong size on AT_UIMiniGameTop_SetType");
static_assert(offsetof(AT_UIMiniGameTop_SetType, InType) == 0x000000, "Member 'AT_UIMiniGameTop_SetType::InType' has a wrong offset!");

// Function AT.AT_UIMiniGameTop.GetType
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMiniGameTop_GetType final
{
public:
	EMINIGAMETOPTYPE_ID                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameTop_GetType) == 0x000001, "Wrong alignment on AT_UIMiniGameTop_GetType");
static_assert(sizeof(AT_UIMiniGameTop_GetType) == 0x000001, "Wrong size on AT_UIMiniGameTop_GetType");
static_assert(offsetof(AT_UIMiniGameTop_GetType, ReturnValue) == 0x000000, "Member 'AT_UIMiniGameTop_GetType::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMiniGameTop.IsEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UIMiniGameTop_IsEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniGameTop_IsEnd) == 0x000001, "Wrong alignment on AT_UIMiniGameTop_IsEnd");
static_assert(sizeof(AT_UIMiniGameTop_IsEnd) == 0x000001, "Wrong size on AT_UIMiniGameTop_IsEnd");
static_assert(offsetof(AT_UIMiniGameTop_IsEnd, ReturnValue) == 0x000000, "Member 'AT_UIMiniGameTop_IsEnd::ReturnValue' has a wrong offset!");

// Function AT.AT_UIMiniMapRadar.OnChangePlayer
// 0x0008 (0x0008 - 0x0000)
struct AT_UIMiniMapRadar_OnChangePlayer final
{
public:
	class AAT_Character*                          InPlayerIns;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIMiniMapRadar_OnChangePlayer) == 0x000008, "Wrong alignment on AT_UIMiniMapRadar_OnChangePlayer");
static_assert(sizeof(AT_UIMiniMapRadar_OnChangePlayer) == 0x000008, "Wrong size on AT_UIMiniMapRadar_OnChangePlayer");
static_assert(offsetof(AT_UIMiniMapRadar_OnChangePlayer, InPlayerIns) == 0x000000, "Member 'AT_UIMiniMapRadar_OnChangePlayer::InPlayerIns' has a wrong offset!");

// Function AT.ATActGroundBattleDmgBlowoff.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActGroundBattleDmgBlowoff_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActGroundBattleDmgBlowoff_OnHitPhoton) == 0x000008, "Wrong alignment on ATActGroundBattleDmgBlowoff_OnHitPhoton");
static_assert(sizeof(ATActGroundBattleDmgBlowoff_OnHitPhoton) == 0x000020, "Wrong size on ATActGroundBattleDmgBlowoff_OnHitPhoton");
static_assert(offsetof(ATActGroundBattleDmgBlowoff_OnHitPhoton, InResults) == 0x000000, "Member 'ATActGroundBattleDmgBlowoff_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActGroundBattleDmgBlowoff_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActGroundBattleDmgBlowoff_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.AT_UIPlayerStateIcon.OnPlayerChange
// 0x0008 (0x0008 - 0x0000)
struct AT_UIPlayerStateIcon_OnPlayerChange final
{
public:
	class AAT_Character*                          InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIPlayerStateIcon_OnPlayerChange) == 0x000008, "Wrong alignment on AT_UIPlayerStateIcon_OnPlayerChange");
static_assert(sizeof(AT_UIPlayerStateIcon_OnPlayerChange) == 0x000008, "Wrong size on AT_UIPlayerStateIcon_OnPlayerChange");
static_assert(offsetof(AT_UIPlayerStateIcon_OnPlayerChange, InChar) == 0x000000, "Member 'AT_UIPlayerStateIcon_OnPlayerChange::InChar' has a wrong offset!");

// Function AT.ATActDmgLock.OnEndLockAction
// 0x0008 (0x0008 - 0x0000)
struct ATActDmgLock_OnEndLockAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActDmgLock_OnEndLockAction) == 0x000008, "Wrong alignment on ATActDmgLock_OnEndLockAction");
static_assert(sizeof(ATActDmgLock_OnEndLockAction) == 0x000008, "Wrong size on ATActDmgLock_OnEndLockAction");
static_assert(offsetof(ATActDmgLock_OnEndLockAction, InCharacter) == 0x000000, "Member 'ATActDmgLock_OnEndLockAction::InCharacter' has a wrong offset!");

// Function AT.AT_UIQuestMainLogo.OnChangeProgress
// 0x0008 (0x0008 - 0x0000)
struct AT_UIQuestMainLogo_OnChangeProgress final
{
public:
	class FName                                   InProgressId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestMainLogo_OnChangeProgress) == 0x000004, "Wrong alignment on AT_UIQuestMainLogo_OnChangeProgress");
static_assert(sizeof(AT_UIQuestMainLogo_OnChangeProgress) == 0x000008, "Wrong size on AT_UIQuestMainLogo_OnChangeProgress");
static_assert(offsetof(AT_UIQuestMainLogo_OnChangeProgress, InProgressId) == 0x000000, "Member 'AT_UIQuestMainLogo_OnChangeProgress::InProgressId' has a wrong offset!");

// Function AT.AT_UIQuestSub.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIQuestSub_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIQuestSub_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIQuestSub_MouseClickDecide");
static_assert(sizeof(AT_UIQuestSub_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIQuestSub_MouseClickDecide");
static_assert(offsetof(AT_UIQuestSub_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIQuestSub_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIQuestSub_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIQuestSub_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.ATActDmgLongBlowoffVertical.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActDmgLongBlowoffVertical_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActDmgLongBlowoffVertical_OnHitPhoton) == 0x000008, "Wrong alignment on ATActDmgLongBlowoffVertical_OnHitPhoton");
static_assert(sizeof(ATActDmgLongBlowoffVertical_OnHitPhoton) == 0x000020, "Wrong size on ATActDmgLongBlowoffVertical_OnHitPhoton");
static_assert(offsetof(ATActDmgLongBlowoffVertical_OnHitPhoton, InResults) == 0x000000, "Member 'ATActDmgLongBlowoffVertical_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActDmgLongBlowoffVertical_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActDmgLongBlowoffVertical_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.AT_UIScrollBar.InitScrollValue
// 0x0010 (0x0010 - 0x0000)
struct AT_UIScrollBar_InitScrollValue final
{
public:
	float                                         ScrollBarHeight;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayMenu;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollMaxMenu;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveVolume;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIScrollBar_InitScrollValue) == 0x000004, "Wrong alignment on AT_UIScrollBar_InitScrollValue");
static_assert(sizeof(AT_UIScrollBar_InitScrollValue) == 0x000010, "Wrong size on AT_UIScrollBar_InitScrollValue");
static_assert(offsetof(AT_UIScrollBar_InitScrollValue, ScrollBarHeight) == 0x000000, "Member 'AT_UIScrollBar_InitScrollValue::ScrollBarHeight' has a wrong offset!");
static_assert(offsetof(AT_UIScrollBar_InitScrollValue, DisplayMenu) == 0x000004, "Member 'AT_UIScrollBar_InitScrollValue::DisplayMenu' has a wrong offset!");
static_assert(offsetof(AT_UIScrollBar_InitScrollValue, ScrollMaxMenu) == 0x000008, "Member 'AT_UIScrollBar_InitScrollValue::ScrollMaxMenu' has a wrong offset!");
static_assert(offsetof(AT_UIScrollBar_InitScrollValue, MoveVolume) == 0x00000C, "Member 'AT_UIScrollBar_InitScrollValue::MoveVolume' has a wrong offset!");

// Function AT.AT_UIScrollBar.SetValue
// 0x0004 (0x0004 - 0x0000)
struct AT_UIScrollBar_SetValue final
{
public:
	int32                                         MenuValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIScrollBar_SetValue) == 0x000004, "Wrong alignment on AT_UIScrollBar_SetValue");
static_assert(sizeof(AT_UIScrollBar_SetValue) == 0x000004, "Wrong size on AT_UIScrollBar_SetValue");
static_assert(offsetof(AT_UIScrollBar_SetValue, MenuValue) == 0x000000, "Member 'AT_UIScrollBar_SetValue::MenuValue' has a wrong offset!");

// Function AT.AT_UIShopCommon.GetShopItem
// 0x0010 (0x0010 - 0x0000)
struct AT_UIShopCommon_GetShopItem final
{
public:
	TArray<struct FXlistBar04Info>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopCommon_GetShopItem) == 0x000008, "Wrong alignment on AT_UIShopCommon_GetShopItem");
static_assert(sizeof(AT_UIShopCommon_GetShopItem) == 0x000010, "Wrong size on AT_UIShopCommon_GetShopItem");
static_assert(offsetof(AT_UIShopCommon_GetShopItem, ReturnValue) == 0x000000, "Member 'AT_UIShopCommon_GetShopItem::ReturnValue' has a wrong offset!");

// Function AT.AT_UIShopCommon.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopCommon_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopCommon_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopCommon_MouseClickDecide");
static_assert(sizeof(AT_UIShopCommon_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopCommon_MouseClickDecide");
static_assert(offsetof(AT_UIShopCommon_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopCommon_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopCommon_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopCommon_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIShopCommon.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIShopCommon_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopCommon_MouseWheel) == 0x000004, "Wrong alignment on AT_UIShopCommon_MouseWheel");
static_assert(sizeof(AT_UIShopCommon_MouseWheel) == 0x000004, "Wrong size on AT_UIShopCommon_MouseWheel");
static_assert(offsetof(AT_UIShopCommon_MouseWheel, Dir) == 0x000000, "Member 'AT_UIShopCommon_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIShopCommon.SetShopItem
// 0x0010 (0x0010 - 0x0000)
struct AT_UIShopCommon_SetShopItem final
{
public:
	TArray<struct FXlistBar04Info>                A_ShopItemList;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopCommon_SetShopItem) == 0x000008, "Wrong alignment on AT_UIShopCommon_SetShopItem");
static_assert(sizeof(AT_UIShopCommon_SetShopItem) == 0x000010, "Wrong size on AT_UIShopCommon_SetShopItem");
static_assert(offsetof(AT_UIShopCommon_SetShopItem, A_ShopItemList) == 0x000000, "Member 'AT_UIShopCommon_SetShopItem::A_ShopItemList' has a wrong offset!");

// Function AT.ATFormPartsLoader.CompleteClear
// 0x0008 (0x0008 - 0x0000)
struct ATFormPartsLoader_CompleteClear final
{
public:
	class UATDataAssetFormMeshAsyncLoad*          PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFormPartsLoader_CompleteClear) == 0x000008, "Wrong alignment on ATFormPartsLoader_CompleteClear");
static_assert(sizeof(ATFormPartsLoader_CompleteClear) == 0x000008, "Wrong size on ATFormPartsLoader_CompleteClear");
static_assert(offsetof(ATFormPartsLoader_CompleteClear, PartsLoad) == 0x000000, "Member 'ATFormPartsLoader_CompleteClear::PartsLoad' has a wrong offset!");

// Function AT.ATFormPartsLoader.CompleteLoad
// 0x0008 (0x0008 - 0x0000)
struct ATFormPartsLoader_CompleteLoad final
{
public:
	class UATDataAssetFormMeshAsyncLoad*          PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFormPartsLoader_CompleteLoad) == 0x000008, "Wrong alignment on ATFormPartsLoader_CompleteLoad");
static_assert(sizeof(ATFormPartsLoader_CompleteLoad) == 0x000008, "Wrong size on ATFormPartsLoader_CompleteLoad");
static_assert(offsetof(ATFormPartsLoader_CompleteLoad, PartsLoad) == 0x000000, "Member 'ATFormPartsLoader_CompleteLoad::PartsLoad' has a wrong offset!");

// Function AT.AT_UIShopDevelop.SetSelectTab
// 0x0004 (0x0004 - 0x0000)
struct AT_UIShopDevelop_SetSelectTab final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopDevelop_SetSelectTab) == 0x000004, "Wrong alignment on AT_UIShopDevelop_SetSelectTab");
static_assert(sizeof(AT_UIShopDevelop_SetSelectTab) == 0x000004, "Wrong size on AT_UIShopDevelop_SetSelectTab");
static_assert(offsetof(AT_UIShopDevelop_SetSelectTab, Index_0) == 0x000000, "Member 'AT_UIShopDevelop_SetSelectTab::Index_0' has a wrong offset!");

// Function AT.AT_UIShopDevelopCustom.SetSelectTab
// 0x0004 (0x0004 - 0x0000)
struct AT_UIShopDevelopCustom_SetSelectTab final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopDevelopCustom_SetSelectTab) == 0x000004, "Wrong alignment on AT_UIShopDevelopCustom_SetSelectTab");
static_assert(sizeof(AT_UIShopDevelopCustom_SetSelectTab) == 0x000004, "Wrong size on AT_UIShopDevelopCustom_SetSelectTab");
static_assert(offsetof(AT_UIShopDevelopCustom_SetSelectTab, Index_0) == 0x000000, "Member 'AT_UIShopDevelopCustom_SetSelectTab::Index_0' has a wrong offset!");

// Function AT.ATCharacterMovementComponent.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ATCharacterMovementComponent_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCharacterMovementComponent_OnDemoTiming) == 0x000004, "Wrong alignment on ATCharacterMovementComponent_OnDemoTiming");
static_assert(sizeof(ATCharacterMovementComponent_OnDemoTiming) == 0x000018, "Wrong size on ATCharacterMovementComponent_OnDemoTiming");
static_assert(offsetof(ATCharacterMovementComponent_OnDemoTiming, DemoType) == 0x000000, "Member 'ATCharacterMovementComponent_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(ATCharacterMovementComponent_OnDemoTiming, DemoTiming) == 0x000001, "Member 'ATCharacterMovementComponent_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(ATCharacterMovementComponent_OnDemoTiming, DemoName) == 0x000008, "Member 'ATCharacterMovementComponent_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(ATCharacterMovementComponent_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'ATCharacterMovementComponent_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.ATCharacterMovementComponent.OnMoveSolveByHit
// 0x00B0 (0x00B0 - 0x0000)
struct ATCharacterMovementComponent_OnMoveSolveByHit final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InCauserActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InCauserComp;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InNormalImpulse;                                   // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             InHitResult;                                       // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterMovementComponent_OnMoveSolveByHit) == 0x000008, "Wrong alignment on ATCharacterMovementComponent_OnMoveSolveByHit");
static_assert(sizeof(ATCharacterMovementComponent_OnMoveSolveByHit) == 0x0000B0, "Wrong size on ATCharacterMovementComponent_OnMoveSolveByHit");
static_assert(offsetof(ATCharacterMovementComponent_OnMoveSolveByHit, OverlappedComp) == 0x000000, "Member 'ATCharacterMovementComponent_OnMoveSolveByHit::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ATCharacterMovementComponent_OnMoveSolveByHit, InCauserActor) == 0x000008, "Member 'ATCharacterMovementComponent_OnMoveSolveByHit::InCauserActor' has a wrong offset!");
static_assert(offsetof(ATCharacterMovementComponent_OnMoveSolveByHit, InCauserComp) == 0x000010, "Member 'ATCharacterMovementComponent_OnMoveSolveByHit::InCauserComp' has a wrong offset!");
static_assert(offsetof(ATCharacterMovementComponent_OnMoveSolveByHit, InNormalImpulse) == 0x000018, "Member 'ATCharacterMovementComponent_OnMoveSolveByHit::InNormalImpulse' has a wrong offset!");
static_assert(offsetof(ATCharacterMovementComponent_OnMoveSolveByHit, InHitResult) == 0x000028, "Member 'ATCharacterMovementComponent_OnMoveSolveByHit::InHitResult' has a wrong offset!");

// Function AT.AT_UIShopInfo.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopInfo_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopInfo_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopInfo_MouseClickDecide");
static_assert(sizeof(AT_UIShopInfo_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopInfo_MouseClickDecide");
static_assert(offsetof(AT_UIShopInfo_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopInfo_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopInfo_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopInfo_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIShopTop.DebugRequest
// 0x0001 (0x0001 - 0x0000)
struct AT_UIShopTop_DebugRequest final
{
public:
	ESHOPTOP_DEBUG_ID                             InNo;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTop_DebugRequest) == 0x000001, "Wrong alignment on AT_UIShopTop_DebugRequest");
static_assert(sizeof(AT_UIShopTop_DebugRequest) == 0x000001, "Wrong size on AT_UIShopTop_DebugRequest");
static_assert(offsetof(AT_UIShopTop_DebugRequest, InNo) == 0x000000, "Member 'AT_UIShopTop_DebugRequest::InNo' has a wrong offset!");

// Function AT.AT_UIShopTop.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopTop_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTop_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopTop_MouseClickDecide");
static_assert(sizeof(AT_UIShopTop_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopTop_MouseClickDecide");
static_assert(offsetof(AT_UIShopTop_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopTop_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopTop_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopTop_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.ATCharacterSparkingComponent.DamageApplied
// 0x0088 (0x0088 - 0x0000)
struct ATCharacterSparkingComponent_DamageApplied final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterSparkingComponent_DamageApplied) == 0x000008, "Wrong alignment on ATCharacterSparkingComponent_DamageApplied");
static_assert(sizeof(ATCharacterSparkingComponent_DamageApplied) == 0x000088, "Wrong size on ATCharacterSparkingComponent_DamageApplied");
static_assert(offsetof(ATCharacterSparkingComponent_DamageApplied, HitResult) == 0x000000, "Member 'ATCharacterSparkingComponent_DamageApplied::HitResult' has a wrong offset!");

// Function AT.ATCharacterSparkingComponent.HitOffsetDraw
// 0x0088 (0x0088 - 0x0000)
struct ATCharacterSparkingComponent_HitOffsetDraw final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterSparkingComponent_HitOffsetDraw) == 0x000008, "Wrong alignment on ATCharacterSparkingComponent_HitOffsetDraw");
static_assert(sizeof(ATCharacterSparkingComponent_HitOffsetDraw) == 0x000088, "Wrong size on ATCharacterSparkingComponent_HitOffsetDraw");
static_assert(offsetof(ATCharacterSparkingComponent_HitOffsetDraw, HitResult) == 0x000000, "Member 'ATCharacterSparkingComponent_HitOffsetDraw::HitResult' has a wrong offset!");

// Function AT.ATCharacterSparkingComponent.HitOffsetLose
// 0x0088 (0x0088 - 0x0000)
struct ATCharacterSparkingComponent_HitOffsetLose final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterSparkingComponent_HitOffsetLose) == 0x000008, "Wrong alignment on ATCharacterSparkingComponent_HitOffsetLose");
static_assert(sizeof(ATCharacterSparkingComponent_HitOffsetLose) == 0x000088, "Wrong size on ATCharacterSparkingComponent_HitOffsetLose");
static_assert(offsetof(ATCharacterSparkingComponent_HitOffsetLose, HitResult) == 0x000000, "Member 'ATCharacterSparkingComponent_HitOffsetLose::HitResult' has a wrong offset!");

// Function AT.AT_UIShopTraining.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopTraining_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTraining_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopTraining_MouseClickDecide");
static_assert(sizeof(AT_UIShopTraining_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopTraining_MouseClickDecide");
static_assert(offsetof(AT_UIShopTraining_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopTraining_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopTraining_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopTraining_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.ATCharacterPartsManager.DestroyFacialParts
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterPartsManager_DestroyFacialParts final
{
public:
	class UATDataAssetFacialAsyncLoad*            PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterPartsManager_DestroyFacialParts) == 0x000008, "Wrong alignment on ATCharacterPartsManager_DestroyFacialParts");
static_assert(sizeof(ATCharacterPartsManager_DestroyFacialParts) == 0x000008, "Wrong size on ATCharacterPartsManager_DestroyFacialParts");
static_assert(offsetof(ATCharacterPartsManager_DestroyFacialParts, PartsLoad) == 0x000000, "Member 'ATCharacterPartsManager_DestroyFacialParts::PartsLoad' has a wrong offset!");

// Function AT.ATCharacterPartsManager.DestroyFormParts
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterPartsManager_DestroyFormParts final
{
public:
	class UATDataAssetFormMeshAsyncLoad*          PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterPartsManager_DestroyFormParts) == 0x000008, "Wrong alignment on ATCharacterPartsManager_DestroyFormParts");
static_assert(sizeof(ATCharacterPartsManager_DestroyFormParts) == 0x000008, "Wrong size on ATCharacterPartsManager_DestroyFormParts");
static_assert(offsetof(ATCharacterPartsManager_DestroyFormParts, PartsLoad) == 0x000000, "Member 'ATCharacterPartsManager_DestroyFormParts::PartsLoad' has a wrong offset!");

// Function AT.ATCharacterPartsManager.DestroyVariationParts
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterPartsManager_DestroyVariationParts final
{
public:
	class UATDataAssetVariationMeshAsyncLoad*     PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterPartsManager_DestroyVariationParts) == 0x000008, "Wrong alignment on ATCharacterPartsManager_DestroyVariationParts");
static_assert(sizeof(ATCharacterPartsManager_DestroyVariationParts) == 0x000008, "Wrong size on ATCharacterPartsManager_DestroyVariationParts");
static_assert(offsetof(ATCharacterPartsManager_DestroyVariationParts, PartsLoad) == 0x000000, "Member 'ATCharacterPartsManager_DestroyVariationParts::PartsLoad' has a wrong offset!");

// Function AT.ATCharacterPartsManager.SpawnFacialParts
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterPartsManager_SpawnFacialParts final
{
public:
	class UATDataAssetFacialAsyncLoad*            PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterPartsManager_SpawnFacialParts) == 0x000008, "Wrong alignment on ATCharacterPartsManager_SpawnFacialParts");
static_assert(sizeof(ATCharacterPartsManager_SpawnFacialParts) == 0x000008, "Wrong size on ATCharacterPartsManager_SpawnFacialParts");
static_assert(offsetof(ATCharacterPartsManager_SpawnFacialParts, PartsLoad) == 0x000000, "Member 'ATCharacterPartsManager_SpawnFacialParts::PartsLoad' has a wrong offset!");

// Function AT.ATCharacterPartsManager.SpawnFormParts
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterPartsManager_SpawnFormParts final
{
public:
	class UATDataAssetFormMeshAsyncLoad*          PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterPartsManager_SpawnFormParts) == 0x000008, "Wrong alignment on ATCharacterPartsManager_SpawnFormParts");
static_assert(sizeof(ATCharacterPartsManager_SpawnFormParts) == 0x000008, "Wrong size on ATCharacterPartsManager_SpawnFormParts");
static_assert(offsetof(ATCharacterPartsManager_SpawnFormParts, PartsLoad) == 0x000000, "Member 'ATCharacterPartsManager_SpawnFormParts::PartsLoad' has a wrong offset!");

// Function AT.ATCharacterPartsManager.SpawnVariationParts
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterPartsManager_SpawnVariationParts final
{
public:
	class UATDataAssetVariationMeshAsyncLoad*     PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterPartsManager_SpawnVariationParts) == 0x000008, "Wrong alignment on ATCharacterPartsManager_SpawnVariationParts");
static_assert(sizeof(ATCharacterPartsManager_SpawnVariationParts) == 0x000008, "Wrong size on ATCharacterPartsManager_SpawnVariationParts");
static_assert(offsetof(ATCharacterPartsManager_SpawnVariationParts, PartsLoad) == 0x000000, "Member 'ATCharacterPartsManager_SpawnVariationParts::PartsLoad' has a wrong offset!");

// Function AT.AT_UIShopTraining00.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopTraining00_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTraining00_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopTraining00_MouseClickDecide");
static_assert(sizeof(AT_UIShopTraining00_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopTraining00_MouseClickDecide");
static_assert(offsetof(AT_UIShopTraining00_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopTraining00_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopTraining00_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopTraining00_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIShopTraining00.OnConfirmWindowSelectItem
// 0x0004 (0x0004 - 0x0000)
struct AT_UIShopTraining00_OnConfirmWindowSelectItem final
{
public:
	int32                                         SELECT;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTraining00_OnConfirmWindowSelectItem) == 0x000004, "Wrong alignment on AT_UIShopTraining00_OnConfirmWindowSelectItem");
static_assert(sizeof(AT_UIShopTraining00_OnConfirmWindowSelectItem) == 0x000004, "Wrong size on AT_UIShopTraining00_OnConfirmWindowSelectItem");
static_assert(offsetof(AT_UIShopTraining00_OnConfirmWindowSelectItem, SELECT) == 0x000000, "Member 'AT_UIShopTraining00_OnConfirmWindowSelectItem::SELECT' has a wrong offset!");

// Function AT.AT_UIShopTraining01.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopTraining01_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTraining01_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopTraining01_MouseClickDecide");
static_assert(sizeof(AT_UIShopTraining01_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopTraining01_MouseClickDecide");
static_assert(offsetof(AT_UIShopTraining01_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopTraining01_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopTraining01_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopTraining01_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIShopTraining02.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopTraining02_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTraining02_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopTraining02_MouseClickDecide");
static_assert(sizeof(AT_UIShopTraining02_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopTraining02_MouseClickDecide");
static_assert(offsetof(AT_UIShopTraining02_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopTraining02_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopTraining02_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopTraining02_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIShopTraining03.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopTraining03_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTraining03_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopTraining03_MouseClickDecide");
static_assert(sizeof(AT_UIShopTraining03_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopTraining03_MouseClickDecide");
static_assert(offsetof(AT_UIShopTraining03_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopTraining03_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopTraining03_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopTraining03_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIShopTraining04.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopTraining04_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTraining04_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopTraining04_MouseClickDecide");
static_assert(sizeof(AT_UIShopTraining04_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopTraining04_MouseClickDecide");
static_assert(offsetof(AT_UIShopTraining04_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopTraining04_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopTraining04_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopTraining04_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIShopTraining05.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIShopTraining05_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIShopTraining05_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIShopTraining05_MouseClickDecide");
static_assert(sizeof(AT_UIShopTraining05_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIShopTraining05_MouseClickDecide");
static_assert(offsetof(AT_UIShopTraining05_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIShopTraining05_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIShopTraining05_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIShopTraining05_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UISkillChain.OnComboAddEvent
// 0x0108 (0x0108 - 0x0000)
struct AT_UISkillChain_OnComboAddEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UISkillChain_OnComboAddEvent) == 0x000008, "Wrong alignment on AT_UISkillChain_OnComboAddEvent");
static_assert(sizeof(AT_UISkillChain_OnComboAddEvent) == 0x000108, "Wrong size on AT_UISkillChain_OnComboAddEvent");
static_assert(offsetof(AT_UISkillChain_OnComboAddEvent, EvParam) == 0x000000, "Member 'AT_UISkillChain_OnComboAddEvent::EvParam' has a wrong offset!");

// Function AT.AT_UISkillChain.OnComboEndEvent
// 0x0108 (0x0108 - 0x0000)
struct AT_UISkillChain_OnComboEndEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UISkillChain_OnComboEndEvent) == 0x000008, "Wrong alignment on AT_UISkillChain_OnComboEndEvent");
static_assert(sizeof(AT_UISkillChain_OnComboEndEvent) == 0x000108, "Wrong size on AT_UISkillChain_OnComboEndEvent");
static_assert(offsetof(AT_UISkillChain_OnComboEndEvent, EvParam) == 0x000000, "Member 'AT_UISkillChain_OnComboEndEvent::EvParam' has a wrong offset!");

// Function AT.AT_UISkillCustomize.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UISkillCustomize_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UISkillCustomize_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UISkillCustomize_MouseClickDecide");
static_assert(sizeof(AT_UISkillCustomize_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UISkillCustomize_MouseClickDecide");
static_assert(offsetof(AT_UISkillCustomize_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UISkillCustomize_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UISkillCustomize_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UISkillCustomize_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UISkillTree.Open
// 0x0018 (0x0018 - 0x0000)
struct AT_UISkillTree_Open final
{
public:
	class UAT_UISkillTreeMenu*                    OwnerMenu_0;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStartWithTraining;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               InCharType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AwakePassiveMode;                                  // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SuperPassiveSkillID;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UISkillTree_Open) == 0x000008, "Wrong alignment on AT_UISkillTree_Open");
static_assert(sizeof(AT_UISkillTree_Open) == 0x000018, "Wrong size on AT_UISkillTree_Open");
static_assert(offsetof(AT_UISkillTree_Open, OwnerMenu_0) == 0x000000, "Member 'AT_UISkillTree_Open::OwnerMenu_0' has a wrong offset!");
static_assert(offsetof(AT_UISkillTree_Open, bInStartWithTraining) == 0x000008, "Member 'AT_UISkillTree_Open::bInStartWithTraining' has a wrong offset!");
static_assert(offsetof(AT_UISkillTree_Open, InCharType) == 0x000009, "Member 'AT_UISkillTree_Open::InCharType' has a wrong offset!");
static_assert(offsetof(AT_UISkillTree_Open, AwakePassiveMode) == 0x00000A, "Member 'AT_UISkillTree_Open::AwakePassiveMode' has a wrong offset!");
static_assert(offsetof(AT_UISkillTree_Open, SuperPassiveSkillID) == 0x000010, "Member 'AT_UISkillTree_Open::SuperPassiveSkillID' has a wrong offset!");

// Function AT.AT_UISkillTreeMenu.OnSkillGetWindowClosed
// 0x0004 (0x0004 - 0x0000)
struct AT_UISkillTreeMenu_OnSkillGetWindowClosed final
{
public:
	int32                                         SELECT;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UISkillTreeMenu_OnSkillGetWindowClosed) == 0x000004, "Wrong alignment on AT_UISkillTreeMenu_OnSkillGetWindowClosed");
static_assert(sizeof(AT_UISkillTreeMenu_OnSkillGetWindowClosed) == 0x000004, "Wrong size on AT_UISkillTreeMenu_OnSkillGetWindowClosed");
static_assert(offsetof(AT_UISkillTreeMenu_OnSkillGetWindowClosed, SELECT) == 0x000000, "Member 'AT_UISkillTreeMenu_OnSkillGetWindowClosed::SELECT' has a wrong offset!");

// Function AT.AT_UISkillTreeMenu.OnSkillGetWindowClosedInSuperPassiveOpend
// 0x0004 (0x0004 - 0x0000)
struct AT_UISkillTreeMenu_OnSkillGetWindowClosedInSuperPassiveOpend final
{
public:
	int32                                         SELECT;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UISkillTreeMenu_OnSkillGetWindowClosedInSuperPassiveOpend) == 0x000004, "Wrong alignment on AT_UISkillTreeMenu_OnSkillGetWindowClosedInSuperPassiveOpend");
static_assert(sizeof(AT_UISkillTreeMenu_OnSkillGetWindowClosedInSuperPassiveOpend) == 0x000004, "Wrong size on AT_UISkillTreeMenu_OnSkillGetWindowClosedInSuperPassiveOpend");
static_assert(offsetof(AT_UISkillTreeMenu_OnSkillGetWindowClosedInSuperPassiveOpend, SELECT) == 0x000000, "Member 'AT_UISkillTreeMenu_OnSkillGetWindowClosedInSuperPassiveOpend::SELECT' has a wrong offset!");

// Function AT.AT_UIStartChar.AddCaptureParam
// 0x0060 (0x0060 - 0x0000)
struct AT_UIStartChar_AddCaptureParam final
{
public:
	ECHARACTER_TYPE                               Icon;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationId;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FormID;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FaceId;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFacialType                                   FacialType;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTrans;                                       // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 FacialPath;                                        // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartChar_AddCaptureParam) == 0x000010, "Wrong alignment on AT_UIStartChar_AddCaptureParam");
static_assert(sizeof(AT_UIStartChar_AddCaptureParam) == 0x000060, "Wrong size on AT_UIStartChar_AddCaptureParam");
static_assert(offsetof(AT_UIStartChar_AddCaptureParam, Icon) == 0x000000, "Member 'AT_UIStartChar_AddCaptureParam::Icon' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_AddCaptureParam, VariationId) == 0x000001, "Member 'AT_UIStartChar_AddCaptureParam::VariationId' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_AddCaptureParam, FormID) == 0x000002, "Member 'AT_UIStartChar_AddCaptureParam::FormID' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_AddCaptureParam, AnimId) == 0x000008, "Member 'AT_UIStartChar_AddCaptureParam::AnimId' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_AddCaptureParam, FaceId) == 0x000018, "Member 'AT_UIStartChar_AddCaptureParam::FaceId' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_AddCaptureParam, FacialType) == 0x000019, "Member 'AT_UIStartChar_AddCaptureParam::FacialType' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_AddCaptureParam, CameraTrans) == 0x000020, "Member 'AT_UIStartChar_AddCaptureParam::CameraTrans' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_AddCaptureParam, FacialPath) == 0x000050, "Member 'AT_UIStartChar_AddCaptureParam::FacialPath' has a wrong offset!");

// Function AT.AT_UIStartChar.GetCursorIndex
// 0x0004 (0x0004 - 0x0000)
struct AT_UIStartChar_GetCursorIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartChar_GetCursorIndex) == 0x000004, "Wrong alignment on AT_UIStartChar_GetCursorIndex");
static_assert(sizeof(AT_UIStartChar_GetCursorIndex) == 0x000004, "Wrong size on AT_UIStartChar_GetCursorIndex");
static_assert(offsetof(AT_UIStartChar_GetCursorIndex, ReturnValue) == 0x000000, "Member 'AT_UIStartChar_GetCursorIndex::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartChar.GetFocusNum
// 0x0004 (0x0004 - 0x0000)
struct AT_UIStartChar_GetFocusNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartChar_GetFocusNum) == 0x000004, "Wrong alignment on AT_UIStartChar_GetFocusNum");
static_assert(sizeof(AT_UIStartChar_GetFocusNum) == 0x000004, "Wrong size on AT_UIStartChar_GetFocusNum");
static_assert(offsetof(AT_UIStartChar_GetFocusNum, ReturnValue) == 0x000000, "Member 'AT_UIStartChar_GetFocusNum::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartChar.GetViewIndex
// 0x0004 (0x0004 - 0x0000)
struct AT_UIStartChar_GetViewIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartChar_GetViewIndex) == 0x000004, "Wrong alignment on AT_UIStartChar_GetViewIndex");
static_assert(sizeof(AT_UIStartChar_GetViewIndex) == 0x000004, "Wrong size on AT_UIStartChar_GetViewIndex");
static_assert(offsetof(AT_UIStartChar_GetViewIndex, ReturnValue) == 0x000000, "Member 'AT_UIStartChar_GetViewIndex::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartChar.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStartChar_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartChar_IsLoaded) == 0x000001, "Wrong alignment on AT_UIStartChar_IsLoaded");
static_assert(sizeof(AT_UIStartChar_IsLoaded) == 0x000001, "Wrong size on AT_UIStartChar_IsLoaded");
static_assert(offsetof(AT_UIStartChar_IsLoaded, ReturnValue) == 0x000000, "Member 'AT_UIStartChar_IsLoaded::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartChar.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIStartChar_MouseClickDecide final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartChar_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIStartChar_MouseClickDecide");
static_assert(sizeof(AT_UIStartChar_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIStartChar_MouseClickDecide");
static_assert(offsetof(AT_UIStartChar_MouseClickDecide, MyGeometry) == 0x000000, "Member 'AT_UIStartChar_MouseClickDecide::MyGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_MouseClickDecide, MouseEvent) == 0x000038, "Member 'AT_UIStartChar_MouseClickDecide::MouseEvent' has a wrong offset!");

// Function AT.AT_UIStartChar.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIStartChar_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartChar_MouseWheel) == 0x000004, "Wrong alignment on AT_UIStartChar_MouseWheel");
static_assert(sizeof(AT_UIStartChar_MouseWheel) == 0x000004, "Wrong size on AT_UIStartChar_MouseWheel");
static_assert(offsetof(AT_UIStartChar_MouseWheel, Dir) == 0x000000, "Member 'AT_UIStartChar_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIStartChar.SetViewIndexAndCursorIndex
// 0x0008 (0x0008 - 0x0000)
struct AT_UIStartChar_SetViewIndexAndCursorIndex final
{
public:
	int32                                         A_view;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         A_cursor;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartChar_SetViewIndexAndCursorIndex) == 0x000004, "Wrong alignment on AT_UIStartChar_SetViewIndexAndCursorIndex");
static_assert(sizeof(AT_UIStartChar_SetViewIndexAndCursorIndex) == 0x000008, "Wrong size on AT_UIStartChar_SetViewIndexAndCursorIndex");
static_assert(offsetof(AT_UIStartChar_SetViewIndexAndCursorIndex, A_view) == 0x000000, "Member 'AT_UIStartChar_SetViewIndexAndCursorIndex::A_view' has a wrong offset!");
static_assert(offsetof(AT_UIStartChar_SetViewIndexAndCursorIndex, A_cursor) == 0x000004, "Member 'AT_UIStartChar_SetViewIndexAndCursorIndex::A_cursor' has a wrong offset!");

// Function AT.AT_UIStartCharBar.SetParam
// 0x0018 (0x0018 - 0x0000)
struct AT_UIStartCharBar_SetParam final
{
public:
	ECHARACTER_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnselectableFilterText                       Mode;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStartCharBar_SetParam) == 0x000008, "Wrong alignment on AT_UIStartCharBar_SetParam");
static_assert(sizeof(AT_UIStartCharBar_SetParam) == 0x000018, "Wrong size on AT_UIStartCharBar_SetParam");
static_assert(offsetof(AT_UIStartCharBar_SetParam, Type) == 0x000000, "Member 'AT_UIStartCharBar_SetParam::Type' has a wrong offset!");
static_assert(offsetof(AT_UIStartCharBar_SetParam, Icon) == 0x000008, "Member 'AT_UIStartCharBar_SetParam::Icon' has a wrong offset!");
static_assert(offsetof(AT_UIStartCharBar_SetParam, Mode) == 0x000010, "Member 'AT_UIStartCharBar_SetParam::Mode' has a wrong offset!");

// Function AT.AT_UIStartCommuDetail.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIStartCommuDetail_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartCommuDetail_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIStartCommuDetail_MouseClickDecide");
static_assert(sizeof(AT_UIStartCommuDetail_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIStartCommuDetail_MouseClickDecide");
static_assert(offsetof(AT_UIStartCommuDetail_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIStartCommuDetail_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIStartCommuDetail_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIStartCommuDetail_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIStartDragonBallMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIStartDragonBallMenu_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartDragonBallMenu_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIStartDragonBallMenu_MouseClickDecide");
static_assert(sizeof(AT_UIStartDragonBallMenu_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIStartDragonBallMenu_MouseClickDecide");
static_assert(offsetof(AT_UIStartDragonBallMenu_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIStartDragonBallMenu_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIStartDragonBallMenu_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIStartDragonBallMenu_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIStartParty.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIStartParty_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartParty_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIStartParty_MouseClickDecide");
static_assert(sizeof(AT_UIStartParty_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIStartParty_MouseClickDecide");
static_assert(offsetof(AT_UIStartParty_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIStartParty_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIStartParty_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIStartParty_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIStartParty.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIStartParty_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartParty_MouseWheel) == 0x000004, "Wrong alignment on AT_UIStartParty_MouseWheel");
static_assert(sizeof(AT_UIStartParty_MouseWheel) == 0x000004, "Wrong size on AT_UIStartParty_MouseWheel");
static_assert(offsetof(AT_UIStartParty_MouseWheel, Dir) == 0x000000, "Member 'AT_UIStartParty_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIStartPartyBar.SetAnimation
// 0x0020 (0x0020 - 0x0000)
struct AT_UIStartPartyBar_SetAnimation final
{
public:
	class UWidgetAnimation*                       Enter;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       InCurs;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       InDown;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       OutDown;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartPartyBar_SetAnimation) == 0x000008, "Wrong alignment on AT_UIStartPartyBar_SetAnimation");
static_assert(sizeof(AT_UIStartPartyBar_SetAnimation) == 0x000020, "Wrong size on AT_UIStartPartyBar_SetAnimation");
static_assert(offsetof(AT_UIStartPartyBar_SetAnimation, Enter) == 0x000000, "Member 'AT_UIStartPartyBar_SetAnimation::Enter' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyBar_SetAnimation, InCurs) == 0x000008, "Member 'AT_UIStartPartyBar_SetAnimation::InCurs' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyBar_SetAnimation, InDown) == 0x000010, "Member 'AT_UIStartPartyBar_SetAnimation::InDown' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyBar_SetAnimation, OutDown) == 0x000018, "Member 'AT_UIStartPartyBar_SetAnimation::OutDown' has a wrong offset!");

// Function AT.AT_UIStartPartyBar.GetCharaType
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStartPartyBar_GetCharaType final
{
public:
	ECHARACTER_TYPE                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartPartyBar_GetCharaType) == 0x000001, "Wrong alignment on AT_UIStartPartyBar_GetCharaType");
static_assert(sizeof(AT_UIStartPartyBar_GetCharaType) == 0x000001, "Wrong size on AT_UIStartPartyBar_GetCharaType");
static_assert(offsetof(AT_UIStartPartyBar_GetCharaType, ReturnValue) == 0x000000, "Member 'AT_UIStartPartyBar_GetCharaType::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartPartyBar.GetEditMode
// 0x0004 (0x0004 - 0x0000)
struct AT_UIStartPartyBar_GetEditMode final
{
public:
	EStartPartyBarEditMode                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartPartyBar_GetEditMode) == 0x000004, "Wrong alignment on AT_UIStartPartyBar_GetEditMode");
static_assert(sizeof(AT_UIStartPartyBar_GetEditMode) == 0x000004, "Wrong size on AT_UIStartPartyBar_GetEditMode");
static_assert(offsetof(AT_UIStartPartyBar_GetEditMode, ReturnValue) == 0x000000, "Member 'AT_UIStartPartyBar_GetEditMode::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartPartyBar.GetIsPlayer
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStartPartyBar_GetIsPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartPartyBar_GetIsPlayer) == 0x000001, "Wrong alignment on AT_UIStartPartyBar_GetIsPlayer");
static_assert(sizeof(AT_UIStartPartyBar_GetIsPlayer) == 0x000001, "Wrong size on AT_UIStartPartyBar_GetIsPlayer");
static_assert(offsetof(AT_UIStartPartyBar_GetIsPlayer, ReturnValue) == 0x000000, "Member 'AT_UIStartPartyBar_GetIsPlayer::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartPartyList.GetEditMode
// 0x0008 (0x0008 - 0x0000)
struct AT_UIStartPartyList_GetEditMode final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStartPartyBarEditMode                        ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartPartyList_GetEditMode) == 0x000004, "Wrong alignment on AT_UIStartPartyList_GetEditMode");
static_assert(sizeof(AT_UIStartPartyList_GetEditMode) == 0x000008, "Wrong size on AT_UIStartPartyList_GetEditMode");
static_assert(offsetof(AT_UIStartPartyList_GetEditMode, Index_0) == 0x000000, "Member 'AT_UIStartPartyList_GetEditMode::Index_0' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyList_GetEditMode, ReturnValue) == 0x000004, "Member 'AT_UIStartPartyList_GetEditMode::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartPartyList.GetIsPlayer
// 0x0008 (0x0008 - 0x0000)
struct AT_UIStartPartyList_GetIsPlayer final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStartPartyList_GetIsPlayer) == 0x000004, "Wrong alignment on AT_UIStartPartyList_GetIsPlayer");
static_assert(sizeof(AT_UIStartPartyList_GetIsPlayer) == 0x000008, "Wrong size on AT_UIStartPartyList_GetIsPlayer");
static_assert(offsetof(AT_UIStartPartyList_GetIsPlayer, Index_0) == 0x000000, "Member 'AT_UIStartPartyList_GetIsPlayer::Index_0' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyList_GetIsPlayer, ReturnValue) == 0x000004, "Member 'AT_UIStartPartyList_GetIsPlayer::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartPartyList.SetParam
// 0x0018 (0x0018 - 0x0000)
struct AT_UIStartPartyList_SetParam final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Tex;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnConfigurable;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChange;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwap;                                             // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStartPartyList_SetParam) == 0x000008, "Wrong alignment on AT_UIStartPartyList_SetParam");
static_assert(sizeof(AT_UIStartPartyList_SetParam) == 0x000018, "Wrong size on AT_UIStartPartyList_SetParam");
static_assert(offsetof(AT_UIStartPartyList_SetParam, Index_0) == 0x000000, "Member 'AT_UIStartPartyList_SetParam::Index_0' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyList_SetParam, Type) == 0x000004, "Member 'AT_UIStartPartyList_SetParam::Type' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyList_SetParam, Tex) == 0x000008, "Member 'AT_UIStartPartyList_SetParam::Tex' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyList_SetParam, bUnConfigurable) == 0x000010, "Member 'AT_UIStartPartyList_SetParam::bUnConfigurable' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyList_SetParam, bChange) == 0x000011, "Member 'AT_UIStartPartyList_SetParam::bChange' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyList_SetParam, bSwap) == 0x000012, "Member 'AT_UIStartPartyList_SetParam::bSwap' has a wrong offset!");

// Function AT.AT_UIStartPartyList.GetCharaType
// 0x0008 (0x0008 - 0x0000)
struct AT_UIStartPartyList_GetCharaType final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStartPartyList_GetCharaType) == 0x000004, "Wrong alignment on AT_UIStartPartyList_GetCharaType");
static_assert(sizeof(AT_UIStartPartyList_GetCharaType) == 0x000008, "Wrong size on AT_UIStartPartyList_GetCharaType");
static_assert(offsetof(AT_UIStartPartyList_GetCharaType, Index_0) == 0x000000, "Member 'AT_UIStartPartyList_GetCharaType::Index_0' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyList_GetCharaType, ReturnValue) == 0x000004, "Member 'AT_UIStartPartyList_GetCharaType::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStartPartyTeam.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIStartPartyTeam_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartPartyTeam_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIStartPartyTeam_MouseClickDecide");
static_assert(sizeof(AT_UIStartPartyTeam_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIStartPartyTeam_MouseClickDecide");
static_assert(offsetof(AT_UIStartPartyTeam_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIStartPartyTeam_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIStartPartyTeam_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIStartPartyTeam_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIStartStatusHud.SetGauge
// 0x000C (0x000C - 0x0000)
struct AT_UIStartStatusHud_SetGauge final
{
public:
	float                                         CurrentNum;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNum;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGaugeColor                                   Color;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAnim;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStartStatusHud_SetGauge) == 0x000004, "Wrong alignment on AT_UIStartStatusHud_SetGauge");
static_assert(sizeof(AT_UIStartStatusHud_SetGauge) == 0x00000C, "Wrong size on AT_UIStartStatusHud_SetGauge");
static_assert(offsetof(AT_UIStartStatusHud_SetGauge, CurrentNum) == 0x000000, "Member 'AT_UIStartStatusHud_SetGauge::CurrentNum' has a wrong offset!");
static_assert(offsetof(AT_UIStartStatusHud_SetGauge, MaxNum) == 0x000004, "Member 'AT_UIStartStatusHud_SetGauge::MaxNum' has a wrong offset!");
static_assert(offsetof(AT_UIStartStatusHud_SetGauge, Color) == 0x000008, "Member 'AT_UIStartStatusHud_SetGauge::Color' has a wrong offset!");
static_assert(offsetof(AT_UIStartStatusHud_SetGauge, IsAnim) == 0x000009, "Member 'AT_UIStartStatusHud_SetGauge::IsAnim' has a wrong offset!");

// Function AT.AT_UIStartStatusList00.Set
// 0x0018 (0x0018 - 0x0000)
struct AT_UIStartStatusList00_Set final
{
public:
	ESkillIcon                                    Icon;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkillName;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStartStatusList00_Set) == 0x000008, "Wrong alignment on AT_UIStartStatusList00_Set");
static_assert(sizeof(AT_UIStartStatusList00_Set) == 0x000018, "Wrong size on AT_UIStartStatusList00_Set");
static_assert(offsetof(AT_UIStartStatusList00_Set, Icon) == 0x000000, "Member 'AT_UIStartStatusList00_Set::Icon' has a wrong offset!");
static_assert(offsetof(AT_UIStartStatusList00_Set, SkillName) == 0x000008, "Member 'AT_UIStartStatusList00_Set::SkillName' has a wrong offset!");

// Function AT.AT_UIStartStatusList01.Set
// 0x0020 (0x0020 - 0x0000)
struct AT_UIStartStatusList01_Set final
{
public:
	EViewStatusIconType                           StatusIconType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStartStatusList01_Set) == 0x000008, "Wrong alignment on AT_UIStartStatusList01_Set");
static_assert(sizeof(AT_UIStartStatusList01_Set) == 0x000020, "Wrong size on AT_UIStartStatusList01_Set");
static_assert(offsetof(AT_UIStartStatusList01_Set, StatusIconType) == 0x000000, "Member 'AT_UIStartStatusList01_Set::StatusIconType' has a wrong offset!");
static_assert(offsetof(AT_UIStartStatusList01_Set, ItemName) == 0x000008, "Member 'AT_UIStartStatusList01_Set::ItemName' has a wrong offset!");
static_assert(offsetof(AT_UIStartStatusList01_Set, Num) == 0x000018, "Member 'AT_UIStartStatusList01_Set::Num' has a wrong offset!");

// Function AT.AT_UIStartStatusList02.Set
// 0x0018 (0x0018 - 0x0000)
struct AT_UIStartStatusList02_Set final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UIStartStatusList02_Set) == 0x000008, "Wrong alignment on AT_UIStartStatusList02_Set");
static_assert(sizeof(AT_UIStartStatusList02_Set) == 0x000018, "Wrong size on AT_UIStartStatusList02_Set");
static_assert(offsetof(AT_UIStartStatusList02_Set, Title) == 0x000000, "Member 'AT_UIStartStatusList02_Set::Title' has a wrong offset!");
static_assert(offsetof(AT_UIStartStatusList02_Set, Num) == 0x000010, "Member 'AT_UIStartStatusList02_Set::Num' has a wrong offset!");

// Function AT.ATBattleAI.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct ATBattleAI_OnChangeAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATBattleAI_OnChangeAction) == 0x000008, "Wrong alignment on ATBattleAI_OnChangeAction");
static_assert(sizeof(ATBattleAI_OnChangeAction) == 0x000010, "Wrong size on ATBattleAI_OnChangeAction");
static_assert(offsetof(ATBattleAI_OnChangeAction, InCharacter) == 0x000000, "Member 'ATBattleAI_OnChangeAction::InCharacter' has a wrong offset!");
static_assert(offsetof(ATBattleAI_OnChangeAction, InActionIdPrev) == 0x000008, "Member 'ATBattleAI_OnChangeAction::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATBattleAI_OnChangeAction, InActionIdNext) == 0x00000C, "Member 'ATBattleAI_OnChangeAction::InActionIdNext' has a wrong offset!");

// Function AT.AT_UIStateIcon.CheckEndSign
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStateIcon_CheckEndSign final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_CheckEndSign) == 0x000001, "Wrong alignment on AT_UIStateIcon_CheckEndSign");
static_assert(sizeof(AT_UIStateIcon_CheckEndSign) == 0x000001, "Wrong size on AT_UIStateIcon_CheckEndSign");
static_assert(offsetof(AT_UIStateIcon_CheckEndSign, ReturnValue) == 0x000000, "Member 'AT_UIStateIcon_CheckEndSign::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStateIcon.IsVisibleEffectLight
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStateIcon_IsVisibleEffectLight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_IsVisibleEffectLight) == 0x000001, "Wrong alignment on AT_UIStateIcon_IsVisibleEffectLight");
static_assert(sizeof(AT_UIStateIcon_IsVisibleEffectLight) == 0x000001, "Wrong size on AT_UIStateIcon_IsVisibleEffectLight");
static_assert(offsetof(AT_UIStateIcon_IsVisibleEffectLight, ReturnValue) == 0x000000, "Member 'AT_UIStateIcon_IsVisibleEffectLight::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStateIcon.RequestPlayAnimation
// 0x0008 (0x0008 - 0x0000)
struct AT_UIStateIcon_RequestPlayAnimation final
{
public:
	EAnimType                                     AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_RequestPlayAnimation) == 0x000004, "Wrong alignment on AT_UIStateIcon_RequestPlayAnimation");
static_assert(sizeof(AT_UIStateIcon_RequestPlayAnimation) == 0x000008, "Wrong size on AT_UIStateIcon_RequestPlayAnimation");
static_assert(offsetof(AT_UIStateIcon_RequestPlayAnimation, AnimType) == 0x000000, "Member 'AT_UIStateIcon_RequestPlayAnimation::AnimType' has a wrong offset!");
static_assert(offsetof(AT_UIStateIcon_RequestPlayAnimation, PlayCount) == 0x000004, "Member 'AT_UIStateIcon_RequestPlayAnimation::PlayCount' has a wrong offset!");

// Function AT.AT_UIStateIcon.SetAnimReqThrough
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStateIcon_SetAnimReqThrough final
{
public:
	bool                                          IsThrough;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_SetAnimReqThrough) == 0x000001, "Wrong alignment on AT_UIStateIcon_SetAnimReqThrough");
static_assert(sizeof(AT_UIStateIcon_SetAnimReqThrough) == 0x000001, "Wrong size on AT_UIStateIcon_SetAnimReqThrough");
static_assert(offsetof(AT_UIStateIcon_SetAnimReqThrough, IsThrough) == 0x000000, "Member 'AT_UIStateIcon_SetAnimReqThrough::IsThrough' has a wrong offset!");

// Function AT.AT_UIStateIcon.SetBattleMode
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStateIcon_SetBattleMode final
{
public:
	bool                                          bInBatteleMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_SetBattleMode) == 0x000001, "Wrong alignment on AT_UIStateIcon_SetBattleMode");
static_assert(sizeof(AT_UIStateIcon_SetBattleMode) == 0x000001, "Wrong size on AT_UIStateIcon_SetBattleMode");
static_assert(offsetof(AT_UIStateIcon_SetBattleMode, bInBatteleMode) == 0x000000, "Member 'AT_UIStateIcon_SetBattleMode::bInBatteleMode' has a wrong offset!");

// Function AT.AT_UIStateIcon.SetBuffTimeRate
// 0x0004 (0x0004 - 0x0000)
struct AT_UIStateIcon_SetBuffTimeRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_SetBuffTimeRate) == 0x000004, "Wrong alignment on AT_UIStateIcon_SetBuffTimeRate");
static_assert(sizeof(AT_UIStateIcon_SetBuffTimeRate) == 0x000004, "Wrong size on AT_UIStateIcon_SetBuffTimeRate");
static_assert(offsetof(AT_UIStateIcon_SetBuffTimeRate, InRate) == 0x000000, "Member 'AT_UIStateIcon_SetBuffTimeRate::InRate' has a wrong offset!");

// Function AT.AT_UIStateIcon.SetIconInfo
// 0x0010 (0x0010 - 0x0000)
struct AT_UIStateIcon_SetIconInfo final
{
public:
	struct FStateIconInfo                         InIconInfo;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_SetIconInfo) == 0x000004, "Wrong alignment on AT_UIStateIcon_SetIconInfo");
static_assert(sizeof(AT_UIStateIcon_SetIconInfo) == 0x000010, "Wrong size on AT_UIStateIcon_SetIconInfo");
static_assert(offsetof(AT_UIStateIcon_SetIconInfo, InIconInfo) == 0x000000, "Member 'AT_UIStateIcon_SetIconInfo::InIconInfo' has a wrong offset!");

// Function AT.AT_UIStateIcon.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct AT_UIStateIcon_SetPosition final
{
public:
	struct FVector2D                              InPostion;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_SetPosition) == 0x000004, "Wrong alignment on AT_UIStateIcon_SetPosition");
static_assert(sizeof(AT_UIStateIcon_SetPosition) == 0x000008, "Wrong size on AT_UIStateIcon_SetPosition");
static_assert(offsetof(AT_UIStateIcon_SetPosition, InPostion) == 0x000000, "Member 'AT_UIStateIcon_SetPosition::InPostion' has a wrong offset!");

// Function AT.AT_UIStateIcon.SetSelfTimerMode
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStateIcon_SetSelfTimerMode final
{
public:
	bool                                          bOnTimer;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_SetSelfTimerMode) == 0x000001, "Wrong alignment on AT_UIStateIcon_SetSelfTimerMode");
static_assert(sizeof(AT_UIStateIcon_SetSelfTimerMode) == 0x000001, "Wrong size on AT_UIStateIcon_SetSelfTimerMode");
static_assert(offsetof(AT_UIStateIcon_SetSelfTimerMode, bOnTimer) == 0x000000, "Member 'AT_UIStateIcon_SetSelfTimerMode::bOnTimer' has a wrong offset!");

// Function AT.AT_UIStateIcon.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStateIcon_SetVisible final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_SetVisible) == 0x000001, "Wrong alignment on AT_UIStateIcon_SetVisible");
static_assert(sizeof(AT_UIStateIcon_SetVisible) == 0x000001, "Wrong size on AT_UIStateIcon_SetVisible");
static_assert(offsetof(AT_UIStateIcon_SetVisible, bIsVisible) == 0x000000, "Member 'AT_UIStateIcon_SetVisible::bIsVisible' has a wrong offset!");

// Function AT.AT_UIStateIcon.SetVisibleEffectLight
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStateIcon_SetVisibleEffectLight final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_SetVisibleEffectLight) == 0x000001, "Wrong alignment on AT_UIStateIcon_SetVisibleEffectLight");
static_assert(sizeof(AT_UIStateIcon_SetVisibleEffectLight) == 0x000001, "Wrong size on AT_UIStateIcon_SetVisibleEffectLight");
static_assert(offsetof(AT_UIStateIcon_SetVisibleEffectLight, InEnable) == 0x000000, "Member 'AT_UIStateIcon_SetVisibleEffectLight::InEnable' has a wrong offset!");

// Function AT.AT_UIStateIcon.GetPlayingAnim
// 0x0001 (0x0001 - 0x0000)
struct AT_UIStateIcon_GetPlayingAnim final
{
public:
	EAnimType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_GetPlayingAnim) == 0x000001, "Wrong alignment on AT_UIStateIcon_GetPlayingAnim");
static_assert(sizeof(AT_UIStateIcon_GetPlayingAnim) == 0x000001, "Wrong size on AT_UIStateIcon_GetPlayingAnim");
static_assert(offsetof(AT_UIStateIcon_GetPlayingAnim, ReturnValue) == 0x000000, "Member 'AT_UIStateIcon_GetPlayingAnim::ReturnValue' has a wrong offset!");

// Function AT.AT_UIStateIcon.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct AT_UIStateIcon_GetPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIStateIcon_GetPosition) == 0x000004, "Wrong alignment on AT_UIStateIcon_GetPosition");
static_assert(sizeof(AT_UIStateIcon_GetPosition) == 0x000008, "Wrong size on AT_UIStateIcon_GetPosition");
static_assert(offsetof(AT_UIStateIcon_GetPosition, ReturnValue) == 0x000000, "Member 'AT_UIStateIcon_GetPosition::ReturnValue' has a wrong offset!");

// Function AT.AT_UISystemWindow.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UISystemWindow_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UISystemWindow_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UISystemWindow_MouseClickDecide");
static_assert(sizeof(AT_UISystemWindow_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UISystemWindow_MouseClickDecide");
static_assert(offsetof(AT_UISystemWindow_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UISystemWindow_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UISystemWindow_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UISystemWindow.SetUpMessageWindow
// 0x0018 (0x0018 - 0x0000)
struct AT_UISystemWindow_SetUpMessageWindow final
{
public:
	class FString                                 MainMsg;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFeedMarkVisible;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UISystemWindow_SetUpMessageWindow) == 0x000008, "Wrong alignment on AT_UISystemWindow_SetUpMessageWindow");
static_assert(sizeof(AT_UISystemWindow_SetUpMessageWindow) == 0x000018, "Wrong size on AT_UISystemWindow_SetUpMessageWindow");
static_assert(offsetof(AT_UISystemWindow_SetUpMessageWindow, MainMsg) == 0x000000, "Member 'AT_UISystemWindow_SetUpMessageWindow::MainMsg' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_SetUpMessageWindow, bFeedMarkVisible) == 0x000010, "Member 'AT_UISystemWindow_SetUpMessageWindow::bFeedMarkVisible' has a wrong offset!");

// Function AT.AT_UISystemWindow.SetupSelectItemMessageWindow
// 0x0028 (0x0028 - 0x0000)
struct AT_UISystemWindow_SetupSelectItemMessageWindow final
{
public:
	class FString                                 MainTxt_0;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SelectItemCtn;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DefaultSelectNo;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UISystemWindow_SetupSelectItemMessageWindow) == 0x000008, "Wrong alignment on AT_UISystemWindow_SetupSelectItemMessageWindow");
static_assert(sizeof(AT_UISystemWindow_SetupSelectItemMessageWindow) == 0x000028, "Wrong size on AT_UISystemWindow_SetupSelectItemMessageWindow");
static_assert(offsetof(AT_UISystemWindow_SetupSelectItemMessageWindow, MainTxt_0) == 0x000000, "Member 'AT_UISystemWindow_SetupSelectItemMessageWindow::MainTxt_0' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_SetupSelectItemMessageWindow, SelectItemCtn) == 0x000010, "Member 'AT_UISystemWindow_SetupSelectItemMessageWindow::SelectItemCtn' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_SetupSelectItemMessageWindow, DefaultSelectNo) == 0x000020, "Member 'AT_UISystemWindow_SetupSelectItemMessageWindow::DefaultSelectNo' has a wrong offset!");

// Function AT.AT_UISystemWindow.SetupSelectItemTitleWindow
// 0x0028 (0x0028 - 0x0000)
struct AT_UISystemWindow_SetupSelectItemTitleWindow final
{
public:
	class FString                                 TitleTxt_0;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SelectItemCtn;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DefaultSelectNo;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UISystemWindow_SetupSelectItemTitleWindow) == 0x000008, "Wrong alignment on AT_UISystemWindow_SetupSelectItemTitleWindow");
static_assert(sizeof(AT_UISystemWindow_SetupSelectItemTitleWindow) == 0x000028, "Wrong size on AT_UISystemWindow_SetupSelectItemTitleWindow");
static_assert(offsetof(AT_UISystemWindow_SetupSelectItemTitleWindow, TitleTxt_0) == 0x000000, "Member 'AT_UISystemWindow_SetupSelectItemTitleWindow::TitleTxt_0' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_SetupSelectItemTitleWindow, SelectItemCtn) == 0x000010, "Member 'AT_UISystemWindow_SetupSelectItemTitleWindow::SelectItemCtn' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_SetupSelectItemTitleWindow, DefaultSelectNo) == 0x000020, "Member 'AT_UISystemWindow_SetupSelectItemTitleWindow::DefaultSelectNo' has a wrong offset!");

// Function AT.AT_UISystemWindow.SetupSelectOnlyWindow
// 0x0018 (0x0018 - 0x0000)
struct AT_UISystemWindow_SetupSelectOnlyWindow final
{
public:
	TArray<class FString>                         SelectItemCtn;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DefaultSelectNo;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UISystemWindow_SetupSelectOnlyWindow) == 0x000008, "Wrong alignment on AT_UISystemWindow_SetupSelectOnlyWindow");
static_assert(sizeof(AT_UISystemWindow_SetupSelectOnlyWindow) == 0x000018, "Wrong size on AT_UISystemWindow_SetupSelectOnlyWindow");
static_assert(offsetof(AT_UISystemWindow_SetupSelectOnlyWindow, SelectItemCtn) == 0x000000, "Member 'AT_UISystemWindow_SetupSelectOnlyWindow::SelectItemCtn' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_SetupSelectOnlyWindow, DefaultSelectNo) == 0x000010, "Member 'AT_UISystemWindow_SetupSelectOnlyWindow::DefaultSelectNo' has a wrong offset!");

// Function AT.AT_UISystemWindow.SetupTitleWindow
// 0x0028 (0x0028 - 0x0000)
struct AT_UISystemWindow_SetupTitleWindow final
{
public:
	class FString                                 TitleTxt_0;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MainMsg;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFeedMarkVisible;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AT_UISystemWindow_SetupTitleWindow) == 0x000008, "Wrong alignment on AT_UISystemWindow_SetupTitleWindow");
static_assert(sizeof(AT_UISystemWindow_SetupTitleWindow) == 0x000028, "Wrong size on AT_UISystemWindow_SetupTitleWindow");
static_assert(offsetof(AT_UISystemWindow_SetupTitleWindow, TitleTxt_0) == 0x000000, "Member 'AT_UISystemWindow_SetupTitleWindow::TitleTxt_0' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_SetupTitleWindow, MainMsg) == 0x000010, "Member 'AT_UISystemWindow_SetupTitleWindow::MainMsg' has a wrong offset!");
static_assert(offsetof(AT_UISystemWindow_SetupTitleWindow, bFeedMarkVisible) == 0x000020, "Member 'AT_UISystemWindow_SetupTitleWindow::bFeedMarkVisible' has a wrong offset!");

// Function AT.AT_UISystemWindow.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct AT_UISystemWindow_SetVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UISystemWindow_SetVisible) == 0x000001, "Wrong alignment on AT_UISystemWindow_SetVisible");
static_assert(sizeof(AT_UISystemWindow_SetVisible) == 0x000001, "Wrong size on AT_UISystemWindow_SetVisible");
static_assert(offsetof(AT_UISystemWindow_SetVisible, Visible) == 0x000000, "Member 'AT_UISystemWindow_SetVisible::Visible' has a wrong offset!");

// Function AT.AutoMoveTrigger.CheckTriggerId
// 0x0001 (0x0001 - 0x0000)
struct AutoMoveTrigger_CheckTriggerId final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoMoveTrigger_CheckTriggerId) == 0x000001, "Wrong alignment on AutoMoveTrigger_CheckTriggerId");
static_assert(sizeof(AutoMoveTrigger_CheckTriggerId) == 0x000001, "Wrong size on AutoMoveTrigger_CheckTriggerId");
static_assert(offsetof(AutoMoveTrigger_CheckTriggerId, ReturnValue) == 0x000000, "Member 'AutoMoveTrigger_CheckTriggerId::ReturnValue' has a wrong offset!");

// Function AT.AutoMoveTrigger.IsEnableTrigger
// 0x0001 (0x0001 - 0x0000)
struct AutoMoveTrigger_IsEnableTrigger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoMoveTrigger_IsEnableTrigger) == 0x000001, "Wrong alignment on AutoMoveTrigger_IsEnableTrigger");
static_assert(sizeof(AutoMoveTrigger_IsEnableTrigger) == 0x000001, "Wrong size on AutoMoveTrigger_IsEnableTrigger");
static_assert(offsetof(AutoMoveTrigger_IsEnableTrigger, ReturnValue) == 0x000000, "Member 'AutoMoveTrigger_IsEnableTrigger::ReturnValue' has a wrong offset!");

// Function AT.AT_UITips.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UITips_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UITips_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UITips_MouseClickDecide");
static_assert(sizeof(AT_UITips_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UITips_MouseClickDecide");
static_assert(offsetof(AT_UITips_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UITips_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UITips_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UITips_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.ATActCpl021SkillShortRange.IsHitWall
// 0x00B0 (0x00B0 - 0x0000)
struct ATActCpl021SkillShortRange_IsHitWall final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl021SkillShortRange_IsHitWall) == 0x000008, "Wrong alignment on ATActCpl021SkillShortRange_IsHitWall");
static_assert(sizeof(ATActCpl021SkillShortRange_IsHitWall) == 0x0000B0, "Wrong size on ATActCpl021SkillShortRange_IsHitWall");
static_assert(offsetof(ATActCpl021SkillShortRange_IsHitWall, HitComp) == 0x000000, "Member 'ATActCpl021SkillShortRange_IsHitWall::HitComp' has a wrong offset!");
static_assert(offsetof(ATActCpl021SkillShortRange_IsHitWall, OtherActor) == 0x000008, "Member 'ATActCpl021SkillShortRange_IsHitWall::OtherActor' has a wrong offset!");
static_assert(offsetof(ATActCpl021SkillShortRange_IsHitWall, OtherComp) == 0x000010, "Member 'ATActCpl021SkillShortRange_IsHitWall::OtherComp' has a wrong offset!");
static_assert(offsetof(ATActCpl021SkillShortRange_IsHitWall, NormalImpulse) == 0x000018, "Member 'ATActCpl021SkillShortRange_IsHitWall::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ATActCpl021SkillShortRange_IsHitWall, Hit) == 0x000028, "Member 'ATActCpl021SkillShortRange_IsHitWall::Hit' has a wrong offset!");

// Function AT.Chicken_Component.OnVisibleChangedCallBack
// 0x0001 (0x0001 - 0x0000)
struct Chicken_Component_OnVisibleChangedCallBack final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chicken_Component_OnVisibleChangedCallBack) == 0x000001, "Wrong alignment on Chicken_Component_OnVisibleChangedCallBack");
static_assert(sizeof(Chicken_Component_OnVisibleChangedCallBack) == 0x000001, "Wrong size on Chicken_Component_OnVisibleChangedCallBack");
static_assert(offsetof(Chicken_Component_OnVisibleChangedCallBack, State) == 0x000000, "Member 'Chicken_Component_OnVisibleChangedCallBack::State' has a wrong offset!");

// Function AT.AT_UIUtil.DebugChangeLangage
// 0x0002 (0x0002 - 0x0000)
struct AT_UIUtil_DebugChangeLangage final
{
public:
	ERegionType                                   InRegion;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELanguageType                                 InLanguage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIUtil_DebugChangeLangage) == 0x000001, "Wrong alignment on AT_UIUtil_DebugChangeLangage");
static_assert(sizeof(AT_UIUtil_DebugChangeLangage) == 0x000002, "Wrong size on AT_UIUtil_DebugChangeLangage");
static_assert(offsetof(AT_UIUtil_DebugChangeLangage, InRegion) == 0x000000, "Member 'AT_UIUtil_DebugChangeLangage::InRegion' has a wrong offset!");
static_assert(offsetof(AT_UIUtil_DebugChangeLangage, InLanguage) == 0x000001, "Member 'AT_UIUtil_DebugChangeLangage::InLanguage' has a wrong offset!");

// Function AT.AT_UIUtil.SettoUICommonInput
// 0x0008 (0x0008 - 0x0000)
struct AT_UIUtil_SettoUICommonInput final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIUtil_SettoUICommonInput) == 0x000008, "Wrong alignment on AT_UIUtil_SettoUICommonInput");
static_assert(sizeof(AT_UIUtil_SettoUICommonInput) == 0x000008, "Wrong size on AT_UIUtil_SettoUICommonInput");
static_assert(offsetof(AT_UIUtil_SettoUICommonInput, WorldContextObject) == 0x000000, "Member 'AT_UIUtil_SettoUICommonInput::WorldContextObject' has a wrong offset!");

// Function AT.AT_UIWindowManager.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIWindowManager_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIWindowManager_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIWindowManager_MouseClickDecide");
static_assert(sizeof(AT_UIWindowManager_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIWindowManager_MouseClickDecide");
static_assert(offsetof(AT_UIWindowManager_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIWindowManager_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIWindowManager_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIWindowManager_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.ATActHighBoost.DamageApplied
// 0x0088 (0x0088 - 0x0000)
struct ATActHighBoost_DamageApplied final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActHighBoost_DamageApplied) == 0x000008, "Wrong alignment on ATActHighBoost_DamageApplied");
static_assert(sizeof(ATActHighBoost_DamageApplied) == 0x000088, "Wrong size on ATActHighBoost_DamageApplied");
static_assert(offsetof(ATActHighBoost_DamageApplied, HitResult) == 0x000000, "Member 'ATActHighBoost_DamageApplied::HitResult' has a wrong offset!");

// Function AT.AT_UIXcmnAgreement.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIXcmnAgreement_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnAgreement_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIXcmnAgreement_MouseClickDecide");
static_assert(sizeof(AT_UIXcmnAgreement_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIXcmnAgreement_MouseClickDecide");
static_assert(offsetof(AT_UIXcmnAgreement_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIXcmnAgreement_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIXcmnAgreement_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIXcmnAgreement_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIXcmnBg.IsStopAnimation
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXcmnBg_IsStopAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnBg_IsStopAnimation) == 0x000001, "Wrong alignment on AT_UIXcmnBg_IsStopAnimation");
static_assert(sizeof(AT_UIXcmnBg_IsStopAnimation) == 0x000001, "Wrong size on AT_UIXcmnBg_IsStopAnimation");
static_assert(offsetof(AT_UIXcmnBg_IsStopAnimation, ReturnValue) == 0x000000, "Member 'AT_UIXcmnBg_IsStopAnimation::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXcmnBg.SetRootVisibility
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXcmnBg_SetRootVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnBg_SetRootVisibility) == 0x000001, "Wrong alignment on AT_UIXcmnBg_SetRootVisibility");
static_assert(sizeof(AT_UIXcmnBg_SetRootVisibility) == 0x000001, "Wrong size on AT_UIXcmnBg_SetRootVisibility");
static_assert(offsetof(AT_UIXcmnBg_SetRootVisibility, bVisible) == 0x000000, "Member 'AT_UIXcmnBg_SetRootVisibility::bVisible' has a wrong offset!");

// Function AT.AT_UIXcmnCredit.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXcmnCredit_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnCredit_IsLoaded) == 0x000001, "Wrong alignment on AT_UIXcmnCredit_IsLoaded");
static_assert(sizeof(AT_UIXcmnCredit_IsLoaded) == 0x000001, "Wrong size on AT_UIXcmnCredit_IsLoaded");
static_assert(offsetof(AT_UIXcmnCredit_IsLoaded, ReturnValue) == 0x000000, "Member 'AT_UIXcmnCredit_IsLoaded::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXCmnHeader.IsFinishSetFontType
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXCmnHeader_IsFinishSetFontType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXCmnHeader_IsFinishSetFontType) == 0x000001, "Wrong alignment on AT_UIXCmnHeader_IsFinishSetFontType");
static_assert(sizeof(AT_UIXCmnHeader_IsFinishSetFontType) == 0x000001, "Wrong size on AT_UIXCmnHeader_IsFinishSetFontType");
static_assert(offsetof(AT_UIXCmnHeader_IsFinishSetFontType, ReturnValue) == 0x000000, "Member 'AT_UIXCmnHeader_IsFinishSetFontType::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXCmnHeader.IsHeaderStateIn
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXCmnHeader_IsHeaderStateIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXCmnHeader_IsHeaderStateIn) == 0x000001, "Wrong alignment on AT_UIXCmnHeader_IsHeaderStateIn");
static_assert(sizeof(AT_UIXCmnHeader_IsHeaderStateIn) == 0x000001, "Wrong size on AT_UIXCmnHeader_IsHeaderStateIn");
static_assert(offsetof(AT_UIXCmnHeader_IsHeaderStateIn, ReturnValue) == 0x000000, "Member 'AT_UIXCmnHeader_IsHeaderStateIn::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXCmnHeader.SetFontType
// 0x0003 (0x0003 - 0x0000)
struct AT_UIXCmnHeader_SetFontType final
{
public:
	EXCmnHeaderFontType                           FontType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXCmnHeaderIconType                           IconType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStart;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXCmnHeader_SetFontType) == 0x000001, "Wrong alignment on AT_UIXCmnHeader_SetFontType");
static_assert(sizeof(AT_UIXCmnHeader_SetFontType) == 0x000003, "Wrong size on AT_UIXCmnHeader_SetFontType");
static_assert(offsetof(AT_UIXCmnHeader_SetFontType, FontType) == 0x000000, "Member 'AT_UIXCmnHeader_SetFontType::FontType' has a wrong offset!");
static_assert(offsetof(AT_UIXCmnHeader_SetFontType, IconType) == 0x000001, "Member 'AT_UIXCmnHeader_SetFontType::IconType' has a wrong offset!");
static_assert(offsetof(AT_UIXCmnHeader_SetFontType, bAutoStart) == 0x000002, "Member 'AT_UIXCmnHeader_SetFontType::bAutoStart' has a wrong offset!");

// Function AT.AT_UIXCmnHeader.SetFontTypeWithCategory
// 0x0003 (0x0003 - 0x0000)
struct AT_UIXCmnHeader_SetFontTypeWithCategory final
{
public:
	EXCmnHeaderFontType                           FontType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECOMMUNITY_CATEGORY                           CmuType;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStart;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXCmnHeader_SetFontTypeWithCategory) == 0x000001, "Wrong alignment on AT_UIXCmnHeader_SetFontTypeWithCategory");
static_assert(sizeof(AT_UIXCmnHeader_SetFontTypeWithCategory) == 0x000003, "Wrong size on AT_UIXCmnHeader_SetFontTypeWithCategory");
static_assert(offsetof(AT_UIXCmnHeader_SetFontTypeWithCategory, FontType) == 0x000000, "Member 'AT_UIXCmnHeader_SetFontTypeWithCategory::FontType' has a wrong offset!");
static_assert(offsetof(AT_UIXCmnHeader_SetFontTypeWithCategory, CmuType) == 0x000001, "Member 'AT_UIXCmnHeader_SetFontTypeWithCategory::CmuType' has a wrong offset!");
static_assert(offsetof(AT_UIXCmnHeader_SetFontTypeWithCategory, bAutoStart) == 0x000002, "Member 'AT_UIXCmnHeader_SetFontTypeWithCategory::bAutoStart' has a wrong offset!");

// Function AT.AT_UIXcmnHeaderS.PlayIn
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXcmnHeaderS_PlayIn final
{
public:
	EMiniHeaderType                               HeaderType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnHeaderS_PlayIn) == 0x000001, "Wrong alignment on AT_UIXcmnHeaderS_PlayIn");
static_assert(sizeof(AT_UIXcmnHeaderS_PlayIn) == 0x000001, "Wrong size on AT_UIXcmnHeaderS_PlayIn");
static_assert(offsetof(AT_UIXcmnHeaderS_PlayIn, HeaderType) == 0x000000, "Member 'AT_UIXcmnHeaderS_PlayIn::HeaderType' has a wrong offset!");

// Function AT.AT_UIXcmnMultiLineTextFitBox.SetText
// 0x0018 (0x0018 - 0x0000)
struct AT_UIXcmnMultiLineTextFitBox_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnMultiLineTextFitBox_SetText) == 0x000008, "Wrong alignment on AT_UIXcmnMultiLineTextFitBox_SetText");
static_assert(sizeof(AT_UIXcmnMultiLineTextFitBox_SetText) == 0x000018, "Wrong size on AT_UIXcmnMultiLineTextFitBox_SetText");
static_assert(offsetof(AT_UIXcmnMultiLineTextFitBox_SetText, InText) == 0x000000, "Member 'AT_UIXcmnMultiLineTextFitBox_SetText::InText' has a wrong offset!");

// Function AT.AT_UIXcmnMultiLineTextFitBox.GetText
// 0x0018 (0x0018 - 0x0000)
struct AT_UIXcmnMultiLineTextFitBox_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnMultiLineTextFitBox_GetText) == 0x000008, "Wrong alignment on AT_UIXcmnMultiLineTextFitBox_GetText");
static_assert(sizeof(AT_UIXcmnMultiLineTextFitBox_GetText) == 0x000018, "Wrong size on AT_UIXcmnMultiLineTextFitBox_GetText");
static_assert(offsetof(AT_UIXcmnMultiLineTextFitBox_GetText, ReturnValue) == 0x000000, "Member 'AT_UIXcmnMultiLineTextFitBox_GetText::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXCmnPause.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIXCmnPause_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXCmnPause_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIXCmnPause_MouseClickDecide");
static_assert(sizeof(AT_UIXCmnPause_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIXCmnPause_MouseClickDecide");
static_assert(offsetof(AT_UIXCmnPause_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIXCmnPause_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIXCmnPause_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIXCmnPause_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIXcmnSystemIcon.DebugRequestLoad
// 0x0004 (0x0004 - 0x0000)
struct AT_UIXcmnSystemIcon_DebugRequestLoad final
{
public:
	int32                                         InNo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnSystemIcon_DebugRequestLoad) == 0x000004, "Wrong alignment on AT_UIXcmnSystemIcon_DebugRequestLoad");
static_assert(sizeof(AT_UIXcmnSystemIcon_DebugRequestLoad) == 0x000004, "Wrong size on AT_UIXcmnSystemIcon_DebugRequestLoad");
static_assert(offsetof(AT_UIXcmnSystemIcon_DebugRequestLoad, InNo) == 0x000000, "Member 'AT_UIXcmnSystemIcon_DebugRequestLoad::InNo' has a wrong offset!");

// Function AT.AT_UIXcmnSystemIcon.OnSaveEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXcmnSystemIcon_OnSaveEnd final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnSystemIcon_OnSaveEnd) == 0x000001, "Wrong alignment on AT_UIXcmnSystemIcon_OnSaveEnd");
static_assert(sizeof(AT_UIXcmnSystemIcon_OnSaveEnd) == 0x000001, "Wrong size on AT_UIXcmnSystemIcon_OnSaveEnd");
static_assert(offsetof(AT_UIXcmnSystemIcon_OnSaveEnd, IsSuccess) == 0x000000, "Member 'AT_UIXcmnSystemIcon_OnSaveEnd::IsSuccess' has a wrong offset!");

// Function AT.AT_UIXcmnSystemIcon.OnSystemSaveLoadEnd
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXcmnSystemIcon_OnSystemSaveLoadEnd final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnSystemIcon_OnSystemSaveLoadEnd) == 0x000001, "Wrong alignment on AT_UIXcmnSystemIcon_OnSystemSaveLoadEnd");
static_assert(sizeof(AT_UIXcmnSystemIcon_OnSystemSaveLoadEnd) == 0x000001, "Wrong size on AT_UIXcmnSystemIcon_OnSystemSaveLoadEnd");
static_assert(offsetof(AT_UIXcmnSystemIcon_OnSystemSaveLoadEnd, IsSuccess) == 0x000000, "Member 'AT_UIXcmnSystemIcon_OnSystemSaveLoadEnd::IsSuccess' has a wrong offset!");

// Function AT.AT_UIXcmnWin02.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIXcmnWin02_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnWin02_MouseClickDecide) == 0x000008, "Wrong alignment on AT_UIXcmnWin02_MouseClickDecide");
static_assert(sizeof(AT_UIXcmnWin02_MouseClickDecide) == 0x0000A8, "Wrong size on AT_UIXcmnWin02_MouseClickDecide");
static_assert(offsetof(AT_UIXcmnWin02_MouseClickDecide, InGeometry) == 0x000000, "Member 'AT_UIXcmnWin02_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIXcmnWin02_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'AT_UIXcmnWin02_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIXcmnWin02.MouseClickDownArrow
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIXcmnWin02_MouseClickDownArrow final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnWin02_MouseClickDownArrow) == 0x000008, "Wrong alignment on AT_UIXcmnWin02_MouseClickDownArrow");
static_assert(sizeof(AT_UIXcmnWin02_MouseClickDownArrow) == 0x0000A8, "Wrong size on AT_UIXcmnWin02_MouseClickDownArrow");
static_assert(offsetof(AT_UIXcmnWin02_MouseClickDownArrow, InGeometry) == 0x000000, "Member 'AT_UIXcmnWin02_MouseClickDownArrow::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIXcmnWin02_MouseClickDownArrow, InMouseEvent) == 0x000038, "Member 'AT_UIXcmnWin02_MouseClickDownArrow::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIXcmnWin02.MouseClickUpArrow
// 0x00A8 (0x00A8 - 0x0000)
struct AT_UIXcmnWin02_MouseClickUpArrow final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXcmnWin02_MouseClickUpArrow) == 0x000008, "Wrong alignment on AT_UIXcmnWin02_MouseClickUpArrow");
static_assert(sizeof(AT_UIXcmnWin02_MouseClickUpArrow) == 0x0000A8, "Wrong size on AT_UIXcmnWin02_MouseClickUpArrow");
static_assert(offsetof(AT_UIXcmnWin02_MouseClickUpArrow, InGeometry) == 0x000000, "Member 'AT_UIXcmnWin02_MouseClickUpArrow::InGeometry' has a wrong offset!");
static_assert(offsetof(AT_UIXcmnWin02_MouseClickUpArrow, InMouseEvent) == 0x000038, "Member 'AT_UIXcmnWin02_MouseClickUpArrow::InMouseEvent' has a wrong offset!");

// Function AT.AT_UIXListBar01.DebugRequest
// 0x0004 (0x0004 - 0x0000)
struct AT_UIXListBar01_DebugRequest final
{
public:
	int32                                         InNo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_DebugRequest) == 0x000004, "Wrong alignment on AT_UIXListBar01_DebugRequest");
static_assert(sizeof(AT_UIXListBar01_DebugRequest) == 0x000004, "Wrong size on AT_UIXListBar01_DebugRequest");
static_assert(offsetof(AT_UIXListBar01_DebugRequest, InNo) == 0x000000, "Member 'AT_UIXListBar01_DebugRequest::InNo' has a wrong offset!");

// Function AT.AT_UIXListBar01.Focus
// 0x0004 (0x0004 - 0x0000)
struct AT_UIXListBar01_Focus final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_Focus) == 0x000004, "Wrong alignment on AT_UIXListBar01_Focus");
static_assert(sizeof(AT_UIXListBar01_Focus) == 0x000004, "Wrong size on AT_UIXListBar01_Focus");
static_assert(offsetof(AT_UIXListBar01_Focus, Index_0) == 0x000000, "Member 'AT_UIXListBar01_Focus::Index_0' has a wrong offset!");

// Function AT.AT_UIXListBar01.GetNotSelect
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXListBar01_GetNotSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_GetNotSelect) == 0x000001, "Wrong alignment on AT_UIXListBar01_GetNotSelect");
static_assert(sizeof(AT_UIXListBar01_GetNotSelect) == 0x000001, "Wrong size on AT_UIXListBar01_GetNotSelect");
static_assert(offsetof(AT_UIXListBar01_GetNotSelect, ReturnValue) == 0x000000, "Member 'AT_UIXListBar01_GetNotSelect::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXListBar01.IsBusy
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXListBar01_IsBusy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_IsBusy) == 0x000001, "Wrong alignment on AT_UIXListBar01_IsBusy");
static_assert(sizeof(AT_UIXListBar01_IsBusy) == 0x000001, "Wrong size on AT_UIXListBar01_IsBusy");
static_assert(offsetof(AT_UIXListBar01_IsBusy, ReturnValue) == 0x000000, "Member 'AT_UIXListBar01_IsBusy::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXListBar01.LoseFocus
// 0x0004 (0x0004 - 0x0000)
struct AT_UIXListBar01_LoseFocus final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_LoseFocus) == 0x000004, "Wrong alignment on AT_UIXListBar01_LoseFocus");
static_assert(sizeof(AT_UIXListBar01_LoseFocus) == 0x000004, "Wrong size on AT_UIXListBar01_LoseFocus");
static_assert(offsetof(AT_UIXListBar01_LoseFocus, Index_0) == 0x000000, "Member 'AT_UIXListBar01_LoseFocus::Index_0' has a wrong offset!");

// Function AT.AT_UIXListBar01.SetItemName
// 0x0010 (0x0010 - 0x0000)
struct AT_UIXListBar01_SetItemName final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_SetItemName) == 0x000008, "Wrong alignment on AT_UIXListBar01_SetItemName");
static_assert(sizeof(AT_UIXListBar01_SetItemName) == 0x000010, "Wrong size on AT_UIXListBar01_SetItemName");
static_assert(offsetof(AT_UIXListBar01_SetItemName, InString) == 0x000000, "Member 'AT_UIXListBar01_SetItemName::InString' has a wrong offset!");

// Function AT.AT_UIXListBar01.SetNotSelect
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXListBar01_SetNotSelect final
{
public:
	bool                                          NotSelect;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_SetNotSelect) == 0x000001, "Wrong alignment on AT_UIXListBar01_SetNotSelect");
static_assert(sizeof(AT_UIXListBar01_SetNotSelect) == 0x000001, "Wrong size on AT_UIXListBar01_SetNotSelect");
static_assert(offsetof(AT_UIXListBar01_SetNotSelect, NotSelect) == 0x000000, "Member 'AT_UIXListBar01_SetNotSelect::NotSelect' has a wrong offset!");

// Function AT.AT_UIXListBar01.SetState
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXListBar01_SetState final
{
public:
	EUIXLISTBAR01_STATE_ID                        InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_SetState) == 0x000001, "Wrong alignment on AT_UIXListBar01_SetState");
static_assert(sizeof(AT_UIXListBar01_SetState) == 0x000001, "Wrong size on AT_UIXListBar01_SetState");
static_assert(offsetof(AT_UIXListBar01_SetState, InState) == 0x000000, "Member 'AT_UIXListBar01_SetState::InState' has a wrong offset!");

// Function AT.AT_UIXListBar01.SetSubMenuParam
// 0x0018 (0x0018 - 0x0000)
struct AT_UIXListBar01_SetSubMenuParam final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_SetSubMenuParam) == 0x000008, "Wrong alignment on AT_UIXListBar01_SetSubMenuParam");
static_assert(sizeof(AT_UIXListBar01_SetSubMenuParam) == 0x000018, "Wrong size on AT_UIXListBar01_SetSubMenuParam");
static_assert(offsetof(AT_UIXListBar01_SetSubMenuParam, Index_0) == 0x000000, "Member 'AT_UIXListBar01_SetSubMenuParam::Index_0' has a wrong offset!");
static_assert(offsetof(AT_UIXListBar01_SetSubMenuParam, ItemName) == 0x000008, "Member 'AT_UIXListBar01_SetSubMenuParam::ItemName' has a wrong offset!");

// Function AT.AT_UIXListBar01.GetState
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXListBar01_GetState final
{
public:
	EUIXLISTBAR01_STATE_ID                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_GetState) == 0x000001, "Wrong alignment on AT_UIXListBar01_GetState");
static_assert(sizeof(AT_UIXListBar01_GetState) == 0x000001, "Wrong size on AT_UIXListBar01_GetState");
static_assert(offsetof(AT_UIXListBar01_GetState, ReturnValue) == 0x000000, "Member 'AT_UIXListBar01_GetState::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXListBar01.IsEnable
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXListBar01_IsEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_IsEnable) == 0x000001, "Wrong alignment on AT_UIXListBar01_IsEnable");
static_assert(sizeof(AT_UIXListBar01_IsEnable) == 0x000001, "Wrong size on AT_UIXListBar01_IsEnable");
static_assert(offsetof(AT_UIXListBar01_IsEnable, ReturnValue) == 0x000000, "Member 'AT_UIXListBar01_IsEnable::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXListBar01.IsEndEnter
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXListBar01_IsEndEnter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_IsEndEnter) == 0x000001, "Wrong alignment on AT_UIXListBar01_IsEndEnter");
static_assert(sizeof(AT_UIXListBar01_IsEndEnter) == 0x000001, "Wrong size on AT_UIXListBar01_IsEndEnter");
static_assert(offsetof(AT_UIXListBar01_IsEndEnter, ReturnValue) == 0x000000, "Member 'AT_UIXListBar01_IsEndEnter::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXListBar01.IsEndSubEnter
// 0x0001 (0x0001 - 0x0000)
struct AT_UIXListBar01_IsEndSubEnter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXListBar01_IsEndSubEnter) == 0x000001, "Wrong alignment on AT_UIXListBar01_IsEndSubEnter");
static_assert(sizeof(AT_UIXListBar01_IsEndSubEnter) == 0x000001, "Wrong size on AT_UIXListBar01_IsEndSubEnter");
static_assert(offsetof(AT_UIXListBar01_IsEndSubEnter, ReturnValue) == 0x000000, "Member 'AT_UIXListBar01_IsEndSubEnter::ReturnValue' has a wrong offset!");

// Function AT.AT_UIXlistBar04.Set
// 0x0058 (0x0058 - 0x0000)
struct AT_UIXlistBar04_Set final
{
public:
	struct FXlistBar04Info                        XlistBar04Info;                                    // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXlistBar04_Set) == 0x000008, "Wrong alignment on AT_UIXlistBar04_Set");
static_assert(sizeof(AT_UIXlistBar04_Set) == 0x000058, "Wrong size on AT_UIXlistBar04_Set");
static_assert(offsetof(AT_UIXlistBar04_Set, XlistBar04Info) == 0x000000, "Member 'AT_UIXlistBar04_Set::XlistBar04Info' has a wrong offset!");

// Function AT.ATActCpl013ShockWave.OnChangeProjectilePhase
// 0x0001 (0x0001 - 0x0000)
struct ATActCpl013ShockWave_OnChangeProjectilePhase final
{
public:
	bool                                          PlayerHit;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl013ShockWave_OnChangeProjectilePhase) == 0x000001, "Wrong alignment on ATActCpl013ShockWave_OnChangeProjectilePhase");
static_assert(sizeof(ATActCpl013ShockWave_OnChangeProjectilePhase) == 0x000001, "Wrong size on ATActCpl013ShockWave_OnChangeProjectilePhase");
static_assert(offsetof(ATActCpl013ShockWave_OnChangeProjectilePhase, PlayerHit) == 0x000000, "Member 'ATActCpl013ShockWave_OnChangeProjectilePhase::PlayerHit' has a wrong offset!");

// Function AT.AT_UIXlistCustom00.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct AT_UIXlistCustom00_MouseWheel final
{
public:
	float                                         Dir;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIXlistCustom00_MouseWheel) == 0x000004, "Wrong alignment on AT_UIXlistCustom00_MouseWheel");
static_assert(sizeof(AT_UIXlistCustom00_MouseWheel) == 0x000004, "Wrong size on AT_UIXlistCustom00_MouseWheel");
static_assert(offsetof(AT_UIXlistCustom00_MouseWheel, Dir) == 0x000000, "Member 'AT_UIXlistCustom00_MouseWheel::Dir' has a wrong offset!");

// Function AT.AT_UIZCWNavigation.OnChangedExtendProgress
// 0x0008 (0x0008 - 0x0000)
struct AT_UIZCWNavigation_OnChangedExtendProgress final
{
public:
	class FName                                   InProgressId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_UIZCWNavigation_OnChangedExtendProgress) == 0x000004, "Wrong alignment on AT_UIZCWNavigation_OnChangedExtendProgress");
static_assert(sizeof(AT_UIZCWNavigation_OnChangedExtendProgress) == 0x000008, "Wrong size on AT_UIZCWNavigation_OnChangedExtendProgress");
static_assert(offsetof(AT_UIZCWNavigation_OnChangedExtendProgress, InProgressId) == 0x000000, "Member 'AT_UIZCWNavigation_OnChangedExtendProgress::InProgressId' has a wrong offset!");

// Function AT.ATFacialComponent.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct ATFacialComponent_OnMontageEnded final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATFacialComponent_OnMontageEnded) == 0x000008, "Wrong alignment on ATFacialComponent_OnMontageEnded");
static_assert(sizeof(ATFacialComponent_OnMontageEnded) == 0x000010, "Wrong size on ATFacialComponent_OnMontageEnded");
static_assert(offsetof(ATFacialComponent_OnMontageEnded, PMontage) == 0x000000, "Member 'ATFacialComponent_OnMontageEnded::PMontage' has a wrong offset!");
static_assert(offsetof(ATFacialComponent_OnMontageEnded, bInterrupted) == 0x000008, "Member 'ATFacialComponent_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function AT.ATFacialComponent.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct ATFacialComponent_OnMontageStarted final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFacialComponent_OnMontageStarted) == 0x000008, "Wrong alignment on ATFacialComponent_OnMontageStarted");
static_assert(sizeof(ATFacialComponent_OnMontageStarted) == 0x000008, "Wrong size on ATFacialComponent_OnMontageStarted");
static_assert(offsetof(ATFacialComponent_OnMontageStarted, PMontage) == 0x000000, "Member 'ATFacialComponent_OnMontageStarted::PMontage' has a wrong offset!");

// Function AT.ATFacialComponent.OnPostChangeAnimationBlueprint
// 0x0010 (0x0010 - 0x0000)
struct ATFacialComponent_OnPostChangeAnimationBlueprint final
{
public:
	const class UClass*                           InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           InMesh;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFacialComponent_OnPostChangeAnimationBlueprint) == 0x000008, "Wrong alignment on ATFacialComponent_OnPostChangeAnimationBlueprint");
static_assert(sizeof(ATFacialComponent_OnPostChangeAnimationBlueprint) == 0x000010, "Wrong size on ATFacialComponent_OnPostChangeAnimationBlueprint");
static_assert(offsetof(ATFacialComponent_OnPostChangeAnimationBlueprint, InClass) == 0x000000, "Member 'ATFacialComponent_OnPostChangeAnimationBlueprint::InClass' has a wrong offset!");
static_assert(offsetof(ATFacialComponent_OnPostChangeAnimationBlueprint, InMesh) == 0x000008, "Member 'ATFacialComponent_OnPostChangeAnimationBlueprint::InMesh' has a wrong offset!");

// Function AT.ATFacialComponent.OnPreChangeAnimationBlueprint
// 0x0010 (0x0010 - 0x0000)
struct ATFacialComponent_OnPreChangeAnimationBlueprint final
{
public:
	const class UClass*                           InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           InMesh;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFacialComponent_OnPreChangeAnimationBlueprint) == 0x000008, "Wrong alignment on ATFacialComponent_OnPreChangeAnimationBlueprint");
static_assert(sizeof(ATFacialComponent_OnPreChangeAnimationBlueprint) == 0x000010, "Wrong size on ATFacialComponent_OnPreChangeAnimationBlueprint");
static_assert(offsetof(ATFacialComponent_OnPreChangeAnimationBlueprint, InClass) == 0x000000, "Member 'ATFacialComponent_OnPreChangeAnimationBlueprint::InClass' has a wrong offset!");
static_assert(offsetof(ATFacialComponent_OnPreChangeAnimationBlueprint, InMesh) == 0x000008, "Member 'ATFacialComponent_OnPreChangeAnimationBlueprint::InMesh' has a wrong offset!");

// Function AT.ATFacialComponent.ResetForceSetting
// 0x0001 (0x0001 - 0x0000)
struct ATFacialComponent_ResetForceSetting final
{
public:
	EQUEST_GENERAL_TALK_TIMING                    Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFacialComponent_ResetForceSetting) == 0x000001, "Wrong alignment on ATFacialComponent_ResetForceSetting");
static_assert(sizeof(ATFacialComponent_ResetForceSetting) == 0x000001, "Wrong size on ATFacialComponent_ResetForceSetting");
static_assert(offsetof(ATFacialComponent_ResetForceSetting, Timing) == 0x000000, "Member 'ATFacialComponent_ResetForceSetting::Timing' has a wrong offset!");

// Function AT.ATFacialComponent.SetFacialMontage
// 0x0001 (0x0001 - 0x0000)
struct ATFacialComponent_SetFacialMontage final
{
public:
	EFacialType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFacialComponent_SetFacialMontage) == 0x000001, "Wrong alignment on ATFacialComponent_SetFacialMontage");
static_assert(sizeof(ATFacialComponent_SetFacialMontage) == 0x000001, "Wrong size on ATFacialComponent_SetFacialMontage");
static_assert(offsetof(ATFacialComponent_SetFacialMontage, Type) == 0x000000, "Member 'ATFacialComponent_SetFacialMontage::Type' has a wrong offset!");

// Function AT.ATDirectionRushQTE.OnInputQTEResult
// 0x0108 (0x0108 - 0x0000)
struct ATDirectionRushQTE_OnInputQTEResult final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDirectionRushQTE_OnInputQTEResult) == 0x000008, "Wrong alignment on ATDirectionRushQTE_OnInputQTEResult");
static_assert(sizeof(ATDirectionRushQTE_OnInputQTEResult) == 0x000108, "Wrong size on ATDirectionRushQTE_OnInputQTEResult");
static_assert(offsetof(ATDirectionRushQTE_OnInputQTEResult, EventParam) == 0x000000, "Member 'ATDirectionRushQTE_OnInputQTEResult::EventParam' has a wrong offset!");

// Function AT.SuperTrainingComponent.OnLoadWidget
// 0x0008 (0x0008 - 0x0000)
struct SuperTrainingComponent_OnLoadWidget final
{
public:
	class UATDataAssetUiAsyncLoad*                InLoader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SuperTrainingComponent_OnLoadWidget) == 0x000008, "Wrong alignment on SuperTrainingComponent_OnLoadWidget");
static_assert(sizeof(SuperTrainingComponent_OnLoadWidget) == 0x000008, "Wrong size on SuperTrainingComponent_OnLoadWidget");
static_assert(offsetof(SuperTrainingComponent_OnLoadWidget, InLoader) == 0x000000, "Member 'SuperTrainingComponent_OnLoadWidget::InLoader' has a wrong offset!");

// Function AT.ATActCpl011BSkilll004.Cpl011BSkill104ResetCamera
// 0x0010 (0x0010 - 0x0000)
struct ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera) == 0x000008, "Wrong alignment on ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera");
static_assert(sizeof(ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera) == 0x000010, "Wrong size on ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera");
static_assert(offsetof(ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera, InCharacter) == 0x000000, "Member 'ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera::InCharacter' has a wrong offset!");
static_assert(offsetof(ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera, InActionIdPrev) == 0x000008, "Member 'ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera, InActionIdNext) == 0x00000C, "Member 'ATActCpl011BSkilll004_Cpl011BSkill104ResetCamera::InActionIdNext' has a wrong offset!");

// Function AT.ATEventBattleMission.GardBreakStart
// 0x0008 (0x0008 - 0x0000)
struct ATEventBattleMission_GardBreakStart final
{
public:
	class AAT_Character*                          TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleMission_GardBreakStart) == 0x000008, "Wrong alignment on ATEventBattleMission_GardBreakStart");
static_assert(sizeof(ATEventBattleMission_GardBreakStart) == 0x000008, "Wrong size on ATEventBattleMission_GardBreakStart");
static_assert(offsetof(ATEventBattleMission_GardBreakStart, TargetCharacter) == 0x000000, "Member 'ATEventBattleMission_GardBreakStart::TargetCharacter' has a wrong offset!");

// Function AT.ATEventBattleMission.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct ATEventBattleMission_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleMission_OnActionChange) == 0x000008, "Wrong alignment on ATEventBattleMission_OnActionChange");
static_assert(sizeof(ATEventBattleMission_OnActionChange) == 0x000010, "Wrong size on ATEventBattleMission_OnActionChange");
static_assert(offsetof(ATEventBattleMission_OnActionChange, InCharacter) == 0x000000, "Member 'ATEventBattleMission_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(ATEventBattleMission_OnActionChange, InActionIdPrev) == 0x000008, "Member 'ATEventBattleMission_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATEventBattleMission_OnActionChange, InActionIdNext) == 0x00000C, "Member 'ATEventBattleMission_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.ATEventBattleMission.OnComboAddEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleMission_OnComboAddEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleMission_OnComboAddEvent) == 0x000008, "Wrong alignment on ATEventBattleMission_OnComboAddEvent");
static_assert(sizeof(ATEventBattleMission_OnComboAddEvent) == 0x000108, "Wrong size on ATEventBattleMission_OnComboAddEvent");
static_assert(offsetof(ATEventBattleMission_OnComboAddEvent, EvParam) == 0x000000, "Member 'ATEventBattleMission_OnComboAddEvent::EvParam' has a wrong offset!");

// Function AT.ATEventBattleMission.OnComboEndEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleMission_OnComboEndEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleMission_OnComboEndEvent) == 0x000008, "Wrong alignment on ATEventBattleMission_OnComboEndEvent");
static_assert(sizeof(ATEventBattleMission_OnComboEndEvent) == 0x000108, "Wrong size on ATEventBattleMission_OnComboEndEvent");
static_assert(offsetof(ATEventBattleMission_OnComboEndEvent, EvParam) == 0x000000, "Member 'ATEventBattleMission_OnComboEndEvent::EvParam' has a wrong offset!");

// Function AT.ATEventBattleMission.OnDamageHitEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleMission_OnDamageHitEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleMission_OnDamageHitEvent) == 0x000008, "Wrong alignment on ATEventBattleMission_OnDamageHitEvent");
static_assert(sizeof(ATEventBattleMission_OnDamageHitEvent) == 0x000108, "Wrong size on ATEventBattleMission_OnDamageHitEvent");
static_assert(offsetof(ATEventBattleMission_OnDamageHitEvent, EvParam) == 0x000000, "Member 'ATEventBattleMission_OnDamageHitEvent::EvParam' has a wrong offset!");

// Function AT.ATEventBattleMission.OnRingoutEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleMission_OnRingoutEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleMission_OnRingoutEvent) == 0x000008, "Wrong alignment on ATEventBattleMission_OnRingoutEvent");
static_assert(sizeof(ATEventBattleMission_OnRingoutEvent) == 0x000108, "Wrong size on ATEventBattleMission_OnRingoutEvent");
static_assert(offsetof(ATEventBattleMission_OnRingoutEvent, EvParam) == 0x000000, "Member 'ATEventBattleMission_OnRingoutEvent::EvParam' has a wrong offset!");

// Function AT.ATEventBattleMission.StunStart
// 0x0008 (0x0008 - 0x0000)
struct ATEventBattleMission_StunStart final
{
public:
	class AAT_Character*                          TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleMission_StunStart) == 0x000008, "Wrong alignment on ATEventBattleMission_StunStart");
static_assert(sizeof(ATEventBattleMission_StunStart) == 0x000008, "Wrong size on ATEventBattleMission_StunStart");
static_assert(offsetof(ATEventBattleMission_StunStart, TargetCharacter) == 0x000000, "Member 'ATEventBattleMission_StunStart::TargetCharacter' has a wrong offset!");

// Function AT.ATLevelChanger.OnLevelShown
// 0x0008 (0x0008 - 0x0000)
struct ATLevelChanger_OnLevelShown final
{
public:
	class ULevelStreaming*                        StreamingLevel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelChanger_OnLevelShown) == 0x000008, "Wrong alignment on ATLevelChanger_OnLevelShown");
static_assert(sizeof(ATLevelChanger_OnLevelShown) == 0x000008, "Wrong size on ATLevelChanger_OnLevelShown");
static_assert(offsetof(ATLevelChanger_OnLevelShown, StreamingLevel) == 0x000000, "Member 'ATLevelChanger_OnLevelShown::StreamingLevel' has a wrong offset!");

// Function AT.ATMapIconComponent.NativeInitialize
// 0x0108 (0x0108 - 0x0000)
struct ATMapIconComponent_NativeInitialize final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATMapIconComponent_NativeInitialize) == 0x000008, "Wrong alignment on ATMapIconComponent_NativeInitialize");
static_assert(sizeof(ATMapIconComponent_NativeInitialize) == 0x000108, "Wrong size on ATMapIconComponent_NativeInitialize");
static_assert(offsetof(ATMapIconComponent_NativeInitialize, Param) == 0x000000, "Member 'ATMapIconComponent_NativeInitialize::Param' has a wrong offset!");

// Function AT.ATMapIconComponent.RemoveLandMarkIcon
// 0x0001 (0x0001 - 0x0000)
struct ATMapIconComponent_RemoveLandMarkIcon final
{
public:
	ELandmarkIconType                             InLandmarkType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATMapIconComponent_RemoveLandMarkIcon) == 0x000001, "Wrong alignment on ATMapIconComponent_RemoveLandMarkIcon");
static_assert(sizeof(ATMapIconComponent_RemoveLandMarkIcon) == 0x000001, "Wrong size on ATMapIconComponent_RemoveLandMarkIcon");
static_assert(offsetof(ATMapIconComponent_RemoveLandMarkIcon, InLandmarkType) == 0x000000, "Member 'ATMapIconComponent_RemoveLandMarkIcon::InLandmarkType' has a wrong offset!");

// Function AT.ATMapIconComponent.SetIsShowMapIcon
// 0x0001 (0x0001 - 0x0000)
struct ATMapIconComponent_SetIsShowMapIcon final
{
public:
	bool                                          bIsShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATMapIconComponent_SetIsShowMapIcon) == 0x000001, "Wrong alignment on ATMapIconComponent_SetIsShowMapIcon");
static_assert(sizeof(ATMapIconComponent_SetIsShowMapIcon) == 0x000001, "Wrong size on ATMapIconComponent_SetIsShowMapIcon");
static_assert(offsetof(ATMapIconComponent_SetIsShowMapIcon, bIsShow) == 0x000000, "Member 'ATMapIconComponent_SetIsShowMapIcon::bIsShow' has a wrong offset!");

// Function AT.ATMapIconComponent.SetLandMarkIcon
// 0x0001 (0x0001 - 0x0000)
struct ATMapIconComponent_SetLandMarkIcon final
{
public:
	ELandmarkIconType                             InLandmarkType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATMapIconComponent_SetLandMarkIcon) == 0x000001, "Wrong alignment on ATMapIconComponent_SetLandMarkIcon");
static_assert(sizeof(ATMapIconComponent_SetLandMarkIcon) == 0x000001, "Wrong size on ATMapIconComponent_SetLandMarkIcon");
static_assert(offsetof(ATMapIconComponent_SetLandMarkIcon, InLandmarkType) == 0x000000, "Member 'ATMapIconComponent_SetLandMarkIcon::InLandmarkType' has a wrong offset!");

// Function AT.ATMapIconComponent.SetMapIcon
// 0x0008 (0x0008 - 0x0000)
struct ATMapIconComponent_SetMapIcon final
{
public:
	EMapIcon                                      InMapIconType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSearchRangeRadius;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATMapIconComponent_SetMapIcon) == 0x000004, "Wrong alignment on ATMapIconComponent_SetMapIcon");
static_assert(sizeof(ATMapIconComponent_SetMapIcon) == 0x000008, "Wrong size on ATMapIconComponent_SetMapIcon");
static_assert(offsetof(ATMapIconComponent_SetMapIcon, InMapIconType) == 0x000000, "Member 'ATMapIconComponent_SetMapIcon::InMapIconType' has a wrong offset!");
static_assert(offsetof(ATMapIconComponent_SetMapIcon, InSearchRangeRadius) == 0x000004, "Member 'ATMapIconComponent_SetMapIcon::InSearchRangeRadius' has a wrong offset!");

// Function AT.ATMapIconComponent.SetMapIconAndName
// 0x0018 (0x0018 - 0x0000)
struct ATMapIconComponent_SetMapIconAndName final
{
public:
	EMapIcon                                      InMapIconType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSearchRangeRadius;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseNo;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATMapIconComponent_SetMapIconAndName) == 0x000004, "Wrong alignment on ATMapIconComponent_SetMapIconAndName");
static_assert(sizeof(ATMapIconComponent_SetMapIconAndName) == 0x000018, "Wrong size on ATMapIconComponent_SetMapIconAndName");
static_assert(offsetof(ATMapIconComponent_SetMapIconAndName, InMapIconType) == 0x000000, "Member 'ATMapIconComponent_SetMapIconAndName::InMapIconType' has a wrong offset!");
static_assert(offsetof(ATMapIconComponent_SetMapIconAndName, InSearchRangeRadius) == 0x000004, "Member 'ATMapIconComponent_SetMapIconAndName::InSearchRangeRadius' has a wrong offset!");
static_assert(offsetof(ATMapIconComponent_SetMapIconAndName, QuestId) == 0x000008, "Member 'ATMapIconComponent_SetMapIconAndName::QuestId' has a wrong offset!");
static_assert(offsetof(ATMapIconComponent_SetMapIconAndName, PhaseNo) == 0x000010, "Member 'ATMapIconComponent_SetMapIconAndName::PhaseNo' has a wrong offset!");

// Function AT.ATActCpl041EVanishingBall.OnChangeProjectilePhase
// 0x0001 (0x0001 - 0x0000)
struct ATActCpl041EVanishingBall_OnChangeProjectilePhase final
{
public:
	bool                                          PlayerHit;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl041EVanishingBall_OnChangeProjectilePhase) == 0x000001, "Wrong alignment on ATActCpl041EVanishingBall_OnChangeProjectilePhase");
static_assert(sizeof(ATActCpl041EVanishingBall_OnChangeProjectilePhase) == 0x000001, "Wrong size on ATActCpl041EVanishingBall_OnChangeProjectilePhase");
static_assert(offsetof(ATActCpl041EVanishingBall_OnChangeProjectilePhase, PlayerHit) == 0x000000, "Member 'ATActCpl041EVanishingBall_OnChangeProjectilePhase::PlayerHit' has a wrong offset!");

// Function AT.ATActCpl101SkillG006.IsHitWall
// 0x00B0 (0x00B0 - 0x0000)
struct ATActCpl101SkillG006_IsHitWall final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl101SkillG006_IsHitWall) == 0x000008, "Wrong alignment on ATActCpl101SkillG006_IsHitWall");
static_assert(sizeof(ATActCpl101SkillG006_IsHitWall) == 0x0000B0, "Wrong size on ATActCpl101SkillG006_IsHitWall");
static_assert(offsetof(ATActCpl101SkillG006_IsHitWall, HitComp) == 0x000000, "Member 'ATActCpl101SkillG006_IsHitWall::HitComp' has a wrong offset!");
static_assert(offsetof(ATActCpl101SkillG006_IsHitWall, OtherActor) == 0x000008, "Member 'ATActCpl101SkillG006_IsHitWall::OtherActor' has a wrong offset!");
static_assert(offsetof(ATActCpl101SkillG006_IsHitWall, OtherComp) == 0x000010, "Member 'ATActCpl101SkillG006_IsHitWall::OtherComp' has a wrong offset!");
static_assert(offsetof(ATActCpl101SkillG006_IsHitWall, NormalImpulse) == 0x000018, "Member 'ATActCpl101SkillG006_IsHitWall::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ATActCpl101SkillG006_IsHitWall, Hit) == 0x000028, "Member 'ATActCpl101SkillG006_IsHitWall::Hit' has a wrong offset!");

// Function AT.ATActCpl107Skill002DmgBlowoff.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActCpl107Skill002DmgBlowoff_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActCpl107Skill002DmgBlowoff_OnHitPhoton) == 0x000008, "Wrong alignment on ATActCpl107Skill002DmgBlowoff_OnHitPhoton");
static_assert(sizeof(ATActCpl107Skill002DmgBlowoff_OnHitPhoton) == 0x000020, "Wrong size on ATActCpl107Skill002DmgBlowoff_OnHitPhoton");
static_assert(offsetof(ATActCpl107Skill002DmgBlowoff_OnHitPhoton, InResults) == 0x000000, "Member 'ATActCpl107Skill002DmgBlowoff_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActCpl107Skill002DmgBlowoff_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActCpl107Skill002DmgBlowoff_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.ATDecalActor.CreateDynamicMaterialInstance
// 0x0008 (0x0008 - 0x0000)
struct ATDecalActor_CreateDynamicMaterialInstance final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDecalActor_CreateDynamicMaterialInstance) == 0x000008, "Wrong alignment on ATDecalActor_CreateDynamicMaterialInstance");
static_assert(sizeof(ATDecalActor_CreateDynamicMaterialInstance) == 0x000008, "Wrong size on ATDecalActor_CreateDynamicMaterialInstance");
static_assert(offsetof(ATDecalActor_CreateDynamicMaterialInstance, ReturnValue) == 0x000000, "Member 'ATDecalActor_CreateDynamicMaterialInstance::ReturnValue' has a wrong offset!");

// Function AT.ATDecalActor.SetDecalMaterial
// 0x0008 (0x0008 - 0x0000)
struct ATDecalActor_SetDecalMaterial final
{
public:
	class UMaterialInterface*                     NewDecalMaterial;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDecalActor_SetDecalMaterial) == 0x000008, "Wrong alignment on ATDecalActor_SetDecalMaterial");
static_assert(sizeof(ATDecalActor_SetDecalMaterial) == 0x000008, "Wrong size on ATDecalActor_SetDecalMaterial");
static_assert(offsetof(ATDecalActor_SetDecalMaterial, NewDecalMaterial) == 0x000000, "Member 'ATDecalActor_SetDecalMaterial::NewDecalMaterial' has a wrong offset!");

// Function AT.ATDecalActor.GetDecalMaterial
// 0x0008 (0x0008 - 0x0000)
struct ATDecalActor_GetDecalMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDecalActor_GetDecalMaterial) == 0x000008, "Wrong alignment on ATDecalActor_GetDecalMaterial");
static_assert(sizeof(ATDecalActor_GetDecalMaterial) == 0x000008, "Wrong size on ATDecalActor_GetDecalMaterial");
static_assert(offsetof(ATDecalActor_GetDecalMaterial, ReturnValue) == 0x000000, "Member 'ATDecalActor_GetDecalMaterial::ReturnValue' has a wrong offset!");

// Function AT.ATSequencerDemoCtrl.RegisterSequenceActor
// 0x0010 (0x0010 - 0x0000)
struct ATSequencerDemoCtrl_RegisterSequenceActor final
{
public:
	class FName                                   DemoName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSequencerDemoCtrl_RegisterSequenceActor) == 0x000008, "Wrong alignment on ATSequencerDemoCtrl_RegisterSequenceActor");
static_assert(sizeof(ATSequencerDemoCtrl_RegisterSequenceActor) == 0x000010, "Wrong size on ATSequencerDemoCtrl_RegisterSequenceActor");
static_assert(offsetof(ATSequencerDemoCtrl_RegisterSequenceActor, DemoName) == 0x000000, "Member 'ATSequencerDemoCtrl_RegisterSequenceActor::DemoName' has a wrong offset!");
static_assert(offsetof(ATSequencerDemoCtrl_RegisterSequenceActor, SequenceActor) == 0x000008, "Member 'ATSequencerDemoCtrl_RegisterSequenceActor::SequenceActor' has a wrong offset!");

// Function AT.ATSequencerDemoCtrl.UnregisterSequenceActor
// 0x0008 (0x0008 - 0x0000)
struct ATSequencerDemoCtrl_UnregisterSequenceActor final
{
public:
	class FName                                   DemoName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSequencerDemoCtrl_UnregisterSequenceActor) == 0x000004, "Wrong alignment on ATSequencerDemoCtrl_UnregisterSequenceActor");
static_assert(sizeof(ATSequencerDemoCtrl_UnregisterSequenceActor) == 0x000008, "Wrong size on ATSequencerDemoCtrl_UnregisterSequenceActor");
static_assert(offsetof(ATSequencerDemoCtrl_UnregisterSequenceActor, DemoName) == 0x000000, "Member 'ATSequencerDemoCtrl_UnregisterSequenceActor::DemoName' has a wrong offset!");

// Function AT.LipSyncComponent.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct LipSyncComponent_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LipSyncComponent_IsLoaded) == 0x000001, "Wrong alignment on LipSyncComponent_IsLoaded");
static_assert(sizeof(LipSyncComponent_IsLoaded) == 0x000001, "Wrong size on LipSyncComponent_IsLoaded");
static_assert(offsetof(LipSyncComponent_IsLoaded, ReturnValue) == 0x000000, "Member 'LipSyncComponent_IsLoaded::ReturnValue' has a wrong offset!");

// Function AT.LipSyncComponent.Load
// 0x0010 (0x0010 - 0x0000)
struct LipSyncComponent_Load final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LipSyncComponent_Load) == 0x000008, "Wrong alignment on LipSyncComponent_Load");
static_assert(sizeof(LipSyncComponent_Load) == 0x000010, "Wrong size on LipSyncComponent_Load");
static_assert(offsetof(LipSyncComponent_Load, Filename) == 0x000000, "Member 'LipSyncComponent_Load::Filename' has a wrong offset!");

// Function AT.ATActDmgDeathFall.HitCharacter
// 0x0088 (0x0088 - 0x0000)
struct ATActDmgDeathFall_HitCharacter final
{
public:
	struct FHitResult                             InHitResult;                                       // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActDmgDeathFall_HitCharacter) == 0x000008, "Wrong alignment on ATActDmgDeathFall_HitCharacter");
static_assert(sizeof(ATActDmgDeathFall_HitCharacter) == 0x000088, "Wrong size on ATActDmgDeathFall_HitCharacter");
static_assert(offsetof(ATActDmgDeathFall_HitCharacter, InHitResult) == 0x000000, "Member 'ATActDmgDeathFall_HitCharacter::InHitResult' has a wrong offset!");

// Function AT.CookingState.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct CookingState_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CookingState_OnDemoTiming) == 0x000004, "Wrong alignment on CookingState_OnDemoTiming");
static_assert(sizeof(CookingState_OnDemoTiming) == 0x000018, "Wrong size on CookingState_OnDemoTiming");
static_assert(offsetof(CookingState_OnDemoTiming, DemoType) == 0x000000, "Member 'CookingState_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(CookingState_OnDemoTiming, DemoTiming) == 0x000001, "Member 'CookingState_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(CookingState_OnDemoTiming, DemoName) == 0x000008, "Member 'CookingState_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(CookingState_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'CookingState_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.CookingState.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct CookingState_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CookingState_OnMontageBlendingOut) == 0x000008, "Wrong alignment on CookingState_OnMontageBlendingOut");
static_assert(sizeof(CookingState_OnMontageBlendingOut) == 0x000010, "Wrong size on CookingState_OnMontageBlendingOut");
static_assert(offsetof(CookingState_OnMontageBlendingOut, Montage) == 0x000000, "Member 'CookingState_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(CookingState_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'CookingState_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function AT.CookingState.OnMontageBlendingOutStart
// 0x0010 (0x0010 - 0x0000)
struct CookingState_OnMontageBlendingOutStart final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CookingState_OnMontageBlendingOutStart) == 0x000008, "Wrong alignment on CookingState_OnMontageBlendingOutStart");
static_assert(sizeof(CookingState_OnMontageBlendingOutStart) == 0x000010, "Wrong size on CookingState_OnMontageBlendingOutStart");
static_assert(offsetof(CookingState_OnMontageBlendingOutStart, Montage) == 0x000000, "Member 'CookingState_OnMontageBlendingOutStart::Montage' has a wrong offset!");
static_assert(offsetof(CookingState_OnMontageBlendingOutStart, bInterrupted) == 0x000008, "Member 'CookingState_OnMontageBlendingOutStart::bInterrupted' has a wrong offset!");

// Function AT.TrainingPointActor.OnLoadWidget
// 0x0008 (0x0008 - 0x0000)
struct TrainingPointActor_OnLoadWidget final
{
public:
	class UATDataAssetUiAsyncLoad*                InLoader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingPointActor_OnLoadWidget) == 0x000008, "Wrong alignment on TrainingPointActor_OnLoadWidget");
static_assert(sizeof(TrainingPointActor_OnLoadWidget) == 0x000008, "Wrong size on TrainingPointActor_OnLoadWidget");
static_assert(offsetof(TrainingPointActor_OnLoadWidget, InLoader) == 0x000000, "Member 'TrainingPointActor_OnLoadWidget::InLoader' has a wrong offset!");

// Function AT.ATActDmgHoldRushQteFaceTrigger.OnInputQTEResult
// 0x0108 (0x0108 - 0x0000)
struct ATActDmgHoldRushQteFaceTrigger_OnInputQTEResult final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActDmgHoldRushQteFaceTrigger_OnInputQTEResult) == 0x000008, "Wrong alignment on ATActDmgHoldRushQteFaceTrigger_OnInputQTEResult");
static_assert(sizeof(ATActDmgHoldRushQteFaceTrigger_OnInputQTEResult) == 0x000108, "Wrong size on ATActDmgHoldRushQteFaceTrigger_OnInputQTEResult");
static_assert(offsetof(ATActDmgHoldRushQteFaceTrigger_OnInputQTEResult, EventParam) == 0x000000, "Member 'ATActDmgHoldRushQteFaceTrigger_OnInputQTEResult::EventParam' has a wrong offset!");

// Function AT.CrossTalkConditionDefeatEnemies.OnDefeatedEnemy
// 0x0008 (0x0008 - 0x0000)
struct CrossTalkConditionDefeatEnemies_OnDefeatedEnemy final
{
public:
	class AAT_Character*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrossTalkConditionDefeatEnemies_OnDefeatedEnemy) == 0x000008, "Wrong alignment on CrossTalkConditionDefeatEnemies_OnDefeatedEnemy");
static_assert(sizeof(CrossTalkConditionDefeatEnemies_OnDefeatedEnemy) == 0x000008, "Wrong size on CrossTalkConditionDefeatEnemies_OnDefeatedEnemy");
static_assert(offsetof(CrossTalkConditionDefeatEnemies_OnDefeatedEnemy, Target) == 0x000000, "Member 'CrossTalkConditionDefeatEnemies_OnDefeatedEnemy::Target' has a wrong offset!");

// Function AT.BattleManager.BeginTransform
// 0x0008 (0x0008 - 0x0000)
struct BattleManager_BeginTransform final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleManager_BeginTransform) == 0x000008, "Wrong alignment on BattleManager_BeginTransform");
static_assert(sizeof(BattleManager_BeginTransform) == 0x000008, "Wrong size on BattleManager_BeginTransform");
static_assert(offsetof(BattleManager_BeginTransform, Actor) == 0x000000, "Member 'BattleManager_BeginTransform::Actor' has a wrong offset!");

// Function AT.BattleManager.OnBattleStart
// 0x0018 (0x0018 - 0x0000)
struct BattleManager_OnBattleStart final
{
public:
	class AAT_CharacterBase*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyPartyID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BattleType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleManager_OnBattleStart) == 0x000008, "Wrong alignment on BattleManager_OnBattleStart");
static_assert(sizeof(BattleManager_OnBattleStart) == 0x000018, "Wrong size on BattleManager_OnBattleStart");
static_assert(offsetof(BattleManager_OnBattleStart, Character) == 0x000000, "Member 'BattleManager_OnBattleStart::Character' has a wrong offset!");
static_assert(offsetof(BattleManager_OnBattleStart, EnemyPartyID) == 0x000008, "Member 'BattleManager_OnBattleStart::EnemyPartyID' has a wrong offset!");
static_assert(offsetof(BattleManager_OnBattleStart, BattleType) == 0x000010, "Member 'BattleManager_OnBattleStart::BattleType' has a wrong offset!");

// Function AT.BattleManager.OnDeleteDeathCharacter
// 0x0008 (0x0008 - 0x0000)
struct BattleManager_OnDeleteDeathCharacter final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleManager_OnDeleteDeathCharacter) == 0x000008, "Wrong alignment on BattleManager_OnDeleteDeathCharacter");
static_assert(sizeof(BattleManager_OnDeleteDeathCharacter) == 0x000008, "Wrong size on BattleManager_OnDeleteDeathCharacter");
static_assert(offsetof(BattleManager_OnDeleteDeathCharacter, Character) == 0x000000, "Member 'BattleManager_OnDeleteDeathCharacter::Character' has a wrong offset!");

// Function AT.BattleManager.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct BattleManager_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleManager_OnDemoTiming) == 0x000004, "Wrong alignment on BattleManager_OnDemoTiming");
static_assert(sizeof(BattleManager_OnDemoTiming) == 0x000018, "Wrong size on BattleManager_OnDemoTiming");
static_assert(offsetof(BattleManager_OnDemoTiming, DemoType) == 0x000000, "Member 'BattleManager_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(BattleManager_OnDemoTiming, DemoTiming) == 0x000001, "Member 'BattleManager_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(BattleManager_OnDemoTiming, DemoName) == 0x000008, "Member 'BattleManager_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(BattleManager_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'BattleManager_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.BattleManager.ReceiveEvents
// 0x0108 (0x0108 - 0x0000)
struct BattleManager_ReceiveEvents final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleManager_ReceiveEvents) == 0x000008, "Wrong alignment on BattleManager_ReceiveEvents");
static_assert(sizeof(BattleManager_ReceiveEvents) == 0x000108, "Wrong size on BattleManager_ReceiveEvents");
static_assert(offsetof(BattleManager_ReceiveEvents, Param) == 0x000000, "Member 'BattleManager_ReceiveEvents::Param' has a wrong offset!");

// Function AT.ATActDmgLongBlowoff.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActDmgLongBlowoff_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActDmgLongBlowoff_OnHitPhoton) == 0x000008, "Wrong alignment on ATActDmgLongBlowoff_OnHitPhoton");
static_assert(sizeof(ATActDmgLongBlowoff_OnHitPhoton) == 0x000020, "Wrong size on ATActDmgLongBlowoff_OnHitPhoton");
static_assert(offsetof(ATActDmgLongBlowoff_OnHitPhoton, InResults) == 0x000000, "Member 'ATActDmgLongBlowoff_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActDmgLongBlowoff_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActDmgLongBlowoff_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.ATActDmgLongBlowoffDirection.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActDmgLongBlowoffDirection_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActDmgLongBlowoffDirection_OnHitPhoton) == 0x000008, "Wrong alignment on ATActDmgLongBlowoffDirection_OnHitPhoton");
static_assert(sizeof(ATActDmgLongBlowoffDirection_OnHitPhoton) == 0x000020, "Wrong size on ATActDmgLongBlowoffDirection_OnHitPhoton");
static_assert(offsetof(ATActDmgLongBlowoffDirection_OnHitPhoton, InResults) == 0x000000, "Member 'ATActDmgLongBlowoffDirection_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActDmgLongBlowoffDirection_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActDmgLongBlowoffDirection_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.ATDataAssetQuest.OnLoadedUseAsset
// 0x0008 (0x0008 - 0x0000)
struct ATDataAssetQuest_OnLoadedUseAsset final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDataAssetQuest_OnLoadedUseAsset) == 0x000004, "Wrong alignment on ATDataAssetQuest_OnLoadedUseAsset");
static_assert(sizeof(ATDataAssetQuest_OnLoadedUseAsset) == 0x000008, "Wrong size on ATDataAssetQuest_OnLoadedUseAsset");
static_assert(offsetof(ATDataAssetQuest_OnLoadedUseAsset, AssetName) == 0x000000, "Member 'ATDataAssetQuest_OnLoadedUseAsset::AssetName' has a wrong offset!");

// Function AT.ATDataAssetQuest.OnProgressChanged
// 0x0008 (0x0008 - 0x0000)
struct ATDataAssetQuest_OnProgressChanged final
{
public:
	class FName                                   NextProgressName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDataAssetQuest_OnProgressChanged) == 0x000004, "Wrong alignment on ATDataAssetQuest_OnProgressChanged");
static_assert(sizeof(ATDataAssetQuest_OnProgressChanged) == 0x000008, "Wrong size on ATDataAssetQuest_OnProgressChanged");
static_assert(offsetof(ATDataAssetQuest_OnProgressChanged, NextProgressName) == 0x000000, "Member 'ATDataAssetQuest_OnProgressChanged::NextProgressName' has a wrong offset!");

// Function AT.OptionMenuComponent.GetMenu
// 0x0008 (0x0008 - 0x0000)
struct OptionMenuComponent_GetMenu final
{
public:
	class UOptionMenu*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionMenuComponent_GetMenu) == 0x000008, "Wrong alignment on OptionMenuComponent_GetMenu");
static_assert(sizeof(OptionMenuComponent_GetMenu) == 0x000008, "Wrong size on OptionMenuComponent_GetMenu");
static_assert(offsetof(OptionMenuComponent_GetMenu, ReturnValue) == 0x000000, "Member 'OptionMenuComponent_GetMenu::ReturnValue' has a wrong offset!");

// Function AT.FishingManager.GetFishingResource
// 0x0008 (0x0008 - 0x0000)
struct FishingManager_GetFishingResource final
{
public:
	class AFishingResource*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FishingManager_GetFishingResource) == 0x000008, "Wrong alignment on FishingManager_GetFishingResource");
static_assert(sizeof(FishingManager_GetFishingResource) == 0x000008, "Wrong size on FishingManager_GetFishingResource");
static_assert(offsetof(FishingManager_GetFishingResource, ReturnValue) == 0x000000, "Member 'FishingManager_GetFishingResource::ReturnValue' has a wrong offset!");

// Function AT.FishingManager.GetFishingStartPointClass
// 0x0008 (0x0008 - 0x0000)
struct FishingManager_GetFishingStartPointClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FishingManager_GetFishingStartPointClass) == 0x000008, "Wrong alignment on FishingManager_GetFishingStartPointClass");
static_assert(sizeof(FishingManager_GetFishingStartPointClass) == 0x000008, "Wrong size on FishingManager_GetFishingStartPointClass");
static_assert(offsetof(FishingManager_GetFishingStartPointClass, ReturnValue) == 0x000000, "Member 'FishingManager_GetFishingStartPointClass::ReturnValue' has a wrong offset!");

// Function AT.FishingManager.GetSignsOfFishClass
// 0x0008 (0x0008 - 0x0000)
struct FishingManager_GetSignsOfFishClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FishingManager_GetSignsOfFishClass) == 0x000008, "Wrong alignment on FishingManager_GetSignsOfFishClass");
static_assert(sizeof(FishingManager_GetSignsOfFishClass) == 0x000008, "Wrong size on FishingManager_GetSignsOfFishClass");
static_assert(offsetof(FishingManager_GetSignsOfFishClass, ReturnValue) == 0x000000, "Member 'FishingManager_GetSignsOfFishClass::ReturnValue' has a wrong offset!");

// Function AT.FishingManager.OnLeftStickXAxis
// 0x0008 (0x0008 - 0x0000)
struct FishingManager_OnLeftStickXAxis final
{
public:
	struct FVector2D                              InInputAxis;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FishingManager_OnLeftStickXAxis) == 0x000004, "Wrong alignment on FishingManager_OnLeftStickXAxis");
static_assert(sizeof(FishingManager_OnLeftStickXAxis) == 0x000008, "Wrong size on FishingManager_OnLeftStickXAxis");
static_assert(offsetof(FishingManager_OnLeftStickXAxis, InInputAxis) == 0x000000, "Member 'FishingManager_OnLeftStickXAxis::InInputAxis' has a wrong offset!");

// Function AT.FishingManager.OnMessageGameWindowClosed
// 0x0004 (0x0004 - 0x0000)
struct FishingManager_OnMessageGameWindowClosed final
{
public:
	int32                                         InSelectNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FishingManager_OnMessageGameWindowClosed) == 0x000004, "Wrong alignment on FishingManager_OnMessageGameWindowClosed");
static_assert(sizeof(FishingManager_OnMessageGameWindowClosed) == 0x000004, "Wrong size on FishingManager_OnMessageGameWindowClosed");
static_assert(offsetof(FishingManager_OnMessageGameWindowClosed, InSelectNum) == 0x000000, "Member 'FishingManager_OnMessageGameWindowClosed::InSelectNum' has a wrong offset!");

// Function AT.NpcTalkComponent.InitTalk
// 0x0018 (0x0018 - 0x0000)
struct NpcTalkComponent_InitTalk final
{
public:
	class FString                                 TalkID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReset;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcTalkComponent_InitTalk) == 0x000008, "Wrong alignment on NpcTalkComponent_InitTalk");
static_assert(sizeof(NpcTalkComponent_InitTalk) == 0x000018, "Wrong size on NpcTalkComponent_InitTalk");
static_assert(offsetof(NpcTalkComponent_InitTalk, TalkID) == 0x000000, "Member 'NpcTalkComponent_InitTalk::TalkID' has a wrong offset!");
static_assert(offsetof(NpcTalkComponent_InitTalk, bForceReset) == 0x000010, "Member 'NpcTalkComponent_InitTalk::bForceReset' has a wrong offset!");
static_assert(offsetof(NpcTalkComponent_InitTalk, ReturnValue) == 0x000011, "Member 'NpcTalkComponent_InitTalk::ReturnValue' has a wrong offset!");

// Function AT.NpcTalkComponent.OnFinishedCooking
// 0x0001 (0x0001 - 0x0000)
struct NpcTalkComponent_OnFinishedCooking final
{
public:
	EEventTimingType                              Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkComponent_OnFinishedCooking) == 0x000001, "Wrong alignment on NpcTalkComponent_OnFinishedCooking");
static_assert(sizeof(NpcTalkComponent_OnFinishedCooking) == 0x000001, "Wrong size on NpcTalkComponent_OnFinishedCooking");
static_assert(offsetof(NpcTalkComponent_OnFinishedCooking, Timing) == 0x000000, "Member 'NpcTalkComponent_OnFinishedCooking::Timing' has a wrong offset!");

// Function AT.NpcTalkComponent.OnFinishedDevelopment
// 0x0001 (0x0001 - 0x0000)
struct NpcTalkComponent_OnFinishedDevelopment final
{
public:
	EEventTimingType                              Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkComponent_OnFinishedDevelopment) == 0x000001, "Wrong alignment on NpcTalkComponent_OnFinishedDevelopment");
static_assert(sizeof(NpcTalkComponent_OnFinishedDevelopment) == 0x000001, "Wrong size on NpcTalkComponent_OnFinishedDevelopment");
static_assert(offsetof(NpcTalkComponent_OnFinishedDevelopment, Timing) == 0x000000, "Member 'NpcTalkComponent_OnFinishedDevelopment::Timing' has a wrong offset!");

// Function AT.NpcTalkComponent.OnLoadCompleted
// 0x0108 (0x0108 - 0x0000)
struct NpcTalkComponent_OnLoadCompleted final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkComponent_OnLoadCompleted) == 0x000008, "Wrong alignment on NpcTalkComponent_OnLoadCompleted");
static_assert(sizeof(NpcTalkComponent_OnLoadCompleted) == 0x000108, "Wrong size on NpcTalkComponent_OnLoadCompleted");
static_assert(offsetof(NpcTalkComponent_OnLoadCompleted, Param) == 0x000000, "Member 'NpcTalkComponent_OnLoadCompleted::Param' has a wrong offset!");

// Function AT.NpcTalkComponent.SetSpeakerId
// 0x0010 (0x0010 - 0x0000)
struct NpcTalkComponent_SetSpeakerId final
{
public:
	class FString                                 SpeakerID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkComponent_SetSpeakerId) == 0x000008, "Wrong alignment on NpcTalkComponent_SetSpeakerId");
static_assert(sizeof(NpcTalkComponent_SetSpeakerId) == 0x000010, "Wrong size on NpcTalkComponent_SetSpeakerId");
static_assert(offsetof(NpcTalkComponent_SetSpeakerId, SpeakerID) == 0x000000, "Member 'NpcTalkComponent_SetSpeakerId::SpeakerID' has a wrong offset!");

// Function AT.NpcTalkComponent.SetupTalkComponent
// 0x0018 (0x0018 - 0x0000)
struct NpcTalkComponent_SetupTalkComponent final
{
public:
	bool                                          InitComponent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TalkID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkComponent_SetupTalkComponent) == 0x000008, "Wrong alignment on NpcTalkComponent_SetupTalkComponent");
static_assert(sizeof(NpcTalkComponent_SetupTalkComponent) == 0x000018, "Wrong size on NpcTalkComponent_SetupTalkComponent");
static_assert(offsetof(NpcTalkComponent_SetupTalkComponent, InitComponent) == 0x000000, "Member 'NpcTalkComponent_SetupTalkComponent::InitComponent' has a wrong offset!");
static_assert(offsetof(NpcTalkComponent_SetupTalkComponent, TalkID) == 0x000008, "Member 'NpcTalkComponent_SetupTalkComponent::TalkID' has a wrong offset!");

// Function AT.NpcTalkComponent.SetVisibleTime
// 0x0004 (0x0004 - 0x0000)
struct NpcTalkComponent_SetVisibleTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkComponent_SetVisibleTime) == 0x000004, "Wrong alignment on NpcTalkComponent_SetVisibleTime");
static_assert(sizeof(NpcTalkComponent_SetVisibleTime) == 0x000004, "Wrong size on NpcTalkComponent_SetVisibleTime");
static_assert(offsetof(NpcTalkComponent_SetVisibleTime, Time) == 0x000000, "Member 'NpcTalkComponent_SetVisibleTime::Time' has a wrong offset!");

// Function AT.NpcTalkComponent.GetTalkId
// 0x0010 (0x0010 - 0x0000)
struct NpcTalkComponent_GetTalkId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkComponent_GetTalkId) == 0x000008, "Wrong alignment on NpcTalkComponent_GetTalkId");
static_assert(sizeof(NpcTalkComponent_GetTalkId) == 0x000010, "Wrong size on NpcTalkComponent_GetTalkId");
static_assert(offsetof(NpcTalkComponent_GetTalkId, ReturnValue) == 0x000000, "Member 'NpcTalkComponent_GetTalkId::ReturnValue' has a wrong offset!");

// Function AT.ATDinosaurMoveAreaVolume.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATDinosaurMoveAreaVolume_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDinosaurMoveAreaVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on ATDinosaurMoveAreaVolume_OnBeginOverlap");
static_assert(sizeof(ATDinosaurMoveAreaVolume_OnBeginOverlap) == 0x000010, "Wrong size on ATDinosaurMoveAreaVolume_OnBeginOverlap");
static_assert(offsetof(ATDinosaurMoveAreaVolume_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'ATDinosaurMoveAreaVolume_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATDinosaurMoveAreaVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ATDinosaurMoveAreaVolume_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function AT.ATDinosaurMoveAreaVolume.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATDinosaurMoveAreaVolume_OnEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDinosaurMoveAreaVolume_OnEndOverlap) == 0x000008, "Wrong alignment on ATDinosaurMoveAreaVolume_OnEndOverlap");
static_assert(sizeof(ATDinosaurMoveAreaVolume_OnEndOverlap) == 0x000010, "Wrong size on ATDinosaurMoveAreaVolume_OnEndOverlap");
static_assert(offsetof(ATDinosaurMoveAreaVolume_OnEndOverlap, OverlappedActor) == 0x000000, "Member 'ATDinosaurMoveAreaVolume_OnEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATDinosaurMoveAreaVolume_OnEndOverlap, OtherActor) == 0x000008, "Member 'ATDinosaurMoveAreaVolume_OnEndOverlap::OtherActor' has a wrong offset!");

// Function AT.CrossTalkVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct CrossTalkVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrossTalkVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on CrossTalkVolume_OnOverlapBegin");
static_assert(sizeof(CrossTalkVolume_OnOverlapBegin) == 0x000010, "Wrong size on CrossTalkVolume_OnOverlapBegin");
static_assert(offsetof(CrossTalkVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'CrossTalkVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(CrossTalkVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'CrossTalkVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.CrossTalkVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct CrossTalkVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrossTalkVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on CrossTalkVolume_OnOverlapEnd");
static_assert(sizeof(CrossTalkVolume_OnOverlapEnd) == 0x000010, "Wrong size on CrossTalkVolume_OnOverlapEnd");
static_assert(offsetof(CrossTalkVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'CrossTalkVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(CrossTalkVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'CrossTalkVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.ATActGroundBattleDmgBoundC001FSKL003.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton) == 0x000008, "Wrong alignment on ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton");
static_assert(sizeof(ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton) == 0x000020, "Wrong size on ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton");
static_assert(offsetof(ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton, InResults) == 0x000000, "Member 'ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActGroundBattleDmgBoundC001FSKL003_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.QuestCostumeChanger.OnLoadedFacialParts
// 0x0008 (0x0008 - 0x0000)
struct QuestCostumeChanger_OnLoadedFacialParts final
{
public:
	class UATDataAssetFacialAsyncLoad*            PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCostumeChanger_OnLoadedFacialParts) == 0x000008, "Wrong alignment on QuestCostumeChanger_OnLoadedFacialParts");
static_assert(sizeof(QuestCostumeChanger_OnLoadedFacialParts) == 0x000008, "Wrong size on QuestCostumeChanger_OnLoadedFacialParts");
static_assert(offsetof(QuestCostumeChanger_OnLoadedFacialParts, PartsLoad) == 0x000000, "Member 'QuestCostumeChanger_OnLoadedFacialParts::PartsLoad' has a wrong offset!");

// Function AT.QuestCostumeChanger.OnLoadedFormParts
// 0x0008 (0x0008 - 0x0000)
struct QuestCostumeChanger_OnLoadedFormParts final
{
public:
	class UATDataAssetFormMeshAsyncLoad*          PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCostumeChanger_OnLoadedFormParts) == 0x000008, "Wrong alignment on QuestCostumeChanger_OnLoadedFormParts");
static_assert(sizeof(QuestCostumeChanger_OnLoadedFormParts) == 0x000008, "Wrong size on QuestCostumeChanger_OnLoadedFormParts");
static_assert(offsetof(QuestCostumeChanger_OnLoadedFormParts, PartsLoad) == 0x000000, "Member 'QuestCostumeChanger_OnLoadedFormParts::PartsLoad' has a wrong offset!");

// Function AT.QuestCostumeChanger.OnLoadedVariationParts
// 0x0008 (0x0008 - 0x0000)
struct QuestCostumeChanger_OnLoadedVariationParts final
{
public:
	class UATDataAssetVariationMeshAsyncLoad*     PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCostumeChanger_OnLoadedVariationParts) == 0x000008, "Wrong alignment on QuestCostumeChanger_OnLoadedVariationParts");
static_assert(sizeof(QuestCostumeChanger_OnLoadedVariationParts) == 0x000008, "Wrong size on QuestCostumeChanger_OnLoadedVariationParts");
static_assert(offsetof(QuestCostumeChanger_OnLoadedVariationParts, PartsLoad) == 0x000000, "Member 'QuestCostumeChanger_OnLoadedVariationParts::PartsLoad' has a wrong offset!");

// Function AT.ATLevelScriptActor.ReceiveDemoEvent
// 0x0010 (0x0010 - 0x0000)
struct ATLevelScriptActor_ReceiveDemoEvent final
{
public:
	class FName                                   DemoName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             Timing;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATLevelScriptActor_ReceiveDemoEvent) == 0x000004, "Wrong alignment on ATLevelScriptActor_ReceiveDemoEvent");
static_assert(sizeof(ATLevelScriptActor_ReceiveDemoEvent) == 0x000010, "Wrong size on ATLevelScriptActor_ReceiveDemoEvent");
static_assert(offsetof(ATLevelScriptActor_ReceiveDemoEvent, DemoName) == 0x000000, "Member 'ATLevelScriptActor_ReceiveDemoEvent::DemoName' has a wrong offset!");
static_assert(offsetof(ATLevelScriptActor_ReceiveDemoEvent, Timing) == 0x000008, "Member 'ATLevelScriptActor_ReceiveDemoEvent::Timing' has a wrong offset!");

// Function AT.ATActGroundBattleDmgUpper.OnHitPhoton
// 0x0020 (0x0020 - 0x0000)
struct ATActGroundBattleDmgUpper_OnHitPhoton final
{
public:
	TArray<struct FHitResult>                     InResults;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InShouldPassingActors;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActGroundBattleDmgUpper_OnHitPhoton) == 0x000008, "Wrong alignment on ATActGroundBattleDmgUpper_OnHitPhoton");
static_assert(sizeof(ATActGroundBattleDmgUpper_OnHitPhoton) == 0x000020, "Wrong size on ATActGroundBattleDmgUpper_OnHitPhoton");
static_assert(offsetof(ATActGroundBattleDmgUpper_OnHitPhoton, InResults) == 0x000000, "Member 'ATActGroundBattleDmgUpper_OnHitPhoton::InResults' has a wrong offset!");
static_assert(offsetof(ATActGroundBattleDmgUpper_OnHitPhoton, InShouldPassingActors) == 0x000010, "Member 'ATActGroundBattleDmgUpper_OnHitPhoton::InShouldPassingActors' has a wrong offset!");

// Function AT.ATSaveManager.AutoSave
// 0x0001 (0x0001 - 0x0000)
struct ATSaveManager_AutoSave final
{
public:
	ESaveGameSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSaveManager_AutoSave) == 0x000001, "Wrong alignment on ATSaveManager_AutoSave");
static_assert(sizeof(ATSaveManager_AutoSave) == 0x000001, "Wrong size on ATSaveManager_AutoSave");
static_assert(offsetof(ATSaveManager_AutoSave, Slot) == 0x000000, "Member 'ATSaveManager_AutoSave::Slot' has a wrong offset!");

// Function AT.ATSaveManager.Delete
// 0x0001 (0x0001 - 0x0000)
struct ATSaveManager_Delete final
{
public:
	ESaveGameSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSaveManager_Delete) == 0x000001, "Wrong alignment on ATSaveManager_Delete");
static_assert(sizeof(ATSaveManager_Delete) == 0x000001, "Wrong size on ATSaveManager_Delete");
static_assert(offsetof(ATSaveManager_Delete, Slot) == 0x000000, "Member 'ATSaveManager_Delete::Slot' has a wrong offset!");

// Function AT.ATSaveManager.DoesSaveGameExist
// 0x0002 (0x0002 - 0x0000)
struct ATSaveManager_DoesSaveGameExist final
{
public:
	ESaveGameSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSaveManager_DoesSaveGameExist) == 0x000001, "Wrong alignment on ATSaveManager_DoesSaveGameExist");
static_assert(sizeof(ATSaveManager_DoesSaveGameExist) == 0x000002, "Wrong size on ATSaveManager_DoesSaveGameExist");
static_assert(offsetof(ATSaveManager_DoesSaveGameExist, Slot) == 0x000000, "Member 'ATSaveManager_DoesSaveGameExist::Slot' has a wrong offset!");
static_assert(offsetof(ATSaveManager_DoesSaveGameExist, ReturnValue) == 0x000001, "Member 'ATSaveManager_DoesSaveGameExist::ReturnValue' has a wrong offset!");

// Function AT.ATSaveManager.Load
// 0x0002 (0x0002 - 0x0000)
struct ATSaveManager_Load final
{
public:
	ESaveGameSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNotDlcLost;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSaveManager_Load) == 0x000001, "Wrong alignment on ATSaveManager_Load");
static_assert(sizeof(ATSaveManager_Load) == 0x000002, "Wrong size on ATSaveManager_Load");
static_assert(offsetof(ATSaveManager_Load, Slot) == 0x000000, "Member 'ATSaveManager_Load::Slot' has a wrong offset!");
static_assert(offsetof(ATSaveManager_Load, IsNotDlcLost) == 0x000001, "Member 'ATSaveManager_Load::IsNotDlcLost' has a wrong offset!");

// Function AT.ATSaveManager.Save
// 0x0001 (0x0001 - 0x0000)
struct ATSaveManager_Save final
{
public:
	ESaveGameSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSaveManager_Save) == 0x000001, "Wrong alignment on ATSaveManager_Save");
static_assert(sizeof(ATSaveManager_Save) == 0x000001, "Wrong size on ATSaveManager_Save");
static_assert(offsetof(ATSaveManager_Save, Slot) == 0x000000, "Member 'ATSaveManager_Save::Slot' has a wrong offset!");

// Function AT.ATSaveManager.IsSystemLoaded
// 0x0001 (0x0001 - 0x0000)
struct ATSaveManager_IsSystemLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSaveManager_IsSystemLoaded) == 0x000001, "Wrong alignment on ATSaveManager_IsSystemLoaded");
static_assert(sizeof(ATSaveManager_IsSystemLoaded) == 0x000001, "Wrong size on ATSaveManager_IsSystemLoaded");
static_assert(offsetof(ATSaveManager_IsSystemLoaded, ReturnValue) == 0x000000, "Member 'ATSaveManager_IsSystemLoaded::ReturnValue' has a wrong offset!");

// Function AT.ATActGroundBattleHighBoost.DamageApplied
// 0x0088 (0x0088 - 0x0000)
struct ATActGroundBattleHighBoost_DamageApplied final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActGroundBattleHighBoost_DamageApplied) == 0x000008, "Wrong alignment on ATActGroundBattleHighBoost_DamageApplied");
static_assert(sizeof(ATActGroundBattleHighBoost_DamageApplied) == 0x000088, "Wrong size on ATActGroundBattleHighBoost_DamageApplied");
static_assert(offsetof(ATActGroundBattleHighBoost_DamageApplied, HitResult) == 0x000000, "Member 'ATActGroundBattleHighBoost_DamageApplied::HitResult' has a wrong offset!");

// Function AT.QuestCharacterAnimationSwitcher.OnUpdateAnimation
// 0x0001 (0x0001 - 0x0000)
struct QuestCharacterAnimationSwitcher_OnUpdateAnimation final
{
public:
	EATCharacterMoveState                         InMoveType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCharacterAnimationSwitcher_OnUpdateAnimation) == 0x000001, "Wrong alignment on QuestCharacterAnimationSwitcher_OnUpdateAnimation");
static_assert(sizeof(QuestCharacterAnimationSwitcher_OnUpdateAnimation) == 0x000001, "Wrong size on QuestCharacterAnimationSwitcher_OnUpdateAnimation");
static_assert(offsetof(QuestCharacterAnimationSwitcher_OnUpdateAnimation, InMoveType) == 0x000000, "Member 'QuestCharacterAnimationSwitcher_OnUpdateAnimation::InMoveType' has a wrong offset!");

// Function AT.QuestBalloonTalk.CloseCurrentTalkIcon
// 0x0001 (0x0001 - 0x0000)
struct QuestBalloonTalk_CloseCurrentTalkIcon final
{
public:
	bool                                          IsImmediateClose;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestBalloonTalk_CloseCurrentTalkIcon) == 0x000001, "Wrong alignment on QuestBalloonTalk_CloseCurrentTalkIcon");
static_assert(sizeof(QuestBalloonTalk_CloseCurrentTalkIcon) == 0x000001, "Wrong size on QuestBalloonTalk_CloseCurrentTalkIcon");
static_assert(offsetof(QuestBalloonTalk_CloseCurrentTalkIcon, IsImmediateClose) == 0x000000, "Member 'QuestBalloonTalk_CloseCurrentTalkIcon::IsImmediateClose' has a wrong offset!");

// Function AT.BaseballGamePitcherCharacter.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct BaseballGamePitcherCharacter_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseballGamePitcherCharacter_OnMontageBlendingOut) == 0x000008, "Wrong alignment on BaseballGamePitcherCharacter_OnMontageBlendingOut");
static_assert(sizeof(BaseballGamePitcherCharacter_OnMontageBlendingOut) == 0x000010, "Wrong size on BaseballGamePitcherCharacter_OnMontageBlendingOut");
static_assert(offsetof(BaseballGamePitcherCharacter_OnMontageBlendingOut, PMontage) == 0x000000, "Member 'BaseballGamePitcherCharacter_OnMontageBlendingOut::PMontage' has a wrong offset!");
static_assert(offsetof(BaseballGamePitcherCharacter_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'BaseballGamePitcherCharacter_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function AT.BaseballGamePitcherCharacter.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct BaseballGamePitcherCharacter_OnMontageEnded final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseballGamePitcherCharacter_OnMontageEnded) == 0x000008, "Wrong alignment on BaseballGamePitcherCharacter_OnMontageEnded");
static_assert(sizeof(BaseballGamePitcherCharacter_OnMontageEnded) == 0x000010, "Wrong size on BaseballGamePitcherCharacter_OnMontageEnded");
static_assert(offsetof(BaseballGamePitcherCharacter_OnMontageEnded, PMontage) == 0x000000, "Member 'BaseballGamePitcherCharacter_OnMontageEnded::PMontage' has a wrong offset!");
static_assert(offsetof(BaseballGamePitcherCharacter_OnMontageEnded, bInterrupted) == 0x000008, "Member 'BaseballGamePitcherCharacter_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function AT.BaseballGamePitcherCharacter.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct BaseballGamePitcherCharacter_OnMontageStarted final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseballGamePitcherCharacter_OnMontageStarted) == 0x000008, "Wrong alignment on BaseballGamePitcherCharacter_OnMontageStarted");
static_assert(sizeof(BaseballGamePitcherCharacter_OnMontageStarted) == 0x000008, "Wrong size on BaseballGamePitcherCharacter_OnMontageStarted");
static_assert(offsetof(BaseballGamePitcherCharacter_OnMontageStarted, PMontage) == 0x000000, "Member 'BaseballGamePitcherCharacter_OnMontageStarted::PMontage' has a wrong offset!");

// Function AT.ATUiCaptureManager.CreateCaptureSet
// 0x00C0 (0x00C0 - 0x0000)
struct ATUiCaptureManager_CreateCaptureSet final
{
public:
	struct FCreateCaptureSetParameter             Parameter;                                         // 0x0000(0x00A0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 Target;                                            // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Code;                                              // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedSkelMesh;                                      // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedLighting;                                      // 0x00B1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUiCaptureSet*                          ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATUiCaptureManager_CreateCaptureSet) == 0x000010, "Wrong alignment on ATUiCaptureManager_CreateCaptureSet");
static_assert(sizeof(ATUiCaptureManager_CreateCaptureSet) == 0x0000C0, "Wrong size on ATUiCaptureManager_CreateCaptureSet");
static_assert(offsetof(ATUiCaptureManager_CreateCaptureSet, Parameter) == 0x000000, "Member 'ATUiCaptureManager_CreateCaptureSet::Parameter' has a wrong offset!");
static_assert(offsetof(ATUiCaptureManager_CreateCaptureSet, Target) == 0x0000A0, "Member 'ATUiCaptureManager_CreateCaptureSet::Target' has a wrong offset!");
static_assert(offsetof(ATUiCaptureManager_CreateCaptureSet, Code) == 0x0000A8, "Member 'ATUiCaptureManager_CreateCaptureSet::Code' has a wrong offset!");
static_assert(offsetof(ATUiCaptureManager_CreateCaptureSet, NeedSkelMesh) == 0x0000B0, "Member 'ATUiCaptureManager_CreateCaptureSet::NeedSkelMesh' has a wrong offset!");
static_assert(offsetof(ATUiCaptureManager_CreateCaptureSet, NeedLighting) == 0x0000B1, "Member 'ATUiCaptureManager_CreateCaptureSet::NeedLighting' has a wrong offset!");
static_assert(offsetof(ATUiCaptureManager_CreateCaptureSet, ReturnValue) == 0x0000B8, "Member 'ATUiCaptureManager_CreateCaptureSet::ReturnValue' has a wrong offset!");

// Function AT.ATUiCaptureManager.DestroyCaptureSet
// 0x0008 (0x0008 - 0x0000)
struct ATUiCaptureManager_DestroyCaptureSet final
{
public:
	class FName                                   Code;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATUiCaptureManager_DestroyCaptureSet) == 0x000004, "Wrong alignment on ATUiCaptureManager_DestroyCaptureSet");
static_assert(sizeof(ATUiCaptureManager_DestroyCaptureSet) == 0x000008, "Wrong size on ATUiCaptureManager_DestroyCaptureSet");
static_assert(offsetof(ATUiCaptureManager_DestroyCaptureSet, Code) == 0x000000, "Member 'ATUiCaptureManager_DestroyCaptureSet::Code' has a wrong offset!");

// Function AT.ATActSearch.OnChangeMoveState
// 0x0008 (0x0008 - 0x0000)
struct ATActSearch_OnChangeMoveState final
{
public:
	int32                                         OldState;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveState;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActSearch_OnChangeMoveState) == 0x000004, "Wrong alignment on ATActSearch_OnChangeMoveState");
static_assert(sizeof(ATActSearch_OnChangeMoveState) == 0x000008, "Wrong size on ATActSearch_OnChangeMoveState");
static_assert(offsetof(ATActSearch_OnChangeMoveState, OldState) == 0x000000, "Member 'ATActSearch_OnChangeMoveState::OldState' has a wrong offset!");
static_assert(offsetof(ATActSearch_OnChangeMoveState, ActiveState) == 0x000004, "Member 'ATActSearch_OnChangeMoveState::ActiveState' has a wrong offset!");

// Function AT.CharacterLocationUpdator.OnUpdatedMovement
// 0x001C (0x001C - 0x0000)
struct CharacterLocationUpdator_OnUpdatedMovement final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLocationUpdator_OnUpdatedMovement) == 0x000004, "Wrong alignment on CharacterLocationUpdator_OnUpdatedMovement");
static_assert(sizeof(CharacterLocationUpdator_OnUpdatedMovement) == 0x00001C, "Wrong size on CharacterLocationUpdator_OnUpdatedMovement");
static_assert(offsetof(CharacterLocationUpdator_OnUpdatedMovement, DeltaSeconds) == 0x000000, "Member 'CharacterLocationUpdator_OnUpdatedMovement::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(CharacterLocationUpdator_OnUpdatedMovement, OldLocation) == 0x000004, "Member 'CharacterLocationUpdator_OnUpdatedMovement::OldLocation' has a wrong offset!");
static_assert(offsetof(CharacterLocationUpdator_OnUpdatedMovement, OldVelocity) == 0x000010, "Member 'CharacterLocationUpdator_OnUpdatedMovement::OldVelocity' has a wrong offset!");

// Function AT.ProceduralDestructFISMComponent.OnParticlePreActivate
// 0x0010 (0x0010 - 0x0000)
struct ProceduralDestructFISMComponent_OnParticlePreActivate final
{
public:
	class UParticleSystemComponent*               InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivating;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralDestructFISMComponent_OnParticlePreActivate) == 0x000008, "Wrong alignment on ProceduralDestructFISMComponent_OnParticlePreActivate");
static_assert(sizeof(ProceduralDestructFISMComponent_OnParticlePreActivate) == 0x000010, "Wrong size on ProceduralDestructFISMComponent_OnParticlePreActivate");
static_assert(offsetof(ProceduralDestructFISMComponent_OnParticlePreActivate, InComponent) == 0x000000, "Member 'ProceduralDestructFISMComponent_OnParticlePreActivate::InComponent' has a wrong offset!");
static_assert(offsetof(ProceduralDestructFISMComponent_OnParticlePreActivate, bActivating) == 0x000008, "Member 'ProceduralDestructFISMComponent_OnParticlePreActivate::bActivating' has a wrong offset!");

// Function AT.ProceduralDestructFISMComponent.OnPointDamage
// 0x0038 (0x0038 - 0x0000)
struct ProceduralDestructFISMComponent_OnPointDamage final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotFromDirection;                                 // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralDestructFISMComponent_OnPointDamage) == 0x000008, "Wrong alignment on ProceduralDestructFISMComponent_OnPointDamage");
static_assert(sizeof(ProceduralDestructFISMComponent_OnPointDamage) == 0x000038, "Wrong size on ProceduralDestructFISMComponent_OnPointDamage");
static_assert(offsetof(ProceduralDestructFISMComponent_OnPointDamage, InstanceIndex) == 0x000000, "Member 'ProceduralDestructFISMComponent_OnPointDamage::InstanceIndex' has a wrong offset!");
static_assert(offsetof(ProceduralDestructFISMComponent_OnPointDamage, Damage) == 0x000004, "Member 'ProceduralDestructFISMComponent_OnPointDamage::Damage' has a wrong offset!");
static_assert(offsetof(ProceduralDestructFISMComponent_OnPointDamage, InstigatedBy) == 0x000008, "Member 'ProceduralDestructFISMComponent_OnPointDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(ProceduralDestructFISMComponent_OnPointDamage, HitLocation) == 0x000010, "Member 'ProceduralDestructFISMComponent_OnPointDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(ProceduralDestructFISMComponent_OnPointDamage, ShotFromDirection) == 0x00001C, "Member 'ProceduralDestructFISMComponent_OnPointDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(ProceduralDestructFISMComponent_OnPointDamage, DamageType) == 0x000028, "Member 'ProceduralDestructFISMComponent_OnPointDamage::DamageType' has a wrong offset!");
static_assert(offsetof(ProceduralDestructFISMComponent_OnPointDamage, DamageCauser) == 0x000030, "Member 'ProceduralDestructFISMComponent_OnPointDamage::DamageCauser' has a wrong offset!");

// Function AT.ATActSpecialMoveGroundZigzag.DamageApplied
// 0x0088 (0x0088 - 0x0000)
struct ATActSpecialMoveGroundZigzag_DamageApplied final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActSpecialMoveGroundZigzag_DamageApplied) == 0x000008, "Wrong alignment on ATActSpecialMoveGroundZigzag_DamageApplied");
static_assert(sizeof(ATActSpecialMoveGroundZigzag_DamageApplied) == 0x000088, "Wrong size on ATActSpecialMoveGroundZigzag_DamageApplied");
static_assert(offsetof(ATActSpecialMoveGroundZigzag_DamageApplied, HitResult) == 0x000000, "Member 'ATActSpecialMoveGroundZigzag_DamageApplied::HitResult' has a wrong offset!");

// Function AT.ATFacialPartsLoader.CompleteClear
// 0x0008 (0x0008 - 0x0000)
struct ATFacialPartsLoader_CompleteClear final
{
public:
	class UATDataAssetFacialAsyncLoad*            PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFacialPartsLoader_CompleteClear) == 0x000008, "Wrong alignment on ATFacialPartsLoader_CompleteClear");
static_assert(sizeof(ATFacialPartsLoader_CompleteClear) == 0x000008, "Wrong size on ATFacialPartsLoader_CompleteClear");
static_assert(offsetof(ATFacialPartsLoader_CompleteClear, PartsLoad) == 0x000000, "Member 'ATFacialPartsLoader_CompleteClear::PartsLoad' has a wrong offset!");

// Function AT.ATFacialPartsLoader.CompleteLoad
// 0x0008 (0x0008 - 0x0000)
struct ATFacialPartsLoader_CompleteLoad final
{
public:
	class UATDataAssetFacialAsyncLoad*            PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFacialPartsLoader_CompleteLoad) == 0x000008, "Wrong alignment on ATFacialPartsLoader_CompleteLoad");
static_assert(sizeof(ATFacialPartsLoader_CompleteLoad) == 0x000008, "Wrong size on ATFacialPartsLoader_CompleteLoad");
static_assert(offsetof(ATFacialPartsLoader_CompleteLoad, PartsLoad) == 0x000000, "Member 'ATFacialPartsLoader_CompleteLoad::PartsLoad' has a wrong offset!");

// Function AT.NpcAction_Sit.OnMontageBlendingOut_Call
// 0x0010 (0x0010 - 0x0000)
struct NpcAction_Sit_OnMontageBlendingOut_Call final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAction_Sit_OnMontageBlendingOut_Call) == 0x000008, "Wrong alignment on NpcAction_Sit_OnMontageBlendingOut_Call");
static_assert(sizeof(NpcAction_Sit_OnMontageBlendingOut_Call) == 0x000010, "Wrong size on NpcAction_Sit_OnMontageBlendingOut_Call");
static_assert(offsetof(NpcAction_Sit_OnMontageBlendingOut_Call, PMontage) == 0x000000, "Member 'NpcAction_Sit_OnMontageBlendingOut_Call::PMontage' has a wrong offset!");
static_assert(offsetof(NpcAction_Sit_OnMontageBlendingOut_Call, bInterrupted) == 0x000008, "Member 'NpcAction_Sit_OnMontageBlendingOut_Call::bInterrupted' has a wrong offset!");

// Function AT.ATActUseRadar.OnChangeMapState
// 0x0002 (0x0002 - 0x0000)
struct ATActUseRadar_OnChangeMapState final
{
public:
	uint8                                         InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InSubState;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATActUseRadar_OnChangeMapState) == 0x000001, "Wrong alignment on ATActUseRadar_OnChangeMapState");
static_assert(sizeof(ATActUseRadar_OnChangeMapState) == 0x000002, "Wrong size on ATActUseRadar_OnChangeMapState");
static_assert(offsetof(ATActUseRadar_OnChangeMapState, InState) == 0x000000, "Member 'ATActUseRadar_OnChangeMapState::InState' has a wrong offset!");
static_assert(offsetof(ATActUseRadar_OnChangeMapState, InSubState) == 0x000001, "Member 'ATActUseRadar_OnChangeMapState::InSubState' has a wrong offset!");

// Function AT.AndroidAssaultObserver.OnAndroidAssaultSpawnable
// 0x0008 (0x0008 - 0x0000)
struct AndroidAssaultObserver_OnAndroidAssaultSpawnable final
{
public:
	class FName                                   CountName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AndroidAssaultObserver_OnAndroidAssaultSpawnable) == 0x000004, "Wrong alignment on AndroidAssaultObserver_OnAndroidAssaultSpawnable");
static_assert(sizeof(AndroidAssaultObserver_OnAndroidAssaultSpawnable) == 0x000008, "Wrong size on AndroidAssaultObserver_OnAndroidAssaultSpawnable");
static_assert(offsetof(AndroidAssaultObserver_OnAndroidAssaultSpawnable, CountName) == 0x000000, "Member 'AndroidAssaultObserver_OnAndroidAssaultSpawnable::CountName' has a wrong offset!");

// Function AT.AndroidAssaultObserver.OnDefeatedDroneAreaName
// 0x0008 (0x0008 - 0x0000)
struct AndroidAssaultObserver_OnDefeatedDroneAreaName final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AndroidAssaultObserver_OnDefeatedDroneAreaName) == 0x000004, "Wrong alignment on AndroidAssaultObserver_OnDefeatedDroneAreaName");
static_assert(sizeof(AndroidAssaultObserver_OnDefeatedDroneAreaName) == 0x000008, "Wrong size on AndroidAssaultObserver_OnDefeatedDroneAreaName");
static_assert(offsetof(AndroidAssaultObserver_OnDefeatedDroneAreaName, AreaName) == 0x000000, "Member 'AndroidAssaultObserver_OnDefeatedDroneAreaName::AreaName' has a wrong offset!");

// Function AT.ATWindRoad.OnBeginOverlapExitTrigger
// 0x00A8 (0x00A8 - 0x0000)
struct ATWindRoad_OnBeginOverlapExitTrigger final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWindRoad_OnBeginOverlapExitTrigger) == 0x000008, "Wrong alignment on ATWindRoad_OnBeginOverlapExitTrigger");
static_assert(sizeof(ATWindRoad_OnBeginOverlapExitTrigger) == 0x0000A8, "Wrong size on ATWindRoad_OnBeginOverlapExitTrigger");
static_assert(offsetof(ATWindRoad_OnBeginOverlapExitTrigger, OverlappedComponent) == 0x000000, "Member 'ATWindRoad_OnBeginOverlapExitTrigger::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapExitTrigger, OtherActor) == 0x000008, "Member 'ATWindRoad_OnBeginOverlapExitTrigger::OtherActor' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapExitTrigger, OtherComp) == 0x000010, "Member 'ATWindRoad_OnBeginOverlapExitTrigger::OtherComp' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapExitTrigger, OtherBodyIndex) == 0x000018, "Member 'ATWindRoad_OnBeginOverlapExitTrigger::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapExitTrigger, bFromSweep) == 0x00001C, "Member 'ATWindRoad_OnBeginOverlapExitTrigger::bFromSweep' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapExitTrigger, SweepResult) == 0x000020, "Member 'ATWindRoad_OnBeginOverlapExitTrigger::SweepResult' has a wrong offset!");

// Function AT.ATWindRoad.OnBeginOverlapStartTrigger
// 0x00A8 (0x00A8 - 0x0000)
struct ATWindRoad_OnBeginOverlapStartTrigger final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWindRoad_OnBeginOverlapStartTrigger) == 0x000008, "Wrong alignment on ATWindRoad_OnBeginOverlapStartTrigger");
static_assert(sizeof(ATWindRoad_OnBeginOverlapStartTrigger) == 0x0000A8, "Wrong size on ATWindRoad_OnBeginOverlapStartTrigger");
static_assert(offsetof(ATWindRoad_OnBeginOverlapStartTrigger, OverlappedComponent) == 0x000000, "Member 'ATWindRoad_OnBeginOverlapStartTrigger::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapStartTrigger, OtherActor) == 0x000008, "Member 'ATWindRoad_OnBeginOverlapStartTrigger::OtherActor' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapStartTrigger, OtherComp) == 0x000010, "Member 'ATWindRoad_OnBeginOverlapStartTrigger::OtherComp' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapStartTrigger, OtherBodyIndex) == 0x000018, "Member 'ATWindRoad_OnBeginOverlapStartTrigger::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapStartTrigger, bFromSweep) == 0x00001C, "Member 'ATWindRoad_OnBeginOverlapStartTrigger::bFromSweep' has a wrong offset!");
static_assert(offsetof(ATWindRoad_OnBeginOverlapStartTrigger, SweepResult) == 0x000020, "Member 'ATWindRoad_OnBeginOverlapStartTrigger::SweepResult' has a wrong offset!");

// Function AT.Portal.OnSelected
// 0x0004 (0x0004 - 0x0000)
struct Portal_OnSelected final
{
public:
	int32                                         SelectedNo;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Portal_OnSelected) == 0x000004, "Wrong alignment on Portal_OnSelected");
static_assert(sizeof(Portal_OnSelected) == 0x000004, "Wrong size on Portal_OnSelected");
static_assert(offsetof(Portal_OnSelected, SelectedNo) == 0x000000, "Member 'Portal_OnSelected::SelectedNo' has a wrong offset!");

// Function AT.Portal.SetPortalIndex
// 0x0004 (0x0004 - 0x0000)
struct Portal_SetPortalIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Portal_SetPortalIndex) == 0x000004, "Wrong alignment on Portal_SetPortalIndex");
static_assert(sizeof(Portal_SetPortalIndex) == 0x000004, "Wrong size on Portal_SetPortalIndex");
static_assert(offsetof(Portal_SetPortalIndex, Index_0) == 0x000000, "Member 'Portal_SetPortalIndex::Index_0' has a wrong offset!");

// Function AT.Portal.GetPortalIndex
// 0x0004 (0x0004 - 0x0000)
struct Portal_GetPortalIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Portal_GetPortalIndex) == 0x000004, "Wrong alignment on Portal_GetPortalIndex");
static_assert(sizeof(Portal_GetPortalIndex) == 0x000004, "Wrong size on Portal_GetPortalIndex");
static_assert(offsetof(Portal_GetPortalIndex, ReturnValue) == 0x000000, "Member 'Portal_GetPortalIndex::ReturnValue' has a wrong offset!");

// Function AT.ATAnimNotify_PlayParticleEffectCustom.OnSpawnedParticle
// 0x0008 (0x0008 - 0x0000)
struct ATAnimNotify_PlayParticleEffectCustom_OnSpawnedParticle final
{
public:
	class UParticleSystemComponent*               SpawnedParticle;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATAnimNotify_PlayParticleEffectCustom_OnSpawnedParticle) == 0x000008, "Wrong alignment on ATAnimNotify_PlayParticleEffectCustom_OnSpawnedParticle");
static_assert(sizeof(ATAnimNotify_PlayParticleEffectCustom_OnSpawnedParticle) == 0x000008, "Wrong size on ATAnimNotify_PlayParticleEffectCustom_OnSpawnedParticle");
static_assert(offsetof(ATAnimNotify_PlayParticleEffectCustom_OnSpawnedParticle, SpawnedParticle) == 0x000000, "Member 'ATAnimNotify_PlayParticleEffectCustom_OnSpawnedParticle::SpawnedParticle' has a wrong offset!");

// Function AT.Wolf_Component.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct Wolf_Component_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Wolf_Component_OnComponentHit) == 0x000008, "Wrong alignment on Wolf_Component_OnComponentHit");
static_assert(sizeof(Wolf_Component_OnComponentHit) == 0x0000B0, "Wrong size on Wolf_Component_OnComponentHit");
static_assert(offsetof(Wolf_Component_OnComponentHit, HitComponent) == 0x000000, "Member 'Wolf_Component_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(Wolf_Component_OnComponentHit, OtherActor) == 0x000008, "Member 'Wolf_Component_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Wolf_Component_OnComponentHit, OtherComp) == 0x000010, "Member 'Wolf_Component_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Wolf_Component_OnComponentHit, NormalImpulse) == 0x000018, "Member 'Wolf_Component_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Wolf_Component_OnComponentHit, Hit) == 0x000028, "Member 'Wolf_Component_OnComponentHit::Hit' has a wrong offset!");

// Function AT.Wolf_Component.OnProjectileLanding
// 0x0008 (0x0008 - 0x0000)
struct Wolf_Component_OnProjectileLanding final
{
public:
	class AATProjectileField*                     Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Wolf_Component_OnProjectileLanding) == 0x000008, "Wrong alignment on Wolf_Component_OnProjectileLanding");
static_assert(sizeof(Wolf_Component_OnProjectileLanding) == 0x000008, "Wrong size on Wolf_Component_OnProjectileLanding");
static_assert(offsetof(Wolf_Component_OnProjectileLanding, Projectile) == 0x000000, "Member 'Wolf_Component_OnProjectileLanding::Projectile' has a wrong offset!");

// Function AT.Wolf_Component.OnVisibleChangedCallBack
// 0x0001 (0x0001 - 0x0000)
struct Wolf_Component_OnVisibleChangedCallBack final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Wolf_Component_OnVisibleChangedCallBack) == 0x000001, "Wrong alignment on Wolf_Component_OnVisibleChangedCallBack");
static_assert(sizeof(Wolf_Component_OnVisibleChangedCallBack) == 0x000001, "Wrong size on Wolf_Component_OnVisibleChangedCallBack");
static_assert(offsetof(Wolf_Component_OnVisibleChangedCallBack, IsVisible) == 0x000000, "Member 'Wolf_Component_OnVisibleChangedCallBack::IsVisible' has a wrong offset!");

// Function AT.ATProjectileField.HitRootSphere
// 0x0088 (0x0088 - 0x0000)
struct ATProjectileField_HitRootSphere final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATProjectileField_HitRootSphere) == 0x000008, "Wrong alignment on ATProjectileField_HitRootSphere");
static_assert(sizeof(ATProjectileField_HitRootSphere) == 0x000088, "Wrong size on ATProjectileField_HitRootSphere");
static_assert(offsetof(ATProjectileField_HitRootSphere, ImpactResult) == 0x000000, "Member 'ATProjectileField_HitRootSphere::ImpactResult' has a wrong offset!");

// Function AT.Spawnable.SetSpawned
// 0x0001 (0x0001 - 0x0000)
struct Spawnable_SetSpawned final
{
public:
	bool                                          bSpawned;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spawnable_SetSpawned) == 0x000001, "Wrong alignment on Spawnable_SetSpawned");
static_assert(sizeof(Spawnable_SetSpawned) == 0x000001, "Wrong size on Spawnable_SetSpawned");
static_assert(offsetof(Spawnable_SetSpawned, bSpawned) == 0x000000, "Member 'Spawnable_SetSpawned::bSpawned' has a wrong offset!");

// Function AT.Spawnable.IsSpawned
// 0x0001 (0x0001 - 0x0000)
struct Spawnable_IsSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spawnable_IsSpawned) == 0x000001, "Wrong alignment on Spawnable_IsSpawned");
static_assert(sizeof(Spawnable_IsSpawned) == 0x000001, "Wrong size on Spawnable_IsSpawned");
static_assert(offsetof(Spawnable_IsSpawned, ReturnValue) == 0x000000, "Member 'Spawnable_IsSpawned::ReturnValue' has a wrong offset!");

// Function AT.ATPartyManager.OnChangedPlayer
// 0x0008 (0x0008 - 0x0000)
struct ATPartyManager_OnChangedPlayer final
{
public:
	class AAT_Character*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPartyManager_OnChangedPlayer) == 0x000008, "Wrong alignment on ATPartyManager_OnChangedPlayer");
static_assert(sizeof(ATPartyManager_OnChangedPlayer) == 0x000008, "Wrong size on ATPartyManager_OnChangedPlayer");
static_assert(offsetof(ATPartyManager_OnChangedPlayer, Target) == 0x000000, "Member 'ATPartyManager_OnChangedPlayer::Target' has a wrong offset!");

// Function AT.Projectile_Cpl082_SKL003_Sign.OnFinishedParticleST
// 0x0008 (0x0008 - 0x0000)
struct Projectile_Cpl082_SKL003_Sign_OnFinishedParticleST final
{
public:
	class UParticleSystemComponent*               InParticle;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl082_SKL003_Sign_OnFinishedParticleST) == 0x000008, "Wrong alignment on Projectile_Cpl082_SKL003_Sign_OnFinishedParticleST");
static_assert(sizeof(Projectile_Cpl082_SKL003_Sign_OnFinishedParticleST) == 0x000008, "Wrong size on Projectile_Cpl082_SKL003_Sign_OnFinishedParticleST");
static_assert(offsetof(Projectile_Cpl082_SKL003_Sign_OnFinishedParticleST, InParticle) == 0x000000, "Member 'Projectile_Cpl082_SKL003_Sign_OnFinishedParticleST::InParticle' has a wrong offset!");

// Function AT.AnimNotifyState_PlayParticleEffectCustom.OnSpawnedParticle
// 0x0008 (0x0008 - 0x0000)
struct AnimNotifyState_PlayParticleEffectCustom_OnSpawnedParticle final
{
public:
	class UParticleSystemComponent*               SpawnedParticle;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_PlayParticleEffectCustom_OnSpawnedParticle) == 0x000008, "Wrong alignment on AnimNotifyState_PlayParticleEffectCustom_OnSpawnedParticle");
static_assert(sizeof(AnimNotifyState_PlayParticleEffectCustom_OnSpawnedParticle) == 0x000008, "Wrong size on AnimNotifyState_PlayParticleEffectCustom_OnSpawnedParticle");
static_assert(offsetof(AnimNotifyState_PlayParticleEffectCustom_OnSpawnedParticle, SpawnedParticle) == 0x000000, "Member 'AnimNotifyState_PlayParticleEffectCustom_OnSpawnedParticle::SpawnedParticle' has a wrong offset!");

// Function AT.QuestPhase_WishDragonBall.TryClear
// 0x0010 (0x0010 - 0x0000)
struct QuestPhase_WishDragonBall_TryClear final
{
public:
	TArray<int32>                                 WishedIds;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestPhase_WishDragonBall_TryClear) == 0x000008, "Wrong alignment on QuestPhase_WishDragonBall_TryClear");
static_assert(sizeof(QuestPhase_WishDragonBall_TryClear) == 0x000010, "Wrong size on QuestPhase_WishDragonBall_TryClear");
static_assert(offsetof(QuestPhase_WishDragonBall_TryClear, WishedIds) == 0x000000, "Member 'QuestPhase_WishDragonBall_TryClear::WishedIds' has a wrong offset!");

// Function AT.ATAtrociousPreBattleBase.OnBeginPlayLevelTiming
// 0x0008 (0x0008 - 0x0000)
struct ATAtrociousPreBattleBase_OnBeginPlayLevelTiming final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATAtrociousPreBattleBase_OnBeginPlayLevelTiming) == 0x000004, "Wrong alignment on ATAtrociousPreBattleBase_OnBeginPlayLevelTiming");
static_assert(sizeof(ATAtrociousPreBattleBase_OnBeginPlayLevelTiming) == 0x000008, "Wrong size on ATAtrociousPreBattleBase_OnBeginPlayLevelTiming");
static_assert(offsetof(ATAtrociousPreBattleBase_OnBeginPlayLevelTiming, LevelName) == 0x000000, "Member 'ATAtrociousPreBattleBase_OnBeginPlayLevelTiming::LevelName' has a wrong offset!");

// Function AT.DlcMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct DlcMenu_MouseClickDecide final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DlcMenu_MouseClickDecide) == 0x000008, "Wrong alignment on DlcMenu_MouseClickDecide");
static_assert(sizeof(DlcMenu_MouseClickDecide) == 0x0000A8, "Wrong size on DlcMenu_MouseClickDecide");
static_assert(offsetof(DlcMenu_MouseClickDecide, MyGeometry) == 0x000000, "Member 'DlcMenu_MouseClickDecide::MyGeometry' has a wrong offset!");
static_assert(offsetof(DlcMenu_MouseClickDecide, MouseEvent) == 0x000038, "Member 'DlcMenu_MouseClickDecide::MouseEvent' has a wrong offset!");

// Function AT.ATWindRoadManager.ChangeVisibleAll
// 0x0008 (0x0008 - 0x0000)
struct ATWindRoadManager_ChangeVisibleAll final
{
public:
	bool                                          InbVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelay;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWindRoadManager_ChangeVisibleAll) == 0x000004, "Wrong alignment on ATWindRoadManager_ChangeVisibleAll");
static_assert(sizeof(ATWindRoadManager_ChangeVisibleAll) == 0x000008, "Wrong size on ATWindRoadManager_ChangeVisibleAll");
static_assert(offsetof(ATWindRoadManager_ChangeVisibleAll, InbVisible) == 0x000000, "Member 'ATWindRoadManager_ChangeVisibleAll::InbVisible' has a wrong offset!");
static_assert(offsetof(ATWindRoadManager_ChangeVisibleAll, InDelay) == 0x000004, "Member 'ATWindRoadManager_ChangeVisibleAll::InDelay' has a wrong offset!");

// Function AT.ATWindRoadManager.OnInGameBeginPlay
// 0x0108 (0x0108 - 0x0000)
struct ATWindRoadManager_OnInGameBeginPlay final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWindRoadManager_OnInGameBeginPlay) == 0x000008, "Wrong alignment on ATWindRoadManager_OnInGameBeginPlay");
static_assert(sizeof(ATWindRoadManager_OnInGameBeginPlay) == 0x000108, "Wrong size on ATWindRoadManager_OnInGameBeginPlay");
static_assert(offsetof(ATWindRoadManager_OnInGameBeginPlay, Param) == 0x000000, "Member 'ATWindRoadManager_OnInGameBeginPlay::Param' has a wrong offset!");

// Function AT.CameraEffectVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct CameraEffectVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraEffectVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on CameraEffectVolume_OnOverlapBegin");
static_assert(sizeof(CameraEffectVolume_OnOverlapBegin) == 0x000010, "Wrong size on CameraEffectVolume_OnOverlapBegin");
static_assert(offsetof(CameraEffectVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'CameraEffectVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(CameraEffectVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'CameraEffectVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.CameraEffectVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct CameraEffectVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraEffectVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on CameraEffectVolume_OnOverlapEnd");
static_assert(sizeof(CameraEffectVolume_OnOverlapEnd) == 0x000010, "Wrong size on CameraEffectVolume_OnOverlapEnd");
static_assert(offsetof(CameraEffectVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'CameraEffectVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(CameraEffectVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'CameraEffectVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.TriggerQuestStart.OnTouchSphereCollision
// 0x0008 (0x0008 - 0x0000)
struct TriggerQuestStart_OnTouchSphereCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerQuestStart_OnTouchSphereCollision) == 0x000008, "Wrong alignment on TriggerQuestStart_OnTouchSphereCollision");
static_assert(sizeof(TriggerQuestStart_OnTouchSphereCollision) == 0x000008, "Wrong size on TriggerQuestStart_OnTouchSphereCollision");
static_assert(offsetof(TriggerQuestStart_OnTouchSphereCollision, Actor) == 0x000000, "Member 'TriggerQuestStart_OnTouchSphereCollision::Actor' has a wrong offset!");

// Function AT.BonfireCharacterAnimationPlayer.OnCompleteFullAnimation
// 0x0010 (0x0010 - 0x0000)
struct BonfireCharacterAnimationPlayer_OnCompleteFullAnimation final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BonfireCharacterAnimationPlayer_OnCompleteFullAnimation) == 0x000008, "Wrong alignment on BonfireCharacterAnimationPlayer_OnCompleteFullAnimation");
static_assert(sizeof(BonfireCharacterAnimationPlayer_OnCompleteFullAnimation) == 0x000010, "Wrong size on BonfireCharacterAnimationPlayer_OnCompleteFullAnimation");
static_assert(offsetof(BonfireCharacterAnimationPlayer_OnCompleteFullAnimation, Montage) == 0x000000, "Member 'BonfireCharacterAnimationPlayer_OnCompleteFullAnimation::Montage' has a wrong offset!");
static_assert(offsetof(BonfireCharacterAnimationPlayer_OnCompleteFullAnimation, bInterrupted) == 0x000008, "Member 'BonfireCharacterAnimationPlayer_OnCompleteFullAnimation::bInterrupted' has a wrong offset!");

// Function AT.BonfireCharacterAnimationPlayer.OnCompleteSitdownAnimation
// 0x0010 (0x0010 - 0x0000)
struct BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation) == 0x000008, "Wrong alignment on BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation");
static_assert(sizeof(BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation) == 0x000010, "Wrong size on BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation");
static_assert(offsetof(BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation, Montage) == 0x000000, "Member 'BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation::Montage' has a wrong offset!");
static_assert(offsetof(BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation, bInterrupted) == 0x000008, "Member 'BonfireCharacterAnimationPlayer_OnCompleteSitdownAnimation::bInterrupted' has a wrong offset!");

// Function AT.BonfireCharacterAnimationPlayer.OnCompleteStandupAnimation
// 0x0010 (0x0010 - 0x0000)
struct BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation) == 0x000008, "Wrong alignment on BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation");
static_assert(sizeof(BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation) == 0x000010, "Wrong size on BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation");
static_assert(offsetof(BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation, Montage) == 0x000000, "Member 'BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation::Montage' has a wrong offset!");
static_assert(offsetof(BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation, bInterrupted) == 0x000008, "Member 'BonfireCharacterAnimationPlayer_OnCompleteStandupAnimation::bInterrupted' has a wrong offset!");

// Function AT.LandmarkVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct LandmarkVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmarkVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on LandmarkVolume_OnOverlapBegin");
static_assert(sizeof(LandmarkVolume_OnOverlapBegin) == 0x000010, "Wrong size on LandmarkVolume_OnOverlapBegin");
static_assert(offsetof(LandmarkVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'LandmarkVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(LandmarkVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'LandmarkVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.LandmarkVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct LandmarkVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmarkVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on LandmarkVolume_OnOverlapEnd");
static_assert(sizeof(LandmarkVolume_OnOverlapEnd) == 0x000010, "Wrong size on LandmarkVolume_OnOverlapEnd");
static_assert(offsetof(LandmarkVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'LandmarkVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(LandmarkVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'LandmarkVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.ATCharacterDamageCollision.OnCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct ATCharacterDamageCollision_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterDamageCollision_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on ATCharacterDamageCollision_OnCollisionOverlapBegin");
static_assert(sizeof(ATCharacterDamageCollision_OnCollisionOverlapBegin) == 0x0000A8, "Wrong size on ATCharacterDamageCollision_OnCollisionOverlapBegin");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapBegin, OverlappedComponent) == 0x000000, "Member 'ATCharacterDamageCollision_OnCollisionOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'ATCharacterDamageCollision_OnCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'ATCharacterDamageCollision_OnCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'ATCharacterDamageCollision_OnCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'ATCharacterDamageCollision_OnCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'ATCharacterDamageCollision_OnCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function AT.ATCharacterDamageCollision.OnCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct ATCharacterDamageCollision_OnCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCharacterDamageCollision_OnCollisionOverlapEnd) == 0x000008, "Wrong alignment on ATCharacterDamageCollision_OnCollisionOverlapEnd");
static_assert(sizeof(ATCharacterDamageCollision_OnCollisionOverlapEnd) == 0x000020, "Wrong size on ATCharacterDamageCollision_OnCollisionOverlapEnd");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapEnd, OverlappedComponent) == 0x000000, "Member 'ATCharacterDamageCollision_OnCollisionOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapEnd, OtherActor) == 0x000008, "Member 'ATCharacterDamageCollision_OnCollisionOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapEnd, OtherComp) == 0x000010, "Member 'ATCharacterDamageCollision_OnCollisionOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(ATCharacterDamageCollision_OnCollisionOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'ATCharacterDamageCollision_OnCollisionOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.CheckPlayerState
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerAutoControlTrigger_CheckPlayerState final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerAutoControlTrigger_CheckPlayerState) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_CheckPlayerState");
static_assert(sizeof(ATPlayerAutoControlTrigger_CheckPlayerState) == 0x000010, "Wrong size on ATPlayerAutoControlTrigger_CheckPlayerState");
static_assert(offsetof(ATPlayerAutoControlTrigger_CheckPlayerState, TargetActor) == 0x000000, "Member 'ATPlayerAutoControlTrigger_CheckPlayerState::TargetActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_CheckPlayerState, ReturnValue) == 0x000008, "Member 'ATPlayerAutoControlTrigger_CheckPlayerState::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.GetCurrentTalkEventId
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerAutoControlTrigger_GetCurrentTalkEventId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlTrigger_GetCurrentTalkEventId) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_GetCurrentTalkEventId");
static_assert(sizeof(ATPlayerAutoControlTrigger_GetCurrentTalkEventId) == 0x000010, "Wrong size on ATPlayerAutoControlTrigger_GetCurrentTalkEventId");
static_assert(offsetof(ATPlayerAutoControlTrigger_GetCurrentTalkEventId, ReturnValue) == 0x000000, "Member 'ATPlayerAutoControlTrigger_GetCurrentTalkEventId::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerAutoControlTrigger_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlTrigger_OnBeginOverlap) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_OnBeginOverlap");
static_assert(sizeof(ATPlayerAutoControlTrigger_OnBeginOverlap) == 0x000010, "Wrong size on ATPlayerAutoControlTrigger_OnBeginOverlap");
static_assert(offsetof(ATPlayerAutoControlTrigger_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'ATPlayerAutoControlTrigger_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ATPlayerAutoControlTrigger_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerAutoControlTrigger_OnEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlTrigger_OnEndOverlap) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_OnEndOverlap");
static_assert(sizeof(ATPlayerAutoControlTrigger_OnEndOverlap) == 0x000010, "Wrong size on ATPlayerAutoControlTrigger_OnEndOverlap");
static_assert(offsetof(ATPlayerAutoControlTrigger_OnEndOverlap, OverlappedActor) == 0x000000, "Member 'ATPlayerAutoControlTrigger_OnEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_OnEndOverlap, OtherActor) == 0x000008, "Member 'ATPlayerAutoControlTrigger_OnEndOverlap::OtherActor' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.OnHit
// 0x00A8 (0x00A8 - 0x0000)
struct ATPlayerAutoControlTrigger_OnHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlTrigger_OnHit) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_OnHit");
static_assert(sizeof(ATPlayerAutoControlTrigger_OnHit) == 0x0000A8, "Wrong size on ATPlayerAutoControlTrigger_OnHit");
static_assert(offsetof(ATPlayerAutoControlTrigger_OnHit, SelfActor) == 0x000000, "Member 'ATPlayerAutoControlTrigger_OnHit::SelfActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_OnHit, OtherActor) == 0x000008, "Member 'ATPlayerAutoControlTrigger_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_OnHit, NormalImpulse) == 0x000010, "Member 'ATPlayerAutoControlTrigger_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_OnHit, Hit) == 0x000020, "Member 'ATPlayerAutoControlTrigger_OnHit::Hit' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoMoveBackwardLocation
// 0x0018 (0x0018 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackwardLength;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoMoveSpeed                                MoveSpeed;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation) == 0x000018, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation, BackwardLength) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation::BackwardLength' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation, MoveSpeed) == 0x00000C, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation::MoveSpeed' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation, DelayTime) == 0x000010, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveBackwardLocation::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoMoveForwardLocation
// 0x0018 (0x0018 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardLength;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoMoveSpeed                                MoveSpeed;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation) == 0x000018, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation, ForwardLength) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation::ForwardLength' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation, MoveSpeed) == 0x00000C, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation::MoveSpeed' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation, DelayTime) == 0x000010, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveForwardLocation::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoMoveLocation
// 0x0020 (0x0020 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoMoveLocation final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoMoveSpeed                                MoveSpeed;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoMoveLocation) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoMoveLocation");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoMoveLocation) == 0x000020, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoMoveLocation");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveLocation, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveLocation::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveLocation, Location) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveLocation::Location' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveLocation, MoveSpeed) == 0x000014, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveLocation::MoveSpeed' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveLocation, DelayTime) == 0x000018, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveLocation::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoMoveParentActor
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoMoveSpeed                                MoveSpeed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor) == 0x000010, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor, MoveSpeed) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor::MoveSpeed' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor, DelayTime) == 0x00000C, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveParentActor::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoMoveTargetActor
// 0x0018 (0x0018 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoMoveSpeed                                MoveSpeed;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor) == 0x000018, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor, TargetActor) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor, MoveSpeed) == 0x000010, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor::MoveSpeed' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor, DelayTime) == 0x000014, "Member 'ATPlayerAutoControlTrigger_PlayerAutoMoveTargetActor::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoTalk
// 0x0020 (0x0020 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoTalk final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TalkEventID;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoTalk) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoTalk");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoTalk) == 0x000020, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoTalk");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTalk, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTalk::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTalk, TalkEventID) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTalk::TalkEventID' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTalk, DelayTime) == 0x000018, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTalk::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoTurn
// 0x0018 (0x0018 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoTurn final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoTurn) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoTurn");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoTurn) == 0x000018, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoTurn");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTurn, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTurn::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTurn, TargetActor) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTurn::TargetActor' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTurn, DelayTime) == 0x000010, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTurn::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoTurnNearestTarget
// 0x0020 (0x0020 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         TargetActors;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget) == 0x000020, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget, TargetActors) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget::TargetActors' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget, DelayTime) == 0x000018, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTurnNearestTarget::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.PlayerAutoTurnOrderQuest
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest) == 0x000008, "Wrong alignment on ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest");
static_assert(sizeof(ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest) == 0x000010, "Wrong size on ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest, Player) == 0x000000, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest::Player' has a wrong offset!");
static_assert(offsetof(ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest, DelayTime) == 0x000008, "Member 'ATPlayerAutoControlTrigger_PlayerAutoTurnOrderQuest::DelayTime' has a wrong offset!");

// Function AT.ATPlayerAutoControlTrigger.QuestChangePhaseTiming
// 0x0004 (0x0004 - 0x0000)
struct ATPlayerAutoControlTrigger_QuestChangePhaseTiming final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerAutoControlTrigger_QuestChangePhaseTiming) == 0x000004, "Wrong alignment on ATPlayerAutoControlTrigger_QuestChangePhaseTiming");
static_assert(sizeof(ATPlayerAutoControlTrigger_QuestChangePhaseTiming) == 0x000004, "Wrong size on ATPlayerAutoControlTrigger_QuestChangePhaseTiming");
static_assert(offsetof(ATPlayerAutoControlTrigger_QuestChangePhaseTiming, NextPhase) == 0x000000, "Member 'ATPlayerAutoControlTrigger_QuestChangePhaseTiming::NextPhase' has a wrong offset!");

// Function AT.BoostPointComponent.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct BoostPointComponent_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OverlapInfo;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoostPointComponent_BeginOverlap) == 0x000008, "Wrong alignment on BoostPointComponent_BeginOverlap");
static_assert(sizeof(BoostPointComponent_BeginOverlap) == 0x0000A8, "Wrong size on BoostPointComponent_BeginOverlap");
static_assert(offsetof(BoostPointComponent_BeginOverlap, OverlappedComp) == 0x000000, "Member 'BoostPointComponent_BeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BoostPointComponent_BeginOverlap, Other) == 0x000008, "Member 'BoostPointComponent_BeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(BoostPointComponent_BeginOverlap, OtherComp) == 0x000010, "Member 'BoostPointComponent_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BoostPointComponent_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BoostPointComponent_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BoostPointComponent_BeginOverlap, bFromSweep) == 0x00001C, "Member 'BoostPointComponent_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BoostPointComponent_BeginOverlap, OverlapInfo) == 0x000020, "Member 'BoostPointComponent_BeginOverlap::OverlapInfo' has a wrong offset!");

// Function AT.BoostPointComponent.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BoostPointComponent_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BoostPointComponent_EndOverlap) == 0x000008, "Wrong alignment on BoostPointComponent_EndOverlap");
static_assert(sizeof(BoostPointComponent_EndOverlap) == 0x000020, "Wrong size on BoostPointComponent_EndOverlap");
static_assert(offsetof(BoostPointComponent_EndOverlap, OverlappedComponent) == 0x000000, "Member 'BoostPointComponent_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BoostPointComponent_EndOverlap, OtherActor) == 0x000008, "Member 'BoostPointComponent_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BoostPointComponent_EndOverlap, OtherComp) == 0x000010, "Member 'BoostPointComponent_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BoostPointComponent_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'BoostPointComponent_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function AT.ATCharacterFootIKManager.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterFootIKManager_OnMontageEnded final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCharacterFootIKManager_OnMontageEnded) == 0x000008, "Wrong alignment on ATCharacterFootIKManager_OnMontageEnded");
static_assert(sizeof(ATCharacterFootIKManager_OnMontageEnded) == 0x000010, "Wrong size on ATCharacterFootIKManager_OnMontageEnded");
static_assert(offsetof(ATCharacterFootIKManager_OnMontageEnded, PMontage) == 0x000000, "Member 'ATCharacterFootIKManager_OnMontageEnded::PMontage' has a wrong offset!");
static_assert(offsetof(ATCharacterFootIKManager_OnMontageEnded, bInterrupted) == 0x000008, "Member 'ATCharacterFootIKManager_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function AT.ATCharacterFootIKManager.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterFootIKManager_OnMontageStarted final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterFootIKManager_OnMontageStarted) == 0x000008, "Wrong alignment on ATCharacterFootIKManager_OnMontageStarted");
static_assert(sizeof(ATCharacterFootIKManager_OnMontageStarted) == 0x000008, "Wrong size on ATCharacterFootIKManager_OnMontageStarted");
static_assert(offsetof(ATCharacterFootIKManager_OnMontageStarted, PMontage) == 0x000000, "Member 'ATCharacterFootIKManager_OnMontageStarted::PMontage' has a wrong offset!");

// Function AT.ATCharacterFootIKManager.OnPostChangeAnimationBlueprint
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterFootIKManager_OnPostChangeAnimationBlueprint final
{
public:
	const class UClass*                           InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           InMesh;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterFootIKManager_OnPostChangeAnimationBlueprint) == 0x000008, "Wrong alignment on ATCharacterFootIKManager_OnPostChangeAnimationBlueprint");
static_assert(sizeof(ATCharacterFootIKManager_OnPostChangeAnimationBlueprint) == 0x000010, "Wrong size on ATCharacterFootIKManager_OnPostChangeAnimationBlueprint");
static_assert(offsetof(ATCharacterFootIKManager_OnPostChangeAnimationBlueprint, InClass) == 0x000000, "Member 'ATCharacterFootIKManager_OnPostChangeAnimationBlueprint::InClass' has a wrong offset!");
static_assert(offsetof(ATCharacterFootIKManager_OnPostChangeAnimationBlueprint, InMesh) == 0x000008, "Member 'ATCharacterFootIKManager_OnPostChangeAnimationBlueprint::InMesh' has a wrong offset!");

// Function AT.ATCharacterFootIKManager.OnPreChangeAnimationBlueprint
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterFootIKManager_OnPreChangeAnimationBlueprint final
{
public:
	const class UClass*                           InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           InMesh;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterFootIKManager_OnPreChangeAnimationBlueprint) == 0x000008, "Wrong alignment on ATCharacterFootIKManager_OnPreChangeAnimationBlueprint");
static_assert(sizeof(ATCharacterFootIKManager_OnPreChangeAnimationBlueprint) == 0x000010, "Wrong size on ATCharacterFootIKManager_OnPreChangeAnimationBlueprint");
static_assert(offsetof(ATCharacterFootIKManager_OnPreChangeAnimationBlueprint, InClass) == 0x000000, "Member 'ATCharacterFootIKManager_OnPreChangeAnimationBlueprint::InClass' has a wrong offset!");
static_assert(offsetof(ATCharacterFootIKManager_OnPreChangeAnimationBlueprint, InMesh) == 0x000008, "Member 'ATCharacterFootIKManager_OnPreChangeAnimationBlueprint::InMesh' has a wrong offset!");

// Function AT.CharacterSkillComponent.OnBeginSupportSkill
// 0x0008 (0x0008 - 0x0000)
struct CharacterSkillComponent_OnBeginSupportSkill final
{
public:
	class USkill*                                 InSkill;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSkillComponent_OnBeginSupportSkill) == 0x000008, "Wrong alignment on CharacterSkillComponent_OnBeginSupportSkill");
static_assert(sizeof(CharacterSkillComponent_OnBeginSupportSkill) == 0x000008, "Wrong size on CharacterSkillComponent_OnBeginSupportSkill");
static_assert(offsetof(CharacterSkillComponent_OnBeginSupportSkill, InSkill) == 0x000000, "Member 'CharacterSkillComponent_OnBeginSupportSkill::InSkill' has a wrong offset!");

// Function AT.CharacterSkillComponent.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct CharacterSkillComponent_OnChangeAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSkillComponent_OnChangeAction) == 0x000008, "Wrong alignment on CharacterSkillComponent_OnChangeAction");
static_assert(sizeof(CharacterSkillComponent_OnChangeAction) == 0x000010, "Wrong size on CharacterSkillComponent_OnChangeAction");
static_assert(offsetof(CharacterSkillComponent_OnChangeAction, InCharacter) == 0x000000, "Member 'CharacterSkillComponent_OnChangeAction::InCharacter' has a wrong offset!");
static_assert(offsetof(CharacterSkillComponent_OnChangeAction, InActionIdPrev) == 0x000008, "Member 'CharacterSkillComponent_OnChangeAction::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(CharacterSkillComponent_OnChangeAction, InActionIdNext) == 0x00000C, "Member 'CharacterSkillComponent_OnChangeAction::InActionIdNext' has a wrong offset!");

// Function AT.ATCharacterMoveState.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterMoveState_OnChangeAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterMoveState_OnChangeAction) == 0x000008, "Wrong alignment on ATCharacterMoveState_OnChangeAction");
static_assert(sizeof(ATCharacterMoveState_OnChangeAction) == 0x000010, "Wrong size on ATCharacterMoveState_OnChangeAction");
static_assert(offsetof(ATCharacterMoveState_OnChangeAction, InCharacter) == 0x000000, "Member 'ATCharacterMoveState_OnChangeAction::InCharacter' has a wrong offset!");
static_assert(offsetof(ATCharacterMoveState_OnChangeAction, InActionIdPrev) == 0x000008, "Member 'ATCharacterMoveState_OnChangeAction::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATCharacterMoveState_OnChangeAction, InActionIdNext) == 0x00000C, "Member 'ATCharacterMoveState_OnChangeAction::InActionIdNext' has a wrong offset!");

// Function AT.ATCharacterMoveState.OnChangeMoveState
// 0x0008 (0x0008 - 0x0000)
struct ATCharacterMoveState_OnChangeMoveState final
{
public:
	int32                                         OldState;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveState;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterMoveState_OnChangeMoveState) == 0x000004, "Wrong alignment on ATCharacterMoveState_OnChangeMoveState");
static_assert(sizeof(ATCharacterMoveState_OnChangeMoveState) == 0x000008, "Wrong size on ATCharacterMoveState_OnChangeMoveState");
static_assert(offsetof(ATCharacterMoveState_OnChangeMoveState, OldState) == 0x000000, "Member 'ATCharacterMoveState_OnChangeMoveState::OldState' has a wrong offset!");
static_assert(offsetof(ATCharacterMoveState_OnChangeMoveState, ActiveState) == 0x000004, "Member 'ATCharacterMoveState_OnChangeMoveState::ActiveState' has a wrong offset!");

// Function AT.ATCharacterMoveState.OnCookingDemoStart
// 0x0001 (0x0001 - 0x0000)
struct ATCharacterMoveState_OnCookingDemoStart final
{
public:
	int8                                          CutNum;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterMoveState_OnCookingDemoStart) == 0x000001, "Wrong alignment on ATCharacterMoveState_OnCookingDemoStart");
static_assert(sizeof(ATCharacterMoveState_OnCookingDemoStart) == 0x000001, "Wrong size on ATCharacterMoveState_OnCookingDemoStart");
static_assert(offsetof(ATCharacterMoveState_OnCookingDemoStart, CutNum) == 0x000000, "Member 'ATCharacterMoveState_OnCookingDemoStart::CutNum' has a wrong offset!");

// Function AT.ATCharacterMoveState.OnLanded
// 0x0088 (0x0088 - 0x0000)
struct ATCharacterMoveState_OnLanded final
{
public:
	struct FHitResult                             InHit;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterMoveState_OnLanded) == 0x000008, "Wrong alignment on ATCharacterMoveState_OnLanded");
static_assert(sizeof(ATCharacterMoveState_OnLanded) == 0x000088, "Wrong size on ATCharacterMoveState_OnLanded");
static_assert(offsetof(ATCharacterMoveState_OnLanded, InHit) == 0x000000, "Member 'ATCharacterMoveState_OnLanded::InHit' has a wrong offset!");

// Function AT.ATCharacterMoveState.OnMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterMoveState_OnMovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCharacterMoveState_OnMovementModeChanged) == 0x000008, "Wrong alignment on ATCharacterMoveState_OnMovementModeChanged");
static_assert(sizeof(ATCharacterMoveState_OnMovementModeChanged) == 0x000010, "Wrong size on ATCharacterMoveState_OnMovementModeChanged");
static_assert(offsetof(ATCharacterMoveState_OnMovementModeChanged, Character) == 0x000000, "Member 'ATCharacterMoveState_OnMovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(ATCharacterMoveState_OnMovementModeChanged, PrevMovementMode) == 0x000008, "Member 'ATCharacterMoveState_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(ATCharacterMoveState_OnMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'ATCharacterMoveState_OnMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function AT.ATVariationPartsLoader.CompleteClear
// 0x0008 (0x0008 - 0x0000)
struct ATVariationPartsLoader_CompleteClear final
{
public:
	class UATDataAssetVariationMeshAsyncLoad*     PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATVariationPartsLoader_CompleteClear) == 0x000008, "Wrong alignment on ATVariationPartsLoader_CompleteClear");
static_assert(sizeof(ATVariationPartsLoader_CompleteClear) == 0x000008, "Wrong size on ATVariationPartsLoader_CompleteClear");
static_assert(offsetof(ATVariationPartsLoader_CompleteClear, PartsLoad) == 0x000000, "Member 'ATVariationPartsLoader_CompleteClear::PartsLoad' has a wrong offset!");

// Function AT.ATVariationPartsLoader.CompleteLoad
// 0x0008 (0x0008 - 0x0000)
struct ATVariationPartsLoader_CompleteLoad final
{
public:
	class UATDataAssetVariationMeshAsyncLoad*     PartsLoad;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATVariationPartsLoader_CompleteLoad) == 0x000008, "Wrong alignment on ATVariationPartsLoader_CompleteLoad");
static_assert(sizeof(ATVariationPartsLoader_CompleteLoad) == 0x000008, "Wrong size on ATVariationPartsLoader_CompleteLoad");
static_assert(offsetof(ATVariationPartsLoader_CompleteLoad, PartsLoad) == 0x000000, "Member 'ATVariationPartsLoader_CompleteLoad::PartsLoad' has a wrong offset!");

// Function AT.CrossTalkManager.OnEndPlayCharacter
// 0x0008 (0x0008 - 0x0000)
struct CrossTalkManager_OnEndPlayCharacter final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrossTalkManager_OnEndPlayCharacter) == 0x000008, "Wrong alignment on CrossTalkManager_OnEndPlayCharacter");
static_assert(sizeof(CrossTalkManager_OnEndPlayCharacter) == 0x000008, "Wrong size on CrossTalkManager_OnEndPlayCharacter");
static_assert(offsetof(CrossTalkManager_OnEndPlayCharacter, InCharacter) == 0x000000, "Member 'CrossTalkManager_OnEndPlayCharacter::InCharacter' has a wrong offset!");

// Function AT.CrossTalkManager.OnFinishedVoice
// 0x0004 (0x0004 - 0x0000)
struct CrossTalkManager_OnFinishedVoice final
{
public:
	int32                                         Ch;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrossTalkManager_OnFinishedVoice) == 0x000004, "Wrong alignment on CrossTalkManager_OnFinishedVoice");
static_assert(sizeof(CrossTalkManager_OnFinishedVoice) == 0x000004, "Wrong size on CrossTalkManager_OnFinishedVoice");
static_assert(offsetof(CrossTalkManager_OnFinishedVoice, Ch) == 0x000000, "Member 'CrossTalkManager_OnFinishedVoice::Ch' has a wrong offset!");

// Function AT.ATCharacterRestrictGate.OnBeginOverlapGateTrigger
// 0x00A8 (0x00A8 - 0x0000)
struct ATCharacterRestrictGate_OnBeginOverlapGateTrigger final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterRestrictGate_OnBeginOverlapGateTrigger) == 0x000008, "Wrong alignment on ATCharacterRestrictGate_OnBeginOverlapGateTrigger");
static_assert(sizeof(ATCharacterRestrictGate_OnBeginOverlapGateTrigger) == 0x0000A8, "Wrong size on ATCharacterRestrictGate_OnBeginOverlapGateTrigger");
static_assert(offsetof(ATCharacterRestrictGate_OnBeginOverlapGateTrigger, OverlappedComponent) == 0x000000, "Member 'ATCharacterRestrictGate_OnBeginOverlapGateTrigger::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATCharacterRestrictGate_OnBeginOverlapGateTrigger, OtherActor) == 0x000008, "Member 'ATCharacterRestrictGate_OnBeginOverlapGateTrigger::OtherActor' has a wrong offset!");
static_assert(offsetof(ATCharacterRestrictGate_OnBeginOverlapGateTrigger, OtherComp) == 0x000010, "Member 'ATCharacterRestrictGate_OnBeginOverlapGateTrigger::OtherComp' has a wrong offset!");
static_assert(offsetof(ATCharacterRestrictGate_OnBeginOverlapGateTrigger, OtherBodyIndex) == 0x000018, "Member 'ATCharacterRestrictGate_OnBeginOverlapGateTrigger::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ATCharacterRestrictGate_OnBeginOverlapGateTrigger, bFromSweep) == 0x00001C, "Member 'ATCharacterRestrictGate_OnBeginOverlapGateTrigger::bFromSweep' has a wrong offset!");
static_assert(offsetof(ATCharacterRestrictGate_OnBeginOverlapGateTrigger, SweepResult) == 0x000020, "Member 'ATCharacterRestrictGate_OnBeginOverlapGateTrigger::SweepResult' has a wrong offset!");

// Function AT.ATCharacterRestrictGate.OnEndOverlapGateTrigger
// 0x0020 (0x0020 - 0x0000)
struct ATCharacterRestrictGate_OnEndOverlapGateTrigger final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCharacterRestrictGate_OnEndOverlapGateTrigger) == 0x000008, "Wrong alignment on ATCharacterRestrictGate_OnEndOverlapGateTrigger");
static_assert(sizeof(ATCharacterRestrictGate_OnEndOverlapGateTrigger) == 0x000020, "Wrong size on ATCharacterRestrictGate_OnEndOverlapGateTrigger");
static_assert(offsetof(ATCharacterRestrictGate_OnEndOverlapGateTrigger, OverlappedComponent) == 0x000000, "Member 'ATCharacterRestrictGate_OnEndOverlapGateTrigger::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATCharacterRestrictGate_OnEndOverlapGateTrigger, OtherActor) == 0x000008, "Member 'ATCharacterRestrictGate_OnEndOverlapGateTrigger::OtherActor' has a wrong offset!");
static_assert(offsetof(ATCharacterRestrictGate_OnEndOverlapGateTrigger, OtherComp) == 0x000010, "Member 'ATCharacterRestrictGate_OnEndOverlapGateTrigger::OtherComp' has a wrong offset!");
static_assert(offsetof(ATCharacterRestrictGate_OnEndOverlapGateTrigger, OtherBodyIndex) == 0x000018, "Member 'ATCharacterRestrictGate_OnEndOverlapGateTrigger::OtherBodyIndex' has a wrong offset!");

// Function AT.ATCheatManager.ATActiveSubLevel
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATActiveSubLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATActiveSubLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATActiveSubLevel");
static_assert(sizeof(ATCheatManager_ATActiveSubLevel) == 0x000008, "Wrong size on ATCheatManager_ATActiveSubLevel");
static_assert(offsetof(ATCheatManager_ATActiveSubLevel, LevelName) == 0x000000, "Member 'ATCheatManager_ATActiveSubLevel::LevelName' has a wrong offset!");

// Function AT.ATCheatManager.ATAsyncLoadCharacter
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATAsyncLoadCharacter final
{
public:
	class FName                                   MasterId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATAsyncLoadCharacter) == 0x000004, "Wrong alignment on ATCheatManager_ATAsyncLoadCharacter");
static_assert(sizeof(ATCheatManager_ATAsyncLoadCharacter) == 0x000008, "Wrong size on ATCheatManager_ATAsyncLoadCharacter");
static_assert(offsetof(ATCheatManager_ATAsyncLoadCharacter, MasterId) == 0x000000, "Member 'ATCheatManager_ATAsyncLoadCharacter::MasterId' has a wrong offset!");

// Function AT.ATCheatManager.ATBaseballGameBattlePower
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATBaseballGameBattlePower final
{
public:
	double                                        Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATBaseballGameBattlePower) == 0x000008, "Wrong alignment on ATCheatManager_ATBaseballGameBattlePower");
static_assert(sizeof(ATCheatManager_ATBaseballGameBattlePower) == 0x000008, "Wrong size on ATCheatManager_ATBaseballGameBattlePower");
static_assert(offsetof(ATCheatManager_ATBaseballGameBattlePower, Power) == 0x000000, "Member 'ATCheatManager_ATBaseballGameBattlePower::Power' has a wrong offset!");

// Function AT.ATCheatManager.ATBattleDemoStart
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATBattleDemoStart final
{
public:
	class FName                                   InDemoId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATBattleDemoStart) == 0x000004, "Wrong alignment on ATCheatManager_ATBattleDemoStart");
static_assert(sizeof(ATCheatManager_ATBattleDemoStart) == 0x000008, "Wrong size on ATCheatManager_ATBattleDemoStart");
static_assert(offsetof(ATCheatManager_ATBattleDemoStart, InDemoId) == 0x000000, "Member 'ATCheatManager_ATBattleDemoStart::InDemoId' has a wrong offset!");

// Function AT.ATCheatManager.ATChangePersistent
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATChangePersistent final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATChangePersistent) == 0x000004, "Wrong alignment on ATCheatManager_ATChangePersistent");
static_assert(sizeof(ATCheatManager_ATChangePersistent) == 0x000008, "Wrong size on ATCheatManager_ATChangePersistent");
static_assert(offsetof(ATCheatManager_ATChangePersistent, LevelName) == 0x000000, "Member 'ATCheatManager_ATChangePersistent::LevelName' has a wrong offset!");

// Function AT.ATCheatManager.ATDeactiveSubLevel
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDeactiveSubLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDeactiveSubLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDeactiveSubLevel");
static_assert(sizeof(ATCheatManager_ATDeactiveSubLevel) == 0x000008, "Wrong size on ATCheatManager_ATDeactiveSubLevel");
static_assert(offsetof(ATCheatManager_ATDeactiveSubLevel, LevelName) == 0x000000, "Member 'ATCheatManager_ATDeactiveSubLevel::LevelName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAddExp
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugAddExp final
{
public:
	int32                                         Exp;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartyIndex;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugAddExp) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAddExp");
static_assert(sizeof(ATCheatManager_ATDebugAddExp) == 0x000008, "Wrong size on ATCheatManager_ATDebugAddExp");
static_assert(offsetof(ATCheatManager_ATDebugAddExp, Exp) == 0x000000, "Member 'ATCheatManager_ATDebugAddExp::Exp' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddExp, PartyIndex) == 0x000004, "Member 'ATCheatManager_ATDebugAddExp::PartyIndex' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAddMoney
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugAddMoney final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAddMoney) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAddMoney");
static_assert(sizeof(ATCheatManager_ATDebugAddMoney) == 0x000004, "Wrong size on ATCheatManager_ATDebugAddMoney");
static_assert(offsetof(ATCheatManager_ATDebugAddMoney, Value) == 0x000000, "Member 'ATCheatManager_ATDebugAddMoney::Value' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAddPartyExp
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugAddPartyExp final
{
public:
	int32                                         Exp;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAddPartyExp) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAddPartyExp");
static_assert(sizeof(ATCheatManager_ATDebugAddPartyExp) == 0x000004, "Wrong size on ATCheatManager_ATDebugAddPartyExp");
static_assert(offsetof(ATCheatManager_ATDebugAddPartyExp, Exp) == 0x000000, "Member 'ATCheatManager_ATDebugAddPartyExp::Exp' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAddQuestCompletedCount
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugAddQuestCompletedCount final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugAddQuestCompletedCount) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAddQuestCompletedCount");
static_assert(sizeof(ATCheatManager_ATDebugAddQuestCompletedCount) == 0x000010, "Wrong size on ATCheatManager_ATDebugAddQuestCompletedCount");
static_assert(offsetof(ATCheatManager_ATDebugAddQuestCompletedCount, QuestId) == 0x000000, "Member 'ATCheatManager_ATDebugAddQuestCompletedCount::QuestId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddQuestCompletedCount, Count) == 0x000008, "Member 'ATCheatManager_ATDebugAddQuestCompletedCount::Count' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAddQuestNavigateIcon
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugAddQuestNavigateIcon final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAddQuestNavigateIcon) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAddQuestNavigateIcon");
static_assert(sizeof(ATCheatManager_ATDebugAddQuestNavigateIcon) == 0x000010, "Wrong size on ATCheatManager_ATDebugAddQuestNavigateIcon");
static_assert(offsetof(ATCheatManager_ATDebugAddQuestNavigateIcon, QuestId) == 0x000000, "Member 'ATCheatManager_ATDebugAddQuestNavigateIcon::QuestId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddQuestNavigateIcon, ActorName) == 0x000008, "Member 'ATCheatManager_ATDebugAddQuestNavigateIcon::ActorName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAddStateIcon
// 0x000C (0x000C - 0x0000)
struct ATCheatManager_ATDebugAddStateIcon final
{
public:
	uint8                                         InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InType;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAddStateIcon) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAddStateIcon");
static_assert(sizeof(ATCheatManager_ATDebugAddStateIcon) == 0x00000C, "Wrong size on ATCheatManager_ATDebugAddStateIcon");
static_assert(offsetof(ATCheatManager_ATDebugAddStateIcon, InTarget) == 0x000000, "Member 'ATCheatManager_ATDebugAddStateIcon::InTarget' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddStateIcon, InType) == 0x000004, "Member 'ATCheatManager_ATDebugAddStateIcon::InType' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddStateIcon, InTime) == 0x000008, "Member 'ATCheatManager_ATDebugAddStateIcon::InTime' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAddStateIcon3
// 0x0014 (0x0014 - 0x0000)
struct ATCheatManager_ATDebugAddStateIcon3 final
{
public:
	uint8                                         InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InType_1;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InType_2;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InType_3;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAddStateIcon3) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAddStateIcon3");
static_assert(sizeof(ATCheatManager_ATDebugAddStateIcon3) == 0x000014, "Wrong size on ATCheatManager_ATDebugAddStateIcon3");
static_assert(offsetof(ATCheatManager_ATDebugAddStateIcon3, InTarget) == 0x000000, "Member 'ATCheatManager_ATDebugAddStateIcon3::InTarget' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddStateIcon3, InType_1) == 0x000004, "Member 'ATCheatManager_ATDebugAddStateIcon3::InType_1' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddStateIcon3, InType_2) == 0x000008, "Member 'ATCheatManager_ATDebugAddStateIcon3::InType_2' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddStateIcon3, InType_3) == 0x00000C, "Member 'ATCheatManager_ATDebugAddStateIcon3::InType_3' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddStateIcon3, InTime) == 0x000010, "Member 'ATCheatManager_ATDebugAddStateIcon3::InTime' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAddZOrb
// 0x0018 (0x0018 - 0x0000)
struct ATCheatManager_ATDebugAddZOrb final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAddZOrb) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugAddZOrb");
static_assert(sizeof(ATCheatManager_ATDebugAddZOrb) == 0x000018, "Wrong size on ATCheatManager_ATDebugAddZOrb");
static_assert(offsetof(ATCheatManager_ATDebugAddZOrb, Num) == 0x000000, "Member 'ATCheatManager_ATDebugAddZOrb::Num' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAddZOrb, Type) == 0x000008, "Member 'ATCheatManager_ATDebugAddZOrb::Type' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAndroidAssaultAreaActivate
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugAndroidAssaultAreaActivate final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAndroidAssaultAreaActivate) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAndroidAssaultAreaActivate");
static_assert(sizeof(ATCheatManager_ATDebugAndroidAssaultAreaActivate) == 0x000008, "Wrong size on ATCheatManager_ATDebugAndroidAssaultAreaActivate");
static_assert(offsetof(ATCheatManager_ATDebugAndroidAssaultAreaActivate, InName) == 0x000000, "Member 'ATCheatManager_ATDebugAndroidAssaultAreaActivate::InName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAndroidAssaultAreaDeactivate
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugAndroidAssaultAreaDeactivate final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAndroidAssaultAreaDeactivate) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAndroidAssaultAreaDeactivate");
static_assert(sizeof(ATCheatManager_ATDebugAndroidAssaultAreaDeactivate) == 0x000008, "Wrong size on ATCheatManager_ATDebugAndroidAssaultAreaDeactivate");
static_assert(offsetof(ATCheatManager_ATDebugAndroidAssaultAreaDeactivate, InName) == 0x000000, "Member 'ATCheatManager_ATDebugAndroidAssaultAreaDeactivate::InName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAndroidAssaultFinishDemoPointCheck
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck final
{
public:
	bool                                          bErrorOnly;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck");
static_assert(sizeof(ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck) == 0x000008, "Wrong size on ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck");
static_assert(offsetof(ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck, bErrorOnly) == 0x000000, "Member 'ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck::bErrorOnly' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck, DrawTime) == 0x000004, "Member 'ATCheatManager_ATDebugAndroidAssaultFinishDemoPointCheck::DrawTime' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAreaChangeTrainingForceOpenItem
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugAreaChangeTrainingForceOpenItem final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugAreaChangeTrainingForceOpenItem) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugAreaChangeTrainingForceOpenItem");
static_assert(sizeof(ATCheatManager_ATDebugAreaChangeTrainingForceOpenItem) == 0x000001, "Wrong size on ATCheatManager_ATDebugAreaChangeTrainingForceOpenItem");
static_assert(offsetof(ATCheatManager_ATDebugAreaChangeTrainingForceOpenItem, IsActive) == 0x000000, "Member 'ATCheatManager_ATDebugAreaChangeTrainingForceOpenItem::IsActive' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugAtrociousComplete
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugAtrociousComplete final
{
public:
	class FName                                   InLevelName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InPhase;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugAtrociousComplete) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugAtrociousComplete");
static_assert(sizeof(ATCheatManager_ATDebugAtrociousComplete) == 0x000010, "Wrong size on ATCheatManager_ATDebugAtrociousComplete");
static_assert(offsetof(ATCheatManager_ATDebugAtrociousComplete, InLevelName) == 0x000000, "Member 'ATCheatManager_ATDebugAtrociousComplete::InLevelName' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugAtrociousComplete, InPhase) == 0x000008, "Member 'ATCheatManager_ATDebugAtrociousComplete::InPhase' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugBannedTest
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugBannedTest final
{
public:
	int32                                         Op;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBanned;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InSkill;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugBannedTest) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugBannedTest");
static_assert(sizeof(ATCheatManager_ATDebugBannedTest) == 0x000010, "Wrong size on ATCheatManager_ATDebugBannedTest");
static_assert(offsetof(ATCheatManager_ATDebugBannedTest, Op) == 0x000000, "Member 'ATCheatManager_ATDebugBannedTest::Op' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugBannedTest, bBanned) == 0x000004, "Member 'ATCheatManager_ATDebugBannedTest::bBanned' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugBannedTest, InSkill) == 0x000008, "Member 'ATCheatManager_ATDebugBannedTest::InSkill' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugBeginQuest
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugBeginQuest final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseNo;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugBeginQuest) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugBeginQuest");
static_assert(sizeof(ATCheatManager_ATDebugBeginQuest) == 0x000010, "Wrong size on ATCheatManager_ATDebugBeginQuest");
static_assert(offsetof(ATCheatManager_ATDebugBeginQuest, QuestId) == 0x000000, "Member 'ATCheatManager_ATDebugBeginQuest::QuestId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugBeginQuest, PhaseNo) == 0x000008, "Member 'ATCheatManager_ATDebugBeginQuest::PhaseNo' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugBeginQuestDemo
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugBeginQuestDemo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugBeginQuestDemo) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugBeginQuestDemo");
static_assert(sizeof(ATCheatManager_ATDebugBeginQuestDemo) == 0x000008, "Wrong size on ATCheatManager_ATDebugBeginQuestDemo");
static_assert(offsetof(ATCheatManager_ATDebugBeginQuestDemo, ID) == 0x000000, "Member 'ATCheatManager_ATDebugBeginQuestDemo::ID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugBgmManagerTest
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugBgmManagerTest final
{
public:
	int32                                         TestCase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugBgmManagerTest) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugBgmManagerTest");
static_assert(sizeof(ATCheatManager_ATDebugBgmManagerTest) == 0x000004, "Wrong size on ATCheatManager_ATDebugBgmManagerTest");
static_assert(offsetof(ATCheatManager_ATDebugBgmManagerTest, TestCase) == 0x000000, "Member 'ATCheatManager_ATDebugBgmManagerTest::TestCase' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugChangeDlcOwnership
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugChangeDlcOwnership final
{
public:
	class FName                                   DlcCommonId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugChangeDlcOwnership) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugChangeDlcOwnership");
static_assert(sizeof(ATCheatManager_ATDebugChangeDlcOwnership) == 0x000010, "Wrong size on ATCheatManager_ATDebugChangeDlcOwnership");
static_assert(offsetof(ATCheatManager_ATDebugChangeDlcOwnership, DlcCommonId) == 0x000000, "Member 'ATCheatManager_ATDebugChangeDlcOwnership::DlcCommonId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugChangeDlcOwnership, bEnable) == 0x000008, "Member 'ATCheatManager_ATDebugChangeDlcOwnership::bEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugChangeDlcOwnershipAll
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugChangeDlcOwnershipAll final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugChangeDlcOwnershipAll) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugChangeDlcOwnershipAll");
static_assert(sizeof(ATCheatManager_ATDebugChangeDlcOwnershipAll) == 0x000001, "Wrong size on ATCheatManager_ATDebugChangeDlcOwnershipAll");
static_assert(offsetof(ATCheatManager_ATDebugChangeDlcOwnershipAll, bEnable) == 0x000000, "Member 'ATCheatManager_ATDebugChangeDlcOwnershipAll::bEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugChangerLevel
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugChangerLevel final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugChangerLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugChangerLevel");
static_assert(sizeof(ATCheatManager_ATDebugChangerLevel) == 0x000008, "Wrong size on ATCheatManager_ATDebugChangerLevel");
static_assert(offsetof(ATCheatManager_ATDebugChangerLevel, Tag) == 0x000000, "Member 'ATCheatManager_ATDebugChangerLevel::Tag' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCharaDamageRate
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugCharaDamageRate final
{
public:
	float                                         DamageRate;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartyIndex;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugCharaDamageRate) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCharaDamageRate");
static_assert(sizeof(ATCheatManager_ATDebugCharaDamageRate) == 0x000008, "Wrong size on ATCheatManager_ATDebugCharaDamageRate");
static_assert(offsetof(ATCheatManager_ATDebugCharaDamageRate, DamageRate) == 0x000000, "Member 'ATCheatManager_ATDebugCharaDamageRate::DamageRate' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCharaDamageRate, PartyIndex) == 0x000004, "Member 'ATCheatManager_ATDebugCharaDamageRate::PartyIndex' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCharaLifeRate
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugCharaLifeRate final
{
public:
	float                                         LifeRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartyIndex;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugCharaLifeRate) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCharaLifeRate");
static_assert(sizeof(ATCheatManager_ATDebugCharaLifeRate) == 0x000008, "Wrong size on ATCheatManager_ATDebugCharaLifeRate");
static_assert(offsetof(ATCheatManager_ATDebugCharaLifeRate, LifeRate) == 0x000000, "Member 'ATCheatManager_ATDebugCharaLifeRate::LifeRate' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCharaLifeRate, PartyIndex) == 0x000004, "Member 'ATCheatManager_ATDebugCharaLifeRate::PartyIndex' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCheckCurrentSubQuestIds
// 0x0020 (0x0020 - 0x0000)
struct ATCheatManager_ATDebugCheckCurrentSubQuestIds final
{
public:
	class FName                                   StartQuestId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPhaseNo;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EndQuestId;                                        // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndPhaseNo;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugCheckCurrentSubQuestIds) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCheckCurrentSubQuestIds");
static_assert(sizeof(ATCheatManager_ATDebugCheckCurrentSubQuestIds) == 0x000020, "Wrong size on ATCheatManager_ATDebugCheckCurrentSubQuestIds");
static_assert(offsetof(ATCheatManager_ATDebugCheckCurrentSubQuestIds, StartQuestId) == 0x000000, "Member 'ATCheatManager_ATDebugCheckCurrentSubQuestIds::StartQuestId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCheckCurrentSubQuestIds, StartPhaseNo) == 0x000008, "Member 'ATCheatManager_ATDebugCheckCurrentSubQuestIds::StartPhaseNo' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCheckCurrentSubQuestIds, EndQuestId) == 0x000010, "Member 'ATCheatManager_ATDebugCheckCurrentSubQuestIds::EndQuestId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCheckCurrentSubQuestIds, EndPhaseNo) == 0x000018, "Member 'ATCheatManager_ATDebugCheckCurrentSubQuestIds::EndPhaseNo' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCombineParts
// 0x0002 (0x0002 - 0x0000)
struct ATCheatManager_ATDebugCombineParts final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCombineParts) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugCombineParts");
static_assert(sizeof(ATCheatManager_ATDebugCombineParts) == 0x000002, "Wrong size on ATCheatManager_ATDebugCombineParts");
static_assert(offsetof(ATCheatManager_ATDebugCombineParts, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugCombineParts::Variation' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCombineParts, Form) == 0x000001, "Member 'ATCheatManager_ATDebugCombineParts::Form' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCombinePartsSupportLeft
// 0x0002 (0x0002 - 0x0000)
struct ATCheatManager_ATDebugCombinePartsSupportLeft final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCombinePartsSupportLeft) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugCombinePartsSupportLeft");
static_assert(sizeof(ATCheatManager_ATDebugCombinePartsSupportLeft) == 0x000002, "Wrong size on ATCheatManager_ATDebugCombinePartsSupportLeft");
static_assert(offsetof(ATCheatManager_ATDebugCombinePartsSupportLeft, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugCombinePartsSupportLeft::Variation' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCombinePartsSupportLeft, Form) == 0x000001, "Member 'ATCheatManager_ATDebugCombinePartsSupportLeft::Form' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCombinePartsSupportRight
// 0x0002 (0x0002 - 0x0000)
struct ATCheatManager_ATDebugCombinePartsSupportRight final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCombinePartsSupportRight) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugCombinePartsSupportRight");
static_assert(sizeof(ATCheatManager_ATDebugCombinePartsSupportRight) == 0x000002, "Wrong size on ATCheatManager_ATDebugCombinePartsSupportRight");
static_assert(offsetof(ATCheatManager_ATDebugCombinePartsSupportRight, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugCombinePartsSupportRight::Variation' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCombinePartsSupportRight, Form) == 0x000001, "Member 'ATCheatManager_ATDebugCombinePartsSupportRight::Form' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCombinePartsTarget
// 0x0002 (0x0002 - 0x0000)
struct ATCheatManager_ATDebugCombinePartsTarget final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Form;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCombinePartsTarget) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugCombinePartsTarget");
static_assert(sizeof(ATCheatManager_ATDebugCombinePartsTarget) == 0x000002, "Wrong size on ATCheatManager_ATDebugCombinePartsTarget");
static_assert(offsetof(ATCheatManager_ATDebugCombinePartsTarget, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugCombinePartsTarget::Variation' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCombinePartsTarget, Form) == 0x000001, "Member 'ATCheatManager_ATDebugCombinePartsTarget::Form' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCommandPaletteChangeActive
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugCommandPaletteChangeActive final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsOn;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCommandPaletteChangeActive) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCommandPaletteChangeActive");
static_assert(sizeof(ATCheatManager_ATDebugCommandPaletteChangeActive) == 0x000008, "Wrong size on ATCheatManager_ATDebugCommandPaletteChangeActive");
static_assert(offsetof(ATCheatManager_ATDebugCommandPaletteChangeActive, Idx) == 0x000000, "Member 'ATCheatManager_ATDebugCommandPaletteChangeActive::Idx' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCommandPaletteChangeActive, IsOn) == 0x000004, "Member 'ATCheatManager_ATDebugCommandPaletteChangeActive::IsOn' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCommandPaletteCoopSkill
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugCommandPaletteCoopSkill final
{
public:
	int32                                         IsOn;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCommandPaletteCoopSkill) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCommandPaletteCoopSkill");
static_assert(sizeof(ATCheatManager_ATDebugCommandPaletteCoopSkill) == 0x000004, "Wrong size on ATCheatManager_ATDebugCommandPaletteCoopSkill");
static_assert(offsetof(ATCheatManager_ATDebugCommandPaletteCoopSkill, IsOn) == 0x000000, "Member 'ATCheatManager_ATDebugCommandPaletteCoopSkill::IsOn' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCommCalc
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugCommCalc final
{
public:
	int32                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCommCalc) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCommCalc");
static_assert(sizeof(ATCheatManager_ATDebugCommCalc) == 0x000008, "Wrong size on ATCheatManager_ATDebugCommCalc");
static_assert(offsetof(ATCheatManager_ATDebugCommCalc, Val) == 0x000000, "Member 'ATCheatManager_ATDebugCommCalc::Val' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCommCalc, Rate) == 0x000004, "Member 'ATCheatManager_ATDebugCommCalc::Rate' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCommunityBoardEdit
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugCommunityBoardEdit final
{
public:
	int32                                         Cate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCommunityBoardEdit) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCommunityBoardEdit");
static_assert(sizeof(ATCheatManager_ATDebugCommunityBoardEdit) == 0x000004, "Wrong size on ATCheatManager_ATDebugCommunityBoardEdit");
static_assert(offsetof(ATCheatManager_ATDebugCommunityBoardEdit, Cate) == 0x000000, "Member 'ATCheatManager_ATDebugCommunityBoardEdit::Cate' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCommunityCTest
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugCommunityCTest final
{
public:
	int32                                         TestId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCommunityCTest) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCommunityCTest");
static_assert(sizeof(ATCheatManager_ATDebugCommunityCTest) == 0x000004, "Wrong size on ATCheatManager_ATDebugCommunityCTest");
static_assert(offsetof(ATCheatManager_ATDebugCommunityCTest, TestId) == 0x000000, "Member 'ATCheatManager_ATDebugCommunityCTest::TestId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCommunitySkill
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugCommunitySkill final
{
public:
	int32                                         Category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lv;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCommunitySkill) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCommunitySkill");
static_assert(sizeof(ATCheatManager_ATDebugCommunitySkill) == 0x000008, "Wrong size on ATCheatManager_ATDebugCommunitySkill");
static_assert(offsetof(ATCheatManager_ATDebugCommunitySkill, Category) == 0x000000, "Member 'ATCheatManager_ATDebugCommunitySkill::Category' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugCommunitySkill, Lv) == 0x000004, "Member 'ATCheatManager_ATDebugCommunitySkill::Lv' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugCompleteQuest
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugCompleteQuest final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugCompleteQuest) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugCompleteQuest");
static_assert(sizeof(ATCheatManager_ATDebugCompleteQuest) == 0x000008, "Wrong size on ATCheatManager_ATDebugCompleteQuest");
static_assert(offsetof(ATCheatManager_ATDebugCompleteQuest, QuestId) == 0x000000, "Member 'ATCheatManager_ATDebugCompleteQuest::QuestId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugDataInstallProgress
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugDataInstallProgress final
{
public:
	int32                                         InProgress;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugDataInstallProgress) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugDataInstallProgress");
static_assert(sizeof(ATCheatManager_ATDebugDataInstallProgress) == 0x000004, "Wrong size on ATCheatManager_ATDebugDataInstallProgress");
static_assert(offsetof(ATCheatManager_ATDebugDataInstallProgress, InProgress) == 0x000000, "Member 'ATCheatManager_ATDebugDataInstallProgress::InProgress' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugDelaySublevelActivation
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugDelaySublevelActivation final
{
public:
	bool                                          bDelay;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugDelaySublevelActivation) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugDelaySublevelActivation");
static_assert(sizeof(ATCheatManager_ATDebugDelaySublevelActivation) == 0x000001, "Wrong size on ATCheatManager_ATDebugDelaySublevelActivation");
static_assert(offsetof(ATCheatManager_ATDebugDelaySublevelActivation, bDelay) == 0x000000, "Member 'ATCheatManager_ATDebugDelaySublevelActivation::bDelay' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugDeleteSaveData
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugDeleteSaveData final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugDeleteSaveData) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugDeleteSaveData");
static_assert(sizeof(ATCheatManager_ATDebugDeleteSaveData) == 0x000001, "Wrong size on ATCheatManager_ATDebugDeleteSaveData");
static_assert(offsetof(ATCheatManager_ATDebugDeleteSaveData, Slot) == 0x000000, "Member 'ATCheatManager_ATDebugDeleteSaveData::Slot' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugDisableNpcTalk
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugDisableNpcTalk final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugDisableNpcTalk) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugDisableNpcTalk");
static_assert(sizeof(ATCheatManager_ATDebugDisableNpcTalk) == 0x000001, "Wrong size on ATCheatManager_ATDebugDisableNpcTalk");
static_assert(offsetof(ATCheatManager_ATDebugDisableNpcTalk, bDisable) == 0x000000, "Member 'ATCheatManager_ATDebugDisableNpcTalk::bDisable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugDisableTickUI
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugDisableTickUI final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugDisableTickUI) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugDisableTickUI");
static_assert(sizeof(ATCheatManager_ATDebugDisableTickUI) == 0x000001, "Wrong size on ATCheatManager_ATDebugDisableTickUI");
static_assert(offsetof(ATCheatManager_ATDebugDisableTickUI, bDisable) == 0x000000, "Member 'ATCheatManager_ATDebugDisableTickUI::bDisable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugEnabledUniquenessObserver
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugEnabledUniquenessObserver final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugEnabledUniquenessObserver) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugEnabledUniquenessObserver");
static_assert(sizeof(ATCheatManager_ATDebugEnabledUniquenessObserver) == 0x000001, "Wrong size on ATCheatManager_ATDebugEnabledUniquenessObserver");
static_assert(offsetof(ATCheatManager_ATDebugEnabledUniquenessObserver, bEnabled) == 0x000000, "Member 'ATCheatManager_ATDebugEnabledUniquenessObserver::bEnabled' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugEnableQuestErrorLog
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugEnableQuestErrorLog final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugEnableQuestErrorLog) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugEnableQuestErrorLog");
static_assert(sizeof(ATCheatManager_ATDebugEnableQuestErrorLog) == 0x000001, "Wrong size on ATCheatManager_ATDebugEnableQuestErrorLog");
static_assert(offsetof(ATCheatManager_ATDebugEnableQuestErrorLog, bEnable) == 0x000000, "Member 'ATCheatManager_ATDebugEnableQuestErrorLog::bEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugEnableQuestLog
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugEnableQuestLog final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugEnableQuestLog) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugEnableQuestLog");
static_assert(sizeof(ATCheatManager_ATDebugEnableQuestLog) == 0x000001, "Wrong size on ATCheatManager_ATDebugEnableQuestLog");
static_assert(offsetof(ATCheatManager_ATDebugEnableQuestLog, bEnable) == 0x000000, "Member 'ATCheatManager_ATDebugEnableQuestLog::bEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugEnableQuestLogList
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugEnableQuestLogList final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugEnableQuestLogList) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugEnableQuestLogList");
static_assert(sizeof(ATCheatManager_ATDebugEnableQuestLogList) == 0x000001, "Wrong size on ATCheatManager_ATDebugEnableQuestLogList");
static_assert(offsetof(ATCheatManager_ATDebugEnableQuestLogList, bEnable) == 0x000000, "Member 'ATCheatManager_ATDebugEnableQuestLogList::bEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugEnableTimemachineMode
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugEnableTimemachineMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugEnableTimemachineMode) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugEnableTimemachineMode");
static_assert(sizeof(ATCheatManager_ATDebugEnableTimemachineMode) == 0x000001, "Wrong size on ATCheatManager_ATDebugEnableTimemachineMode");
static_assert(offsetof(ATCheatManager_ATDebugEnableTimemachineMode, bEnable) == 0x000000, "Member 'ATCheatManager_ATDebugEnableTimemachineMode::bEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugEnemyTeamBreakDamage
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugEnemyTeamBreakDamage final
{
public:
	float                                         BreakDamage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugEnemyTeamBreakDamage) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugEnemyTeamBreakDamage");
static_assert(sizeof(ATCheatManager_ATDebugEnemyTeamBreakDamage) == 0x000004, "Wrong size on ATCheatManager_ATDebugEnemyTeamBreakDamage");
static_assert(offsetof(ATCheatManager_ATDebugEnemyTeamBreakDamage, BreakDamage) == 0x000000, "Member 'ATCheatManager_ATDebugEnemyTeamBreakDamage::BreakDamage' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugEntryBuff
// 0x0020 (0x0020 - 0x0000)
struct ATCheatManager_ATDebugEntryBuff final
{
public:
	int32                                         BuffType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BuffName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyIndex;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MembetType;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugEntryBuff) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugEntryBuff");
static_assert(sizeof(ATCheatManager_ATDebugEntryBuff) == 0x000020, "Wrong size on ATCheatManager_ATDebugEntryBuff");
static_assert(offsetof(ATCheatManager_ATDebugEntryBuff, BuffType) == 0x000000, "Member 'ATCheatManager_ATDebugEntryBuff::BuffType' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugEntryBuff, BuffName) == 0x000008, "Member 'ATCheatManager_ATDebugEntryBuff::BuffName' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugEntryBuff, Time) == 0x000010, "Member 'ATCheatManager_ATDebugEntryBuff::Time' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugEntryBuff, PartyIndex) == 0x000014, "Member 'ATCheatManager_ATDebugEntryBuff::PartyIndex' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugEntryBuff, MembetType) == 0x000018, "Member 'ATCheatManager_ATDebugEntryBuff::MembetType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugEulaCheck
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugEulaCheck final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugEulaCheck) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugEulaCheck");
static_assert(sizeof(ATCheatManager_ATDebugEulaCheck) == 0x000001, "Wrong size on ATCheatManager_ATDebugEulaCheck");
static_assert(offsetof(ATCheatManager_ATDebugEulaCheck, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugEulaCheck::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugExterminationChangeLevel
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugExterminationChangeLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugExterminationChangeLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugExterminationChangeLevel");
static_assert(sizeof(ATCheatManager_ATDebugExterminationChangeLevel) == 0x000004, "Wrong size on ATCheatManager_ATDebugExterminationChangeLevel");
static_assert(offsetof(ATCheatManager_ATDebugExterminationChangeLevel, Level) == 0x000000, "Member 'ATCheatManager_ATDebugExterminationChangeLevel::Level' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugExterminationDirectDamage
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugExterminationDirectDamage final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugExterminationDirectDamage) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugExterminationDirectDamage");
static_assert(sizeof(ATCheatManager_ATDebugExterminationDirectDamage) == 0x000001, "Wrong size on ATCheatManager_ATDebugExterminationDirectDamage");
static_assert(offsetof(ATCheatManager_ATDebugExterminationDirectDamage, IsActive) == 0x000000, "Member 'ATCheatManager_ATDebugExterminationDirectDamage::IsActive' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFacialChange
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugFacialChange final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFacialChange) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugFacialChange");
static_assert(sizeof(ATCheatManager_ATDebugFacialChange) == 0x000001, "Wrong size on ATCheatManager_ATDebugFacialChange");
static_assert(offsetof(ATCheatManager_ATDebugFacialChange, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugFacialChange::Variation' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFacialChangeSupportLeft
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugFacialChangeSupportLeft final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFacialChangeSupportLeft) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugFacialChangeSupportLeft");
static_assert(sizeof(ATCheatManager_ATDebugFacialChangeSupportLeft) == 0x000001, "Wrong size on ATCheatManager_ATDebugFacialChangeSupportLeft");
static_assert(offsetof(ATCheatManager_ATDebugFacialChangeSupportLeft, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugFacialChangeSupportLeft::Variation' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFacialChangeSupportRight
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugFacialChangeSupportRight final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFacialChangeSupportRight) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugFacialChangeSupportRight");
static_assert(sizeof(ATCheatManager_ATDebugFacialChangeSupportRight) == 0x000001, "Wrong size on ATCheatManager_ATDebugFacialChangeSupportRight");
static_assert(offsetof(ATCheatManager_ATDebugFacialChangeSupportRight, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugFacialChangeSupportRight::Variation' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFacialMotionCheckBegin
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugFacialMotionCheckBegin final
{
public:
	uint8                                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFacialMotionCheckBegin) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugFacialMotionCheckBegin");
static_assert(sizeof(ATCheatManager_ATDebugFacialMotionCheckBegin) == 0x000001, "Wrong size on ATCheatManager_ATDebugFacialMotionCheckBegin");
static_assert(offsetof(ATCheatManager_ATDebugFacialMotionCheckBegin, Type) == 0x000000, "Member 'ATCheatManager_ATDebugFacialMotionCheckBegin::Type' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFadeBugCheck
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugFadeBugCheck final
{
public:
	bool                                          Check;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFadeBugCheck) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugFadeBugCheck");
static_assert(sizeof(ATCheatManager_ATDebugFadeBugCheck) == 0x000001, "Wrong size on ATCheatManager_ATDebugFadeBugCheck");
static_assert(offsetof(ATCheatManager_ATDebugFadeBugCheck, Check) == 0x000000, "Member 'ATCheatManager_ATDebugFadeBugCheck::Check' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFadeOut
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugFadeOut final
{
public:
	int32                                         InFadeType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFadeOut) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugFadeOut");
static_assert(sizeof(ATCheatManager_ATDebugFadeOut) == 0x000004, "Wrong size on ATCheatManager_ATDebugFadeOut");
static_assert(offsetof(ATCheatManager_ATDebugFadeOut, InFadeType) == 0x000000, "Member 'ATCheatManager_ATDebugFadeOut::InFadeType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFieldTalkWin
// 0x0028 (0x0028 - 0x0000)
struct ATCheatManager_ATDebugFieldTalkWin final
{
public:
	class FString                                 Speaker;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          buttonVisible;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugFieldTalkWin) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugFieldTalkWin");
static_assert(sizeof(ATCheatManager_ATDebugFieldTalkWin) == 0x000028, "Wrong size on ATCheatManager_ATDebugFieldTalkWin");
static_assert(offsetof(ATCheatManager_ATDebugFieldTalkWin, Speaker) == 0x000000, "Member 'ATCheatManager_ATDebugFieldTalkWin::Speaker' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugFieldTalkWin, Message) == 0x000010, "Member 'ATCheatManager_ATDebugFieldTalkWin::Message' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugFieldTalkWin, buttonVisible) == 0x000020, "Member 'ATCheatManager_ATDebugFieldTalkWin::buttonVisible' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFixedRandomBGM
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugFixedRandomBGM final
{
public:
	int32                                         bgmID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFixedRandomBGM) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugFixedRandomBGM");
static_assert(sizeof(ATCheatManager_ATDebugFixedRandomBGM) == 0x000004, "Wrong size on ATCheatManager_ATDebugFixedRandomBGM");
static_assert(offsetof(ATCheatManager_ATDebugFixedRandomBGM, bgmID) == 0x000000, "Member 'ATCheatManager_ATDebugFixedRandomBGM::bgmID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFormChange
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugFormChange final
{
public:
	uint8                                         Form;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFormChange) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugFormChange");
static_assert(sizeof(ATCheatManager_ATDebugFormChange) == 0x000001, "Wrong size on ATCheatManager_ATDebugFormChange");
static_assert(offsetof(ATCheatManager_ATDebugFormChange, Form) == 0x000000, "Member 'ATCheatManager_ATDebugFormChange::Form' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFormChangeSupportLeft
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugFormChangeSupportLeft final
{
public:
	uint8                                         Form;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFormChangeSupportLeft) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugFormChangeSupportLeft");
static_assert(sizeof(ATCheatManager_ATDebugFormChangeSupportLeft) == 0x000001, "Wrong size on ATCheatManager_ATDebugFormChangeSupportLeft");
static_assert(offsetof(ATCheatManager_ATDebugFormChangeSupportLeft, Form) == 0x000000, "Member 'ATCheatManager_ATDebugFormChangeSupportLeft::Form' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugFormChangeSupportRight
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugFormChangeSupportRight final
{
public:
	uint8                                         Form;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugFormChangeSupportRight) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugFormChangeSupportRight");
static_assert(sizeof(ATCheatManager_ATDebugFormChangeSupportRight) == 0x000001, "Wrong size on ATCheatManager_ATDebugFormChangeSupportRight");
static_assert(offsetof(ATCheatManager_ATDebugFormChangeSupportRight, Form) == 0x000000, "Member 'ATCheatManager_ATDebugFormChangeSupportRight::Form' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugGeneralQuestDemo
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugGeneralQuestDemo final
{
public:
	class FName                                   DirectionId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugGeneralQuestDemo) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugGeneralQuestDemo");
static_assert(sizeof(ATCheatManager_ATDebugGeneralQuestDemo) == 0x000010, "Wrong size on ATCheatManager_ATDebugGeneralQuestDemo");
static_assert(offsetof(ATCheatManager_ATDebugGeneralQuestDemo, DirectionId) == 0x000000, "Member 'ATCheatManager_ATDebugGeneralQuestDemo::DirectionId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugGeneralQuestDemo, bEnabled) == 0x000008, "Member 'ATCheatManager_ATDebugGeneralQuestDemo::bEnabled' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugGetEmbList
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugGetEmbList final
{
public:
	int32                                         InNum;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugGetEmbList) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugGetEmbList");
static_assert(sizeof(ATCheatManager_ATDebugGetEmbList) == 0x000004, "Wrong size on ATCheatManager_ATDebugGetEmbList");
static_assert(offsetof(ATCheatManager_ATDebugGetEmbList, InNum) == 0x000000, "Member 'ATCheatManager_ATDebugGetEmbList::InNum' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugGetMissionProgressMessage
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugGetMissionProgressMessage final
{
public:
	class FName                                   TargetMissionId;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugGetMissionProgressMessage) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugGetMissionProgressMessage");
static_assert(sizeof(ATCheatManager_ATDebugGetMissionProgressMessage) == 0x000008, "Wrong size on ATCheatManager_ATDebugGetMissionProgressMessage");
static_assert(offsetof(ATCheatManager_ATDebugGetMissionProgressMessage, TargetMissionId) == 0x000000, "Member 'ATCheatManager_ATDebugGetMissionProgressMessage::TargetMissionId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugGiveQuestExp
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugGiveQuestExp final
{
public:
	int32                                         Exp;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugGiveQuestExp) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugGiveQuestExp");
static_assert(sizeof(ATCheatManager_ATDebugGiveQuestExp) == 0x000004, "Wrong size on ATCheatManager_ATDebugGiveQuestExp");
static_assert(offsetof(ATCheatManager_ATDebugGiveQuestExp, Exp) == 0x000000, "Member 'ATCheatManager_ATDebugGiveQuestExp::Exp' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugGiveQuestReward
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugGiveQuestReward final
{
public:
	class FName                                   RewardId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugGiveQuestReward) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugGiveQuestReward");
static_assert(sizeof(ATCheatManager_ATDebugGiveQuestReward) == 0x000008, "Wrong size on ATCheatManager_ATDebugGiveQuestReward");
static_assert(offsetof(ATCheatManager_ATDebugGiveQuestReward, RewardId) == 0x000000, "Member 'ATCheatManager_ATDebugGiveQuestReward::RewardId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugHiddenInGame
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugHiddenInGame final
{
public:
	class FName                                   TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugHiddenInGame) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugHiddenInGame");
static_assert(sizeof(ATCheatManager_ATDebugHiddenInGame) == 0x000010, "Wrong size on ATCheatManager_ATDebugHiddenInGame");
static_assert(offsetof(ATCheatManager_ATDebugHiddenInGame, TargetCharacter) == 0x000000, "Member 'ATCheatManager_ATDebugHiddenInGame::TargetCharacter' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugHiddenInGame, bHidden) == 0x000008, "Member 'ATCheatManager_ATDebugHiddenInGame::bHidden' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugHideUI
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugHideUI final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugHideUI) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugHideUI");
static_assert(sizeof(ATCheatManager_ATDebugHideUI) == 0x000001, "Wrong size on ATCheatManager_ATDebugHideUI");
static_assert(offsetof(ATCheatManager_ATDebugHideUI, bHidden) == 0x000000, "Member 'ATCheatManager_ATDebugHideUI::bHidden' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugIncreaseCommunityLevel
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugIncreaseCommunityLevel final
{
public:
	int32                                         Category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugIncreaseCommunityLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugIncreaseCommunityLevel");
static_assert(sizeof(ATCheatManager_ATDebugIncreaseCommunityLevel) == 0x000008, "Wrong size on ATCheatManager_ATDebugIncreaseCommunityLevel");
static_assert(offsetof(ATCheatManager_ATDebugIncreaseCommunityLevel, Category) == 0x000000, "Member 'ATCheatManager_ATDebugIncreaseCommunityLevel::Category' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugIncreaseCommunityLevel, Value) == 0x000004, "Member 'ATCheatManager_ATDebugIncreaseCommunityLevel::Value' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugItemAdd
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugItemAdd final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddNum;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugItemAdd) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugItemAdd");
static_assert(sizeof(ATCheatManager_ATDebugItemAdd) == 0x000010, "Wrong size on ATCheatManager_ATDebugItemAdd");
static_assert(offsetof(ATCheatManager_ATDebugItemAdd, ItemId) == 0x000000, "Member 'ATCheatManager_ATDebugItemAdd::ItemId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugItemAdd, AddNum) == 0x000008, "Member 'ATCheatManager_ATDebugItemAdd::AddNum' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugLevelUp
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugLevelUp final
{
public:
	uint8                                         PartyIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugLevelUp) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugLevelUp");
static_assert(sizeof(ATCheatManager_ATDebugLevelUp) == 0x000001, "Wrong size on ATCheatManager_ATDebugLevelUp");
static_assert(offsetof(ATCheatManager_ATDebugLevelUp, PartyIndex) == 0x000000, "Member 'ATCheatManager_ATDebugLevelUp::PartyIndex' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugLipSyncTime
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugLipSyncTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugLipSyncTime) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugLipSyncTime");
static_assert(sizeof(ATCheatManager_ATDebugLipSyncTime) == 0x000004, "Wrong size on ATCheatManager_ATDebugLipSyncTime");
static_assert(offsetof(ATCheatManager_ATDebugLipSyncTime, Time) == 0x000000, "Member 'ATCheatManager_ATDebugLipSyncTime::Time' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugLoadRandomPadKeyWeight
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugLoadRandomPadKeyWeight final
{
public:
	class FString                                 InPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugLoadRandomPadKeyWeight) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugLoadRandomPadKeyWeight");
static_assert(sizeof(ATCheatManager_ATDebugLoadRandomPadKeyWeight) == 0x000010, "Wrong size on ATCheatManager_ATDebugLoadRandomPadKeyWeight");
static_assert(offsetof(ATCheatManager_ATDebugLoadRandomPadKeyWeight, InPath) == 0x000000, "Member 'ATCheatManager_ATDebugLoadRandomPadKeyWeight::InPath' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugLookAtInformation
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugLookAtInformation final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugLookAtInformation) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugLookAtInformation");
static_assert(sizeof(ATCheatManager_ATDebugLookAtInformation) == 0x000010, "Wrong size on ATCheatManager_ATDebugLookAtInformation");
static_assert(offsetof(ATCheatManager_ATDebugLookAtInformation, ActorName) == 0x000000, "Member 'ATCheatManager_ATDebugLookAtInformation::ActorName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugMapMove
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugMapMove final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugMapMove) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugMapMove");
static_assert(sizeof(ATCheatManager_ATDebugMapMove) == 0x000008, "Wrong size on ATCheatManager_ATDebugMapMove");
static_assert(offsetof(ATCheatManager_ATDebugMapMove, MapName) == 0x000000, "Member 'ATCheatManager_ATDebugMapMove::MapName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugMessageCheck
// 0x0018 (0x0018 - 0x0000)
struct ATCheatManager_ATDebugMessageCheck final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DummyString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugMessageCheck) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugMessageCheck");
static_assert(sizeof(ATCheatManager_ATDebugMessageCheck) == 0x000018, "Wrong size on ATCheatManager_ATDebugMessageCheck");
static_assert(offsetof(ATCheatManager_ATDebugMessageCheck, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugMessageCheck::IsEnable' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugMessageCheck, DummyString) == 0x000008, "Member 'ATCheatManager_ATDebugMessageCheck::DummyString' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugMessageStringIdCheck
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugMessageStringIdCheck final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugMessageStringIdCheck) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugMessageStringIdCheck");
static_assert(sizeof(ATCheatManager_ATDebugMessageStringIdCheck) == 0x000001, "Wrong size on ATCheatManager_ATDebugMessageStringIdCheck");
static_assert(offsetof(ATCheatManager_ATDebugMessageStringIdCheck, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugMessageStringIdCheck::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugMiniGamePop
// 0x0028 (0x0028 - 0x0000)
struct ATCheatManager_ATDebugMiniGamePop final
{
public:
	int32                                         StartOrEnd;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InTop;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InBottom;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugMiniGamePop) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugMiniGamePop");
static_assert(sizeof(ATCheatManager_ATDebugMiniGamePop) == 0x000028, "Wrong size on ATCheatManager_ATDebugMiniGamePop");
static_assert(offsetof(ATCheatManager_ATDebugMiniGamePop, StartOrEnd) == 0x000000, "Member 'ATCheatManager_ATDebugMiniGamePop::StartOrEnd' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugMiniGamePop, InTop) == 0x000008, "Member 'ATCheatManager_ATDebugMiniGamePop::InTop' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugMiniGamePop, InBottom) == 0x000018, "Member 'ATCheatManager_ATDebugMiniGamePop::InBottom' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugModifySpGaugeAppearance
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugModifySpGaugeAppearance final
{
public:
	ESpGaugeOverlayAppearance                     InAppearance;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugModifySpGaugeAppearance) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugModifySpGaugeAppearance");
static_assert(sizeof(ATCheatManager_ATDebugModifySpGaugeAppearance) == 0x000001, "Wrong size on ATCheatManager_ATDebugModifySpGaugeAppearance");
static_assert(offsetof(ATCheatManager_ATDebugModifySpGaugeAppearance, InAppearance) == 0x000000, "Member 'ATCheatManager_ATDebugModifySpGaugeAppearance::InAppearance' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugModifySpGaugeValue
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugModifySpGaugeValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInMakeVisible;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugModifySpGaugeValue) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugModifySpGaugeValue");
static_assert(sizeof(ATCheatManager_ATDebugModifySpGaugeValue) == 0x000008, "Wrong size on ATCheatManager_ATDebugModifySpGaugeValue");
static_assert(offsetof(ATCheatManager_ATDebugModifySpGaugeValue, InValue) == 0x000000, "Member 'ATCheatManager_ATDebugModifySpGaugeValue::InValue' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugModifySpGaugeValue, bInMakeVisible) == 0x000004, "Member 'ATCheatManager_ATDebugModifySpGaugeValue::bInMakeVisible' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugMotionCheck
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugMotionCheck final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugMotionCheck) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugMotionCheck");
static_assert(sizeof(ATCheatManager_ATDebugMotionCheck) == 0x000010, "Wrong size on ATCheatManager_ATDebugMotionCheck");
static_assert(offsetof(ATCheatManager_ATDebugMotionCheck, Name_0) == 0x000000, "Member 'ATCheatManager_ATDebugMotionCheck::Name_0' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugNameUiChangeLarge
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugNameUiChangeLarge final
{
public:
	bool                                          IsLarge;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugNameUiChangeLarge) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugNameUiChangeLarge");
static_assert(sizeof(ATCheatManager_ATDebugNameUiChangeLarge) == 0x000001, "Wrong size on ATCheatManager_ATDebugNameUiChangeLarge");
static_assert(offsetof(ATCheatManager_ATDebugNameUiChangeLarge, IsLarge) == 0x000000, "Member 'ATCheatManager_ATDebugNameUiChangeLarge::IsLarge' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugNavigateQuestId
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugNavigateQuestId final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugNavigateQuestId) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugNavigateQuestId");
static_assert(sizeof(ATCheatManager_ATDebugNavigateQuestId) == 0x000008, "Wrong size on ATCheatManager_ATDebugNavigateQuestId");
static_assert(offsetof(ATCheatManager_ATDebugNavigateQuestId, QuestId) == 0x000000, "Member 'ATCheatManager_ATDebugNavigateQuestId::QuestId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugOpenGameWindow
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugOpenGameWindow final
{
public:
	class FName                                   StringID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugOpenGameWindow) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugOpenGameWindow");
static_assert(sizeof(ATCheatManager_ATDebugOpenGameWindow) == 0x000008, "Wrong size on ATCheatManager_ATDebugOpenGameWindow");
static_assert(offsetof(ATCheatManager_ATDebugOpenGameWindow, StringID) == 0x000000, "Member 'ATCheatManager_ATDebugOpenGameWindow::StringID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugOpenGameWindowByIndex
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugOpenGameWindowByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugOpenGameWindowByIndex) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugOpenGameWindowByIndex");
static_assert(sizeof(ATCheatManager_ATDebugOpenGameWindowByIndex) == 0x000004, "Wrong size on ATCheatManager_ATDebugOpenGameWindowByIndex");
static_assert(offsetof(ATCheatManager_ATDebugOpenGameWindowByIndex, Index_0) == 0x000000, "Member 'ATCheatManager_ATDebugOpenGameWindowByIndex::Index_0' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugOpenTips
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugOpenTips final
{
public:
	class FName                                   InTipsID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugOpenTips) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugOpenTips");
static_assert(sizeof(ATCheatManager_ATDebugOpenTips) == 0x000008, "Wrong size on ATCheatManager_ATDebugOpenTips");
static_assert(offsetof(ATCheatManager_ATDebugOpenTips, InTipsID) == 0x000000, "Member 'ATCheatManager_ATDebugOpenTips::InTipsID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugOutputQuestCompletedCount
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugOutputQuestCompletedCount final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugOutputQuestCompletedCount) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugOutputQuestCompletedCount");
static_assert(sizeof(ATCheatManager_ATDebugOutputQuestCompletedCount) == 0x000008, "Wrong size on ATCheatManager_ATDebugOutputQuestCompletedCount");
static_assert(offsetof(ATCheatManager_ATDebugOutputQuestCompletedCount, QuestId) == 0x000000, "Member 'ATCheatManager_ATDebugOutputQuestCompletedCount::QuestId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPatchNoticeCheck
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugPatchNoticeCheck final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPatchNoticeCheck) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugPatchNoticeCheck");
static_assert(sizeof(ATCheatManager_ATDebugPatchNoticeCheck) == 0x000001, "Wrong size on ATCheatManager_ATDebugPatchNoticeCheck");
static_assert(offsetof(ATCheatManager_ATDebugPatchNoticeCheck, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugPatchNoticeCheck::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayBattleCutin
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugPlayBattleCutin final
{
public:
	int32                                         CutinType;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayBattleCutin) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugPlayBattleCutin");
static_assert(sizeof(ATCheatManager_ATDebugPlayBattleCutin) == 0x000004, "Wrong size on ATCheatManager_ATDebugPlayBattleCutin");
static_assert(offsetof(ATCheatManager_ATDebugPlayBattleCutin, CutinType) == 0x000000, "Member 'ATCheatManager_ATDebugPlayBattleCutin::CutinType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayBGMFromBGMPlayer
// 0x0002 (0x0002 - 0x0000)
struct ATCheatManager_ATDebugPlayBGMFromBGMPlayer final
{
public:
	EBGMCategory                                  bgmType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBgmCode                                      bgmID;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayBGMFromBGMPlayer) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugPlayBGMFromBGMPlayer");
static_assert(sizeof(ATCheatManager_ATDebugPlayBGMFromBGMPlayer) == 0x000002, "Wrong size on ATCheatManager_ATDebugPlayBGMFromBGMPlayer");
static_assert(offsetof(ATCheatManager_ATDebugPlayBGMFromBGMPlayer, bgmType) == 0x000000, "Member 'ATCheatManager_ATDebugPlayBGMFromBGMPlayer::bgmType' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugPlayBGMFromBGMPlayer, bgmID) == 0x000001, "Member 'ATCheatManager_ATDebugPlayBGMFromBGMPlayer::bgmID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayDemo
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugPlayDemo final
{
public:
	class FName                                   InDemoName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayDemo) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugPlayDemo");
static_assert(sizeof(ATCheatManager_ATDebugPlayDemo) == 0x000008, "Wrong size on ATCheatManager_ATDebugPlayDemo");
static_assert(offsetof(ATCheatManager_ATDebugPlayDemo, InDemoName) == 0x000000, "Member 'ATCheatManager_ATDebugPlayDemo::InDemoName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayDemoAndLoadStreaming
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugPlayDemoAndLoadStreaming final
{
public:
	class FName                                   InDemoName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayDemoAndLoadStreaming) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugPlayDemoAndLoadStreaming");
static_assert(sizeof(ATCheatManager_ATDebugPlayDemoAndLoadStreaming) == 0x000008, "Wrong size on ATCheatManager_ATDebugPlayDemoAndLoadStreaming");
static_assert(offsetof(ATCheatManager_ATDebugPlayDemoAndLoadStreaming, InDemoName) == 0x000000, "Member 'ATCheatManager_ATDebugPlayDemoAndLoadStreaming::InDemoName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayDemoAndProgressSet
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugPlayDemoAndProgressSet final
{
public:
	class FName                                   InDemoName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InProgressId;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayDemoAndProgressSet) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugPlayDemoAndProgressSet");
static_assert(sizeof(ATCheatManager_ATDebugPlayDemoAndProgressSet) == 0x000010, "Wrong size on ATCheatManager_ATDebugPlayDemoAndProgressSet");
static_assert(offsetof(ATCheatManager_ATDebugPlayDemoAndProgressSet, InDemoName) == 0x000000, "Member 'ATCheatManager_ATDebugPlayDemoAndProgressSet::InDemoName' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugPlayDemoAndProgressSet, InProgressId) == 0x000008, "Member 'ATCheatManager_ATDebugPlayDemoAndProgressSet::InProgressId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayerHidden
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugPlayerHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayerHidden) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugPlayerHidden");
static_assert(sizeof(ATCheatManager_ATDebugPlayerHidden) == 0x000001, "Wrong size on ATCheatManager_ATDebugPlayerHidden");
static_assert(offsetof(ATCheatManager_ATDebugPlayerHidden, bHidden) == 0x000000, "Member 'ATCheatManager_ATDebugPlayerHidden::bHidden' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugPlayerLevel final
{
public:
	float                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayerLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugPlayerLevel");
static_assert(sizeof(ATCheatManager_ATDebugPlayerLevel) == 0x000004, "Wrong size on ATCheatManager_ATDebugPlayerLevel");
static_assert(offsetof(ATCheatManager_ATDebugPlayerLevel, Level) == 0x000000, "Member 'ATCheatManager_ATDebugPlayerLevel::Level' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayerTeamBreakDamage
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugPlayerTeamBreakDamage final
{
public:
	float                                         BreakDamage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayerTeamBreakDamage) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugPlayerTeamBreakDamage");
static_assert(sizeof(ATCheatManager_ATDebugPlayerTeamBreakDamage) == 0x000004, "Wrong size on ATCheatManager_ATDebugPlayerTeamBreakDamage");
static_assert(offsetof(ATCheatManager_ATDebugPlayerTeamBreakDamage, BreakDamage) == 0x000000, "Member 'ATCheatManager_ATDebugPlayerTeamBreakDamage::BreakDamage' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayQuestDirection
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugPlayQuestDirection final
{
public:
	class FName                                   FindName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayQuestDirection) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugPlayQuestDirection");
static_assert(sizeof(ATCheatManager_ATDebugPlayQuestDirection) == 0x000008, "Wrong size on ATCheatManager_ATDebugPlayQuestDirection");
static_assert(offsetof(ATCheatManager_ATDebugPlayQuestDirection, FindName) == 0x000000, "Member 'ATCheatManager_ATDebugPlayQuestDirection::FindName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayTalkMontage
// 0x0020 (0x0020 - 0x0000)
struct ATCheatManager_ATDebugPlayTalkMontage final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TalkMontageId;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPlayTalkMontage) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugPlayTalkMontage");
static_assert(sizeof(ATCheatManager_ATDebugPlayTalkMontage) == 0x000020, "Wrong size on ATCheatManager_ATDebugPlayTalkMontage");
static_assert(offsetof(ATCheatManager_ATDebugPlayTalkMontage, ActorName) == 0x000000, "Member 'ATCheatManager_ATDebugPlayTalkMontage::ActorName' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugPlayTalkMontage, TalkMontageId) == 0x000010, "Member 'ATCheatManager_ATDebugPlayTalkMontage::TalkMontageId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPlayZoomCamera
// 0x0020 (0x0020 - 0x0000)
struct ATCheatManager_ATDebugPlayZoomCamera final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlendType;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendExp;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugPlayZoomCamera) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugPlayZoomCamera");
static_assert(sizeof(ATCheatManager_ATDebugPlayZoomCamera) == 0x000020, "Wrong size on ATCheatManager_ATDebugPlayZoomCamera");
static_assert(offsetof(ATCheatManager_ATDebugPlayZoomCamera, ActorName) == 0x000000, "Member 'ATCheatManager_ATDebugPlayZoomCamera::ActorName' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugPlayZoomCamera, Duration) == 0x000010, "Member 'ATCheatManager_ATDebugPlayZoomCamera::Duration' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugPlayZoomCamera, BlendType) == 0x000014, "Member 'ATCheatManager_ATDebugPlayZoomCamera::BlendType' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugPlayZoomCamera, BlendExp) == 0x000018, "Member 'ATCheatManager_ATDebugPlayZoomCamera::BlendExp' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugPlayZoomCamera, bLockOutgoing) == 0x00001C, "Member 'ATCheatManager_ATDebugPlayZoomCamera::bLockOutgoing' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPrintEncountWarning
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugPrintEncountWarning final
{
public:
	bool                                          Toggle;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPrintEncountWarning) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugPrintEncountWarning");
static_assert(sizeof(ATCheatManager_ATDebugPrintEncountWarning) == 0x000001, "Wrong size on ATCheatManager_ATDebugPrintEncountWarning");
static_assert(offsetof(ATCheatManager_ATDebugPrintEncountWarning, Toggle) == 0x000000, "Member 'ATCheatManager_ATDebugPrintEncountWarning::Toggle' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugPrintPreloadEnemyWarning
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugPrintPreloadEnemyWarning final
{
public:
	bool                                          Toggle;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugPrintPreloadEnemyWarning) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugPrintPreloadEnemyWarning");
static_assert(sizeof(ATCheatManager_ATDebugPrintPreloadEnemyWarning) == 0x000001, "Wrong size on ATCheatManager_ATDebugPrintPreloadEnemyWarning");
static_assert(offsetof(ATCheatManager_ATDebugPrintPreloadEnemyWarning, Toggle) == 0x000000, "Member 'ATCheatManager_ATDebugPrintPreloadEnemyWarning::Toggle' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugQuestCommand
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugQuestCommand final
{
public:
	class FString                                 QuestCommand;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugQuestCommand) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugQuestCommand");
static_assert(sizeof(ATCheatManager_ATDebugQuestCommand) == 0x000010, "Wrong size on ATCheatManager_ATDebugQuestCommand");
static_assert(offsetof(ATCheatManager_ATDebugQuestCommand, QuestCommand) == 0x000000, "Member 'ATCheatManager_ATDebugQuestCommand::QuestCommand' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugQuestReplaying
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugQuestReplaying final
{
public:
	int32                                         ChapterId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EpisodeId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugQuestReplaying) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugQuestReplaying");
static_assert(sizeof(ATCheatManager_ATDebugQuestReplaying) == 0x000008, "Wrong size on ATCheatManager_ATDebugQuestReplaying");
static_assert(offsetof(ATCheatManager_ATDebugQuestReplaying, ChapterId) == 0x000000, "Member 'ATCheatManager_ATDebugQuestReplaying::ChapterId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugQuestReplaying, EpisodeId) == 0x000004, "Member 'ATCheatManager_ATDebugQuestReplaying::EpisodeId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugRemoveStateIcon
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugRemoveStateIcon final
{
public:
	uint8                                         InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InType;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugRemoveStateIcon) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugRemoveStateIcon");
static_assert(sizeof(ATCheatManager_ATDebugRemoveStateIcon) == 0x000008, "Wrong size on ATCheatManager_ATDebugRemoveStateIcon");
static_assert(offsetof(ATCheatManager_ATDebugRemoveStateIcon, InTarget) == 0x000000, "Member 'ATCheatManager_ATDebugRemoveStateIcon::InTarget' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugRemoveStateIcon, InType) == 0x000004, "Member 'ATCheatManager_ATDebugRemoveStateIcon::InType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugRequestActionTarget
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugRequestActionTarget final
{
public:
	class FName                                   ActId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugRequestActionTarget) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugRequestActionTarget");
static_assert(sizeof(ATCheatManager_ATDebugRequestActionTarget) == 0x000008, "Wrong size on ATCheatManager_ATDebugRequestActionTarget");
static_assert(offsetof(ATCheatManager_ATDebugRequestActionTarget, ActId) == 0x000000, "Member 'ATCheatManager_ATDebugRequestActionTarget::ActId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugRequestMission
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugRequestMission final
{
public:
	int32                                         MissionType;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetID;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugRequestMission) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugRequestMission");
static_assert(sizeof(ATCheatManager_ATDebugRequestMission) == 0x000010, "Wrong size on ATCheatManager_ATDebugRequestMission");
static_assert(offsetof(ATCheatManager_ATDebugRequestMission, MissionType) == 0x000000, "Member 'ATCheatManager_ATDebugRequestMission::MissionType' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugRequestMission, Value) == 0x000004, "Member 'ATCheatManager_ATDebugRequestMission::Value' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugRequestMission, TargetID) == 0x000008, "Member 'ATCheatManager_ATDebugRequestMission::TargetID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugRequestOffsetHighBoost
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugRequestOffsetHighBoost final
{
public:
	bool                                          bDirect;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugRequestOffsetHighBoost) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugRequestOffsetHighBoost");
static_assert(sizeof(ATCheatManager_ATDebugRequestOffsetHighBoost) == 0x000001, "Wrong size on ATCheatManager_ATDebugRequestOffsetHighBoost");
static_assert(offsetof(ATCheatManager_ATDebugRequestOffsetHighBoost, bDirect) == 0x000000, "Member 'ATCheatManager_ATDebugRequestOffsetHighBoost::bDirect' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugRequestSkillTarget
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugRequestSkillTarget final
{
public:
	class FName                                   ActId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugRequestSkillTarget) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugRequestSkillTarget");
static_assert(sizeof(ATCheatManager_ATDebugRequestSkillTarget) == 0x000008, "Wrong size on ATCheatManager_ATDebugRequestSkillTarget");
static_assert(offsetof(ATCheatManager_ATDebugRequestSkillTarget, ActId) == 0x000000, "Member 'ATCheatManager_ATDebugRequestSkillTarget::ActId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugRequestStep
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugRequestStep final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugRequestStep) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugRequestStep");
static_assert(sizeof(ATCheatManager_ATDebugRequestStep) == 0x000004, "Wrong size on ATCheatManager_ATDebugRequestStep");
static_assert(offsetof(ATCheatManager_ATDebugRequestStep, Angle) == 0x000000, "Member 'ATCheatManager_ATDebugRequestStep::Angle' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugRequestTurn
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugRequestTurn final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugRequestTurn) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugRequestTurn");
static_assert(sizeof(ATCheatManager_ATDebugRequestTurn) == 0x000004, "Wrong size on ATCheatManager_ATDebugRequestTurn");
static_assert(offsetof(ATCheatManager_ATDebugRequestTurn, Angle) == 0x000000, "Member 'ATCheatManager_ATDebugRequestTurn::Angle' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugRideMachineDiscard
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugRideMachineDiscard final
{
public:
	bool                                          IsAirCar;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugRideMachineDiscard) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugRideMachineDiscard");
static_assert(sizeof(ATCheatManager_ATDebugRideMachineDiscard) == 0x000001, "Wrong size on ATCheatManager_ATDebugRideMachineDiscard");
static_assert(offsetof(ATCheatManager_ATDebugRideMachineDiscard, IsAirCar) == 0x000000, "Member 'ATCheatManager_ATDebugRideMachineDiscard::IsAirCar' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSaveDataLoad
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSaveDataLoad final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSaveDataLoad) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSaveDataLoad");
static_assert(sizeof(ATCheatManager_ATDebugSaveDataLoad) == 0x000001, "Wrong size on ATCheatManager_ATDebugSaveDataLoad");
static_assert(offsetof(ATCheatManager_ATDebugSaveDataLoad, Slot) == 0x000000, "Member 'ATCheatManager_ATDebugSaveDataLoad::Slot' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSaveDataSave
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSaveDataSave final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSaveDataSave) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSaveDataSave");
static_assert(sizeof(ATCheatManager_ATDebugSaveDataSave) == 0x000001, "Wrong size on ATCheatManager_ATDebugSaveDataSave");
static_assert(offsetof(ATCheatManager_ATDebugSaveDataSave, Slot) == 0x000000, "Member 'ATCheatManager_ATDebugSaveDataSave::Slot' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSaveForcedCorrupt
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSaveForcedCorrupt final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSaveForcedCorrupt) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSaveForcedCorrupt");
static_assert(sizeof(ATCheatManager_ATDebugSaveForcedCorrupt) == 0x000001, "Wrong size on ATCheatManager_ATDebugSaveForcedCorrupt");
static_assert(offsetof(ATCheatManager_ATDebugSaveForcedCorrupt, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugSaveForcedCorrupt::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSaveMonitoringData
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugSaveMonitoringData final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSaveMonitoringData) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugSaveMonitoringData");
static_assert(sizeof(ATCheatManager_ATDebugSaveMonitoringData) == 0x000010, "Wrong size on ATCheatManager_ATDebugSaveMonitoringData");
static_assert(offsetof(ATCheatManager_ATDebugSaveMonitoringData, Filename) == 0x000000, "Member 'ATCheatManager_ATDebugSaveMonitoringData::Filename' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSaveVersionDifferences
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSaveVersionDifferences final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSaveVersionDifferences) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSaveVersionDifferences");
static_assert(sizeof(ATCheatManager_ATDebugSaveVersionDifferences) == 0x000001, "Wrong size on ATCheatManager_ATDebugSaveVersionDifferences");
static_assert(offsetof(ATCheatManager_ATDebugSaveVersionDifferences, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugSaveVersionDifferences::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSaveVersionSame
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSaveVersionSame final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSaveVersionSame) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSaveVersionSame");
static_assert(sizeof(ATCheatManager_ATDebugSaveVersionSame) == 0x000001, "Wrong size on ATCheatManager_ATDebugSaveVersionSame");
static_assert(offsetof(ATCheatManager_ATDebugSaveVersionSame, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugSaveVersionSame::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSelectDLC
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSelectDLC final
{
public:
	class FName                                   SelectDLC;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSelectDLC) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSelectDLC");
static_assert(sizeof(ATCheatManager_ATDebugSelectDLC) == 0x000008, "Wrong size on ATCheatManager_ATDebugSelectDLC");
static_assert(offsetof(ATCheatManager_ATDebugSelectDLC, SelectDLC) == 0x000000, "Member 'ATCheatManager_ATDebugSelectDLC::SelectDLC' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetAvailableTrunks
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSetAvailableTrunks final
{
public:
	bool                                          FlagAvailable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetAvailableTrunks) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSetAvailableTrunks");
static_assert(sizeof(ATCheatManager_ATDebugSetAvailableTrunks) == 0x000001, "Wrong size on ATCheatManager_ATDebugSetAvailableTrunks");
static_assert(offsetof(ATCheatManager_ATDebugSetAvailableTrunks, FlagAvailable) == 0x000000, "Member 'ATCheatManager_ATDebugSetAvailableTrunks::FlagAvailable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetCommunityFavor
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugSetCommunityFavor final
{
public:
	class FName                                   SoulEmId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetCommunityFavor) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetCommunityFavor");
static_assert(sizeof(ATCheatManager_ATDebugSetCommunityFavor) == 0x000010, "Wrong size on ATCheatManager_ATDebugSetCommunityFavor");
static_assert(offsetof(ATCheatManager_ATDebugSetCommunityFavor, SoulEmId) == 0x000000, "Member 'ATCheatManager_ATDebugSetCommunityFavor::SoulEmId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetCommunityFavor, Value) == 0x000008, "Member 'ATCheatManager_ATDebugSetCommunityFavor::Value' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetCommunityFavor, Type) == 0x00000C, "Member 'ATCheatManager_ATDebugSetCommunityFavor::Type' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetEnableCrossTalkLipSync
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSetEnableCrossTalkLipSync final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetEnableCrossTalkLipSync) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSetEnableCrossTalkLipSync");
static_assert(sizeof(ATCheatManager_ATDebugSetEnableCrossTalkLipSync) == 0x000001, "Wrong size on ATCheatManager_ATDebugSetEnableCrossTalkLipSync");
static_assert(offsetof(ATCheatManager_ATDebugSetEnableCrossTalkLipSync, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugSetEnableCrossTalkLipSync::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetEnableDeveloperMode_TimingObserver
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSetEnableDeveloperMode_TimingObserver final
{
public:
	bool                                          bEnbale;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetEnableDeveloperMode_TimingObserver) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSetEnableDeveloperMode_TimingObserver");
static_assert(sizeof(ATCheatManager_ATDebugSetEnableDeveloperMode_TimingObserver) == 0x000001, "Wrong size on ATCheatManager_ATDebugSetEnableDeveloperMode_TimingObserver");
static_assert(offsetof(ATCheatManager_ATDebugSetEnableDeveloperMode_TimingObserver, bEnbale) == 0x000000, "Member 'ATCheatManager_ATDebugSetEnableDeveloperMode_TimingObserver::bEnbale' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetEnableDLCId
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugSetEnableDLCId final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContentId;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetEnableDLCId) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetEnableDLCId");
static_assert(sizeof(ATCheatManager_ATDebugSetEnableDLCId) == 0x000010, "Wrong size on ATCheatManager_ATDebugSetEnableDLCId");
static_assert(offsetof(ATCheatManager_ATDebugSetEnableDLCId, ID) == 0x000000, "Member 'ATCheatManager_ATDebugSetEnableDLCId::ID' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetEnableDLCId, ContentId) == 0x000008, "Member 'ATCheatManager_ATDebugSetEnableDLCId::ContentId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetExtendProgress
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugSetExtendProgress final
{
public:
	class FName                                   InProgress;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseNo;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugSetExtendProgress) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetExtendProgress");
static_assert(sizeof(ATCheatManager_ATDebugSetExtendProgress) == 0x000010, "Wrong size on ATCheatManager_ATDebugSetExtendProgress");
static_assert(offsetof(ATCheatManager_ATDebugSetExtendProgress, InProgress) == 0x000000, "Member 'ATCheatManager_ATDebugSetExtendProgress::InProgress' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetExtendProgress, PhaseNo) == 0x000008, "Member 'ATCheatManager_ATDebugSetExtendProgress::PhaseNo' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetItemPalette
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugSetItemPalette final
{
public:
	class FName                                   Pallete;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetItemPalette) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetItemPalette");
static_assert(sizeof(ATCheatManager_ATDebugSetItemPalette) == 0x000010, "Wrong size on ATCheatManager_ATDebugSetItemPalette");
static_assert(offsetof(ATCheatManager_ATDebugSetItemPalette, Pallete) == 0x000000, "Member 'ATCheatManager_ATDebugSetItemPalette::Pallete' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetItemPalette, ItemId) == 0x000008, "Member 'ATCheatManager_ATDebugSetItemPalette::ItemId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetJumpToSeconds
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSetJumpToSeconds final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetJumpToSeconds) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetJumpToSeconds");
static_assert(sizeof(ATCheatManager_ATDebugSetJumpToSeconds) == 0x000004, "Wrong size on ATCheatManager_ATDebugSetJumpToSeconds");
static_assert(offsetof(ATCheatManager_ATDebugSetJumpToSeconds, TimeInSeconds) == 0x000000, "Member 'ATCheatManager_ATDebugSetJumpToSeconds::TimeInSeconds' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetJumpToSecondsFromCutName
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSetJumpToSecondsFromCutName final
{
public:
	class FName                                   InCutName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetJumpToSecondsFromCutName) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetJumpToSecondsFromCutName");
static_assert(sizeof(ATCheatManager_ATDebugSetJumpToSecondsFromCutName) == 0x000008, "Wrong size on ATCheatManager_ATDebugSetJumpToSecondsFromCutName");
static_assert(offsetof(ATCheatManager_ATDebugSetJumpToSecondsFromCutName, InCutName) == 0x000000, "Member 'ATCheatManager_ATDebugSetJumpToSecondsFromCutName::InCutName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetLayerTranslucencyRenderTargetTextureSize
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize");
static_assert(sizeof(ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize) == 0x000008, "Wrong size on ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize");
static_assert(offsetof(ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize, Width) == 0x000000, "Member 'ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize::Width' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize, Height) == 0x000004, "Member 'ATCheatManager_ATDebugSetLayerTranslucencyRenderTargetTextureSize::Height' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetLevelCondition
// 0x0020 (0x0020 - 0x0000)
struct ATCheatManager_ATDebugSetLevelCondition final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetLevelCondition) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugSetLevelCondition");
static_assert(sizeof(ATCheatManager_ATDebugSetLevelCondition) == 0x000020, "Wrong size on ATCheatManager_ATDebugSetLevelCondition");
static_assert(offsetof(ATCheatManager_ATDebugSetLevelCondition, Key) == 0x000000, "Member 'ATCheatManager_ATDebugSetLevelCondition::Key' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetLevelCondition, Value) == 0x000010, "Member 'ATCheatManager_ATDebugSetLevelCondition::Value' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetMainProgress
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSetMainProgress final
{
public:
	class FName                                   InProgress;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetMainProgress) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetMainProgress");
static_assert(sizeof(ATCheatManager_ATDebugSetMainProgress) == 0x000008, "Wrong size on ATCheatManager_ATDebugSetMainProgress");
static_assert(offsetof(ATCheatManager_ATDebugSetMainProgress, InProgress) == 0x000000, "Member 'ATCheatManager_ATDebugSetMainProgress::InProgress' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetPlayerLocationToActor
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSetPlayerLocationToActor final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetPlayerLocationToActor) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetPlayerLocationToActor");
static_assert(sizeof(ATCheatManager_ATDebugSetPlayerLocationToActor) == 0x000008, "Wrong size on ATCheatManager_ATDebugSetPlayerLocationToActor");
static_assert(offsetof(ATCheatManager_ATDebugSetPlayerLocationToActor, ActorName) == 0x000000, "Member 'ATCheatManager_ATDebugSetPlayerLocationToActor::ActorName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetPositionDebugMenu
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSetPositionDebugMenu final
{
public:
	float                                         PosX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetPositionDebugMenu) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetPositionDebugMenu");
static_assert(sizeof(ATCheatManager_ATDebugSetPositionDebugMenu) == 0x000008, "Wrong size on ATCheatManager_ATDebugSetPositionDebugMenu");
static_assert(offsetof(ATCheatManager_ATDebugSetPositionDebugMenu, PosX) == 0x000000, "Member 'ATCheatManager_ATDebugSetPositionDebugMenu::PosX' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetPositionDebugMenu, PosY) == 0x000004, "Member 'ATCheatManager_ATDebugSetPositionDebugMenu::PosY' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetSkillEnemyIcon
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSetSkillEnemyIcon final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetSkillEnemyIcon) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetSkillEnemyIcon");
static_assert(sizeof(ATCheatManager_ATDebugSetSkillEnemyIcon) == 0x000004, "Wrong size on ATCheatManager_ATDebugSetSkillEnemyIcon");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillEnemyIcon, Value) == 0x000000, "Member 'ATCheatManager_ATDebugSetSkillEnemyIcon::Value' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetSkillLevel
// 0x0018 (0x0018 - 0x0000)
struct ATCheatManager_ATDebugSetSkillLevel final
{
public:
	class FName                                   CharaId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillLevel;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugSetSkillLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetSkillLevel");
static_assert(sizeof(ATCheatManager_ATDebugSetSkillLevel) == 0x000018, "Wrong size on ATCheatManager_ATDebugSetSkillLevel");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillLevel, CharaId) == 0x000000, "Member 'ATCheatManager_ATDebugSetSkillLevel::CharaId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillLevel, SkillId) == 0x000008, "Member 'ATCheatManager_ATDebugSetSkillLevel::SkillId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillLevel, SkillLevel) == 0x000010, "Member 'ATCheatManager_ATDebugSetSkillLevel::SkillLevel' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetSkillLevelAll
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugSetSkillLevelAll final
{
public:
	class FName                                   CharaId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillLevel;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugSetSkillLevelAll) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetSkillLevelAll");
static_assert(sizeof(ATCheatManager_ATDebugSetSkillLevelAll) == 0x000010, "Wrong size on ATCheatManager_ATDebugSetSkillLevelAll");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillLevelAll, CharaId) == 0x000000, "Member 'ATCheatManager_ATDebugSetSkillLevelAll::CharaId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillLevelAll, SkillLevel) == 0x000008, "Member 'ATCheatManager_ATDebugSetSkillLevelAll::SkillLevel' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetSkillLevelViewer
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSetSkillLevelViewer final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetSkillLevelViewer) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetSkillLevelViewer");
static_assert(sizeof(ATCheatManager_ATDebugSetSkillLevelViewer) == 0x000008, "Wrong size on ATCheatManager_ATDebugSetSkillLevelViewer");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillLevelViewer, Index_0) == 0x000000, "Member 'ATCheatManager_ATDebugSetSkillLevelViewer::Index_0' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillLevelViewer, Level) == 0x000004, "Member 'ATCheatManager_ATDebugSetSkillLevelViewer::Level' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetSkillPalette
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugSetSkillPalette final
{
public:
	class FName                                   Palette;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetSkillPalette) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetSkillPalette");
static_assert(sizeof(ATCheatManager_ATDebugSetSkillPalette) == 0x000010, "Wrong size on ATCheatManager_ATDebugSetSkillPalette");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillPalette, Palette) == 0x000000, "Member 'ATCheatManager_ATDebugSetSkillPalette::Palette' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetSkillPalette, SkillId) == 0x000008, "Member 'ATCheatManager_ATDebugSetSkillPalette::SkillId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetSoulEmProficiency
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugSetSoulEmProficiency final
{
public:
	class FName                                   SoulEmId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lv;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetSoulEmProficiency) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetSoulEmProficiency");
static_assert(sizeof(ATCheatManager_ATDebugSetSoulEmProficiency) == 0x000010, "Wrong size on ATCheatManager_ATDebugSetSoulEmProficiency");
static_assert(offsetof(ATCheatManager_ATDebugSetSoulEmProficiency, SoulEmId) == 0x000000, "Member 'ATCheatManager_ATDebugSetSoulEmProficiency::SoulEmId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetSoulEmProficiency, Category) == 0x000008, "Member 'ATCheatManager_ATDebugSetSoulEmProficiency::Category' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSetSoulEmProficiency, Lv) == 0x00000C, "Member 'ATCheatManager_ATDebugSetSoulEmProficiency::Lv' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSetTrainingRoomLevel
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSetTrainingRoomLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSetTrainingRoomLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSetTrainingRoomLevel");
static_assert(sizeof(ATCheatManager_ATDebugSetTrainingRoomLevel) == 0x000004, "Wrong size on ATCheatManager_ATDebugSetTrainingRoomLevel");
static_assert(offsetof(ATCheatManager_ATDebugSetTrainingRoomLevel, InLevel) == 0x000000, "Member 'ATCheatManager_ATDebugSetTrainingRoomLevel::InLevel' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowCharacterExp
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugShowCharacterExp final
{
public:
	class FString                                 TargetType;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowCharacterExp) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugShowCharacterExp");
static_assert(sizeof(ATCheatManager_ATDebugShowCharacterExp) == 0x000010, "Wrong size on ATCheatManager_ATDebugShowCharacterExp");
static_assert(offsetof(ATCheatManager_ATDebugShowCharacterExp, TargetType) == 0x000000, "Member 'ATCheatManager_ATDebugShowCharacterExp::TargetType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowCrossTalkVolume
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugShowCrossTalkVolume final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowCrossTalkVolume) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugShowCrossTalkVolume");
static_assert(sizeof(ATCheatManager_ATDebugShowCrossTalkVolume) == 0x000001, "Wrong size on ATCheatManager_ATDebugShowCrossTalkVolume");
static_assert(offsetof(ATCheatManager_ATDebugShowCrossTalkVolume, IsShow) == 0x000000, "Member 'ATCheatManager_ATDebugShowCrossTalkVolume::IsShow' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowDLCInfoToTitle
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugShowDLCInfoToTitle final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowDLCInfoToTitle) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugShowDLCInfoToTitle");
static_assert(sizeof(ATCheatManager_ATDebugShowDLCInfoToTitle) == 0x000004, "Wrong size on ATCheatManager_ATDebugShowDLCInfoToTitle");
static_assert(offsetof(ATCheatManager_ATDebugShowDLCInfoToTitle, Mode) == 0x000000, "Member 'ATCheatManager_ATDebugShowDLCInfoToTitle::Mode' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowItemActor
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugShowItemActor final
{
public:
	class FName                                   ItemCategory;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowItemActor) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugShowItemActor");
static_assert(sizeof(ATCheatManager_ATDebugShowItemActor) == 0x000008, "Wrong size on ATCheatManager_ATDebugShowItemActor");
static_assert(offsetof(ATCheatManager_ATDebugShowItemActor, ItemCategory) == 0x000000, "Member 'ATCheatManager_ATDebugShowItemActor::ItemCategory' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowLevelCondition
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugShowLevelCondition final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowLevelCondition) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugShowLevelCondition");
static_assert(sizeof(ATCheatManager_ATDebugShowLevelCondition) == 0x000010, "Wrong size on ATCheatManager_ATDebugShowLevelCondition");
static_assert(offsetof(ATCheatManager_ATDebugShowLevelCondition, Key) == 0x000000, "Member 'ATCheatManager_ATDebugShowLevelCondition::Key' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowNoneGeneralCrossTalkVolume
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugShowNoneGeneralCrossTalkVolume final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowNoneGeneralCrossTalkVolume) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugShowNoneGeneralCrossTalkVolume");
static_assert(sizeof(ATCheatManager_ATDebugShowNoneGeneralCrossTalkVolume) == 0x000001, "Wrong size on ATCheatManager_ATDebugShowNoneGeneralCrossTalkVolume");
static_assert(offsetof(ATCheatManager_ATDebugShowNoneGeneralCrossTalkVolume, IsShow) == 0x000000, "Member 'ATCheatManager_ATDebugShowNoneGeneralCrossTalkVolume::IsShow' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowPartyOrganizeFromQuestID
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugShowPartyOrganizeFromQuestID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowPartyOrganizeFromQuestID) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugShowPartyOrganizeFromQuestID");
static_assert(sizeof(ATCheatManager_ATDebugShowPartyOrganizeFromQuestID) == 0x000008, "Wrong size on ATCheatManager_ATDebugShowPartyOrganizeFromQuestID");
static_assert(offsetof(ATCheatManager_ATDebugShowPartyOrganizeFromQuestID, InID) == 0x000000, "Member 'ATCheatManager_ATDebugShowPartyOrganizeFromQuestID::InID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowQuestNotification
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugShowQuestNotification final
{
public:
	class FName                                   NotificationId;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowQuestNotification) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugShowQuestNotification");
static_assert(sizeof(ATCheatManager_ATDebugShowQuestNotification) == 0x000008, "Wrong size on ATCheatManager_ATDebugShowQuestNotification");
static_assert(offsetof(ATCheatManager_ATDebugShowQuestNotification, NotificationId) == 0x000000, "Member 'ATCheatManager_ATDebugShowQuestNotification::NotificationId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowQuestResult
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugShowQuestResult final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowQuestResult) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugShowQuestResult");
static_assert(sizeof(ATCheatManager_ATDebugShowQuestResult) == 0x000008, "Wrong size on ATCheatManager_ATDebugShowQuestResult");
static_assert(offsetof(ATCheatManager_ATDebugShowQuestResult, QuestId) == 0x000000, "Member 'ATCheatManager_ATDebugShowQuestResult::QuestId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugShowWorldBlockingVolume
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugShowWorldBlockingVolume final
{
public:
	class FName                                   StringID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugShowWorldBlockingVolume) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugShowWorldBlockingVolume");
static_assert(sizeof(ATCheatManager_ATDebugShowWorldBlockingVolume) == 0x000008, "Wrong size on ATCheatManager_ATDebugShowWorldBlockingVolume");
static_assert(offsetof(ATCheatManager_ATDebugShowWorldBlockingVolume, StringID) == 0x000000, "Member 'ATCheatManager_ATDebugShowWorldBlockingVolume::StringID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoulEmAllRarity
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSoulEmAllRarity final
{
public:
	int32                                         Rarity;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoulEmAllRarity) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSoulEmAllRarity");
static_assert(sizeof(ATCheatManager_ATDebugSoulEmAllRarity) == 0x000004, "Wrong size on ATCheatManager_ATDebugSoulEmAllRarity");
static_assert(offsetof(ATCheatManager_ATDebugSoulEmAllRarity, Rarity) == 0x000000, "Member 'ATCheatManager_ATDebugSoulEmAllRarity::Rarity' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoulEmAllUnlock
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSoulEmAllUnlock final
{
public:
	int32                                         ExecId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoulEmAllUnlock) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSoulEmAllUnlock");
static_assert(sizeof(ATCheatManager_ATDebugSoulEmAllUnlock) == 0x000004, "Wrong size on ATCheatManager_ATDebugSoulEmAllUnlock");
static_assert(offsetof(ATCheatManager_ATDebugSoulEmAllUnlock, ExecId) == 0x000000, "Member 'ATCheatManager_ATDebugSoulEmAllUnlock::ExecId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSound3D
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSound3D final
{
public:
	bool                                          Param;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSound3D) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSound3D");
static_assert(sizeof(ATCheatManager_ATDebugSound3D) == 0x000001, "Wrong size on ATCheatManager_ATDebugSound3D");
static_assert(offsetof(ATCheatManager_ATDebugSound3D, Param) == 0x000000, "Member 'ATCheatManager_ATDebugSound3D::Param' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoundCategoryVolume
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSoundCategoryVolume final
{
public:
	int32                                         CateID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoundCategoryVolume) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSoundCategoryVolume");
static_assert(sizeof(ATCheatManager_ATDebugSoundCategoryVolume) == 0x000008, "Wrong size on ATCheatManager_ATDebugSoundCategoryVolume");
static_assert(offsetof(ATCheatManager_ATDebugSoundCategoryVolume, CateID) == 0x000000, "Member 'ATCheatManager_ATDebugSoundCategoryVolume::CateID' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSoundCategoryVolume, Volume) == 0x000004, "Member 'ATCheatManager_ATDebugSoundCategoryVolume::Volume' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoundListener
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSoundListener final
{
public:
	bool                                          Param;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoundListener) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSoundListener");
static_assert(sizeof(ATCheatManager_ATDebugSoundListener) == 0x000001, "Wrong size on ATCheatManager_ATDebugSoundListener");
static_assert(offsetof(ATCheatManager_ATDebugSoundListener, Param) == 0x000000, "Member 'ATCheatManager_ATDebugSoundListener::Param' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoundLoadCharacter
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSoundLoadCharacter final
{
public:
	int32                                         CharType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoundLoadCharacter) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSoundLoadCharacter");
static_assert(sizeof(ATCheatManager_ATDebugSoundLoadCharacter) == 0x000004, "Wrong size on ATCheatManager_ATDebugSoundLoadCharacter");
static_assert(offsetof(ATCheatManager_ATDebugSoundLoadCharacter, CharType) == 0x000000, "Member 'ATCheatManager_ATDebugSoundLoadCharacter::CharType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoundPlayBGM
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSoundPlayBGM final
{
public:
	int32                                         bgmID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoundPlayBGM) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSoundPlayBGM");
static_assert(sizeof(ATCheatManager_ATDebugSoundPlayBGM) == 0x000004, "Wrong size on ATCheatManager_ATDebugSoundPlayBGM");
static_assert(offsetof(ATCheatManager_ATDebugSoundPlayBGM, bgmID) == 0x000000, "Member 'ATCheatManager_ATDebugSoundPlayBGM::bgmID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoundPlaySE
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSoundPlaySE final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoundPlaySE) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSoundPlaySE");
static_assert(sizeof(ATCheatManager_ATDebugSoundPlaySE) == 0x000004, "Wrong size on ATCheatManager_ATDebugSoundPlaySE");
static_assert(offsetof(ATCheatManager_ATDebugSoundPlaySE, CueId) == 0x000000, "Member 'ATCheatManager_ATDebugSoundPlaySE::CueId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoundPlVoice
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugSoundPlVoice final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharType;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoundPlVoice) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSoundPlVoice");
static_assert(sizeof(ATCheatManager_ATDebugSoundPlVoice) == 0x000008, "Wrong size on ATCheatManager_ATDebugSoundPlVoice");
static_assert(offsetof(ATCheatManager_ATDebugSoundPlVoice, CueId) == 0x000000, "Member 'ATCheatManager_ATDebugSoundPlVoice::CueId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSoundPlVoice, CharType) == 0x000004, "Member 'ATCheatManager_ATDebugSoundPlVoice::CharType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSoundUnLoadCharacter
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSoundUnLoadCharacter final
{
public:
	int32                                         CharType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSoundUnLoadCharacter) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSoundUnLoadCharacter");
static_assert(sizeof(ATCheatManager_ATDebugSoundUnLoadCharacter) == 0x000004, "Wrong size on ATCheatManager_ATDebugSoundUnLoadCharacter");
static_assert(offsetof(ATCheatManager_ATDebugSoundUnLoadCharacter, CharType) == 0x000000, "Member 'ATCheatManager_ATDebugSoundUnLoadCharacter::CharType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSpawmFriend
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugSpawmFriend final
{
public:
	float                                         FriendId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSpawmFriend) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugSpawmFriend");
static_assert(sizeof(ATCheatManager_ATDebugSpawmFriend) == 0x000004, "Wrong size on ATCheatManager_ATDebugSpawmFriend");
static_assert(offsetof(ATCheatManager_ATDebugSpawmFriend, FriendId) == 0x000000, "Member 'ATCheatManager_ATDebugSpawmFriend::FriendId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugStopBGMFromBGMPlayer
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugStopBGMFromBGMPlayer final
{
public:
	EBGMCategory                                  bgmType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugStopBGMFromBGMPlayer) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugStopBGMFromBGMPlayer");
static_assert(sizeof(ATCheatManager_ATDebugStopBGMFromBGMPlayer) == 0x000001, "Wrong size on ATCheatManager_ATDebugStopBGMFromBGMPlayer");
static_assert(offsetof(ATCheatManager_ATDebugStopBGMFromBGMPlayer, bgmType) == 0x000000, "Member 'ATCheatManager_ATDebugStopBGMFromBGMPlayer::bgmType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugStopTalkMontage
// 0x0020 (0x0020 - 0x0000)
struct ATCheatManager_ATDebugStopTalkMontage final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TalkMontageId;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugStopTalkMontage) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugStopTalkMontage");
static_assert(sizeof(ATCheatManager_ATDebugStopTalkMontage) == 0x000020, "Wrong size on ATCheatManager_ATDebugStopTalkMontage");
static_assert(offsetof(ATCheatManager_ATDebugStopTalkMontage, ActorName) == 0x000000, "Member 'ATCheatManager_ATDebugStopTalkMontage::ActorName' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugStopTalkMontage, TalkMontageId) == 0x000010, "Member 'ATCheatManager_ATDebugStopTalkMontage::TalkMontageId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSubTitle
// 0x0018 (0x0018 - 0x0000)
struct ATCheatManager_ATDebugSubTitle final
{
public:
	class FString                                 StringID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DispTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugSubTitle) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugSubTitle");
static_assert(sizeof(ATCheatManager_ATDebugSubTitle) == 0x000018, "Wrong size on ATCheatManager_ATDebugSubTitle");
static_assert(offsetof(ATCheatManager_ATDebugSubTitle, StringID) == 0x000000, "Member 'ATCheatManager_ATDebugSubTitle::StringID' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugSubTitle, DispTime) == 0x000010, "Member 'ATCheatManager_ATDebugSubTitle::DispTime' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugSystemSaveEveryTimeLoad
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugSystemSaveEveryTimeLoad final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugSystemSaveEveryTimeLoad) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugSystemSaveEveryTimeLoad");
static_assert(sizeof(ATCheatManager_ATDebugSystemSaveEveryTimeLoad) == 0x000001, "Wrong size on ATCheatManager_ATDebugSystemSaveEveryTimeLoad");
static_assert(offsetof(ATCheatManager_ATDebugSystemSaveEveryTimeLoad, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugSystemSaveEveryTimeLoad::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugTeleportPlayer
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugTeleportPlayer final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugTeleportPlayer) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugTeleportPlayer");
static_assert(sizeof(ATCheatManager_ATDebugTeleportPlayer) == 0x000004, "Wrong size on ATCheatManager_ATDebugTeleportPlayer");
static_assert(offsetof(ATCheatManager_ATDebugTeleportPlayer, Range) == 0x000000, "Member 'ATCheatManager_ATDebugTeleportPlayer::Range' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugTeleportToItemActor
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugTeleportToItemActor final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugTeleportToItemActor) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugTeleportToItemActor");
static_assert(sizeof(ATCheatManager_ATDebugTeleportToItemActor) == 0x000010, "Wrong size on ATCheatManager_ATDebugTeleportToItemActor");
static_assert(offsetof(ATCheatManager_ATDebugTeleportToItemActor, ItemId) == 0x000000, "Member 'ATCheatManager_ATDebugTeleportToItemActor::ItemId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugTeleportToItemActor, Index_0) == 0x000008, "Member 'ATCheatManager_ATDebugTeleportToItemActor::Index_0' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugTrophyLogType
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugTrophyLogType final
{
public:
	int32                                         InType;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugTrophyLogType) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugTrophyLogType");
static_assert(sizeof(ATCheatManager_ATDebugTrophyLogType) == 0x000004, "Wrong size on ATCheatManager_ATDebugTrophyLogType");
static_assert(offsetof(ATCheatManager_ATDebugTrophyLogType, InType) == 0x000000, "Member 'ATCheatManager_ATDebugTrophyLogType::InType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugTutorialFlagSet
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugTutorialFlagSet final
{
public:
	int32                                         SaveId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsView;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugTutorialFlagSet) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugTutorialFlagSet");
static_assert(sizeof(ATCheatManager_ATDebugTutorialFlagSet) == 0x000008, "Wrong size on ATCheatManager_ATDebugTutorialFlagSet");
static_assert(offsetof(ATCheatManager_ATDebugTutorialFlagSet, SaveId) == 0x000000, "Member 'ATCheatManager_ATDebugTutorialFlagSet::SaveId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugTutorialFlagSet, IsView) == 0x000004, "Member 'ATCheatManager_ATDebugTutorialFlagSet::IsView' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiAddMapIconOffset
// 0x000C (0x000C - 0x0000)
struct ATCheatManager_ATDebugUiAddMapIconOffset final
{
public:
	int32                                         InIconId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetX;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetY;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiAddMapIconOffset) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiAddMapIconOffset");
static_assert(sizeof(ATCheatManager_ATDebugUiAddMapIconOffset) == 0x00000C, "Wrong size on ATCheatManager_ATDebugUiAddMapIconOffset");
static_assert(offsetof(ATCheatManager_ATDebugUiAddMapIconOffset, InIconId) == 0x000000, "Member 'ATCheatManager_ATDebugUiAddMapIconOffset::InIconId' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiAddMapIconOffset, InOffsetX) == 0x000004, "Member 'ATCheatManager_ATDebugUiAddMapIconOffset::InOffsetX' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiAddMapIconOffset, InOffsetY) == 0x000008, "Member 'ATCheatManager_ATDebugUiAddMapIconOffset::InOffsetY' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiChangeConfirmButton
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugUiChangeConfirmButton final
{
public:
	bool                                          IsAButton;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiChangeConfirmButton) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugUiChangeConfirmButton");
static_assert(sizeof(ATCheatManager_ATDebugUiChangeConfirmButton) == 0x000001, "Wrong size on ATCheatManager_ATDebugUiChangeConfirmButton");
static_assert(offsetof(ATCheatManager_ATDebugUiChangeConfirmButton, IsAButton) == 0x000000, "Member 'ATCheatManager_ATDebugUiChangeConfirmButton::IsAButton' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiChangeLanguage
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugUiChangeLanguage final
{
public:
	class FString                                 LangCode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiChangeLanguage) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugUiChangeLanguage");
static_assert(sizeof(ATCheatManager_ATDebugUiChangeLanguage) == 0x000010, "Wrong size on ATCheatManager_ATDebugUiChangeLanguage");
static_assert(offsetof(ATCheatManager_ATDebugUiChangeLanguage, LangCode) == 0x000000, "Member 'ATCheatManager_ATDebugUiChangeLanguage::LangCode' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiChangePlatform
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugUiChangePlatform final
{
public:
	class FString                                 PlatformCode;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiChangePlatform) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugUiChangePlatform");
static_assert(sizeof(ATCheatManager_ATDebugUiChangePlatform) == 0x000010, "Wrong size on ATCheatManager_ATDebugUiChangePlatform");
static_assert(offsetof(ATCheatManager_ATDebugUiChangePlatform, PlatformCode) == 0x000000, "Member 'ATCheatManager_ATDebugUiChangePlatform::PlatformCode' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiChangeRegion
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugUiChangeRegion final
{
public:
	class FString                                 RegionCode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiChangeRegion) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugUiChangeRegion");
static_assert(sizeof(ATCheatManager_ATDebugUiChangeRegion) == 0x000010, "Wrong size on ATCheatManager_ATDebugUiChangeRegion");
static_assert(offsetof(ATCheatManager_ATDebugUiChangeRegion, RegionCode) == 0x000000, "Member 'ATCheatManager_ATDebugUiChangeRegion::RegionCode' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiDbGet
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugUiDbGet final
{
public:
	int32                                         GetIdx;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiDbGet) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiDbGet");
static_assert(sizeof(ATCheatManager_ATDebugUiDbGet) == 0x000004, "Wrong size on ATCheatManager_ATDebugUiDbGet");
static_assert(offsetof(ATCheatManager_ATDebugUiDbGet, GetIdx) == 0x000000, "Member 'ATCheatManager_ATDebugUiDbGet::GetIdx' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiEnableCmnInput
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugUiEnableCmnInput final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiEnableCmnInput) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugUiEnableCmnInput");
static_assert(sizeof(ATCheatManager_ATDebugUiEnableCmnInput) == 0x000001, "Wrong size on ATCheatManager_ATDebugUiEnableCmnInput");
static_assert(offsetof(ATCheatManager_ATDebugUiEnableCmnInput, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugUiEnableCmnInput::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiFieldMemory
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugUiFieldMemory final
{
public:
	class FName                                   CollectionId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiFieldMemory) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiFieldMemory");
static_assert(sizeof(ATCheatManager_ATDebugUiFieldMemory) == 0x000008, "Wrong size on ATCheatManager_ATDebugUiFieldMemory");
static_assert(offsetof(ATCheatManager_ATDebugUiFieldMemory, CollectionId) == 0x000000, "Member 'ATCheatManager_ATDebugUiFieldMemory::CollectionId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiLoadingHide
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugUiLoadingHide final
{
public:
	bool                                          IsHide;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiLoadingHide) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugUiLoadingHide");
static_assert(sizeof(ATCheatManager_ATDebugUiLoadingHide) == 0x000001, "Wrong size on ATCheatManager_ATDebugUiLoadingHide");
static_assert(offsetof(ATCheatManager_ATDebugUiLoadingHide, IsHide) == 0x000000, "Member 'ATCheatManager_ATDebugUiLoadingHide::IsHide' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUILog
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugUILog final
{
public:
	class FName                                   LogLv;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogMode;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FatalBreak;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugUILog) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUILog");
static_assert(sizeof(ATCheatManager_ATDebugUILog) == 0x000010, "Wrong size on ATCheatManager_ATDebugUILog");
static_assert(offsetof(ATCheatManager_ATDebugUILog, LogLv) == 0x000000, "Member 'ATCheatManager_ATDebugUILog::LogLv' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUILog, LogMode) == 0x000008, "Member 'ATCheatManager_ATDebugUILog::LogMode' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUILog, FatalBreak) == 0x00000C, "Member 'ATCheatManager_ATDebugUILog::FatalBreak' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUILogDisplay
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugUILogDisplay final
{
public:
	class FName                                   LogLv;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOn;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugUILogDisplay) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUILogDisplay");
static_assert(sizeof(ATCheatManager_ATDebugUILogDisplay) == 0x000010, "Wrong size on ATCheatManager_ATDebugUILogDisplay");
static_assert(offsetof(ATCheatManager_ATDebugUILogDisplay, LogLv) == 0x000000, "Member 'ATCheatManager_ATDebugUILogDisplay::LogLv' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUILogDisplay, IsOn) == 0x000008, "Member 'ATCheatManager_ATDebugUILogDisplay::IsOn' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiMap
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugUiMap final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Anim;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiMap) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiMap");
static_assert(sizeof(ATCheatManager_ATDebugUiMap) == 0x000008, "Wrong size on ATCheatManager_ATDebugUiMap");
static_assert(offsetof(ATCheatManager_ATDebugUiMap, State) == 0x000000, "Member 'ATCheatManager_ATDebugUiMap::State' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiMap, Anim) == 0x000004, "Member 'ATCheatManager_ATDebugUiMap::Anim' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiNaviWindowStart
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugUiNaviWindowStart final
{
public:
	class FName                                   UniqueId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiNaviWindowStart) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiNaviWindowStart");
static_assert(sizeof(ATCheatManager_ATDebugUiNaviWindowStart) == 0x000008, "Wrong size on ATCheatManager_ATDebugUiNaviWindowStart");
static_assert(offsetof(ATCheatManager_ATDebugUiNaviWindowStart, UniqueId) == 0x000000, "Member 'ATCheatManager_ATDebugUiNaviWindowStart::UniqueId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiNaviWindowStop
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugUiNaviWindowStop final
{
public:
	bool                                          IsStop;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiNaviWindowStop) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugUiNaviWindowStop");
static_assert(sizeof(ATCheatManager_ATDebugUiNaviWindowStop) == 0x000001, "Wrong size on ATCheatManager_ATDebugUiNaviWindowStop");
static_assert(offsetof(ATCheatManager_ATDebugUiNaviWindowStop, IsStop) == 0x000000, "Member 'ATCheatManager_ATDebugUiNaviWindowStop::IsStop' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiRemoveMapIconOffset
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugUiRemoveMapIconOffset final
{
public:
	int32                                         InIconId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiRemoveMapIconOffset) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiRemoveMapIconOffset");
static_assert(sizeof(ATCheatManager_ATDebugUiRemoveMapIconOffset) == 0x000004, "Wrong size on ATCheatManager_ATDebugUiRemoveMapIconOffset");
static_assert(offsetof(ATCheatManager_ATDebugUiRemoveMapIconOffset, InIconId) == 0x000000, "Member 'ATCheatManager_ATDebugUiRemoveMapIconOffset::InIconId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiSetDummyTextType
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugUiSetDummyTextType final
{
public:
	int32                                         InType;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiSetDummyTextType) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiSetDummyTextType");
static_assert(sizeof(ATCheatManager_ATDebugUiSetDummyTextType) == 0x000004, "Wrong size on ATCheatManager_ATDebugUiSetDummyTextType");
static_assert(offsetof(ATCheatManager_ATDebugUiSetDummyTextType, InType) == 0x000000, "Member 'ATCheatManager_ATDebugUiSetDummyTextType::InType' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiTestSwitch
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugUiTestSwitch final
{
public:
	int32                                         TestCase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiTestSwitch) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiTestSwitch");
static_assert(sizeof(ATCheatManager_ATDebugUiTestSwitch) == 0x000004, "Wrong size on ATCheatManager_ATDebugUiTestSwitch");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch, TestCase) == 0x000000, "Member 'ATCheatManager_ATDebugUiTestSwitch::TestCase' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiTestSwitch1_F
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugUiTestSwitch1_F final
{
public:
	int32                                         TestCase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiTestSwitch1_F) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiTestSwitch1_F");
static_assert(sizeof(ATCheatManager_ATDebugUiTestSwitch1_F) == 0x000008, "Wrong size on ATCheatManager_ATDebugUiTestSwitch1_F");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch1_F, TestCase) == 0x000000, "Member 'ATCheatManager_ATDebugUiTestSwitch1_F::TestCase' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch1_F, Value) == 0x000004, "Member 'ATCheatManager_ATDebugUiTestSwitch1_F::Value' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiTestSwitch1_I
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugUiTestSwitch1_I final
{
public:
	int32                                         TestCase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiTestSwitch1_I) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiTestSwitch1_I");
static_assert(sizeof(ATCheatManager_ATDebugUiTestSwitch1_I) == 0x000008, "Wrong size on ATCheatManager_ATDebugUiTestSwitch1_I");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch1_I, TestCase) == 0x000000, "Member 'ATCheatManager_ATDebugUiTestSwitch1_I::TestCase' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch1_I, Value1) == 0x000004, "Member 'ATCheatManager_ATDebugUiTestSwitch1_I::Value1' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiTestSwitch1_N
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugUiTestSwitch1_N final
{
public:
	int32                                         TestCase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiTestSwitch1_N) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiTestSwitch1_N");
static_assert(sizeof(ATCheatManager_ATDebugUiTestSwitch1_N) == 0x000010, "Wrong size on ATCheatManager_ATDebugUiTestSwitch1_N");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch1_N, TestCase) == 0x000000, "Member 'ATCheatManager_ATDebugUiTestSwitch1_N::TestCase' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch1_N, Value) == 0x000008, "Member 'ATCheatManager_ATDebugUiTestSwitch1_N::Value' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiTestSwitch2_I
// 0x000C (0x000C - 0x0000)
struct ATCheatManager_ATDebugUiTestSwitch2_I final
{
public:
	int32                                         TestCase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiTestSwitch2_I) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiTestSwitch2_I");
static_assert(sizeof(ATCheatManager_ATDebugUiTestSwitch2_I) == 0x00000C, "Wrong size on ATCheatManager_ATDebugUiTestSwitch2_I");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch2_I, TestCase) == 0x000000, "Member 'ATCheatManager_ATDebugUiTestSwitch2_I::TestCase' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch2_I, Value1) == 0x000004, "Member 'ATCheatManager_ATDebugUiTestSwitch2_I::Value1' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch2_I, Value2) == 0x000008, "Member 'ATCheatManager_ATDebugUiTestSwitch2_I::Value2' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiTestSwitch3_FFV
// 0x0018 (0x0018 - 0x0000)
struct ATCheatManager_ATDebugUiTestSwitch3_FFV final
{
public:
	int32                                         TestCase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value3;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiTestSwitch3_FFV) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiTestSwitch3_FFV");
static_assert(sizeof(ATCheatManager_ATDebugUiTestSwitch3_FFV) == 0x000018, "Wrong size on ATCheatManager_ATDebugUiTestSwitch3_FFV");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch3_FFV, TestCase) == 0x000000, "Member 'ATCheatManager_ATDebugUiTestSwitch3_FFV::TestCase' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch3_FFV, Value1) == 0x000004, "Member 'ATCheatManager_ATDebugUiTestSwitch3_FFV::Value1' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch3_FFV, Value2) == 0x000008, "Member 'ATCheatManager_ATDebugUiTestSwitch3_FFV::Value2' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugUiTestSwitch3_FFV, Value3) == 0x00000C, "Member 'ATCheatManager_ATDebugUiTestSwitch3_FFV::Value3' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUiUnlockMapInfo
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugUiUnlockMapInfo final
{
public:
	int32                                         AreaID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUiUnlockMapInfo) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUiUnlockMapInfo");
static_assert(sizeof(ATCheatManager_ATDebugUiUnlockMapInfo) == 0x000004, "Wrong size on ATCheatManager_ATDebugUiUnlockMapInfo");
static_assert(offsetof(ATCheatManager_ATDebugUiUnlockMapInfo, AreaID) == 0x000000, "Member 'ATCheatManager_ATDebugUiUnlockMapInfo::AreaID' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugUnlockCommunity
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugUnlockCommunity final
{
public:
	int32                                         Category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugUnlockCommunity) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugUnlockCommunity");
static_assert(sizeof(ATCheatManager_ATDebugUnlockCommunity) == 0x000004, "Wrong size on ATCheatManager_ATDebugUnlockCommunity");
static_assert(offsetof(ATCheatManager_ATDebugUnlockCommunity, Category) == 0x000000, "Member 'ATCheatManager_ATDebugUnlockCommunity::Category' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugVariationChange
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugVariationChange final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugVariationChange) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugVariationChange");
static_assert(sizeof(ATCheatManager_ATDebugVariationChange) == 0x000001, "Wrong size on ATCheatManager_ATDebugVariationChange");
static_assert(offsetof(ATCheatManager_ATDebugVariationChange, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugVariationChange::Variation' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugVariationChangeSupportLeft
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugVariationChangeSupportLeft final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugVariationChangeSupportLeft) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugVariationChangeSupportLeft");
static_assert(sizeof(ATCheatManager_ATDebugVariationChangeSupportLeft) == 0x000001, "Wrong size on ATCheatManager_ATDebugVariationChangeSupportLeft");
static_assert(offsetof(ATCheatManager_ATDebugVariationChangeSupportLeft, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugVariationChangeSupportLeft::Variation' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugVariationChangeSupportRight
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugVariationChangeSupportRight final
{
public:
	uint8                                         Variation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugVariationChangeSupportRight) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugVariationChangeSupportRight");
static_assert(sizeof(ATCheatManager_ATDebugVariationChangeSupportRight) == 0x000001, "Wrong size on ATCheatManager_ATDebugVariationChangeSupportRight");
static_assert(offsetof(ATCheatManager_ATDebugVariationChangeSupportRight, Variation) == 0x000000, "Member 'ATCheatManager_ATDebugVariationChangeSupportRight::Variation' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugViewLookAtLay_Character
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugViewLookAtLay_Character final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugViewLookAtLay_Character) == 0x000008, "Wrong alignment on ATCheatManager_ATDebugViewLookAtLay_Character");
static_assert(sizeof(ATCheatManager_ATDebugViewLookAtLay_Character) == 0x000010, "Wrong size on ATCheatManager_ATDebugViewLookAtLay_Character");
static_assert(offsetof(ATCheatManager_ATDebugViewLookAtLay_Character, ActorName) == 0x000000, "Member 'ATCheatManager_ATDebugViewLookAtLay_Character::ActorName' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugViewLookAtLay_Support
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugViewLookAtLay_Support final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugViewLookAtLay_Support) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugViewLookAtLay_Support");
static_assert(sizeof(ATCheatManager_ATDebugViewLookAtLay_Support) == 0x000004, "Wrong size on ATCheatManager_ATDebugViewLookAtLay_Support");
static_assert(offsetof(ATCheatManager_ATDebugViewLookAtLay_Support, Number) == 0x000000, "Member 'ATCheatManager_ATDebugViewLookAtLay_Support::Number' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugViewMissionProgress
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATDebugViewMissionProgress final
{
public:
	class FName                                   MissionId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugViewMissionProgress) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugViewMissionProgress");
static_assert(sizeof(ATCheatManager_ATDebugViewMissionProgress) == 0x000008, "Wrong size on ATCheatManager_ATDebugViewMissionProgress");
static_assert(offsetof(ATCheatManager_ATDebugViewMissionProgress, MissionId) == 0x000000, "Member 'ATCheatManager_ATDebugViewMissionProgress::MissionId' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugVisibleSkeletalMeshes
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATDebugVisibleSkeletalMeshes final
{
public:
	class FName                                   TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATDebugVisibleSkeletalMeshes) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugVisibleSkeletalMeshes");
static_assert(sizeof(ATCheatManager_ATDebugVisibleSkeletalMeshes) == 0x000010, "Wrong size on ATCheatManager_ATDebugVisibleSkeletalMeshes");
static_assert(offsetof(ATCheatManager_ATDebugVisibleSkeletalMeshes, TargetCharacter) == 0x000000, "Member 'ATCheatManager_ATDebugVisibleSkeletalMeshes::TargetCharacter' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugVisibleSkeletalMeshes, bEnabled) == 0x000008, "Member 'ATCheatManager_ATDebugVisibleSkeletalMeshes::bEnabled' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugWindowTest
// 0x000C (0x000C - 0x0000)
struct ATCheatManager_ATDebugWindowTest final
{
public:
	int32                                         WindowKind;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindowType;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TestCase;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugWindowTest) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugWindowTest");
static_assert(sizeof(ATCheatManager_ATDebugWindowTest) == 0x00000C, "Wrong size on ATCheatManager_ATDebugWindowTest");
static_assert(offsetof(ATCheatManager_ATDebugWindowTest, WindowKind) == 0x000000, "Member 'ATCheatManager_ATDebugWindowTest::WindowKind' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugWindowTest, WindowType) == 0x000004, "Member 'ATCheatManager_ATDebugWindowTest::WindowType' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATDebugWindowTest, TestCase) == 0x000008, "Member 'ATCheatManager_ATDebugWindowTest::TestCase' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugXOneEnableSignOutWatch
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugXOneEnableSignOutWatch final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugXOneEnableSignOutWatch) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugXOneEnableSignOutWatch");
static_assert(sizeof(ATCheatManager_ATDebugXOneEnableSignOutWatch) == 0x000001, "Wrong size on ATCheatManager_ATDebugXOneEnableSignOutWatch");
static_assert(offsetof(ATCheatManager_ATDebugXOneEnableSignOutWatch, IsEnable) == 0x000000, "Member 'ATCheatManager_ATDebugXOneEnableSignOutWatch::IsEnable' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugXOneSkipSignIn
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATDebugXOneSkipSignIn final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugXOneSkipSignIn) == 0x000001, "Wrong alignment on ATCheatManager_ATDebugXOneSkipSignIn");
static_assert(sizeof(ATCheatManager_ATDebugXOneSkipSignIn) == 0x000001, "Wrong size on ATCheatManager_ATDebugXOneSkipSignIn");
static_assert(offsetof(ATCheatManager_ATDebugXOneSkipSignIn, IsSkip) == 0x000000, "Member 'ATCheatManager_ATDebugXOneSkipSignIn::IsSkip' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugZBlastGaugeLevel
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugZBlastGaugeLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugZBlastGaugeLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugZBlastGaugeLevel");
static_assert(sizeof(ATCheatManager_ATDebugZBlastGaugeLevel) == 0x000004, "Wrong size on ATCheatManager_ATDebugZBlastGaugeLevel");
static_assert(offsetof(ATCheatManager_ATDebugZBlastGaugeLevel, Level) == 0x000000, "Member 'ATCheatManager_ATDebugZBlastGaugeLevel::Level' has a wrong offset!");

// Function AT.ATCheatManager.ATDebugZBlastLevel
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATDebugZBlastLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATDebugZBlastLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATDebugZBlastLevel");
static_assert(sizeof(ATCheatManager_ATDebugZBlastLevel) == 0x000004, "Wrong size on ATCheatManager_ATDebugZBlastLevel");
static_assert(offsetof(ATCheatManager_ATDebugZBlastLevel, Level) == 0x000000, "Member 'ATCheatManager_ATDebugZBlastLevel::Level' has a wrong offset!");

// Function AT.ATCheatManager.ATEventBattleLoad
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATEventBattleLoad final
{
public:
	class FName                                   BattleName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATEventBattleLoad) == 0x000004, "Wrong alignment on ATCheatManager_ATEventBattleLoad");
static_assert(sizeof(ATCheatManager_ATEventBattleLoad) == 0x000008, "Wrong size on ATCheatManager_ATEventBattleLoad");
static_assert(offsetof(ATCheatManager_ATEventBattleLoad, BattleName) == 0x000000, "Member 'ATCheatManager_ATEventBattleLoad::BattleName' has a wrong offset!");

// Function AT.ATCheatManager.ATFrameRateFixed
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATFrameRateFixed final
{
public:
	int32                                         InFrameRate;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATFrameRateFixed) == 0x000004, "Wrong alignment on ATCheatManager_ATFrameRateFixed");
static_assert(sizeof(ATCheatManager_ATFrameRateFixed) == 0x000004, "Wrong size on ATCheatManager_ATFrameRateFixed");
static_assert(offsetof(ATCheatManager_ATFrameRateFixed, InFrameRate) == 0x000000, "Member 'ATCheatManager_ATFrameRateFixed::InFrameRate' has a wrong offset!");

// Function AT.ATCheatManager.ATFrameRateVariable
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATFrameRateVariable final
{
public:
	int32                                         InFrameRate;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATFrameRateVariable) == 0x000004, "Wrong alignment on ATCheatManager_ATFrameRateVariable");
static_assert(sizeof(ATCheatManager_ATFrameRateVariable) == 0x000004, "Wrong size on ATCheatManager_ATFrameRateVariable");
static_assert(offsetof(ATCheatManager_ATFrameRateVariable, InFrameRate) == 0x000000, "Member 'ATCheatManager_ATFrameRateVariable::InFrameRate' has a wrong offset!");

// Function AT.ATCheatManager.ATHuntingDinoAble
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATHuntingDinoAble final
{
public:
	bool                                          Src;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATHuntingDinoAble) == 0x000001, "Wrong alignment on ATCheatManager_ATHuntingDinoAble");
static_assert(sizeof(ATCheatManager_ATHuntingDinoAble) == 0x000001, "Wrong size on ATCheatManager_ATHuntingDinoAble");
static_assert(offsetof(ATCheatManager_ATHuntingDinoAble, Src) == 0x000000, "Member 'ATCheatManager_ATHuntingDinoAble::Src' has a wrong offset!");

// Function AT.ATCheatManager.ATKpiBNIDEntryTips_A_Option
// 0x0014 (0x0014 - 0x0000)
struct ATCheatManager_ATKpiBNIDEntryTips_A_Option final
{
public:
	int32                                         InCompressionSettings;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLODGroup;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFilter;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoTiling;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSRGB;                                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverStream;                                      // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InFix64Scale;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATKpiBNIDEntryTips_A_Option) == 0x000004, "Wrong alignment on ATCheatManager_ATKpiBNIDEntryTips_A_Option");
static_assert(sizeof(ATCheatManager_ATKpiBNIDEntryTips_A_Option) == 0x000014, "Wrong size on ATCheatManager_ATKpiBNIDEntryTips_A_Option");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_A_Option, InCompressionSettings) == 0x000000, "Member 'ATCheatManager_ATKpiBNIDEntryTips_A_Option::InCompressionSettings' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_A_Option, InLODGroup) == 0x000004, "Member 'ATCheatManager_ATKpiBNIDEntryTips_A_Option::InLODGroup' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_A_Option, InFilter) == 0x000008, "Member 'ATCheatManager_ATKpiBNIDEntryTips_A_Option::InFilter' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_A_Option, bNoTiling) == 0x00000C, "Member 'ATCheatManager_ATKpiBNIDEntryTips_A_Option::bNoTiling' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_A_Option, bSRGB) == 0x00000D, "Member 'ATCheatManager_ATKpiBNIDEntryTips_A_Option::bSRGB' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_A_Option, bNeverStream) == 0x00000E, "Member 'ATCheatManager_ATKpiBNIDEntryTips_A_Option::bNeverStream' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_A_Option, InFix64Scale) == 0x000010, "Member 'ATCheatManager_ATKpiBNIDEntryTips_A_Option::InFix64Scale' has a wrong offset!");

// Function AT.ATCheatManager.ATKpiBNIDEntryTips_A_Size
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATKpiBNIDEntryTips_A_Size final
{
public:
	int32                                         InFix64Scale;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATKpiBNIDEntryTips_A_Size) == 0x000004, "Wrong alignment on ATCheatManager_ATKpiBNIDEntryTips_A_Size");
static_assert(sizeof(ATCheatManager_ATKpiBNIDEntryTips_A_Size) == 0x000004, "Wrong size on ATCheatManager_ATKpiBNIDEntryTips_A_Size");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_A_Size, InFix64Scale) == 0x000000, "Member 'ATCheatManager_ATKpiBNIDEntryTips_A_Size::InFix64Scale' has a wrong offset!");

// Function AT.ATCheatManager.ATKpiBNIDEntryTips_B_Option
// 0x0018 (0x0018 - 0x0000)
struct ATCheatManager_ATKpiBNIDEntryTips_B_Option final
{
public:
	int32                                         InCompressionSettings;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLODGroup;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFilter;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoTiling;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSRGB;                                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverStream;                                      // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSize;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFix64Scale;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATKpiBNIDEntryTips_B_Option) == 0x000004, "Wrong alignment on ATCheatManager_ATKpiBNIDEntryTips_B_Option");
static_assert(sizeof(ATCheatManager_ATKpiBNIDEntryTips_B_Option) == 0x000018, "Wrong size on ATCheatManager_ATKpiBNIDEntryTips_B_Option");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Option, InCompressionSettings) == 0x000000, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Option::InCompressionSettings' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Option, InLODGroup) == 0x000004, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Option::InLODGroup' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Option, InFilter) == 0x000008, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Option::InFilter' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Option, bNoTiling) == 0x00000C, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Option::bNoTiling' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Option, bSRGB) == 0x00000D, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Option::bSRGB' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Option, bNeverStream) == 0x00000E, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Option::bNeverStream' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Option, InSize) == 0x000010, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Option::InSize' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Option, InFix64Scale) == 0x000014, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Option::InFix64Scale' has a wrong offset!");

// Function AT.ATCheatManager.ATKpiBNIDEntryTips_B_Size
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATKpiBNIDEntryTips_B_Size final
{
public:
	int32                                         InSize;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFix64Scale;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATKpiBNIDEntryTips_B_Size) == 0x000004, "Wrong alignment on ATCheatManager_ATKpiBNIDEntryTips_B_Size");
static_assert(sizeof(ATCheatManager_ATKpiBNIDEntryTips_B_Size) == 0x000008, "Wrong size on ATCheatManager_ATKpiBNIDEntryTips_B_Size");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Size, InSize) == 0x000000, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Size::InSize' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_B_Size, InFix64Scale) == 0x000004, "Member 'ATCheatManager_ATKpiBNIDEntryTips_B_Size::InFix64Scale' has a wrong offset!");

// Function AT.ATCheatManager.ATKpiBNIDEntryTips_C_Option
// 0x0018 (0x0018 - 0x0000)
struct ATCheatManager_ATKpiBNIDEntryTips_C_Option final
{
public:
	int32                                         InCompressionSettings;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLODGroup;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFilter;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoTiling;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSRGB;                                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverStream;                                      // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSize;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFix64Scale;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATKpiBNIDEntryTips_C_Option) == 0x000004, "Wrong alignment on ATCheatManager_ATKpiBNIDEntryTips_C_Option");
static_assert(sizeof(ATCheatManager_ATKpiBNIDEntryTips_C_Option) == 0x000018, "Wrong size on ATCheatManager_ATKpiBNIDEntryTips_C_Option");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Option, InCompressionSettings) == 0x000000, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Option::InCompressionSettings' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Option, InLODGroup) == 0x000004, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Option::InLODGroup' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Option, InFilter) == 0x000008, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Option::InFilter' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Option, bNoTiling) == 0x00000C, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Option::bNoTiling' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Option, bSRGB) == 0x00000D, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Option::bSRGB' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Option, bNeverStream) == 0x00000E, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Option::bNeverStream' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Option, InSize) == 0x000010, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Option::InSize' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Option, InFix64Scale) == 0x000014, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Option::InFix64Scale' has a wrong offset!");

// Function AT.ATCheatManager.ATKpiBNIDEntryTips_C_Size
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATKpiBNIDEntryTips_C_Size final
{
public:
	int32                                         InSize;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFix64Scale;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATKpiBNIDEntryTips_C_Size) == 0x000004, "Wrong alignment on ATCheatManager_ATKpiBNIDEntryTips_C_Size");
static_assert(sizeof(ATCheatManager_ATKpiBNIDEntryTips_C_Size) == 0x000008, "Wrong size on ATCheatManager_ATKpiBNIDEntryTips_C_Size");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Size, InSize) == 0x000000, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Size::InSize' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATKpiBNIDEntryTips_C_Size, InFix64Scale) == 0x000004, "Member 'ATCheatManager_ATKpiBNIDEntryTips_C_Size::InFix64Scale' has a wrong offset!");

// Function AT.ATCheatManager.ATKpiLogin
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATKpiLogin final
{
public:
	bool                                          IsLogIn;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATKpiLogin) == 0x000001, "Wrong alignment on ATCheatManager_ATKpiLogin");
static_assert(sizeof(ATCheatManager_ATKpiLogin) == 0x000001, "Wrong size on ATCheatManager_ATKpiLogin");
static_assert(offsetof(ATCheatManager_ATKpiLogin, IsLogIn) == 0x000000, "Member 'ATCheatManager_ATKpiLogin::IsLogIn' has a wrong offset!");

// Function AT.ATCheatManager.ATLoadSubLevel
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATLoadSubLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATLoadSubLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATLoadSubLevel");
static_assert(sizeof(ATCheatManager_ATLoadSubLevel) == 0x000008, "Wrong size on ATCheatManager_ATLoadSubLevel");
static_assert(offsetof(ATCheatManager_ATLoadSubLevel, LevelName) == 0x000000, "Member 'ATCheatManager_ATLoadSubLevel::LevelName' has a wrong offset!");

// Function AT.ATCheatManager.ATMiniGameTestStart
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATMiniGameTestStart final
{
public:
	int32                                         MiniGamaType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATMiniGameTestStart) == 0x000004, "Wrong alignment on ATCheatManager_ATMiniGameTestStart");
static_assert(sizeof(ATCheatManager_ATMiniGameTestStart) == 0x000004, "Wrong size on ATCheatManager_ATMiniGameTestStart");
static_assert(offsetof(ATCheatManager_ATMiniGameTestStart, MiniGamaType) == 0x000000, "Member 'ATCheatManager_ATMiniGameTestStart::MiniGamaType' has a wrong offset!");

// Function AT.ATCheatManager.ATMoveToActionPoint
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATMoveToActionPoint final
{
public:
	int32                                         InMethodNum;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATMoveToActionPoint) == 0x000004, "Wrong alignment on ATCheatManager_ATMoveToActionPoint");
static_assert(sizeof(ATCheatManager_ATMoveToActionPoint) == 0x000004, "Wrong size on ATCheatManager_ATMoveToActionPoint");
static_assert(offsetof(ATCheatManager_ATMoveToActionPoint, InMethodNum) == 0x000000, "Member 'ATCheatManager_ATMoveToActionPoint::InMethodNum' has a wrong offset!");

// Function AT.ATCheatManager.ATRingoutTest
// 0x0001 (0x0001 - 0x0000)
struct ATCheatManager_ATRingoutTest final
{
public:
	uint8                                         InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATRingoutTest) == 0x000001, "Wrong alignment on ATCheatManager_ATRingoutTest");
static_assert(sizeof(ATCheatManager_ATRingoutTest) == 0x000001, "Wrong size on ATCheatManager_ATRingoutTest");
static_assert(offsetof(ATCheatManager_ATRingoutTest, InType) == 0x000000, "Member 'ATCheatManager_ATRingoutTest::InType' has a wrong offset!");

// Function AT.ATCheatManager.ATSetBattleTime
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATSetBattleTime final
{
public:
	float                                         InRequestedBattleTime;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATSetBattleTime) == 0x000004, "Wrong alignment on ATCheatManager_ATSetBattleTime");
static_assert(sizeof(ATCheatManager_ATSetBattleTime) == 0x000004, "Wrong size on ATCheatManager_ATSetBattleTime");
static_assert(offsetof(ATCheatManager_ATSetBattleTime, InRequestedBattleTime) == 0x000000, "Member 'ATCheatManager_ATSetBattleTime::InRequestedBattleTime' has a wrong offset!");

// Function AT.ATCheatManager.ATSetEventBattleRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct ATCheatManager_ATSetEventBattleRemainingTime final
{
public:
	float                                         InRequestedTimeRemaining;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATSetEventBattleRemainingTime) == 0x000004, "Wrong alignment on ATCheatManager_ATSetEventBattleRemainingTime");
static_assert(sizeof(ATCheatManager_ATSetEventBattleRemainingTime) == 0x000004, "Wrong size on ATCheatManager_ATSetEventBattleRemainingTime");
static_assert(offsetof(ATCheatManager_ATSetEventBattleRemainingTime, InRequestedTimeRemaining) == 0x000000, "Member 'ATCheatManager_ATSetEventBattleRemainingTime::InRequestedTimeRemaining' has a wrong offset!");

// Function AT.ATCheatManager.ATSetProgress
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATSetProgress final
{
public:
	class FName                                   Progress;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase_no;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATCheatManager_ATSetProgress) == 0x000004, "Wrong alignment on ATCheatManager_ATSetProgress");
static_assert(sizeof(ATCheatManager_ATSetProgress) == 0x000010, "Wrong size on ATCheatManager_ATSetProgress");
static_assert(offsetof(ATCheatManager_ATSetProgress, Progress) == 0x000000, "Member 'ATCheatManager_ATSetProgress::Progress' has a wrong offset!");
static_assert(offsetof(ATCheatManager_ATSetProgress, Phase_no) == 0x000008, "Member 'ATCheatManager_ATSetProgress::Phase_no' has a wrong offset!");

// Function AT.ATCheatManager.ATShowNearestActionPoint
// 0x0010 (0x0010 - 0x0000)
struct ATCheatManager_ATShowNearestActionPoint final
{
public:
	class FString                                 InFunctionName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATShowNearestActionPoint) == 0x000008, "Wrong alignment on ATCheatManager_ATShowNearestActionPoint");
static_assert(sizeof(ATCheatManager_ATShowNearestActionPoint) == 0x000010, "Wrong size on ATCheatManager_ATShowNearestActionPoint");
static_assert(offsetof(ATCheatManager_ATShowNearestActionPoint, InFunctionName) == 0x000000, "Member 'ATCheatManager_ATShowNearestActionPoint::InFunctionName' has a wrong offset!");

// Function AT.ATCheatManager.ATUnloadSubLevel
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_ATUnloadSubLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_ATUnloadSubLevel) == 0x000004, "Wrong alignment on ATCheatManager_ATUnloadSubLevel");
static_assert(sizeof(ATCheatManager_ATUnloadSubLevel) == 0x000008, "Wrong size on ATCheatManager_ATUnloadSubLevel");
static_assert(offsetof(ATCheatManager_ATUnloadSubLevel, LevelName) == 0x000000, "Member 'ATCheatManager_ATUnloadSubLevel::LevelName' has a wrong offset!");

// Function AT.ATCheatManager.OnLoadedCharacter
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_OnLoadedCharacter final
{
public:
	class UATDataAssetCharacterAsyncLoad*         CharLoad;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_OnLoadedCharacter) == 0x000008, "Wrong alignment on ATCheatManager_OnLoadedCharacter");
static_assert(sizeof(ATCheatManager_OnLoadedCharacter) == 0x000008, "Wrong size on ATCheatManager_OnLoadedCharacter");
static_assert(offsetof(ATCheatManager_OnLoadedCharacter, CharLoad) == 0x000000, "Member 'ATCheatManager_OnLoadedCharacter::CharLoad' has a wrong offset!");

// Function AT.ATCheatManager.OnVisibledLevel
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_OnVisibledLevel final
{
public:
	class FName                                   InDemoName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_OnVisibledLevel) == 0x000004, "Wrong alignment on ATCheatManager_OnVisibledLevel");
static_assert(sizeof(ATCheatManager_OnVisibledLevel) == 0x000008, "Wrong size on ATCheatManager_OnVisibledLevel");
static_assert(offsetof(ATCheatManager_OnVisibledLevel, InDemoName) == 0x000000, "Member 'ATCheatManager_OnVisibledLevel::InDemoName' has a wrong offset!");

// Function AT.ATCheatManager.OnVisibledLevelByProgress
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_OnVisibledLevelByProgress final
{
public:
	class FName                                   InDemoName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_OnVisibledLevelByProgress) == 0x000004, "Wrong alignment on ATCheatManager_OnVisibledLevelByProgress");
static_assert(sizeof(ATCheatManager_OnVisibledLevelByProgress) == 0x000008, "Wrong size on ATCheatManager_OnVisibledLevelByProgress");
static_assert(offsetof(ATCheatManager_OnVisibledLevelByProgress, InDemoName) == 0x000000, "Member 'ATCheatManager_OnVisibledLevelByProgress::InDemoName' has a wrong offset!");

// Function AT.ATCheatManager.RequestDemoOnLevelVisible
// 0x0008 (0x0008 - 0x0000)
struct ATCheatManager_RequestDemoOnLevelVisible final
{
public:
	class ULevelStreaming*                        LevelStreaming;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCheatManager_RequestDemoOnLevelVisible) == 0x000008, "Wrong alignment on ATCheatManager_RequestDemoOnLevelVisible");
static_assert(sizeof(ATCheatManager_RequestDemoOnLevelVisible) == 0x000008, "Wrong size on ATCheatManager_RequestDemoOnLevelVisible");
static_assert(offsetof(ATCheatManager_RequestDemoOnLevelVisible, LevelStreaming) == 0x000000, "Member 'ATCheatManager_RequestDemoOnLevelVisible::LevelStreaming' has a wrong offset!");

// Function AT.ShopComponent.GotoSimulationBattleField
// 0x0008 (0x0008 - 0x0000)
struct ShopComponent_GotoSimulationBattleField final
{
public:
	class FName                                   EventBattleID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopComponent_GotoSimulationBattleField) == 0x000004, "Wrong alignment on ShopComponent_GotoSimulationBattleField");
static_assert(sizeof(ShopComponent_GotoSimulationBattleField) == 0x000008, "Wrong size on ShopComponent_GotoSimulationBattleField");
static_assert(offsetof(ShopComponent_GotoSimulationBattleField, EventBattleID) == 0x000000, "Member 'ShopComponent_GotoSimulationBattleField::EventBattleID' has a wrong offset!");

// Function AT.ShopComponent.GotoTrainingRoomBattleField
// 0x0008 (0x0008 - 0x0000)
struct ShopComponent_GotoTrainingRoomBattleField final
{
public:
	class FName                                   EventBattleID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopComponent_GotoTrainingRoomBattleField) == 0x000004, "Wrong alignment on ShopComponent_GotoTrainingRoomBattleField");
static_assert(sizeof(ShopComponent_GotoTrainingRoomBattleField) == 0x000008, "Wrong size on ShopComponent_GotoTrainingRoomBattleField");
static_assert(offsetof(ShopComponent_GotoTrainingRoomBattleField, EventBattleID) == 0x000000, "Member 'ShopComponent_GotoTrainingRoomBattleField::EventBattleID' has a wrong offset!");

// Function AT.ShopComponent.OnLoadWidget
// 0x0008 (0x0008 - 0x0000)
struct ShopComponent_OnLoadWidget final
{
public:
	class UATDataAssetUiAsyncLoad*                InLoader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopComponent_OnLoadWidget) == 0x000008, "Wrong alignment on ShopComponent_OnLoadWidget");
static_assert(sizeof(ShopComponent_OnLoadWidget) == 0x000008, "Wrong size on ShopComponent_OnLoadWidget");
static_assert(offsetof(ShopComponent_OnLoadWidget, InLoader) == 0x000000, "Member 'ShopComponent_OnLoadWidget::InLoader' has a wrong offset!");

// Function AT.CostumeLoader.OnLoadedFacial
// 0x0008 (0x0008 - 0x0000)
struct CostumeLoader_OnLoadedFacial final
{
public:
	class UATDataAssetFacialAsyncLoad*            Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CostumeLoader_OnLoadedFacial) == 0x000008, "Wrong alignment on CostumeLoader_OnLoadedFacial");
static_assert(sizeof(CostumeLoader_OnLoadedFacial) == 0x000008, "Wrong size on CostumeLoader_OnLoadedFacial");
static_assert(offsetof(CostumeLoader_OnLoadedFacial, Target) == 0x000000, "Member 'CostumeLoader_OnLoadedFacial::Target' has a wrong offset!");

// Function AT.CostumeLoader.OnLoadedForm
// 0x0008 (0x0008 - 0x0000)
struct CostumeLoader_OnLoadedForm final
{
public:
	class UATDataAssetFormMeshAsyncLoad*          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CostumeLoader_OnLoadedForm) == 0x000008, "Wrong alignment on CostumeLoader_OnLoadedForm");
static_assert(sizeof(CostumeLoader_OnLoadedForm) == 0x000008, "Wrong size on CostumeLoader_OnLoadedForm");
static_assert(offsetof(CostumeLoader_OnLoadedForm, Target) == 0x000000, "Member 'CostumeLoader_OnLoadedForm::Target' has a wrong offset!");

// Function AT.CostumeLoader.OnLoadedVariation
// 0x0008 (0x0008 - 0x0000)
struct CostumeLoader_OnLoadedVariation final
{
public:
	class UATDataAssetVariationMeshAsyncLoad*     Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CostumeLoader_OnLoadedVariation) == 0x000008, "Wrong alignment on CostumeLoader_OnLoadedVariation");
static_assert(sizeof(CostumeLoader_OnLoadedVariation) == 0x000008, "Wrong size on CostumeLoader_OnLoadedVariation");
static_assert(offsetof(CostumeLoader_OnLoadedVariation, Target) == 0x000000, "Member 'CostumeLoader_OnLoadedVariation::Target' has a wrong offset!");

// Function AT.QuestManager.GetQuestDebugConfigId
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_GetQuestDebugConfigId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestDebugConfigId) == 0x000004, "Wrong alignment on QuestManager_GetQuestDebugConfigId");
static_assert(sizeof(QuestManager_GetQuestDebugConfigId) == 0x000008, "Wrong size on QuestManager_GetQuestDebugConfigId");
static_assert(offsetof(QuestManager_GetQuestDebugConfigId, ReturnValue) == 0x000000, "Member 'QuestManager_GetQuestDebugConfigId::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.GetQuestSymbol
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_GetQuestSymbol final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestSymbol) == 0x000004, "Wrong alignment on QuestManager_GetQuestSymbol");
static_assert(sizeof(QuestManager_GetQuestSymbol) == 0x000008, "Wrong size on QuestManager_GetQuestSymbol");
static_assert(offsetof(QuestManager_GetQuestSymbol, ReturnValue) == 0x000000, "Member 'QuestManager_GetQuestSymbol::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.SetQuestDebugConfigId
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_SetQuestDebugConfigId final
{
public:
	class FName                                   InConfigId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_SetQuestDebugConfigId) == 0x000004, "Wrong alignment on QuestManager_SetQuestDebugConfigId");
static_assert(sizeof(QuestManager_SetQuestDebugConfigId) == 0x000008, "Wrong size on QuestManager_SetQuestDebugConfigId");
static_assert(offsetof(QuestManager_SetQuestDebugConfigId, InConfigId) == 0x000000, "Member 'QuestManager_SetQuestDebugConfigId::InConfigId' has a wrong offset!");

// Function AT.QuestManager.SetQuestSymbol
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_SetQuestSymbol final
{
public:
	class FName                                   InSymbol;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_SetQuestSymbol) == 0x000004, "Wrong alignment on QuestManager_SetQuestSymbol");
static_assert(sizeof(QuestManager_SetQuestSymbol) == 0x000008, "Wrong size on QuestManager_SetQuestSymbol");
static_assert(offsetof(QuestManager_SetQuestSymbol, InSymbol) == 0x000000, "Member 'QuestManager_SetQuestSymbol::InSymbol' has a wrong offset!");

// Function AT.QuestManager.AddQuestActor
// 0x0020 (0x0020 - 0x0000)
struct QuestManager_AddQuestActor final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group_name;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeHeadupIcon;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_AddQuestActor) == 0x000008, "Wrong alignment on QuestManager_AddQuestActor");
static_assert(sizeof(QuestManager_AddQuestActor) == 0x000020, "Wrong size on QuestManager_AddQuestActor");
static_assert(offsetof(QuestManager_AddQuestActor, Quest_id) == 0x000000, "Member 'QuestManager_AddQuestActor::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestActor, Actor) == 0x000008, "Member 'QuestManager_AddQuestActor::Actor' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestActor, Group_name) == 0x000010, "Member 'QuestManager_AddQuestActor::Group_name' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestActor, bChangeHeadupIcon) == 0x000018, "Member 'QuestManager_AddQuestActor::bChangeHeadupIcon' has a wrong offset!");

// Function AT.QuestManager.AddQuestActorName
// 0x0020 (0x0020 - 0x0000)
struct QuestManager_AddQuestActorName final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor_name;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group_name;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeHeadupIcon;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_AddQuestActorName) == 0x000004, "Wrong alignment on QuestManager_AddQuestActorName");
static_assert(sizeof(QuestManager_AddQuestActorName) == 0x000020, "Wrong size on QuestManager_AddQuestActorName");
static_assert(offsetof(QuestManager_AddQuestActorName, Quest_id) == 0x000000, "Member 'QuestManager_AddQuestActorName::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestActorName, Actor_name) == 0x000008, "Member 'QuestManager_AddQuestActorName::Actor_name' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestActorName, Group_name) == 0x000010, "Member 'QuestManager_AddQuestActorName::Group_name' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestActorName, bChangeHeadupIcon) == 0x000018, "Member 'QuestManager_AddQuestActorName::bChangeHeadupIcon' has a wrong offset!");

// Function AT.QuestManager.AddQuestNameInMap
// 0x0018 (0x0018 - 0x0000)
struct QuestManager_AddQuestNameInMap final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_GENRE_TYPE                             QuestType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeHeadupIcon;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_AddQuestNameInMap) == 0x000004, "Wrong alignment on QuestManager_AddQuestNameInMap");
static_assert(sizeof(QuestManager_AddQuestNameInMap) == 0x000018, "Wrong size on QuestManager_AddQuestNameInMap");
static_assert(offsetof(QuestManager_AddQuestNameInMap, QuestId) == 0x000000, "Member 'QuestManager_AddQuestNameInMap::QuestId' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestNameInMap, ActorName) == 0x000008, "Member 'QuestManager_AddQuestNameInMap::ActorName' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestNameInMap, QuestType) == 0x000010, "Member 'QuestManager_AddQuestNameInMap::QuestType' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestNameInMap, bChangeHeadupIcon) == 0x000011, "Member 'QuestManager_AddQuestNameInMap::bChangeHeadupIcon' has a wrong offset!");

// Function AT.QuestManager.AddSubQuestActor
// 0x0018 (0x0018 - 0x0000)
struct QuestManager_AddSubQuestActor final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor_name;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeHeadupIcon;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenIcon;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_AddSubQuestActor) == 0x000004, "Wrong alignment on QuestManager_AddSubQuestActor");
static_assert(sizeof(QuestManager_AddSubQuestActor) == 0x000018, "Wrong size on QuestManager_AddSubQuestActor");
static_assert(offsetof(QuestManager_AddSubQuestActor, Quest_id) == 0x000000, "Member 'QuestManager_AddSubQuestActor::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_AddSubQuestActor, Actor_name) == 0x000008, "Member 'QuestManager_AddSubQuestActor::Actor_name' has a wrong offset!");
static_assert(offsetof(QuestManager_AddSubQuestActor, bChangeHeadupIcon) == 0x000010, "Member 'QuestManager_AddSubQuestActor::bChangeHeadupIcon' has a wrong offset!");
static_assert(offsetof(QuestManager_AddSubQuestActor, bHiddenIcon) == 0x000011, "Member 'QuestManager_AddSubQuestActor::bHiddenIcon' has a wrong offset!");

// Function AT.QuestManager.ExtendPhaseChangeTiming
// 0x0004 (0x0004 - 0x0000)
struct QuestManager_ExtendPhaseChangeTiming final
{
public:
	int32                                         PhaseNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_ExtendPhaseChangeTiming) == 0x000004, "Wrong alignment on QuestManager_ExtendPhaseChangeTiming");
static_assert(sizeof(QuestManager_ExtendPhaseChangeTiming) == 0x000004, "Wrong size on QuestManager_ExtendPhaseChangeTiming");
static_assert(offsetof(QuestManager_ExtendPhaseChangeTiming, PhaseNo) == 0x000000, "Member 'QuestManager_ExtendPhaseChangeTiming::PhaseNo' has a wrong offset!");

// Function AT.QuestManager.ExtendProgressChangeTiming
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_ExtendProgressChangeTiming final
{
public:
	class FName                                   NextProgressName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_ExtendProgressChangeTiming) == 0x000004, "Wrong alignment on QuestManager_ExtendProgressChangeTiming");
static_assert(sizeof(QuestManager_ExtendProgressChangeTiming) == 0x000008, "Wrong size on QuestManager_ExtendProgressChangeTiming");
static_assert(offsetof(QuestManager_ExtendProgressChangeTiming, NextProgressName) == 0x000000, "Member 'QuestManager_ExtendProgressChangeTiming::NextProgressName' has a wrong offset!");

// Function AT.QuestManager.GetActorByFindListId
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetActorByFindListId final
{
public:
	class FName                                   FindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetActorByFindListId) == 0x000008, "Wrong alignment on QuestManager_GetActorByFindListId");
static_assert(sizeof(QuestManager_GetActorByFindListId) == 0x000010, "Wrong size on QuestManager_GetActorByFindListId");
static_assert(offsetof(QuestManager_GetActorByFindListId, FindId) == 0x000000, "Member 'QuestManager_GetActorByFindListId::FindId' has a wrong offset!");
static_assert(offsetof(QuestManager_GetActorByFindListId, ReturnValue) == 0x000008, "Member 'QuestManager_GetActorByFindListId::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.GetActorByType
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetActorByType final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetActorByType) == 0x000008, "Wrong alignment on QuestManager_GetActorByType");
static_assert(sizeof(QuestManager_GetActorByType) == 0x000010, "Wrong size on QuestManager_GetActorByType");
static_assert(offsetof(QuestManager_GetActorByType, CharacterType) == 0x000000, "Member 'QuestManager_GetActorByType::CharacterType' has a wrong offset!");
static_assert(offsetof(QuestManager_GetActorByType, ReturnValue) == 0x000008, "Member 'QuestManager_GetActorByType::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.GetAutoTurnCameraSeconds
// 0x0004 (0x0004 - 0x0000)
struct QuestManager_GetAutoTurnCameraSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetAutoTurnCameraSeconds) == 0x000004, "Wrong alignment on QuestManager_GetAutoTurnCameraSeconds");
static_assert(sizeof(QuestManager_GetAutoTurnCameraSeconds) == 0x000004, "Wrong size on QuestManager_GetAutoTurnCameraSeconds");
static_assert(offsetof(QuestManager_GetAutoTurnCameraSeconds, ReturnValue) == 0x000000, "Member 'QuestManager_GetAutoTurnCameraSeconds::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.GetBlockingVolumeCameraSeconds
// 0x0004 (0x0004 - 0x0000)
struct QuestManager_GetBlockingVolumeCameraSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetBlockingVolumeCameraSeconds) == 0x000004, "Wrong alignment on QuestManager_GetBlockingVolumeCameraSeconds");
static_assert(sizeof(QuestManager_GetBlockingVolumeCameraSeconds) == 0x000004, "Wrong size on QuestManager_GetBlockingVolumeCameraSeconds");
static_assert(offsetof(QuestManager_GetBlockingVolumeCameraSeconds, ReturnValue) == 0x000000, "Member 'QuestManager_GetBlockingVolumeCameraSeconds::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.GetCharacterFindList
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetCharacterFindList final
{
public:
	class FName                                   FindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AQuestCharacter*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetCharacterFindList) == 0x000008, "Wrong alignment on QuestManager_GetCharacterFindList");
static_assert(sizeof(QuestManager_GetCharacterFindList) == 0x000010, "Wrong size on QuestManager_GetCharacterFindList");
static_assert(offsetof(QuestManager_GetCharacterFindList, FindId) == 0x000000, "Member 'QuestManager_GetCharacterFindList::FindId' has a wrong offset!");
static_assert(offsetof(QuestManager_GetCharacterFindList, ReturnValue) == 0x000008, "Member 'QuestManager_GetCharacterFindList::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.GetPhaseId
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetPhaseId final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetPhaseId) == 0x000004, "Wrong alignment on QuestManager_GetPhaseId");
static_assert(sizeof(QuestManager_GetPhaseId) == 0x000010, "Wrong size on QuestManager_GetPhaseId");
static_assert(offsetof(QuestManager_GetPhaseId, QuestId) == 0x000000, "Member 'QuestManager_GetPhaseId::QuestId' has a wrong offset!");
static_assert(offsetof(QuestManager_GetPhaseId, ReturnValue) == 0x000008, "Member 'QuestManager_GetPhaseId::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.IsActiveQuest
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_IsActiveQuest final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_IsActiveQuest) == 0x000004, "Wrong alignment on QuestManager_IsActiveQuest");
static_assert(sizeof(QuestManager_IsActiveQuest) == 0x000010, "Wrong size on QuestManager_IsActiveQuest");
static_assert(offsetof(QuestManager_IsActiveQuest, Quest_id) == 0x000000, "Member 'QuestManager_IsActiveQuest::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_IsActiveQuest, ReturnValue) == 0x000008, "Member 'QuestManager_IsActiveQuest::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.IsEnableOrderQuest
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_IsEnableOrderQuest final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_IsEnableOrderQuest) == 0x000004, "Wrong alignment on QuestManager_IsEnableOrderQuest");
static_assert(sizeof(QuestManager_IsEnableOrderQuest) == 0x000010, "Wrong size on QuestManager_IsEnableOrderQuest");
static_assert(offsetof(QuestManager_IsEnableOrderQuest, Quest_id) == 0x000000, "Member 'QuestManager_IsEnableOrderQuest::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_IsEnableOrderQuest, ReturnValue) == 0x000008, "Member 'QuestManager_IsEnableOrderQuest::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.IsQuestEndPhase
// 0x0018 (0x0018 - 0x0000)
struct QuestManager_IsQuestEndPhase final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Phase_id;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_IsQuestEndPhase) == 0x000004, "Wrong alignment on QuestManager_IsQuestEndPhase");
static_assert(sizeof(QuestManager_IsQuestEndPhase) == 0x000018, "Wrong size on QuestManager_IsQuestEndPhase");
static_assert(offsetof(QuestManager_IsQuestEndPhase, Quest_id) == 0x000000, "Member 'QuestManager_IsQuestEndPhase::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_IsQuestEndPhase, Phase_id) == 0x000008, "Member 'QuestManager_IsQuestEndPhase::Phase_id' has a wrong offset!");
static_assert(offsetof(QuestManager_IsQuestEndPhase, ReturnValue) == 0x000010, "Member 'QuestManager_IsQuestEndPhase::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.IsRepeatQuest
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_IsRepeatQuest final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_IsRepeatQuest) == 0x000004, "Wrong alignment on QuestManager_IsRepeatQuest");
static_assert(sizeof(QuestManager_IsRepeatQuest) == 0x000010, "Wrong size on QuestManager_IsRepeatQuest");
static_assert(offsetof(QuestManager_IsRepeatQuest, Quest_id) == 0x000000, "Member 'QuestManager_IsRepeatQuest::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_IsRepeatQuest, ReturnValue) == 0x000008, "Member 'QuestManager_IsRepeatQuest::ReturnValue' has a wrong offset!");

// Function AT.QuestManager.OnChangedProgress
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_OnChangedProgress final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_OnChangedProgress) == 0x000004, "Wrong alignment on QuestManager_OnChangedProgress");
static_assert(sizeof(QuestManager_OnChangedProgress) == 0x000008, "Wrong size on QuestManager_OnChangedProgress");
static_assert(offsetof(QuestManager_OnChangedProgress, ProgressID) == 0x000000, "Member 'QuestManager_OnChangedProgress::ProgressID' has a wrong offset!");

// Function AT.QuestManager.OnCompletedInitialize
// 0x0108 (0x0108 - 0x0000)
struct QuestManager_OnCompletedInitialize final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_OnCompletedInitialize) == 0x000008, "Wrong alignment on QuestManager_OnCompletedInitialize");
static_assert(sizeof(QuestManager_OnCompletedInitialize) == 0x000108, "Wrong size on QuestManager_OnCompletedInitialize");
static_assert(offsetof(QuestManager_OnCompletedInitialize, EventParam) == 0x000000, "Member 'QuestManager_OnCompletedInitialize::EventParam' has a wrong offset!");

// Function AT.QuestManager.OnEndTalkMiniQuest
// 0x0108 (0x0108 - 0x0000)
struct QuestManager_OnEndTalkMiniQuest final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_OnEndTalkMiniQuest) == 0x000008, "Wrong alignment on QuestManager_OnEndTalkMiniQuest");
static_assert(sizeof(QuestManager_OnEndTalkMiniQuest) == 0x000108, "Wrong size on QuestManager_OnEndTalkMiniQuest");
static_assert(offsetof(QuestManager_OnEndTalkMiniQuest, EventParam) == 0x000000, "Member 'QuestManager_OnEndTalkMiniQuest::EventParam' has a wrong offset!");

// Function AT.QuestManager.OnLoadComplete
// 0x0108 (0x0108 - 0x0000)
struct QuestManager_OnLoadComplete final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_OnLoadComplete) == 0x000008, "Wrong alignment on QuestManager_OnLoadComplete");
static_assert(sizeof(QuestManager_OnLoadComplete) == 0x000108, "Wrong size on QuestManager_OnLoadComplete");
static_assert(offsetof(QuestManager_OnLoadComplete, EventParam) == 0x000000, "Member 'QuestManager_OnLoadComplete::EventParam' has a wrong offset!");

// Function AT.QuestManager.OnRideVehicle
// 0x0108 (0x0108 - 0x0000)
struct QuestManager_OnRideVehicle final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_OnRideVehicle) == 0x000008, "Wrong alignment on QuestManager_OnRideVehicle");
static_assert(sizeof(QuestManager_OnRideVehicle) == 0x000108, "Wrong size on QuestManager_OnRideVehicle");
static_assert(offsetof(QuestManager_OnRideVehicle, EventParam) == 0x000000, "Member 'QuestManager_OnRideVehicle::EventParam' has a wrong offset!");

// Function AT.QuestManager.OnSubQuestNavigationUpdate
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_OnSubQuestNavigationUpdate final
{
public:
	class FName                                   PhaseID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_PHASE_TYPE                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_OnSubQuestNavigationUpdate) == 0x000004, "Wrong alignment on QuestManager_OnSubQuestNavigationUpdate");
static_assert(sizeof(QuestManager_OnSubQuestNavigationUpdate) == 0x000010, "Wrong size on QuestManager_OnSubQuestNavigationUpdate");
static_assert(offsetof(QuestManager_OnSubQuestNavigationUpdate, PhaseID) == 0x000000, "Member 'QuestManager_OnSubQuestNavigationUpdate::PhaseID' has a wrong offset!");
static_assert(offsetof(QuestManager_OnSubQuestNavigationUpdate, Type) == 0x000008, "Member 'QuestManager_OnSubQuestNavigationUpdate::Type' has a wrong offset!");

// Function AT.QuestManager.PhaseChangeTiming
// 0x0004 (0x0004 - 0x0000)
struct QuestManager_PhaseChangeTiming final
{
public:
	int32                                         PhaseNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_PhaseChangeTiming) == 0x000004, "Wrong alignment on QuestManager_PhaseChangeTiming");
static_assert(sizeof(QuestManager_PhaseChangeTiming) == 0x000004, "Wrong size on QuestManager_PhaseChangeTiming");
static_assert(offsetof(QuestManager_PhaseChangeTiming, PhaseNo) == 0x000000, "Member 'QuestManager_PhaseChangeTiming::PhaseNo' has a wrong offset!");

// Function AT.QuestManager.ProgressChangeTiming
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_ProgressChangeTiming final
{
public:
	class FName                                   NextProgressName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_ProgressChangeTiming) == 0x000004, "Wrong alignment on QuestManager_ProgressChangeTiming");
static_assert(sizeof(QuestManager_ProgressChangeTiming) == 0x000008, "Wrong size on QuestManager_ProgressChangeTiming");
static_assert(offsetof(QuestManager_ProgressChangeTiming, NextProgressName) == 0x000000, "Member 'QuestManager_ProgressChangeTiming::NextProgressName' has a wrong offset!");

// Function AT.QuestManager.ProgressPhaseChangeTiming
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_ProgressPhaseChangeTiming final
{
public:
	class FName                                   New_name;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_ProgressPhaseChangeTiming) == 0x000004, "Wrong alignment on QuestManager_ProgressPhaseChangeTiming");
static_assert(sizeof(QuestManager_ProgressPhaseChangeTiming) == 0x000010, "Wrong size on QuestManager_ProgressPhaseChangeTiming");
static_assert(offsetof(QuestManager_ProgressPhaseChangeTiming, New_name) == 0x000000, "Member 'QuestManager_ProgressPhaseChangeTiming::New_name' has a wrong offset!");
static_assert(offsetof(QuestManager_ProgressPhaseChangeTiming, Phase) == 0x000008, "Member 'QuestManager_ProgressPhaseChangeTiming::Phase' has a wrong offset!");

// Function AT.QuestManager.QuestActorTiming
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_QuestActorTiming final
{
public:
	EQUEST_ACTOR_TIMING_TYPE                      Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_QuestActorTiming) == 0x000008, "Wrong alignment on QuestManager_QuestActorTiming");
static_assert(sizeof(QuestManager_QuestActorTiming) == 0x000010, "Wrong size on QuestManager_QuestActorTiming");
static_assert(offsetof(QuestManager_QuestActorTiming, Timing) == 0x000000, "Member 'QuestManager_QuestActorTiming::Timing' has a wrong offset!");
static_assert(offsetof(QuestManager_QuestActorTiming, InActor) == 0x000008, "Member 'QuestManager_QuestActorTiming::InActor' has a wrong offset!");

// Function AT.QuestManager.RemoveActiveMainQuestActor
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_RemoveActiveMainQuestActor final
{
public:
	class FName                                   Actor_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_RemoveActiveMainQuestActor) == 0x000004, "Wrong alignment on QuestManager_RemoveActiveMainQuestActor");
static_assert(sizeof(QuestManager_RemoveActiveMainQuestActor) == 0x000008, "Wrong size on QuestManager_RemoveActiveMainQuestActor");
static_assert(offsetof(QuestManager_RemoveActiveMainQuestActor, Actor_name) == 0x000000, "Member 'QuestManager_RemoveActiveMainQuestActor::Actor_name' has a wrong offset!");

// Function AT.QuestManager.RemoveActiveSubQuestActor
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_RemoveActiveSubQuestActor final
{
public:
	class FName                                   Actor_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_RemoveActiveSubQuestActor) == 0x000004, "Wrong alignment on QuestManager_RemoveActiveSubQuestActor");
static_assert(sizeof(QuestManager_RemoveActiveSubQuestActor) == 0x000008, "Wrong size on QuestManager_RemoveActiveSubQuestActor");
static_assert(offsetof(QuestManager_RemoveActiveSubQuestActor, Actor_name) == 0x000000, "Member 'QuestManager_RemoveActiveSubQuestActor::Actor_name' has a wrong offset!");

// Function AT.QuestManager.RemoveQuestActor
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_RemoveQuestActor final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_RemoveQuestActor) == 0x000008, "Wrong alignment on QuestManager_RemoveQuestActor");
static_assert(sizeof(QuestManager_RemoveQuestActor) == 0x000010, "Wrong size on QuestManager_RemoveQuestActor");
static_assert(offsetof(QuestManager_RemoveQuestActor, Quest_id) == 0x000000, "Member 'QuestManager_RemoveQuestActor::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_RemoveQuestActor, Actor) == 0x000008, "Member 'QuestManager_RemoveQuestActor::Actor' has a wrong offset!");

// Function AT.QuestManager.RemoveQuestActorName
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_RemoveQuestActorName final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Actor_name;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_RemoveQuestActorName) == 0x000004, "Wrong alignment on QuestManager_RemoveQuestActorName");
static_assert(sizeof(QuestManager_RemoveQuestActorName) == 0x000010, "Wrong size on QuestManager_RemoveQuestActorName");
static_assert(offsetof(QuestManager_RemoveQuestActorName, Quest_id) == 0x000000, "Member 'QuestManager_RemoveQuestActorName::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_RemoveQuestActorName, Actor_name) == 0x000008, "Member 'QuestManager_RemoveQuestActorName::Actor_name' has a wrong offset!");

// Function AT.QuestManager.RequestFadeAfterDemo
// 0x0018 (0x0018 - 0x0000)
struct QuestManager_RequestFadeAfterDemo final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_RequestFadeAfterDemo) == 0x000004, "Wrong alignment on QuestManager_RequestFadeAfterDemo");
static_assert(sizeof(QuestManager_RequestFadeAfterDemo) == 0x000018, "Wrong size on QuestManager_RequestFadeAfterDemo");
static_assert(offsetof(QuestManager_RequestFadeAfterDemo, DemoType) == 0x000000, "Member 'QuestManager_RequestFadeAfterDemo::DemoType' has a wrong offset!");
static_assert(offsetof(QuestManager_RequestFadeAfterDemo, DemoTiming) == 0x000001, "Member 'QuestManager_RequestFadeAfterDemo::DemoTiming' has a wrong offset!");
static_assert(offsetof(QuestManager_RequestFadeAfterDemo, DemoName) == 0x000008, "Member 'QuestManager_RequestFadeAfterDemo::DemoName' has a wrong offset!");
static_assert(offsetof(QuestManager_RequestFadeAfterDemo, ContinueFlag) == 0x000010, "Member 'QuestManager_RequestFadeAfterDemo::ContinueFlag' has a wrong offset!");

// Function AT.QuestManager.RequestFadeBeforeDemo
// 0x0018 (0x0018 - 0x0000)
struct QuestManager_RequestFadeBeforeDemo final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_RequestFadeBeforeDemo) == 0x000004, "Wrong alignment on QuestManager_RequestFadeBeforeDemo");
static_assert(sizeof(QuestManager_RequestFadeBeforeDemo) == 0x000018, "Wrong size on QuestManager_RequestFadeBeforeDemo");
static_assert(offsetof(QuestManager_RequestFadeBeforeDemo, DemoType) == 0x000000, "Member 'QuestManager_RequestFadeBeforeDemo::DemoType' has a wrong offset!");
static_assert(offsetof(QuestManager_RequestFadeBeforeDemo, DemoTiming) == 0x000001, "Member 'QuestManager_RequestFadeBeforeDemo::DemoTiming' has a wrong offset!");
static_assert(offsetof(QuestManager_RequestFadeBeforeDemo, DemoName) == 0x000008, "Member 'QuestManager_RequestFadeBeforeDemo::DemoName' has a wrong offset!");
static_assert(offsetof(QuestManager_RequestFadeBeforeDemo, ContinueFlag) == 0x000010, "Member 'QuestManager_RequestFadeBeforeDemo::ContinueFlag' has a wrong offset!");

// Function AT.QuestManager.ReserveQuestNotificationOrCrossTalk
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_ReserveQuestNotificationOrCrossTalk final
{
public:
	TArray<class FString>                         ActionCommands;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_ReserveQuestNotificationOrCrossTalk) == 0x000008, "Wrong alignment on QuestManager_ReserveQuestNotificationOrCrossTalk");
static_assert(sizeof(QuestManager_ReserveQuestNotificationOrCrossTalk) == 0x000010, "Wrong size on QuestManager_ReserveQuestNotificationOrCrossTalk");
static_assert(offsetof(QuestManager_ReserveQuestNotificationOrCrossTalk, ActionCommands) == 0x000000, "Member 'QuestManager_ReserveQuestNotificationOrCrossTalk::ActionCommands' has a wrong offset!");

// Function AT.QuestManager.SetAutoTurnCameraSeconds
// 0x0004 (0x0004 - 0x0000)
struct QuestManager_SetAutoTurnCameraSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_SetAutoTurnCameraSeconds) == 0x000004, "Wrong alignment on QuestManager_SetAutoTurnCameraSeconds");
static_assert(sizeof(QuestManager_SetAutoTurnCameraSeconds) == 0x000004, "Wrong size on QuestManager_SetAutoTurnCameraSeconds");
static_assert(offsetof(QuestManager_SetAutoTurnCameraSeconds, Seconds) == 0x000000, "Member 'QuestManager_SetAutoTurnCameraSeconds::Seconds' has a wrong offset!");

// Function AT.QuestManager.SetBlockingVolumeCameraSeconds
// 0x0004 (0x0004 - 0x0000)
struct QuestManager_SetBlockingVolumeCameraSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_SetBlockingVolumeCameraSeconds) == 0x000004, "Wrong alignment on QuestManager_SetBlockingVolumeCameraSeconds");
static_assert(sizeof(QuestManager_SetBlockingVolumeCameraSeconds) == 0x000004, "Wrong size on QuestManager_SetBlockingVolumeCameraSeconds");
static_assert(offsetof(QuestManager_SetBlockingVolumeCameraSeconds, Seconds) == 0x000000, "Member 'QuestManager_SetBlockingVolumeCameraSeconds::Seconds' has a wrong offset!");

// Function AT.QuestManager.SetForceEndPhase
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_SetForceEndPhase final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Phase_id;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_SetForceEndPhase) == 0x000004, "Wrong alignment on QuestManager_SetForceEndPhase");
static_assert(sizeof(QuestManager_SetForceEndPhase) == 0x000010, "Wrong size on QuestManager_SetForceEndPhase");
static_assert(offsetof(QuestManager_SetForceEndPhase, Quest_id) == 0x000000, "Member 'QuestManager_SetForceEndPhase::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_SetForceEndPhase, Phase_id) == 0x000008, "Member 'QuestManager_SetForceEndPhase::Phase_id' has a wrong offset!");

// Function AT.QuestManager.SubLevelBeginPlayTiming
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_SubLevelBeginPlayTiming final
{
public:
	class FName                                   SubLevelName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_SubLevelBeginPlayTiming) == 0x000004, "Wrong alignment on QuestManager_SubLevelBeginPlayTiming");
static_assert(sizeof(QuestManager_SubLevelBeginPlayTiming) == 0x000008, "Wrong size on QuestManager_SubLevelBeginPlayTiming");
static_assert(offsetof(QuestManager_SubLevelBeginPlayTiming, SubLevelName) == 0x000000, "Member 'QuestManager_SubLevelBeginPlayTiming::SubLevelName' has a wrong offset!");

// Function AT.QuestManager.IsClearedId
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_IsClearedId final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_IsClearedId) == 0x000004, "Wrong alignment on QuestManager_IsClearedId");
static_assert(sizeof(QuestManager_IsClearedId) == 0x000010, "Wrong size on QuestManager_IsClearedId");
static_assert(offsetof(QuestManager_IsClearedId, Quest_id) == 0x000000, "Member 'QuestManager_IsClearedId::Quest_id' has a wrong offset!");
static_assert(offsetof(QuestManager_IsClearedId, ReturnValue) == 0x000008, "Member 'QuestManager_IsClearedId::ReturnValue' has a wrong offset!");

// Function AT.ATRoomCharaManager.OnJoinedSupportCharacter
// 0x0030 (0x0030 - 0x0000)
struct ATRoomCharaManager_OnJoinedSupportCharacter final
{
public:
	struct FPartyMember                           PartyInMember;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         MemberType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATRoomCharaManager_OnJoinedSupportCharacter) == 0x000008, "Wrong alignment on ATRoomCharaManager_OnJoinedSupportCharacter");
static_assert(sizeof(ATRoomCharaManager_OnJoinedSupportCharacter) == 0x000030, "Wrong size on ATRoomCharaManager_OnJoinedSupportCharacter");
static_assert(offsetof(ATRoomCharaManager_OnJoinedSupportCharacter, PartyInMember) == 0x000000, "Member 'ATRoomCharaManager_OnJoinedSupportCharacter::PartyInMember' has a wrong offset!");
static_assert(offsetof(ATRoomCharaManager_OnJoinedSupportCharacter, MemberType) == 0x000028, "Member 'ATRoomCharaManager_OnJoinedSupportCharacter::MemberType' has a wrong offset!");

// Function AT.ATRoomCharaManager.OnOutSupportCharacter
// 0x0030 (0x0030 - 0x0000)
struct ATRoomCharaManager_OnOutSupportCharacter final
{
public:
	struct FPartyMember                           PartyOutMember;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         MemberType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATRoomCharaManager_OnOutSupportCharacter) == 0x000008, "Wrong alignment on ATRoomCharaManager_OnOutSupportCharacter");
static_assert(sizeof(ATRoomCharaManager_OnOutSupportCharacter) == 0x000030, "Wrong size on ATRoomCharaManager_OnOutSupportCharacter");
static_assert(offsetof(ATRoomCharaManager_OnOutSupportCharacter, PartyOutMember) == 0x000000, "Member 'ATRoomCharaManager_OnOutSupportCharacter::PartyOutMember' has a wrong offset!");
static_assert(offsetof(ATRoomCharaManager_OnOutSupportCharacter, MemberType) == 0x000028, "Member 'ATRoomCharaManager_OnOutSupportCharacter::MemberType' has a wrong offset!");

// Function AT.ATRoomCharaManager.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct ATRoomCharaManager_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRoomCharaManager_OnOverlapBegin) == 0x000008, "Wrong alignment on ATRoomCharaManager_OnOverlapBegin");
static_assert(sizeof(ATRoomCharaManager_OnOverlapBegin) == 0x000010, "Wrong size on ATRoomCharaManager_OnOverlapBegin");
static_assert(offsetof(ATRoomCharaManager_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'ATRoomCharaManager_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATRoomCharaManager_OnOverlapBegin, OtherActor) == 0x000008, "Member 'ATRoomCharaManager_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.ATRoomCharaManager.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct ATRoomCharaManager_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRoomCharaManager_OnOverlapEnd) == 0x000008, "Wrong alignment on ATRoomCharaManager_OnOverlapEnd");
static_assert(sizeof(ATRoomCharaManager_OnOverlapEnd) == 0x000010, "Wrong size on ATRoomCharaManager_OnOverlapEnd");
static_assert(offsetof(ATRoomCharaManager_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'ATRoomCharaManager_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATRoomCharaManager_OnOverlapEnd, OtherActor) == 0x000008, "Member 'ATRoomCharaManager_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.ATBattleAILoader.CompleteLoad
// 0x0008 (0x0008 - 0x0000)
struct ATBattleAILoader_CompleteLoad final
{
public:
	class UATDataAssetBattleAIAsyncLoad*          Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATBattleAILoader_CompleteLoad) == 0x000008, "Wrong alignment on ATBattleAILoader_CompleteLoad");
static_assert(sizeof(ATBattleAILoader_CompleteLoad) == 0x000008, "Wrong size on ATBattleAILoader_CompleteLoad");
static_assert(offsetof(ATBattleAILoader_CompleteLoad, Loader) == 0x000000, "Member 'ATBattleAILoader_CompleteLoad::Loader' has a wrong offset!");

// Function AT.ATBattleAILoader.CompleteLoadGroup
// 0x0008 (0x0008 - 0x0000)
struct ATBattleAILoader_CompleteLoadGroup final
{
public:
	class UATDataAssetBattleGroupAIAsyncLoad*     Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATBattleAILoader_CompleteLoadGroup) == 0x000008, "Wrong alignment on ATBattleAILoader_CompleteLoadGroup");
static_assert(sizeof(ATBattleAILoader_CompleteLoadGroup) == 0x000008, "Wrong size on ATBattleAILoader_CompleteLoadGroup");
static_assert(offsetof(ATBattleAILoader_CompleteLoadGroup, Loader) == 0x000000, "Member 'ATBattleAILoader_CompleteLoadGroup::Loader' has a wrong offset!");

// Function AT.ATProjectileMine.HitRootSphere
// 0x0088 (0x0088 - 0x0000)
struct ATProjectileMine_HitRootSphere final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATProjectileMine_HitRootSphere) == 0x000008, "Wrong alignment on ATProjectileMine_HitRootSphere");
static_assert(sizeof(ATProjectileMine_HitRootSphere) == 0x000088, "Wrong size on ATProjectileMine_HitRootSphere");
static_assert(offsetof(ATProjectileMine_HitRootSphere, ImpactResult) == 0x000000, "Member 'ATProjectileMine_HitRootSphere::ImpactResult' has a wrong offset!");

// Function AT.Projectile_Cpl005GSkill003.SpawnFallProjectile
// 0x0004 (0x0004 - 0x0000)
struct Projectile_Cpl005GSkill003_SpawnFallProjectile final
{
public:
	int32                                         SpawnNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl005GSkill003_SpawnFallProjectile) == 0x000004, "Wrong alignment on Projectile_Cpl005GSkill003_SpawnFallProjectile");
static_assert(sizeof(Projectile_Cpl005GSkill003_SpawnFallProjectile) == 0x000004, "Wrong size on Projectile_Cpl005GSkill003_SpawnFallProjectile");
static_assert(offsetof(Projectile_Cpl005GSkill003_SpawnFallProjectile, SpawnNumber) == 0x000000, "Member 'Projectile_Cpl005GSkill003_SpawnFallProjectile::SpawnNumber' has a wrong offset!");

// Function AT.Projectile_Cpl005GSkill003.SpawnOmenEffect
// 0x0004 (0x0004 - 0x0000)
struct Projectile_Cpl005GSkill003_SpawnOmenEffect final
{
public:
	int32                                         SpawnNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl005GSkill003_SpawnOmenEffect) == 0x000004, "Wrong alignment on Projectile_Cpl005GSkill003_SpawnOmenEffect");
static_assert(sizeof(Projectile_Cpl005GSkill003_SpawnOmenEffect) == 0x000004, "Wrong size on Projectile_Cpl005GSkill003_SpawnOmenEffect");
static_assert(offsetof(Projectile_Cpl005GSkill003_SpawnOmenEffect, SpawnNumber) == 0x000000, "Member 'Projectile_Cpl005GSkill003_SpawnOmenEffect::SpawnNumber' has a wrong offset!");

// Function AT.TimeOrbManager.OnLottery
// 0x0108 (0x0108 - 0x0000)
struct TimeOrbManager_OnLottery final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOrbManager_OnLottery) == 0x000008, "Wrong alignment on TimeOrbManager_OnLottery");
static_assert(sizeof(TimeOrbManager_OnLottery) == 0x000108, "Wrong size on TimeOrbManager_OnLottery");
static_assert(offsetof(TimeOrbManager_OnLottery, Param) == 0x000000, "Member 'TimeOrbManager_OnLottery::Param' has a wrong offset!");

// Function AT.TimeOrbManager.OnOrbLevelLoaded
// 0x0108 (0x0108 - 0x0000)
struct TimeOrbManager_OnOrbLevelLoaded final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeOrbManager_OnOrbLevelLoaded) == 0x000008, "Wrong alignment on TimeOrbManager_OnOrbLevelLoaded");
static_assert(sizeof(TimeOrbManager_OnOrbLevelLoaded) == 0x000108, "Wrong size on TimeOrbManager_OnOrbLevelLoaded");
static_assert(offsetof(TimeOrbManager_OnOrbLevelLoaded, Param) == 0x000000, "Member 'TimeOrbManager_OnOrbLevelLoaded::Param' has a wrong offset!");

// Function AT.SpawnerItemVolumeBase.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct SpawnerItemVolumeBase_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpawnerItemVolumeBase_OnDemoTiming) == 0x000004, "Wrong alignment on SpawnerItemVolumeBase_OnDemoTiming");
static_assert(sizeof(SpawnerItemVolumeBase_OnDemoTiming) == 0x000018, "Wrong size on SpawnerItemVolumeBase_OnDemoTiming");
static_assert(offsetof(SpawnerItemVolumeBase_OnDemoTiming, DemoType) == 0x000000, "Member 'SpawnerItemVolumeBase_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(SpawnerItemVolumeBase_OnDemoTiming, DemoTiming) == 0x000001, "Member 'SpawnerItemVolumeBase_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(SpawnerItemVolumeBase_OnDemoTiming, DemoName) == 0x000008, "Member 'SpawnerItemVolumeBase_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(SpawnerItemVolumeBase_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'SpawnerItemVolumeBase_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.ATDebugUICharaIconManager.Instance
// 0x0008 (0x0008 - 0x0000)
struct ATDebugUICharaIconManager_Instance final
{
public:
	class UATDebugUICharaIconManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDebugUICharaIconManager_Instance) == 0x000008, "Wrong alignment on ATDebugUICharaIconManager_Instance");
static_assert(sizeof(ATDebugUICharaIconManager_Instance) == 0x000008, "Wrong size on ATDebugUICharaIconManager_Instance");
static_assert(offsetof(ATDebugUICharaIconManager_Instance, ReturnValue) == 0x000000, "Member 'ATDebugUICharaIconManager_Instance::ReturnValue' has a wrong offset!");

// Function AT.ATDemoInputComponent.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ATDemoInputComponent_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             InTiming;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInContinue;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATDemoInputComponent_OnDemoTiming) == 0x000004, "Wrong alignment on ATDemoInputComponent_OnDemoTiming");
static_assert(sizeof(ATDemoInputComponent_OnDemoTiming) == 0x000018, "Wrong size on ATDemoInputComponent_OnDemoTiming");
static_assert(offsetof(ATDemoInputComponent_OnDemoTiming, InType) == 0x000000, "Member 'ATDemoInputComponent_OnDemoTiming::InType' has a wrong offset!");
static_assert(offsetof(ATDemoInputComponent_OnDemoTiming, InTiming) == 0x000001, "Member 'ATDemoInputComponent_OnDemoTiming::InTiming' has a wrong offset!");
static_assert(offsetof(ATDemoInputComponent_OnDemoTiming, InName) == 0x000008, "Member 'ATDemoInputComponent_OnDemoTiming::InName' has a wrong offset!");
static_assert(offsetof(ATDemoInputComponent_OnDemoTiming, bInContinue) == 0x000010, "Member 'ATDemoInputComponent_OnDemoTiming::bInContinue' has a wrong offset!");

// Function AT.ATDemoManageComponent.BroadcastDemoEvent
// 0x0010 (0x0010 - 0x0000)
struct ATDemoManageComponent_BroadcastDemoEvent final
{
public:
	class FName                                   DemoName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDemoManageComponent_BroadcastDemoEvent) == 0x000004, "Wrong alignment on ATDemoManageComponent_BroadcastDemoEvent");
static_assert(sizeof(ATDemoManageComponent_BroadcastDemoEvent) == 0x000010, "Wrong size on ATDemoManageComponent_BroadcastDemoEvent");
static_assert(offsetof(ATDemoManageComponent_BroadcastDemoEvent, DemoName) == 0x000000, "Member 'ATDemoManageComponent_BroadcastDemoEvent::DemoName' has a wrong offset!");
static_assert(offsetof(ATDemoManageComponent_BroadcastDemoEvent, EventName) == 0x000008, "Member 'ATDemoManageComponent_BroadcastDemoEvent::EventName' has a wrong offset!");

// Function AT.ATDemoManageComponent.GetCinemaDemoCtrl
// 0x0008 (0x0008 - 0x0000)
struct ATDemoManageComponent_GetCinemaDemoCtrl final
{
public:
	class UATCinemaDemoCtrl*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDemoManageComponent_GetCinemaDemoCtrl) == 0x000008, "Wrong alignment on ATDemoManageComponent_GetCinemaDemoCtrl");
static_assert(sizeof(ATDemoManageComponent_GetCinemaDemoCtrl) == 0x000008, "Wrong size on ATDemoManageComponent_GetCinemaDemoCtrl");
static_assert(offsetof(ATDemoManageComponent_GetCinemaDemoCtrl, ReturnValue) == 0x000000, "Member 'ATDemoManageComponent_GetCinemaDemoCtrl::ReturnValue' has a wrong offset!");

// Function AT.ATDemoManageComponent.GetGeneralDemoCtrl
// 0x0008 (0x0008 - 0x0000)
struct ATDemoManageComponent_GetGeneralDemoCtrl final
{
public:
	class UATGeneralDemoCtrl*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDemoManageComponent_GetGeneralDemoCtrl) == 0x000008, "Wrong alignment on ATDemoManageComponent_GetGeneralDemoCtrl");
static_assert(sizeof(ATDemoManageComponent_GetGeneralDemoCtrl) == 0x000008, "Wrong size on ATDemoManageComponent_GetGeneralDemoCtrl");
static_assert(offsetof(ATDemoManageComponent_GetGeneralDemoCtrl, ReturnValue) == 0x000000, "Member 'ATDemoManageComponent_GetGeneralDemoCtrl::ReturnValue' has a wrong offset!");

// Function AT.ATDemoManageComponent.GetIngameDemoCtrl
// 0x0008 (0x0008 - 0x0000)
struct ATDemoManageComponent_GetIngameDemoCtrl final
{
public:
	class UATIngameDemoCtrl*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDemoManageComponent_GetIngameDemoCtrl) == 0x000008, "Wrong alignment on ATDemoManageComponent_GetIngameDemoCtrl");
static_assert(sizeof(ATDemoManageComponent_GetIngameDemoCtrl) == 0x000008, "Wrong size on ATDemoManageComponent_GetIngameDemoCtrl");
static_assert(offsetof(ATDemoManageComponent_GetIngameDemoCtrl, ReturnValue) == 0x000000, "Member 'ATDemoManageComponent_GetIngameDemoCtrl::ReturnValue' has a wrong offset!");

// Function AT.ATDemoManageComponent.GetPreRenderDemoCtrl
// 0x0008 (0x0008 - 0x0000)
struct ATDemoManageComponent_GetPreRenderDemoCtrl final
{
public:
	class UATPreRenderDemoCtrl*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDemoManageComponent_GetPreRenderDemoCtrl) == 0x000008, "Wrong alignment on ATDemoManageComponent_GetPreRenderDemoCtrl");
static_assert(sizeof(ATDemoManageComponent_GetPreRenderDemoCtrl) == 0x000008, "Wrong size on ATDemoManageComponent_GetPreRenderDemoCtrl");
static_assert(offsetof(ATDemoManageComponent_GetPreRenderDemoCtrl, ReturnValue) == 0x000000, "Member 'ATDemoManageComponent_GetPreRenderDemoCtrl::ReturnValue' has a wrong offset!");

// Function AT.ATDemoManageComponent.RequestDemo
// 0x0020 (0x0020 - 0x0000)
struct ATDemoManageComponent_RequestDemo final
{
public:
	EDEMO_TYPE                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             Timing;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDurationAfterDirection;                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotFadeinInDemoSkip;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDemoBGMSeamlessType                          BGMSeamlessType;                                   // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATDemoManageComponent_RequestDemo) == 0x000004, "Wrong alignment on ATDemoManageComponent_RequestDemo");
static_assert(sizeof(ATDemoManageComponent_RequestDemo) == 0x000020, "Wrong size on ATDemoManageComponent_RequestDemo");
static_assert(offsetof(ATDemoManageComponent_RequestDemo, Type) == 0x000000, "Member 'ATDemoManageComponent_RequestDemo::Type' has a wrong offset!");
static_assert(offsetof(ATDemoManageComponent_RequestDemo, Timing) == 0x000001, "Member 'ATDemoManageComponent_RequestDemo::Timing' has a wrong offset!");
static_assert(offsetof(ATDemoManageComponent_RequestDemo, Name_0) == 0x000008, "Member 'ATDemoManageComponent_RequestDemo::Name_0' has a wrong offset!");
static_assert(offsetof(ATDemoManageComponent_RequestDemo, bImmediate) == 0x000010, "Member 'ATDemoManageComponent_RequestDemo::bImmediate' has a wrong offset!");
static_assert(offsetof(ATDemoManageComponent_RequestDemo, InDurationAfterDirection) == 0x000014, "Member 'ATDemoManageComponent_RequestDemo::InDurationAfterDirection' has a wrong offset!");
static_assert(offsetof(ATDemoManageComponent_RequestDemo, bNotFadeinInDemoSkip) == 0x000018, "Member 'ATDemoManageComponent_RequestDemo::bNotFadeinInDemoSkip' has a wrong offset!");
static_assert(offsetof(ATDemoManageComponent_RequestDemo, BGMSeamlessType) == 0x000019, "Member 'ATDemoManageComponent_RequestDemo::BGMSeamlessType' has a wrong offset!");

// Function AT.ATDemoManageComponent.SetDemoLevelOffset
// 0x0040 (0x0040 - 0x0000)
struct ATDemoManageComponent_SetDemoLevelOffset final
{
public:
	class FName                                   DemoLevelName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0010(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDemoManageComponent_SetDemoLevelOffset) == 0x000010, "Wrong alignment on ATDemoManageComponent_SetDemoLevelOffset");
static_assert(sizeof(ATDemoManageComponent_SetDemoLevelOffset) == 0x000040, "Wrong size on ATDemoManageComponent_SetDemoLevelOffset");
static_assert(offsetof(ATDemoManageComponent_SetDemoLevelOffset, DemoLevelName) == 0x000000, "Member 'ATDemoManageComponent_SetDemoLevelOffset::DemoLevelName' has a wrong offset!");
static_assert(offsetof(ATDemoManageComponent_SetDemoLevelOffset, Offset) == 0x000010, "Member 'ATDemoManageComponent_SetDemoLevelOffset::Offset' has a wrong offset!");

// Function AT.ATDemoManageComponent.SubLevelBeginPlayTiming
// 0x0008 (0x0008 - 0x0000)
struct ATDemoManageComponent_SubLevelBeginPlayTiming final
{
public:
	class FName                                   SubLevelName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDemoManageComponent_SubLevelBeginPlayTiming) == 0x000004, "Wrong alignment on ATDemoManageComponent_SubLevelBeginPlayTiming");
static_assert(sizeof(ATDemoManageComponent_SubLevelBeginPlayTiming) == 0x000008, "Wrong size on ATDemoManageComponent_SubLevelBeginPlayTiming");
static_assert(offsetof(ATDemoManageComponent_SubLevelBeginPlayTiming, SubLevelName) == 0x000000, "Member 'ATDemoManageComponent_SubLevelBeginPlayTiming::SubLevelName' has a wrong offset!");

// Function AT.ATDevelopManager.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct ATDevelopManager_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDevelopManager_MouseClickDecide) == 0x000008, "Wrong alignment on ATDevelopManager_MouseClickDecide");
static_assert(sizeof(ATDevelopManager_MouseClickDecide) == 0x0000A8, "Wrong size on ATDevelopManager_MouseClickDecide");
static_assert(offsetof(ATDevelopManager_MouseClickDecide, InGeometry) == 0x000000, "Member 'ATDevelopManager_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(ATDevelopManager_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'ATDevelopManager_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.ATDirectionReinforce.OnFinishedVoice
// 0x0004 (0x0004 - 0x0000)
struct ATDirectionReinforce_OnFinishedVoice final
{
public:
	int32                                         Ch;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDirectionReinforce_OnFinishedVoice) == 0x000004, "Wrong alignment on ATDirectionReinforce_OnFinishedVoice");
static_assert(sizeof(ATDirectionReinforce_OnFinishedVoice) == 0x000004, "Wrong size on ATDirectionReinforce_OnFinishedVoice");
static_assert(offsetof(ATDirectionReinforce_OnFinishedVoice, Ch) == 0x000000, "Member 'ATDirectionReinforce_OnFinishedVoice::Ch' has a wrong offset!");

// Function AT.ATDoorVolume.FixPostProcessFromTag
// 0x0010 (0x0010 - 0x0000)
struct ATDoorVolume_FixPostProcessFromTag final
{
public:
	class FName                                   InTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APostProcessVolume*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDoorVolume_FixPostProcessFromTag) == 0x000008, "Wrong alignment on ATDoorVolume_FixPostProcessFromTag");
static_assert(sizeof(ATDoorVolume_FixPostProcessFromTag) == 0x000010, "Wrong size on ATDoorVolume_FixPostProcessFromTag");
static_assert(offsetof(ATDoorVolume_FixPostProcessFromTag, InTag) == 0x000000, "Member 'ATDoorVolume_FixPostProcessFromTag::InTag' has a wrong offset!");
static_assert(offsetof(ATDoorVolume_FixPostProcessFromTag, ReturnValue) == 0x000008, "Member 'ATDoorVolume_FixPostProcessFromTag::ReturnValue' has a wrong offset!");

// Function AT.ATDoorVolume.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct ATDoorVolume_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDoorVolume_OnActionChange) == 0x000008, "Wrong alignment on ATDoorVolume_OnActionChange");
static_assert(sizeof(ATDoorVolume_OnActionChange) == 0x000010, "Wrong size on ATDoorVolume_OnActionChange");
static_assert(offsetof(ATDoorVolume_OnActionChange, InCharacter) == 0x000000, "Member 'ATDoorVolume_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(ATDoorVolume_OnActionChange, InActionIdPrev) == 0x000008, "Member 'ATDoorVolume_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATDoorVolume_OnActionChange, InActionIdNext) == 0x00000C, "Member 'ATDoorVolume_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.ATDoorVolume.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATDoorVolume_OnActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDoorVolume_OnActorBeginOverlap) == 0x000008, "Wrong alignment on ATDoorVolume_OnActorBeginOverlap");
static_assert(sizeof(ATDoorVolume_OnActorBeginOverlap) == 0x000010, "Wrong size on ATDoorVolume_OnActorBeginOverlap");
static_assert(offsetof(ATDoorVolume_OnActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'ATDoorVolume_OnActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATDoorVolume_OnActorBeginOverlap, OtherActor) == 0x000008, "Member 'ATDoorVolume_OnActorBeginOverlap::OtherActor' has a wrong offset!");

// Function AT.ATDoorVolume.OnLevelShown
// 0x0008 (0x0008 - 0x0000)
struct ATDoorVolume_OnLevelShown final
{
public:
	class ULevelStreaming*                        LevelStreaming;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDoorVolume_OnLevelShown) == 0x000008, "Wrong alignment on ATDoorVolume_OnLevelShown");
static_assert(sizeof(ATDoorVolume_OnLevelShown) == 0x000008, "Wrong size on ATDoorVolume_OnLevelShown");
static_assert(offsetof(ATDoorVolume_OnLevelShown, LevelStreaming) == 0x000000, "Member 'ATDoorVolume_OnLevelShown::LevelStreaming' has a wrong offset!");

// Function AT.ATDoorVolume.Open
// 0x0002 (0x0002 - 0x0000)
struct ATDoorVolume_Open final
{
public:
	bool                                          InForceTrainingMove;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTrainingBattleStart;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATDoorVolume_Open) == 0x000001, "Wrong alignment on ATDoorVolume_Open");
static_assert(sizeof(ATDoorVolume_Open) == 0x000002, "Wrong size on ATDoorVolume_Open");
static_assert(offsetof(ATDoorVolume_Open, InForceTrainingMove) == 0x000000, "Member 'ATDoorVolume_Open::InForceTrainingMove' has a wrong offset!");
static_assert(offsetof(ATDoorVolume_Open, InTrainingBattleStart) == 0x000001, "Member 'ATDoorVolume_Open::InTrainingBattleStart' has a wrong offset!");

// Function AT.EasingMovement.SetDuration
// 0x0004 (0x0004 - 0x0000)
struct EasingMovement_SetDuration final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasingMovement_SetDuration) == 0x000004, "Wrong alignment on EasingMovement_SetDuration");
static_assert(sizeof(EasingMovement_SetDuration) == 0x000004, "Wrong size on EasingMovement_SetDuration");
static_assert(offsetof(EasingMovement_SetDuration, Time) == 0x000000, "Member 'EasingMovement_SetDuration::Time' has a wrong offset!");

// Function AT.EasingMovement.SetTargetPoint
// 0x0008 (0x0008 - 0x0000)
struct EasingMovement_SetTargetPoint final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasingMovement_SetTargetPoint) == 0x000008, "Wrong alignment on EasingMovement_SetTargetPoint");
static_assert(sizeof(EasingMovement_SetTargetPoint) == 0x000008, "Wrong size on EasingMovement_SetTargetPoint");
static_assert(offsetof(EasingMovement_SetTargetPoint, Target) == 0x000000, "Member 'EasingMovement_SetTargetPoint::Target' has a wrong offset!");

// Function AT.Enable.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct Enable_SetEnable final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Enable_SetEnable) == 0x000001, "Wrong alignment on Enable_SetEnable");
static_assert(sizeof(Enable_SetEnable) == 0x000001, "Wrong size on Enable_SetEnable");
static_assert(offsetof(Enable_SetEnable, bEnabled) == 0x000000, "Member 'Enable_SetEnable::bEnabled' has a wrong offset!");

// Function AT.Enable.IsEnable
// 0x0001 (0x0001 - 0x0000)
struct Enable_IsEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Enable_IsEnable) == 0x000001, "Wrong alignment on Enable_IsEnable");
static_assert(sizeof(Enable_IsEnable) == 0x000001, "Wrong size on Enable_IsEnable");
static_assert(offsetof(Enable_IsEnable, ReturnValue) == 0x000000, "Member 'Enable_IsEnable::ReturnValue' has a wrong offset!");

// Function AT.Projectile_Cpl024SkillBarrierMineBarrier.OnSpawnProjectile
// 0x0010 (0x0010 - 0x0000)
struct Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile) == 0x000008, "Wrong alignment on Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile");
static_assert(sizeof(Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile) == 0x000010, "Wrong size on Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile");
static_assert(offsetof(Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile, InProjectile) == 0x000000, "Member 'Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile::InProjectile' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile, InOwner) == 0x000008, "Member 'Projectile_Cpl024SkillBarrierMineBarrier_OnSpawnProjectile::InOwner' has a wrong offset!");

// Function AT.TalkAnimInstance.GetSequenceAnimationNum
// 0x0008 (0x0008 - 0x0000)
struct TalkAnimInstance_GetSequenceAnimationNum final
{
public:
	int32                                         PatternNum;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetSequenceAnimationNum) == 0x000004, "Wrong alignment on TalkAnimInstance_GetSequenceAnimationNum");
static_assert(sizeof(TalkAnimInstance_GetSequenceAnimationNum) == 0x000008, "Wrong size on TalkAnimInstance_GetSequenceAnimationNum");
static_assert(offsetof(TalkAnimInstance_GetSequenceAnimationNum, PatternNum) == 0x000000, "Member 'TalkAnimInstance_GetSequenceAnimationNum::PatternNum' has a wrong offset!");
static_assert(offsetof(TalkAnimInstance_GetSequenceAnimationNum, ReturnValue) == 0x000004, "Member 'TalkAnimInstance_GetSequenceAnimationNum::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableIdlingLoop
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableIdlingLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableIdlingLoop) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableIdlingLoop");
static_assert(sizeof(TalkAnimInstance_IsEnableIdlingLoop) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableIdlingLoop");
static_assert(offsetof(TalkAnimInstance_IsEnableIdlingLoop, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableIdlingLoop::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.PlayBlinkAnimation
// 0x0010 (0x0010 - 0x0000)
struct TalkAnimInstance_PlayBlinkAnimation final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TalkAnimInstance_PlayBlinkAnimation) == 0x000008, "Wrong alignment on TalkAnimInstance_PlayBlinkAnimation");
static_assert(sizeof(TalkAnimInstance_PlayBlinkAnimation) == 0x000010, "Wrong size on TalkAnimInstance_PlayBlinkAnimation");
static_assert(offsetof(TalkAnimInstance_PlayBlinkAnimation, Montage) == 0x000000, "Member 'TalkAnimInstance_PlayBlinkAnimation::Montage' has a wrong offset!");
static_assert(offsetof(TalkAnimInstance_PlayBlinkAnimation, BlendTime) == 0x000008, "Member 'TalkAnimInstance_PlayBlinkAnimation::BlendTime' has a wrong offset!");

// Function AT.TalkAnimInstance.SetEnableBlink
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_SetEnableBlink final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetEnableBlink) == 0x000001, "Wrong alignment on TalkAnimInstance_SetEnableBlink");
static_assert(sizeof(TalkAnimInstance_SetEnableBlink) == 0x000001, "Wrong size on TalkAnimInstance_SetEnableBlink");
static_assert(offsetof(TalkAnimInstance_SetEnableBlink, bEnable) == 0x000000, "Member 'TalkAnimInstance_SetEnableBlink::bEnable' has a wrong offset!");

// Function AT.TalkAnimInstance.SetEnableIdlingSequence_Implementation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_SetEnableIdlingSequence_Implementation final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetEnableIdlingSequence_Implementation) == 0x000001, "Wrong alignment on TalkAnimInstance_SetEnableIdlingSequence_Implementation");
static_assert(sizeof(TalkAnimInstance_SetEnableIdlingSequence_Implementation) == 0x000001, "Wrong size on TalkAnimInstance_SetEnableIdlingSequence_Implementation");
static_assert(offsetof(TalkAnimInstance_SetEnableIdlingSequence_Implementation, bEnabled) == 0x000000, "Member 'TalkAnimInstance_SetEnableIdlingSequence_Implementation::bEnabled' has a wrong offset!");

// Function AT.TalkAnimInstance.SetEnableMove_Implementation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_SetEnableMove_Implementation final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetEnableMove_Implementation) == 0x000001, "Wrong alignment on TalkAnimInstance_SetEnableMove_Implementation");
static_assert(sizeof(TalkAnimInstance_SetEnableMove_Implementation) == 0x000001, "Wrong size on TalkAnimInstance_SetEnableMove_Implementation");
static_assert(offsetof(TalkAnimInstance_SetEnableMove_Implementation, bEnabled) == 0x000000, "Member 'TalkAnimInstance_SetEnableMove_Implementation::bEnabled' has a wrong offset!");

// Function AT.TalkAnimInstance.SetEnableUpperFaceAnimation_Implementation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_SetEnableUpperFaceAnimation_Implementation final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetEnableUpperFaceAnimation_Implementation) == 0x000001, "Wrong alignment on TalkAnimInstance_SetEnableUpperFaceAnimation_Implementation");
static_assert(sizeof(TalkAnimInstance_SetEnableUpperFaceAnimation_Implementation) == 0x000001, "Wrong size on TalkAnimInstance_SetEnableUpperFaceAnimation_Implementation");
static_assert(offsetof(TalkAnimInstance_SetEnableUpperFaceAnimation_Implementation, bEnable) == 0x000000, "Member 'TalkAnimInstance_SetEnableUpperFaceAnimation_Implementation::bEnable' has a wrong offset!");

// Function AT.TalkAnimInstance.SetIdlingActionTimingCount
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_SetIdlingActionTimingCount final
{
public:
	int32                                         TimingCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetIdlingActionTimingCount) == 0x000004, "Wrong alignment on TalkAnimInstance_SetIdlingActionTimingCount");
static_assert(sizeof(TalkAnimInstance_SetIdlingActionTimingCount) == 0x000004, "Wrong size on TalkAnimInstance_SetIdlingActionTimingCount");
static_assert(offsetof(TalkAnimInstance_SetIdlingActionTimingCount, TimingCount) == 0x000000, "Member 'TalkAnimInstance_SetIdlingActionTimingCount::TimingCount' has a wrong offset!");

// Function AT.TalkAnimInstance.SetIdlingSequencePattern_Implementation
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_SetIdlingSequencePattern_Implementation final
{
public:
	int32                                         PatternNo;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetIdlingSequencePattern_Implementation) == 0x000004, "Wrong alignment on TalkAnimInstance_SetIdlingSequencePattern_Implementation");
static_assert(sizeof(TalkAnimInstance_SetIdlingSequencePattern_Implementation) == 0x000004, "Wrong size on TalkAnimInstance_SetIdlingSequencePattern_Implementation");
static_assert(offsetof(TalkAnimInstance_SetIdlingSequencePattern_Implementation, PatternNo) == 0x000000, "Member 'TalkAnimInstance_SetIdlingSequencePattern_Implementation::PatternNo' has a wrong offset!");

// Function AT.TalkAnimInstance.SetMaxIdlingLoopCount
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_SetMaxIdlingLoopCount final
{
public:
	int32                                         LoopCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetMaxIdlingLoopCount) == 0x000004, "Wrong alignment on TalkAnimInstance_SetMaxIdlingLoopCount");
static_assert(sizeof(TalkAnimInstance_SetMaxIdlingLoopCount) == 0x000004, "Wrong size on TalkAnimInstance_SetMaxIdlingLoopCount");
static_assert(offsetof(TalkAnimInstance_SetMaxIdlingLoopCount, LoopCount) == 0x000000, "Member 'TalkAnimInstance_SetMaxIdlingLoopCount::LoopCount' has a wrong offset!");

// Function AT.TalkAnimInstance.SetNearPlayer_Implementation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_SetNearPlayer_Implementation final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetNearPlayer_Implementation) == 0x000001, "Wrong alignment on TalkAnimInstance_SetNearPlayer_Implementation");
static_assert(sizeof(TalkAnimInstance_SetNearPlayer_Implementation) == 0x000001, "Wrong size on TalkAnimInstance_SetNearPlayer_Implementation");
static_assert(offsetof(TalkAnimInstance_SetNearPlayer_Implementation, bFlag) == 0x000000, "Member 'TalkAnimInstance_SetNearPlayer_Implementation::bFlag' has a wrong offset!");

// Function AT.TalkAnimInstance.SetTriggerThreasholdLookAt_Implementation
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_SetTriggerThreasholdLookAt_Implementation final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_SetTriggerThreasholdLookAt_Implementation) == 0x000004, "Wrong alignment on TalkAnimInstance_SetTriggerThreasholdLookAt_Implementation");
static_assert(sizeof(TalkAnimInstance_SetTriggerThreasholdLookAt_Implementation) == 0x000004, "Wrong size on TalkAnimInstance_SetTriggerThreasholdLookAt_Implementation");
static_assert(offsetof(TalkAnimInstance_SetTriggerThreasholdLookAt_Implementation, Length) == 0x000000, "Member 'TalkAnimInstance_SetTriggerThreasholdLookAt_Implementation::Length' has a wrong offset!");

// Function AT.TalkAnimInstance.UpdateBlinkEye
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_UpdateBlinkEye final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_UpdateBlinkEye) == 0x000004, "Wrong alignment on TalkAnimInstance_UpdateBlinkEye");
static_assert(sizeof(TalkAnimInstance_UpdateBlinkEye) == 0x000004, "Wrong size on TalkAnimInstance_UpdateBlinkEye");
static_assert(offsetof(TalkAnimInstance_UpdateBlinkEye, InDeltaTime) == 0x000000, "Member 'TalkAnimInstance_UpdateBlinkEye::InDeltaTime' has a wrong offset!");

// Function AT.TalkAnimInstance.GetBlendSpaceTypeForLipSync
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetBlendSpaceTypeForLipSync final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetBlendSpaceTypeForLipSync) == 0x000004, "Wrong alignment on TalkAnimInstance_GetBlendSpaceTypeForLipSync");
static_assert(sizeof(TalkAnimInstance_GetBlendSpaceTypeForLipSync) == 0x000004, "Wrong size on TalkAnimInstance_GetBlendSpaceTypeForLipSync");
static_assert(offsetof(TalkAnimInstance_GetBlendSpaceTypeForLipSync, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetBlendSpaceTypeForLipSync::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetBlendTimeLookAt
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetBlendTimeLookAt final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetBlendTimeLookAt) == 0x000004, "Wrong alignment on TalkAnimInstance_GetBlendTimeLookAt");
static_assert(sizeof(TalkAnimInstance_GetBlendTimeLookAt) == 0x000004, "Wrong size on TalkAnimInstance_GetBlendTimeLookAt");
static_assert(offsetof(TalkAnimInstance_GetBlendTimeLookAt, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetBlendTimeLookAt::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetBlendTimeLookAtCancel
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetBlendTimeLookAtCancel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetBlendTimeLookAtCancel) == 0x000004, "Wrong alignment on TalkAnimInstance_GetBlendTimeLookAtCancel");
static_assert(sizeof(TalkAnimInstance_GetBlendTimeLookAtCancel) == 0x000004, "Wrong size on TalkAnimInstance_GetBlendTimeLookAtCancel");
static_assert(offsetof(TalkAnimInstance_GetBlendTimeLookAtCancel, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetBlendTimeLookAtCancel::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetCharacterActionType
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_GetCharacterActionType final
{
public:
	EQuestCharacterState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetCharacterActionType) == 0x000001, "Wrong alignment on TalkAnimInstance_GetCharacterActionType");
static_assert(sizeof(TalkAnimInstance_GetCharacterActionType) == 0x000001, "Wrong size on TalkAnimInstance_GetCharacterActionType");
static_assert(offsetof(TalkAnimInstance_GetCharacterActionType, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetCharacterActionType::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetClampAngleHeadBone
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetClampAngleHeadBone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetClampAngleHeadBone) == 0x000004, "Wrong alignment on TalkAnimInstance_GetClampAngleHeadBone");
static_assert(sizeof(TalkAnimInstance_GetClampAngleHeadBone) == 0x000004, "Wrong size on TalkAnimInstance_GetClampAngleHeadBone");
static_assert(offsetof(TalkAnimInstance_GetClampAngleHeadBone, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetClampAngleHeadBone::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetClampAngleHeadBoneUpDown
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetClampAngleHeadBoneUpDown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetClampAngleHeadBoneUpDown) == 0x000004, "Wrong alignment on TalkAnimInstance_GetClampAngleHeadBoneUpDown");
static_assert(sizeof(TalkAnimInstance_GetClampAngleHeadBoneUpDown) == 0x000004, "Wrong size on TalkAnimInstance_GetClampAngleHeadBoneUpDown");
static_assert(offsetof(TalkAnimInstance_GetClampAngleHeadBoneUpDown, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetClampAngleHeadBoneUpDown::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetClampAnglePelvisBone
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetClampAnglePelvisBone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetClampAnglePelvisBone) == 0x000004, "Wrong alignment on TalkAnimInstance_GetClampAnglePelvisBone");
static_assert(sizeof(TalkAnimInstance_GetClampAnglePelvisBone) == 0x000004, "Wrong size on TalkAnimInstance_GetClampAnglePelvisBone");
static_assert(offsetof(TalkAnimInstance_GetClampAnglePelvisBone, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetClampAnglePelvisBone::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetClampAngleSpineBone
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetClampAngleSpineBone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetClampAngleSpineBone) == 0x000004, "Wrong alignment on TalkAnimInstance_GetClampAngleSpineBone");
static_assert(sizeof(TalkAnimInstance_GetClampAngleSpineBone) == 0x000004, "Wrong size on TalkAnimInstance_GetClampAngleSpineBone");
static_assert(offsetof(TalkAnimInstance_GetClampAngleSpineBone, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetClampAngleSpineBone::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetEnableGazing
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_GetEnableGazing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetEnableGazing) == 0x000001, "Wrong alignment on TalkAnimInstance_GetEnableGazing");
static_assert(sizeof(TalkAnimInstance_GetEnableGazing) == 0x000001, "Wrong size on TalkAnimInstance_GetEnableGazing");
static_assert(offsetof(TalkAnimInstance_GetEnableGazing, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetEnableGazing::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetEnableLookAt
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_GetEnableLookAt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetEnableLookAt) == 0x000001, "Wrong alignment on TalkAnimInstance_GetEnableLookAt");
static_assert(sizeof(TalkAnimInstance_GetEnableLookAt) == 0x000001, "Wrong size on TalkAnimInstance_GetEnableLookAt");
static_assert(offsetof(TalkAnimInstance_GetEnableLookAt, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetEnableLookAt::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetEyePupilScale
// 0x0008 (0x0008 - 0x0000)
struct TalkAnimInstance_GetEyePupilScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetEyePupilScale) == 0x000004, "Wrong alignment on TalkAnimInstance_GetEyePupilScale");
static_assert(sizeof(TalkAnimInstance_GetEyePupilScale) == 0x000008, "Wrong size on TalkAnimInstance_GetEyePupilScale");
static_assert(offsetof(TalkAnimInstance_GetEyePupilScale, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetEyePupilScale::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetGazeOffsetLH
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetGazeOffsetLH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetGazeOffsetLH) == 0x000004, "Wrong alignment on TalkAnimInstance_GetGazeOffsetLH");
static_assert(sizeof(TalkAnimInstance_GetGazeOffsetLH) == 0x000004, "Wrong size on TalkAnimInstance_GetGazeOffsetLH");
static_assert(offsetof(TalkAnimInstance_GetGazeOffsetLH, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetGazeOffsetLH::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetGazeOffsetLV
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetGazeOffsetLV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetGazeOffsetLV) == 0x000004, "Wrong alignment on TalkAnimInstance_GetGazeOffsetLV");
static_assert(sizeof(TalkAnimInstance_GetGazeOffsetLV) == 0x000004, "Wrong size on TalkAnimInstance_GetGazeOffsetLV");
static_assert(offsetof(TalkAnimInstance_GetGazeOffsetLV, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetGazeOffsetLV::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetGazeOffsetRH
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetGazeOffsetRH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetGazeOffsetRH) == 0x000004, "Wrong alignment on TalkAnimInstance_GetGazeOffsetRH");
static_assert(sizeof(TalkAnimInstance_GetGazeOffsetRH) == 0x000004, "Wrong size on TalkAnimInstance_GetGazeOffsetRH");
static_assert(offsetof(TalkAnimInstance_GetGazeOffsetRH, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetGazeOffsetRH::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetGazeOffsetRV
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetGazeOffsetRV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetGazeOffsetRV) == 0x000004, "Wrong alignment on TalkAnimInstance_GetGazeOffsetRV");
static_assert(sizeof(TalkAnimInstance_GetGazeOffsetRV) == 0x000004, "Wrong size on TalkAnimInstance_GetGazeOffsetRV");
static_assert(offsetof(TalkAnimInstance_GetGazeOffsetRV, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetGazeOffsetRV::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetHeadTranslationClampRate
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetHeadTranslationClampRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetHeadTranslationClampRate) == 0x000004, "Wrong alignment on TalkAnimInstance_GetHeadTranslationClampRate");
static_assert(sizeof(TalkAnimInstance_GetHeadTranslationClampRate) == 0x000004, "Wrong size on TalkAnimInstance_GetHeadTranslationClampRate");
static_assert(offsetof(TalkAnimInstance_GetHeadTranslationClampRate, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetHeadTranslationClampRate::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetIdlingActionTimingCount
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetIdlingActionTimingCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetIdlingActionTimingCount) == 0x000004, "Wrong alignment on TalkAnimInstance_GetIdlingActionTimingCount");
static_assert(sizeof(TalkAnimInstance_GetIdlingActionTimingCount) == 0x000004, "Wrong size on TalkAnimInstance_GetIdlingActionTimingCount");
static_assert(offsetof(TalkAnimInstance_GetIdlingActionTimingCount, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetIdlingActionTimingCount::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetIdlingLoopCount
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetIdlingLoopCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetIdlingLoopCount) == 0x000004, "Wrong alignment on TalkAnimInstance_GetIdlingLoopCount");
static_assert(sizeof(TalkAnimInstance_GetIdlingLoopCount) == 0x000004, "Wrong size on TalkAnimInstance_GetIdlingLoopCount");
static_assert(offsetof(TalkAnimInstance_GetIdlingLoopCount, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetIdlingLoopCount::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetIdlingSequencePattern_Implementation
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetIdlingSequencePattern_Implementation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetIdlingSequencePattern_Implementation) == 0x000004, "Wrong alignment on TalkAnimInstance_GetIdlingSequencePattern_Implementation");
static_assert(sizeof(TalkAnimInstance_GetIdlingSequencePattern_Implementation) == 0x000004, "Wrong size on TalkAnimInstance_GetIdlingSequencePattern_Implementation");
static_assert(offsetof(TalkAnimInstance_GetIdlingSequencePattern_Implementation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetIdlingSequencePattern_Implementation::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetInterpolationBlendTypeForLookAt
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_GetInterpolationBlendTypeForLookAt final
{
public:
	EInterpolationBlend                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetInterpolationBlendTypeForLookAt) == 0x000001, "Wrong alignment on TalkAnimInstance_GetInterpolationBlendTypeForLookAt");
static_assert(sizeof(TalkAnimInstance_GetInterpolationBlendTypeForLookAt) == 0x000001, "Wrong size on TalkAnimInstance_GetInterpolationBlendTypeForLookAt");
static_assert(offsetof(TalkAnimInstance_GetInterpolationBlendTypeForLookAt, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetInterpolationBlendTypeForLookAt::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetLipSize
// 0x0008 (0x0008 - 0x0000)
struct TalkAnimInstance_GetLipSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetLipSize) == 0x000004, "Wrong alignment on TalkAnimInstance_GetLipSize");
static_assert(sizeof(TalkAnimInstance_GetLipSize) == 0x000008, "Wrong size on TalkAnimInstance_GetLipSize");
static_assert(offsetof(TalkAnimInstance_GetLipSize, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetLipSize::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetLipWeight
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetLipWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetLipWeight) == 0x000004, "Wrong alignment on TalkAnimInstance_GetLipWeight");
static_assert(sizeof(TalkAnimInstance_GetLipWeight) == 0x000004, "Wrong size on TalkAnimInstance_GetLipWeight");
static_assert(offsetof(TalkAnimInstance_GetLipWeight, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetLipWeight::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetLookAtCalculator
// 0x0008 (0x0008 - 0x0000)
struct TalkAnimInstance_GetLookAtCalculator final
{
public:
	class ULookAtCalculator*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetLookAtCalculator) == 0x000008, "Wrong alignment on TalkAnimInstance_GetLookAtCalculator");
static_assert(sizeof(TalkAnimInstance_GetLookAtCalculator) == 0x000008, "Wrong size on TalkAnimInstance_GetLookAtCalculator");
static_assert(offsetof(TalkAnimInstance_GetLookAtCalculator, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetLookAtCalculator::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetLookAtLocationForward
// 0x0010 (0x0010 - 0x0000)
struct TalkAnimInstance_GetLookAtLocationForward final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetLookAtLocationForward) == 0x000004, "Wrong alignment on TalkAnimInstance_GetLookAtLocationForward");
static_assert(sizeof(TalkAnimInstance_GetLookAtLocationForward) == 0x000010, "Wrong size on TalkAnimInstance_GetLookAtLocationForward");
static_assert(offsetof(TalkAnimInstance_GetLookAtLocationForward, Length) == 0x000000, "Member 'TalkAnimInstance_GetLookAtLocationForward::Length' has a wrong offset!");
static_assert(offsetof(TalkAnimInstance_GetLookAtLocationForward, ReturnValue) == 0x000004, "Member 'TalkAnimInstance_GetLookAtLocationForward::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetLookAtTarget
// 0x0008 (0x0008 - 0x0000)
struct TalkAnimInstance_GetLookAtTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetLookAtTarget) == 0x000008, "Wrong alignment on TalkAnimInstance_GetLookAtTarget");
static_assert(sizeof(TalkAnimInstance_GetLookAtTarget) == 0x000008, "Wrong size on TalkAnimInstance_GetLookAtTarget");
static_assert(offsetof(TalkAnimInstance_GetLookAtTarget, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetLookAtTarget::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetLookAtTargetLocation
// 0x000C (0x000C - 0x0000)
struct TalkAnimInstance_GetLookAtTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetLookAtTargetLocation) == 0x000004, "Wrong alignment on TalkAnimInstance_GetLookAtTargetLocation");
static_assert(sizeof(TalkAnimInstance_GetLookAtTargetLocation) == 0x00000C, "Wrong size on TalkAnimInstance_GetLookAtTargetLocation");
static_assert(offsetof(TalkAnimInstance_GetLookAtTargetLocation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetLookAtTargetLocation::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetTriggerThreasholdLookAt
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetTriggerThreasholdLookAt final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetTriggerThreasholdLookAt) == 0x000004, "Wrong alignment on TalkAnimInstance_GetTriggerThreasholdLookAt");
static_assert(sizeof(TalkAnimInstance_GetTriggerThreasholdLookAt) == 0x000004, "Wrong size on TalkAnimInstance_GetTriggerThreasholdLookAt");
static_assert(offsetof(TalkAnimInstance_GetTriggerThreasholdLookAt, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetTriggerThreasholdLookAt::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.GetTriggerThreasholdLookAt_Implementation
// 0x0004 (0x0004 - 0x0000)
struct TalkAnimInstance_GetTriggerThreasholdLookAt_Implementation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_GetTriggerThreasholdLookAt_Implementation) == 0x000004, "Wrong alignment on TalkAnimInstance_GetTriggerThreasholdLookAt_Implementation");
static_assert(sizeof(TalkAnimInstance_GetTriggerThreasholdLookAt_Implementation) == 0x000004, "Wrong size on TalkAnimInstance_GetTriggerThreasholdLookAt_Implementation");
static_assert(offsetof(TalkAnimInstance_GetTriggerThreasholdLookAt_Implementation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_GetTriggerThreasholdLookAt_Implementation::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsChangeLookAtRootNo
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsChangeLookAtRootNo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsChangeLookAtRootNo) == 0x000001, "Wrong alignment on TalkAnimInstance_IsChangeLookAtRootNo");
static_assert(sizeof(TalkAnimInstance_IsChangeLookAtRootNo) == 0x000001, "Wrong size on TalkAnimInstance_IsChangeLookAtRootNo");
static_assert(offsetof(TalkAnimInstance_IsChangeLookAtRootNo, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsChangeLookAtRootNo::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableBlink
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableBlink final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableBlink) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableBlink");
static_assert(sizeof(TalkAnimInstance_IsEnableBlink) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableBlink");
static_assert(offsetof(TalkAnimInstance_IsEnableBlink, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableBlink::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableBoostAnimation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableBoostAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableBoostAnimation) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableBoostAnimation");
static_assert(sizeof(TalkAnimInstance_IsEnableBoostAnimation) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableBoostAnimation");
static_assert(offsetof(TalkAnimInstance_IsEnableBoostAnimation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableBoostAnimation::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableGazing
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableGazing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableGazing) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableGazing");
static_assert(sizeof(TalkAnimInstance_IsEnableGazing) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableGazing");
static_assert(offsetof(TalkAnimInstance_IsEnableGazing, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableGazing::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableIdlingAction
// 0x0008 (0x0008 - 0x0000)
struct TalkAnimInstance_IsEnableIdlingAction final
{
public:
	int32                                         IdlingPatternNum;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TalkAnimInstance_IsEnableIdlingAction) == 0x000004, "Wrong alignment on TalkAnimInstance_IsEnableIdlingAction");
static_assert(sizeof(TalkAnimInstance_IsEnableIdlingAction) == 0x000008, "Wrong size on TalkAnimInstance_IsEnableIdlingAction");
static_assert(offsetof(TalkAnimInstance_IsEnableIdlingAction, IdlingPatternNum) == 0x000000, "Member 'TalkAnimInstance_IsEnableIdlingAction::IdlingPatternNum' has a wrong offset!");
static_assert(offsetof(TalkAnimInstance_IsEnableIdlingAction, ReturnValue) == 0x000004, "Member 'TalkAnimInstance_IsEnableIdlingAction::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableIdlingSequence_Implementation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableIdlingSequence_Implementation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableIdlingSequence_Implementation) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableIdlingSequence_Implementation");
static_assert(sizeof(TalkAnimInstance_IsEnableIdlingSequence_Implementation) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableIdlingSequence_Implementation");
static_assert(offsetof(TalkAnimInstance_IsEnableIdlingSequence_Implementation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableIdlingSequence_Implementation::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableLipSync
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableLipSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableLipSync) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableLipSync");
static_assert(sizeof(TalkAnimInstance_IsEnableLipSync) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableLipSync");
static_assert(offsetof(TalkAnimInstance_IsEnableLipSync, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableLipSync::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableLookAt
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableLookAt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableLookAt) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableLookAt");
static_assert(sizeof(TalkAnimInstance_IsEnableLookAt) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableLookAt");
static_assert(offsetof(TalkAnimInstance_IsEnableLookAt, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableLookAt::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableMove_Implementation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableMove_Implementation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableMove_Implementation) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableMove_Implementation");
static_assert(sizeof(TalkAnimInstance_IsEnableMove_Implementation) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableMove_Implementation");
static_assert(offsetof(TalkAnimInstance_IsEnableMove_Implementation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableMove_Implementation::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableRotateHeadBone
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableRotateHeadBone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableRotateHeadBone) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableRotateHeadBone");
static_assert(sizeof(TalkAnimInstance_IsEnableRotateHeadBone) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableRotateHeadBone");
static_assert(offsetof(TalkAnimInstance_IsEnableRotateHeadBone, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableRotateHeadBone::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableRotatePelvisBone
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableRotatePelvisBone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableRotatePelvisBone) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableRotatePelvisBone");
static_assert(sizeof(TalkAnimInstance_IsEnableRotatePelvisBone) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableRotatePelvisBone");
static_assert(offsetof(TalkAnimInstance_IsEnableRotatePelvisBone, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableRotatePelvisBone::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableRotateSpineBone
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableRotateSpineBone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableRotateSpineBone) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableRotateSpineBone");
static_assert(sizeof(TalkAnimInstance_IsEnableRotateSpineBone) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableRotateSpineBone");
static_assert(offsetof(TalkAnimInstance_IsEnableRotateSpineBone, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableRotateSpineBone::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableTalkingAnimation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableTalkingAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableTalkingAnimation) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableTalkingAnimation");
static_assert(sizeof(TalkAnimInstance_IsEnableTalkingAnimation) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableTalkingAnimation");
static_assert(offsetof(TalkAnimInstance_IsEnableTalkingAnimation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableTalkingAnimation::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsEnableUpperFaceAnimation_Implementation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsEnableUpperFaceAnimation_Implementation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsEnableUpperFaceAnimation_Implementation) == 0x000001, "Wrong alignment on TalkAnimInstance_IsEnableUpperFaceAnimation_Implementation");
static_assert(sizeof(TalkAnimInstance_IsEnableUpperFaceAnimation_Implementation) == 0x000001, "Wrong size on TalkAnimInstance_IsEnableUpperFaceAnimation_Implementation");
static_assert(offsetof(TalkAnimInstance_IsEnableUpperFaceAnimation_Implementation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsEnableUpperFaceAnimation_Implementation::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsLookAtBlendMethod
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsLookAtBlendMethod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsLookAtBlendMethod) == 0x000001, "Wrong alignment on TalkAnimInstance_IsLookAtBlendMethod");
static_assert(sizeof(TalkAnimInstance_IsLookAtBlendMethod) == 0x000001, "Wrong size on TalkAnimInstance_IsLookAtBlendMethod");
static_assert(offsetof(TalkAnimInstance_IsLookAtBlendMethod, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsLookAtBlendMethod::ReturnValue' has a wrong offset!");

// Function AT.TalkAnimInstance.IsNearPlayer_Implementation
// 0x0001 (0x0001 - 0x0000)
struct TalkAnimInstance_IsNearPlayer_Implementation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkAnimInstance_IsNearPlayer_Implementation) == 0x000001, "Wrong alignment on TalkAnimInstance_IsNearPlayer_Implementation");
static_assert(sizeof(TalkAnimInstance_IsNearPlayer_Implementation) == 0x000001, "Wrong size on TalkAnimInstance_IsNearPlayer_Implementation");
static_assert(offsetof(TalkAnimInstance_IsNearPlayer_Implementation, ReturnValue) == 0x000000, "Member 'TalkAnimInstance_IsNearPlayer_Implementation::ReturnValue' has a wrong offset!");

// Function AT.OptionMenu.GetUIWidget
// 0x0008 (0x0008 - 0x0000)
struct OptionMenu_GetUIWidget final
{
public:
	class UAT_UIStartOption*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionMenu_GetUIWidget) == 0x000008, "Wrong alignment on OptionMenu_GetUIWidget");
static_assert(sizeof(OptionMenu_GetUIWidget) == 0x000008, "Wrong size on OptionMenu_GetUIWidget");
static_assert(offsetof(OptionMenu_GetUIWidget, ReturnValue) == 0x000000, "Member 'OptionMenu_GetUIWidget::ReturnValue' has a wrong offset!");

// Function AT.OptionMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct OptionMenu_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionMenu_MouseClickDecide) == 0x000008, "Wrong alignment on OptionMenu_MouseClickDecide");
static_assert(sizeof(OptionMenu_MouseClickDecide) == 0x0000A8, "Wrong size on OptionMenu_MouseClickDecide");
static_assert(offsetof(OptionMenu_MouseClickDecide, InGeometry) == 0x000000, "Member 'OptionMenu_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(OptionMenu_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'OptionMenu_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.OptionMenu.MouseClickDownArrow
// 0x00A8 (0x00A8 - 0x0000)
struct OptionMenu_MouseClickDownArrow final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionMenu_MouseClickDownArrow) == 0x000008, "Wrong alignment on OptionMenu_MouseClickDownArrow");
static_assert(sizeof(OptionMenu_MouseClickDownArrow) == 0x0000A8, "Wrong size on OptionMenu_MouseClickDownArrow");
static_assert(offsetof(OptionMenu_MouseClickDownArrow, InGeometry) == 0x000000, "Member 'OptionMenu_MouseClickDownArrow::InGeometry' has a wrong offset!");
static_assert(offsetof(OptionMenu_MouseClickDownArrow, InMouseEvent) == 0x000038, "Member 'OptionMenu_MouseClickDownArrow::InMouseEvent' has a wrong offset!");

// Function AT.OptionMenu.MouseClickUpArrow
// 0x00A8 (0x00A8 - 0x0000)
struct OptionMenu_MouseClickUpArrow final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionMenu_MouseClickUpArrow) == 0x000008, "Wrong alignment on OptionMenu_MouseClickUpArrow");
static_assert(sizeof(OptionMenu_MouseClickUpArrow) == 0x0000A8, "Wrong size on OptionMenu_MouseClickUpArrow");
static_assert(offsetof(OptionMenu_MouseClickUpArrow, InGeometry) == 0x000000, "Member 'OptionMenu_MouseClickUpArrow::InGeometry' has a wrong offset!");
static_assert(offsetof(OptionMenu_MouseClickUpArrow, InMouseEvent) == 0x000038, "Member 'OptionMenu_MouseClickUpArrow::InMouseEvent' has a wrong offset!");

// Function AT.ATFeverManager.OnQuestChangeTiming
// 0x0010 (0x0010 - 0x0000)
struct ATFeverManager_OnQuestChangeTiming final
{
public:
	class FName                                   Quest_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestTimingType                              Timing;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATFeverManager_OnQuestChangeTiming) == 0x000004, "Wrong alignment on ATFeverManager_OnQuestChangeTiming");
static_assert(sizeof(ATFeverManager_OnQuestChangeTiming) == 0x000010, "Wrong size on ATFeverManager_OnQuestChangeTiming");
static_assert(offsetof(ATFeverManager_OnQuestChangeTiming, Quest_id) == 0x000000, "Member 'ATFeverManager_OnQuestChangeTiming::Quest_id' has a wrong offset!");
static_assert(offsetof(ATFeverManager_OnQuestChangeTiming, Timing) == 0x000008, "Member 'ATFeverManager_OnQuestChangeTiming::Timing' has a wrong offset!");

// Function AT.ATFlyingNimbus.OnDestroyedOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct ATFlyingNimbus_OnDestroyedOwnerActor final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFlyingNimbus_OnDestroyedOwnerActor) == 0x000008, "Wrong alignment on ATFlyingNimbus_OnDestroyedOwnerActor");
static_assert(sizeof(ATFlyingNimbus_OnDestroyedOwnerActor) == 0x000008, "Wrong size on ATFlyingNimbus_OnDestroyedOwnerActor");
static_assert(offsetof(ATFlyingNimbus_OnDestroyedOwnerActor, DestroyedActor) == 0x000000, "Member 'ATFlyingNimbus_OnDestroyedOwnerActor::DestroyedActor' has a wrong offset!");

// Function AT.ATFlyingNimbus.SetActiveNimbusParticle
// 0x0001 (0x0001 - 0x0000)
struct ATFlyingNimbus_SetActiveNimbusParticle final
{
public:
	bool                                          InbActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATFlyingNimbus_SetActiveNimbusParticle) == 0x000001, "Wrong alignment on ATFlyingNimbus_SetActiveNimbusParticle");
static_assert(sizeof(ATFlyingNimbus_SetActiveNimbusParticle) == 0x000001, "Wrong size on ATFlyingNimbus_SetActiveNimbusParticle");
static_assert(offsetof(ATFlyingNimbus_SetActiveNimbusParticle, InbActive) == 0x000000, "Member 'ATFlyingNimbus_SetActiveNimbusParticle::InbActive' has a wrong offset!");

// Function AT.ATGameMode.GetLevelManager
// 0x0008 (0x0008 - 0x0000)
struct ATGameMode_GetLevelManager final
{
public:
	class AATLevelManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATGameMode_GetLevelManager) == 0x000008, "Wrong alignment on ATGameMode_GetLevelManager");
static_assert(sizeof(ATGameMode_GetLevelManager) == 0x000008, "Wrong size on ATGameMode_GetLevelManager");
static_assert(offsetof(ATGameMode_GetLevelManager, ReturnValue) == 0x000000, "Member 'ATGameMode_GetLevelManager::ReturnValue' has a wrong offset!");

// Function AT.ATGameMode.OnPlayerInitialized
// 0x0008 (0x0008 - 0x0000)
struct ATGameMode_OnPlayerInitialized final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATGameMode_OnPlayerInitialized) == 0x000008, "Wrong alignment on ATGameMode_OnPlayerInitialized");
static_assert(sizeof(ATGameMode_OnPlayerInitialized) == 0x000008, "Wrong size on ATGameMode_OnPlayerInitialized");
static_assert(offsetof(ATGameMode_OnPlayerInitialized, Character) == 0x000000, "Member 'ATGameMode_OnPlayerInitialized::Character' has a wrong offset!");

// Function AT.CompanionAI.StopEvent
// 0x0008 (0x0008 - 0x0000)
struct CompanionAI_StopEvent final
{
public:
	class AAT_Character*                          Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompanionAI_StopEvent) == 0x000008, "Wrong alignment on CompanionAI_StopEvent");
static_assert(sizeof(CompanionAI_StopEvent) == 0x000008, "Wrong size on CompanionAI_StopEvent");
static_assert(offsetof(CompanionAI_StopEvent, Chara) == 0x000000, "Member 'CompanionAI_StopEvent::Chara' has a wrong offset!");

// Function AT.ATGeneralDemoAnimInstance.InitializeLipSync
// 0x0018 (0x0018 - 0x0000)
struct ATGeneralDemoAnimInstance_InitializeLipSync final
{
public:
	class FString                                 InMessageId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            InBlendSpace;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATGeneralDemoAnimInstance_InitializeLipSync) == 0x000008, "Wrong alignment on ATGeneralDemoAnimInstance_InitializeLipSync");
static_assert(sizeof(ATGeneralDemoAnimInstance_InitializeLipSync) == 0x000018, "Wrong size on ATGeneralDemoAnimInstance_InitializeLipSync");
static_assert(offsetof(ATGeneralDemoAnimInstance_InitializeLipSync, InMessageId) == 0x000000, "Member 'ATGeneralDemoAnimInstance_InitializeLipSync::InMessageId' has a wrong offset!");
static_assert(offsetof(ATGeneralDemoAnimInstance_InitializeLipSync, InBlendSpace) == 0x000010, "Member 'ATGeneralDemoAnimInstance_InitializeLipSync::InBlendSpace' has a wrong offset!");

// Function AT.ATGeneralDemoAnimInstance.SetEnableLipSync
// 0x0001 (0x0001 - 0x0000)
struct ATGeneralDemoAnimInstance_SetEnableLipSync final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATGeneralDemoAnimInstance_SetEnableLipSync) == 0x000001, "Wrong alignment on ATGeneralDemoAnimInstance_SetEnableLipSync");
static_assert(sizeof(ATGeneralDemoAnimInstance_SetEnableLipSync) == 0x000001, "Wrong size on ATGeneralDemoAnimInstance_SetEnableLipSync");
static_assert(offsetof(ATGeneralDemoAnimInstance_SetEnableLipSync, bEnable) == 0x000000, "Member 'ATGeneralDemoAnimInstance_SetEnableLipSync::bEnable' has a wrong offset!");

// Function AT.ATGeneralDemoAnimInstance.GetLipSize
// 0x0008 (0x0008 - 0x0000)
struct ATGeneralDemoAnimInstance_GetLipSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATGeneralDemoAnimInstance_GetLipSize) == 0x000004, "Wrong alignment on ATGeneralDemoAnimInstance_GetLipSize");
static_assert(sizeof(ATGeneralDemoAnimInstance_GetLipSize) == 0x000008, "Wrong size on ATGeneralDemoAnimInstance_GetLipSize");
static_assert(offsetof(ATGeneralDemoAnimInstance_GetLipSize, ReturnValue) == 0x000000, "Member 'ATGeneralDemoAnimInstance_GetLipSize::ReturnValue' has a wrong offset!");

// Function AT.ATGeneralDemoAnimInstance.IsEnableLipSync
// 0x0001 (0x0001 - 0x0000)
struct ATGeneralDemoAnimInstance_IsEnableLipSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATGeneralDemoAnimInstance_IsEnableLipSync) == 0x000001, "Wrong alignment on ATGeneralDemoAnimInstance_IsEnableLipSync");
static_assert(sizeof(ATGeneralDemoAnimInstance_IsEnableLipSync) == 0x000001, "Wrong size on ATGeneralDemoAnimInstance_IsEnableLipSync");
static_assert(offsetof(ATGeneralDemoAnimInstance_IsEnableLipSync, ReturnValue) == 0x000000, "Member 'ATGeneralDemoAnimInstance_IsEnableLipSync::ReturnValue' has a wrong offset!");

// Function AT.ATGeneralDemoCharacter.InitializeLipSync
// 0x0018 (0x0018 - 0x0000)
struct ATGeneralDemoCharacter_InitializeLipSync final
{
public:
	class FString                                 InMessageId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            BlendSpaceAsset;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATGeneralDemoCharacter_InitializeLipSync) == 0x000008, "Wrong alignment on ATGeneralDemoCharacter_InitializeLipSync");
static_assert(sizeof(ATGeneralDemoCharacter_InitializeLipSync) == 0x000018, "Wrong size on ATGeneralDemoCharacter_InitializeLipSync");
static_assert(offsetof(ATGeneralDemoCharacter_InitializeLipSync, InMessageId) == 0x000000, "Member 'ATGeneralDemoCharacter_InitializeLipSync::InMessageId' has a wrong offset!");
static_assert(offsetof(ATGeneralDemoCharacter_InitializeLipSync, BlendSpaceAsset) == 0x000010, "Member 'ATGeneralDemoCharacter_InitializeLipSync::BlendSpaceAsset' has a wrong offset!");

// Function AT.ATGeneralDemoCharacter.SetEnableLipSync
// 0x0001 (0x0001 - 0x0000)
struct ATGeneralDemoCharacter_SetEnableLipSync final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATGeneralDemoCharacter_SetEnableLipSync) == 0x000001, "Wrong alignment on ATGeneralDemoCharacter_SetEnableLipSync");
static_assert(sizeof(ATGeneralDemoCharacter_SetEnableLipSync) == 0x000001, "Wrong size on ATGeneralDemoCharacter_SetEnableLipSync");
static_assert(offsetof(ATGeneralDemoCharacter_SetEnableLipSync, bEnable) == 0x000000, "Member 'ATGeneralDemoCharacter_SetEnableLipSync::bEnable' has a wrong offset!");

// Function AT.IdlingSequentialAnimation.SetEnableIdlingSequence
// 0x0001 (0x0001 - 0x0000)
struct IdlingSequentialAnimation_SetEnableIdlingSequence final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdlingSequentialAnimation_SetEnableIdlingSequence) == 0x000001, "Wrong alignment on IdlingSequentialAnimation_SetEnableIdlingSequence");
static_assert(sizeof(IdlingSequentialAnimation_SetEnableIdlingSequence) == 0x000001, "Wrong size on IdlingSequentialAnimation_SetEnableIdlingSequence");
static_assert(offsetof(IdlingSequentialAnimation_SetEnableIdlingSequence, bEnabled) == 0x000000, "Member 'IdlingSequentialAnimation_SetEnableIdlingSequence::bEnabled' has a wrong offset!");

// Function AT.IdlingSequentialAnimation.SetIdlingSequencePattern
// 0x0004 (0x0004 - 0x0000)
struct IdlingSequentialAnimation_SetIdlingSequencePattern final
{
public:
	int32                                         PatternNo;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdlingSequentialAnimation_SetIdlingSequencePattern) == 0x000004, "Wrong alignment on IdlingSequentialAnimation_SetIdlingSequencePattern");
static_assert(sizeof(IdlingSequentialAnimation_SetIdlingSequencePattern) == 0x000004, "Wrong size on IdlingSequentialAnimation_SetIdlingSequencePattern");
static_assert(offsetof(IdlingSequentialAnimation_SetIdlingSequencePattern, PatternNo) == 0x000000, "Member 'IdlingSequentialAnimation_SetIdlingSequencePattern::PatternNo' has a wrong offset!");

// Function AT.IdlingSequentialAnimation.SetNearPlayer
// 0x0001 (0x0001 - 0x0000)
struct IdlingSequentialAnimation_SetNearPlayer final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdlingSequentialAnimation_SetNearPlayer) == 0x000001, "Wrong alignment on IdlingSequentialAnimation_SetNearPlayer");
static_assert(sizeof(IdlingSequentialAnimation_SetNearPlayer) == 0x000001, "Wrong size on IdlingSequentialAnimation_SetNearPlayer");
static_assert(offsetof(IdlingSequentialAnimation_SetNearPlayer, bFlag) == 0x000000, "Member 'IdlingSequentialAnimation_SetNearPlayer::bFlag' has a wrong offset!");

// Function AT.IdlingSequentialAnimation.GetIdlingSequencePattern
// 0x0004 (0x0004 - 0x0000)
struct IdlingSequentialAnimation_GetIdlingSequencePattern final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdlingSequentialAnimation_GetIdlingSequencePattern) == 0x000004, "Wrong alignment on IdlingSequentialAnimation_GetIdlingSequencePattern");
static_assert(sizeof(IdlingSequentialAnimation_GetIdlingSequencePattern) == 0x000004, "Wrong size on IdlingSequentialAnimation_GetIdlingSequencePattern");
static_assert(offsetof(IdlingSequentialAnimation_GetIdlingSequencePattern, ReturnValue) == 0x000000, "Member 'IdlingSequentialAnimation_GetIdlingSequencePattern::ReturnValue' has a wrong offset!");

// Function AT.IdlingSequentialAnimation.IsEnableIdlingSequence
// 0x0001 (0x0001 - 0x0000)
struct IdlingSequentialAnimation_IsEnableIdlingSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdlingSequentialAnimation_IsEnableIdlingSequence) == 0x000001, "Wrong alignment on IdlingSequentialAnimation_IsEnableIdlingSequence");
static_assert(sizeof(IdlingSequentialAnimation_IsEnableIdlingSequence) == 0x000001, "Wrong size on IdlingSequentialAnimation_IsEnableIdlingSequence");
static_assert(offsetof(IdlingSequentialAnimation_IsEnableIdlingSequence, ReturnValue) == 0x000000, "Member 'IdlingSequentialAnimation_IsEnableIdlingSequence::ReturnValue' has a wrong offset!");

// Function AT.IdlingSequentialAnimation.IsNearPlayer
// 0x0001 (0x0001 - 0x0000)
struct IdlingSequentialAnimation_IsNearPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdlingSequentialAnimation_IsNearPlayer) == 0x000001, "Wrong alignment on IdlingSequentialAnimation_IsNearPlayer");
static_assert(sizeof(IdlingSequentialAnimation_IsNearPlayer) == 0x000001, "Wrong size on IdlingSequentialAnimation_IsNearPlayer");
static_assert(offsetof(IdlingSequentialAnimation_IsNearPlayer, ReturnValue) == 0x000000, "Member 'IdlingSequentialAnimation_IsNearPlayer::ReturnValue' has a wrong offset!");

// Function AT.ATInteractComponent.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct ATInteractComponent_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATInteractComponent_BeginOverlap) == 0x000008, "Wrong alignment on ATInteractComponent_BeginOverlap");
static_assert(sizeof(ATInteractComponent_BeginOverlap) == 0x0000A8, "Wrong size on ATInteractComponent_BeginOverlap");
static_assert(offsetof(ATInteractComponent_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'ATInteractComponent_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATInteractComponent_BeginOverlap, OtherActor) == 0x000008, "Member 'ATInteractComponent_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ATInteractComponent_BeginOverlap, OtherComp) == 0x000010, "Member 'ATInteractComponent_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ATInteractComponent_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'ATInteractComponent_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ATInteractComponent_BeginOverlap, bFromSweep) == 0x00001C, "Member 'ATInteractComponent_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(ATInteractComponent_BeginOverlap, SweepResult) == 0x000020, "Member 'ATInteractComponent_BeginOverlap::SweepResult' has a wrong offset!");

// Function AT.ATInteractComponent.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct ATInteractComponent_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATInteractComponent_EndOverlap) == 0x000008, "Wrong alignment on ATInteractComponent_EndOverlap");
static_assert(sizeof(ATInteractComponent_EndOverlap) == 0x000020, "Wrong size on ATInteractComponent_EndOverlap");
static_assert(offsetof(ATInteractComponent_EndOverlap, OverlappedComponent) == 0x000000, "Member 'ATInteractComponent_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ATInteractComponent_EndOverlap, OtherActor) == 0x000008, "Member 'ATInteractComponent_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ATInteractComponent_EndOverlap, OtherComp) == 0x000010, "Member 'ATInteractComponent_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ATInteractComponent_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'ATInteractComponent_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function AT.QuestPhase_QuestClear.OnQuestClearTiming
// 0x0010 (0x0010 - 0x0000)
struct QuestPhase_QuestClear_OnQuestClearTiming final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestTimingType                              TimingType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestPhase_QuestClear_OnQuestClearTiming) == 0x000004, "Wrong alignment on QuestPhase_QuestClear_OnQuestClearTiming");
static_assert(sizeof(QuestPhase_QuestClear_OnQuestClearTiming) == 0x000010, "Wrong size on QuestPhase_QuestClear_OnQuestClearTiming");
static_assert(offsetof(QuestPhase_QuestClear_OnQuestClearTiming, QuestId) == 0x000000, "Member 'QuestPhase_QuestClear_OnQuestClearTiming::QuestId' has a wrong offset!");
static_assert(offsetof(QuestPhase_QuestClear_OnQuestClearTiming, TimingType) == 0x000008, "Member 'QuestPhase_QuestClear_OnQuestClearTiming::TimingType' has a wrong offset!");

// Function AT.Projectile_Cpl102SkillCurveShot.HitRootSphere
// 0x0088 (0x0088 - 0x0000)
struct Projectile_Cpl102SkillCurveShot_HitRootSphere final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl102SkillCurveShot_HitRootSphere) == 0x000008, "Wrong alignment on Projectile_Cpl102SkillCurveShot_HitRootSphere");
static_assert(sizeof(Projectile_Cpl102SkillCurveShot_HitRootSphere) == 0x000088, "Wrong size on Projectile_Cpl102SkillCurveShot_HitRootSphere");
static_assert(offsetof(Projectile_Cpl102SkillCurveShot_HitRootSphere, ImpactResult) == 0x000000, "Member 'Projectile_Cpl102SkillCurveShot_HitRootSphere::ImpactResult' has a wrong offset!");

// Function AT.KPIRequester.ResAPI
// 0x0010 (0x0010 - 0x0000)
struct KPIRequester_ResAPI final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KPIRequester_ResAPI) == 0x000008, "Wrong alignment on KPIRequester_ResAPI");
static_assert(sizeof(KPIRequester_ResAPI) == 0x000010, "Wrong size on KPIRequester_ResAPI");
static_assert(offsetof(KPIRequester_ResAPI, Data) == 0x000000, "Member 'KPIRequester_ResAPI::Data' has a wrong offset!");

// Function AT.ATLevelManager.OnLevelLoaded
// 0x0008 (0x0008 - 0x0000)
struct ATLevelManager_OnLevelLoaded final
{
public:
	class ULevelStreaming*                        StreamingLevel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelManager_OnLevelLoaded) == 0x000008, "Wrong alignment on ATLevelManager_OnLevelLoaded");
static_assert(sizeof(ATLevelManager_OnLevelLoaded) == 0x000008, "Wrong size on ATLevelManager_OnLevelLoaded");
static_assert(offsetof(ATLevelManager_OnLevelLoaded, StreamingLevel) == 0x000000, "Member 'ATLevelManager_OnLevelLoaded::StreamingLevel' has a wrong offset!");

// Function AT.ATLevelManager.OnPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct ATLevelManager_OnPlayerChanged final
{
public:
	class AAT_Character*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelManager_OnPlayerChanged) == 0x000008, "Wrong alignment on ATLevelManager_OnPlayerChanged");
static_assert(sizeof(ATLevelManager_OnPlayerChanged) == 0x000008, "Wrong size on ATLevelManager_OnPlayerChanged");
static_assert(offsetof(ATLevelManager_OnPlayerChanged, Target) == 0x000000, "Member 'ATLevelManager_OnPlayerChanged::Target' has a wrong offset!");

// Function AT.ATLevelManager.OnVisibilityChanged
// 0x0008 (0x0008 - 0x0000)
struct ATLevelManager_OnVisibilityChanged final
{
public:
	class ULevelStreaming*                        StreamingLevel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLevelManager_OnVisibilityChanged) == 0x000008, "Wrong alignment on ATLevelManager_OnVisibilityChanged");
static_assert(sizeof(ATLevelManager_OnVisibilityChanged) == 0x000008, "Wrong size on ATLevelManager_OnVisibilityChanged");
static_assert(offsetof(ATLevelManager_OnVisibilityChanged, StreamingLevel) == 0x000000, "Member 'ATLevelManager_OnVisibilityChanged::StreamingLevel' has a wrong offset!");

// Function AT.LevelNavigator.OnNavigate
// 0x0008 (0x0008 - 0x0000)
struct LevelNavigator_OnNavigate final
{
public:
	class FName                                   InNavigateLevelName;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelNavigator_OnNavigate) == 0x000004, "Wrong alignment on LevelNavigator_OnNavigate");
static_assert(sizeof(LevelNavigator_OnNavigate) == 0x000008, "Wrong size on LevelNavigator_OnNavigate");
static_assert(offsetof(LevelNavigator_OnNavigate, InNavigateLevelName) == 0x000000, "Member 'LevelNavigator_OnNavigate::InNavigateLevelName' has a wrong offset!");

// Function AT.LevelNavigator.OnSelected
// 0x0004 (0x0004 - 0x0000)
struct LevelNavigator_OnSelected final
{
public:
	int32                                         SelectedNo;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelNavigator_OnSelected) == 0x000004, "Wrong alignment on LevelNavigator_OnSelected");
static_assert(sizeof(LevelNavigator_OnSelected) == 0x000004, "Wrong size on LevelNavigator_OnSelected");
static_assert(offsetof(LevelNavigator_OnSelected, SelectedNo) == 0x000000, "Member 'LevelNavigator_OnSelected::SelectedNo' has a wrong offset!");

// Function AT.LevelNavigator.OpenMultiSelectableWindow
// 0x0028 (0x0028 - 0x0000)
struct LevelNavigator_OpenMultiSelectableWindow final
{
public:
	class FName                                   InSelectableWindowTitleId;                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSelectableWindowBodyId;                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           InSelectableItemMessageIds;                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCancelable;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelNavigator_OpenMultiSelectableWindow) == 0x000008, "Wrong alignment on LevelNavigator_OpenMultiSelectableWindow");
static_assert(sizeof(LevelNavigator_OpenMultiSelectableWindow) == 0x000028, "Wrong size on LevelNavigator_OpenMultiSelectableWindow");
static_assert(offsetof(LevelNavigator_OpenMultiSelectableWindow, InSelectableWindowTitleId) == 0x000000, "Member 'LevelNavigator_OpenMultiSelectableWindow::InSelectableWindowTitleId' has a wrong offset!");
static_assert(offsetof(LevelNavigator_OpenMultiSelectableWindow, InSelectableWindowBodyId) == 0x000008, "Member 'LevelNavigator_OpenMultiSelectableWindow::InSelectableWindowBodyId' has a wrong offset!");
static_assert(offsetof(LevelNavigator_OpenMultiSelectableWindow, InSelectableItemMessageIds) == 0x000010, "Member 'LevelNavigator_OpenMultiSelectableWindow::InSelectableItemMessageIds' has a wrong offset!");
static_assert(offsetof(LevelNavigator_OpenMultiSelectableWindow, bCancelable) == 0x000020, "Member 'LevelNavigator_OpenMultiSelectableWindow::bCancelable' has a wrong offset!");

// Function AT.LevelNavigator.GetNavigateLevelName
// 0x0008 (0x0008 - 0x0000)
struct LevelNavigator_GetNavigateLevelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelNavigator_GetNavigateLevelName) == 0x000004, "Wrong alignment on LevelNavigator_GetNavigateLevelName");
static_assert(sizeof(LevelNavigator_GetNavigateLevelName) == 0x000008, "Wrong size on LevelNavigator_GetNavigateLevelName");
static_assert(offsetof(LevelNavigator_GetNavigateLevelName, ReturnValue) == 0x000000, "Member 'LevelNavigator_GetNavigateLevelName::ReturnValue' has a wrong offset!");

// Function AT.PreRenderDemoActor.OnSubtitleChanged
// 0x0018 (0x0018 - 0x0000)
struct PreRenderDemoActor_OnSubtitleChanged final
{
public:
	class FText                                   NewSubtitle;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreRenderDemoActor_OnSubtitleChanged) == 0x000008, "Wrong alignment on PreRenderDemoActor_OnSubtitleChanged");
static_assert(sizeof(PreRenderDemoActor_OnSubtitleChanged) == 0x000018, "Wrong size on PreRenderDemoActor_OnSubtitleChanged");
static_assert(offsetof(PreRenderDemoActor_OnSubtitleChanged, NewSubtitle) == 0x000000, "Member 'PreRenderDemoActor_OnSubtitleChanged::NewSubtitle' has a wrong offset!");

// Function AT.ATMechaDevManager.BeginMechaDev
// 0x0008 (0x0008 - 0x0000)
struct ATMechaDevManager_BeginMechaDev final
{
public:
	class AActor*                                 OwnerCharacter_0;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATMechaDevManager_BeginMechaDev) == 0x000008, "Wrong alignment on ATMechaDevManager_BeginMechaDev");
static_assert(sizeof(ATMechaDevManager_BeginMechaDev) == 0x000008, "Wrong size on ATMechaDevManager_BeginMechaDev");
static_assert(offsetof(ATMechaDevManager_BeginMechaDev, OwnerCharacter_0) == 0x000000, "Member 'ATMechaDevManager_BeginMechaDev::OwnerCharacter_0' has a wrong offset!");

// Function AT.ATMechaDevManager.IsMechaDevActive
// 0x0001 (0x0001 - 0x0000)
struct ATMechaDevManager_IsMechaDevActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATMechaDevManager_IsMechaDevActive) == 0x000001, "Wrong alignment on ATMechaDevManager_IsMechaDevActive");
static_assert(sizeof(ATMechaDevManager_IsMechaDevActive) == 0x000001, "Wrong size on ATMechaDevManager_IsMechaDevActive");
static_assert(offsetof(ATMechaDevManager_IsMechaDevActive, ReturnValue) == 0x000000, "Member 'ATMechaDevManager_IsMechaDevActive::ReturnValue' has a wrong offset!");

// Function AT.MiniQuest.OnAddedItem
// 0x0008 (0x0008 - 0x0000)
struct MiniQuest_OnAddedItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniQuest_OnAddedItem) == 0x000004, "Wrong alignment on MiniQuest_OnAddedItem");
static_assert(sizeof(MiniQuest_OnAddedItem) == 0x000008, "Wrong size on MiniQuest_OnAddedItem");
static_assert(offsetof(MiniQuest_OnAddedItem, ItemId) == 0x000000, "Member 'MiniQuest_OnAddedItem::ItemId' has a wrong offset!");

// Function AT.MiniQuest.OnBrokeObject
// 0x0008 (0x0008 - 0x0000)
struct MiniQuest_OnBrokeObject final
{
public:
	class FName                                   TriggerId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniQuest_OnBrokeObject) == 0x000004, "Wrong alignment on MiniQuest_OnBrokeObject");
static_assert(sizeof(MiniQuest_OnBrokeObject) == 0x000008, "Wrong size on MiniQuest_OnBrokeObject");
static_assert(offsetof(MiniQuest_OnBrokeObject, TriggerId) == 0x000000, "Member 'MiniQuest_OnBrokeObject::TriggerId' has a wrong offset!");

// Function AT.MoveAnimation.SetEnableMove
// 0x0001 (0x0001 - 0x0000)
struct MoveAnimation_SetEnableMove final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveAnimation_SetEnableMove) == 0x000001, "Wrong alignment on MoveAnimation_SetEnableMove");
static_assert(sizeof(MoveAnimation_SetEnableMove) == 0x000001, "Wrong size on MoveAnimation_SetEnableMove");
static_assert(offsetof(MoveAnimation_SetEnableMove, bEnabled) == 0x000000, "Member 'MoveAnimation_SetEnableMove::bEnabled' has a wrong offset!");

// Function AT.MoveAnimation.IsEnableMove
// 0x0001 (0x0001 - 0x0000)
struct MoveAnimation_IsEnableMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveAnimation_IsEnableMove) == 0x000001, "Wrong alignment on MoveAnimation_IsEnableMove");
static_assert(sizeof(MoveAnimation_IsEnableMove) == 0x000001, "Wrong size on MoveAnimation_IsEnableMove");
static_assert(offsetof(MoveAnimation_IsEnableMove, ReturnValue) == 0x000000, "Member 'MoveAnimation_IsEnableMove::ReturnValue' has a wrong offset!");

// Function AT.ATParticleManager.DeactiveParticleComponent
// 0x0008 (0x0008 - 0x0000)
struct ATParticleManager_DeactiveParticleComponent final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATParticleManager_DeactiveParticleComponent) == 0x000004, "Wrong alignment on ATParticleManager_DeactiveParticleComponent");
static_assert(sizeof(ATParticleManager_DeactiveParticleComponent) == 0x000008, "Wrong size on ATParticleManager_DeactiveParticleComponent");
static_assert(offsetof(ATParticleManager_DeactiveParticleComponent, InUID) == 0x000000, "Member 'ATParticleManager_DeactiveParticleComponent::InUID' has a wrong offset!");
static_assert(offsetof(ATParticleManager_DeactiveParticleComponent, ReturnValue) == 0x000004, "Member 'ATParticleManager_DeactiveParticleComponent::ReturnValue' has a wrong offset!");

// Function AT.ATParticleManager.GetParticleComponent
// 0x0010 (0x0010 - 0x0000)
struct ATParticleManager_GetParticleComponent final
{
public:
	int32                                         InUID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATParticleManager_GetParticleComponent) == 0x000008, "Wrong alignment on ATParticleManager_GetParticleComponent");
static_assert(sizeof(ATParticleManager_GetParticleComponent) == 0x000010, "Wrong size on ATParticleManager_GetParticleComponent");
static_assert(offsetof(ATParticleManager_GetParticleComponent, InUID) == 0x000000, "Member 'ATParticleManager_GetParticleComponent::InUID' has a wrong offset!");
static_assert(offsetof(ATParticleManager_GetParticleComponent, ReturnValue) == 0x000008, "Member 'ATParticleManager_GetParticleComponent::ReturnValue' has a wrong offset!");

// Function AT.ATParticleManager.OnSystemFinished
// 0x0008 (0x0008 - 0x0000)
struct ATParticleManager_OnSystemFinished final
{
public:
	class UParticleSystemComponent*               InFinishedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATParticleManager_OnSystemFinished) == 0x000008, "Wrong alignment on ATParticleManager_OnSystemFinished");
static_assert(sizeof(ATParticleManager_OnSystemFinished) == 0x000008, "Wrong size on ATParticleManager_OnSystemFinished");
static_assert(offsetof(ATParticleManager_OnSystemFinished, InFinishedComponent) == 0x000000, "Member 'ATParticleManager_OnSystemFinished::InFinishedComponent' has a wrong offset!");

// Function AT.ATPillarThrowManager.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct ATPillarThrowManager_OnChangeAction final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionIdPrev;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionIdNext;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPillarThrowManager_OnChangeAction) == 0x000008, "Wrong alignment on ATPillarThrowManager_OnChangeAction");
static_assert(sizeof(ATPillarThrowManager_OnChangeAction) == 0x000010, "Wrong size on ATPillarThrowManager_OnChangeAction");
static_assert(offsetof(ATPillarThrowManager_OnChangeAction, Character) == 0x000000, "Member 'ATPillarThrowManager_OnChangeAction::Character' has a wrong offset!");
static_assert(offsetof(ATPillarThrowManager_OnChangeAction, ActionIdPrev) == 0x000008, "Member 'ATPillarThrowManager_OnChangeAction::ActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATPillarThrowManager_OnChangeAction, ActionIdNext) == 0x00000C, "Member 'ATPillarThrowManager_OnChangeAction::ActionIdNext' has a wrong offset!");

// Function AT.ATPillarThrowManager.OnChangePlayer
// 0x0008 (0x0008 - 0x0000)
struct ATPillarThrowManager_OnChangePlayer final
{
public:
	class AAT_Character*                          NextCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPillarThrowManager_OnChangePlayer) == 0x000008, "Wrong alignment on ATPillarThrowManager_OnChangePlayer");
static_assert(sizeof(ATPillarThrowManager_OnChangePlayer) == 0x000008, "Wrong size on ATPillarThrowManager_OnChangePlayer");
static_assert(offsetof(ATPillarThrowManager_OnChangePlayer, NextCharacter) == 0x000000, "Member 'ATPillarThrowManager_OnChangePlayer::NextCharacter' has a wrong offset!");

// Function AT.ATPlayerCameraManager.ChangeView
// 0x0020 (0x0020 - 0x0000)
struct ATPlayerCameraManager_ChangeView final
{
public:
	ECameraMode                                   EMode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 POwner;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PSubActor;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcedChange;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReserveChange;                                     // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerCameraManager_ChangeView) == 0x000008, "Wrong alignment on ATPlayerCameraManager_ChangeView");
static_assert(sizeof(ATPlayerCameraManager_ChangeView) == 0x000020, "Wrong size on ATPlayerCameraManager_ChangeView");
static_assert(offsetof(ATPlayerCameraManager_ChangeView, EMode) == 0x000000, "Member 'ATPlayerCameraManager_ChangeView::EMode' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_ChangeView, POwner) == 0x000008, "Member 'ATPlayerCameraManager_ChangeView::POwner' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_ChangeView, PSubActor) == 0x000010, "Member 'ATPlayerCameraManager_ChangeView::PSubActor' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_ChangeView, ForcedChange) == 0x000018, "Member 'ATPlayerCameraManager_ChangeView::ForcedChange' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_ChangeView, bReset) == 0x000019, "Member 'ATPlayerCameraManager_ChangeView::bReset' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_ChangeView, ReserveChange) == 0x00001A, "Member 'ATPlayerCameraManager_ChangeView::ReserveChange' has a wrong offset!");

// Function AT.ATPlayerCameraManager.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ATPlayerCameraManager_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueFlag;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallSelf;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATPlayerCameraManager_OnDemoTiming) == 0x000004, "Wrong alignment on ATPlayerCameraManager_OnDemoTiming");
static_assert(sizeof(ATPlayerCameraManager_OnDemoTiming) == 0x000018, "Wrong size on ATPlayerCameraManager_OnDemoTiming");
static_assert(offsetof(ATPlayerCameraManager_OnDemoTiming, DemoType) == 0x000000, "Member 'ATPlayerCameraManager_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_OnDemoTiming, DemoTiming) == 0x000001, "Member 'ATPlayerCameraManager_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_OnDemoTiming, DemoName) == 0x000008, "Member 'ATPlayerCameraManager_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_OnDemoTiming, bContinueFlag) == 0x000010, "Member 'ATPlayerCameraManager_OnDemoTiming::bContinueFlag' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_OnDemoTiming, bCallSelf) == 0x000011, "Member 'ATPlayerCameraManager_OnDemoTiming::bCallSelf' has a wrong offset!");

// Function AT.ATPlayerCameraManager.OnInGameBeginPlay
// 0x0108 (0x0108 - 0x0000)
struct ATPlayerCameraManager_OnInGameBeginPlay final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerCameraManager_OnInGameBeginPlay) == 0x000008, "Wrong alignment on ATPlayerCameraManager_OnInGameBeginPlay");
static_assert(sizeof(ATPlayerCameraManager_OnInGameBeginPlay) == 0x000108, "Wrong size on ATPlayerCameraManager_OnInGameBeginPlay");
static_assert(offsetof(ATPlayerCameraManager_OnInGameBeginPlay, Param) == 0x000000, "Member 'ATPlayerCameraManager_OnInGameBeginPlay::Param' has a wrong offset!");

// Function AT.ATPlayerCameraManager.SetViewByControlCharacter
// 0x0001 (0x0001 - 0x0000)
struct ATPlayerCameraManager_SetViewByControlCharacter final
{
public:
	bool                                          InbImmediate;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerCameraManager_SetViewByControlCharacter) == 0x000001, "Wrong alignment on ATPlayerCameraManager_SetViewByControlCharacter");
static_assert(sizeof(ATPlayerCameraManager_SetViewByControlCharacter) == 0x000001, "Wrong size on ATPlayerCameraManager_SetViewByControlCharacter");
static_assert(offsetof(ATPlayerCameraManager_SetViewByControlCharacter, InbImmediate) == 0x000000, "Member 'ATPlayerCameraManager_SetViewByControlCharacter::InbImmediate' has a wrong offset!");

// Function AT.ATPlayerCameraManager.SetViewByControlCharacterWithBlemdTime
// 0x0004 (0x0004 - 0x0000)
struct ATPlayerCameraManager_SetViewByControlCharacterWithBlemdTime final
{
public:
	float                                         FBlendTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerCameraManager_SetViewByControlCharacterWithBlemdTime) == 0x000004, "Wrong alignment on ATPlayerCameraManager_SetViewByControlCharacterWithBlemdTime");
static_assert(sizeof(ATPlayerCameraManager_SetViewByControlCharacterWithBlemdTime) == 0x000004, "Wrong size on ATPlayerCameraManager_SetViewByControlCharacterWithBlemdTime");
static_assert(offsetof(ATPlayerCameraManager_SetViewByControlCharacterWithBlemdTime, FBlendTime) == 0x000000, "Member 'ATPlayerCameraManager_SetViewByControlCharacterWithBlemdTime::FBlendTime' has a wrong offset!");

// Function AT.ATPlayerCameraManager.GetViewActor
// 0x0010 (0x0010 - 0x0000)
struct ATPlayerCameraManager_GetViewActor final
{
public:
	ECameraMode                                   EMode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerCameraManager_GetViewActor) == 0x000008, "Wrong alignment on ATPlayerCameraManager_GetViewActor");
static_assert(sizeof(ATPlayerCameraManager_GetViewActor) == 0x000010, "Wrong size on ATPlayerCameraManager_GetViewActor");
static_assert(offsetof(ATPlayerCameraManager_GetViewActor, EMode) == 0x000000, "Member 'ATPlayerCameraManager_GetViewActor::EMode' has a wrong offset!");
static_assert(offsetof(ATPlayerCameraManager_GetViewActor, ReturnValue) == 0x000008, "Member 'ATPlayerCameraManager_GetViewActor::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerController.GetAxisValue
// 0x0008 (0x0008 - 0x0000)
struct ATPlayerController_GetAxisValue final
{
public:
	EAT_CONTROL_INPUT_AXIS                        AxisType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PastTickNum;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_GetAxisValue) == 0x000004, "Wrong alignment on ATPlayerController_GetAxisValue");
static_assert(sizeof(ATPlayerController_GetAxisValue) == 0x000008, "Wrong size on ATPlayerController_GetAxisValue");
static_assert(offsetof(ATPlayerController_GetAxisValue, AxisType) == 0x000000, "Member 'ATPlayerController_GetAxisValue::AxisType' has a wrong offset!");
static_assert(offsetof(ATPlayerController_GetAxisValue, PastTickNum) == 0x000001, "Member 'ATPlayerController_GetAxisValue::PastTickNum' has a wrong offset!");
static_assert(offsetof(ATPlayerController_GetAxisValue, ReturnValue) == 0x000004, "Member 'ATPlayerController_GetAxisValue::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerController.getViewRotation
// 0x000C (0x000C - 0x0000)
struct ATPlayerController_GetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_GetViewRotation) == 0x000004, "Wrong alignment on ATPlayerController_GetViewRotation");
static_assert(sizeof(ATPlayerController_GetViewRotation) == 0x00000C, "Wrong size on ATPlayerController_GetViewRotation");
static_assert(offsetof(ATPlayerController_GetViewRotation, ReturnValue) == 0x000000, "Member 'ATPlayerController_GetViewRotation::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerController.IsPressed
// 0x0002 (0x0002 - 0x0000)
struct ATPlayerController_IsPressed final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_IsPressed) == 0x000001, "Wrong alignment on ATPlayerController_IsPressed");
static_assert(sizeof(ATPlayerController_IsPressed) == 0x000002, "Wrong size on ATPlayerController_IsPressed");
static_assert(offsetof(ATPlayerController_IsPressed, ActionType) == 0x000000, "Member 'ATPlayerController_IsPressed::ActionType' has a wrong offset!");
static_assert(offsetof(ATPlayerController_IsPressed, ReturnValue) == 0x000001, "Member 'ATPlayerController_IsPressed::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerController.OnWindRoadChangeCamera
// 0x0001 (0x0001 - 0x0000)
struct ATPlayerController_OnWindRoadChangeCamera final
{
public:
	struct FATWindRoadCameraParam                 InParam;                                           // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_OnWindRoadChangeCamera) == 0x000001, "Wrong alignment on ATPlayerController_OnWindRoadChangeCamera");
static_assert(sizeof(ATPlayerController_OnWindRoadChangeCamera) == 0x000001, "Wrong size on ATPlayerController_OnWindRoadChangeCamera");
static_assert(offsetof(ATPlayerController_OnWindRoadChangeCamera, InParam) == 0x000000, "Member 'ATPlayerController_OnWindRoadChangeCamera::InParam' has a wrong offset!");

// Function AT.ATPlayerController.OnWindRoadEnter
// 0x0001 (0x0001 - 0x0000)
struct ATPlayerController_OnWindRoadEnter final
{
public:
	struct FATWindRoadEnterParam                  InParam;                                           // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_OnWindRoadEnter) == 0x000001, "Wrong alignment on ATPlayerController_OnWindRoadEnter");
static_assert(sizeof(ATPlayerController_OnWindRoadEnter) == 0x000001, "Wrong size on ATPlayerController_OnWindRoadEnter");
static_assert(offsetof(ATPlayerController_OnWindRoadEnter, InParam) == 0x000000, "Member 'ATPlayerController_OnWindRoadEnter::InParam' has a wrong offset!");

// Function AT.ATPlayerController.PressedSimultaneous
// 0x0005 (0x0005 - 0x0000)
struct ATPlayerController_PressedSimultaneous final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType1;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAT_CONTROL_INPUT_ACTION                      ActionType2;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PastTickNum;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermitHoldDown;                                   // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_PressedSimultaneous) == 0x000001, "Wrong alignment on ATPlayerController_PressedSimultaneous");
static_assert(sizeof(ATPlayerController_PressedSimultaneous) == 0x000005, "Wrong size on ATPlayerController_PressedSimultaneous");
static_assert(offsetof(ATPlayerController_PressedSimultaneous, ActionType1) == 0x000000, "Member 'ATPlayerController_PressedSimultaneous::ActionType1' has a wrong offset!");
static_assert(offsetof(ATPlayerController_PressedSimultaneous, ActionType2) == 0x000001, "Member 'ATPlayerController_PressedSimultaneous::ActionType2' has a wrong offset!");
static_assert(offsetof(ATPlayerController_PressedSimultaneous, PastTickNum) == 0x000002, "Member 'ATPlayerController_PressedSimultaneous::PastTickNum' has a wrong offset!");
static_assert(offsetof(ATPlayerController_PressedSimultaneous, bPermitHoldDown) == 0x000003, "Member 'ATPlayerController_PressedSimultaneous::bPermitHoldDown' has a wrong offset!");
static_assert(offsetof(ATPlayerController_PressedSimultaneous, ReturnValue) == 0x000004, "Member 'ATPlayerController_PressedSimultaneous::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerController.SetBattlePauseMenu
// 0x0001 (0x0001 - 0x0000)
struct ATPlayerController_SetBattlePauseMenu final
{
public:
	bool                                          bMenuPauseOff;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_SetBattlePauseMenu) == 0x000001, "Wrong alignment on ATPlayerController_SetBattlePauseMenu");
static_assert(sizeof(ATPlayerController_SetBattlePauseMenu) == 0x000001, "Wrong size on ATPlayerController_SetBattlePauseMenu");
static_assert(offsetof(ATPlayerController_SetBattlePauseMenu, bMenuPauseOff) == 0x000000, "Member 'ATPlayerController_SetBattlePauseMenu::bMenuPauseOff' has a wrong offset!");

// Function AT.ATPlayerController.SetKeepViewTargetChange
// 0x0001 (0x0001 - 0x0000)
struct ATPlayerController_SetKeepViewTargetChange final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_SetKeepViewTargetChange) == 0x000001, "Wrong alignment on ATPlayerController_SetKeepViewTargetChange");
static_assert(sizeof(ATPlayerController_SetKeepViewTargetChange) == 0x000001, "Wrong size on ATPlayerController_SetKeepViewTargetChange");
static_assert(offsetof(ATPlayerController_SetKeepViewTargetChange, Enabled) == 0x000000, "Member 'ATPlayerController_SetKeepViewTargetChange::Enabled' has a wrong offset!");

// Function AT.ATPlayerController.SetPauseMenu
// 0x0001 (0x0001 - 0x0000)
struct ATPlayerController_SetPauseMenu final
{
public:
	bool                                          bMenuPauseOff;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_SetPauseMenu) == 0x000001, "Wrong alignment on ATPlayerController_SetPauseMenu");
static_assert(sizeof(ATPlayerController_SetPauseMenu) == 0x000001, "Wrong size on ATPlayerController_SetPauseMenu");
static_assert(offsetof(ATPlayerController_SetPauseMenu, bMenuPauseOff) == 0x000000, "Member 'ATPlayerController_SetPauseMenu::bMenuPauseOff' has a wrong offset!");

// Function AT.ATPlayerController.TargetChangedHandler
// 0x0008 (0x0008 - 0x0000)
struct ATPlayerController_TargetChangedHandler final
{
public:
	class AActor*                                 InNewTargetCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_TargetChangedHandler) == 0x000008, "Wrong alignment on ATPlayerController_TargetChangedHandler");
static_assert(sizeof(ATPlayerController_TargetChangedHandler) == 0x000008, "Wrong size on ATPlayerController_TargetChangedHandler");
static_assert(offsetof(ATPlayerController_TargetChangedHandler, InNewTargetCharacter) == 0x000000, "Member 'ATPlayerController_TargetChangedHandler::InNewTargetCharacter' has a wrong offset!");

// Function AT.ATPlayerController.UnbindActionDefault
// 0x0001 (0x0001 - 0x0000)
struct ATPlayerController_UnbindActionDefault final
{
public:
	bool                                          bLeaveBaseInput;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_UnbindActionDefault) == 0x000001, "Wrong alignment on ATPlayerController_UnbindActionDefault");
static_assert(sizeof(ATPlayerController_UnbindActionDefault) == 0x000001, "Wrong size on ATPlayerController_UnbindActionDefault");
static_assert(offsetof(ATPlayerController_UnbindActionDefault, bLeaveBaseInput) == 0x000000, "Member 'ATPlayerController_UnbindActionDefault::bLeaveBaseInput' has a wrong offset!");

// Function AT.ATPlayerController.WasJustPressed
// 0x0002 (0x0002 - 0x0000)
struct ATPlayerController_WasJustPressed final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_WasJustPressed) == 0x000001, "Wrong alignment on ATPlayerController_WasJustPressed");
static_assert(sizeof(ATPlayerController_WasJustPressed) == 0x000002, "Wrong size on ATPlayerController_WasJustPressed");
static_assert(offsetof(ATPlayerController_WasJustPressed, ActionType) == 0x000000, "Member 'ATPlayerController_WasJustPressed::ActionType' has a wrong offset!");
static_assert(offsetof(ATPlayerController_WasJustPressed, ReturnValue) == 0x000001, "Member 'ATPlayerController_WasJustPressed::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerController.WasJustReleased
// 0x0002 (0x0002 - 0x0000)
struct ATPlayerController_WasJustReleased final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_WasJustReleased) == 0x000001, "Wrong alignment on ATPlayerController_WasJustReleased");
static_assert(sizeof(ATPlayerController_WasJustReleased) == 0x000002, "Wrong size on ATPlayerController_WasJustReleased");
static_assert(offsetof(ATPlayerController_WasJustReleased, ActionType) == 0x000000, "Member 'ATPlayerController_WasJustReleased::ActionType' has a wrong offset!");
static_assert(offsetof(ATPlayerController_WasJustReleased, ReturnValue) == 0x000001, "Member 'ATPlayerController_WasJustReleased::ReturnValue' has a wrong offset!");

// Function AT.ATPlayerController.WasPressed
// 0x0004 (0x0004 - 0x0000)
struct ATPlayerController_WasPressed final
{
public:
	EAT_CONTROL_INPUT_ACTION                      ActionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PastTickNum;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermitHoldDown;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATPlayerController_WasPressed) == 0x000001, "Wrong alignment on ATPlayerController_WasPressed");
static_assert(sizeof(ATPlayerController_WasPressed) == 0x000004, "Wrong size on ATPlayerController_WasPressed");
static_assert(offsetof(ATPlayerController_WasPressed, ActionType) == 0x000000, "Member 'ATPlayerController_WasPressed::ActionType' has a wrong offset!");
static_assert(offsetof(ATPlayerController_WasPressed, PastTickNum) == 0x000001, "Member 'ATPlayerController_WasPressed::PastTickNum' has a wrong offset!");
static_assert(offsetof(ATPlayerController_WasPressed, bPermitHoldDown) == 0x000002, "Member 'ATPlayerController_WasPressed::bPermitHoldDown' has a wrong offset!");
static_assert(offsetof(ATPlayerController_WasPressed, ReturnValue) == 0x000003, "Member 'ATPlayerController_WasPressed::ReturnValue' has a wrong offset!");

// Function AT.ATProjectileEnemyField.HitRootSphere
// 0x0088 (0x0088 - 0x0000)
struct ATProjectileEnemyField_HitRootSphere final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATProjectileEnemyField_HitRootSphere) == 0x000008, "Wrong alignment on ATProjectileEnemyField_HitRootSphere");
static_assert(sizeof(ATProjectileEnemyField_HitRootSphere) == 0x000088, "Wrong size on ATProjectileEnemyField_HitRootSphere");
static_assert(offsetof(ATProjectileEnemyField_HitRootSphere, ImpactResult) == 0x000000, "Member 'ATProjectileEnemyField_HitRootSphere::ImpactResult' has a wrong offset!");

// Function AT.QuestCharacter.HiddenInEvents
// 0x0001 (0x0001 - 0x0000)
struct QuestCharacter_HiddenInEvents final
{
public:
	EQUEST_GENERAL_TALK_TIMING                    Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCharacter_HiddenInEvents) == 0x000001, "Wrong alignment on QuestCharacter_HiddenInEvents");
static_assert(sizeof(QuestCharacter_HiddenInEvents) == 0x000001, "Wrong size on QuestCharacter_HiddenInEvents");
static_assert(offsetof(QuestCharacter_HiddenInEvents, Timing) == 0x000000, "Member 'QuestCharacter_HiddenInEvents::Timing' has a wrong offset!");

// Function AT.QuestCharacter.OnJoinedSupportCharacter
// 0x0030 (0x0030 - 0x0000)
struct QuestCharacter_OnJoinedSupportCharacter final
{
public:
	struct FPartyMember                           InMember;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         MemberType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestCharacter_OnJoinedSupportCharacter) == 0x000008, "Wrong alignment on QuestCharacter_OnJoinedSupportCharacter");
static_assert(sizeof(QuestCharacter_OnJoinedSupportCharacter) == 0x000030, "Wrong size on QuestCharacter_OnJoinedSupportCharacter");
static_assert(offsetof(QuestCharacter_OnJoinedSupportCharacter, InMember) == 0x000000, "Member 'QuestCharacter_OnJoinedSupportCharacter::InMember' has a wrong offset!");
static_assert(offsetof(QuestCharacter_OnJoinedSupportCharacter, MemberType) == 0x000028, "Member 'QuestCharacter_OnJoinedSupportCharacter::MemberType' has a wrong offset!");

// Function AT.QuestCharacter.OnOutSupportCharacter
// 0x0030 (0x0030 - 0x0000)
struct QuestCharacter_OnOutSupportCharacter final
{
public:
	struct FPartyMember                           InMember;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         MemberType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestCharacter_OnOutSupportCharacter) == 0x000008, "Wrong alignment on QuestCharacter_OnOutSupportCharacter");
static_assert(sizeof(QuestCharacter_OnOutSupportCharacter) == 0x000030, "Wrong size on QuestCharacter_OnOutSupportCharacter");
static_assert(offsetof(QuestCharacter_OnOutSupportCharacter, InMember) == 0x000000, "Member 'QuestCharacter_OnOutSupportCharacter::InMember' has a wrong offset!");
static_assert(offsetof(QuestCharacter_OnOutSupportCharacter, MemberType) == 0x000028, "Member 'QuestCharacter_OnOutSupportCharacter::MemberType' has a wrong offset!");

// Function AT.QuestCharacter.SetEnableAbsenceObserver
// 0x0001 (0x0001 - 0x0000)
struct QuestCharacter_SetEnableAbsenceObserver final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCharacter_SetEnableAbsenceObserver) == 0x000001, "Wrong alignment on QuestCharacter_SetEnableAbsenceObserver");
static_assert(sizeof(QuestCharacter_SetEnableAbsenceObserver) == 0x000001, "Wrong size on QuestCharacter_SetEnableAbsenceObserver");
static_assert(offsetof(QuestCharacter_SetEnableAbsenceObserver, bEnabled) == 0x000000, "Member 'QuestCharacter_SetEnableAbsenceObserver::bEnabled' has a wrong offset!");

// Function AT.QuestCharacter.IsBeginPlayed
// 0x0001 (0x0001 - 0x0000)
struct QuestCharacter_IsBeginPlayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCharacter_IsBeginPlayed) == 0x000001, "Wrong alignment on QuestCharacter_IsBeginPlayed");
static_assert(sizeof(QuestCharacter_IsBeginPlayed) == 0x000001, "Wrong size on QuestCharacter_IsBeginPlayed");
static_assert(offsetof(QuestCharacter_IsBeginPlayed, ReturnValue) == 0x000000, "Member 'QuestCharacter_IsBeginPlayed::ReturnValue' has a wrong offset!");

// Function AT.QuestCharacter.IsCostumeInitialized
// 0x0001 (0x0001 - 0x0000)
struct QuestCharacter_IsCostumeInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCharacter_IsCostumeInitialized) == 0x000001, "Wrong alignment on QuestCharacter_IsCostumeInitialized");
static_assert(sizeof(QuestCharacter_IsCostumeInitialized) == 0x000001, "Wrong size on QuestCharacter_IsCostumeInitialized");
static_assert(offsetof(QuestCharacter_IsCostumeInitialized, ReturnValue) == 0x000000, "Member 'QuestCharacter_IsCostumeInitialized::ReturnValue' has a wrong offset!");

// Function AT.QuestCharacterAnimatorCpl002.OnUpdatedMovement
// 0x001C (0x001C - 0x0000)
struct QuestCharacterAnimatorCpl002_OnUpdatedMovement final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestCharacterAnimatorCpl002_OnUpdatedMovement) == 0x000004, "Wrong alignment on QuestCharacterAnimatorCpl002_OnUpdatedMovement");
static_assert(sizeof(QuestCharacterAnimatorCpl002_OnUpdatedMovement) == 0x00001C, "Wrong size on QuestCharacterAnimatorCpl002_OnUpdatedMovement");
static_assert(offsetof(QuestCharacterAnimatorCpl002_OnUpdatedMovement, DeltaSeconds) == 0x000000, "Member 'QuestCharacterAnimatorCpl002_OnUpdatedMovement::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(QuestCharacterAnimatorCpl002_OnUpdatedMovement, OldLocation) == 0x000004, "Member 'QuestCharacterAnimatorCpl002_OnUpdatedMovement::OldLocation' has a wrong offset!");
static_assert(offsetof(QuestCharacterAnimatorCpl002_OnUpdatedMovement, OldVelocity) == 0x000010, "Member 'QuestCharacterAnimatorCpl002_OnUpdatedMovement::OldVelocity' has a wrong offset!");

// Function AT.QuestEventObservable.OnQuestGeneralTalkEvent
// 0x0008 (0x0008 - 0x0000)
struct QuestEventObservable_OnQuestGeneralTalkEvent final
{
public:
	struct FGeneralTalkEventArgment               Argment;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventObservable_OnQuestGeneralTalkEvent) == 0x000001, "Wrong alignment on QuestEventObservable_OnQuestGeneralTalkEvent");
static_assert(sizeof(QuestEventObservable_OnQuestGeneralTalkEvent) == 0x000008, "Wrong size on QuestEventObservable_OnQuestGeneralTalkEvent");
static_assert(offsetof(QuestEventObservable_OnQuestGeneralTalkEvent, Argment) == 0x000000, "Member 'QuestEventObservable_OnQuestGeneralTalkEvent::Argment' has a wrong offset!");

// Function AT.QuestHiddenSwitcher.OnQuestActivated
// 0x0018 (0x0018 - 0x0000)
struct QuestHiddenSwitcher_OnQuestActivated final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreQuestId;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBegin;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestHiddenSwitcher_OnQuestActivated) == 0x000004, "Wrong alignment on QuestHiddenSwitcher_OnQuestActivated");
static_assert(sizeof(QuestHiddenSwitcher_OnQuestActivated) == 0x000018, "Wrong size on QuestHiddenSwitcher_OnQuestActivated");
static_assert(offsetof(QuestHiddenSwitcher_OnQuestActivated, QuestId) == 0x000000, "Member 'QuestHiddenSwitcher_OnQuestActivated::QuestId' has a wrong offset!");
static_assert(offsetof(QuestHiddenSwitcher_OnQuestActivated, PreQuestId) == 0x000008, "Member 'QuestHiddenSwitcher_OnQuestActivated::PreQuestId' has a wrong offset!");
static_assert(offsetof(QuestHiddenSwitcher_OnQuestActivated, bBegin) == 0x000010, "Member 'QuestHiddenSwitcher_OnQuestActivated::bBegin' has a wrong offset!");

// Function AT.QuestHiddenSwitcher.OnQuestClear
// 0x0010 (0x0010 - 0x0000)
struct QuestHiddenSwitcher_OnQuestClear final
{
public:
	class FName                                   QuestId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestTimingType                              TimingType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestHiddenSwitcher_OnQuestClear) == 0x000004, "Wrong alignment on QuestHiddenSwitcher_OnQuestClear");
static_assert(sizeof(QuestHiddenSwitcher_OnQuestClear) == 0x000010, "Wrong size on QuestHiddenSwitcher_OnQuestClear");
static_assert(offsetof(QuestHiddenSwitcher_OnQuestClear, QuestId) == 0x000000, "Member 'QuestHiddenSwitcher_OnQuestClear::QuestId' has a wrong offset!");
static_assert(offsetof(QuestHiddenSwitcher_OnQuestClear, TimingType) == 0x000008, "Member 'QuestHiddenSwitcher_OnQuestClear::TimingType' has a wrong offset!");

// Function AT.QuestPhase_ChangeCharacter.OnChangedPlayer
// 0x0008 (0x0008 - 0x0000)
struct QuestPhase_ChangeCharacter_OnChangedPlayer final
{
public:
	class AAT_Character*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestPhase_ChangeCharacter_OnChangedPlayer) == 0x000008, "Wrong alignment on QuestPhase_ChangeCharacter_OnChangedPlayer");
static_assert(sizeof(QuestPhase_ChangeCharacter_OnChangedPlayer) == 0x000008, "Wrong size on QuestPhase_ChangeCharacter_OnChangedPlayer");
static_assert(offsetof(QuestPhase_ChangeCharacter_OnChangedPlayer, Target) == 0x000000, "Member 'QuestPhase_ChangeCharacter_OnChangedPlayer::Target' has a wrong offset!");

// Function AT.ATQuestRetryActor.BeginQuestRetry
// 0x0008 (0x0008 - 0x0000)
struct ATQuestRetryActor_BeginQuestRetry final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATQuestRetryActor_BeginQuestRetry) == 0x000008, "Wrong alignment on ATQuestRetryActor_BeginQuestRetry");
static_assert(sizeof(ATQuestRetryActor_BeginQuestRetry) == 0x000008, "Wrong size on ATQuestRetryActor_BeginQuestRetry");
static_assert(offsetof(ATQuestRetryActor_BeginQuestRetry, TargetActor) == 0x000000, "Member 'ATQuestRetryActor_BeginQuestRetry::TargetActor' has a wrong offset!");

// Function AT.ATQuestRetryActor.IsQuestRetryActive
// 0x0001 (0x0001 - 0x0000)
struct ATQuestRetryActor_IsQuestRetryActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATQuestRetryActor_IsQuestRetryActive) == 0x000001, "Wrong alignment on ATQuestRetryActor_IsQuestRetryActive");
static_assert(sizeof(ATQuestRetryActor_IsQuestRetryActive) == 0x000001, "Wrong size on ATQuestRetryActor_IsQuestRetryActive");
static_assert(offsetof(ATQuestRetryActor_IsQuestRetryActive, ReturnValue) == 0x000000, "Member 'ATQuestRetryActor_IsQuestRetryActive::ReturnValue' has a wrong offset!");

// Function AT.ATQuestRetryManager.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct ATQuestRetryManager_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATQuestRetryManager_MouseClickDecide) == 0x000008, "Wrong alignment on ATQuestRetryManager_MouseClickDecide");
static_assert(sizeof(ATQuestRetryManager_MouseClickDecide) == 0x0000A8, "Wrong size on ATQuestRetryManager_MouseClickDecide");
static_assert(offsetof(ATQuestRetryManager_MouseClickDecide, InGeometry) == 0x000000, "Member 'ATQuestRetryManager_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(ATQuestRetryManager_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'ATQuestRetryManager_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.QuestSpawner.OnChangedProgress
// 0x0008 (0x0008 - 0x0000)
struct QuestSpawner_OnChangedProgress final
{
public:
	class FName                                   Progress;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestSpawner_OnChangedProgress) == 0x000004, "Wrong alignment on QuestSpawner_OnChangedProgress");
static_assert(sizeof(QuestSpawner_OnChangedProgress) == 0x000008, "Wrong size on QuestSpawner_OnChangedProgress");
static_assert(offsetof(QuestSpawner_OnChangedProgress, Progress) == 0x000000, "Member 'QuestSpawner_OnChangedProgress::Progress' has a wrong offset!");

// Function AT.QuestTimingObserver.GetCurrentDistance
// 0x0004 (0x0004 - 0x0000)
struct QuestTimingObserver_GetCurrentDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestTimingObserver_GetCurrentDistance) == 0x000004, "Wrong alignment on QuestTimingObserver_GetCurrentDistance");
static_assert(sizeof(QuestTimingObserver_GetCurrentDistance) == 0x000004, "Wrong size on QuestTimingObserver_GetCurrentDistance");
static_assert(offsetof(QuestTimingObserver_GetCurrentDistance, ReturnValue) == 0x000000, "Member 'QuestTimingObserver_GetCurrentDistance::ReturnValue' has a wrong offset!");

// Function AT.TriggerSphereFieldCooking.OnTouchSphereCollision
// 0x0008 (0x0008 - 0x0000)
struct TriggerSphereFieldCooking_OnTouchSphereCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerSphereFieldCooking_OnTouchSphereCollision) == 0x000008, "Wrong alignment on TriggerSphereFieldCooking_OnTouchSphereCollision");
static_assert(sizeof(TriggerSphereFieldCooking_OnTouchSphereCollision) == 0x000008, "Wrong size on TriggerSphereFieldCooking_OnTouchSphereCollision");
static_assert(offsetof(TriggerSphereFieldCooking_OnTouchSphereCollision, Actor) == 0x000000, "Member 'TriggerSphereFieldCooking_OnTouchSphereCollision::Actor' has a wrong offset!");

// Function AT.TriggerSphereFieldCooking.OnUntouchSphereCollision
// 0x0008 (0x0008 - 0x0000)
struct TriggerSphereFieldCooking_OnUntouchSphereCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerSphereFieldCooking_OnUntouchSphereCollision) == 0x000008, "Wrong alignment on TriggerSphereFieldCooking_OnUntouchSphereCollision");
static_assert(sizeof(TriggerSphereFieldCooking_OnUntouchSphereCollision) == 0x000008, "Wrong size on TriggerSphereFieldCooking_OnUntouchSphereCollision");
static_assert(offsetof(TriggerSphereFieldCooking_OnUntouchSphereCollision, Actor) == 0x000000, "Member 'TriggerSphereFieldCooking_OnUntouchSphereCollision::Actor' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetAll
// 0x0010 (0x0010 - 0x0000)
struct ATRestrictMoveControl_SetAll final
{
public:
	EATRestrictMoveControlA                       InJump;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InStandFirst;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InStandSecond;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InStandBoost;                                      // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InFloatBoost;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InTargetLanding;                                   // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InRide;                                            // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlB                       InFloatMove;                                       // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlB                       InNimbusMove;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InFieldShot;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InSearch;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InMultiJump;                                       // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InHighJump;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InMiniMapOpen;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InWorldMapOpen;                                    // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InStandHighSpeed;                                  // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetAll) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetAll");
static_assert(sizeof(ATRestrictMoveControl_SetAll) == 0x000010, "Wrong size on ATRestrictMoveControl_SetAll");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InJump) == 0x000000, "Member 'ATRestrictMoveControl_SetAll::InJump' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InStandFirst) == 0x000001, "Member 'ATRestrictMoveControl_SetAll::InStandFirst' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InStandSecond) == 0x000002, "Member 'ATRestrictMoveControl_SetAll::InStandSecond' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InStandBoost) == 0x000003, "Member 'ATRestrictMoveControl_SetAll::InStandBoost' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InFloatBoost) == 0x000004, "Member 'ATRestrictMoveControl_SetAll::InFloatBoost' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InTargetLanding) == 0x000005, "Member 'ATRestrictMoveControl_SetAll::InTargetLanding' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InRide) == 0x000006, "Member 'ATRestrictMoveControl_SetAll::InRide' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InFloatMove) == 0x000007, "Member 'ATRestrictMoveControl_SetAll::InFloatMove' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InNimbusMove) == 0x000008, "Member 'ATRestrictMoveControl_SetAll::InNimbusMove' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InFieldShot) == 0x000009, "Member 'ATRestrictMoveControl_SetAll::InFieldShot' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InSearch) == 0x00000A, "Member 'ATRestrictMoveControl_SetAll::InSearch' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InMultiJump) == 0x00000B, "Member 'ATRestrictMoveControl_SetAll::InMultiJump' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InHighJump) == 0x00000C, "Member 'ATRestrictMoveControl_SetAll::InHighJump' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InMiniMapOpen) == 0x00000D, "Member 'ATRestrictMoveControl_SetAll::InMiniMapOpen' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InWorldMapOpen) == 0x00000E, "Member 'ATRestrictMoveControl_SetAll::InWorldMapOpen' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetAll, InStandHighSpeed) == 0x00000F, "Member 'ATRestrictMoveControl_SetAll::InStandHighSpeed' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetByPreset
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetByPreset final
{
public:
	EATRestrictMoveControlPreset                  InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetByPreset) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetByPreset");
static_assert(sizeof(ATRestrictMoveControl_SetByPreset) == 0x000001, "Wrong size on ATRestrictMoveControl_SetByPreset");
static_assert(offsetof(ATRestrictMoveControl_SetByPreset, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetByPreset::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetFieldShot
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetFieldShot final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetFieldShot) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetFieldShot");
static_assert(sizeof(ATRestrictMoveControl_SetFieldShot) == 0x000001, "Wrong size on ATRestrictMoveControl_SetFieldShot");
static_assert(offsetof(ATRestrictMoveControl_SetFieldShot, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetFieldShot::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetFloatBoost
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetFloatBoost final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetFloatBoost) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetFloatBoost");
static_assert(sizeof(ATRestrictMoveControl_SetFloatBoost) == 0x000001, "Wrong size on ATRestrictMoveControl_SetFloatBoost");
static_assert(offsetof(ATRestrictMoveControl_SetFloatBoost, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetFloatBoost::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetFloatMove
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetFloatMove final
{
public:
	EATRestrictMoveControlB                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetFloatMove) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetFloatMove");
static_assert(sizeof(ATRestrictMoveControl_SetFloatMove) == 0x000001, "Wrong size on ATRestrictMoveControl_SetFloatMove");
static_assert(offsetof(ATRestrictMoveControl_SetFloatMove, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetFloatMove::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetJump
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetJump final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetJump) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetJump");
static_assert(sizeof(ATRestrictMoveControl_SetJump) == 0x000001, "Wrong size on ATRestrictMoveControl_SetJump");
static_assert(offsetof(ATRestrictMoveControl_SetJump, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetJump::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetNimbusBoost
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetNimbusBoost final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetNimbusBoost) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetNimbusBoost");
static_assert(sizeof(ATRestrictMoveControl_SetNimbusBoost) == 0x000001, "Wrong size on ATRestrictMoveControl_SetNimbusBoost");
static_assert(offsetof(ATRestrictMoveControl_SetNimbusBoost, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetNimbusBoost::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetNimbusMove
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetNimbusMove final
{
public:
	EATRestrictMoveControlB                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetNimbusMove) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetNimbusMove");
static_assert(sizeof(ATRestrictMoveControl_SetNimbusMove) == 0x000001, "Wrong size on ATRestrictMoveControl_SetNimbusMove");
static_assert(offsetof(ATRestrictMoveControl_SetNimbusMove, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetNimbusMove::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetRideAll
// 0x0004 (0x0004 - 0x0000)
struct ATRestrictMoveControl_SetRideAll final
{
public:
	EATRestrictMoveControlA                       InNimbus;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InAirCar;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       InTwinFoot;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATRestrictMoveControlA                       Pillar;                                            // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetRideAll) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetRideAll");
static_assert(sizeof(ATRestrictMoveControl_SetRideAll) == 0x000004, "Wrong size on ATRestrictMoveControl_SetRideAll");
static_assert(offsetof(ATRestrictMoveControl_SetRideAll, InNimbus) == 0x000000, "Member 'ATRestrictMoveControl_SetRideAll::InNimbus' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetRideAll, InAirCar) == 0x000001, "Member 'ATRestrictMoveControl_SetRideAll::InAirCar' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetRideAll, InTwinFoot) == 0x000002, "Member 'ATRestrictMoveControl_SetRideAll::InTwinFoot' has a wrong offset!");
static_assert(offsetof(ATRestrictMoveControl_SetRideAll, Pillar) == 0x000003, "Member 'ATRestrictMoveControl_SetRideAll::Pillar' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetSearch
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetSearch final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetSearch) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetSearch");
static_assert(sizeof(ATRestrictMoveControl_SetSearch) == 0x000001, "Wrong size on ATRestrictMoveControl_SetSearch");
static_assert(offsetof(ATRestrictMoveControl_SetSearch, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetSearch::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetStandBoost
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetStandBoost final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetStandBoost) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetStandBoost");
static_assert(sizeof(ATRestrictMoveControl_SetStandBoost) == 0x000001, "Wrong size on ATRestrictMoveControl_SetStandBoost");
static_assert(offsetof(ATRestrictMoveControl_SetStandBoost, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetStandBoost::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetStandFirst
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetStandFirst final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetStandFirst) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetStandFirst");
static_assert(sizeof(ATRestrictMoveControl_SetStandFirst) == 0x000001, "Wrong size on ATRestrictMoveControl_SetStandFirst");
static_assert(offsetof(ATRestrictMoveControl_SetStandFirst, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetStandFirst::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetStandSecond
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetStandSecond final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetStandSecond) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetStandSecond");
static_assert(sizeof(ATRestrictMoveControl_SetStandSecond) == 0x000001, "Wrong size on ATRestrictMoveControl_SetStandSecond");
static_assert(offsetof(ATRestrictMoveControl_SetStandSecond, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetStandSecond::InType' has a wrong offset!");

// Function AT.ATRestrictMoveControl.SetTargetLanding
// 0x0001 (0x0001 - 0x0000)
struct ATRestrictMoveControl_SetTargetLanding final
{
public:
	EATRestrictMoveControlA                       InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATRestrictMoveControl_SetTargetLanding) == 0x000001, "Wrong alignment on ATRestrictMoveControl_SetTargetLanding");
static_assert(sizeof(ATRestrictMoveControl_SetTargetLanding) == 0x000001, "Wrong size on ATRestrictMoveControl_SetTargetLanding");
static_assert(offsetof(ATRestrictMoveControl_SetTargetLanding, InType) == 0x000000, "Member 'ATRestrictMoveControl_SetTargetLanding::InType' has a wrong offset!");

// Function AT.ATSceneCaptureComponent2D.SetCaptureEveryFrame
// 0x0001 (0x0001 - 0x0000)
struct ATSceneCaptureComponent2D_SetCaptureEveryFrame final
{
public:
	bool                                          bNewCaptureEveryFrame;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSceneCaptureComponent2D_SetCaptureEveryFrame) == 0x000001, "Wrong alignment on ATSceneCaptureComponent2D_SetCaptureEveryFrame");
static_assert(sizeof(ATSceneCaptureComponent2D_SetCaptureEveryFrame) == 0x000001, "Wrong size on ATSceneCaptureComponent2D_SetCaptureEveryFrame");
static_assert(offsetof(ATSceneCaptureComponent2D_SetCaptureEveryFrame, bNewCaptureEveryFrame) == 0x000000, "Member 'ATSceneCaptureComponent2D_SetCaptureEveryFrame::bNewCaptureEveryFrame' has a wrong offset!");

// Function AT.ATSoundBlueprintFunctionLibrary.SetAmbientSoundBlockFlag
// 0x0001 (0x0001 - 0x0000)
struct ATSoundBlueprintFunctionLibrary_SetAmbientSoundBlockFlag final
{
public:
	bool                                          NewFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSoundBlueprintFunctionLibrary_SetAmbientSoundBlockFlag) == 0x000001, "Wrong alignment on ATSoundBlueprintFunctionLibrary_SetAmbientSoundBlockFlag");
static_assert(sizeof(ATSoundBlueprintFunctionLibrary_SetAmbientSoundBlockFlag) == 0x000001, "Wrong size on ATSoundBlueprintFunctionLibrary_SetAmbientSoundBlockFlag");
static_assert(offsetof(ATSoundBlueprintFunctionLibrary_SetAmbientSoundBlockFlag, NewFlag) == 0x000000, "Member 'ATSoundBlueprintFunctionLibrary_SetAmbientSoundBlockFlag::NewFlag' has a wrong offset!");

// Function AT.SpacePodBehaviour.AddBeforeLaunchStopComponent
// 0x0008 (0x0008 - 0x0000)
struct SpacePodBehaviour_AddBeforeLaunchStopComponent final
{
public:
	class UActorComponent*                        StopComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodBehaviour_AddBeforeLaunchStopComponent) == 0x000008, "Wrong alignment on SpacePodBehaviour_AddBeforeLaunchStopComponent");
static_assert(sizeof(SpacePodBehaviour_AddBeforeLaunchStopComponent) == 0x000008, "Wrong size on SpacePodBehaviour_AddBeforeLaunchStopComponent");
static_assert(offsetof(SpacePodBehaviour_AddBeforeLaunchStopComponent, StopComponent) == 0x000000, "Member 'SpacePodBehaviour_AddBeforeLaunchStopComponent::StopComponent' has a wrong offset!");

// Function AT.SpacePodBehaviour.AddBeforeLaunchStopComponentArray
// 0x0010 (0x0010 - 0x0000)
struct SpacePodBehaviour_AddBeforeLaunchStopComponentArray final
{
public:
	TArray<class UActorComponent*>                StopComponents;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodBehaviour_AddBeforeLaunchStopComponentArray) == 0x000008, "Wrong alignment on SpacePodBehaviour_AddBeforeLaunchStopComponentArray");
static_assert(sizeof(SpacePodBehaviour_AddBeforeLaunchStopComponentArray) == 0x000010, "Wrong size on SpacePodBehaviour_AddBeforeLaunchStopComponentArray");
static_assert(offsetof(SpacePodBehaviour_AddBeforeLaunchStopComponentArray, StopComponents) == 0x000000, "Member 'SpacePodBehaviour_AddBeforeLaunchStopComponentArray::StopComponents' has a wrong offset!");

// Function AT.SpacePodSpawner.OnFloated
// 0x0001 (0x0001 - 0x0000)
struct SpacePodSpawner_OnFloated final
{
public:
	EEventTimingType                              TimingType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodSpawner_OnFloated) == 0x000001, "Wrong alignment on SpacePodSpawner_OnFloated");
static_assert(sizeof(SpacePodSpawner_OnFloated) == 0x000001, "Wrong size on SpacePodSpawner_OnFloated");
static_assert(offsetof(SpacePodSpawner_OnFloated, TimingType) == 0x000000, "Member 'SpacePodSpawner_OnFloated::TimingType' has a wrong offset!");

// Function AT.SpacePodSpawner.OnInGameBeginPlay
// 0x0108 (0x0108 - 0x0000)
struct SpacePodSpawner_OnInGameBeginPlay final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodSpawner_OnInGameBeginPlay) == 0x000008, "Wrong alignment on SpacePodSpawner_OnInGameBeginPlay");
static_assert(sizeof(SpacePodSpawner_OnInGameBeginPlay) == 0x000108, "Wrong size on SpacePodSpawner_OnInGameBeginPlay");
static_assert(offsetof(SpacePodSpawner_OnInGameBeginPlay, Param) == 0x000000, "Member 'SpacePodSpawner_OnInGameBeginPlay::Param' has a wrong offset!");

// Function AT.SpacePodSpawner.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct SpacePodSpawner_SetEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodSpawner_SetEnable) == 0x000001, "Wrong alignment on SpacePodSpawner_SetEnable");
static_assert(sizeof(SpacePodSpawner_SetEnable) == 0x000001, "Wrong size on SpacePodSpawner_SetEnable");
static_assert(offsetof(SpacePodSpawner_SetEnable, bEnable) == 0x000000, "Member 'SpacePodSpawner_SetEnable::bEnable' has a wrong offset!");

// Function AT.SpacePodSpawner.SpawnPods
// 0x0001 (0x0001 - 0x0000)
struct SpacePodSpawner_SpawnPods final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodSpawner_SpawnPods) == 0x000001, "Wrong alignment on SpacePodSpawner_SpawnPods");
static_assert(sizeof(SpacePodSpawner_SpawnPods) == 0x000001, "Wrong size on SpacePodSpawner_SpawnPods");
static_assert(offsetof(SpacePodSpawner_SpawnPods, ReturnValue) == 0x000000, "Member 'SpacePodSpawner_SpawnPods::ReturnValue' has a wrong offset!");

// Function AT.SpacePodSpawner.HasSpawnedPods
// 0x0001 (0x0001 - 0x0000)
struct SpacePodSpawner_HasSpawnedPods final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodSpawner_HasSpawnedPods) == 0x000001, "Wrong alignment on SpacePodSpawner_HasSpawnedPods");
static_assert(sizeof(SpacePodSpawner_HasSpawnedPods) == 0x000001, "Wrong size on SpacePodSpawner_HasSpawnedPods");
static_assert(offsetof(SpacePodSpawner_HasSpawnedPods, ReturnValue) == 0x000000, "Member 'SpacePodSpawner_HasSpawnedPods::ReturnValue' has a wrong offset!");

// Function AT.SpacePodSpawner.isAllowLaunch
// 0x0001 (0x0001 - 0x0000)
struct SpacePodSpawner_IsAllowLaunch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodSpawner_IsAllowLaunch) == 0x000001, "Wrong alignment on SpacePodSpawner_IsAllowLaunch");
static_assert(sizeof(SpacePodSpawner_IsAllowLaunch) == 0x000001, "Wrong size on SpacePodSpawner_IsAllowLaunch");
static_assert(offsetof(SpacePodSpawner_IsAllowLaunch, ReturnValue) == 0x000000, "Member 'SpacePodSpawner_IsAllowLaunch::ReturnValue' has a wrong offset!");

// Function AT.SpacePodTractor.OnHit
// 0x00B0 (0x00B0 - 0x0000)
struct SpacePodTractor_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpacePodTractor_OnHit) == 0x000008, "Wrong alignment on SpacePodTractor_OnHit");
static_assert(sizeof(SpacePodTractor_OnHit) == 0x0000B0, "Wrong size on SpacePodTractor_OnHit");
static_assert(offsetof(SpacePodTractor_OnHit, HitComponent) == 0x000000, "Member 'SpacePodTractor_OnHit::HitComponent' has a wrong offset!");
static_assert(offsetof(SpacePodTractor_OnHit, OtherActor) == 0x000008, "Member 'SpacePodTractor_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(SpacePodTractor_OnHit, OtherComp) == 0x000010, "Member 'SpacePodTractor_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(SpacePodTractor_OnHit, NormalImpulse) == 0x000018, "Member 'SpacePodTractor_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SpacePodTractor_OnHit, Hit) == 0x000028, "Member 'SpacePodTractor_OnHit::Hit' has a wrong offset!");

// Function AT.ATSpawnerFieldMemories.OnChangePhase
// 0x0004 (0x0004 - 0x0000)
struct ATSpawnerFieldMemories_OnChangePhase final
{
public:
	int32                                         ProgressID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSpawnerFieldMemories_OnChangePhase) == 0x000004, "Wrong alignment on ATSpawnerFieldMemories_OnChangePhase");
static_assert(sizeof(ATSpawnerFieldMemories_OnChangePhase) == 0x000004, "Wrong size on ATSpawnerFieldMemories_OnChangePhase");
static_assert(offsetof(ATSpawnerFieldMemories_OnChangePhase, ProgressID) == 0x000000, "Member 'ATSpawnerFieldMemories_OnChangePhase::ProgressID' has a wrong offset!");

// Function AT.ATSpawnerFieldMemories.OnChangeProgress
// 0x0008 (0x0008 - 0x0000)
struct ATSpawnerFieldMemories_OnChangeProgress final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSpawnerFieldMemories_OnChangeProgress) == 0x000004, "Wrong alignment on ATSpawnerFieldMemories_OnChangeProgress");
static_assert(sizeof(ATSpawnerFieldMemories_OnChangeProgress) == 0x000008, "Wrong size on ATSpawnerFieldMemories_OnChangeProgress");
static_assert(offsetof(ATSpawnerFieldMemories_OnChangeProgress, ProgressID) == 0x000000, "Member 'ATSpawnerFieldMemories_OnChangeProgress::ProgressID' has a wrong offset!");

// Function AT.Speakable.SetEnableLipSync
// 0x0001 (0x0001 - 0x0000)
struct Speakable_SetEnableLipSync final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Speakable_SetEnableLipSync) == 0x000001, "Wrong alignment on Speakable_SetEnableLipSync");
static_assert(sizeof(Speakable_SetEnableLipSync) == 0x000001, "Wrong size on Speakable_SetEnableLipSync");
static_assert(offsetof(Speakable_SetEnableLipSync, bEnabled) == 0x000000, "Member 'Speakable_SetEnableLipSync::bEnabled' has a wrong offset!");

// Function AT.Speakable.GetSpeakerId
// 0x0010 (0x0010 - 0x0000)
struct Speakable_GetSpeakerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Speakable_GetSpeakerId) == 0x000008, "Wrong alignment on Speakable_GetSpeakerId");
static_assert(sizeof(Speakable_GetSpeakerId) == 0x000010, "Wrong size on Speakable_GetSpeakerId");
static_assert(offsetof(Speakable_GetSpeakerId, ReturnValue) == 0x000000, "Member 'Speakable_GetSpeakerId::ReturnValue' has a wrong offset!");

// Function AT.Speakable.IsEnableLipSync
// 0x0001 (0x0001 - 0x0000)
struct Speakable_IsEnableLipSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Speakable_IsEnableLipSync) == 0x000001, "Wrong alignment on Speakable_IsEnableLipSync");
static_assert(sizeof(Speakable_IsEnableLipSync) == 0x000001, "Wrong size on Speakable_IsEnableLipSync");
static_assert(offsetof(Speakable_IsEnableLipSync, ReturnValue) == 0x000000, "Member 'Speakable_IsEnableLipSync::ReturnValue' has a wrong offset!");

// Function AT.ATSplineMovement.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct ATSplineMovement_SetTargetActor final
{
public:
	class AActor*                                 InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSplineMovement_SetTargetActor) == 0x000008, "Wrong alignment on ATSplineMovement_SetTargetActor");
static_assert(sizeof(ATSplineMovement_SetTargetActor) == 0x000008, "Wrong size on ATSplineMovement_SetTargetActor");
static_assert(offsetof(ATSplineMovement_SetTargetActor, InTarget) == 0x000000, "Member 'ATSplineMovement_SetTargetActor::InTarget' has a wrong offset!");

// Function AT.TrainingDataTableAccessor.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct TrainingDataTableAccessor_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingDataTableAccessor_IsLoaded) == 0x000001, "Wrong alignment on TrainingDataTableAccessor_IsLoaded");
static_assert(sizeof(TrainingDataTableAccessor_IsLoaded) == 0x000001, "Wrong size on TrainingDataTableAccessor_IsLoaded");
static_assert(offsetof(TrainingDataTableAccessor_IsLoaded, ReturnValue) == 0x000000, "Member 'TrainingDataTableAccessor_IsLoaded::ReturnValue' has a wrong offset!");

// Function AT.TreasureAccessPoint.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct TreasureAccessPoint_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureAccessPoint_OnActionChange) == 0x000008, "Wrong alignment on TreasureAccessPoint_OnActionChange");
static_assert(sizeof(TreasureAccessPoint_OnActionChange) == 0x000010, "Wrong size on TreasureAccessPoint_OnActionChange");
static_assert(offsetof(TreasureAccessPoint_OnActionChange, InCharacter) == 0x000000, "Member 'TreasureAccessPoint_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(TreasureAccessPoint_OnActionChange, InActionIdPrev) == 0x000008, "Member 'TreasureAccessPoint_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(TreasureAccessPoint_OnActionChange, InActionIdNext) == 0x00000C, "Member 'TreasureAccessPoint_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.TreasureAccessPoint.OnEnableItem
// 0x0001 (0x0001 - 0x0000)
struct TreasureAccessPoint_OnEnableItem final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureAccessPoint_OnEnableItem) == 0x000001, "Wrong alignment on TreasureAccessPoint_OnEnableItem");
static_assert(sizeof(TreasureAccessPoint_OnEnableItem) == 0x000001, "Wrong size on TreasureAccessPoint_OnEnableItem");
static_assert(offsetof(TreasureAccessPoint_OnEnableItem, Enable) == 0x000000, "Member 'TreasureAccessPoint_OnEnableItem::Enable' has a wrong offset!");

// Function AT.TreasureAccessPoint.OnSearchEnd
// 0x0108 (0x0108 - 0x0000)
struct TreasureAccessPoint_OnSearchEnd final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureAccessPoint_OnSearchEnd) == 0x000008, "Wrong alignment on TreasureAccessPoint_OnSearchEnd");
static_assert(sizeof(TreasureAccessPoint_OnSearchEnd) == 0x000108, "Wrong size on TreasureAccessPoint_OnSearchEnd");
static_assert(offsetof(TreasureAccessPoint_OnSearchEnd, Param) == 0x000000, "Member 'TreasureAccessPoint_OnSearchEnd::Param' has a wrong offset!");

// Function AT.TreasureAccessPoint.OnSearchStart
// 0x0108 (0x0108 - 0x0000)
struct TreasureAccessPoint_OnSearchStart final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureAccessPoint_OnSearchStart) == 0x000008, "Wrong alignment on TreasureAccessPoint_OnSearchStart");
static_assert(sizeof(TreasureAccessPoint_OnSearchStart) == 0x000108, "Wrong size on TreasureAccessPoint_OnSearchStart");
static_assert(offsetof(TreasureAccessPoint_OnSearchStart, Param) == 0x000000, "Member 'TreasureAccessPoint_OnSearchStart::Param' has a wrong offset!");

// Function AT.ATUiCaptureLoader.CompleteLoad
// 0x0008 (0x0008 - 0x0000)
struct ATUiCaptureLoader_CompleteLoad final
{
public:
	class UATDataAssetUiCaptureAsyncLoad*         Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATUiCaptureLoader_CompleteLoad) == 0x000008, "Wrong alignment on ATUiCaptureLoader_CompleteLoad");
static_assert(sizeof(ATUiCaptureLoader_CompleteLoad) == 0x000008, "Wrong size on ATUiCaptureLoader_CompleteLoad");
static_assert(offsetof(ATUiCaptureLoader_CompleteLoad, Loader) == 0x000000, "Member 'ATUiCaptureLoader_CompleteLoad::Loader' has a wrong offset!");

// Function AT.ATVirtualController.StartActingBoost
// 0x0020 (0x0020 - 0x0000)
struct ATVirtualController_StartActingBoost final
{
public:
	struct FVector                                InTargetPos;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATCharacterActingBoostEndState               InState;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAngle;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbTerrainDamage;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbApplyBlur;                                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbApplyCameraShake;                               // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSpeed;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATVirtualController_StartActingBoost) == 0x000004, "Wrong alignment on ATVirtualController_StartActingBoost");
static_assert(sizeof(ATVirtualController_StartActingBoost) == 0x000020, "Wrong size on ATVirtualController_StartActingBoost");
static_assert(offsetof(ATVirtualController_StartActingBoost, InTargetPos) == 0x000000, "Member 'ATVirtualController_StartActingBoost::InTargetPos' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartActingBoost, InState) == 0x00000C, "Member 'ATVirtualController_StartActingBoost::InState' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartActingBoost, InAngle) == 0x000010, "Member 'ATVirtualController_StartActingBoost::InAngle' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartActingBoost, InRadius) == 0x000014, "Member 'ATVirtualController_StartActingBoost::InRadius' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartActingBoost, InbTerrainDamage) == 0x000018, "Member 'ATVirtualController_StartActingBoost::InbTerrainDamage' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartActingBoost, InbApplyBlur) == 0x000019, "Member 'ATVirtualController_StartActingBoost::InbApplyBlur' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartActingBoost, InbApplyCameraShake) == 0x00001A, "Member 'ATVirtualController_StartActingBoost::InbApplyCameraShake' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartActingBoost, InSpeed) == 0x00001C, "Member 'ATVirtualController_StartActingBoost::InSpeed' has a wrong offset!");

// Function AT.ATVirtualController.StartAutoMoveToLocation
// 0x0014 (0x0014 - 0x0000)
struct ATVirtualController_StartAutoMoveToLocation final
{
public:
	EATCharacterAutoMove                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InTargetPos;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InGoalRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATVirtualController_StartAutoMoveToLocation) == 0x000004, "Wrong alignment on ATVirtualController_StartAutoMoveToLocation");
static_assert(sizeof(ATVirtualController_StartAutoMoveToLocation) == 0x000014, "Wrong size on ATVirtualController_StartAutoMoveToLocation");
static_assert(offsetof(ATVirtualController_StartAutoMoveToLocation, InType) == 0x000000, "Member 'ATVirtualController_StartAutoMoveToLocation::InType' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartAutoMoveToLocation, InTargetPos) == 0x000004, "Member 'ATVirtualController_StartAutoMoveToLocation::InTargetPos' has a wrong offset!");
static_assert(offsetof(ATVirtualController_StartAutoMoveToLocation, InGoalRadius) == 0x000010, "Member 'ATVirtualController_StartAutoMoveToLocation::InGoalRadius' has a wrong offset!");

// Function AT.ATVirtualController.StartAutoTurn
// 0x0008 (0x0008 - 0x0000)
struct ATVirtualController_StartAutoTurn final
{
public:
	class AActor*                                 InTurnPointActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATVirtualController_StartAutoTurn) == 0x000008, "Wrong alignment on ATVirtualController_StartAutoTurn");
static_assert(sizeof(ATVirtualController_StartAutoTurn) == 0x000008, "Wrong size on ATVirtualController_StartAutoTurn");
static_assert(offsetof(ATVirtualController_StartAutoTurn, InTurnPointActor) == 0x000000, "Member 'ATVirtualController_StartAutoTurn::InTurnPointActor' has a wrong offset!");

// Function AT.ATVirtualController.StartAutoTurnToLocation
// 0x000C (0x000C - 0x0000)
struct ATVirtualController_StartAutoTurnToLocation final
{
public:
	struct FVector                                InTargetPos;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATVirtualController_StartAutoTurnToLocation) == 0x000004, "Wrong alignment on ATVirtualController_StartAutoTurnToLocation");
static_assert(sizeof(ATVirtualController_StartAutoTurnToLocation) == 0x00000C, "Wrong size on ATVirtualController_StartAutoTurnToLocation");
static_assert(offsetof(ATVirtualController_StartAutoTurnToLocation, InTargetPos) == 0x000000, "Member 'ATVirtualController_StartAutoTurnToLocation::InTargetPos' has a wrong offset!");

// Function AT.ATVirtualController.IsAutoMoving
// 0x0001 (0x0001 - 0x0000)
struct ATVirtualController_IsAutoMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATVirtualController_IsAutoMoving) == 0x000001, "Wrong alignment on ATVirtualController_IsAutoMoving");
static_assert(sizeof(ATVirtualController_IsAutoMoving) == 0x000001, "Wrong size on ATVirtualController_IsAutoMoving");
static_assert(offsetof(ATVirtualController_IsAutoMoving, ReturnValue) == 0x000000, "Member 'ATVirtualController_IsAutoMoving::ReturnValue' has a wrong offset!");

// Function AT.ATVirtualController.IsAutoTurning
// 0x0001 (0x0001 - 0x0000)
struct ATVirtualController_IsAutoTurning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATVirtualController_IsAutoTurning) == 0x000001, "Wrong alignment on ATVirtualController_IsAutoTurning");
static_assert(sizeof(ATVirtualController_IsAutoTurning) == 0x000001, "Wrong size on ATVirtualController_IsAutoTurning");
static_assert(offsetof(ATVirtualController_IsAutoTurning, ReturnValue) == 0x000000, "Member 'ATVirtualController_IsAutoTurning::ReturnValue' has a wrong offset!");

// Function AT.Waitable.SetEnableWaiting
// 0x0001 (0x0001 - 0x0000)
struct Waitable_SetEnableWaiting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Waitable_SetEnableWaiting) == 0x000001, "Wrong alignment on Waitable_SetEnableWaiting");
static_assert(sizeof(Waitable_SetEnableWaiting) == 0x000001, "Wrong size on Waitable_SetEnableWaiting");
static_assert(offsetof(Waitable_SetEnableWaiting, bEnable) == 0x000000, "Member 'Waitable_SetEnableWaiting::bEnable' has a wrong offset!");

// Function AT.ATWaterVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct ATWaterVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWaterVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on ATWaterVolume_OnOverlapBegin");
static_assert(sizeof(ATWaterVolume_OnOverlapBegin) == 0x000010, "Wrong size on ATWaterVolume_OnOverlapBegin");
static_assert(offsetof(ATWaterVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'ATWaterVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATWaterVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'ATWaterVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.ATWaterVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct ATWaterVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWaterVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on ATWaterVolume_OnOverlapEnd");
static_assert(sizeof(ATWaterVolume_OnOverlapEnd) == 0x000010, "Wrong size on ATWaterVolume_OnOverlapEnd");
static_assert(offsetof(ATWaterVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'ATWaterVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATWaterVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'ATWaterVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.ATWorldBlockingVolume.OnActorHitEvent
// 0x00A8 (0x00A8 - 0x0000)
struct ATWorldBlockingVolume_OnActorHitEvent final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWorldBlockingVolume_OnActorHitEvent) == 0x000008, "Wrong alignment on ATWorldBlockingVolume_OnActorHitEvent");
static_assert(sizeof(ATWorldBlockingVolume_OnActorHitEvent) == 0x0000A8, "Wrong size on ATWorldBlockingVolume_OnActorHitEvent");
static_assert(offsetof(ATWorldBlockingVolume_OnActorHitEvent, SelfActor) == 0x000000, "Member 'ATWorldBlockingVolume_OnActorHitEvent::SelfActor' has a wrong offset!");
static_assert(offsetof(ATWorldBlockingVolume_OnActorHitEvent, OtherActor) == 0x000008, "Member 'ATWorldBlockingVolume_OnActorHitEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(ATWorldBlockingVolume_OnActorHitEvent, NormalImpulse) == 0x000010, "Member 'ATWorldBlockingVolume_OnActorHitEvent::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ATWorldBlockingVolume_OnActorHitEvent, Hit) == 0x000020, "Member 'ATWorldBlockingVolume_OnActorHitEvent::Hit' has a wrong offset!");

// Function AT.ATWorldBlockingVolume.OnActorHitEventWithPlayGoProgress
// 0x00A8 (0x00A8 - 0x0000)
struct ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress) == 0x000008, "Wrong alignment on ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress");
static_assert(sizeof(ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress) == 0x0000A8, "Wrong size on ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress");
static_assert(offsetof(ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress, SelfActor) == 0x000000, "Member 'ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress::SelfActor' has a wrong offset!");
static_assert(offsetof(ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress, OtherActor) == 0x000008, "Member 'ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress::OtherActor' has a wrong offset!");
static_assert(offsetof(ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress, NormalImpulse) == 0x000010, "Member 'ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress, Hit) == 0x000020, "Member 'ATWorldBlockingVolume_OnActorHitEventWithPlayGoProgress::Hit' has a wrong offset!");

// Function AT.ATWorldBlockingVolume.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATWorldBlockingVolume_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWorldBlockingVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on ATWorldBlockingVolume_OnBeginOverlap");
static_assert(sizeof(ATWorldBlockingVolume_OnBeginOverlap) == 0x000010, "Wrong size on ATWorldBlockingVolume_OnBeginOverlap");
static_assert(offsetof(ATWorldBlockingVolume_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'ATWorldBlockingVolume_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATWorldBlockingVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ATWorldBlockingVolume_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function AT.ATWorldBlockingVolume.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATWorldBlockingVolume_OnEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWorldBlockingVolume_OnEndOverlap) == 0x000008, "Wrong alignment on ATWorldBlockingVolume_OnEndOverlap");
static_assert(sizeof(ATWorldBlockingVolume_OnEndOverlap) == 0x000010, "Wrong size on ATWorldBlockingVolume_OnEndOverlap");
static_assert(offsetof(ATWorldBlockingVolume_OnEndOverlap, OverlappedActor) == 0x000000, "Member 'ATWorldBlockingVolume_OnEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATWorldBlockingVolume_OnEndOverlap, OtherActor) == 0x000008, "Member 'ATWorldBlockingVolume_OnEndOverlap::OtherActor' has a wrong offset!");

// Function AT.ATWorldBlockingVolume.RemoveAllOverllapedWarning
// 0x0001 (0x0001 - 0x0000)
struct ATWorldBlockingVolume_RemoveAllOverllapedWarning final
{
public:
	bool                                          bIsEndFadeIn;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWorldBlockingVolume_RemoveAllOverllapedWarning) == 0x000001, "Wrong alignment on ATWorldBlockingVolume_RemoveAllOverllapedWarning");
static_assert(sizeof(ATWorldBlockingVolume_RemoveAllOverllapedWarning) == 0x000001, "Wrong size on ATWorldBlockingVolume_RemoveAllOverllapedWarning");
static_assert(offsetof(ATWorldBlockingVolume_RemoveAllOverllapedWarning, bIsEndFadeIn) == 0x000000, "Member 'ATWorldBlockingVolume_RemoveAllOverllapedWarning::bIsEndFadeIn' has a wrong offset!");

// Function AT.ATWorldBorder.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATWorldBorder_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWorldBorder_OnBeginOverlap) == 0x000008, "Wrong alignment on ATWorldBorder_OnBeginOverlap");
static_assert(sizeof(ATWorldBorder_OnBeginOverlap) == 0x000010, "Wrong size on ATWorldBorder_OnBeginOverlap");
static_assert(offsetof(ATWorldBorder_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'ATWorldBorder_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATWorldBorder_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ATWorldBorder_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function AT.ATWorldBorder.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct ATWorldBorder_OnEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATWorldBorder_OnEndOverlap) == 0x000008, "Wrong alignment on ATWorldBorder_OnEndOverlap");
static_assert(sizeof(ATWorldBorder_OnEndOverlap) == 0x000010, "Wrong size on ATWorldBorder_OnEndOverlap");
static_assert(offsetof(ATWorldBorder_OnEndOverlap, OverlappedActor) == 0x000000, "Member 'ATWorldBorder_OnEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATWorldBorder_OnEndOverlap, OtherActor) == 0x000008, "Member 'ATWorldBorder_OnEndOverlap::OtherActor' has a wrong offset!");

// Function AT.BaseballGameManager.CheckStrikeOut
// 0x0001 (0x0001 - 0x0000)
struct BaseballGameManager_CheckStrikeOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseballGameManager_CheckStrikeOut) == 0x000001, "Wrong alignment on BaseballGameManager_CheckStrikeOut");
static_assert(sizeof(BaseballGameManager_CheckStrikeOut) == 0x000001, "Wrong size on BaseballGameManager_CheckStrikeOut");
static_assert(offsetof(BaseballGameManager_CheckStrikeOut, ReturnValue) == 0x000000, "Member 'BaseballGameManager_CheckStrikeOut::ReturnValue' has a wrong offset!");

// Function AT.BaseballGameManager.ReceiveEvents
// 0x0108 (0x0108 - 0x0000)
struct BaseballGameManager_ReceiveEvents final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseballGameManager_ReceiveEvents) == 0x000008, "Wrong alignment on BaseballGameManager_ReceiveEvents");
static_assert(sizeof(BaseballGameManager_ReceiveEvents) == 0x000108, "Wrong size on BaseballGameManager_ReceiveEvents");
static_assert(offsetof(BaseballGameManager_ReceiveEvents, Param) == 0x000000, "Member 'BaseballGameManager_ReceiveEvents::Param' has a wrong offset!");

// Function AT.BaseballGameManager.IsInterrupt
// 0x0001 (0x0001 - 0x0000)
struct BaseballGameManager_IsInterrupt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseballGameManager_IsInterrupt) == 0x000001, "Wrong alignment on BaseballGameManager_IsInterrupt");
static_assert(sizeof(BaseballGameManager_IsInterrupt) == 0x000001, "Wrong size on BaseballGameManager_IsInterrupt");
static_assert(offsetof(BaseballGameManager_IsInterrupt, ReturnValue) == 0x000000, "Member 'BaseballGameManager_IsInterrupt::ReturnValue' has a wrong offset!");

// Function AT.BookAnimInstance.GetPhase
// 0x0001 (0x0001 - 0x0000)
struct BookAnimInstance_GetPhase final
{
public:
	EZCW_Phase                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BookAnimInstance_GetPhase) == 0x000001, "Wrong alignment on BookAnimInstance_GetPhase");
static_assert(sizeof(BookAnimInstance_GetPhase) == 0x000001, "Wrong size on BookAnimInstance_GetPhase");
static_assert(offsetof(BookAnimInstance_GetPhase, ReturnValue) == 0x000000, "Member 'BookAnimInstance_GetPhase::ReturnValue' has a wrong offset!");

// Function AT.BreakableStaticMeshActor.Damage
// 0x0090 (0x0090 - 0x0000)
struct BreakableStaticMeshActor_Damage final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakableStaticMeshActor_Damage) == 0x000008, "Wrong alignment on BreakableStaticMeshActor_Damage");
static_assert(sizeof(BreakableStaticMeshActor_Damage) == 0x000090, "Wrong size on BreakableStaticMeshActor_Damage");
static_assert(offsetof(BreakableStaticMeshActor_Damage, OtherActor) == 0x000000, "Member 'BreakableStaticMeshActor_Damage::OtherActor' has a wrong offset!");
static_assert(offsetof(BreakableStaticMeshActor_Damage, Hit) == 0x000008, "Member 'BreakableStaticMeshActor_Damage::Hit' has a wrong offset!");

// Function AT.BreakableStaticMeshActor.OnHit
// 0x00A8 (0x00A8 - 0x0000)
struct BreakableStaticMeshActor_OnHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakableStaticMeshActor_OnHit) == 0x000008, "Wrong alignment on BreakableStaticMeshActor_OnHit");
static_assert(sizeof(BreakableStaticMeshActor_OnHit) == 0x0000A8, "Wrong size on BreakableStaticMeshActor_OnHit");
static_assert(offsetof(BreakableStaticMeshActor_OnHit, SelfActor) == 0x000000, "Member 'BreakableStaticMeshActor_OnHit::SelfActor' has a wrong offset!");
static_assert(offsetof(BreakableStaticMeshActor_OnHit, OtherActor) == 0x000008, "Member 'BreakableStaticMeshActor_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(BreakableStaticMeshActor_OnHit, NormalImpulse) == 0x000010, "Member 'BreakableStaticMeshActor_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BreakableStaticMeshActor_OnHit, Hit) == 0x000020, "Member 'BreakableStaticMeshActor_OnHit::Hit' has a wrong offset!");

// Function AT.BreakingDetectorComponent.OnBroken
// 0x0001 (0x0001 - 0x0000)
struct BreakingDetectorComponent_OnBroken final
{
public:
	EBrokenReason                                 BrokenReason;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakingDetectorComponent_OnBroken) == 0x000001, "Wrong alignment on BreakingDetectorComponent_OnBroken");
static_assert(sizeof(BreakingDetectorComponent_OnBroken) == 0x000001, "Wrong size on BreakingDetectorComponent_OnBroken");
static_assert(offsetof(BreakingDetectorComponent_OnBroken, BrokenReason) == 0x000000, "Member 'BreakingDetectorComponent_OnBroken::BrokenReason' has a wrong offset!");

// Function AT.CarSplineManager.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct CarSplineManager_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CarSplineManager_OnDemoTiming) == 0x000004, "Wrong alignment on CarSplineManager_OnDemoTiming");
static_assert(sizeof(CarSplineManager_OnDemoTiming) == 0x000018, "Wrong size on CarSplineManager_OnDemoTiming");
static_assert(offsetof(CarSplineManager_OnDemoTiming, DemoType) == 0x000000, "Member 'CarSplineManager_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(CarSplineManager_OnDemoTiming, DemoTiming) == 0x000001, "Member 'CarSplineManager_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(CarSplineManager_OnDemoTiming, DemoName) == 0x000008, "Member 'CarSplineManager_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(CarSplineManager_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'CarSplineManager_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.CharacterAuraComponent.GetPowerCompareRank
// 0x0004 (0x0004 - 0x0000)
struct CharacterAuraComponent_GetPowerCompareRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAuraComponent_GetPowerCompareRank) == 0x000004, "Wrong alignment on CharacterAuraComponent_GetPowerCompareRank");
static_assert(sizeof(CharacterAuraComponent_GetPowerCompareRank) == 0x000004, "Wrong size on CharacterAuraComponent_GetPowerCompareRank");
static_assert(offsetof(CharacterAuraComponent_GetPowerCompareRank, ReturnValue) == 0x000000, "Member 'CharacterAuraComponent_GetPowerCompareRank::ReturnValue' has a wrong offset!");

// Function AT.CharacterAuraComponent.OnSearchEnd
// 0x0108 (0x0108 - 0x0000)
struct CharacterAuraComponent_OnSearchEnd final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAuraComponent_OnSearchEnd) == 0x000008, "Wrong alignment on CharacterAuraComponent_OnSearchEnd");
static_assert(sizeof(CharacterAuraComponent_OnSearchEnd) == 0x000108, "Wrong size on CharacterAuraComponent_OnSearchEnd");
static_assert(offsetof(CharacterAuraComponent_OnSearchEnd, Param) == 0x000000, "Member 'CharacterAuraComponent_OnSearchEnd::Param' has a wrong offset!");

// Function AT.CharacterAuraComponent.OnSearchStart
// 0x0108 (0x0108 - 0x0000)
struct CharacterAuraComponent_OnSearchStart final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAuraComponent_OnSearchStart) == 0x000008, "Wrong alignment on CharacterAuraComponent_OnSearchStart");
static_assert(sizeof(CharacterAuraComponent_OnSearchStart) == 0x000108, "Wrong size on CharacterAuraComponent_OnSearchStart");
static_assert(offsetof(CharacterAuraComponent_OnSearchStart, Param) == 0x000000, "Member 'CharacterAuraComponent_OnSearchStart::Param' has a wrong offset!");

// Function AT.CollectivelyCollectVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct CollectivelyCollectVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectivelyCollectVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on CollectivelyCollectVolume_OnOverlapBegin");
static_assert(sizeof(CollectivelyCollectVolume_OnOverlapBegin) == 0x000010, "Wrong size on CollectivelyCollectVolume_OnOverlapBegin");
static_assert(offsetof(CollectivelyCollectVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'CollectivelyCollectVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(CollectivelyCollectVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'CollectivelyCollectVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.CookingManager.OnLoadedRecipeParam
// 0x0008 (0x0008 - 0x0000)
struct CookingManager_OnLoadedRecipeParam final
{
public:
	class UATDataAssetUiAsyncLoad*                LoadOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CookingManager_OnLoadedRecipeParam) == 0x000008, "Wrong alignment on CookingManager_OnLoadedRecipeParam");
static_assert(sizeof(CookingManager_OnLoadedRecipeParam) == 0x000008, "Wrong size on CookingManager_OnLoadedRecipeParam");
static_assert(offsetof(CookingManager_OnLoadedRecipeParam, LoadOwner) == 0x000000, "Member 'CookingManager_OnLoadedRecipeParam::LoadOwner' has a wrong offset!");

// Function AT.CookingManager.OnLoadedRestaurantRecipeParam
// 0x0008 (0x0008 - 0x0000)
struct CookingManager_OnLoadedRestaurantRecipeParam final
{
public:
	class UATDataAssetUiAsyncLoad*                LoadOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CookingManager_OnLoadedRestaurantRecipeParam) == 0x000008, "Wrong alignment on CookingManager_OnLoadedRestaurantRecipeParam");
static_assert(sizeof(CookingManager_OnLoadedRestaurantRecipeParam) == 0x000008, "Wrong size on CookingManager_OnLoadedRestaurantRecipeParam");
static_assert(offsetof(CookingManager_OnLoadedRestaurantRecipeParam, LoadOwner) == 0x000000, "Member 'CookingManager_OnLoadedRestaurantRecipeParam::LoadOwner' has a wrong offset!");

// Function AT.RaceCheckPoint.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RaceCheckPoint_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OverlapInfo;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceCheckPoint_BeginOverlap) == 0x000008, "Wrong alignment on RaceCheckPoint_BeginOverlap");
static_assert(sizeof(RaceCheckPoint_BeginOverlap) == 0x0000A8, "Wrong size on RaceCheckPoint_BeginOverlap");
static_assert(offsetof(RaceCheckPoint_BeginOverlap, OverlappedComp) == 0x000000, "Member 'RaceCheckPoint_BeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RaceCheckPoint_BeginOverlap, Other) == 0x000008, "Member 'RaceCheckPoint_BeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(RaceCheckPoint_BeginOverlap, OtherComp) == 0x000010, "Member 'RaceCheckPoint_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RaceCheckPoint_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RaceCheckPoint_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RaceCheckPoint_BeginOverlap, bFromSweep) == 0x00001C, "Member 'RaceCheckPoint_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RaceCheckPoint_BeginOverlap, OverlapInfo) == 0x000020, "Member 'RaceCheckPoint_BeginOverlap::OverlapInfo' has a wrong offset!");

// Function AT.RaceCheckPoint.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RaceCheckPoint_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceCheckPoint_EndOverlap) == 0x000008, "Wrong alignment on RaceCheckPoint_EndOverlap");
static_assert(sizeof(RaceCheckPoint_EndOverlap) == 0x000020, "Wrong size on RaceCheckPoint_EndOverlap");
static_assert(offsetof(RaceCheckPoint_EndOverlap, OverlappedComponent) == 0x000000, "Member 'RaceCheckPoint_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RaceCheckPoint_EndOverlap, OtherActor) == 0x000008, "Member 'RaceCheckPoint_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RaceCheckPoint_EndOverlap, OtherComp) == 0x000010, "Member 'RaceCheckPoint_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RaceCheckPoint_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'RaceCheckPoint_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function AT.NpcActionComponent.ChangeNpcState
// 0x0001 (0x0001 - 0x0000)
struct NpcActionComponent_ChangeNpcState final
{
public:
	ENpcState                                     State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcActionComponent_ChangeNpcState) == 0x000001, "Wrong alignment on NpcActionComponent_ChangeNpcState");
static_assert(sizeof(NpcActionComponent_ChangeNpcState) == 0x000001, "Wrong size on NpcActionComponent_ChangeNpcState");
static_assert(offsetof(NpcActionComponent_ChangeNpcState, State) == 0x000000, "Member 'NpcActionComponent_ChangeNpcState::State' has a wrong offset!");

// Function AT.NpcActionComponent.EnableFootIK
// 0x0002 (0x0002 - 0x0000)
struct NpcActionComponent_EnableFootIK final
{
public:
	bool                                          Right;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Left;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcActionComponent_EnableFootIK) == 0x000001, "Wrong alignment on NpcActionComponent_EnableFootIK");
static_assert(sizeof(NpcActionComponent_EnableFootIK) == 0x000002, "Wrong size on NpcActionComponent_EnableFootIK");
static_assert(offsetof(NpcActionComponent_EnableFootIK, Right) == 0x000000, "Member 'NpcActionComponent_EnableFootIK::Right' has a wrong offset!");
static_assert(offsetof(NpcActionComponent_EnableFootIK, Left) == 0x000001, "Member 'NpcActionComponent_EnableFootIK::Left' has a wrong offset!");

// Function AT.NpcActionComponent.GetNpcState
// 0x0001 (0x0001 - 0x0000)
struct NpcActionComponent_GetNpcState final
{
public:
	ENpcState                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcActionComponent_GetNpcState) == 0x000001, "Wrong alignment on NpcActionComponent_GetNpcState");
static_assert(sizeof(NpcActionComponent_GetNpcState) == 0x000001, "Wrong size on NpcActionComponent_GetNpcState");
static_assert(offsetof(NpcActionComponent_GetNpcState, ReturnValue) == 0x000000, "Member 'NpcActionComponent_GetNpcState::ReturnValue' has a wrong offset!");

// Function AT.NpcActionComponent.GetNpcStateBack
// 0x0001 (0x0001 - 0x0000)
struct NpcActionComponent_GetNpcStateBack final
{
public:
	ENpcState                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcActionComponent_GetNpcStateBack) == 0x000001, "Wrong alignment on NpcActionComponent_GetNpcStateBack");
static_assert(sizeof(NpcActionComponent_GetNpcStateBack) == 0x000001, "Wrong size on NpcActionComponent_GetNpcStateBack");
static_assert(offsetof(NpcActionComponent_GetNpcStateBack, ReturnValue) == 0x000000, "Member 'NpcActionComponent_GetNpcStateBack::ReturnValue' has a wrong offset!");

// Function AT.NpcActionComponent.SetAction
// 0x0001 (0x0001 - 0x0000)
struct NpcActionComponent_SetAction final
{
public:
	E_NPC_ACTIONTYPE                              State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcActionComponent_SetAction) == 0x000001, "Wrong alignment on NpcActionComponent_SetAction");
static_assert(sizeof(NpcActionComponent_SetAction) == 0x000001, "Wrong size on NpcActionComponent_SetAction");
static_assert(offsetof(NpcActionComponent_SetAction, State) == 0x000000, "Member 'NpcActionComponent_SetAction::State' has a wrong offset!");

// Function AT.SimpleTalkWindow.BeginTalkWindow
// 0x0010 (0x0010 - 0x0000)
struct SimpleTalkWindow_BeginTalkWindow final
{
public:
	class FString                                 TalkID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTalkWindow_BeginTalkWindow) == 0x000008, "Wrong alignment on SimpleTalkWindow_BeginTalkWindow");
static_assert(sizeof(SimpleTalkWindow_BeginTalkWindow) == 0x000010, "Wrong size on SimpleTalkWindow_BeginTalkWindow");
static_assert(offsetof(SimpleTalkWindow_BeginTalkWindow, TalkID) == 0x000000, "Member 'SimpleTalkWindow_BeginTalkWindow::TalkID' has a wrong offset!");

// Function AT.SimpleTalkWindow.SetVisibleTime
// 0x0004 (0x0004 - 0x0000)
struct SimpleTalkWindow_SetVisibleTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTalkWindow_SetVisibleTime) == 0x000004, "Wrong alignment on SimpleTalkWindow_SetVisibleTime");
static_assert(sizeof(SimpleTalkWindow_SetVisibleTime) == 0x000004, "Wrong size on SimpleTalkWindow_SetVisibleTime");
static_assert(offsetof(SimpleTalkWindow_SetVisibleTime, Time) == 0x000000, "Member 'SimpleTalkWindow_SetVisibleTime::Time' has a wrong offset!");

// Function AT.QuestPhase_Cooking.OnCookingTiming
// 0x0001 (0x0001 - 0x0000)
struct QuestPhase_Cooking_OnCookingTiming final
{
public:
	EEventTimingType                              TimingType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestPhase_Cooking_OnCookingTiming) == 0x000001, "Wrong alignment on QuestPhase_Cooking_OnCookingTiming");
static_assert(sizeof(QuestPhase_Cooking_OnCookingTiming) == 0x000001, "Wrong size on QuestPhase_Cooking_OnCookingTiming");
static_assert(offsetof(QuestPhase_Cooking_OnCookingTiming, TimingType) == 0x000000, "Member 'QuestPhase_Cooking_OnCookingTiming::TimingType' has a wrong offset!");

// Function AT.QuestPhase_Hunting.OnAddedInventory
// 0x0010 (0x0010 - 0x0000)
struct QuestPhase_Hunting_OnAddedInventory final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestPhase_Hunting_OnAddedInventory) == 0x000004, "Wrong alignment on QuestPhase_Hunting_OnAddedInventory");
static_assert(sizeof(QuestPhase_Hunting_OnAddedInventory) == 0x000010, "Wrong size on QuestPhase_Hunting_OnAddedInventory");
static_assert(offsetof(QuestPhase_Hunting_OnAddedInventory, ItemId) == 0x000000, "Member 'QuestPhase_Hunting_OnAddedInventory::ItemId' has a wrong offset!");
static_assert(offsetof(QuestPhase_Hunting_OnAddedInventory, Num) == 0x000008, "Member 'QuestPhase_Hunting_OnAddedInventory::Num' has a wrong offset!");

// Function AT.CrossTalkConditionTouchNoEntryVolume.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap");
static_assert(sizeof(CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap) == 0x000010, "Wrong size on CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap");
static_assert(offsetof(CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'CrossTalkConditionTouchNoEntryVolume_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function AT.AT_DebugMapInfo.OnLoadedSaveData
// 0x0001 (0x0001 - 0x0000)
struct AT_DebugMapInfo_OnLoadedSaveData final
{
public:
	bool                                          bIsSuccess;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_DebugMapInfo_OnLoadedSaveData) == 0x000001, "Wrong alignment on AT_DebugMapInfo_OnLoadedSaveData");
static_assert(sizeof(AT_DebugMapInfo_OnLoadedSaveData) == 0x000001, "Wrong size on AT_DebugMapInfo_OnLoadedSaveData");
static_assert(offsetof(AT_DebugMapInfo_OnLoadedSaveData, bIsSuccess) == 0x000000, "Member 'AT_DebugMapInfo_OnLoadedSaveData::bIsSuccess' has a wrong offset!");

// Function AT.AT_DebugMapInfo.IsLoadedQest
// 0x0001 (0x0001 - 0x0000)
struct AT_DebugMapInfo_IsLoadedQest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AT_DebugMapInfo_IsLoadedQest) == 0x000001, "Wrong alignment on AT_DebugMapInfo_IsLoadedQest");
static_assert(sizeof(AT_DebugMapInfo_IsLoadedQest) == 0x000001, "Wrong size on AT_DebugMapInfo_IsLoadedQest");
static_assert(offsetof(AT_DebugMapInfo_IsLoadedQest, ReturnValue) == 0x000000, "Member 'AT_DebugMapInfo_IsLoadedQest::ReturnValue' has a wrong offset!");

// Function AT.DebugMenu.GetQuestFlag
// 0x0001 (0x0001 - 0x0000)
struct DebugMenu_GetQuestFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenu_GetQuestFlag) == 0x000001, "Wrong alignment on DebugMenu_GetQuestFlag");
static_assert(sizeof(DebugMenu_GetQuestFlag) == 0x000001, "Wrong size on DebugMenu_GetQuestFlag");
static_assert(offsetof(DebugMenu_GetQuestFlag, ReturnValue) == 0x000000, "Member 'DebugMenu_GetQuestFlag::ReturnValue' has a wrong offset!");

// Function AT.DebugMenu.SetBoolValue
// 0x0018 (0x0018 - 0x0000)
struct DebugMenu_SetBoolValue final
{
public:
	class FString                                 SStringId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenu_SetBoolValue) == 0x000008, "Wrong alignment on DebugMenu_SetBoolValue");
static_assert(sizeof(DebugMenu_SetBoolValue) == 0x000018, "Wrong size on DebugMenu_SetBoolValue");
static_assert(offsetof(DebugMenu_SetBoolValue, SStringId) == 0x000000, "Member 'DebugMenu_SetBoolValue::SStringId' has a wrong offset!");
static_assert(offsetof(DebugMenu_SetBoolValue, bValue) == 0x000010, "Member 'DebugMenu_SetBoolValue::bValue' has a wrong offset!");

// Function AT.DebugMenu.SetFloatValue
// 0x0018 (0x0018 - 0x0000)
struct DebugMenu_SetFloatValue final
{
public:
	class FString                                 SStringId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fvalue;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenu_SetFloatValue) == 0x000008, "Wrong alignment on DebugMenu_SetFloatValue");
static_assert(sizeof(DebugMenu_SetFloatValue) == 0x000018, "Wrong size on DebugMenu_SetFloatValue");
static_assert(offsetof(DebugMenu_SetFloatValue, SStringId) == 0x000000, "Member 'DebugMenu_SetFloatValue::SStringId' has a wrong offset!");
static_assert(offsetof(DebugMenu_SetFloatValue, Fvalue) == 0x000010, "Member 'DebugMenu_SetFloatValue::Fvalue' has a wrong offset!");

// Function AT.DebugMenu.SetIntValue
// 0x0018 (0x0018 - 0x0000)
struct DebugMenu_SetIntValue final
{
public:
	class FString                                 SStringId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IValue;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenu_SetIntValue) == 0x000008, "Wrong alignment on DebugMenu_SetIntValue");
static_assert(sizeof(DebugMenu_SetIntValue) == 0x000018, "Wrong size on DebugMenu_SetIntValue");
static_assert(offsetof(DebugMenu_SetIntValue, SStringId) == 0x000000, "Member 'DebugMenu_SetIntValue::SStringId' has a wrong offset!");
static_assert(offsetof(DebugMenu_SetIntValue, IValue) == 0x000010, "Member 'DebugMenu_SetIntValue::IValue' has a wrong offset!");

// Function AT.DebugMenu.SetQuestFlag
// 0x0001 (0x0001 - 0x0000)
struct DebugMenu_SetQuestFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenu_SetQuestFlag) == 0x000001, "Wrong alignment on DebugMenu_SetQuestFlag");
static_assert(sizeof(DebugMenu_SetQuestFlag) == 0x000001, "Wrong size on DebugMenu_SetQuestFlag");
static_assert(offsetof(DebugMenu_SetQuestFlag, bFlag) == 0x000000, "Member 'DebugMenu_SetQuestFlag::bFlag' has a wrong offset!");

// Function AT.DebugMenu.GetBoolValue
// 0x0018 (0x0018 - 0x0000)
struct DebugMenu_GetBoolValue final
{
public:
	class FString                                 SStringId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenu_GetBoolValue) == 0x000008, "Wrong alignment on DebugMenu_GetBoolValue");
static_assert(sizeof(DebugMenu_GetBoolValue) == 0x000018, "Wrong size on DebugMenu_GetBoolValue");
static_assert(offsetof(DebugMenu_GetBoolValue, SStringId) == 0x000000, "Member 'DebugMenu_GetBoolValue::SStringId' has a wrong offset!");
static_assert(offsetof(DebugMenu_GetBoolValue, ReturnValue) == 0x000010, "Member 'DebugMenu_GetBoolValue::ReturnValue' has a wrong offset!");

// Function AT.DebugMenu.GetFloatValue
// 0x0018 (0x0018 - 0x0000)
struct DebugMenu_GetFloatValue final
{
public:
	class FString                                 SStringId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenu_GetFloatValue) == 0x000008, "Wrong alignment on DebugMenu_GetFloatValue");
static_assert(sizeof(DebugMenu_GetFloatValue) == 0x000018, "Wrong size on DebugMenu_GetFloatValue");
static_assert(offsetof(DebugMenu_GetFloatValue, SStringId) == 0x000000, "Member 'DebugMenu_GetFloatValue::SStringId' has a wrong offset!");
static_assert(offsetof(DebugMenu_GetFloatValue, ReturnValue) == 0x000010, "Member 'DebugMenu_GetFloatValue::ReturnValue' has a wrong offset!");

// Function AT.DebugMenu.GetIntValue
// 0x0018 (0x0018 - 0x0000)
struct DebugMenu_GetIntValue final
{
public:
	class FString                                 SStringId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenu_GetIntValue) == 0x000008, "Wrong alignment on DebugMenu_GetIntValue");
static_assert(sizeof(DebugMenu_GetIntValue) == 0x000018, "Wrong size on DebugMenu_GetIntValue");
static_assert(offsetof(DebugMenu_GetIntValue, SStringId) == 0x000000, "Member 'DebugMenu_GetIntValue::SStringId' has a wrong offset!");
static_assert(offsetof(DebugMenu_GetIntValue, ReturnValue) == 0x000010, "Member 'DebugMenu_GetIntValue::ReturnValue' has a wrong offset!");

// Function AT.Deer_Component.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct Deer_Component_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Deer_Component_OnComponentHit) == 0x000008, "Wrong alignment on Deer_Component_OnComponentHit");
static_assert(sizeof(Deer_Component_OnComponentHit) == 0x0000B0, "Wrong size on Deer_Component_OnComponentHit");
static_assert(offsetof(Deer_Component_OnComponentHit, HitComponent) == 0x000000, "Member 'Deer_Component_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(Deer_Component_OnComponentHit, OtherActor) == 0x000008, "Member 'Deer_Component_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Deer_Component_OnComponentHit, OtherComp) == 0x000010, "Member 'Deer_Component_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Deer_Component_OnComponentHit, NormalImpulse) == 0x000018, "Member 'Deer_Component_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Deer_Component_OnComponentHit, Hit) == 0x000028, "Member 'Deer_Component_OnComponentHit::Hit' has a wrong offset!");

// Function AT.Deer_Component.OnProjectileLanding
// 0x0008 (0x0008 - 0x0000)
struct Deer_Component_OnProjectileLanding final
{
public:
	class AATProjectileField*                     Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Deer_Component_OnProjectileLanding) == 0x000008, "Wrong alignment on Deer_Component_OnProjectileLanding");
static_assert(sizeof(Deer_Component_OnProjectileLanding) == 0x000008, "Wrong size on Deer_Component_OnProjectileLanding");
static_assert(offsetof(Deer_Component_OnProjectileLanding, Projectile) == 0x000000, "Member 'Deer_Component_OnProjectileLanding::Projectile' has a wrong offset!");

// Function AT.Deer_Component.OnVisibleChangedCallBack
// 0x0001 (0x0001 - 0x0000)
struct Deer_Component_OnVisibleChangedCallBack final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Deer_Component_OnVisibleChangedCallBack) == 0x000001, "Wrong alignment on Deer_Component_OnVisibleChangedCallBack");
static_assert(sizeof(Deer_Component_OnVisibleChangedCallBack) == 0x000001, "Wrong size on Deer_Component_OnVisibleChangedCallBack");
static_assert(offsetof(Deer_Component_OnVisibleChangedCallBack, IsVisible) == 0x000000, "Member 'Deer_Component_OnVisibleChangedCallBack::IsVisible' has a wrong offset!");

// Function AT.DestructibleBlueprintLibrary.DrawDebugActorChunks
// 0x0008 (0x0008 - 0x0000)
struct DestructibleBlueprintLibrary_DrawDebugActorChunks final
{
public:
	class ADestructibleActor*                     Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleBlueprintLibrary_DrawDebugActorChunks) == 0x000008, "Wrong alignment on DestructibleBlueprintLibrary_DrawDebugActorChunks");
static_assert(sizeof(DestructibleBlueprintLibrary_DrawDebugActorChunks) == 0x000008, "Wrong size on DestructibleBlueprintLibrary_DrawDebugActorChunks");
static_assert(offsetof(DestructibleBlueprintLibrary_DrawDebugActorChunks, Actor) == 0x000000, "Member 'DestructibleBlueprintLibrary_DrawDebugActorChunks::Actor' has a wrong offset!");

// Function AT.DestructibleBlueprintLibrary.DrawDebugComponentChunks
// 0x0008 (0x0008 - 0x0000)
struct DestructibleBlueprintLibrary_DrawDebugComponentChunks final
{
public:
	class UDestructibleComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleBlueprintLibrary_DrawDebugComponentChunks) == 0x000008, "Wrong alignment on DestructibleBlueprintLibrary_DrawDebugComponentChunks");
static_assert(sizeof(DestructibleBlueprintLibrary_DrawDebugComponentChunks) == 0x000008, "Wrong size on DestructibleBlueprintLibrary_DrawDebugComponentChunks");
static_assert(offsetof(DestructibleBlueprintLibrary_DrawDebugComponentChunks, Component) == 0x000000, "Member 'DestructibleBlueprintLibrary_DrawDebugComponentChunks::Component' has a wrong offset!");

// Function AT.Dinosaur_Component.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct Dinosaur_Component_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dinosaur_Component_OnComponentHit) == 0x000008, "Wrong alignment on Dinosaur_Component_OnComponentHit");
static_assert(sizeof(Dinosaur_Component_OnComponentHit) == 0x0000B0, "Wrong size on Dinosaur_Component_OnComponentHit");
static_assert(offsetof(Dinosaur_Component_OnComponentHit, HitComponent) == 0x000000, "Member 'Dinosaur_Component_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(Dinosaur_Component_OnComponentHit, OtherActor) == 0x000008, "Member 'Dinosaur_Component_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Dinosaur_Component_OnComponentHit, OtherComp) == 0x000010, "Member 'Dinosaur_Component_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Dinosaur_Component_OnComponentHit, NormalImpulse) == 0x000018, "Member 'Dinosaur_Component_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Dinosaur_Component_OnComponentHit, Hit) == 0x000028, "Member 'Dinosaur_Component_OnComponentHit::Hit' has a wrong offset!");

// Function AT.Dinosaur_Component.OnQuestGeneralTalkEvent
// 0x0008 (0x0008 - 0x0000)
struct Dinosaur_Component_OnQuestGeneralTalkEvent final
{
public:
	struct FGeneralTalkEventArgment               Argment;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dinosaur_Component_OnQuestGeneralTalkEvent) == 0x000001, "Wrong alignment on Dinosaur_Component_OnQuestGeneralTalkEvent");
static_assert(sizeof(Dinosaur_Component_OnQuestGeneralTalkEvent) == 0x000008, "Wrong size on Dinosaur_Component_OnQuestGeneralTalkEvent");
static_assert(offsetof(Dinosaur_Component_OnQuestGeneralTalkEvent, Argment) == 0x000000, "Member 'Dinosaur_Component_OnQuestGeneralTalkEvent::Argment' has a wrong offset!");

// Function AT.Dinosaur_Component.OnVisibleChangedCallBack
// 0x0001 (0x0001 - 0x0000)
struct Dinosaur_Component_OnVisibleChangedCallBack final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dinosaur_Component_OnVisibleChangedCallBack) == 0x000001, "Wrong alignment on Dinosaur_Component_OnVisibleChangedCallBack");
static_assert(sizeof(Dinosaur_Component_OnVisibleChangedCallBack) == 0x000001, "Wrong size on Dinosaur_Component_OnVisibleChangedCallBack");
static_assert(offsetof(Dinosaur_Component_OnVisibleChangedCallBack, State) == 0x000000, "Member 'Dinosaur_Component_OnVisibleChangedCallBack::State' has a wrong offset!");

// Function AT.Dinosaur_MoveArea.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct Dinosaur_MoveArea_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OverlapInfo;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Dinosaur_MoveArea_BeginOverlap) == 0x000008, "Wrong alignment on Dinosaur_MoveArea_BeginOverlap");
static_assert(sizeof(Dinosaur_MoveArea_BeginOverlap) == 0x0000A8, "Wrong size on Dinosaur_MoveArea_BeginOverlap");
static_assert(offsetof(Dinosaur_MoveArea_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'Dinosaur_MoveArea_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dinosaur_MoveArea_BeginOverlap, OtherActor) == 0x000008, "Member 'Dinosaur_MoveArea_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Dinosaur_MoveArea_BeginOverlap, OtherComp) == 0x000010, "Member 'Dinosaur_MoveArea_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Dinosaur_MoveArea_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'Dinosaur_MoveArea_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Dinosaur_MoveArea_BeginOverlap, bFromSweep) == 0x00001C, "Member 'Dinosaur_MoveArea_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Dinosaur_MoveArea_BeginOverlap, OverlapInfo) == 0x000020, "Member 'Dinosaur_MoveArea_BeginOverlap::OverlapInfo' has a wrong offset!");

// Function AT.Dinosaur_MoveArea.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct Dinosaur_MoveArea_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Dinosaur_MoveArea_EndOverlap) == 0x000008, "Wrong alignment on Dinosaur_MoveArea_EndOverlap");
static_assert(sizeof(Dinosaur_MoveArea_EndOverlap) == 0x000020, "Wrong size on Dinosaur_MoveArea_EndOverlap");
static_assert(offsetof(Dinosaur_MoveArea_EndOverlap, OverlappedComponent) == 0x000000, "Member 'Dinosaur_MoveArea_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Dinosaur_MoveArea_EndOverlap, OtherActor) == 0x000008, "Member 'Dinosaur_MoveArea_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Dinosaur_MoveArea_EndOverlap, OtherComp) == 0x000010, "Member 'Dinosaur_MoveArea_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Dinosaur_MoveArea_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'Dinosaur_MoveArea_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function AT.NpcAction_PathWalk.OnMontageBlendingOut_Call
// 0x0010 (0x0010 - 0x0000)
struct NpcAction_PathWalk_OnMontageBlendingOut_Call final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAction_PathWalk_OnMontageBlendingOut_Call) == 0x000008, "Wrong alignment on NpcAction_PathWalk_OnMontageBlendingOut_Call");
static_assert(sizeof(NpcAction_PathWalk_OnMontageBlendingOut_Call) == 0x000010, "Wrong size on NpcAction_PathWalk_OnMontageBlendingOut_Call");
static_assert(offsetof(NpcAction_PathWalk_OnMontageBlendingOut_Call, PMontage) == 0x000000, "Member 'NpcAction_PathWalk_OnMontageBlendingOut_Call::PMontage' has a wrong offset!");
static_assert(offsetof(NpcAction_PathWalk_OnMontageBlendingOut_Call, bInterrupted) == 0x000008, "Member 'NpcAction_PathWalk_OnMontageBlendingOut_Call::bInterrupted' has a wrong offset!");

// Function AT.NpcAction_PathWalk.OnNpcGeneralDelegateMap_LoopEnd
// 0x0008 (0x0008 - 0x0000)
struct NpcAction_PathWalk_OnNpcGeneralDelegateMap_LoopEnd final
{
public:
	class UNpcAction*                             PAction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAction_PathWalk_OnNpcGeneralDelegateMap_LoopEnd) == 0x000008, "Wrong alignment on NpcAction_PathWalk_OnNpcGeneralDelegateMap_LoopEnd");
static_assert(sizeof(NpcAction_PathWalk_OnNpcGeneralDelegateMap_LoopEnd) == 0x000008, "Wrong size on NpcAction_PathWalk_OnNpcGeneralDelegateMap_LoopEnd");
static_assert(offsetof(NpcAction_PathWalk_OnNpcGeneralDelegateMap_LoopEnd, PAction) == 0x000000, "Member 'NpcAction_PathWalk_OnNpcGeneralDelegateMap_LoopEnd::PAction' has a wrong offset!");

// Function AT.NpcAction_PathWalk.OnNpcGeneralDelegateMap_MoveStop
// 0x0008 (0x0008 - 0x0000)
struct NpcAction_PathWalk_OnNpcGeneralDelegateMap_MoveStop final
{
public:
	class UNpcAction*                             PAction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAction_PathWalk_OnNpcGeneralDelegateMap_MoveStop) == 0x000008, "Wrong alignment on NpcAction_PathWalk_OnNpcGeneralDelegateMap_MoveStop");
static_assert(sizeof(NpcAction_PathWalk_OnNpcGeneralDelegateMap_MoveStop) == 0x000008, "Wrong size on NpcAction_PathWalk_OnNpcGeneralDelegateMap_MoveStop");
static_assert(offsetof(NpcAction_PathWalk_OnNpcGeneralDelegateMap_MoveStop, PAction) == 0x000000, "Member 'NpcAction_PathWalk_OnNpcGeneralDelegateMap_MoveStop::PAction' has a wrong offset!");

// Function AT.NpcAction_PathWalk.OnNpcVisibleChanged
// 0x0001 (0x0001 - 0x0000)
struct NpcAction_PathWalk_OnNpcVisibleChanged final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAction_PathWalk_OnNpcVisibleChanged) == 0x000001, "Wrong alignment on NpcAction_PathWalk_OnNpcVisibleChanged");
static_assert(sizeof(NpcAction_PathWalk_OnNpcVisibleChanged) == 0x000001, "Wrong size on NpcAction_PathWalk_OnNpcVisibleChanged");
static_assert(offsetof(NpcAction_PathWalk_OnNpcVisibleChanged, State) == 0x000000, "Member 'NpcAction_PathWalk_OnNpcVisibleChanged::State' has a wrong offset!");

// Function AT.DirectionManager.GetCurrentDirectionTypeName
// 0x0010 (0x0010 - 0x0000)
struct DirectionManager_GetCurrentDirectionTypeName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionManager_GetCurrentDirectionTypeName) == 0x000008, "Wrong alignment on DirectionManager_GetCurrentDirectionTypeName");
static_assert(sizeof(DirectionManager_GetCurrentDirectionTypeName) == 0x000010, "Wrong size on DirectionManager_GetCurrentDirectionTypeName");
static_assert(offsetof(DirectionManager_GetCurrentDirectionTypeName, ReturnValue) == 0x000000, "Member 'DirectionManager_GetCurrentDirectionTypeName::ReturnValue' has a wrong offset!");

// Function AT.DirectionManager.IsDirection
// 0x0001 (0x0001 - 0x0000)
struct DirectionManager_IsDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionManager_IsDirection) == 0x000001, "Wrong alignment on DirectionManager_IsDirection");
static_assert(sizeof(DirectionManager_IsDirection) == 0x000001, "Wrong size on DirectionManager_IsDirection");
static_assert(offsetof(DirectionManager_IsDirection, ReturnValue) == 0x000000, "Member 'DirectionManager_IsDirection::ReturnValue' has a wrong offset!");

// Function AT.DirectionManager.IsDirectionType
// 0x0002 (0x0002 - 0x0000)
struct DirectionManager_IsDirectionType final
{
public:
	EDIRECTION_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionManager_IsDirectionType) == 0x000001, "Wrong alignment on DirectionManager_IsDirectionType");
static_assert(sizeof(DirectionManager_IsDirectionType) == 0x000002, "Wrong size on DirectionManager_IsDirectionType");
static_assert(offsetof(DirectionManager_IsDirectionType, Type) == 0x000000, "Member 'DirectionManager_IsDirectionType::Type' has a wrong offset!");
static_assert(offsetof(DirectionManager_IsDirectionType, ReturnValue) == 0x000001, "Member 'DirectionManager_IsDirectionType::ReturnValue' has a wrong offset!");

// Function AT.DirectionManager.IsRequestType
// 0x0002 (0x0002 - 0x0000)
struct DirectionManager_IsRequestType final
{
public:
	EDIRECTION_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionManager_IsRequestType) == 0x000001, "Wrong alignment on DirectionManager_IsRequestType");
static_assert(sizeof(DirectionManager_IsRequestType) == 0x000002, "Wrong size on DirectionManager_IsRequestType");
static_assert(offsetof(DirectionManager_IsRequestType, Type) == 0x000000, "Member 'DirectionManager_IsRequestType::Type' has a wrong offset!");
static_assert(offsetof(DirectionManager_IsRequestType, ReturnValue) == 0x000001, "Member 'DirectionManager_IsRequestType::ReturnValue' has a wrong offset!");

// Function AT.DirectionManager.RequestBeginDirection
// 0x0050 (0x0050 - 0x0000)
struct DirectionManager_RequestBeginDirection final
{
public:
	EDIRECTION_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectionParameter                    InParameter;                                       // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionManager_RequestBeginDirection) == 0x000008, "Wrong alignment on DirectionManager_RequestBeginDirection");
static_assert(sizeof(DirectionManager_RequestBeginDirection) == 0x000050, "Wrong size on DirectionManager_RequestBeginDirection");
static_assert(offsetof(DirectionManager_RequestBeginDirection, Type) == 0x000000, "Member 'DirectionManager_RequestBeginDirection::Type' has a wrong offset!");
static_assert(offsetof(DirectionManager_RequestBeginDirection, InParameter) == 0x000008, "Member 'DirectionManager_RequestBeginDirection::InParameter' has a wrong offset!");

// Function AT.DirectionManager.RequestEndDirection
// 0x0001 (0x0001 - 0x0000)
struct DirectionManager_RequestEndDirection final
{
public:
	EDIRECTION_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionManager_RequestEndDirection) == 0x000001, "Wrong alignment on DirectionManager_RequestEndDirection");
static_assert(sizeof(DirectionManager_RequestEndDirection) == 0x000001, "Wrong size on DirectionManager_RequestEndDirection");
static_assert(offsetof(DirectionManager_RequestEndDirection, Type) == 0x000000, "Member 'DirectionManager_RequestEndDirection::Type' has a wrong offset!");

// Function AT.DLC4AdditionalStoryNavigator.NavigateDLC4AdditionalStory
// 0x0008 (0x0008 - 0x0000)
struct DLC4AdditionalStoryNavigator_NavigateDLC4AdditionalStory final
{
public:
	class FName                                   NavigateLevelName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLC4AdditionalStoryNavigator_NavigateDLC4AdditionalStory) == 0x000004, "Wrong alignment on DLC4AdditionalStoryNavigator_NavigateDLC4AdditionalStory");
static_assert(sizeof(DLC4AdditionalStoryNavigator_NavigateDLC4AdditionalStory) == 0x000008, "Wrong size on DLC4AdditionalStoryNavigator_NavigateDLC4AdditionalStory");
static_assert(offsetof(DLC4AdditionalStoryNavigator_NavigateDLC4AdditionalStory, NavigateLevelName) == 0x000000, "Member 'DLC4AdditionalStoryNavigator_NavigateDLC4AdditionalStory::NavigateLevelName' has a wrong offset!");

// Function AT.DLC4AdditionalStoryNavigator.NavigateDLC4MainStory
// 0x0008 (0x0008 - 0x0000)
struct DLC4AdditionalStoryNavigator_NavigateDLC4MainStory final
{
public:
	class FName                                   NavigateLevelName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLC4AdditionalStoryNavigator_NavigateDLC4MainStory) == 0x000004, "Wrong alignment on DLC4AdditionalStoryNavigator_NavigateDLC4MainStory");
static_assert(sizeof(DLC4AdditionalStoryNavigator_NavigateDLC4MainStory) == 0x000008, "Wrong size on DLC4AdditionalStoryNavigator_NavigateDLC4MainStory");
static_assert(offsetof(DLC4AdditionalStoryNavigator_NavigateDLC4MainStory, NavigateLevelName) == 0x000000, "Member 'DLC4AdditionalStoryNavigator_NavigateDLC4MainStory::NavigateLevelName' has a wrong offset!");

// Function AT.DragonBallManager.IsStoneDragonBall
// 0x0001 (0x0001 - 0x0000)
struct DragonBallManager_IsStoneDragonBall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragonBallManager_IsStoneDragonBall) == 0x000001, "Wrong alignment on DragonBallManager_IsStoneDragonBall");
static_assert(sizeof(DragonBallManager_IsStoneDragonBall) == 0x000001, "Wrong size on DragonBallManager_IsStoneDragonBall");
static_assert(offsetof(DragonBallManager_IsStoneDragonBall, ReturnValue) == 0x000000, "Member 'DragonBallManager_IsStoneDragonBall::ReturnValue' has a wrong offset!");

// Function AT.DragonBallManager.OnChangeProgress
// 0x0008 (0x0008 - 0x0000)
struct DragonBallManager_OnChangeProgress final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragonBallManager_OnChangeProgress) == 0x000004, "Wrong alignment on DragonBallManager_OnChangeProgress");
static_assert(sizeof(DragonBallManager_OnChangeProgress) == 0x000008, "Wrong size on DragonBallManager_OnChangeProgress");
static_assert(offsetof(DragonBallManager_OnChangeProgress, ProgressID) == 0x000000, "Member 'DragonBallManager_OnChangeProgress::ProgressID' has a wrong offset!");

// Function AT.DragonBallManager.OnCompletedInitialize
// 0x0108 (0x0108 - 0x0000)
struct DragonBallManager_OnCompletedInitialize final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragonBallManager_OnCompletedInitialize) == 0x000008, "Wrong alignment on DragonBallManager_OnCompletedInitialize");
static_assert(sizeof(DragonBallManager_OnCompletedInitialize) == 0x000108, "Wrong size on DragonBallManager_OnCompletedInitialize");
static_assert(offsetof(DragonBallManager_OnCompletedInitialize, EventParam) == 0x000000, "Member 'DragonBallManager_OnCompletedInitialize::EventParam' has a wrong offset!");

// Function AT.DragonBallManager.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct DragonBallManager_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DragonBallManager_OnDemoTiming) == 0x000004, "Wrong alignment on DragonBallManager_OnDemoTiming");
static_assert(sizeof(DragonBallManager_OnDemoTiming) == 0x000018, "Wrong size on DragonBallManager_OnDemoTiming");
static_assert(offsetof(DragonBallManager_OnDemoTiming, DemoType) == 0x000000, "Member 'DragonBallManager_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(DragonBallManager_OnDemoTiming, DemoTiming) == 0x000001, "Member 'DragonBallManager_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(DragonBallManager_OnDemoTiming, DemoName) == 0x000008, "Member 'DragonBallManager_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(DragonBallManager_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'DragonBallManager_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.DragonBallManager.ProgressPhaseChangePhaseTiming
// 0x0004 (0x0004 - 0x0000)
struct DragonBallManager_ProgressPhaseChangePhaseTiming final
{
public:
	int32                                         Phase;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragonBallManager_ProgressPhaseChangePhaseTiming) == 0x000004, "Wrong alignment on DragonBallManager_ProgressPhaseChangePhaseTiming");
static_assert(sizeof(DragonBallManager_ProgressPhaseChangePhaseTiming) == 0x000004, "Wrong size on DragonBallManager_ProgressPhaseChangePhaseTiming");
static_assert(offsetof(DragonBallManager_ProgressPhaseChangePhaseTiming, Phase) == 0x000000, "Member 'DragonBallManager_ProgressPhaseChangePhaseTiming::Phase' has a wrong offset!");

// Function AT.DragonBallManager.ProgressPhaseChangeQuestTiming
// 0x0008 (0x0008 - 0x0000)
struct DragonBallManager_ProgressPhaseChangeQuestTiming final
{
public:
	class FName                                   NewName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragonBallManager_ProgressPhaseChangeQuestTiming) == 0x000004, "Wrong alignment on DragonBallManager_ProgressPhaseChangeQuestTiming");
static_assert(sizeof(DragonBallManager_ProgressPhaseChangeQuestTiming) == 0x000008, "Wrong size on DragonBallManager_ProgressPhaseChangeQuestTiming");
static_assert(offsetof(DragonBallManager_ProgressPhaseChangeQuestTiming, NewName) == 0x000000, "Member 'DragonBallManager_ProgressPhaseChangeQuestTiming::NewName' has a wrong offset!");

// Function AT.DragonBallManager.TestDragonBallSpawn
// 0x0008 (0x0008 - 0x0000)
struct DragonBallManager_TestDragonBallSpawn final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragonBallManager_TestDragonBallSpawn) == 0x000004, "Wrong alignment on DragonBallManager_TestDragonBallSpawn");
static_assert(sizeof(DragonBallManager_TestDragonBallSpawn) == 0x000008, "Wrong size on DragonBallManager_TestDragonBallSpawn");
static_assert(offsetof(DragonBallManager_TestDragonBallSpawn, ProgressID) == 0x000000, "Member 'DragonBallManager_TestDragonBallSpawn::ProgressID' has a wrong offset!");

// Function AT.NpcAction_Wait.OnNpcGeneralDelegateMap_End
// 0x0008 (0x0008 - 0x0000)
struct NpcAction_Wait_OnNpcGeneralDelegateMap_End final
{
public:
	class UNpcAction*                             PAction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAction_Wait_OnNpcGeneralDelegateMap_End) == 0x000008, "Wrong alignment on NpcAction_Wait_OnNpcGeneralDelegateMap_End");
static_assert(sizeof(NpcAction_Wait_OnNpcGeneralDelegateMap_End) == 0x000008, "Wrong size on NpcAction_Wait_OnNpcGeneralDelegateMap_End");
static_assert(offsetof(NpcAction_Wait_OnNpcGeneralDelegateMap_End, PAction) == 0x000000, "Member 'NpcAction_Wait_OnNpcGeneralDelegateMap_End::PAction' has a wrong offset!");

// Function AT.DragonBallStaticActor.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct DragonBallStaticActor_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragonBallStaticActor_OnActionChange) == 0x000008, "Wrong alignment on DragonBallStaticActor_OnActionChange");
static_assert(sizeof(DragonBallStaticActor_OnActionChange) == 0x000010, "Wrong size on DragonBallStaticActor_OnActionChange");
static_assert(offsetof(DragonBallStaticActor_OnActionChange, InCharacter) == 0x000000, "Member 'DragonBallStaticActor_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(DragonBallStaticActor_OnActionChange, InActionIdPrev) == 0x000008, "Member 'DragonBallStaticActor_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(DragonBallStaticActor_OnActionChange, InActionIdNext) == 0x00000C, "Member 'DragonBallStaticActor_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.DynamicLandscapeDirtComponent.SpawnDestructibleActor
// 0x0010 (0x0010 - 0x0000)
struct DynamicLandscapeDirtComponent_SpawnDestructibleActor final
{
public:
	TArray<struct FIntVector4_AT>                 InVectors;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicLandscapeDirtComponent_SpawnDestructibleActor) == 0x000008, "Wrong alignment on DynamicLandscapeDirtComponent_SpawnDestructibleActor");
static_assert(sizeof(DynamicLandscapeDirtComponent_SpawnDestructibleActor) == 0x000010, "Wrong size on DynamicLandscapeDirtComponent_SpawnDestructibleActor");
static_assert(offsetof(DynamicLandscapeDirtComponent_SpawnDestructibleActor, InVectors) == 0x000000, "Member 'DynamicLandscapeDirtComponent_SpawnDestructibleActor::InVectors' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupDuration
// 0x0004 (0x0004 - 0x0000)
struct EaseTansformMovement_SetupDuration final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupDuration) == 0x000004, "Wrong alignment on EaseTansformMovement_SetupDuration");
static_assert(sizeof(EaseTansformMovement_SetupDuration) == 0x000004, "Wrong size on EaseTansformMovement_SetupDuration");
static_assert(offsetof(EaseTansformMovement_SetupDuration, InDuration) == 0x000000, "Member 'EaseTansformMovement_SetupDuration::InDuration' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupEasingType
// 0x0008 (0x0008 - 0x0000)
struct EaseTansformMovement_SetupEasingType final
{
public:
	int32                                         InEasingType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InExp;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupEasingType) == 0x000004, "Wrong alignment on EaseTansformMovement_SetupEasingType");
static_assert(sizeof(EaseTansformMovement_SetupEasingType) == 0x000008, "Wrong size on EaseTansformMovement_SetupEasingType");
static_assert(offsetof(EaseTansformMovement_SetupEasingType, InEasingType) == 0x000000, "Member 'EaseTansformMovement_SetupEasingType::InEasingType' has a wrong offset!");
static_assert(offsetof(EaseTansformMovement_SetupEasingType, InExp) == 0x000004, "Member 'EaseTansformMovement_SetupEasingType::InExp' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupFlags
// 0x0004 (0x0004 - 0x0000)
struct EaseTansformMovement_SetupFlags final
{
public:
	bool                                          UseLocation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAllOwnedComponentMode;                           // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupFlags) == 0x000001, "Wrong alignment on EaseTansformMovement_SetupFlags");
static_assert(sizeof(EaseTansformMovement_SetupFlags) == 0x000004, "Wrong size on EaseTansformMovement_SetupFlags");
static_assert(offsetof(EaseTansformMovement_SetupFlags, UseLocation) == 0x000000, "Member 'EaseTansformMovement_SetupFlags::UseLocation' has a wrong offset!");
static_assert(offsetof(EaseTansformMovement_SetupFlags, UseRotation) == 0x000001, "Member 'EaseTansformMovement_SetupFlags::UseRotation' has a wrong offset!");
static_assert(offsetof(EaseTansformMovement_SetupFlags, UseScale) == 0x000002, "Member 'EaseTansformMovement_SetupFlags::UseScale' has a wrong offset!");
static_assert(offsetof(EaseTansformMovement_SetupFlags, InAllOwnedComponentMode) == 0x000003, "Member 'EaseTansformMovement_SetupFlags::InAllOwnedComponentMode' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupStartLocation
// 0x000C (0x000C - 0x0000)
struct EaseTansformMovement_SetupStartLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupStartLocation) == 0x000004, "Wrong alignment on EaseTansformMovement_SetupStartLocation");
static_assert(sizeof(EaseTansformMovement_SetupStartLocation) == 0x00000C, "Wrong size on EaseTansformMovement_SetupStartLocation");
static_assert(offsetof(EaseTansformMovement_SetupStartLocation, InLocation) == 0x000000, "Member 'EaseTansformMovement_SetupStartLocation::InLocation' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupStartRotation
// 0x000C (0x000C - 0x0000)
struct EaseTansformMovement_SetupStartRotation final
{
public:
	struct FRotator                               InRotation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupStartRotation) == 0x000004, "Wrong alignment on EaseTansformMovement_SetupStartRotation");
static_assert(sizeof(EaseTansformMovement_SetupStartRotation) == 0x00000C, "Wrong size on EaseTansformMovement_SetupStartRotation");
static_assert(offsetof(EaseTansformMovement_SetupStartRotation, InRotation) == 0x000000, "Member 'EaseTansformMovement_SetupStartRotation::InRotation' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupStartScale
// 0x000C (0x000C - 0x0000)
struct EaseTansformMovement_SetupStartScale final
{
public:
	struct FVector                                InScale;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupStartScale) == 0x000004, "Wrong alignment on EaseTansformMovement_SetupStartScale");
static_assert(sizeof(EaseTansformMovement_SetupStartScale) == 0x00000C, "Wrong size on EaseTansformMovement_SetupStartScale");
static_assert(offsetof(EaseTansformMovement_SetupStartScale, InScale) == 0x000000, "Member 'EaseTansformMovement_SetupStartScale::InScale' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupTargetLocation
// 0x000C (0x000C - 0x0000)
struct EaseTansformMovement_SetupTargetLocation final
{
public:
	struct FVector                                InTargetLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupTargetLocation) == 0x000004, "Wrong alignment on EaseTansformMovement_SetupTargetLocation");
static_assert(sizeof(EaseTansformMovement_SetupTargetLocation) == 0x00000C, "Wrong size on EaseTansformMovement_SetupTargetLocation");
static_assert(offsetof(EaseTansformMovement_SetupTargetLocation, InTargetLocation) == 0x000000, "Member 'EaseTansformMovement_SetupTargetLocation::InTargetLocation' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupTargetRotation
// 0x000C (0x000C - 0x0000)
struct EaseTansformMovement_SetupTargetRotation final
{
public:
	struct FRotator                               InTargetRotation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupTargetRotation) == 0x000004, "Wrong alignment on EaseTansformMovement_SetupTargetRotation");
static_assert(sizeof(EaseTansformMovement_SetupTargetRotation) == 0x00000C, "Wrong size on EaseTansformMovement_SetupTargetRotation");
static_assert(offsetof(EaseTansformMovement_SetupTargetRotation, InTargetRotation) == 0x000000, "Member 'EaseTansformMovement_SetupTargetRotation::InTargetRotation' has a wrong offset!");

// Function AT.EaseTansformMovement.SetupTargetScale
// 0x000C (0x000C - 0x0000)
struct EaseTansformMovement_SetupTargetScale final
{
public:
	struct FVector                                InTargetScale;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EaseTansformMovement_SetupTargetScale) == 0x000004, "Wrong alignment on EaseTansformMovement_SetupTargetScale");
static_assert(sizeof(EaseTansformMovement_SetupTargetScale) == 0x00000C, "Wrong size on EaseTansformMovement_SetupTargetScale");
static_assert(offsetof(EaseTansformMovement_SetupTargetScale, InTargetScale) == 0x000000, "Member 'EaseTansformMovement_SetupTargetScale::InTargetScale' has a wrong offset!");

// Function AT.EncountCheckComponent.OverlapBeginEncountCheckFlowDirection
// 0x00A8 (0x00A8 - 0x0000)
struct EncountCheckComponent_OverlapBeginEncountCheckFlowDirection final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirection) == 0x000008, "Wrong alignment on EncountCheckComponent_OverlapBeginEncountCheckFlowDirection");
static_assert(sizeof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirection) == 0x0000A8, "Wrong size on EncountCheckComponent_OverlapBeginEncountCheckFlowDirection");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirection, OverlappedComponent) == 0x000000, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirection::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirection, OtherActor) == 0x000008, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirection::OtherActor' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirection, OtherComp) == 0x000010, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirection::OtherComp' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirection, OtherBodyIndex) == 0x000018, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirection::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirection, bFromSweep) == 0x00001C, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirection::bFromSweep' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirection, SweepResult) == 0x000020, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirection::SweepResult' has a wrong offset!");

// Function AT.EncountCheckComponent.OverlapBeginEncountCheckFlowDirectionArea
// 0x00A8 (0x00A8 - 0x0000)
struct EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea) == 0x000008, "Wrong alignment on EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea");
static_assert(sizeof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea) == 0x0000A8, "Wrong size on EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea, OverlappedComponent) == 0x000000, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea, OtherActor) == 0x000008, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea::OtherActor' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea, OtherComp) == 0x000010, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea::OtherComp' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea, OtherBodyIndex) == 0x000018, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea, bFromSweep) == 0x00001C, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea::bFromSweep' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea, SweepResult) == 0x000020, "Member 'EncountCheckComponent_OverlapBeginEncountCheckFlowDirectionArea::SweepResult' has a wrong offset!");

// Function AT.EncountCheckComponent.OverlapBeginEncountCheckOwnerLocation
// 0x00A8 (0x00A8 - 0x0000)
struct EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation) == 0x000008, "Wrong alignment on EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation");
static_assert(sizeof(EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation) == 0x0000A8, "Wrong size on EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation, OverlappedComponent) == 0x000000, "Member 'EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation, OtherActor) == 0x000008, "Member 'EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation::OtherActor' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation, OtherComp) == 0x000010, "Member 'EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation::OtherComp' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation, OtherBodyIndex) == 0x000018, "Member 'EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation, bFromSweep) == 0x00001C, "Member 'EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation::bFromSweep' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation, SweepResult) == 0x000020, "Member 'EncountCheckComponent_OverlapBeginEncountCheckOwnerLocation::SweepResult' has a wrong offset!");

// Function AT.EncountCheckComponent.OverlapEndEncountCheckFlowDirection
// 0x0020 (0x0020 - 0x0000)
struct EncountCheckComponent_OverlapEndEncountCheckFlowDirection final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EncountCheckComponent_OverlapEndEncountCheckFlowDirection) == 0x000008, "Wrong alignment on EncountCheckComponent_OverlapEndEncountCheckFlowDirection");
static_assert(sizeof(EncountCheckComponent_OverlapEndEncountCheckFlowDirection) == 0x000020, "Wrong size on EncountCheckComponent_OverlapEndEncountCheckFlowDirection");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckFlowDirection, OverlappedComponent) == 0x000000, "Member 'EncountCheckComponent_OverlapEndEncountCheckFlowDirection::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckFlowDirection, OtherActor) == 0x000008, "Member 'EncountCheckComponent_OverlapEndEncountCheckFlowDirection::OtherActor' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckFlowDirection, OtherComp) == 0x000010, "Member 'EncountCheckComponent_OverlapEndEncountCheckFlowDirection::OtherComp' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckFlowDirection, OtherBodyIndex) == 0x000018, "Member 'EncountCheckComponent_OverlapEndEncountCheckFlowDirection::OtherBodyIndex' has a wrong offset!");

// Function AT.EncountCheckComponent.OverlapEndEncountCheckFlowDirectionArea
// 0x0020 (0x0020 - 0x0000)
struct EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea) == 0x000008, "Wrong alignment on EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea");
static_assert(sizeof(EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea) == 0x000020, "Wrong size on EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea, OverlappedComponent) == 0x000000, "Member 'EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea, OtherActor) == 0x000008, "Member 'EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea::OtherActor' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea, OtherComp) == 0x000010, "Member 'EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea::OtherComp' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea, OtherBodyIndex) == 0x000018, "Member 'EncountCheckComponent_OverlapEndEncountCheckFlowDirectionArea::OtherBodyIndex' has a wrong offset!");

// Function AT.EncountCheckComponent.OverlapEndEncountCheckOwnerLocation
// 0x0020 (0x0020 - 0x0000)
struct EncountCheckComponent_OverlapEndEncountCheckOwnerLocation final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EncountCheckComponent_OverlapEndEncountCheckOwnerLocation) == 0x000008, "Wrong alignment on EncountCheckComponent_OverlapEndEncountCheckOwnerLocation");
static_assert(sizeof(EncountCheckComponent_OverlapEndEncountCheckOwnerLocation) == 0x000020, "Wrong size on EncountCheckComponent_OverlapEndEncountCheckOwnerLocation");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckOwnerLocation, OverlappedComponent) == 0x000000, "Member 'EncountCheckComponent_OverlapEndEncountCheckOwnerLocation::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckOwnerLocation, OtherActor) == 0x000008, "Member 'EncountCheckComponent_OverlapEndEncountCheckOwnerLocation::OtherActor' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckOwnerLocation, OtherComp) == 0x000010, "Member 'EncountCheckComponent_OverlapEndEncountCheckOwnerLocation::OtherComp' has a wrong offset!");
static_assert(offsetof(EncountCheckComponent_OverlapEndEncountCheckOwnerLocation, OtherBodyIndex) == 0x000018, "Member 'EncountCheckComponent_OverlapEndEncountCheckOwnerLocation::OtherBodyIndex' has a wrong offset!");

// Function AT.EncountDisableComponent.SetDisableVolumes
// 0x0001 (0x0001 - 0x0000)
struct EncountDisableComponent_SetDisableVolumes final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncountDisableComponent_SetDisableVolumes) == 0x000001, "Wrong alignment on EncountDisableComponent_SetDisableVolumes");
static_assert(sizeof(EncountDisableComponent_SetDisableVolumes) == 0x000001, "Wrong size on EncountDisableComponent_SetDisableVolumes");
static_assert(offsetof(EncountDisableComponent_SetDisableVolumes, Disable) == 0x000000, "Member 'EncountDisableComponent_SetDisableVolumes::Disable' has a wrong offset!");

// Function AT.ATEnenmyManager.OnBattleStart
// 0x0018 (0x0018 - 0x0000)
struct ATEnenmyManager_OnBattleStart final
{
public:
	class AAT_CharacterBase*                      Chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyPartyID;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BattleType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATEnenmyManager_OnBattleStart) == 0x000008, "Wrong alignment on ATEnenmyManager_OnBattleStart");
static_assert(sizeof(ATEnenmyManager_OnBattleStart) == 0x000018, "Wrong size on ATEnenmyManager_OnBattleStart");
static_assert(offsetof(ATEnenmyManager_OnBattleStart, Chara) == 0x000000, "Member 'ATEnenmyManager_OnBattleStart::Chara' has a wrong offset!");
static_assert(offsetof(ATEnenmyManager_OnBattleStart, EnemyPartyID) == 0x000008, "Member 'ATEnenmyManager_OnBattleStart::EnemyPartyID' has a wrong offset!");
static_assert(offsetof(ATEnenmyManager_OnBattleStart, BattleType) == 0x000010, "Member 'ATEnenmyManager_OnBattleStart::BattleType' has a wrong offset!");

// Function AT.Projectile_Cpl041ESkillVanishingBall.OnCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin");
static_assert(sizeof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin) == 0x0000A8, "Wrong size on Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin, OverlappedComponent) == 0x000000, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function AT.Projectile_Cpl041ESkillVanishingBall.OnCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd) == 0x000008, "Wrong alignment on Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd");
static_assert(sizeof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd) == 0x000020, "Wrong size on Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd, OverlappedComponent) == 0x000000, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd, OtherActor) == 0x000008, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd, OtherComp) == 0x000010, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'Projectile_Cpl041ESkillVanishingBall_OnCollisionOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function AT.Projectile_Cpl041ESkillVanishingBall.OnSpawnProjectile
// 0x0010 (0x0010 - 0x0000)
struct Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile) == 0x000008, "Wrong alignment on Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile");
static_assert(sizeof(Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile) == 0x000010, "Wrong size on Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile, InProjectile) == 0x000000, "Member 'Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile::InProjectile' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile, InOwner) == 0x000008, "Member 'Projectile_Cpl041ESkillVanishingBall_OnSpawnProjectile::InOwner' has a wrong offset!");

// Function AT.EventManager.IsRequestType
// 0x0002 (0x0002 - 0x0000)
struct EventManager_IsRequestType final
{
public:
	EEVENT_TYPE                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_IsRequestType) == 0x000001, "Wrong alignment on EventManager_IsRequestType");
static_assert(sizeof(EventManager_IsRequestType) == 0x000002, "Wrong size on EventManager_IsRequestType");
static_assert(offsetof(EventManager_IsRequestType, Type) == 0x000000, "Member 'EventManager_IsRequestType::Type' has a wrong offset!");
static_assert(offsetof(EventManager_IsRequestType, ReturnValue) == 0x000001, "Member 'EventManager_IsRequestType::ReturnValue' has a wrong offset!");

// Function AT.EventManager.RequestEvent
// 0x0002 (0x0002 - 0x0000)
struct EventManager_RequestEvent final
{
public:
	EEVENT_TYPE                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_RequestEvent) == 0x000001, "Wrong alignment on EventManager_RequestEvent");
static_assert(sizeof(EventManager_RequestEvent) == 0x000002, "Wrong size on EventManager_RequestEvent");
static_assert(offsetof(EventManager_RequestEvent, Type) == 0x000000, "Member 'EventManager_RequestEvent::Type' has a wrong offset!");
static_assert(offsetof(EventManager_RequestEvent, bImmediate) == 0x000001, "Member 'EventManager_RequestEvent::bImmediate' has a wrong offset!");

// Function AT.EventManager.RequestEventF
// 0x000C (0x000C - 0x0000)
struct EventManager_RequestEventF final
{
public:
	EEVENT_TYPE                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Arg;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_RequestEventF) == 0x000004, "Wrong alignment on EventManager_RequestEventF");
static_assert(sizeof(EventManager_RequestEventF) == 0x00000C, "Wrong size on EventManager_RequestEventF");
static_assert(offsetof(EventManager_RequestEventF, Type) == 0x000000, "Member 'EventManager_RequestEventF::Type' has a wrong offset!");
static_assert(offsetof(EventManager_RequestEventF, Arg) == 0x000004, "Member 'EventManager_RequestEventF::Arg' has a wrong offset!");
static_assert(offsetof(EventManager_RequestEventF, bImmediate) == 0x000008, "Member 'EventManager_RequestEventF::bImmediate' has a wrong offset!");

// Function AT.EventManager.RequestEventI
// 0x000C (0x000C - 0x0000)
struct EventManager_RequestEventI final
{
public:
	EEVENT_TYPE                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Arg;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_RequestEventI) == 0x000004, "Wrong alignment on EventManager_RequestEventI");
static_assert(sizeof(EventManager_RequestEventI) == 0x00000C, "Wrong size on EventManager_RequestEventI");
static_assert(offsetof(EventManager_RequestEventI, Type) == 0x000000, "Member 'EventManager_RequestEventI::Type' has a wrong offset!");
static_assert(offsetof(EventManager_RequestEventI, Arg) == 0x000004, "Member 'EventManager_RequestEventI::Arg' has a wrong offset!");
static_assert(offsetof(EventManager_RequestEventI, bImmediate) == 0x000008, "Member 'EventManager_RequestEventI::bImmediate' has a wrong offset!");

// Function AT.EventManager.RequestEventParam
// 0x0110 (0x0110 - 0x0000)
struct EventManager_RequestEventParam final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_RequestEventParam) == 0x000008, "Wrong alignment on EventManager_RequestEventParam");
static_assert(sizeof(EventManager_RequestEventParam) == 0x000110, "Wrong size on EventManager_RequestEventParam");
static_assert(offsetof(EventManager_RequestEventParam, Param) == 0x000000, "Member 'EventManager_RequestEventParam::Param' has a wrong offset!");
static_assert(offsetof(EventManager_RequestEventParam, bImmediate) == 0x000108, "Member 'EventManager_RequestEventParam::bImmediate' has a wrong offset!");

// Function AT.FishingStartPoint.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct FishingStartPoint_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FishingStartPoint_OnActionChange) == 0x000008, "Wrong alignment on FishingStartPoint_OnActionChange");
static_assert(sizeof(FishingStartPoint_OnActionChange) == 0x000010, "Wrong size on FishingStartPoint_OnActionChange");
static_assert(offsetof(FishingStartPoint_OnActionChange, InCharacter) == 0x000000, "Member 'FishingStartPoint_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(FishingStartPoint_OnActionChange, InActionIdPrev) == 0x000008, "Member 'FishingStartPoint_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(FishingStartPoint_OnActionChange, InActionIdNext) == 0x00000C, "Member 'FishingStartPoint_OnActionChange::InActionIdNext' has a wrong offset!");

// Function AT.FlyingDragon_Component.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct FlyingDragon_Component_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlyingDragon_Component_OnComponentHit) == 0x000008, "Wrong alignment on FlyingDragon_Component_OnComponentHit");
static_assert(sizeof(FlyingDragon_Component_OnComponentHit) == 0x0000B0, "Wrong size on FlyingDragon_Component_OnComponentHit");
static_assert(offsetof(FlyingDragon_Component_OnComponentHit, HitComponent) == 0x000000, "Member 'FlyingDragon_Component_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(FlyingDragon_Component_OnComponentHit, OtherActor) == 0x000008, "Member 'FlyingDragon_Component_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(FlyingDragon_Component_OnComponentHit, OtherComp) == 0x000010, "Member 'FlyingDragon_Component_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(FlyingDragon_Component_OnComponentHit, NormalImpulse) == 0x000018, "Member 'FlyingDragon_Component_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(FlyingDragon_Component_OnComponentHit, Hit) == 0x000028, "Member 'FlyingDragon_Component_OnComponentHit::Hit' has a wrong offset!");

// Function AT.FutureVisionVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct FutureVisionVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FutureVisionVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on FutureVisionVolume_OnOverlapBegin");
static_assert(sizeof(FutureVisionVolume_OnOverlapBegin) == 0x000010, "Wrong size on FutureVisionVolume_OnOverlapBegin");
static_assert(offsetof(FutureVisionVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'FutureVisionVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(FutureVisionVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'FutureVisionVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.FutureVisionVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct FutureVisionVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FutureVisionVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on FutureVisionVolume_OnOverlapEnd");
static_assert(sizeof(FutureVisionVolume_OnOverlapEnd) == 0x000010, "Wrong size on FutureVisionVolume_OnOverlapEnd");
static_assert(offsetof(FutureVisionVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'FutureVisionVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(FutureVisionVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'FutureVisionVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.GravitySphereVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct GravitySphereVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GravitySphereVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on GravitySphereVolume_OnOverlapBegin");
static_assert(sizeof(GravitySphereVolume_OnOverlapBegin) == 0x000010, "Wrong size on GravitySphereVolume_OnOverlapBegin");
static_assert(offsetof(GravitySphereVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'GravitySphereVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(GravitySphereVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'GravitySphereVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.GravitySphereVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct GravitySphereVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GravitySphereVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on GravitySphereVolume_OnOverlapEnd");
static_assert(sizeof(GravitySphereVolume_OnOverlapEnd) == 0x000010, "Wrong size on GravitySphereVolume_OnOverlapEnd");
static_assert(offsetof(GravitySphereVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'GravitySphereVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(GravitySphereVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'GravitySphereVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.HudManager.InvisibleHud
// 0x0002 (0x0002 - 0x0000)
struct HudManager_InvisibleHud final
{
public:
	E_HUD_TYPE                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudVisibleCategory                           InCategory;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudManager_InvisibleHud) == 0x000001, "Wrong alignment on HudManager_InvisibleHud");
static_assert(sizeof(HudManager_InvisibleHud) == 0x000002, "Wrong size on HudManager_InvisibleHud");
static_assert(offsetof(HudManager_InvisibleHud, Type) == 0x000000, "Member 'HudManager_InvisibleHud::Type' has a wrong offset!");
static_assert(offsetof(HudManager_InvisibleHud, InCategory) == 0x000001, "Member 'HudManager_InvisibleHud::InCategory' has a wrong offset!");

// Function AT.HudManager.IsVisible
// 0x0002 (0x0002 - 0x0000)
struct HudManager_IsVisible final
{
public:
	E_HUD_TYPE                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudManager_IsVisible) == 0x000001, "Wrong alignment on HudManager_IsVisible");
static_assert(sizeof(HudManager_IsVisible) == 0x000002, "Wrong size on HudManager_IsVisible");
static_assert(offsetof(HudManager_IsVisible, Type) == 0x000000, "Member 'HudManager_IsVisible::Type' has a wrong offset!");
static_assert(offsetof(HudManager_IsVisible, ReturnValue) == 0x000001, "Member 'HudManager_IsVisible::ReturnValue' has a wrong offset!");

// Function AT.HudManager.OnlyVisibleHud
// 0x0002 (0x0002 - 0x0000)
struct HudManager_OnlyVisibleHud final
{
public:
	E_HUD_TYPE                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudVisibleCategory                           InCategory;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudManager_OnlyVisibleHud) == 0x000001, "Wrong alignment on HudManager_OnlyVisibleHud");
static_assert(sizeof(HudManager_OnlyVisibleHud) == 0x000002, "Wrong size on HudManager_OnlyVisibleHud");
static_assert(offsetof(HudManager_OnlyVisibleHud, Type) == 0x000000, "Member 'HudManager_OnlyVisibleHud::Type' has a wrong offset!");
static_assert(offsetof(HudManager_OnlyVisibleHud, InCategory) == 0x000001, "Member 'HudManager_OnlyVisibleHud::InCategory' has a wrong offset!");

// Function AT.HudManager.SetHudVisible
// 0x0002 (0x0002 - 0x0000)
struct HudManager_SetHudVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	E_HUD_TYPE                                    Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudManager_SetHudVisible) == 0x000001, "Wrong alignment on HudManager_SetHudVisible");
static_assert(sizeof(HudManager_SetHudVisible) == 0x000002, "Wrong size on HudManager_SetHudVisible");
static_assert(offsetof(HudManager_SetHudVisible, Visible) == 0x000000, "Member 'HudManager_SetHudVisible::Visible' has a wrong offset!");
static_assert(offsetof(HudManager_SetHudVisible, Type) == 0x000001, "Member 'HudManager_SetHudVisible::Type' has a wrong offset!");

// Function AT.HudManager.VisibleHud
// 0x0002 (0x0002 - 0x0000)
struct HudManager_VisibleHud final
{
public:
	E_HUD_TYPE                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudVisibleCategory                           InCategory;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudManager_VisibleHud) == 0x000001, "Wrong alignment on HudManager_VisibleHud");
static_assert(sizeof(HudManager_VisibleHud) == 0x000002, "Wrong size on HudManager_VisibleHud");
static_assert(offsetof(HudManager_VisibleHud, Type) == 0x000000, "Member 'HudManager_VisibleHud::Type' has a wrong offset!");
static_assert(offsetof(HudManager_VisibleHud, InCategory) == 0x000001, "Member 'HudManager_VisibleHud::InCategory' has a wrong offset!");

// Function AT.ItemInventoryMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct ItemInventoryMenu_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInventoryMenu_MouseClickDecide) == 0x000008, "Wrong alignment on ItemInventoryMenu_MouseClickDecide");
static_assert(sizeof(ItemInventoryMenu_MouseClickDecide) == 0x0000A8, "Wrong size on ItemInventoryMenu_MouseClickDecide");
static_assert(offsetof(ItemInventoryMenu_MouseClickDecide, InGeometry) == 0x000000, "Member 'ItemInventoryMenu_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(ItemInventoryMenu_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'ItemInventoryMenu_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.SaveBreakablePoint.OnBroken
// 0x0001 (0x0001 - 0x0000)
struct SaveBreakablePoint_OnBroken final
{
public:
	EBrokenReason                                 Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveBreakablePoint_OnBroken) == 0x000001, "Wrong alignment on SaveBreakablePoint_OnBroken");
static_assert(sizeof(SaveBreakablePoint_OnBroken) == 0x000001, "Wrong size on SaveBreakablePoint_OnBroken");
static_assert(offsetof(SaveBreakablePoint_OnBroken, Reason) == 0x000000, "Member 'SaveBreakablePoint_OnBroken::Reason' has a wrong offset!");

// Function AT.LevelLimitSaveBreakablePoint.OnBeginOverlapMessageTrigger
// 0x00A8 (0x00A8 - 0x0000)
struct LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger) == 0x000008, "Wrong alignment on LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger");
static_assert(sizeof(LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger) == 0x0000A8, "Wrong size on LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger, OverlappedComponent) == 0x000000, "Member 'LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger, OtherActor) == 0x000008, "Member 'LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger::OtherActor' has a wrong offset!");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger, OtherComp) == 0x000010, "Member 'LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger::OtherComp' has a wrong offset!");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger, OtherBodyIndex) == 0x000018, "Member 'LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger, bFromSweep) == 0x00001C, "Member 'LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger::bFromSweep' has a wrong offset!");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger, SweepResult) == 0x000020, "Member 'LevelLimitSaveBreakablePoint_OnBeginOverlapMessageTrigger::SweepResult' has a wrong offset!");

// Function AT.LevelLimitSaveBreakablePoint.OnCloseMessageWindow
// 0x0004 (0x0004 - 0x0000)
struct LevelLimitSaveBreakablePoint_OnCloseMessageWindow final
{
public:
	int32                                         SELECT;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLimitSaveBreakablePoint_OnCloseMessageWindow) == 0x000004, "Wrong alignment on LevelLimitSaveBreakablePoint_OnCloseMessageWindow");
static_assert(sizeof(LevelLimitSaveBreakablePoint_OnCloseMessageWindow) == 0x000004, "Wrong size on LevelLimitSaveBreakablePoint_OnCloseMessageWindow");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnCloseMessageWindow, SELECT) == 0x000000, "Member 'LevelLimitSaveBreakablePoint_OnCloseMessageWindow::SELECT' has a wrong offset!");

// Function AT.LevelLimitSaveBreakablePoint.OnCloseWindow
// 0x0004 (0x0004 - 0x0000)
struct LevelLimitSaveBreakablePoint_OnCloseWindow final
{
public:
	int32                                         SELECT;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLimitSaveBreakablePoint_OnCloseWindow) == 0x000004, "Wrong alignment on LevelLimitSaveBreakablePoint_OnCloseWindow");
static_assert(sizeof(LevelLimitSaveBreakablePoint_OnCloseWindow) == 0x000004, "Wrong size on LevelLimitSaveBreakablePoint_OnCloseWindow");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnCloseWindow, SELECT) == 0x000000, "Member 'LevelLimitSaveBreakablePoint_OnCloseWindow::SELECT' has a wrong offset!");

// Function AT.LevelLimitSaveBreakablePoint.OnSearchEnd
// 0x0108 (0x0108 - 0x0000)
struct LevelLimitSaveBreakablePoint_OnSearchEnd final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLimitSaveBreakablePoint_OnSearchEnd) == 0x000008, "Wrong alignment on LevelLimitSaveBreakablePoint_OnSearchEnd");
static_assert(sizeof(LevelLimitSaveBreakablePoint_OnSearchEnd) == 0x000108, "Wrong size on LevelLimitSaveBreakablePoint_OnSearchEnd");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnSearchEnd, Param) == 0x000000, "Member 'LevelLimitSaveBreakablePoint_OnSearchEnd::Param' has a wrong offset!");

// Function AT.LevelLimitSaveBreakablePoint.OnSearchStart
// 0x0108 (0x0108 - 0x0000)
struct LevelLimitSaveBreakablePoint_OnSearchStart final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLimitSaveBreakablePoint_OnSearchStart) == 0x000008, "Wrong alignment on LevelLimitSaveBreakablePoint_OnSearchStart");
static_assert(sizeof(LevelLimitSaveBreakablePoint_OnSearchStart) == 0x000108, "Wrong size on LevelLimitSaveBreakablePoint_OnSearchStart");
static_assert(offsetof(LevelLimitSaveBreakablePoint_OnSearchStart, Param) == 0x000000, "Member 'LevelLimitSaveBreakablePoint_OnSearchStart::Param' has a wrong offset!");

// Function AT.LoadMenu.GetUIWidget
// 0x0008 (0x0008 - 0x0000)
struct LoadMenu_GetUIWidget final
{
public:
	class UAT_UIStartSaveLoad*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadMenu_GetUIWidget) == 0x000008, "Wrong alignment on LoadMenu_GetUIWidget");
static_assert(sizeof(LoadMenu_GetUIWidget) == 0x000008, "Wrong size on LoadMenu_GetUIWidget");
static_assert(offsetof(LoadMenu_GetUIWidget, ReturnValue) == 0x000000, "Member 'LoadMenu_GetUIWidget::ReturnValue' has a wrong offset!");

// Function AT.LoadMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct LoadMenu_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadMenu_MouseClickDecide) == 0x000008, "Wrong alignment on LoadMenu_MouseClickDecide");
static_assert(sizeof(LoadMenu_MouseClickDecide) == 0x0000A8, "Wrong size on LoadMenu_MouseClickDecide");
static_assert(offsetof(LoadMenu_MouseClickDecide, InGeometry) == 0x000000, "Member 'LoadMenu_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(LoadMenu_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'LoadMenu_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.LoadMenu.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct LoadMenu_MouseWheel final
{
public:
	float                                         InDirection;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadMenu_MouseWheel) == 0x000004, "Wrong alignment on LoadMenu_MouseWheel");
static_assert(sizeof(LoadMenu_MouseWheel) == 0x000004, "Wrong size on LoadMenu_MouseWheel");
static_assert(offsetof(LoadMenu_MouseWheel, InDirection) == 0x000000, "Member 'LoadMenu_MouseWheel::InDirection' has a wrong offset!");

// Function AT.LoadMenuComponent.GetMenu
// 0x0008 (0x0008 - 0x0000)
struct LoadMenuComponent_GetMenu final
{
public:
	class ULoadMenu*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadMenuComponent_GetMenu) == 0x000008, "Wrong alignment on LoadMenuComponent_GetMenu");
static_assert(sizeof(LoadMenuComponent_GetMenu) == 0x000008, "Wrong size on LoadMenuComponent_GetMenu");
static_assert(offsetof(LoadMenuComponent_GetMenu, ReturnValue) == 0x000000, "Member 'LoadMenuComponent_GetMenu::ReturnValue' has a wrong offset!");

// Function AT.LoadMenuComponent.IsLoadData
// 0x0001 (0x0001 - 0x0000)
struct LoadMenuComponent_IsLoadData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadMenuComponent_IsLoadData) == 0x000001, "Wrong alignment on LoadMenuComponent_IsLoadData");
static_assert(sizeof(LoadMenuComponent_IsLoadData) == 0x000001, "Wrong size on LoadMenuComponent_IsLoadData");
static_assert(offsetof(LoadMenuComponent_IsLoadData, ReturnValue) == 0x000000, "Member 'LoadMenuComponent_IsLoadData::ReturnValue' has a wrong offset!");

// Function AT.Projectile_Cpl064SkillBurstShoot.OnSpawnProjectile
// 0x0010 (0x0010 - 0x0000)
struct Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile) == 0x000008, "Wrong alignment on Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile");
static_assert(sizeof(Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile) == 0x000010, "Wrong size on Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile");
static_assert(offsetof(Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile, InProjectile) == 0x000000, "Member 'Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile::InProjectile' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile, InOwner) == 0x000008, "Member 'Projectile_Cpl064SkillBurstShoot_OnSpawnProjectile::InOwner' has a wrong offset!");

// Function AT.LookAtComponent.GetDistanceLookAt
// 0x0001 (0x0001 - 0x0000)
struct LookAtComponent_GetDistanceLookAt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LookAtComponent_GetDistanceLookAt) == 0x000001, "Wrong alignment on LookAtComponent_GetDistanceLookAt");
static_assert(sizeof(LookAtComponent_GetDistanceLookAt) == 0x000001, "Wrong size on LookAtComponent_GetDistanceLookAt");
static_assert(offsetof(LookAtComponent_GetDistanceLookAt, ReturnValue) == 0x000000, "Member 'LookAtComponent_GetDistanceLookAt::ReturnValue' has a wrong offset!");

// Function AT.LookAtComponent.SetDefaultLookAt
// 0x0001 (0x0001 - 0x0000)
struct LookAtComponent_SetDefaultLookAt final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LookAtComponent_SetDefaultLookAt) == 0x000001, "Wrong alignment on LookAtComponent_SetDefaultLookAt");
static_assert(sizeof(LookAtComponent_SetDefaultLookAt) == 0x000001, "Wrong size on LookAtComponent_SetDefaultLookAt");
static_assert(offsetof(LookAtComponent_SetDefaultLookAt, Enable) == 0x000000, "Member 'LookAtComponent_SetDefaultLookAt::Enable' has a wrong offset!");

// Function AT.MenuManager.OnPlayerChange
// 0x0008 (0x0008 - 0x0000)
struct MenuManager_OnPlayerChange final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuManager_OnPlayerChange) == 0x000008, "Wrong alignment on MenuManager_OnPlayerChange");
static_assert(sizeof(MenuManager_OnPlayerChange) == 0x000008, "Wrong size on MenuManager_OnPlayerChange");
static_assert(offsetof(MenuManager_OnPlayerChange, Character) == 0x000000, "Member 'MenuManager_OnPlayerChange::Character' has a wrong offset!");

// Function AT.ProceduralManager.OnLevelHidden
// 0x0008 (0x0008 - 0x0000)
struct ProceduralManager_OnLevelHidden final
{
public:
	class ULevelStreaming*                        LevelStreaming;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralManager_OnLevelHidden) == 0x000008, "Wrong alignment on ProceduralManager_OnLevelHidden");
static_assert(sizeof(ProceduralManager_OnLevelHidden) == 0x000008, "Wrong size on ProceduralManager_OnLevelHidden");
static_assert(offsetof(ProceduralManager_OnLevelHidden, LevelStreaming) == 0x000000, "Member 'ProceduralManager_OnLevelHidden::LevelStreaming' has a wrong offset!");

// Function AT.ProceduralManager.OnLevelShown
// 0x0008 (0x0008 - 0x0000)
struct ProceduralManager_OnLevelShown final
{
public:
	class ULevelStreaming*                        LevelStreaming;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralManager_OnLevelShown) == 0x000008, "Wrong alignment on ProceduralManager_OnLevelShown");
static_assert(sizeof(ProceduralManager_OnLevelShown) == 0x000008, "Wrong size on ProceduralManager_OnLevelShown");
static_assert(offsetof(ProceduralManager_OnLevelShown, LevelStreaming) == 0x000000, "Member 'ProceduralManager_OnLevelShown::LevelStreaming' has a wrong offset!");

// Function AT.ProceduralManager.QueryLevelLoaded
// 0x0020 (0x0020 - 0x0000)
struct ProceduralManager_QueryLevelLoaded final
{
public:
	int32                                         IMapChipX;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IMapChipY;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                 Level;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             LevelOffset;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralManager_QueryLevelLoaded) == 0x000008, "Wrong alignment on ProceduralManager_QueryLevelLoaded");
static_assert(sizeof(ProceduralManager_QueryLevelLoaded) == 0x000020, "Wrong size on ProceduralManager_QueryLevelLoaded");
static_assert(offsetof(ProceduralManager_QueryLevelLoaded, IMapChipX) == 0x000000, "Member 'ProceduralManager_QueryLevelLoaded::IMapChipX' has a wrong offset!");
static_assert(offsetof(ProceduralManager_QueryLevelLoaded, IMapChipY) == 0x000004, "Member 'ProceduralManager_QueryLevelLoaded::IMapChipY' has a wrong offset!");
static_assert(offsetof(ProceduralManager_QueryLevelLoaded, Level) == 0x000008, "Member 'ProceduralManager_QueryLevelLoaded::Level' has a wrong offset!");
static_assert(offsetof(ProceduralManager_QueryLevelLoaded, LevelOffset) == 0x000010, "Member 'ProceduralManager_QueryLevelLoaded::LevelOffset' has a wrong offset!");

// Function AT.ProceduralManager.QueryLevelUnloaded
// 0x0008 (0x0008 - 0x0000)
struct ProceduralManager_QueryLevelUnloaded final
{
public:
	int32                                         IMapChipX;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IMapChipY;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralManager_QueryLevelUnloaded) == 0x000004, "Wrong alignment on ProceduralManager_QueryLevelUnloaded");
static_assert(sizeof(ProceduralManager_QueryLevelUnloaded) == 0x000008, "Wrong size on ProceduralManager_QueryLevelUnloaded");
static_assert(offsetof(ProceduralManager_QueryLevelUnloaded, IMapChipX) == 0x000000, "Member 'ProceduralManager_QueryLevelUnloaded::IMapChipX' has a wrong offset!");
static_assert(offsetof(ProceduralManager_QueryLevelUnloaded, IMapChipY) == 0x000004, "Member 'ProceduralManager_QueryLevelUnloaded::IMapChipY' has a wrong offset!");

// Function AT.NoneGeneralCrossTalkVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct NoneGeneralCrossTalkVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoneGeneralCrossTalkVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on NoneGeneralCrossTalkVolume_OnOverlapBegin");
static_assert(sizeof(NoneGeneralCrossTalkVolume_OnOverlapBegin) == 0x000010, "Wrong size on NoneGeneralCrossTalkVolume_OnOverlapBegin");
static_assert(offsetof(NoneGeneralCrossTalkVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'NoneGeneralCrossTalkVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(NoneGeneralCrossTalkVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'NoneGeneralCrossTalkVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.NoneGeneralCrossTalkVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct NoneGeneralCrossTalkVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoneGeneralCrossTalkVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on NoneGeneralCrossTalkVolume_OnOverlapEnd");
static_assert(sizeof(NoneGeneralCrossTalkVolume_OnOverlapEnd) == 0x000010, "Wrong size on NoneGeneralCrossTalkVolume_OnOverlapEnd");
static_assert(offsetof(NoneGeneralCrossTalkVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'NoneGeneralCrossTalkVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(NoneGeneralCrossTalkVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'NoneGeneralCrossTalkVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.ProgressManager.GetNextExtendQuest
// 0x0008 (0x0008 - 0x0000)
struct ProgressManager_GetNextExtendQuest final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressManager_GetNextExtendQuest) == 0x000004, "Wrong alignment on ProgressManager_GetNextExtendQuest");
static_assert(sizeof(ProgressManager_GetNextExtendQuest) == 0x000008, "Wrong size on ProgressManager_GetNextExtendQuest");
static_assert(offsetof(ProgressManager_GetNextExtendQuest, ReturnValue) == 0x000000, "Member 'ProgressManager_GetNextExtendQuest::ReturnValue' has a wrong offset!");

// Function AT.ProgressManager.GetNextMainQuest
// 0x0008 (0x0008 - 0x0000)
struct ProgressManager_GetNextMainQuest final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressManager_GetNextMainQuest) == 0x000004, "Wrong alignment on ProgressManager_GetNextMainQuest");
static_assert(sizeof(ProgressManager_GetNextMainQuest) == 0x000008, "Wrong size on ProgressManager_GetNextMainQuest");
static_assert(offsetof(ProgressManager_GetNextMainQuest, ReturnValue) == 0x000000, "Member 'ProgressManager_GetNextMainQuest::ReturnValue' has a wrong offset!");

// Function AT.ProgressManager.GetPrevExtendQuest
// 0x0008 (0x0008 - 0x0000)
struct ProgressManager_GetPrevExtendQuest final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressManager_GetPrevExtendQuest) == 0x000004, "Wrong alignment on ProgressManager_GetPrevExtendQuest");
static_assert(sizeof(ProgressManager_GetPrevExtendQuest) == 0x000008, "Wrong size on ProgressManager_GetPrevExtendQuest");
static_assert(offsetof(ProgressManager_GetPrevExtendQuest, ReturnValue) == 0x000000, "Member 'ProgressManager_GetPrevExtendQuest::ReturnValue' has a wrong offset!");

// Function AT.ProgressManager.GetPrevMainQuest
// 0x0008 (0x0008 - 0x0000)
struct ProgressManager_GetPrevMainQuest final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressManager_GetPrevMainQuest) == 0x000004, "Wrong alignment on ProgressManager_GetPrevMainQuest");
static_assert(sizeof(ProgressManager_GetPrevMainQuest) == 0x000008, "Wrong size on ProgressManager_GetPrevMainQuest");
static_assert(offsetof(ProgressManager_GetPrevMainQuest, ReturnValue) == 0x000000, "Member 'ProgressManager_GetPrevMainQuest::ReturnValue' has a wrong offset!");

// Function AT.NpcAction_Stagger.OnMontageBlendingOut_Call
// 0x0010 (0x0010 - 0x0000)
struct NpcAction_Stagger_OnMontageBlendingOut_Call final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAction_Stagger_OnMontageBlendingOut_Call) == 0x000008, "Wrong alignment on NpcAction_Stagger_OnMontageBlendingOut_Call");
static_assert(sizeof(NpcAction_Stagger_OnMontageBlendingOut_Call) == 0x000010, "Wrong size on NpcAction_Stagger_OnMontageBlendingOut_Call");
static_assert(offsetof(NpcAction_Stagger_OnMontageBlendingOut_Call, PMontage) == 0x000000, "Member 'NpcAction_Stagger_OnMontageBlendingOut_Call::PMontage' has a wrong offset!");
static_assert(offsetof(NpcAction_Stagger_OnMontageBlendingOut_Call, bInterrupted) == 0x000008, "Member 'NpcAction_Stagger_OnMontageBlendingOut_Call::bInterrupted' has a wrong offset!");

// Function AT.NpcAction_Stagger.OnNpcGeneralDelegateMap_MoveEnd
// 0x0008 (0x0008 - 0x0000)
struct NpcAction_Stagger_OnNpcGeneralDelegateMap_MoveEnd final
{
public:
	class UNpcAction*                             PAction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAction_Stagger_OnNpcGeneralDelegateMap_MoveEnd) == 0x000008, "Wrong alignment on NpcAction_Stagger_OnNpcGeneralDelegateMap_MoveEnd");
static_assert(sizeof(NpcAction_Stagger_OnNpcGeneralDelegateMap_MoveEnd) == 0x000008, "Wrong size on NpcAction_Stagger_OnNpcGeneralDelegateMap_MoveEnd");
static_assert(offsetof(NpcAction_Stagger_OnNpcGeneralDelegateMap_MoveEnd, PAction) == 0x000000, "Member 'NpcAction_Stagger_OnNpcGeneralDelegateMap_MoveEnd::PAction' has a wrong offset!");

// Function AT.NpcAction_Surprise.OnMontageBlendingOut_Call
// 0x0010 (0x0010 - 0x0000)
struct NpcAction_Surprise_OnMontageBlendingOut_Call final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAction_Surprise_OnMontageBlendingOut_Call) == 0x000008, "Wrong alignment on NpcAction_Surprise_OnMontageBlendingOut_Call");
static_assert(sizeof(NpcAction_Surprise_OnMontageBlendingOut_Call) == 0x000010, "Wrong size on NpcAction_Surprise_OnMontageBlendingOut_Call");
static_assert(offsetof(NpcAction_Surprise_OnMontageBlendingOut_Call, PMontage) == 0x000000, "Member 'NpcAction_Surprise_OnMontageBlendingOut_Call::PMontage' has a wrong offset!");
static_assert(offsetof(NpcAction_Surprise_OnMontageBlendingOut_Call, bInterrupted) == 0x000008, "Member 'NpcAction_Surprise_OnMontageBlendingOut_Call::bInterrupted' has a wrong offset!");

// Function AT.NpcAnimInstance.CheckLoopEndAndResetAnimation
// 0x0003 (0x0003 - 0x0000)
struct NpcAnimInstance_CheckLoopEndAndResetAnimation final
{
public:
	EATNpcLoopAnimType                            CurrentLoopAnim;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATNpcLoopAnimType                            NextLoopAnim;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_CheckLoopEndAndResetAnimation) == 0x000001, "Wrong alignment on NpcAnimInstance_CheckLoopEndAndResetAnimation");
static_assert(sizeof(NpcAnimInstance_CheckLoopEndAndResetAnimation) == 0x000003, "Wrong size on NpcAnimInstance_CheckLoopEndAndResetAnimation");
static_assert(offsetof(NpcAnimInstance_CheckLoopEndAndResetAnimation, CurrentLoopAnim) == 0x000000, "Member 'NpcAnimInstance_CheckLoopEndAndResetAnimation::CurrentLoopAnim' has a wrong offset!");
static_assert(offsetof(NpcAnimInstance_CheckLoopEndAndResetAnimation, NextLoopAnim) == 0x000001, "Member 'NpcAnimInstance_CheckLoopEndAndResetAnimation::NextLoopAnim' has a wrong offset!");
static_assert(offsetof(NpcAnimInstance_CheckLoopEndAndResetAnimation, ReturnValue) == 0x000002, "Member 'NpcAnimInstance_CheckLoopEndAndResetAnimation::ReturnValue' has a wrong offset!");

// Function AT.NpcAnimInstance.GetNpcActionComponent
// 0x0008 (0x0008 - 0x0000)
struct NpcAnimInstance_GetNpcActionComponent final
{
public:
	class UNpcActionComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_GetNpcActionComponent) == 0x000008, "Wrong alignment on NpcAnimInstance_GetNpcActionComponent");
static_assert(sizeof(NpcAnimInstance_GetNpcActionComponent) == 0x000008, "Wrong size on NpcAnimInstance_GetNpcActionComponent");
static_assert(offsetof(NpcAnimInstance_GetNpcActionComponent, ReturnValue) == 0x000000, "Member 'NpcAnimInstance_GetNpcActionComponent::ReturnValue' has a wrong offset!");

// Function AT.NpcAnimInstance.GetOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct NpcAnimInstance_GetOwnerActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_GetOwnerActor) == 0x000008, "Wrong alignment on NpcAnimInstance_GetOwnerActor");
static_assert(sizeof(NpcAnimInstance_GetOwnerActor) == 0x000008, "Wrong size on NpcAnimInstance_GetOwnerActor");
static_assert(offsetof(NpcAnimInstance_GetOwnerActor, ReturnValue) == 0x000000, "Member 'NpcAnimInstance_GetOwnerActor::ReturnValue' has a wrong offset!");

// Function AT.NpcAnimInstance.IsApplyFootIK
// 0x0001 (0x0001 - 0x0000)
struct NpcAnimInstance_IsApplyFootIK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_IsApplyFootIK) == 0x000001, "Wrong alignment on NpcAnimInstance_IsApplyFootIK");
static_assert(sizeof(NpcAnimInstance_IsApplyFootIK) == 0x000001, "Wrong size on NpcAnimInstance_IsApplyFootIK");
static_assert(offsetof(NpcAnimInstance_IsApplyFootIK, ReturnValue) == 0x000000, "Member 'NpcAnimInstance_IsApplyFootIK::ReturnValue' has a wrong offset!");

// Function AT.NpcAnimInstance.UpdateLookAngle
// 0x0004 (0x0004 - 0x0000)
struct NpcAnimInstance_UpdateLookAngle final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_UpdateLookAngle) == 0x000004, "Wrong alignment on NpcAnimInstance_UpdateLookAngle");
static_assert(sizeof(NpcAnimInstance_UpdateLookAngle) == 0x000004, "Wrong size on NpcAnimInstance_UpdateLookAngle");
static_assert(offsetof(NpcAnimInstance_UpdateLookAngle, DeltaSeconds) == 0x000000, "Member 'NpcAnimInstance_UpdateLookAngle::DeltaSeconds' has a wrong offset!");

// Function AT.NpcAnimInstance.GetLeftFootEffectorLocation
// 0x000C (0x000C - 0x0000)
struct NpcAnimInstance_GetLeftFootEffectorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_GetLeftFootEffectorLocation) == 0x000004, "Wrong alignment on NpcAnimInstance_GetLeftFootEffectorLocation");
static_assert(sizeof(NpcAnimInstance_GetLeftFootEffectorLocation) == 0x00000C, "Wrong size on NpcAnimInstance_GetLeftFootEffectorLocation");
static_assert(offsetof(NpcAnimInstance_GetLeftFootEffectorLocation, ReturnValue) == 0x000000, "Member 'NpcAnimInstance_GetLeftFootEffectorLocation::ReturnValue' has a wrong offset!");

// Function AT.NpcAnimInstance.GetLeftJointTarget
// 0x000C (0x000C - 0x0000)
struct NpcAnimInstance_GetLeftJointTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_GetLeftJointTarget) == 0x000004, "Wrong alignment on NpcAnimInstance_GetLeftJointTarget");
static_assert(sizeof(NpcAnimInstance_GetLeftJointTarget) == 0x00000C, "Wrong size on NpcAnimInstance_GetLeftJointTarget");
static_assert(offsetof(NpcAnimInstance_GetLeftJointTarget, ReturnValue) == 0x000000, "Member 'NpcAnimInstance_GetLeftJointTarget::ReturnValue' has a wrong offset!");

// Function AT.NpcAnimInstance.GetLoopCountRemain
// 0x0004 (0x0004 - 0x0000)
struct NpcAnimInstance_GetLoopCountRemain final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_GetLoopCountRemain) == 0x000004, "Wrong alignment on NpcAnimInstance_GetLoopCountRemain");
static_assert(sizeof(NpcAnimInstance_GetLoopCountRemain) == 0x000004, "Wrong size on NpcAnimInstance_GetLoopCountRemain");
static_assert(offsetof(NpcAnimInstance_GetLoopCountRemain, ReturnValue) == 0x000000, "Member 'NpcAnimInstance_GetLoopCountRemain::ReturnValue' has a wrong offset!");

// Function AT.NpcAnimInstance.GetRightFootEffectorLocation
// 0x000C (0x000C - 0x0000)
struct NpcAnimInstance_GetRightFootEffectorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_GetRightFootEffectorLocation) == 0x000004, "Wrong alignment on NpcAnimInstance_GetRightFootEffectorLocation");
static_assert(sizeof(NpcAnimInstance_GetRightFootEffectorLocation) == 0x00000C, "Wrong size on NpcAnimInstance_GetRightFootEffectorLocation");
static_assert(offsetof(NpcAnimInstance_GetRightFootEffectorLocation, ReturnValue) == 0x000000, "Member 'NpcAnimInstance_GetRightFootEffectorLocation::ReturnValue' has a wrong offset!");

// Function AT.NpcAnimInstance.GetRightJointTarget
// 0x000C (0x000C - 0x0000)
struct NpcAnimInstance_GetRightJointTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimInstance_GetRightJointTarget) == 0x000004, "Wrong alignment on NpcAnimInstance_GetRightJointTarget");
static_assert(sizeof(NpcAnimInstance_GetRightJointTarget) == 0x00000C, "Wrong size on NpcAnimInstance_GetRightJointTarget");
static_assert(offsetof(NpcAnimInstance_GetRightJointTarget, ReturnValue) == 0x000000, "Member 'NpcAnimInstance_GetRightJointTarget::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetAcceptanceHeight
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetAcceptanceHeight final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetAcceptanceHeight) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetAcceptanceHeight");
static_assert(sizeof(NpcAutoMoveComponent_SetAcceptanceHeight) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetAcceptanceHeight");
static_assert(offsetof(NpcAutoMoveComponent_SetAcceptanceHeight, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetAcceptanceHeight::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetAcceptanceHeight, Length) == 0x000008, "Member 'NpcAutoMoveComponent_SetAcceptanceHeight::Length' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetAutoMove
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetAutoMove final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetAutoMove) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetAutoMove");
static_assert(sizeof(NpcAutoMoveComponent_SetAutoMove) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetAutoMove");
static_assert(offsetof(NpcAutoMoveComponent_SetAutoMove, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetAutoMove::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetAutoMove, Flag) == 0x000008, "Member 'NpcAutoMoveComponent_SetAutoMove::Flag' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetMaxPlayAnim
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetMaxPlayAnim final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetMaxPlayAnim) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetMaxPlayAnim");
static_assert(sizeof(NpcAutoMoveComponent_SetMaxPlayAnim) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetMaxPlayAnim");
static_assert(offsetof(NpcAutoMoveComponent_SetMaxPlayAnim, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetMaxPlayAnim::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetMaxPlayAnim, Length) == 0x000008, "Member 'NpcAutoMoveComponent_SetMaxPlayAnim::Length' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetMoveArea
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetMoveArea final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetMoveArea) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetMoveArea");
static_assert(sizeof(NpcAutoMoveComponent_SetMoveArea) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetMoveArea");
static_assert(offsetof(NpcAutoMoveComponent_SetMoveArea, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetMoveArea::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetMoveArea, Length) == 0x000008, "Member 'NpcAutoMoveComponent_SetMoveArea::Length' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetStartLocation
// 0x0018 (0x0018 - 0x0000)
struct NpcAutoMoveComponent_SetStartLocation final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetStartLocation) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetStartLocation");
static_assert(sizeof(NpcAutoMoveComponent_SetStartLocation) == 0x000018, "Wrong size on NpcAutoMoveComponent_SetStartLocation");
static_assert(offsetof(NpcAutoMoveComponent_SetStartLocation, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetStartLocation::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetStartLocation, Location) == 0x000008, "Member 'NpcAutoMoveComponent_SetStartLocation::Location' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetStopGoal
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetStopGoal final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetStopGoal) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetStopGoal");
static_assert(sizeof(NpcAutoMoveComponent_SetStopGoal) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetStopGoal");
static_assert(offsetof(NpcAutoMoveComponent_SetStopGoal, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetStopGoal::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetStopGoal, Flag) == 0x000008, "Member 'NpcAutoMoveComponent_SetStopGoal::Flag' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetStopMoveAreaLength
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetStopMoveAreaLength final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetStopMoveAreaLength) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetStopMoveAreaLength");
static_assert(sizeof(NpcAutoMoveComponent_SetStopMoveAreaLength) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetStopMoveAreaLength");
static_assert(offsetof(NpcAutoMoveComponent_SetStopMoveAreaLength, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetStopMoveAreaLength::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetStopMoveAreaLength, Length) == 0x000008, "Member 'NpcAutoMoveComponent_SetStopMoveAreaLength::Length' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetUseRayCast
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetUseRayCast final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetUseRayCast) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetUseRayCast");
static_assert(sizeof(NpcAutoMoveComponent_SetUseRayCast) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetUseRayCast");
static_assert(offsetof(NpcAutoMoveComponent_SetUseRayCast, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetUseRayCast::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetUseRayCast, Flag) == 0x000008, "Member 'NpcAutoMoveComponent_SetUseRayCast::Flag' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetWaitFrequency
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetWaitFrequency final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetWaitFrequency) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetWaitFrequency");
static_assert(sizeof(NpcAutoMoveComponent_SetWaitFrequency) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetWaitFrequency");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitFrequency, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetWaitFrequency::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitFrequency, Length) == 0x000008, "Member 'NpcAutoMoveComponent_SetWaitFrequency::Length' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetWaitPause
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetWaitPause final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAutoMoveComponent_SetWaitPause) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetWaitPause");
static_assert(sizeof(NpcAutoMoveComponent_SetWaitPause) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetWaitPause");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitPause, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetWaitPause::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitPause, Flag) == 0x000008, "Member 'NpcAutoMoveComponent_SetWaitPause::Flag' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetWaitPauseTime
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetWaitPauseTime final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWaitPauseTime_0;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWaitPauseTime_0;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_SetWaitPauseTime) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetWaitPauseTime");
static_assert(sizeof(NpcAutoMoveComponent_SetWaitPauseTime) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetWaitPauseTime");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitPauseTime, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetWaitPauseTime::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitPauseTime, MinWaitPauseTime_0) == 0x000008, "Member 'NpcAutoMoveComponent_SetWaitPauseTime::MinWaitPauseTime_0' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitPauseTime, MaxWaitPauseTime_0) == 0x00000C, "Member 'NpcAutoMoveComponent_SetWaitPauseTime::MaxWaitPauseTime_0' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.SetWaitTime
// 0x0010 (0x0010 - 0x0000)
struct NpcAutoMoveComponent_SetWaitTime final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWaitTime_0;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWaitTime_0;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_SetWaitTime) == 0x000008, "Wrong alignment on NpcAutoMoveComponent_SetWaitTime");
static_assert(sizeof(NpcAutoMoveComponent_SetWaitTime) == 0x000010, "Wrong size on NpcAutoMoveComponent_SetWaitTime");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitTime, Target) == 0x000000, "Member 'NpcAutoMoveComponent_SetWaitTime::Target' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitTime, MinWaitTime_0) == 0x000008, "Member 'NpcAutoMoveComponent_SetWaitTime::MinWaitTime_0' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_SetWaitTime, MaxWaitTime_0) == 0x00000C, "Member 'NpcAutoMoveComponent_SetWaitTime::MaxWaitTime_0' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetAcceptanceHeight
// 0x0004 (0x0004 - 0x0000)
struct NpcAutoMoveComponent_GetAcceptanceHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetAcceptanceHeight) == 0x000004, "Wrong alignment on NpcAutoMoveComponent_GetAcceptanceHeight");
static_assert(sizeof(NpcAutoMoveComponent_GetAcceptanceHeight) == 0x000004, "Wrong size on NpcAutoMoveComponent_GetAcceptanceHeight");
static_assert(offsetof(NpcAutoMoveComponent_GetAcceptanceHeight, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetAcceptanceHeight::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetAutoMove
// 0x0001 (0x0001 - 0x0000)
struct NpcAutoMoveComponent_GetAutoMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetAutoMove) == 0x000001, "Wrong alignment on NpcAutoMoveComponent_GetAutoMove");
static_assert(sizeof(NpcAutoMoveComponent_GetAutoMove) == 0x000001, "Wrong size on NpcAutoMoveComponent_GetAutoMove");
static_assert(offsetof(NpcAutoMoveComponent_GetAutoMove, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetAutoMove::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetMaxPlayAnim
// 0x0004 (0x0004 - 0x0000)
struct NpcAutoMoveComponent_GetMaxPlayAnim final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetMaxPlayAnim) == 0x000004, "Wrong alignment on NpcAutoMoveComponent_GetMaxPlayAnim");
static_assert(sizeof(NpcAutoMoveComponent_GetMaxPlayAnim) == 0x000004, "Wrong size on NpcAutoMoveComponent_GetMaxPlayAnim");
static_assert(offsetof(NpcAutoMoveComponent_GetMaxPlayAnim, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetMaxPlayAnim::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetMoveArea
// 0x0004 (0x0004 - 0x0000)
struct NpcAutoMoveComponent_GetMoveArea final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetMoveArea) == 0x000004, "Wrong alignment on NpcAutoMoveComponent_GetMoveArea");
static_assert(sizeof(NpcAutoMoveComponent_GetMoveArea) == 0x000004, "Wrong size on NpcAutoMoveComponent_GetMoveArea");
static_assert(offsetof(NpcAutoMoveComponent_GetMoveArea, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetMoveArea::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetStartLocation
// 0x000C (0x000C - 0x0000)
struct NpcAutoMoveComponent_GetStartLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetStartLocation) == 0x000004, "Wrong alignment on NpcAutoMoveComponent_GetStartLocation");
static_assert(sizeof(NpcAutoMoveComponent_GetStartLocation) == 0x00000C, "Wrong size on NpcAutoMoveComponent_GetStartLocation");
static_assert(offsetof(NpcAutoMoveComponent_GetStartLocation, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetStartLocation::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetStopGoal
// 0x0001 (0x0001 - 0x0000)
struct NpcAutoMoveComponent_GetStopGoal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetStopGoal) == 0x000001, "Wrong alignment on NpcAutoMoveComponent_GetStopGoal");
static_assert(sizeof(NpcAutoMoveComponent_GetStopGoal) == 0x000001, "Wrong size on NpcAutoMoveComponent_GetStopGoal");
static_assert(offsetof(NpcAutoMoveComponent_GetStopGoal, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetStopGoal::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetStopMoveAreaLength
// 0x0004 (0x0004 - 0x0000)
struct NpcAutoMoveComponent_GetStopMoveAreaLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetStopMoveAreaLength) == 0x000004, "Wrong alignment on NpcAutoMoveComponent_GetStopMoveAreaLength");
static_assert(sizeof(NpcAutoMoveComponent_GetStopMoveAreaLength) == 0x000004, "Wrong size on NpcAutoMoveComponent_GetStopMoveAreaLength");
static_assert(offsetof(NpcAutoMoveComponent_GetStopMoveAreaLength, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetStopMoveAreaLength::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetUseRayCast
// 0x0001 (0x0001 - 0x0000)
struct NpcAutoMoveComponent_GetUseRayCast final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetUseRayCast) == 0x000001, "Wrong alignment on NpcAutoMoveComponent_GetUseRayCast");
static_assert(sizeof(NpcAutoMoveComponent_GetUseRayCast) == 0x000001, "Wrong size on NpcAutoMoveComponent_GetUseRayCast");
static_assert(offsetof(NpcAutoMoveComponent_GetUseRayCast, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetUseRayCast::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetWaitFrequency
// 0x0004 (0x0004 - 0x0000)
struct NpcAutoMoveComponent_GetWaitFrequency final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetWaitFrequency) == 0x000004, "Wrong alignment on NpcAutoMoveComponent_GetWaitFrequency");
static_assert(sizeof(NpcAutoMoveComponent_GetWaitFrequency) == 0x000004, "Wrong size on NpcAutoMoveComponent_GetWaitFrequency");
static_assert(offsetof(NpcAutoMoveComponent_GetWaitFrequency, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetWaitFrequency::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetWaitPause
// 0x0001 (0x0001 - 0x0000)
struct NpcAutoMoveComponent_GetWaitPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetWaitPause) == 0x000001, "Wrong alignment on NpcAutoMoveComponent_GetWaitPause");
static_assert(sizeof(NpcAutoMoveComponent_GetWaitPause) == 0x000001, "Wrong size on NpcAutoMoveComponent_GetWaitPause");
static_assert(offsetof(NpcAutoMoveComponent_GetWaitPause, ReturnValue) == 0x000000, "Member 'NpcAutoMoveComponent_GetWaitPause::ReturnValue' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetWaitPauseTime
// 0x0008 (0x0008 - 0x0000)
struct NpcAutoMoveComponent_GetWaitPauseTime final
{
public:
	float                                         InMinWaitPauseTime;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxWaitPauseTime;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetWaitPauseTime) == 0x000004, "Wrong alignment on NpcAutoMoveComponent_GetWaitPauseTime");
static_assert(sizeof(NpcAutoMoveComponent_GetWaitPauseTime) == 0x000008, "Wrong size on NpcAutoMoveComponent_GetWaitPauseTime");
static_assert(offsetof(NpcAutoMoveComponent_GetWaitPauseTime, InMinWaitPauseTime) == 0x000000, "Member 'NpcAutoMoveComponent_GetWaitPauseTime::InMinWaitPauseTime' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_GetWaitPauseTime, InMaxWaitPauseTime) == 0x000004, "Member 'NpcAutoMoveComponent_GetWaitPauseTime::InMaxWaitPauseTime' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.GetWaitTime
// 0x0008 (0x0008 - 0x0000)
struct NpcAutoMoveComponent_GetWaitTime final
{
public:
	float                                         InMinWaitTime;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxWaitTime;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_GetWaitTime) == 0x000004, "Wrong alignment on NpcAutoMoveComponent_GetWaitTime");
static_assert(sizeof(NpcAutoMoveComponent_GetWaitTime) == 0x000008, "Wrong size on NpcAutoMoveComponent_GetWaitTime");
static_assert(offsetof(NpcAutoMoveComponent_GetWaitTime, InMinWaitTime) == 0x000000, "Member 'NpcAutoMoveComponent_GetWaitTime::InMinWaitTime' has a wrong offset!");
static_assert(offsetof(NpcAutoMoveComponent_GetWaitTime, InMaxWaitTime) == 0x000004, "Member 'NpcAutoMoveComponent_GetWaitTime::InMaxWaitTime' has a wrong offset!");

// Function AT.NpcAutoMoveComponent.OnChangeNpcState
// 0x0001 (0x0001 - 0x0000)
struct NpcAutoMoveComponent_OnChangeNpcState final
{
public:
	ENpcState                                     State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAutoMoveComponent_OnChangeNpcState) == 0x000001, "Wrong alignment on NpcAutoMoveComponent_OnChangeNpcState");
static_assert(sizeof(NpcAutoMoveComponent_OnChangeNpcState) == 0x000001, "Wrong size on NpcAutoMoveComponent_OnChangeNpcState");
static_assert(offsetof(NpcAutoMoveComponent_OnChangeNpcState, State) == 0x000000, "Member 'NpcAutoMoveComponent_OnChangeNpcState::State' has a wrong offset!");

// Function AT.NpcEventVolumeAction.OnNpcActionEnd
// 0x0008 (0x0008 - 0x0000)
struct NpcEventVolumeAction_OnNpcActionEnd final
{
public:
	class UNpcAction*                             PAction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcEventVolumeAction_OnNpcActionEnd) == 0x000008, "Wrong alignment on NpcEventVolumeAction_OnNpcActionEnd");
static_assert(sizeof(NpcEventVolumeAction_OnNpcActionEnd) == 0x000008, "Wrong size on NpcEventVolumeAction_OnNpcActionEnd");
static_assert(offsetof(NpcEventVolumeAction_OnNpcActionEnd, PAction) == 0x000000, "Member 'NpcEventVolumeAction_OnNpcActionEnd::PAction' has a wrong offset!");

// Function AT.NpcEventVolumeAction.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct NpcEventVolumeAction_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcEventVolumeAction_OnOverlapBegin) == 0x000008, "Wrong alignment on NpcEventVolumeAction_OnOverlapBegin");
static_assert(sizeof(NpcEventVolumeAction_OnOverlapBegin) == 0x000010, "Wrong size on NpcEventVolumeAction_OnOverlapBegin");
static_assert(offsetof(NpcEventVolumeAction_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'NpcEventVolumeAction_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeAction_OnOverlapBegin, OtherActor) == 0x000008, "Member 'NpcEventVolumeAction_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.NpcEventVolumeAction.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct NpcEventVolumeAction_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcEventVolumeAction_OnOverlapEnd) == 0x000008, "Wrong alignment on NpcEventVolumeAction_OnOverlapEnd");
static_assert(sizeof(NpcEventVolumeAction_OnOverlapEnd) == 0x000010, "Wrong size on NpcEventVolumeAction_OnOverlapEnd");
static_assert(offsetof(NpcEventVolumeAction_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'NpcEventVolumeAction_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeAction_OnOverlapEnd, OtherActor) == 0x000008, "Member 'NpcEventVolumeAction_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.NpcEventVolumeComponent.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct NpcEventVolumeComponent_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OverlapInfo;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcEventVolumeComponent_BeginOverlap) == 0x000008, "Wrong alignment on NpcEventVolumeComponent_BeginOverlap");
static_assert(sizeof(NpcEventVolumeComponent_BeginOverlap) == 0x0000A8, "Wrong size on NpcEventVolumeComponent_BeginOverlap");
static_assert(offsetof(NpcEventVolumeComponent_BeginOverlap, OverlappedComp) == 0x000000, "Member 'NpcEventVolumeComponent_BeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeComponent_BeginOverlap, Other) == 0x000008, "Member 'NpcEventVolumeComponent_BeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeComponent_BeginOverlap, OtherComp) == 0x000010, "Member 'NpcEventVolumeComponent_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeComponent_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'NpcEventVolumeComponent_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeComponent_BeginOverlap, bFromSweep) == 0x00001C, "Member 'NpcEventVolumeComponent_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeComponent_BeginOverlap, OverlapInfo) == 0x000020, "Member 'NpcEventVolumeComponent_BeginOverlap::OverlapInfo' has a wrong offset!");

// Function AT.NpcEventVolumeComponent.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct NpcEventVolumeComponent_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcEventVolumeComponent_EndOverlap) == 0x000008, "Wrong alignment on NpcEventVolumeComponent_EndOverlap");
static_assert(sizeof(NpcEventVolumeComponent_EndOverlap) == 0x000020, "Wrong size on NpcEventVolumeComponent_EndOverlap");
static_assert(offsetof(NpcEventVolumeComponent_EndOverlap, OverlappedComponent) == 0x000000, "Member 'NpcEventVolumeComponent_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeComponent_EndOverlap, OtherActor) == 0x000008, "Member 'NpcEventVolumeComponent_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeComponent_EndOverlap, OtherComp) == 0x000010, "Member 'NpcEventVolumeComponent_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeComponent_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'NpcEventVolumeComponent_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function AT.NpcEventVolumeFromPlayer.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct NpcEventVolumeFromPlayer_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcEventVolumeFromPlayer_OnOverlapBegin) == 0x000008, "Wrong alignment on NpcEventVolumeFromPlayer_OnOverlapBegin");
static_assert(sizeof(NpcEventVolumeFromPlayer_OnOverlapBegin) == 0x000010, "Wrong size on NpcEventVolumeFromPlayer_OnOverlapBegin");
static_assert(offsetof(NpcEventVolumeFromPlayer_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'NpcEventVolumeFromPlayer_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeFromPlayer_OnOverlapBegin, OtherActor) == 0x000008, "Member 'NpcEventVolumeFromPlayer_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.NpcEventVolumeFromPlayer.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct NpcEventVolumeFromPlayer_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcEventVolumeFromPlayer_OnOverlapEnd) == 0x000008, "Wrong alignment on NpcEventVolumeFromPlayer_OnOverlapEnd");
static_assert(sizeof(NpcEventVolumeFromPlayer_OnOverlapEnd) == 0x000010, "Wrong size on NpcEventVolumeFromPlayer_OnOverlapEnd");
static_assert(offsetof(NpcEventVolumeFromPlayer_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'NpcEventVolumeFromPlayer_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(NpcEventVolumeFromPlayer_OnOverlapEnd, OtherActor) == 0x000008, "Member 'NpcEventVolumeFromPlayer_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.NpcManager.OnCooking
// 0x0001 (0x0001 - 0x0000)
struct NpcManager_OnCooking final
{
public:
	EEventTimingType                              Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcManager_OnCooking) == 0x000001, "Wrong alignment on NpcManager_OnCooking");
static_assert(sizeof(NpcManager_OnCooking) == 0x000001, "Wrong size on NpcManager_OnCooking");
static_assert(offsetof(NpcManager_OnCooking, Timing) == 0x000000, "Member 'NpcManager_OnCooking::Timing' has a wrong offset!");

// Function AT.NpcManager.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct NpcManager_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcManager_OnDemoTiming) == 0x000004, "Wrong alignment on NpcManager_OnDemoTiming");
static_assert(sizeof(NpcManager_OnDemoTiming) == 0x000018, "Wrong size on NpcManager_OnDemoTiming");
static_assert(offsetof(NpcManager_OnDemoTiming, DemoType) == 0x000000, "Member 'NpcManager_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(NpcManager_OnDemoTiming, DemoTiming) == 0x000001, "Member 'NpcManager_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(NpcManager_OnDemoTiming, DemoName) == 0x000008, "Member 'NpcManager_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(NpcManager_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'NpcManager_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.NpcManager.OnGeneralTalk
// 0x0001 (0x0001 - 0x0000)
struct NpcManager_OnGeneralTalk final
{
public:
	EQUEST_GENERAL_TALK_TIMING                    Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcManager_OnGeneralTalk) == 0x000001, "Wrong alignment on NpcManager_OnGeneralTalk");
static_assert(sizeof(NpcManager_OnGeneralTalk) == 0x000001, "Wrong size on NpcManager_OnGeneralTalk");
static_assert(offsetof(NpcManager_OnGeneralTalk, Timing) == 0x000000, "Member 'NpcManager_OnGeneralTalk::Timing' has a wrong offset!");

// Function AT.NpcManager.OnLoaded_AnimMontage
// 0x0008 (0x0008 - 0x0000)
struct NpcManager_OnLoaded_AnimMontage final
{
public:
	class UATDataAssetNpcMobAsyncLoad*            NpcMobLoad;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcManager_OnLoaded_AnimMontage) == 0x000008, "Wrong alignment on NpcManager_OnLoaded_AnimMontage");
static_assert(sizeof(NpcManager_OnLoaded_AnimMontage) == 0x000008, "Wrong size on NpcManager_OnLoaded_AnimMontage");
static_assert(offsetof(NpcManager_OnLoaded_AnimMontage, NpcMobLoad) == 0x000000, "Member 'NpcManager_OnLoaded_AnimMontage::NpcMobLoad' has a wrong offset!");

// Function AT.NpcManager.OnLoaded_NpcMobAnimBP
// 0x0008 (0x0008 - 0x0000)
struct NpcManager_OnLoaded_NpcMobAnimBP final
{
public:
	class UATDataAssetNpcMobAsyncLoad*            NpcMobLoad;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcManager_OnLoaded_NpcMobAnimBP) == 0x000008, "Wrong alignment on NpcManager_OnLoaded_NpcMobAnimBP");
static_assert(sizeof(NpcManager_OnLoaded_NpcMobAnimBP) == 0x000008, "Wrong size on NpcManager_OnLoaded_NpcMobAnimBP");
static_assert(offsetof(NpcManager_OnLoaded_NpcMobAnimBP, NpcMobLoad) == 0x000000, "Member 'NpcManager_OnLoaded_NpcMobAnimBP::NpcMobLoad' has a wrong offset!");

// Function AT.NpcManager.OnLoaded_NpcMobMesh
// 0x0008 (0x0008 - 0x0000)
struct NpcManager_OnLoaded_NpcMobMesh final
{
public:
	class UATDataAssetNpcMobAsyncLoad*            NpcMobLoad;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcManager_OnLoaded_NpcMobMesh) == 0x000008, "Wrong alignment on NpcManager_OnLoaded_NpcMobMesh");
static_assert(sizeof(NpcManager_OnLoaded_NpcMobMesh) == 0x000008, "Wrong size on NpcManager_OnLoaded_NpcMobMesh");
static_assert(offsetof(NpcManager_OnLoaded_NpcMobMesh, NpcMobLoad) == 0x000000, "Member 'NpcManager_OnLoaded_NpcMobMesh::NpcMobLoad' has a wrong offset!");

// Function AT.NpcManager.OnLoaded_TownMobClass
// 0x0008 (0x0008 - 0x0000)
struct NpcManager_OnLoaded_TownMobClass final
{
public:
	class UATDataAssetNpcMobAsyncLoad*            NpcMobLoad;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcManager_OnLoaded_TownMobClass) == 0x000008, "Wrong alignment on NpcManager_OnLoaded_TownMobClass");
static_assert(sizeof(NpcManager_OnLoaded_TownMobClass) == 0x000008, "Wrong size on NpcManager_OnLoaded_TownMobClass");
static_assert(offsetof(NpcManager_OnLoaded_TownMobClass, NpcMobLoad) == 0x000000, "Member 'NpcManager_OnLoaded_TownMobClass::NpcMobLoad' has a wrong offset!");

// Function AT.NpcManager.OnPlayerChange
// 0x0008 (0x0008 - 0x0000)
struct NpcManager_OnPlayerChange final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcManager_OnPlayerChange) == 0x000008, "Wrong alignment on NpcManager_OnPlayerChange");
static_assert(sizeof(NpcManager_OnPlayerChange) == 0x000008, "Wrong size on NpcManager_OnPlayerChange");
static_assert(offsetof(NpcManager_OnPlayerChange, Character) == 0x000000, "Member 'NpcManager_OnPlayerChange::Character' has a wrong offset!");

// Function AT.NpcManager.OnQuest
// 0x0001 (0x0001 - 0x0000)
struct NpcManager_OnQuest final
{
public:
	EQUEST_UI_ACTIVE_TIMING                       Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcManager_OnQuest) == 0x000001, "Wrong alignment on NpcManager_OnQuest");
static_assert(sizeof(NpcManager_OnQuest) == 0x000001, "Wrong size on NpcManager_OnQuest");
static_assert(offsetof(NpcManager_OnQuest, Timing) == 0x000000, "Member 'NpcManager_OnQuest::Timing' has a wrong offset!");

// Function AT.NpcMovementComponent.AddInputVector
// 0x0010 (0x0010 - 0x0000)
struct NpcMovementComponent_AddInputVector final
{
public:
	struct FVector                                WorldAccel;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcMovementComponent_AddInputVector) == 0x000004, "Wrong alignment on NpcMovementComponent_AddInputVector");
static_assert(sizeof(NpcMovementComponent_AddInputVector) == 0x000010, "Wrong size on NpcMovementComponent_AddInputVector");
static_assert(offsetof(NpcMovementComponent_AddInputVector, WorldAccel) == 0x000000, "Member 'NpcMovementComponent_AddInputVector::WorldAccel' has a wrong offset!");
static_assert(offsetof(NpcMovementComponent_AddInputVector, bForce) == 0x00000C, "Member 'NpcMovementComponent_AddInputVector::bForce' has a wrong offset!");

// Function AT.NpcMovementComponent.ChangeMoveMode
// 0x0002 (0x0002 - 0x0000)
struct NpcMovementComponent_ChangeMoveMode final
{
public:
	EMovementMode                                 NewMoveMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewCustomMode;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_ChangeMoveMode) == 0x000001, "Wrong alignment on NpcMovementComponent_ChangeMoveMode");
static_assert(sizeof(NpcMovementComponent_ChangeMoveMode) == 0x000002, "Wrong size on NpcMovementComponent_ChangeMoveMode");
static_assert(offsetof(NpcMovementComponent_ChangeMoveMode, NewMoveMode) == 0x000000, "Member 'NpcMovementComponent_ChangeMoveMode::NewMoveMode' has a wrong offset!");
static_assert(offsetof(NpcMovementComponent_ChangeMoveMode, NewCustomMode) == 0x000001, "Member 'NpcMovementComponent_ChangeMoveMode::NewCustomMode' has a wrong offset!");

// Function AT.NpcMovementComponent.ConsumeInputVector
// 0x000C (0x000C - 0x0000)
struct NpcMovementComponent_ConsumeInputVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_ConsumeInputVector) == 0x000004, "Wrong alignment on NpcMovementComponent_ConsumeInputVector");
static_assert(sizeof(NpcMovementComponent_ConsumeInputVector) == 0x00000C, "Wrong size on NpcMovementComponent_ConsumeInputVector");
static_assert(offsetof(NpcMovementComponent_ConsumeInputVector, ReturnValue) == 0x000000, "Member 'NpcMovementComponent_ConsumeInputVector::ReturnValue' has a wrong offset!");

// Function AT.NpcMovementComponent.SetAvoidanceGroup
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_SetAvoidanceGroup final
{
public:
	int32                                         GroupFlags;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_SetAvoidanceGroup) == 0x000004, "Wrong alignment on NpcMovementComponent_SetAvoidanceGroup");
static_assert(sizeof(NpcMovementComponent_SetAvoidanceGroup) == 0x000004, "Wrong size on NpcMovementComponent_SetAvoidanceGroup");
static_assert(offsetof(NpcMovementComponent_SetAvoidanceGroup, GroupFlags) == 0x000000, "Member 'NpcMovementComponent_SetAvoidanceGroup::GroupFlags' has a wrong offset!");

// Function AT.NpcMovementComponent.SetAvoidanceGroupMask
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_SetAvoidanceGroupMask final
{
public:
	struct FNavAvoidanceMask                      GroupMask;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_SetAvoidanceGroupMask) == 0x000004, "Wrong alignment on NpcMovementComponent_SetAvoidanceGroupMask");
static_assert(sizeof(NpcMovementComponent_SetAvoidanceGroupMask) == 0x000004, "Wrong size on NpcMovementComponent_SetAvoidanceGroupMask");
static_assert(offsetof(NpcMovementComponent_SetAvoidanceGroupMask, GroupMask) == 0x000000, "Member 'NpcMovementComponent_SetAvoidanceGroupMask::GroupMask' has a wrong offset!");

// Function AT.NpcMovementComponent.SetGroupsToAvoid
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_SetGroupsToAvoid final
{
public:
	int32                                         GroupFlags;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_SetGroupsToAvoid) == 0x000004, "Wrong alignment on NpcMovementComponent_SetGroupsToAvoid");
static_assert(sizeof(NpcMovementComponent_SetGroupsToAvoid) == 0x000004, "Wrong size on NpcMovementComponent_SetGroupsToAvoid");
static_assert(offsetof(NpcMovementComponent_SetGroupsToAvoid, GroupFlags) == 0x000000, "Member 'NpcMovementComponent_SetGroupsToAvoid::GroupFlags' has a wrong offset!");

// Function AT.NpcMovementComponent.SetGroupsToAvoidMask
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_SetGroupsToAvoidMask final
{
public:
	struct FNavAvoidanceMask                      GroupMask;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_SetGroupsToAvoidMask) == 0x000004, "Wrong alignment on NpcMovementComponent_SetGroupsToAvoidMask");
static_assert(sizeof(NpcMovementComponent_SetGroupsToAvoidMask) == 0x000004, "Wrong size on NpcMovementComponent_SetGroupsToAvoidMask");
static_assert(offsetof(NpcMovementComponent_SetGroupsToAvoidMask, GroupMask) == 0x000000, "Member 'NpcMovementComponent_SetGroupsToAvoidMask::GroupMask' has a wrong offset!");

// Function AT.NpcMovementComponent.SetGroupsToIgnore
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_SetGroupsToIgnore final
{
public:
	int32                                         GroupFlags;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_SetGroupsToIgnore) == 0x000004, "Wrong alignment on NpcMovementComponent_SetGroupsToIgnore");
static_assert(sizeof(NpcMovementComponent_SetGroupsToIgnore) == 0x000004, "Wrong size on NpcMovementComponent_SetGroupsToIgnore");
static_assert(offsetof(NpcMovementComponent_SetGroupsToIgnore, GroupFlags) == 0x000000, "Member 'NpcMovementComponent_SetGroupsToIgnore::GroupFlags' has a wrong offset!");

// Function AT.NpcMovementComponent.SetGroupsToIgnoreMask
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_SetGroupsToIgnoreMask final
{
public:
	struct FNavAvoidanceMask                      GroupMask;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_SetGroupsToIgnoreMask) == 0x000004, "Wrong alignment on NpcMovementComponent_SetGroupsToIgnoreMask");
static_assert(sizeof(NpcMovementComponent_SetGroupsToIgnoreMask) == 0x000004, "Wrong size on NpcMovementComponent_SetGroupsToIgnoreMask");
static_assert(offsetof(NpcMovementComponent_SetGroupsToIgnoreMask, GroupMask) == 0x000000, "Member 'NpcMovementComponent_SetGroupsToIgnoreMask::GroupMask' has a wrong offset!");

// Function AT.NpcMovementComponent.SetWalkableFloorAngle
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_SetWalkableFloorAngle final
{
public:
	float                                         InWalkableFloorAngle;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_SetWalkableFloorAngle) == 0x000004, "Wrong alignment on NpcMovementComponent_SetWalkableFloorAngle");
static_assert(sizeof(NpcMovementComponent_SetWalkableFloorAngle) == 0x000004, "Wrong size on NpcMovementComponent_SetWalkableFloorAngle");
static_assert(offsetof(NpcMovementComponent_SetWalkableFloorAngle, InWalkableFloorAngle) == 0x000000, "Member 'NpcMovementComponent_SetWalkableFloorAngle::InWalkableFloorAngle' has a wrong offset!");

// Function AT.NpcMovementComponent.SetWalkableFloorZ
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_SetWalkableFloorZ final
{
public:
	float                                         InWalkableFloorZ;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_SetWalkableFloorZ) == 0x000004, "Wrong alignment on NpcMovementComponent_SetWalkableFloorZ");
static_assert(sizeof(NpcMovementComponent_SetWalkableFloorZ) == 0x000004, "Wrong size on NpcMovementComponent_SetWalkableFloorZ");
static_assert(offsetof(NpcMovementComponent_SetWalkableFloorZ, InWalkableFloorZ) == 0x000000, "Member 'NpcMovementComponent_SetWalkableFloorZ::InWalkableFloorZ' has a wrong offset!");

// Function AT.NpcMovementComponent.GetPerchRadiusThreshold
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_GetPerchRadiusThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_GetPerchRadiusThreshold) == 0x000004, "Wrong alignment on NpcMovementComponent_GetPerchRadiusThreshold");
static_assert(sizeof(NpcMovementComponent_GetPerchRadiusThreshold) == 0x000004, "Wrong size on NpcMovementComponent_GetPerchRadiusThreshold");
static_assert(offsetof(NpcMovementComponent_GetPerchRadiusThreshold, ReturnValue) == 0x000000, "Member 'NpcMovementComponent_GetPerchRadiusThreshold::ReturnValue' has a wrong offset!");

// Function AT.NpcMovementComponent.GetValidPerchRadius
// 0x0004 (0x0004 - 0x0000)
struct NpcMovementComponent_GetValidPerchRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcMovementComponent_GetValidPerchRadius) == 0x000004, "Wrong alignment on NpcMovementComponent_GetValidPerchRadius");
static_assert(sizeof(NpcMovementComponent_GetValidPerchRadius) == 0x000004, "Wrong size on NpcMovementComponent_GetValidPerchRadius");
static_assert(offsetof(NpcMovementComponent_GetValidPerchRadius, ReturnValue) == 0x000000, "Member 'NpcMovementComponent_GetValidPerchRadius::ReturnValue' has a wrong offset!");

// Function AT.NpcTalkManager.OnLoadedPlayableCharacter
// 0x0108 (0x0108 - 0x0000)
struct NpcTalkManager_OnLoadedPlayableCharacter final
{
public:
	struct FEventParam                            Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkManager_OnLoadedPlayableCharacter) == 0x000008, "Wrong alignment on NpcTalkManager_OnLoadedPlayableCharacter");
static_assert(sizeof(NpcTalkManager_OnLoadedPlayableCharacter) == 0x000108, "Wrong size on NpcTalkManager_OnLoadedPlayableCharacter");
static_assert(offsetof(NpcTalkManager_OnLoadedPlayableCharacter, Param) == 0x000000, "Member 'NpcTalkManager_OnLoadedPlayableCharacter::Param' has a wrong offset!");

// Function AT.NpcTalkManager.OnPlayerChange
// 0x0008 (0x0008 - 0x0000)
struct NpcTalkManager_OnPlayerChange final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcTalkManager_OnPlayerChange) == 0x000008, "Wrong alignment on NpcTalkManager_OnPlayerChange");
static_assert(sizeof(NpcTalkManager_OnPlayerChange) == 0x000008, "Wrong size on NpcTalkManager_OnPlayerChange");
static_assert(offsetof(NpcTalkManager_OnPlayerChange, Character) == 0x000000, "Member 'NpcTalkManager_OnPlayerChange::Character' has a wrong offset!");

// Function AT.LipSyncInfoObj.OnFinishedVoice
// 0x0004 (0x0004 - 0x0000)
struct LipSyncInfoObj_OnFinishedVoice final
{
public:
	int32                                         Ch;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LipSyncInfoObj_OnFinishedVoice) == 0x000004, "Wrong alignment on LipSyncInfoObj_OnFinishedVoice");
static_assert(sizeof(LipSyncInfoObj_OnFinishedVoice) == 0x000004, "Wrong size on LipSyncInfoObj_OnFinishedVoice");
static_assert(offsetof(LipSyncInfoObj_OnFinishedVoice, Ch) == 0x000000, "Member 'LipSyncInfoObj_OnFinishedVoice::Ch' has a wrong offset!");

// Function AT.NpcVisibleMeshManager.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct NpcVisibleMeshManager_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcVisibleMeshManager_OnDemoTiming) == 0x000004, "Wrong alignment on NpcVisibleMeshManager_OnDemoTiming");
static_assert(sizeof(NpcVisibleMeshManager_OnDemoTiming) == 0x000018, "Wrong size on NpcVisibleMeshManager_OnDemoTiming");
static_assert(offsetof(NpcVisibleMeshManager_OnDemoTiming, DemoType) == 0x000000, "Member 'NpcVisibleMeshManager_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(NpcVisibleMeshManager_OnDemoTiming, DemoTiming) == 0x000001, "Member 'NpcVisibleMeshManager_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(NpcVisibleMeshManager_OnDemoTiming, DemoName) == 0x000008, "Member 'NpcVisibleMeshManager_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(NpcVisibleMeshManager_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'NpcVisibleMeshManager_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.NpcVisibleMeshManager.OnTalkingEventsEnabled
// 0x0001 (0x0001 - 0x0000)
struct NpcVisibleMeshManager_OnTalkingEventsEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcVisibleMeshManager_OnTalkingEventsEnabled) == 0x000001, "Wrong alignment on NpcVisibleMeshManager_OnTalkingEventsEnabled");
static_assert(sizeof(NpcVisibleMeshManager_OnTalkingEventsEnabled) == 0x000001, "Wrong size on NpcVisibleMeshManager_OnTalkingEventsEnabled");
static_assert(offsetof(NpcVisibleMeshManager_OnTalkingEventsEnabled, bEnable) == 0x000000, "Member 'NpcVisibleMeshManager_OnTalkingEventsEnabled::bEnable' has a wrong offset!");

// Function AT.PartyMenu.OnLoadWidget
// 0x0008 (0x0008 - 0x0000)
struct PartyMenu_OnLoadWidget final
{
public:
	class UATDataAssetUiAsyncLoad*                InLoader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyMenu_OnLoadWidget) == 0x000008, "Wrong alignment on PartyMenu_OnLoadWidget");
static_assert(sizeof(PartyMenu_OnLoadWidget) == 0x000008, "Wrong size on PartyMenu_OnLoadWidget");
static_assert(offsetof(PartyMenu_OnLoadWidget, InLoader) == 0x000000, "Member 'PartyMenu_OnLoadWidget::InLoader' has a wrong offset!");

// Function AT.Projectile_Cpl024SkillSpecialParent.OnSpawnProjectile
// 0x0010 (0x0010 - 0x0000)
struct Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile) == 0x000008, "Wrong alignment on Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile");
static_assert(sizeof(Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile) == 0x000010, "Wrong size on Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile");
static_assert(offsetof(Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile, InProjectile) == 0x000000, "Member 'Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile::InProjectile' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile, InOwner) == 0x000008, "Member 'Projectile_Cpl024SkillSpecialParent_OnSpawnProjectile::InOwner' has a wrong offset!");

// Function AT.Projectile_Cpl040CrossClaw.OnCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin");
static_assert(sizeof(Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin) == 0x0000A8, "Wrong size on Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin");
static_assert(offsetof(Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin, OverlappedComponent) == 0x000000, "Member 'Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'Projectile_Cpl040CrossClaw_OnCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function AT.Projectile_Cpl058SkillBarrierMineBarrier.OnSpawnProjectile
// 0x0010 (0x0010 - 0x0000)
struct Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile) == 0x000008, "Wrong alignment on Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile");
static_assert(sizeof(Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile) == 0x000010, "Wrong size on Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile");
static_assert(offsetof(Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile, InProjectile) == 0x000000, "Member 'Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile::InProjectile' has a wrong offset!");
static_assert(offsetof(Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile, InOwner) == 0x000008, "Member 'Projectile_Cpl058SkillBarrierMineBarrier_OnSpawnProjectile::InOwner' has a wrong offset!");

// Function AT.Projectile_FallingBulletParent.OnSpawnProjectile
// 0x0010 (0x0010 - 0x0000)
struct Projectile_FallingBulletParent_OnSpawnProjectile final
{
public:
	class AProjectile*                            InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_FallingBulletParent_OnSpawnProjectile) == 0x000008, "Wrong alignment on Projectile_FallingBulletParent_OnSpawnProjectile");
static_assert(sizeof(Projectile_FallingBulletParent_OnSpawnProjectile) == 0x000010, "Wrong size on Projectile_FallingBulletParent_OnSpawnProjectile");
static_assert(offsetof(Projectile_FallingBulletParent_OnSpawnProjectile, InProjectile) == 0x000000, "Member 'Projectile_FallingBulletParent_OnSpawnProjectile::InProjectile' has a wrong offset!");
static_assert(offsetof(Projectile_FallingBulletParent_OnSpawnProjectile, InOwner) == 0x000008, "Member 'Projectile_FallingBulletParent_OnSpawnProjectile::InOwner' has a wrong offset!");

// Function AT.ATProjectile_NPA_DeluxeBomber.HitCollision
// 0x0088 (0x0088 - 0x0000)
struct ATProjectile_NPA_DeluxeBomber_HitCollision final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATProjectile_NPA_DeluxeBomber_HitCollision) == 0x000008, "Wrong alignment on ATProjectile_NPA_DeluxeBomber_HitCollision");
static_assert(sizeof(ATProjectile_NPA_DeluxeBomber_HitCollision) == 0x000088, "Wrong size on ATProjectile_NPA_DeluxeBomber_HitCollision");
static_assert(offsetof(ATProjectile_NPA_DeluxeBomber_HitCollision, HitResult) == 0x000000, "Member 'ATProjectile_NPA_DeluxeBomber_HitCollision::HitResult' has a wrong offset!");

// Function AT.Projectile_NPA_ShockWave.OnCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct Projectile_NPA_ShockWave_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_NPA_ShockWave_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on Projectile_NPA_ShockWave_OnCollisionOverlapBegin");
static_assert(sizeof(Projectile_NPA_ShockWave_OnCollisionOverlapBegin) == 0x0000A8, "Wrong size on Projectile_NPA_ShockWave_OnCollisionOverlapBegin");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapBegin, OverlappedComponent) == 0x000000, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function AT.Projectile_NPA_ShockWave.OnCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct Projectile_NPA_ShockWave_OnCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Projectile_NPA_ShockWave_OnCollisionOverlapEnd) == 0x000008, "Wrong alignment on Projectile_NPA_ShockWave_OnCollisionOverlapEnd");
static_assert(sizeof(Projectile_NPA_ShockWave_OnCollisionOverlapEnd) == 0x000020, "Wrong size on Projectile_NPA_ShockWave_OnCollisionOverlapEnd");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapEnd, OverlappedComponent) == 0x000000, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapEnd, OtherActor) == 0x000008, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapEnd, OtherComp) == 0x000010, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(Projectile_NPA_ShockWave_OnCollisionOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'Projectile_NPA_ShockWave_OnCollisionOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function AT.Quest_General.AddMapIconOffset
// 0x000C (0x000C - 0x0000)
struct Quest_General_AddMapIconOffset final
{
public:
	EMapIcon                                      InIconId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InOffset;                                          // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_AddMapIconOffset) == 0x000004, "Wrong alignment on Quest_General_AddMapIconOffset");
static_assert(sizeof(Quest_General_AddMapIconOffset) == 0x00000C, "Wrong size on Quest_General_AddMapIconOffset");
static_assert(offsetof(Quest_General_AddMapIconOffset, InIconId) == 0x000000, "Member 'Quest_General_AddMapIconOffset::InIconId' has a wrong offset!");
static_assert(offsetof(Quest_General_AddMapIconOffset, InOffset) == 0x000004, "Member 'Quest_General_AddMapIconOffset::InOffset' has a wrong offset!");

// Function AT.Quest_General.AddViewedTips
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_AddViewedTips final
{
public:
	class FName                                   InMasterId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_AddViewedTips) == 0x000004, "Wrong alignment on Quest_General_AddViewedTips");
static_assert(sizeof(Quest_General_AddViewedTips) == 0x000008, "Wrong size on Quest_General_AddViewedTips");
static_assert(offsetof(Quest_General_AddViewedTips, InMasterId) == 0x000000, "Member 'Quest_General_AddViewedTips::InMasterId' has a wrong offset!");

// Function AT.Quest_General.DestroyQuestActor
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_DestroyQuestActor final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_DestroyQuestActor) == 0x000008, "Wrong alignment on Quest_General_DestroyQuestActor");
static_assert(sizeof(Quest_General_DestroyQuestActor) == 0x000010, "Wrong size on Quest_General_DestroyQuestActor");
static_assert(offsetof(Quest_General_DestroyQuestActor, ID) == 0x000000, "Member 'Quest_General_DestroyQuestActor::ID' has a wrong offset!");

// Function AT.Quest_General.EnablePhaseTimingCheck
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_EnablePhaseTimingCheck final
{
public:
	class FName                                   Phase_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_GENERAL_TIMING                         Timing;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_General_EnablePhaseTimingCheck) == 0x000004, "Wrong alignment on Quest_General_EnablePhaseTimingCheck");
static_assert(sizeof(Quest_General_EnablePhaseTimingCheck) == 0x000010, "Wrong size on Quest_General_EnablePhaseTimingCheck");
static_assert(offsetof(Quest_General_EnablePhaseTimingCheck, Phase_id) == 0x000000, "Member 'Quest_General_EnablePhaseTimingCheck::Phase_id' has a wrong offset!");
static_assert(offsetof(Quest_General_EnablePhaseTimingCheck, Timing) == 0x000008, "Member 'Quest_General_EnablePhaseTimingCheck::Timing' has a wrong offset!");

// Function AT.Quest_General.ExecuteVisibledSubLevelEvent
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_ExecuteVisibledSubLevelEvent final
{
public:
	class FName                                   SubLevelName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_ExecuteVisibledSubLevelEvent) == 0x000004, "Wrong alignment on Quest_General_ExecuteVisibledSubLevelEvent");
static_assert(sizeof(Quest_General_ExecuteVisibledSubLevelEvent) == 0x000008, "Wrong size on Quest_General_ExecuteVisibledSubLevelEvent");
static_assert(offsetof(Quest_General_ExecuteVisibledSubLevelEvent, SubLevelName) == 0x000000, "Member 'Quest_General_ExecuteVisibledSubLevelEvent::SubLevelName' has a wrong offset!");

// Function AT.Quest_General.GetPhaseId
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_GetPhaseId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_GetPhaseId) == 0x000004, "Wrong alignment on Quest_General_GetPhaseId");
static_assert(sizeof(Quest_General_GetPhaseId) == 0x000008, "Wrong size on Quest_General_GetPhaseId");
static_assert(offsetof(Quest_General_GetPhaseId, ReturnValue) == 0x000000, "Member 'Quest_General_GetPhaseId::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.GetPhaseIdImmediate
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_GetPhaseIdImmediate final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_GetPhaseIdImmediate) == 0x000004, "Wrong alignment on Quest_General_GetPhaseIdImmediate");
static_assert(sizeof(Quest_General_GetPhaseIdImmediate) == 0x000008, "Wrong size on Quest_General_GetPhaseIdImmediate");
static_assert(offsetof(Quest_General_GetPhaseIdImmediate, ReturnValue) == 0x000000, "Member 'Quest_General_GetPhaseIdImmediate::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.GetQuestPhaseParamObjectName
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_GetQuestPhaseParamObjectName final
{
public:
	class FName                                   Phase_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_GetQuestPhaseParamObjectName) == 0x000004, "Wrong alignment on Quest_General_GetQuestPhaseParamObjectName");
static_assert(sizeof(Quest_General_GetQuestPhaseParamObjectName) == 0x000010, "Wrong size on Quest_General_GetQuestPhaseParamObjectName");
static_assert(offsetof(Quest_General_GetQuestPhaseParamObjectName, Phase_id) == 0x000000, "Member 'Quest_General_GetQuestPhaseParamObjectName::Phase_id' has a wrong offset!");
static_assert(offsetof(Quest_General_GetQuestPhaseParamObjectName, ReturnValue) == 0x000008, "Member 'Quest_General_GetQuestPhaseParamObjectName::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.GetQuestSymbol
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_GetQuestSymbol final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_GetQuestSymbol) == 0x000004, "Wrong alignment on Quest_General_GetQuestSymbol");
static_assert(sizeof(Quest_General_GetQuestSymbol) == 0x000008, "Wrong size on Quest_General_GetQuestSymbol");
static_assert(offsetof(Quest_General_GetQuestSymbol, ReturnValue) == 0x000000, "Member 'Quest_General_GetQuestSymbol::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.GetVariableString2Message
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_GetVariableString2Message final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_GetVariableString2Message) == 0x000008, "Wrong alignment on Quest_General_GetVariableString2Message");
static_assert(sizeof(Quest_General_GetVariableString2Message) == 0x000010, "Wrong size on Quest_General_GetVariableString2Message");
static_assert(offsetof(Quest_General_GetVariableString2Message, ReturnValue) == 0x000000, "Member 'Quest_General_GetVariableString2Message::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.GetVariableString2Speaker
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_GetVariableString2Speaker final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_GetVariableString2Speaker) == 0x000008, "Wrong alignment on Quest_General_GetVariableString2Speaker");
static_assert(sizeof(Quest_General_GetVariableString2Speaker) == 0x000010, "Wrong size on Quest_General_GetVariableString2Speaker");
static_assert(offsetof(Quest_General_GetVariableString2Speaker, ReturnValue) == 0x000000, "Member 'Quest_General_GetVariableString2Speaker::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.IsDisableOpeningMainMenu
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_IsDisableOpeningMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_IsDisableOpeningMainMenu) == 0x000001, "Wrong alignment on Quest_General_IsDisableOpeningMainMenu");
static_assert(sizeof(Quest_General_IsDisableOpeningMainMenu) == 0x000001, "Wrong size on Quest_General_IsDisableOpeningMainMenu");
static_assert(offsetof(Quest_General_IsDisableOpeningMainMenu, ReturnValue) == 0x000000, "Member 'Quest_General_IsDisableOpeningMainMenu::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.MainQuestChangePhaseTiming
// 0x0004 (0x0004 - 0x0000)
struct Quest_General_MainQuestChangePhaseTiming final
{
public:
	int32                                         New_phase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_MainQuestChangePhaseTiming) == 0x000004, "Wrong alignment on Quest_General_MainQuestChangePhaseTiming");
static_assert(sizeof(Quest_General_MainQuestChangePhaseTiming) == 0x000004, "Wrong size on Quest_General_MainQuestChangePhaseTiming");
static_assert(offsetof(Quest_General_MainQuestChangePhaseTiming, New_phase) == 0x000000, "Member 'Quest_General_MainQuestChangePhaseTiming::New_phase' has a wrong offset!");

// Function AT.Quest_General.MoveScene
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_MoveScene final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_MoveScene) == 0x000004, "Wrong alignment on Quest_General_MoveScene");
static_assert(sizeof(Quest_General_MoveScene) == 0x000008, "Wrong size on Quest_General_MoveScene");
static_assert(offsetof(Quest_General_MoveScene, LevelName) == 0x000000, "Member 'Quest_General_MoveScene::LevelName' has a wrong offset!");

// Function AT.Quest_General.OnAddedItem
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnAddedItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnAddedItem) == 0x000004, "Wrong alignment on Quest_General_OnAddedItem");
static_assert(sizeof(Quest_General_OnAddedItem) == 0x000008, "Wrong size on Quest_General_OnAddedItem");
static_assert(offsetof(Quest_General_OnAddedItem, ItemId) == 0x000000, "Member 'Quest_General_OnAddedItem::ItemId' has a wrong offset!");

// Function AT.Quest_General.OnAddedPartyMember
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnAddedPartyMember final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_General_OnAddedPartyMember) == 0x000004, "Wrong alignment on Quest_General_OnAddedPartyMember");
static_assert(sizeof(Quest_General_OnAddedPartyMember) == 0x000008, "Wrong size on Quest_General_OnAddedPartyMember");
static_assert(offsetof(Quest_General_OnAddedPartyMember, Index_0) == 0x000000, "Member 'Quest_General_OnAddedPartyMember::Index_0' has a wrong offset!");
static_assert(offsetof(Quest_General_OnAddedPartyMember, CharacterType) == 0x000004, "Member 'Quest_General_OnAddedPartyMember::CharacterType' has a wrong offset!");

// Function AT.Quest_General.OnBeganSubQuestDirection
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_OnBeganSubQuestDirection final
{
public:
	ESubQuestDirectionTiming                      Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnBeganSubQuestDirection) == 0x000001, "Wrong alignment on Quest_General_OnBeganSubQuestDirection");
static_assert(sizeof(Quest_General_OnBeganSubQuestDirection) == 0x000001, "Wrong size on Quest_General_OnBeganSubQuestDirection");
static_assert(offsetof(Quest_General_OnBeganSubQuestDirection, Timing) == 0x000000, "Member 'Quest_General_OnBeganSubQuestDirection::Timing' has a wrong offset!");

// Function AT.Quest_General.OnCallBPEventCommand
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnCallBPEventCommand final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnCallBPEventCommand) == 0x000004, "Wrong alignment on Quest_General_OnCallBPEventCommand");
static_assert(sizeof(Quest_General_OnCallBPEventCommand) == 0x000008, "Wrong size on Quest_General_OnCallBPEventCommand");
static_assert(offsetof(Quest_General_OnCallBPEventCommand, ID) == 0x000000, "Member 'Quest_General_OnCallBPEventCommand::ID' has a wrong offset!");

// Function AT.Quest_General.OnChangedPlayer
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnChangedPlayer final
{
public:
	class AAT_Character*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnChangedPlayer) == 0x000008, "Wrong alignment on Quest_General_OnChangedPlayer");
static_assert(sizeof(Quest_General_OnChangedPlayer) == 0x000008, "Wrong size on Quest_General_OnChangedPlayer");
static_assert(offsetof(Quest_General_OnChangedPlayer, Character) == 0x000000, "Member 'Quest_General_OnChangedPlayer::Character' has a wrong offset!");

// Function AT.Quest_General.OnChangedPlayerCharacter
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_OnChangedPlayerCharacter final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnChangedPlayerCharacter) == 0x000001, "Wrong alignment on Quest_General_OnChangedPlayerCharacter");
static_assert(sizeof(Quest_General_OnChangedPlayerCharacter) == 0x000001, "Wrong size on Quest_General_OnChangedPlayerCharacter");
static_assert(offsetof(Quest_General_OnChangedPlayerCharacter, CharacterType) == 0x000000, "Member 'Quest_General_OnChangedPlayerCharacter::CharacterType' has a wrong offset!");

// Function AT.Quest_General.OnChangedShopTrainingTiming
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_OnChangedShopTrainingTiming final
{
public:
	bool                                          bBegan;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnChangedShopTrainingTiming) == 0x000001, "Wrong alignment on Quest_General_OnChangedShopTrainingTiming");
static_assert(sizeof(Quest_General_OnChangedShopTrainingTiming) == 0x000001, "Wrong size on Quest_General_OnChangedShopTrainingTiming");
static_assert(offsetof(Quest_General_OnChangedShopTrainingTiming, bBegan) == 0x000000, "Member 'Quest_General_OnChangedShopTrainingTiming::bBegan' has a wrong offset!");

// Function AT.Quest_General.OnChangedTrainingTiming
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_OnChangedTrainingTiming final
{
public:
	bool                                          bBegan;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnChangedTrainingTiming) == 0x000001, "Wrong alignment on Quest_General_OnChangedTrainingTiming");
static_assert(sizeof(Quest_General_OnChangedTrainingTiming) == 0x000001, "Wrong size on Quest_General_OnChangedTrainingTiming");
static_assert(offsetof(Quest_General_OnChangedTrainingTiming, bBegan) == 0x000000, "Member 'Quest_General_OnChangedTrainingTiming::bBegan' has a wrong offset!");

// Function AT.Quest_General.OnCharacterMoveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_OnCharacterMoveStateChanged final
{
public:
	EATCharacterMoveState                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnCharacterMoveStateChanged) == 0x000001, "Wrong alignment on Quest_General_OnCharacterMoveStateChanged");
static_assert(sizeof(Quest_General_OnCharacterMoveStateChanged) == 0x000001, "Wrong size on Quest_General_OnCharacterMoveStateChanged");
static_assert(offsetof(Quest_General_OnCharacterMoveStateChanged, Type) == 0x000000, "Member 'Quest_General_OnCharacterMoveStateChanged::Type' has a wrong offset!");

// Function AT.Quest_General.OnClosedDoor
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_OnClosedDoor final
{
public:
	bool                                          bInRoom;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DoorName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnClosedDoor) == 0x000004, "Wrong alignment on Quest_General_OnClosedDoor");
static_assert(sizeof(Quest_General_OnClosedDoor) == 0x000010, "Wrong size on Quest_General_OnClosedDoor");
static_assert(offsetof(Quest_General_OnClosedDoor, bInRoom) == 0x000000, "Member 'Quest_General_OnClosedDoor::bInRoom' has a wrong offset!");
static_assert(offsetof(Quest_General_OnClosedDoor, DoorName) == 0x000008, "Member 'Quest_General_OnClosedDoor::DoorName' has a wrong offset!");

// Function AT.Quest_General.OnCloseMenu
// 0x0018 (0x0018 - 0x0000)
struct Quest_General_OnCloseMenu final
{
public:
	EMenuType                                     MenuType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloseMenuReason                              CloseReason;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnCloseMenu) == 0x000008, "Wrong alignment on Quest_General_OnCloseMenu");
static_assert(sizeof(Quest_General_OnCloseMenu) == 0x000018, "Wrong size on Quest_General_OnCloseMenu");
static_assert(offsetof(Quest_General_OnCloseMenu, MenuType) == 0x000000, "Member 'Quest_General_OnCloseMenu::MenuType' has a wrong offset!");
static_assert(offsetof(Quest_General_OnCloseMenu, CloseReason) == 0x000001, "Member 'Quest_General_OnCloseMenu::CloseReason' has a wrong offset!");
static_assert(offsetof(Quest_General_OnCloseMenu, Param) == 0x000008, "Member 'Quest_General_OnCloseMenu::Param' has a wrong offset!");

// Function AT.Quest_General.OnCooking
// 0x0018 (0x0018 - 0x0000)
struct Quest_General_OnCooking final
{
public:
	EEventTimingType                              Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCooked;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompletedQuestPhase;                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CookedList;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnCooking) == 0x000008, "Wrong alignment on Quest_General_OnCooking");
static_assert(sizeof(Quest_General_OnCooking) == 0x000018, "Wrong size on Quest_General_OnCooking");
static_assert(offsetof(Quest_General_OnCooking, Timing) == 0x000000, "Member 'Quest_General_OnCooking::Timing' has a wrong offset!");
static_assert(offsetof(Quest_General_OnCooking, bCooked) == 0x000001, "Member 'Quest_General_OnCooking::bCooked' has a wrong offset!");
static_assert(offsetof(Quest_General_OnCooking, bCompletedQuestPhase) == 0x000002, "Member 'Quest_General_OnCooking::bCompletedQuestPhase' has a wrong offset!");
static_assert(offsetof(Quest_General_OnCooking, CookedList) == 0x000008, "Member 'Quest_General_OnCooking::CookedList' has a wrong offset!");

// Function AT.Quest_General.OnCryingEvent
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_OnCryingEvent final
{
public:
	EQuestCharacterBehaveState                    State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnCryingEvent) == 0x000001, "Wrong alignment on Quest_General_OnCryingEvent");
static_assert(sizeof(Quest_General_OnCryingEvent) == 0x000001, "Wrong size on Quest_General_OnCryingEvent");
static_assert(offsetof(Quest_General_OnCryingEvent, State) == 0x000000, "Member 'Quest_General_OnCryingEvent::State' has a wrong offset!");

// Function AT.Quest_General.OnDefeatedEnemy
// 0x000C (0x000C - 0x0000)
struct Quest_General_OnDefeatedEnemy final
{
public:
	ECHARACTER_TYPE                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequireCount;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnDefeatedEnemy) == 0x000004, "Wrong alignment on Quest_General_OnDefeatedEnemy");
static_assert(sizeof(Quest_General_OnDefeatedEnemy) == 0x00000C, "Wrong size on Quest_General_OnDefeatedEnemy");
static_assert(offsetof(Quest_General_OnDefeatedEnemy, Type) == 0x000000, "Member 'Quest_General_OnDefeatedEnemy::Type' has a wrong offset!");
static_assert(offsetof(Quest_General_OnDefeatedEnemy, CurrentCount) == 0x000004, "Member 'Quest_General_OnDefeatedEnemy::CurrentCount' has a wrong offset!");
static_assert(offsetof(Quest_General_OnDefeatedEnemy, RequireCount) == 0x000008, "Member 'Quest_General_OnDefeatedEnemy::RequireCount' has a wrong offset!");

// Function AT.Quest_General.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct Quest_General_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_General_OnDemoTiming) == 0x000004, "Wrong alignment on Quest_General_OnDemoTiming");
static_assert(sizeof(Quest_General_OnDemoTiming) == 0x000018, "Wrong size on Quest_General_OnDemoTiming");
static_assert(offsetof(Quest_General_OnDemoTiming, DemoType) == 0x000000, "Member 'Quest_General_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(Quest_General_OnDemoTiming, DemoTiming) == 0x000001, "Member 'Quest_General_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(Quest_General_OnDemoTiming, DemoName) == 0x000008, "Member 'Quest_General_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(Quest_General_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'Quest_General_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function AT.Quest_General.OnEventStart_UpdateQuestNavigation
// 0x0108 (0x0108 - 0x0000)
struct Quest_General_OnEventStart_UpdateQuestNavigation final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnEventStart_UpdateQuestNavigation) == 0x000008, "Wrong alignment on Quest_General_OnEventStart_UpdateQuestNavigation");
static_assert(sizeof(Quest_General_OnEventStart_UpdateQuestNavigation) == 0x000108, "Wrong size on Quest_General_OnEventStart_UpdateQuestNavigation");
static_assert(offsetof(Quest_General_OnEventStart_UpdateQuestNavigation, EventParam) == 0x000000, "Member 'Quest_General_OnEventStart_UpdateQuestNavigation::EventParam' has a wrong offset!");

// Function AT.Quest_General.OnExterminationBastionDestroy
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnExterminationBastionDestroy final
{
public:
	class FName                                   BastionId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnExterminationBastionDestroy) == 0x000004, "Wrong alignment on Quest_General_OnExterminationBastionDestroy");
static_assert(sizeof(Quest_General_OnExterminationBastionDestroy) == 0x000008, "Wrong size on Quest_General_OnExterminationBastionDestroy");
static_assert(offsetof(Quest_General_OnExterminationBastionDestroy, BastionId) == 0x000000, "Member 'Quest_General_OnExterminationBastionDestroy::BastionId' has a wrong offset!");

// Function AT.Quest_General.OnGetTresure
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnGetTresure final
{
public:
	class AActor*                                 TresureActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnGetTresure) == 0x000008, "Wrong alignment on Quest_General_OnGetTresure");
static_assert(sizeof(Quest_General_OnGetTresure) == 0x000008, "Wrong size on Quest_General_OnGetTresure");
static_assert(offsetof(Quest_General_OnGetTresure, TresureActor) == 0x000000, "Member 'Quest_General_OnGetTresure::TresureActor' has a wrong offset!");

// Function AT.Quest_General.OnGetTresureEvent
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnGetTresureEvent final
{
public:
	class AActor*                                 TresureActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnGetTresureEvent) == 0x000008, "Wrong alignment on Quest_General_OnGetTresureEvent");
static_assert(sizeof(Quest_General_OnGetTresureEvent) == 0x000008, "Wrong size on Quest_General_OnGetTresureEvent");
static_assert(offsetof(Quest_General_OnGetTresureEvent, TresureActor) == 0x000000, "Member 'Quest_General_OnGetTresureEvent::TresureActor' has a wrong offset!");

// Function AT.Quest_General.OnHunted
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_OnHunted final
{
public:
	class FName                                   TargetID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentNum;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequireNum;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnHunted) == 0x000004, "Wrong alignment on Quest_General_OnHunted");
static_assert(sizeof(Quest_General_OnHunted) == 0x000010, "Wrong size on Quest_General_OnHunted");
static_assert(offsetof(Quest_General_OnHunted, TargetID) == 0x000000, "Member 'Quest_General_OnHunted::TargetID' has a wrong offset!");
static_assert(offsetof(Quest_General_OnHunted, CurrentNum) == 0x000008, "Member 'Quest_General_OnHunted::CurrentNum' has a wrong offset!");
static_assert(offsetof(Quest_General_OnHunted, RequireNum) == 0x00000C, "Member 'Quest_General_OnHunted::RequireNum' has a wrong offset!");

// Function AT.Quest_General.OnInputPlayerMove
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnInputPlayerMove final
{
public:
	class FName                                   InputName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnInputPlayerMove) == 0x000004, "Wrong alignment on Quest_General_OnInputPlayerMove");
static_assert(sizeof(Quest_General_OnInputPlayerMove) == 0x000008, "Wrong size on Quest_General_OnInputPlayerMove");
static_assert(offsetof(Quest_General_OnInputPlayerMove, InputName) == 0x000000, "Member 'Quest_General_OnInputPlayerMove::InputName' has a wrong offset!");

// Function AT.Quest_General.OnLoadCompleted
// 0x0004 (0x0004 - 0x0000)
struct Quest_General_OnLoadCompleted final
{
public:
	int32                                         GenericFlg;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnLoadCompleted) == 0x000004, "Wrong alignment on Quest_General_OnLoadCompleted");
static_assert(sizeof(Quest_General_OnLoadCompleted) == 0x000004, "Wrong size on Quest_General_OnLoadCompleted");
static_assert(offsetof(Quest_General_OnLoadCompleted, GenericFlg) == 0x000000, "Member 'Quest_General_OnLoadCompleted::GenericFlg' has a wrong offset!");

// Function AT.Quest_General.OnOpenSimpleTalk
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_OnOpenSimpleTalk final
{
public:
	class FName                                   SimpleTalkId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnOpenSimpleTalk) == 0x000004, "Wrong alignment on Quest_General_OnOpenSimpleTalk");
static_assert(sizeof(Quest_General_OnOpenSimpleTalk) == 0x000010, "Wrong size on Quest_General_OnOpenSimpleTalk");
static_assert(offsetof(Quest_General_OnOpenSimpleTalk, SimpleTalkId) == 0x000000, "Member 'Quest_General_OnOpenSimpleTalk::SimpleTalkId' has a wrong offset!");
static_assert(offsetof(Quest_General_OnOpenSimpleTalk, MessageId) == 0x000008, "Member 'Quest_General_OnOpenSimpleTalk::MessageId' has a wrong offset!");

// Function AT.Quest_General.OnSpawnedPartyMember
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_OnSpawnedPartyMember final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnSpawnedPartyMember) == 0x000001, "Wrong alignment on Quest_General_OnSpawnedPartyMember");
static_assert(sizeof(Quest_General_OnSpawnedPartyMember) == 0x000001, "Wrong size on Quest_General_OnSpawnedPartyMember");
static_assert(offsetof(Quest_General_OnSpawnedPartyMember, CharacterType) == 0x000000, "Member 'Quest_General_OnSpawnedPartyMember::CharacterType' has a wrong offset!");

// Function AT.Quest_General.OnTalkedQuestActor
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnTalkedQuestActor final
{
public:
	class FName                                   QuestActorName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnTalkedQuestActor) == 0x000004, "Wrong alignment on Quest_General_OnTalkedQuestActor");
static_assert(sizeof(Quest_General_OnTalkedQuestActor) == 0x000008, "Wrong size on Quest_General_OnTalkedQuestActor");
static_assert(offsetof(Quest_General_OnTalkedQuestActor, QuestActorName) == 0x000000, "Member 'Quest_General_OnTalkedQuestActor::QuestActorName' has a wrong offset!");

// Function AT.Quest_General.OnVisibledSubLevel
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_OnVisibledSubLevel final
{
public:
	class FName                                   SubLevelName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_OnVisibledSubLevel) == 0x000004, "Wrong alignment on Quest_General_OnVisibledSubLevel");
static_assert(sizeof(Quest_General_OnVisibledSubLevel) == 0x000008, "Wrong size on Quest_General_OnVisibledSubLevel");
static_assert(offsetof(Quest_General_OnVisibledSubLevel, SubLevelName) == 0x000000, "Member 'Quest_General_OnVisibledSubLevel::SubLevelName' has a wrong offset!");

// Function AT.Quest_General.PhaseRangeCheckBeginTimingOnly
// 0x0018 (0x0018 - 0x0000)
struct Quest_General_PhaseRangeCheckBeginTimingOnly final
{
public:
	class FName                                   InPhaseStartId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPhaseEndId;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_General_PhaseRangeCheckBeginTimingOnly) == 0x000004, "Wrong alignment on Quest_General_PhaseRangeCheckBeginTimingOnly");
static_assert(sizeof(Quest_General_PhaseRangeCheckBeginTimingOnly) == 0x000018, "Wrong size on Quest_General_PhaseRangeCheckBeginTimingOnly");
static_assert(offsetof(Quest_General_PhaseRangeCheckBeginTimingOnly, InPhaseStartId) == 0x000000, "Member 'Quest_General_PhaseRangeCheckBeginTimingOnly::InPhaseStartId' has a wrong offset!");
static_assert(offsetof(Quest_General_PhaseRangeCheckBeginTimingOnly, InPhaseEndId) == 0x000008, "Member 'Quest_General_PhaseRangeCheckBeginTimingOnly::InPhaseEndId' has a wrong offset!");
static_assert(offsetof(Quest_General_PhaseRangeCheckBeginTimingOnly, ReturnValue) == 0x000010, "Member 'Quest_General_PhaseRangeCheckBeginTimingOnly::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.PhaseTimingCheck
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_PhaseTimingCheck final
{
public:
	class FName                                   PhaseID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_GENERAL_TIMING                         Timing;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_General_PhaseTimingCheck) == 0x000004, "Wrong alignment on Quest_General_PhaseTimingCheck");
static_assert(sizeof(Quest_General_PhaseTimingCheck) == 0x000010, "Wrong size on Quest_General_PhaseTimingCheck");
static_assert(offsetof(Quest_General_PhaseTimingCheck, PhaseID) == 0x000000, "Member 'Quest_General_PhaseTimingCheck::PhaseID' has a wrong offset!");
static_assert(offsetof(Quest_General_PhaseTimingCheck, Timing) == 0x000008, "Member 'Quest_General_PhaseTimingCheck::Timing' has a wrong offset!");
static_assert(offsetof(Quest_General_PhaseTimingCheck, ReturnValue) == 0x000009, "Member 'Quest_General_PhaseTimingCheck::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.PhaseTimingCheckFromList
// 0x0028 (0x0028 - 0x0000)
struct Quest_General_PhaseTimingCheckFromList final
{
public:
	TArray<class FName>                           PhaseIdList;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EQUEST_GENERAL_TIMING                         Timing;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FunctionId;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_General_PhaseTimingCheckFromList) == 0x000008, "Wrong alignment on Quest_General_PhaseTimingCheckFromList");
static_assert(sizeof(Quest_General_PhaseTimingCheckFromList) == 0x000028, "Wrong size on Quest_General_PhaseTimingCheckFromList");
static_assert(offsetof(Quest_General_PhaseTimingCheckFromList, PhaseIdList) == 0x000000, "Member 'Quest_General_PhaseTimingCheckFromList::PhaseIdList' has a wrong offset!");
static_assert(offsetof(Quest_General_PhaseTimingCheckFromList, Timing) == 0x000010, "Member 'Quest_General_PhaseTimingCheckFromList::Timing' has a wrong offset!");
static_assert(offsetof(Quest_General_PhaseTimingCheckFromList, FunctionId) == 0x000018, "Member 'Quest_General_PhaseTimingCheckFromList::FunctionId' has a wrong offset!");
static_assert(offsetof(Quest_General_PhaseTimingCheckFromList, ReturnValue) == 0x000020, "Member 'Quest_General_PhaseTimingCheckFromList::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.ReceiveDemoEvent
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_ReceiveDemoEvent final
{
public:
	class FName                                   DemoName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             Timing;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_General_ReceiveDemoEvent) == 0x000004, "Wrong alignment on Quest_General_ReceiveDemoEvent");
static_assert(sizeof(Quest_General_ReceiveDemoEvent) == 0x000010, "Wrong size on Quest_General_ReceiveDemoEvent");
static_assert(offsetof(Quest_General_ReceiveDemoEvent, DemoName) == 0x000000, "Member 'Quest_General_ReceiveDemoEvent::DemoName' has a wrong offset!");
static_assert(offsetof(Quest_General_ReceiveDemoEvent, Timing) == 0x000008, "Member 'Quest_General_ReceiveDemoEvent::Timing' has a wrong offset!");

// Function AT.Quest_General.RemoveCharacterChangeDelegate
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_RemoveCharacterChangeDelegate final
{
public:
	class FName                                   UniqueId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_RemoveCharacterChangeDelegate) == 0x000004, "Wrong alignment on Quest_General_RemoveCharacterChangeDelegate");
static_assert(sizeof(Quest_General_RemoveCharacterChangeDelegate) == 0x000008, "Wrong size on Quest_General_RemoveCharacterChangeDelegate");
static_assert(offsetof(Quest_General_RemoveCharacterChangeDelegate, UniqueId) == 0x000000, "Member 'Quest_General_RemoveCharacterChangeDelegate::UniqueId' has a wrong offset!");

// Function AT.Quest_General.RemoveMapIconOffset
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_RemoveMapIconOffset final
{
public:
	EMapIcon                                      InIconId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_RemoveMapIconOffset) == 0x000001, "Wrong alignment on Quest_General_RemoveMapIconOffset");
static_assert(sizeof(Quest_General_RemoveMapIconOffset) == 0x000001, "Wrong size on Quest_General_RemoveMapIconOffset");
static_assert(offsetof(Quest_General_RemoveMapIconOffset, InIconId) == 0x000000, "Member 'Quest_General_RemoveMapIconOffset::InIconId' has a wrong offset!");

// Function AT.Quest_General.ResetTimingObserverInterval
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_ResetTimingObserverInterval final
{
public:
	class AActor*                                 InTimingObserver;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_ResetTimingObserverInterval) == 0x000008, "Wrong alignment on Quest_General_ResetTimingObserverInterval");
static_assert(sizeof(Quest_General_ResetTimingObserverInterval) == 0x000008, "Wrong size on Quest_General_ResetTimingObserverInterval");
static_assert(offsetof(Quest_General_ResetTimingObserverInterval, InTimingObserver) == 0x000000, "Member 'Quest_General_ResetTimingObserverInterval::InTimingObserver' has a wrong offset!");

// Function AT.Quest_General.SetCharacterChangeDelegate
// 0x0008 (0x0008 - 0x0000)
struct Quest_General_SetCharacterChangeDelegate final
{
public:
	class FName                                   UniqueId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_SetCharacterChangeDelegate) == 0x000004, "Wrong alignment on Quest_General_SetCharacterChangeDelegate");
static_assert(sizeof(Quest_General_SetCharacterChangeDelegate) == 0x000008, "Wrong size on Quest_General_SetCharacterChangeDelegate");
static_assert(offsetof(Quest_General_SetCharacterChangeDelegate, UniqueId) == 0x000000, "Member 'Quest_General_SetCharacterChangeDelegate::UniqueId' has a wrong offset!");

// Function AT.Quest_General.SetDisableNavigation
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_SetDisableNavigation final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_SetDisableNavigation) == 0x000001, "Wrong alignment on Quest_General_SetDisableNavigation");
static_assert(sizeof(Quest_General_SetDisableNavigation) == 0x000001, "Wrong size on Quest_General_SetDisableNavigation");
static_assert(offsetof(Quest_General_SetDisableNavigation, bDisable) == 0x000000, "Member 'Quest_General_SetDisableNavigation::bDisable' has a wrong offset!");

// Function AT.Quest_General.SetGenericFlg
// 0x0004 (0x0004 - 0x0000)
struct Quest_General_SetGenericFlg final
{
public:
	int32                                         Flg;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_SetGenericFlg) == 0x000004, "Wrong alignment on Quest_General_SetGenericFlg");
static_assert(sizeof(Quest_General_SetGenericFlg) == 0x000004, "Wrong size on Quest_General_SetGenericFlg");
static_assert(offsetof(Quest_General_SetGenericFlg, Flg) == 0x000000, "Member 'Quest_General_SetGenericFlg::Flg' has a wrong offset!");

// Function AT.Quest_General.SetVariableStringMessageId
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_SetVariableStringMessageId final
{
public:
	class FString                                 MessageId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_SetVariableStringMessageId) == 0x000008, "Wrong alignment on Quest_General_SetVariableStringMessageId");
static_assert(sizeof(Quest_General_SetVariableStringMessageId) == 0x000010, "Wrong size on Quest_General_SetVariableStringMessageId");
static_assert(offsetof(Quest_General_SetVariableStringMessageId, MessageId) == 0x000000, "Member 'Quest_General_SetVariableStringMessageId::MessageId' has a wrong offset!");

// Function AT.Quest_General.SetVisibilityMenuBG
// 0x0001 (0x0001 - 0x0000)
struct Quest_General_SetVisibilityMenuBG final
{
public:
	bool                                          bIsVisibe;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_SetVisibilityMenuBG) == 0x000001, "Wrong alignment on Quest_General_SetVisibilityMenuBG");
static_assert(sizeof(Quest_General_SetVisibilityMenuBG) == 0x000001, "Wrong size on Quest_General_SetVisibilityMenuBG");
static_assert(offsetof(Quest_General_SetVisibilityMenuBG, bIsVisibe) == 0x000000, "Member 'Quest_General_SetVisibilityMenuBG::bIsVisibe' has a wrong offset!");

// Function AT.Quest_General.SpawnQuestActor
// 0x0060 (0x0060 - 0x0000)
struct Quest_General_SpawnQuestActor final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ClassName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Quest_General_SpawnQuestActor) == 0x000010, "Wrong alignment on Quest_General_SpawnQuestActor");
static_assert(sizeof(Quest_General_SpawnQuestActor) == 0x000060, "Wrong size on Quest_General_SpawnQuestActor");
static_assert(offsetof(Quest_General_SpawnQuestActor, ID) == 0x000000, "Member 'Quest_General_SpawnQuestActor::ID' has a wrong offset!");
static_assert(offsetof(Quest_General_SpawnQuestActor, ClassName) == 0x000010, "Member 'Quest_General_SpawnQuestActor::ClassName' has a wrong offset!");
static_assert(offsetof(Quest_General_SpawnQuestActor, Transform) == 0x000020, "Member 'Quest_General_SpawnQuestActor::Transform' has a wrong offset!");
static_assert(offsetof(Quest_General_SpawnQuestActor, ReturnValue) == 0x000050, "Member 'Quest_General_SpawnQuestActor::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.GetGenericFlg
// 0x0004 (0x0004 - 0x0000)
struct Quest_General_GetGenericFlg final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_GetGenericFlg) == 0x000004, "Wrong alignment on Quest_General_GetGenericFlg");
static_assert(sizeof(Quest_General_GetGenericFlg) == 0x000004, "Wrong size on Quest_General_GetGenericFlg");
static_assert(offsetof(Quest_General_GetGenericFlg, ReturnValue) == 0x000000, "Member 'Quest_General_GetGenericFlg::ReturnValue' has a wrong offset!");

// Function AT.Quest_General.GetVariableStringMessageId
// 0x0010 (0x0010 - 0x0000)
struct Quest_General_GetVariableStringMessageId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quest_General_GetVariableStringMessageId) == 0x000008, "Wrong alignment on Quest_General_GetVariableStringMessageId");
static_assert(sizeof(Quest_General_GetVariableStringMessageId) == 0x000010, "Wrong size on Quest_General_GetVariableStringMessageId");
static_assert(offsetof(Quest_General_GetVariableStringMessageId, ReturnValue) == 0x000000, "Member 'Quest_General_GetVariableStringMessageId::ReturnValue' has a wrong offset!");

// Function AT.QuestMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct QuestMenu_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestMenu_MouseClickDecide) == 0x000008, "Wrong alignment on QuestMenu_MouseClickDecide");
static_assert(sizeof(QuestMenu_MouseClickDecide) == 0x0000A8, "Wrong size on QuestMenu_MouseClickDecide");
static_assert(offsetof(QuestMenu_MouseClickDecide, InGeometry) == 0x000000, "Member 'QuestMenu_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(QuestMenu_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'QuestMenu_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.QuestPhase_BattleEnd.OnBattleEnd
// 0x0008 (0x0008 - 0x0000)
struct QuestPhase_BattleEnd_OnBattleEnd final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestPhase_BattleEnd_OnBattleEnd) == 0x000004, "Wrong alignment on QuestPhase_BattleEnd_OnBattleEnd");
static_assert(sizeof(QuestPhase_BattleEnd_OnBattleEnd) == 0x000008, "Wrong size on QuestPhase_BattleEnd_OnBattleEnd");
static_assert(offsetof(QuestPhase_BattleEnd_OnBattleEnd, ID) == 0x000000, "Member 'QuestPhase_BattleEnd_OnBattleEnd::ID' has a wrong offset!");

// Function AT.QuestPhase_Demo.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct QuestPhase_Demo_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueFlag;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestPhase_Demo_OnDemoTiming) == 0x000004, "Wrong alignment on QuestPhase_Demo_OnDemoTiming");
static_assert(sizeof(QuestPhase_Demo_OnDemoTiming) == 0x000018, "Wrong size on QuestPhase_Demo_OnDemoTiming");
static_assert(offsetof(QuestPhase_Demo_OnDemoTiming, DemoType) == 0x000000, "Member 'QuestPhase_Demo_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(QuestPhase_Demo_OnDemoTiming, DemoTiming) == 0x000001, "Member 'QuestPhase_Demo_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(QuestPhase_Demo_OnDemoTiming, DemoName) == 0x000008, "Member 'QuestPhase_Demo_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(QuestPhase_Demo_OnDemoTiming, bContinueFlag) == 0x000010, "Member 'QuestPhase_Demo_OnDemoTiming::bContinueFlag' has a wrong offset!");

// Function AT.RaceGameManager.GetRetireFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceGameManager_GetRetireFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceGameManager_GetRetireFlag) == 0x000001, "Wrong alignment on RaceGameManager_GetRetireFlag");
static_assert(sizeof(RaceGameManager_GetRetireFlag) == 0x000001, "Wrong size on RaceGameManager_GetRetireFlag");
static_assert(offsetof(RaceGameManager_GetRetireFlag, ReturnValue) == 0x000000, "Member 'RaceGameManager_GetRetireFlag::ReturnValue' has a wrong offset!");

// Function AT.RaceGameManager.GetTimeUpFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceGameManager_GetTimeUpFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceGameManager_GetTimeUpFlag) == 0x000001, "Wrong alignment on RaceGameManager_GetTimeUpFlag");
static_assert(sizeof(RaceGameManager_GetTimeUpFlag) == 0x000001, "Wrong size on RaceGameManager_GetTimeUpFlag");
static_assert(offsetof(RaceGameManager_GetTimeUpFlag, ReturnValue) == 0x000000, "Member 'RaceGameManager_GetTimeUpFlag::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.CalcCylinderBoneScale
// 0x0010 (0x0010 - 0x0000)
struct RideAnimInstance_CalcCylinderBoneScale final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_CalcCylinderBoneScale) == 0x000004, "Wrong alignment on RideAnimInstance_CalcCylinderBoneScale");
static_assert(sizeof(RideAnimInstance_CalcCylinderBoneScale) == 0x000010, "Wrong size on RideAnimInstance_CalcCylinderBoneScale");
static_assert(offsetof(RideAnimInstance_CalcCylinderBoneScale, bRight) == 0x000000, "Member 'RideAnimInstance_CalcCylinderBoneScale::bRight' has a wrong offset!");
static_assert(offsetof(RideAnimInstance_CalcCylinderBoneScale, ReturnValue) == 0x000004, "Member 'RideAnimInstance_CalcCylinderBoneScale::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.CalcPistonBoneRocation
// 0x0010 (0x0010 - 0x0000)
struct RideAnimInstance_CalcPistonBoneRocation final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpper;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_CalcPistonBoneRocation) == 0x000004, "Wrong alignment on RideAnimInstance_CalcPistonBoneRocation");
static_assert(sizeof(RideAnimInstance_CalcPistonBoneRocation) == 0x000010, "Wrong size on RideAnimInstance_CalcPistonBoneRocation");
static_assert(offsetof(RideAnimInstance_CalcPistonBoneRocation, bRight) == 0x000000, "Member 'RideAnimInstance_CalcPistonBoneRocation::bRight' has a wrong offset!");
static_assert(offsetof(RideAnimInstance_CalcPistonBoneRocation, bUpper) == 0x000001, "Member 'RideAnimInstance_CalcPistonBoneRocation::bUpper' has a wrong offset!");
static_assert(offsetof(RideAnimInstance_CalcPistonBoneRocation, ReturnValue) == 0x000004, "Member 'RideAnimInstance_CalcPistonBoneRocation::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.GetTwinFootCharacter
// 0x0008 (0x0008 - 0x0000)
struct RideAnimInstance_GetTwinFootCharacter final
{
public:
	class ATwinFoot*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_GetTwinFootCharacter) == 0x000008, "Wrong alignment on RideAnimInstance_GetTwinFootCharacter");
static_assert(sizeof(RideAnimInstance_GetTwinFootCharacter) == 0x000008, "Wrong size on RideAnimInstance_GetTwinFootCharacter");
static_assert(offsetof(RideAnimInstance_GetTwinFootCharacter, ReturnValue) == 0x000000, "Member 'RideAnimInstance_GetTwinFootCharacter::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.IsFall
// 0x0001 (0x0001 - 0x0000)
struct RideAnimInstance_IsFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_IsFall) == 0x000001, "Wrong alignment on RideAnimInstance_IsFall");
static_assert(sizeof(RideAnimInstance_IsFall) == 0x000001, "Wrong size on RideAnimInstance_IsFall");
static_assert(offsetof(RideAnimInstance_IsFall, ReturnValue) == 0x000000, "Member 'RideAnimInstance_IsFall::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.IsJump
// 0x0001 (0x0001 - 0x0000)
struct RideAnimInstance_IsJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_IsJump) == 0x000001, "Wrong alignment on RideAnimInstance_IsJump");
static_assert(sizeof(RideAnimInstance_IsJump) == 0x000001, "Wrong size on RideAnimInstance_IsJump");
static_assert(offsetof(RideAnimInstance_IsJump, ReturnValue) == 0x000000, "Member 'RideAnimInstance_IsJump::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.IsJumpAnt
// 0x0001 (0x0001 - 0x0000)
struct RideAnimInstance_IsJumpAnt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_IsJumpAnt) == 0x000001, "Wrong alignment on RideAnimInstance_IsJumpAnt");
static_assert(sizeof(RideAnimInstance_IsJumpAnt) == 0x000001, "Wrong size on RideAnimInstance_IsJumpAnt");
static_assert(offsetof(RideAnimInstance_IsJumpAnt, ReturnValue) == 0x000000, "Member 'RideAnimInstance_IsJumpAnt::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.IsLand
// 0x0001 (0x0001 - 0x0000)
struct RideAnimInstance_IsLand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_IsLand) == 0x000001, "Wrong alignment on RideAnimInstance_IsLand");
static_assert(sizeof(RideAnimInstance_IsLand) == 0x000001, "Wrong size on RideAnimInstance_IsLand");
static_assert(offsetof(RideAnimInstance_IsLand, ReturnValue) == 0x000000, "Member 'RideAnimInstance_IsLand::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.IsOwnerCharaMachine
// 0x0001 (0x0001 - 0x0000)
struct RideAnimInstance_IsOwnerCharaMachine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_IsOwnerCharaMachine) == 0x000001, "Wrong alignment on RideAnimInstance_IsOwnerCharaMachine");
static_assert(sizeof(RideAnimInstance_IsOwnerCharaMachine) == 0x000001, "Wrong size on RideAnimInstance_IsOwnerCharaMachine");
static_assert(offsetof(RideAnimInstance_IsOwnerCharaMachine, ReturnValue) == 0x000000, "Member 'RideAnimInstance_IsOwnerCharaMachine::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.IsRun
// 0x0001 (0x0001 - 0x0000)
struct RideAnimInstance_IsRun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_IsRun) == 0x000001, "Wrong alignment on RideAnimInstance_IsRun");
static_assert(sizeof(RideAnimInstance_IsRun) == 0x000001, "Wrong size on RideAnimInstance_IsRun");
static_assert(offsetof(RideAnimInstance_IsRun, ReturnValue) == 0x000000, "Member 'RideAnimInstance_IsRun::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.IsStand
// 0x0001 (0x0001 - 0x0000)
struct RideAnimInstance_IsStand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_IsStand) == 0x000001, "Wrong alignment on RideAnimInstance_IsStand");
static_assert(sizeof(RideAnimInstance_IsStand) == 0x000001, "Wrong size on RideAnimInstance_IsStand");
static_assert(offsetof(RideAnimInstance_IsStand, ReturnValue) == 0x000000, "Member 'RideAnimInstance_IsStand::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.IsWalk
// 0x0001 (0x0001 - 0x0000)
struct RideAnimInstance_IsWalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_IsWalk) == 0x000001, "Wrong alignment on RideAnimInstance_IsWalk");
static_assert(sizeof(RideAnimInstance_IsWalk) == 0x000001, "Wrong size on RideAnimInstance_IsWalk");
static_assert(offsetof(RideAnimInstance_IsWalk, ReturnValue) == 0x000000, "Member 'RideAnimInstance_IsWalk::ReturnValue' has a wrong offset!");

// Function AT.RideAnimInstance.UpdateAfterIK
// 0x0004 (0x0004 - 0x0000)
struct RideAnimInstance_UpdateAfterIK final
{
public:
	float                                         InDTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RideAnimInstance_UpdateAfterIK) == 0x000004, "Wrong alignment on RideAnimInstance_UpdateAfterIK");
static_assert(sizeof(RideAnimInstance_UpdateAfterIK) == 0x000004, "Wrong size on RideAnimInstance_UpdateAfterIK");
static_assert(offsetof(RideAnimInstance_UpdateAfterIK, InDTime) == 0x000000, "Member 'RideAnimInstance_UpdateAfterIK::InDTime' has a wrong offset!");

// Function AT.RootMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct RootMenu_MouseClickDecide final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMenu_MouseClickDecide) == 0x000008, "Wrong alignment on RootMenu_MouseClickDecide");
static_assert(sizeof(RootMenu_MouseClickDecide) == 0x0000A8, "Wrong size on RootMenu_MouseClickDecide");
static_assert(offsetof(RootMenu_MouseClickDecide, MyGeometry) == 0x000000, "Member 'RootMenu_MouseClickDecide::MyGeometry' has a wrong offset!");
static_assert(offsetof(RootMenu_MouseClickDecide, MouseEvent) == 0x000038, "Member 'RootMenu_MouseClickDecide::MouseEvent' has a wrong offset!");

// Function AT.RootMenu.MouseClickYB
// 0x00A8 (0x00A8 - 0x0000)
struct RootMenu_MouseClickYB final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMenu_MouseClickYB) == 0x000008, "Wrong alignment on RootMenu_MouseClickYB");
static_assert(sizeof(RootMenu_MouseClickYB) == 0x0000A8, "Wrong size on RootMenu_MouseClickYB");
static_assert(offsetof(RootMenu_MouseClickYB, MyGeometry) == 0x000000, "Member 'RootMenu_MouseClickYB::MyGeometry' has a wrong offset!");
static_assert(offsetof(RootMenu_MouseClickYB, MouseEvent) == 0x000038, "Member 'RootMenu_MouseClickYB::MouseEvent' has a wrong offset!");

// Function AT.RootMenu.OnSelectItem
// 0x0004 (0x0004 - 0x0000)
struct RootMenu_OnSelectItem final
{
public:
	int32                                         SELECT;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMenu_OnSelectItem) == 0x000004, "Wrong alignment on RootMenu_OnSelectItem");
static_assert(sizeof(RootMenu_OnSelectItem) == 0x000004, "Wrong size on RootMenu_OnSelectItem");
static_assert(offsetof(RootMenu_OnSelectItem, SELECT) == 0x000000, "Member 'RootMenu_OnSelectItem::SELECT' has a wrong offset!");

// Function AT.RootMenu.PlayTownBGMWhenMainMenuRetryOpenModeWasFadeOut
// 0x0001 (0x0001 - 0x0000)
struct RootMenu_PlayTownBGMWhenMainMenuRetryOpenModeWasFadeOut final
{
public:
	bool                                          bIsFadeIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMenu_PlayTownBGMWhenMainMenuRetryOpenModeWasFadeOut) == 0x000001, "Wrong alignment on RootMenu_PlayTownBGMWhenMainMenuRetryOpenModeWasFadeOut");
static_assert(sizeof(RootMenu_PlayTownBGMWhenMainMenuRetryOpenModeWasFadeOut) == 0x000001, "Wrong size on RootMenu_PlayTownBGMWhenMainMenuRetryOpenModeWasFadeOut");
static_assert(offsetof(RootMenu_PlayTownBGMWhenMainMenuRetryOpenModeWasFadeOut, bIsFadeIn) == 0x000000, "Member 'RootMenu_PlayTownBGMWhenMainMenuRetryOpenModeWasFadeOut::bIsFadeIn' has a wrong offset!");

// Function AT.SaveMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct SaveMenu_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveMenu_MouseClickDecide) == 0x000008, "Wrong alignment on SaveMenu_MouseClickDecide");
static_assert(sizeof(SaveMenu_MouseClickDecide) == 0x0000A8, "Wrong size on SaveMenu_MouseClickDecide");
static_assert(offsetof(SaveMenu_MouseClickDecide, InGeometry) == 0x000000, "Member 'SaveMenu_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(SaveMenu_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'SaveMenu_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.SaveMenu.MouseWheel
// 0x0004 (0x0004 - 0x0000)
struct SaveMenu_MouseWheel final
{
public:
	float                                         InDirection;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveMenu_MouseWheel) == 0x000004, "Wrong alignment on SaveMenu_MouseWheel");
static_assert(sizeof(SaveMenu_MouseWheel) == 0x000004, "Wrong size on SaveMenu_MouseWheel");
static_assert(offsetof(SaveMenu_MouseWheel, InDirection) == 0x000000, "Member 'SaveMenu_MouseWheel::InDirection' has a wrong offset!");

// Function AT.SpawnerFruitVolume.OnChangeProgress
// 0x0008 (0x0008 - 0x0000)
struct SpawnerFruitVolume_OnChangeProgress final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnerFruitVolume_OnChangeProgress) == 0x000004, "Wrong alignment on SpawnerFruitVolume_OnChangeProgress");
static_assert(sizeof(SpawnerFruitVolume_OnChangeProgress) == 0x000008, "Wrong size on SpawnerFruitVolume_OnChangeProgress");
static_assert(offsetof(SpawnerFruitVolume_OnChangeProgress, ProgressID) == 0x000000, "Member 'SpawnerFruitVolume_OnChangeProgress::ProgressID' has a wrong offset!");

// Function AT.TerrainDecoratePhotonEntity.OnLevelRemoved
// 0x0010 (0x0010 - 0x0000)
struct TerrainDecoratePhotonEntity_OnLevelRemoved final
{
public:
	class ULevel*                                 InLevel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 InWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TerrainDecoratePhotonEntity_OnLevelRemoved) == 0x000008, "Wrong alignment on TerrainDecoratePhotonEntity_OnLevelRemoved");
static_assert(sizeof(TerrainDecoratePhotonEntity_OnLevelRemoved) == 0x000010, "Wrong size on TerrainDecoratePhotonEntity_OnLevelRemoved");
static_assert(offsetof(TerrainDecoratePhotonEntity_OnLevelRemoved, InLevel) == 0x000000, "Member 'TerrainDecoratePhotonEntity_OnLevelRemoved::InLevel' has a wrong offset!");
static_assert(offsetof(TerrainDecoratePhotonEntity_OnLevelRemoved, InWorld) == 0x000008, "Member 'TerrainDecoratePhotonEntity_OnLevelRemoved::InWorld' has a wrong offset!");

// Function AT.TerrainDecorateManager.ForbidCreatingPhoton
// 0x0008 (0x0008 - 0x0000)
struct TerrainDecorateManager_ForbidCreatingPhoton final
{
public:
	struct FGeneralTalkEventArgment               GeneralTalkEvent;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TerrainDecorateManager_ForbidCreatingPhoton) == 0x000001, "Wrong alignment on TerrainDecorateManager_ForbidCreatingPhoton");
static_assert(sizeof(TerrainDecorateManager_ForbidCreatingPhoton) == 0x000008, "Wrong size on TerrainDecorateManager_ForbidCreatingPhoton");
static_assert(offsetof(TerrainDecorateManager_ForbidCreatingPhoton, GeneralTalkEvent) == 0x000000, "Member 'TerrainDecorateManager_ForbidCreatingPhoton::GeneralTalkEvent' has a wrong offset!");

// Function AT.TestFieldBGMTriggerBox.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct TestFieldBGMTriggerBox_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OverlapInfo;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestFieldBGMTriggerBox_OnBeginOverlap) == 0x000008, "Wrong alignment on TestFieldBGMTriggerBox_OnBeginOverlap");
static_assert(sizeof(TestFieldBGMTriggerBox_OnBeginOverlap) == 0x0000A8, "Wrong size on TestFieldBGMTriggerBox_OnBeginOverlap");
static_assert(offsetof(TestFieldBGMTriggerBox_OnBeginOverlap, OverlappedComp) == 0x000000, "Member 'TestFieldBGMTriggerBox_OnBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnBeginOverlap, Other) == 0x000008, "Member 'TestFieldBGMTriggerBox_OnBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnBeginOverlap, OtherComp) == 0x000010, "Member 'TestFieldBGMTriggerBox_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'TestFieldBGMTriggerBox_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'TestFieldBGMTriggerBox_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnBeginOverlap, OverlapInfo) == 0x000020, "Member 'TestFieldBGMTriggerBox_OnBeginOverlap::OverlapInfo' has a wrong offset!");

// Function AT.TestFieldBGMTriggerBox.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct TestFieldBGMTriggerBox_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TestFieldBGMTriggerBox_OnEndOverlap) == 0x000008, "Wrong alignment on TestFieldBGMTriggerBox_OnEndOverlap");
static_assert(sizeof(TestFieldBGMTriggerBox_OnEndOverlap) == 0x000020, "Wrong size on TestFieldBGMTriggerBox_OnEndOverlap");
static_assert(offsetof(TestFieldBGMTriggerBox_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'TestFieldBGMTriggerBox_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnEndOverlap, OtherActor) == 0x000008, "Member 'TestFieldBGMTriggerBox_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnEndOverlap, OtherComp) == 0x000010, "Member 'TestFieldBGMTriggerBox_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'TestFieldBGMTriggerBox_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function AT.TestFieldBGMTriggerBox.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct TestFieldBGMTriggerBox_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestFieldBGMTriggerBox_OnOverlapBegin) == 0x000008, "Wrong alignment on TestFieldBGMTriggerBox_OnOverlapBegin");
static_assert(sizeof(TestFieldBGMTriggerBox_OnOverlapBegin) == 0x000010, "Wrong size on TestFieldBGMTriggerBox_OnOverlapBegin");
static_assert(offsetof(TestFieldBGMTriggerBox_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'TestFieldBGMTriggerBox_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnOverlapBegin, OtherActor) == 0x000008, "Member 'TestFieldBGMTriggerBox_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function AT.TestFieldBGMTriggerBox.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct TestFieldBGMTriggerBox_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestFieldBGMTriggerBox_OnOverlapEnd) == 0x000008, "Wrong alignment on TestFieldBGMTriggerBox_OnOverlapEnd");
static_assert(sizeof(TestFieldBGMTriggerBox_OnOverlapEnd) == 0x000010, "Wrong size on TestFieldBGMTriggerBox_OnOverlapEnd");
static_assert(offsetof(TestFieldBGMTriggerBox_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'TestFieldBGMTriggerBox_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TestFieldBGMTriggerBox_OnOverlapEnd, OtherActor) == 0x000008, "Member 'TestFieldBGMTriggerBox_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function AT.TestStartBGMActor.OnCompletedInitialize
// 0x0108 (0x0108 - 0x0000)
struct TestStartBGMActor_OnCompletedInitialize final
{
public:
	struct FEventParam                            EventParam;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestStartBGMActor_OnCompletedInitialize) == 0x000008, "Wrong alignment on TestStartBGMActor_OnCompletedInitialize");
static_assert(sizeof(TestStartBGMActor_OnCompletedInitialize) == 0x000108, "Wrong size on TestStartBGMActor_OnCompletedInitialize");
static_assert(offsetof(TestStartBGMActor_OnCompletedInitialize, EventParam) == 0x000000, "Member 'TestStartBGMActor_OnCompletedInitialize::EventParam' has a wrong offset!");

// Function AT.TipsMenu.MouseClickDecide
// 0x00A8 (0x00A8 - 0x0000)
struct TipsMenu_MouseClickDecide final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TipsMenu_MouseClickDecide) == 0x000008, "Wrong alignment on TipsMenu_MouseClickDecide");
static_assert(sizeof(TipsMenu_MouseClickDecide) == 0x0000A8, "Wrong size on TipsMenu_MouseClickDecide");
static_assert(offsetof(TipsMenu_MouseClickDecide, InGeometry) == 0x000000, "Member 'TipsMenu_MouseClickDecide::InGeometry' has a wrong offset!");
static_assert(offsetof(TipsMenu_MouseClickDecide, InMouseEvent) == 0x000038, "Member 'TipsMenu_MouseClickDecide::InMouseEvent' has a wrong offset!");

// Function AT.TitleHud.GetMapInfo
// 0x0018 (0x0018 - 0x0000)
struct TitleHud_GetMapInfo final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quest_phase;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleHud_GetMapInfo) == 0x000008, "Wrong alignment on TitleHud_GetMapInfo");
static_assert(sizeof(TitleHud_GetMapInfo) == 0x000018, "Wrong size on TitleHud_GetMapInfo");
static_assert(offsetof(TitleHud_GetMapInfo, Index_0) == 0x000000, "Member 'TitleHud_GetMapInfo::Index_0' has a wrong offset!");
static_assert(offsetof(TitleHud_GetMapInfo, Quest_phase) == 0x000004, "Member 'TitleHud_GetMapInfo::Quest_phase' has a wrong offset!");
static_assert(offsetof(TitleHud_GetMapInfo, ReturnValue) == 0x000008, "Member 'TitleHud_GetMapInfo::ReturnValue' has a wrong offset!");

// Function AT.TitleHud.IsSystemLoaded
// 0x0001 (0x0001 - 0x0000)
struct TitleHud_IsSystemLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleHud_IsSystemLoaded) == 0x000001, "Wrong alignment on TitleHud_IsSystemLoaded");
static_assert(sizeof(TitleHud_IsSystemLoaded) == 0x000001, "Wrong size on TitleHud_IsSystemLoaded");
static_assert(offsetof(TitleHud_IsSystemLoaded, ReturnValue) == 0x000000, "Member 'TitleHud_IsSystemLoaded::ReturnValue' has a wrong offset!");

// Function AT.TownMobComponent.OnCollisionHit_FromOwner
// 0x00B0 (0x00B0 - 0x0000)
struct TownMobComponent_OnCollisionHit_FromOwner final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TownMobComponent_OnCollisionHit_FromOwner) == 0x000008, "Wrong alignment on TownMobComponent_OnCollisionHit_FromOwner");
static_assert(sizeof(TownMobComponent_OnCollisionHit_FromOwner) == 0x0000B0, "Wrong size on TownMobComponent_OnCollisionHit_FromOwner");
static_assert(offsetof(TownMobComponent_OnCollisionHit_FromOwner, HitComponent) == 0x000000, "Member 'TownMobComponent_OnCollisionHit_FromOwner::HitComponent' has a wrong offset!");
static_assert(offsetof(TownMobComponent_OnCollisionHit_FromOwner, OtherActor) == 0x000008, "Member 'TownMobComponent_OnCollisionHit_FromOwner::OtherActor' has a wrong offset!");
static_assert(offsetof(TownMobComponent_OnCollisionHit_FromOwner, OtherComp) == 0x000010, "Member 'TownMobComponent_OnCollisionHit_FromOwner::OtherComp' has a wrong offset!");
static_assert(offsetof(TownMobComponent_OnCollisionHit_FromOwner, NormalImpulse) == 0x000018, "Member 'TownMobComponent_OnCollisionHit_FromOwner::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TownMobComponent_OnCollisionHit_FromOwner, Hit) == 0x000028, "Member 'TownMobComponent_OnCollisionHit_FromOwner::Hit' has a wrong offset!");

// Function AT.TownMobComponent.OnMontageEnded_Greeting_Call
// 0x0010 (0x0010 - 0x0000)
struct TownMobComponent_OnMontageEnded_Greeting_Call final
{
public:
	class UAnimMontage*                           PMontage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TownMobComponent_OnMontageEnded_Greeting_Call) == 0x000008, "Wrong alignment on TownMobComponent_OnMontageEnded_Greeting_Call");
static_assert(sizeof(TownMobComponent_OnMontageEnded_Greeting_Call) == 0x000010, "Wrong size on TownMobComponent_OnMontageEnded_Greeting_Call");
static_assert(offsetof(TownMobComponent_OnMontageEnded_Greeting_Call, PMontage) == 0x000000, "Member 'TownMobComponent_OnMontageEnded_Greeting_Call::PMontage' has a wrong offset!");
static_assert(offsetof(TownMobComponent_OnMontageEnded_Greeting_Call, bInterrupted) == 0x000008, "Member 'TownMobComponent_OnMontageEnded_Greeting_Call::bInterrupted' has a wrong offset!");

// Function AT.TreasureAccessPointTable.GetTreasureAccessPointTable
// 0x0010 (0x0010 - 0x0000)
struct TreasureAccessPointTable_GetTreasureAccessPointTable final
{
public:
	class UWorld*                                 AWorld;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTreasureAccessPointTable*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureAccessPointTable_GetTreasureAccessPointTable) == 0x000008, "Wrong alignment on TreasureAccessPointTable_GetTreasureAccessPointTable");
static_assert(sizeof(TreasureAccessPointTable_GetTreasureAccessPointTable) == 0x000010, "Wrong size on TreasureAccessPointTable_GetTreasureAccessPointTable");
static_assert(offsetof(TreasureAccessPointTable_GetTreasureAccessPointTable, AWorld) == 0x000000, "Member 'TreasureAccessPointTable_GetTreasureAccessPointTable::AWorld' has a wrong offset!");
static_assert(offsetof(TreasureAccessPointTable_GetTreasureAccessPointTable, ReturnValue) == 0x000008, "Member 'TreasureAccessPointTable_GetTreasureAccessPointTable::ReturnValue' has a wrong offset!");

// Function AT.TreasureManager.OnChangePhase
// 0x0004 (0x0004 - 0x0000)
struct TreasureManager_OnChangePhase final
{
public:
	int32                                         PhaseNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureManager_OnChangePhase) == 0x000004, "Wrong alignment on TreasureManager_OnChangePhase");
static_assert(sizeof(TreasureManager_OnChangePhase) == 0x000004, "Wrong size on TreasureManager_OnChangePhase");
static_assert(offsetof(TreasureManager_OnChangePhase, PhaseNo) == 0x000000, "Member 'TreasureManager_OnChangePhase::PhaseNo' has a wrong offset!");

// Function AT.TreasureManager.OnChangeProgress
// 0x0008 (0x0008 - 0x0000)
struct TreasureManager_OnChangeProgress final
{
public:
	class FName                                   ProgressID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureManager_OnChangeProgress) == 0x000004, "Wrong alignment on TreasureManager_OnChangeProgress");
static_assert(sizeof(TreasureManager_OnChangeProgress) == 0x000008, "Wrong size on TreasureManager_OnChangeProgress");
static_assert(offsetof(TreasureManager_OnChangeProgress, ProgressID) == 0x000000, "Member 'TreasureManager_OnChangeProgress::ProgressID' has a wrong offset!");

// Function AT.TriggerBoxPerceptionAI.AreaIn
// 0x0010 (0x0010 - 0x0000)
struct TriggerBoxPerceptionAI_AreaIn final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerBoxPerceptionAI_AreaIn) == 0x000008, "Wrong alignment on TriggerBoxPerceptionAI_AreaIn");
static_assert(sizeof(TriggerBoxPerceptionAI_AreaIn) == 0x000010, "Wrong size on TriggerBoxPerceptionAI_AreaIn");
static_assert(offsetof(TriggerBoxPerceptionAI_AreaIn, OverlappedActor) == 0x000000, "Member 'TriggerBoxPerceptionAI_AreaIn::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TriggerBoxPerceptionAI_AreaIn, OtherActor) == 0x000008, "Member 'TriggerBoxPerceptionAI_AreaIn::OtherActor' has a wrong offset!");

// Function AT.TriggerBoxPerceptionAI.AreaOut
// 0x0010 (0x0010 - 0x0000)
struct TriggerBoxPerceptionAI_AreaOut final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerBoxPerceptionAI_AreaOut) == 0x000008, "Wrong alignment on TriggerBoxPerceptionAI_AreaOut");
static_assert(sizeof(TriggerBoxPerceptionAI_AreaOut) == 0x000010, "Wrong size on TriggerBoxPerceptionAI_AreaOut");
static_assert(offsetof(TriggerBoxPerceptionAI_AreaOut, OverlappedActor) == 0x000000, "Member 'TriggerBoxPerceptionAI_AreaOut::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TriggerBoxPerceptionAI_AreaOut, OtherActor) == 0x000008, "Member 'TriggerBoxPerceptionAI_AreaOut::OtherActor' has a wrong offset!");

// Function AT.TriggerStaticActorBox.OnTouchBoxCollision
// 0x0008 (0x0008 - 0x0000)
struct TriggerStaticActorBox_OnTouchBoxCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerStaticActorBox_OnTouchBoxCollision) == 0x000008, "Wrong alignment on TriggerStaticActorBox_OnTouchBoxCollision");
static_assert(sizeof(TriggerStaticActorBox_OnTouchBoxCollision) == 0x000008, "Wrong size on TriggerStaticActorBox_OnTouchBoxCollision");
static_assert(offsetof(TriggerStaticActorBox_OnTouchBoxCollision, Actor) == 0x000000, "Member 'TriggerStaticActorBox_OnTouchBoxCollision::Actor' has a wrong offset!");

// Function AT.TriggerStaticActorBox.OnUntouchBoxCollision
// 0x0008 (0x0008 - 0x0000)
struct TriggerStaticActorBox_OnUntouchBoxCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerStaticActorBox_OnUntouchBoxCollision) == 0x000008, "Wrong alignment on TriggerStaticActorBox_OnUntouchBoxCollision");
static_assert(sizeof(TriggerStaticActorBox_OnUntouchBoxCollision) == 0x000008, "Wrong size on TriggerStaticActorBox_OnUntouchBoxCollision");
static_assert(offsetof(TriggerStaticActorBox_OnUntouchBoxCollision, Actor) == 0x000000, "Member 'TriggerStaticActorBox_OnUntouchBoxCollision::Actor' has a wrong offset!");

// Function AT.TwinFootMoveState.OnLanded
// 0x0088 (0x0088 - 0x0000)
struct TwinFootMoveState_OnLanded final
{
public:
	struct FHitResult                             InHit;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinFootMoveState_OnLanded) == 0x000008, "Wrong alignment on TwinFootMoveState_OnLanded");
static_assert(sizeof(TwinFootMoveState_OnLanded) == 0x000088, "Wrong size on TwinFootMoveState_OnLanded");
static_assert(offsetof(TwinFootMoveState_OnLanded, InHit) == 0x000000, "Member 'TwinFootMoveState_OnLanded::InHit' has a wrong offset!");

// Function AT.TwinFootMoveState.OnMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct TwinFootMoveState_OnMovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TwinFootMoveState_OnMovementModeChanged) == 0x000008, "Wrong alignment on TwinFootMoveState_OnMovementModeChanged");
static_assert(sizeof(TwinFootMoveState_OnMovementModeChanged) == 0x000010, "Wrong size on TwinFootMoveState_OnMovementModeChanged");
static_assert(offsetof(TwinFootMoveState_OnMovementModeChanged, Character) == 0x000000, "Member 'TwinFootMoveState_OnMovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(TwinFootMoveState_OnMovementModeChanged, PrevMovementMode) == 0x000008, "Member 'TwinFootMoveState_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(TwinFootMoveState_OnMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'TwinFootMoveState_OnMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function AT.ZCW_BookActor.ChangeCamera
// 0x0001 (0x0001 - 0x0000)
struct ZCW_BookActor_ChangeCamera final
{
public:
	bool                                          Playflag;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_ChangeCamera) == 0x000001, "Wrong alignment on ZCW_BookActor_ChangeCamera");
static_assert(sizeof(ZCW_BookActor_ChangeCamera) == 0x000001, "Wrong size on ZCW_BookActor_ChangeCamera");
static_assert(offsetof(ZCW_BookActor_ChangeCamera, Playflag) == 0x000000, "Member 'ZCW_BookActor_ChangeCamera::Playflag' has a wrong offset!");

// Function AT.ZCW_BookActor.ChangeTexture
// 0x0018 (0x0018 - 0x0000)
struct ZCW_BookActor_ChangeTexture final
{
public:
	EZCW_BookPage                                 Page;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Tex;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TexCoord;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_ChangeTexture) == 0x000008, "Wrong alignment on ZCW_BookActor_ChangeTexture");
static_assert(sizeof(ZCW_BookActor_ChangeTexture) == 0x000018, "Wrong size on ZCW_BookActor_ChangeTexture");
static_assert(offsetof(ZCW_BookActor_ChangeTexture, Page) == 0x000000, "Member 'ZCW_BookActor_ChangeTexture::Page' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_ChangeTexture, Tex) == 0x000008, "Member 'ZCW_BookActor_ChangeTexture::Tex' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_ChangeTexture, TexCoord) == 0x000010, "Member 'ZCW_BookActor_ChangeTexture::TexCoord' has a wrong offset!");

// Function AT.ZCW_BookActor.GetCameraPosition
// 0x000C (0x000C - 0x0000)
struct ZCW_BookActor_GetCameraPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_GetCameraPosition) == 0x000004, "Wrong alignment on ZCW_BookActor_GetCameraPosition");
static_assert(sizeof(ZCW_BookActor_GetCameraPosition) == 0x00000C, "Wrong size on ZCW_BookActor_GetCameraPosition");
static_assert(offsetof(ZCW_BookActor_GetCameraPosition, ReturnValue) == 0x000000, "Member 'ZCW_BookActor_GetCameraPosition::ReturnValue' has a wrong offset!");

// Function AT.ZCW_BookActor.GetCameraRotation
// 0x000C (0x000C - 0x0000)
struct ZCW_BookActor_GetCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_GetCameraRotation) == 0x000004, "Wrong alignment on ZCW_BookActor_GetCameraRotation");
static_assert(sizeof(ZCW_BookActor_GetCameraRotation) == 0x00000C, "Wrong size on ZCW_BookActor_GetCameraRotation");
static_assert(offsetof(ZCW_BookActor_GetCameraRotation, ReturnValue) == 0x000000, "Member 'ZCW_BookActor_GetCameraRotation::ReturnValue' has a wrong offset!");

// Function AT.ZCW_BookActor.GetSkyLight
// 0x0008 (0x0008 - 0x0000)
struct ZCW_BookActor_GetSkyLight final
{
public:
	class USkyLightComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_GetSkyLight) == 0x000008, "Wrong alignment on ZCW_BookActor_GetSkyLight");
static_assert(sizeof(ZCW_BookActor_GetSkyLight) == 0x000008, "Wrong size on ZCW_BookActor_GetSkyLight");
static_assert(offsetof(ZCW_BookActor_GetSkyLight, ReturnValue) == 0x000000, "Member 'ZCW_BookActor_GetSkyLight::ReturnValue' has a wrong offset!");

// Function AT.ZCW_BookActor.GetSpotLight
// 0x0010 (0x0010 - 0x0000)
struct ZCW_BookActor_GetSpotLight final
{
public:
	bool                                          Left;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USpotLightComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_GetSpotLight) == 0x000008, "Wrong alignment on ZCW_BookActor_GetSpotLight");
static_assert(sizeof(ZCW_BookActor_GetSpotLight) == 0x000010, "Wrong size on ZCW_BookActor_GetSpotLight");
static_assert(offsetof(ZCW_BookActor_GetSpotLight, Left) == 0x000000, "Member 'ZCW_BookActor_GetSpotLight::Left' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_GetSpotLight, ReturnValue) == 0x000008, "Member 'ZCW_BookActor_GetSpotLight::ReturnValue' has a wrong offset!");

// Function AT.ZCW_BookActor.IsPlayingAnimation
// 0x0001 (0x0001 - 0x0000)
struct ZCW_BookActor_IsPlayingAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_IsPlayingAnimation) == 0x000001, "Wrong alignment on ZCW_BookActor_IsPlayingAnimation");
static_assert(sizeof(ZCW_BookActor_IsPlayingAnimation) == 0x000001, "Wrong size on ZCW_BookActor_IsPlayingAnimation");
static_assert(offsetof(ZCW_BookActor_IsPlayingAnimation, ReturnValue) == 0x000000, "Member 'ZCW_BookActor_IsPlayingAnimation::ReturnValue' has a wrong offset!");

// Function AT.ZCW_BookActor.OpenBook
// 0x0020 (0x0020 - 0x0000)
struct ZCW_BookActor_OpenBook final
{
public:
	class UTexture*                               Left;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftCoord;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Right;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightCoord;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_OpenBook) == 0x000008, "Wrong alignment on ZCW_BookActor_OpenBook");
static_assert(sizeof(ZCW_BookActor_OpenBook) == 0x000020, "Wrong size on ZCW_BookActor_OpenBook");
static_assert(offsetof(ZCW_BookActor_OpenBook, Left) == 0x000000, "Member 'ZCW_BookActor_OpenBook::Left' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_OpenBook, LeftCoord) == 0x000008, "Member 'ZCW_BookActor_OpenBook::LeftCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_OpenBook, Right) == 0x000010, "Member 'ZCW_BookActor_OpenBook::Right' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_OpenBook, RightCoord) == 0x000018, "Member 'ZCW_BookActor_OpenBook::RightCoord' has a wrong offset!");

// Function AT.ZCW_BookActor.SetCameraPosition
// 0x000C (0x000C - 0x0000)
struct ZCW_BookActor_SetCameraPosition final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_SetCameraPosition) == 0x000004, "Wrong alignment on ZCW_BookActor_SetCameraPosition");
static_assert(sizeof(ZCW_BookActor_SetCameraPosition) == 0x00000C, "Wrong size on ZCW_BookActor_SetCameraPosition");
static_assert(offsetof(ZCW_BookActor_SetCameraPosition, Pos) == 0x000000, "Member 'ZCW_BookActor_SetCameraPosition::Pos' has a wrong offset!");

// Function AT.ZCW_BookActor.SetCameraRotation
// 0x000C (0x000C - 0x0000)
struct ZCW_BookActor_SetCameraRotation final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_SetCameraRotation) == 0x000004, "Wrong alignment on ZCW_BookActor_SetCameraRotation");
static_assert(sizeof(ZCW_BookActor_SetCameraRotation) == 0x00000C, "Wrong size on ZCW_BookActor_SetCameraRotation");
static_assert(offsetof(ZCW_BookActor_SetCameraRotation, Rot) == 0x000000, "Member 'ZCW_BookActor_SetCameraRotation::Rot' has a wrong offset!");

// Function AT.ZCW_BookActor.SkipBackPage
// 0x0028 (0x0028 - 0x0000)
struct ZCW_BookActor_SkipBackPage final
{
public:
	class UTexture*                               Left;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftCoord;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Right;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightCoord;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          One;                                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          baseChange;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZCW_BookActor_SkipBackPage) == 0x000008, "Wrong alignment on ZCW_BookActor_SkipBackPage");
static_assert(sizeof(ZCW_BookActor_SkipBackPage) == 0x000028, "Wrong size on ZCW_BookActor_SkipBackPage");
static_assert(offsetof(ZCW_BookActor_SkipBackPage, Left) == 0x000000, "Member 'ZCW_BookActor_SkipBackPage::Left' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPage, LeftCoord) == 0x000008, "Member 'ZCW_BookActor_SkipBackPage::LeftCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPage, Right) == 0x000010, "Member 'ZCW_BookActor_SkipBackPage::Right' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPage, RightCoord) == 0x000018, "Member 'ZCW_BookActor_SkipBackPage::RightCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPage, One) == 0x000020, "Member 'ZCW_BookActor_SkipBackPage::One' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPage, baseChange) == 0x000021, "Member 'ZCW_BookActor_SkipBackPage::baseChange' has a wrong offset!");

// Function AT.ZCW_BookActor.SkipBackPages
// 0x0028 (0x0028 - 0x0000)
struct ZCW_BookActor_SkipBackPages final
{
public:
	class UTexture*                               Left;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftCoord;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Right;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightCoord;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          baseChange;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZCW_BookActor_SkipBackPages) == 0x000008, "Wrong alignment on ZCW_BookActor_SkipBackPages");
static_assert(sizeof(ZCW_BookActor_SkipBackPages) == 0x000028, "Wrong size on ZCW_BookActor_SkipBackPages");
static_assert(offsetof(ZCW_BookActor_SkipBackPages, Left) == 0x000000, "Member 'ZCW_BookActor_SkipBackPages::Left' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPages, LeftCoord) == 0x000008, "Member 'ZCW_BookActor_SkipBackPages::LeftCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPages, Right) == 0x000010, "Member 'ZCW_BookActor_SkipBackPages::Right' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPages, RightCoord) == 0x000018, "Member 'ZCW_BookActor_SkipBackPages::RightCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPages, Count) == 0x000020, "Member 'ZCW_BookActor_SkipBackPages::Count' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipBackPages, baseChange) == 0x000024, "Member 'ZCW_BookActor_SkipBackPages::baseChange' has a wrong offset!");

// Function AT.ZCW_BookActor.SkipNextPage
// 0x0028 (0x0028 - 0x0000)
struct ZCW_BookActor_SkipNextPage final
{
public:
	class UTexture*                               Left;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftCoord;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Right;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightCoord;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          One;                                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          baseChange;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZCW_BookActor_SkipNextPage) == 0x000008, "Wrong alignment on ZCW_BookActor_SkipNextPage");
static_assert(sizeof(ZCW_BookActor_SkipNextPage) == 0x000028, "Wrong size on ZCW_BookActor_SkipNextPage");
static_assert(offsetof(ZCW_BookActor_SkipNextPage, Left) == 0x000000, "Member 'ZCW_BookActor_SkipNextPage::Left' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPage, LeftCoord) == 0x000008, "Member 'ZCW_BookActor_SkipNextPage::LeftCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPage, Right) == 0x000010, "Member 'ZCW_BookActor_SkipNextPage::Right' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPage, RightCoord) == 0x000018, "Member 'ZCW_BookActor_SkipNextPage::RightCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPage, One) == 0x000020, "Member 'ZCW_BookActor_SkipNextPage::One' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPage, baseChange) == 0x000021, "Member 'ZCW_BookActor_SkipNextPage::baseChange' has a wrong offset!");

// Function AT.ZCW_BookActor.SkipNextPages
// 0x0028 (0x0028 - 0x0000)
struct ZCW_BookActor_SkipNextPages final
{
public:
	class UTexture*                               Left;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftCoord;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Right;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RightCoord;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          baseChange;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZCW_BookActor_SkipNextPages) == 0x000008, "Wrong alignment on ZCW_BookActor_SkipNextPages");
static_assert(sizeof(ZCW_BookActor_SkipNextPages) == 0x000028, "Wrong size on ZCW_BookActor_SkipNextPages");
static_assert(offsetof(ZCW_BookActor_SkipNextPages, Left) == 0x000000, "Member 'ZCW_BookActor_SkipNextPages::Left' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPages, LeftCoord) == 0x000008, "Member 'ZCW_BookActor_SkipNextPages::LeftCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPages, Right) == 0x000010, "Member 'ZCW_BookActor_SkipNextPages::Right' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPages, RightCoord) == 0x000018, "Member 'ZCW_BookActor_SkipNextPages::RightCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPages, Count) == 0x000020, "Member 'ZCW_BookActor_SkipNextPages::Count' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SkipNextPages, baseChange) == 0x000024, "Member 'ZCW_BookActor_SkipNextPages::baseChange' has a wrong offset!");

// Function AT.ZCW_BookActor.SlideMemoIn
// 0x0018 (0x0018 - 0x0000)
struct ZCW_BookActor_SlideMemoIn final
{
public:
	class UTexture*                               Tex;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TexCoord;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Left;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZCW_BookActor_SlideMemoIn) == 0x000008, "Wrong alignment on ZCW_BookActor_SlideMemoIn");
static_assert(sizeof(ZCW_BookActor_SlideMemoIn) == 0x000018, "Wrong size on ZCW_BookActor_SlideMemoIn");
static_assert(offsetof(ZCW_BookActor_SlideMemoIn, Tex) == 0x000000, "Member 'ZCW_BookActor_SlideMemoIn::Tex' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SlideMemoIn, TexCoord) == 0x000008, "Member 'ZCW_BookActor_SlideMemoIn::TexCoord' has a wrong offset!");
static_assert(offsetof(ZCW_BookActor_SlideMemoIn, Left) == 0x000010, "Member 'ZCW_BookActor_SlideMemoIn::Left' has a wrong offset!");

// Function AT.ZCW_BookActor.SlideMemoOut
// 0x0001 (0x0001 - 0x0000)
struct ZCW_BookActor_SlideMemoOut final
{
public:
	bool                                          Left;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_SlideMemoOut) == 0x000001, "Wrong alignment on ZCW_BookActor_SlideMemoOut");
static_assert(sizeof(ZCW_BookActor_SlideMemoOut) == 0x000001, "Wrong size on ZCW_BookActor_SlideMemoOut");
static_assert(offsetof(ZCW_BookActor_SlideMemoOut, Left) == 0x000000, "Member 'ZCW_BookActor_SlideMemoOut::Left' has a wrong offset!");

// Function AT.ZCW_BookActor.SwichLeftLight
// 0x0001 (0x0001 - 0x0000)
struct ZCW_BookActor_SwichLeftLight final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_SwichLeftLight) == 0x000001, "Wrong alignment on ZCW_BookActor_SwichLeftLight");
static_assert(sizeof(ZCW_BookActor_SwichLeftLight) == 0x000001, "Wrong size on ZCW_BookActor_SwichLeftLight");
static_assert(offsetof(ZCW_BookActor_SwichLeftLight, Flag) == 0x000000, "Member 'ZCW_BookActor_SwichLeftLight::Flag' has a wrong offset!");

// Function AT.ZCW_BookActor.SwichRightLight
// 0x0001 (0x0001 - 0x0000)
struct ZCW_BookActor_SwichRightLight final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZCW_BookActor_SwichRightLight) == 0x000001, "Wrong alignment on ZCW_BookActor_SwichRightLight");
static_assert(sizeof(ZCW_BookActor_SwichRightLight) == 0x000001, "Wrong size on ZCW_BookActor_SwichRightLight");
static_assert(offsetof(ZCW_BookActor_SwichRightLight, Flag) == 0x000000, "Member 'ZCW_BookActor_SwichRightLight::Flag' has a wrong offset!");

// Function AT.ZCW_PreRenderDemoActor.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ZCW_PreRenderDemoActor_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InDemoName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueFlag;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZCW_PreRenderDemoActor_OnDemoTiming) == 0x000004, "Wrong alignment on ZCW_PreRenderDemoActor_OnDemoTiming");
static_assert(sizeof(ZCW_PreRenderDemoActor_OnDemoTiming) == 0x000018, "Wrong size on ZCW_PreRenderDemoActor_OnDemoTiming");
static_assert(offsetof(ZCW_PreRenderDemoActor_OnDemoTiming, DemoType) == 0x000000, "Member 'ZCW_PreRenderDemoActor_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(ZCW_PreRenderDemoActor_OnDemoTiming, DemoTiming) == 0x000001, "Member 'ZCW_PreRenderDemoActor_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(ZCW_PreRenderDemoActor_OnDemoTiming, InDemoName) == 0x000008, "Member 'ZCW_PreRenderDemoActor_OnDemoTiming::InDemoName' has a wrong offset!");
static_assert(offsetof(ZCW_PreRenderDemoActor_OnDemoTiming, bContinueFlag) == 0x000010, "Member 'ZCW_PreRenderDemoActor_OnDemoTiming::bContinueFlag' has a wrong offset!");

}

