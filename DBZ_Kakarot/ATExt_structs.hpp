#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ATExt

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AT_structs.hpp"
#include "CFramework_structs.hpp"


namespace SDK
{

// Enum ATExt.EBrokenReason
// NumValues: 0x0004
enum class EBrokenReason : uint8
{
	Unknown                                  = 0,
	Punch                                    = 1,
	AuraBullet                               = 2,
	EBrokenReason_MAX                        = 3,
};

// Enum ATExt.EGroundFloatMode
// NumValues: 0x0006
enum class EGroundFloatMode : uint8
{
	None                                     = 0,
	Float                                    = 1,
	Floating                                 = 2,
	Fall                                     = 3,
	Falling                                  = 4,
	EGroundFloatMode_MAX                     = 5,
};

// Enum ATExt.ECOMMUNITY_CATEGORY
// NumValues: 0x0009
enum class ECOMMUNITY_CATEGORY : uint8
{
	NONE                                     = 0,
	ZFIGHTERS                                = 1,
	COOKING                                  = 2,
	TRAINING                                 = 3,
	DEVELOP                                  = 4,
	GODS                                     = 5,
	ADULT                                    = 6,
	ADVENTURE                                = 7,
	MAX                                      = 8,
};

// Enum ATExt.ESOUL_EM_RARITY
// NumValues: 0x0005
enum class ESOUL_EM_RARITY : uint8
{
	NONE                                     = 0,
	NORMAL                                   = 1,
	RARE_1                                   = 2,
	RARE_2                                   = 3,
	ESOUL_EM_MAX                             = 4,
};

// Enum ATExt.ESOUL_EM_UNLOCK_STATE
// NumValues: 0x0005
enum class ESOUL_EM_UNLOCK_STATE : uint8
{
	NONE                                     = 0,
	LOCK                                     = 1,
	UNLOCK                                   = 2,
	UNLOCK_AVAILABLE                         = 3,
	MAX                                      = 4,
};

// Enum ATExt.ESOUL_EM_PREFERENCE
// NumValues: 0x0005
enum class ESOUL_EM_PREFERENCE : uint8
{
	NONE                                     = 0,
	NORMAL                                   = 1,
	FAVORITE                                 = 2,
	DISLIKE                                  = 3,
	MAX                                      = 4,
};

// Enum ATExt.EHEALTH_BORDER_EVENT
// NumValues: 0x0006
enum class EHEALTH_BORDER_EVENT : uint8
{
	FLASH_BACK_01                            = 0,
	FLASH_BACK_02                            = 1,
	RUSH_QTE                                 = 2,
	FORM_OFF                                 = 3,
	FINISH_BLOW                              = 4,
	EHEALTH_BORDER_MAX                       = 5,
};

// Enum ATExt.EEventBattleMemberIndex
// NumValues: 0x000B
enum class EEventBattleMemberIndex : uint8
{
	Leader                                   = 0,
	SupportL                                 = 1,
	SupportR                                 = 2,
	Member04                                 = 3,
	Member05                                 = 4,
	Member06                                 = 5,
	Member07                                 = 6,
	Member08                                 = 7,
	Member09                                 = 8,
	Member10                                 = 9,
	EEventBattleMemberIndex_MAX              = 10,
};

// Enum ATExt.EEventBattleTeamType
// NumValues: 0x0003
enum class EEventBattleTeamType : uint8
{
	Friend                                   = 0,
	Enemy                                    = 1,
	EEventBattleTeamType_MAX                 = 2,
};

// Enum ATExt.EGroupBattleReinforceCondition
// NumValues: 0x000D
enum class EGroupBattleReinforceCondition : uint8
{
	None                                     = 0,
	EnemyNumHuman                            = 1,
	EnemyNumBit                              = 2,
	EnemyNumUnique                           = 3,
	EnemyNumVillain                          = 4,
	EnemyNumRobot                            = 5,
	EnemyNumTotal                            = 6,
	BattleTime                               = 7,
	IntervalTime                             = 8,
	SpawnNumEqual                            = 9,
	SpawnNumOver                             = 10,
	SpawnNumUnder                            = 11,
	Max                                      = 12,
};

// Enum ATExt.EAreaLockedStatus
// NumValues: 0x0005
enum class EAreaLockedStatus : uint8
{
	AREA_LOCKED_UNOPEN                       = 0,
	AREA_LOCKED_UNLOCK_NEW                   = 1,
	AREA_LOCKED_UNLOCKED                     = 2,
	AREA_LOCKED_LOCKED                       = 3,
	AREA_LOCKED_MAX                          = 4,
};

// Enum ATExt.EAreaIndex
// NumValues: 0x0047
enum class EAreaIndex : uint8
{
	AREA_INDEX_AREA_01P                      = 0,
	AREA_INDEX_AREA_02P                      = 1,
	AREA_INDEX_AREA_03P                      = 2,
	AREA_INDEX_AREA_04P                      = 3,
	AREA_INDEX_AREA_05P                      = 4,
	AREA_INDEX_AREA_06P                      = 5,
	AREA_INDEX_AREA_07P                      = 6,
	AREA_INDEX_AREA_08P                      = 7,
	AREA_INDEX_AREA_09P                      = 8,
	AREA_INDEX_AREA_10P                      = 9,
	AREA_INDEX_AREA_11P                      = 10,
	AREA_INDEX_AREA_12P                      = 11,
	AREA_INDEX_AREA_13P                      = 12,
	AREA_INDEX_AREA_14P                      = 13,
	AREA_INDEX_AREA_15P                      = 14,
	AREA_INDEX_AREA_16P                      = 15,
	AREA_INDEX_AREA_17P                      = 16,
	AREA_INDEX_AREA_18P                      = 17,
	AREA_INDEX_AREA_19P                      = 18,
	AREA_INDEX_AREA_20P                      = 19,
	AREA_INDEX_AREA_21P                      = 20,
	AREA_INDEX_AREA_22P                      = 21,
	AREA_INDEX_AREA_23P                      = 22,
	AREA_INDEX_AREA_24P                      = 23,
	AREA_INDEX_AREA_25P                      = 24,
	AREA_INDEX_AREA_26P                      = 25,
	AREA_INDEX_AREA_27P                      = 26,
	AREA_INDEX_AREA_28P                      = 27,
	AREA_INDEX_AREA_29P                      = 28,
	AREA_INDEX_AREA_30P                      = 29,
	AREA_INDEX_AREA_31P                      = 30,
	AREA_INDEX_AREA_32P                      = 31,
	AREA_INDEX_AREA_33P                      = 32,
	AREA_INDEX_AREA_34P                      = 33,
	AREA_INDEX_AREA_35P                      = 34,
	AREA_INDEX_AREA_36P                      = 35,
	AREA_INDEX_AREA_37P                      = 36,
	AREA_INDEX_AREA_38P                      = 37,
	AREA_INDEX_AREA_39P                      = 38,
	AREA_INDEX_AREA_40P                      = 39,
	AREA_INDEX_AREA_41P                      = 40,
	AREA_INDEX_AREA_42P                      = 41,
	AREA_INDEX_AREA_43P                      = 42,
	AREA_INDEX_AREA_44P                      = 43,
	AREA_INDEX_AREA_45P                      = 44,
	AREA_INDEX_AREA_46P                      = 45,
	AREA_INDEX_AREA_47P                      = 46,
	AREA_INDEX_AREA_48P                      = 47,
	AREA_INDEX_AREA_49P                      = 48,
	AREA_INDEX_AREA_50P                      = 49,
	AREA_INDEX_AREA_51P                      = 50,
	AREA_INDEX_AREA_52P                      = 51,
	AREA_INDEX_AREA_53P                      = 52,
	AREA_INDEX_AREA_54P                      = 53,
	AREA_INDEX_AREA_55P                      = 54,
	AREA_INDEX_AREA_56P                      = 55,
	AREA_INDEX_AREA_57P                      = 56,
	AREA_INDEX_AREA_58P                      = 57,
	AREA_INDEX_AREA_59P                      = 58,
	AREA_INDEX_AREA_60P                      = 59,
	AREA_INDEX_AREA_61P                      = 60,
	AREA_INDEX_AREA_62P                      = 61,
	AREA_INDEX_AREA_63P                      = 62,
	AREA_INDEX_AREA_64P                      = 63,
	AREA_INDEX_AREA_65P                      = 64,
	AREA_INDEX_AREA_66P                      = 65,
	AREA_INDEX_AREA_67P                      = 66,
	AREA_INDEX_AREA_68P                      = 67,
	AREA_INDEX_AREA_69P                      = 68,
	AREA_INDEX_AREA_70P                      = 69,
	AREA_INDEX_MAX                           = 70,
};

// Enum ATExt.EOnceDirectionType
// NumValues: 0x0007
enum class EOnceDirectionType : uint8
{
	None                                     = 0,
	Summon                                   = 1,
	EnergyCharge                             = 2,
	AttackUp                                 = 3,
	Weakness                                 = 4,
	C037A_S_SKL004                           = 5,
	Max                                      = 6,
};

// Enum ATExt.ESubgameIndex
// NumValues: 0x0005
enum class ESubgameIndex : uint8
{
	SUBGAME_INDEX_DLC3                       = 0,
	SUBGAME_INDEX_DLC4                       = 1,
	SUBGAME_INDEX_DLC5                       = 2,
	SUBGAME_INDEX_DLC6                       = 3,
	SUBGAME_INDEX_MAX                        = 4,
};

// Enum ATExt.EDlcOwnershipState
// NumValues: 0x0005
enum class EDlcOwnershipState : uint8
{
	None                                     = 0,
	Possession                               = 1,
	Revocation                               = 2,
	Restoration                              = 3,
	EDlcOwnershipState_MAX                   = 4,
};

// Enum ATExt.EFieldMemoriesFoundStatus
// NumValues: 0x0005
enum class EFieldMemoriesFoundStatus : uint8
{
	None                                     = 0,
	UNFOUND                                  = 0,
	FOUND                                    = 1,
	ALREADY_READ                             = 2,
	EFieldMemoriesFoundStatus_MAX            = 3,
};

// Enum ATExt.EImportantLogSendStatus
// NumValues: 0x0004
enum class EImportantLogSendStatus : uint8
{
	None                                     = 0,
	Displayed                                = 1,
	Request                                  = 2,
	EImportantLogSendStatus_MAX              = 3,
};

// Enum ATExt.EATPerformanceModeSettings
// NumValues: 0x0004
enum class EATPerformanceModeSettings : uint8
{
	PERFORMANCE_MODE                         = 0,
	RESOLUTION_MODE                          = 1,
	INVALID_MODE                             = 2,
	EATPerformanceModeSettings_MAX           = 3,
};

// Enum ATExt.EOptionDifficulty
// NumValues: 0x0005
enum class EOptionDifficulty : uint32
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	Count                                    = 3,
	EOptionDifficulty_MAX                    = 4,
};

// Enum ATExt.EOptionIcon
// NumValues: 0x0004
enum class EOptionIcon : uint8
{
	ICON_PAD_P                               = 0,
	ICON_PAD_X                               = 1,
	ICON_KEY_AND_MOUSE                       = 2,
	ICON_MAX                                 = 3,
};

// Enum ATExt.EOptionSwitch
// NumValues: 0x0003
enum class EOptionSwitch : uint8
{
	SWITCH_OFF                               = 0,
	SWITCH_ON                                = 1,
	SWITCH_MAX                               = 2,
};

// Enum ATExt.EOptionCameraControl
// NumValues: 0x0003
enum class EOptionCameraControl : uint8
{
	CONTROL_NORMAL                           = 0,
	CONTROL_REVERSE                          = 1,
	CONTROL_MAX                              = 2,
};

// Enum ATExt.DLCMenuNotifyType
// NumValues: 0x0005
enum class EDLCMenuNotifyType : uint8
{
	DLC_Nothing                              = 0,
	DLC4_Story_04                            = 1,
	DLC5_Story_05                            = 2,
	DLC6_Story_06                            = 4,
	DLCMenuNotifyType_MAX                    = 5,
};

// Enum ATExt.DLCInfoNotifyType
// NumValues: 0x000A
enum class EDLCInfoNotifyType : uint8
{
	DLC_Nothing                              = 0,
	DLC_BGM                                  = 1,
	DLC_Beerus                               = 2,
	DLC_Freezer                              = 4,
	DLC_TaoPillar                            = 8,
	DLC_Trunks                               = 16,
	DLC_Story_04                             = 32,
	DLC_Story_05                             = 64,
	DLC_Story_06                             = 128,
	DLC_MAX                                  = 129,
};

// Enum ATExt.ESaveNoticeType
// NumValues: 0x0014
enum class ESaveNoticeType : uint32
{
	None                                     = 0,
	Patch106                                 = 1,
	Patch110                                 = 2,
	Patch120                                 = 4,
	Patch130_1                               = 8,
	Patch130_2                               = 16,
	Patch130_TCG                             = 32,
	Patch150_1                               = 64,
	Patch150_2                               = 128,
	Patch150_3                               = 256,
	Patch150_4                               = 512,
	Patch160_INV                             = 1024,
	Patch170                                 = 2048,
	Patch175                                 = 4096,
	Patch180_1                               = 8192,
	Patch180_2                               = 16384,
	Patch190                                 = 32768,
	Patch200                                 = 131072,
	Patch211_SSS                             = 262144,
	ESaveNoticeType_MAX                      = 262145,
};

// Enum ATExt.EDlcInfoType
// NumValues: 0x0008
enum class EDlcInfoType : uint8
{
	None                                     = 0,
	Beerus                                   = 1,
	Freezer                                  = 2,
	Trunks                                   = 3,
	DLC4                                     = 4,
	DLC5                                     = 5,
	DLC6                                     = 6,
	EDlcInfoType_MAX                         = 7,
};

// Enum ATExt.EDlcNoticeState
// NumValues: 0x0004
enum class EDlcNoticeState : uint8
{
	None                                     = 0,
	NotyfiedAvailable                        = 1,
	NotyfiedRevocation                       = 2,
	EDlcNoticeState_MAX                      = 3,
};

// Enum ATExt.ESaveGameSlot
// NumValues: 0x0011
enum class ESaveGameSlot : uint8
{
	ManualSave0                              = 0,
	ManualSave1                              = 1,
	ManualSave2                              = 2,
	ManualSave3                              = 3,
	ManualSave4                              = 4,
	ManualSave5                              = 5,
	ManualSave6                              = 6,
	ManualSave7                              = 7,
	ManualSave8                              = 8,
	ManualSave9                              = 9,
	AutoSave0                                = 10,
	SystemSave0                              = 11,
	C_Save0                                  = 12,
	C_SaveTransfer0                          = 13,
	C_Save1                                  = 14,
	SaveDataNum                              = 15,
	ESaveGameSlot_MAX                        = 16,
};

// Enum ATExt.ETCGNoticeFlag
// NumValues: 0x0007
enum class ETCGNoticeFlag : uint8
{
	None                                     = 0,
	OnlineShutdownNotice                     = 1,
	OfflineStartedNotice                     = 2,
	EndPlatinumCoinNotice                    = 4,
	SaveTransferNotice                       = 8,
	OfflineSaveTransferNotice                = 16,
	ETCGNoticeFlag_MAX                       = 17,
};

// Enum ATExt.ESkillCameraType
// NumValues: 0x0005
enum class ESkillCameraType : uint8
{
	None                                     = 0,
	Target                                   = 1,
	Camera                                   = 2,
	LookAt                                   = 3,
	ESkillCameraType_MAX                     = 4,
};

// ScriptStruct ATExt.QuestCondition
// 0x0020 (0x0020 - 0x0000)
struct FQuestCondition final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestCondition) == 0x000008, "Wrong alignment on FQuestCondition");
static_assert(sizeof(FQuestCondition) == 0x000020, "Wrong size on FQuestCondition");
static_assert(offsetof(FQuestCondition, Name) == 0x000000, "Member 'FQuestCondition::Name' has a wrong offset!");
static_assert(offsetof(FQuestCondition, Value) == 0x000010, "Member 'FQuestCondition::Value' has a wrong offset!");

// ScriptStruct ATExt.LoopWearEffectInfo
// 0x0018 (0x0018 - 0x0000)
struct FLoopWearEffectInfo final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoopWearEffectInfo) == 0x000008, "Wrong alignment on FLoopWearEffectInfo");
static_assert(sizeof(FLoopWearEffectInfo) == 0x000018, "Wrong size on FLoopWearEffectInfo");
static_assert(offsetof(FLoopWearEffectInfo, Particle) == 0x000000, "Member 'FLoopWearEffectInfo::Particle' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameMapIcon
// 0x1400 (0x1400 - 0x0000)
struct FATSaveGameMapIcon final
{
public:
	int32                                         RespawnTimeData[0x100];                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MineralData[0x100];                                // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FruitData[0x100];                                  // 0x0800(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RacegameData[0x100];                               // 0x0C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FishingData[0x100];                                // 0x1000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameMapIcon) == 0x000004, "Wrong alignment on FATSaveGameMapIcon");
static_assert(sizeof(FATSaveGameMapIcon) == 0x001400, "Wrong size on FATSaveGameMapIcon");
static_assert(offsetof(FATSaveGameMapIcon, RespawnTimeData) == 0x000000, "Member 'FATSaveGameMapIcon::RespawnTimeData' has a wrong offset!");
static_assert(offsetof(FATSaveGameMapIcon, MineralData) == 0x000400, "Member 'FATSaveGameMapIcon::MineralData' has a wrong offset!");
static_assert(offsetof(FATSaveGameMapIcon, FruitData) == 0x000800, "Member 'FATSaveGameMapIcon::FruitData' has a wrong offset!");
static_assert(offsetof(FATSaveGameMapIcon, RacegameData) == 0x000C00, "Member 'FATSaveGameMapIcon::RacegameData' has a wrong offset!");
static_assert(offsetof(FATSaveGameMapIcon, FishingData) == 0x001000, "Member 'FATSaveGameMapIcon::FishingData' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameArea
// 0x0118 (0x0118 - 0x0000)
struct FATSaveGameArea final
{
public:
	EAreaLockedStatus                             AreaLockedStatus[0x46];                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAreaLockedStatus                             AreaLockedStatusDlcTrunks[0x46];                   // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAreaLockedStatus                             AreaLockedStatusDlc5[0x46];                        // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAreaLockedStatus                             AreaLockedStatusBackup[0x46];                      // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameArea) == 0x000001, "Wrong alignment on FATSaveGameArea");
static_assert(sizeof(FATSaveGameArea) == 0x000118, "Wrong size on FATSaveGameArea");
static_assert(offsetof(FATSaveGameArea, AreaLockedStatus) == 0x000000, "Member 'FATSaveGameArea::AreaLockedStatus' has a wrong offset!");
static_assert(offsetof(FATSaveGameArea, AreaLockedStatusDlcTrunks) == 0x000046, "Member 'FATSaveGameArea::AreaLockedStatusDlcTrunks' has a wrong offset!");
static_assert(offsetof(FATSaveGameArea, AreaLockedStatusDlc5) == 0x00008C, "Member 'FATSaveGameArea::AreaLockedStatusDlc5' has a wrong offset!");
static_assert(offsetof(FATSaveGameArea, AreaLockedStatusBackup) == 0x0000D2, "Member 'FATSaveGameArea::AreaLockedStatusBackup' has a wrong offset!");

// ScriptStruct ATExt.ATSaveCharacterBuff
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FATSaveCharacterBuff final
{
public:
	class FName                                   BuffName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveCharacterBuff) == 0x000008, "Wrong alignment on FATSaveCharacterBuff");
static_assert(sizeof(FATSaveCharacterBuff) == 0x000010, "Wrong size on FATSaveCharacterBuff");
static_assert(offsetof(FATSaveCharacterBuff, BuffName) == 0x000000, "Member 'FATSaveCharacterBuff::BuffName' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterBuff, Time) == 0x000008, "Member 'FATSaveCharacterBuff::Time' has a wrong offset!");

// ScriptStruct ATExt.ATSaveSystemBgmSelect
// 0x0210 (0x0210 - 0x0000)
struct FATSaveSystemBgmSelect final
{
public:
	int32                                         UserSelectFieldBgmMode;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserSelectBattleBgmMode;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserSelectFieldBgmId;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserSelectBattleBgmId;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bIsNewMark[0x80];                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveSystemBgmSelect) == 0x000004, "Wrong alignment on FATSaveSystemBgmSelect");
static_assert(sizeof(FATSaveSystemBgmSelect) == 0x000210, "Wrong size on FATSaveSystemBgmSelect");
static_assert(offsetof(FATSaveSystemBgmSelect, UserSelectFieldBgmMode) == 0x000000, "Member 'FATSaveSystemBgmSelect::UserSelectFieldBgmMode' has a wrong offset!");
static_assert(offsetof(FATSaveSystemBgmSelect, UserSelectBattleBgmMode) == 0x000004, "Member 'FATSaveSystemBgmSelect::UserSelectBattleBgmMode' has a wrong offset!");
static_assert(offsetof(FATSaveSystemBgmSelect, UserSelectFieldBgmId) == 0x000008, "Member 'FATSaveSystemBgmSelect::UserSelectFieldBgmId' has a wrong offset!");
static_assert(offsetof(FATSaveSystemBgmSelect, UserSelectBattleBgmId) == 0x00000C, "Member 'FATSaveSystemBgmSelect::UserSelectBattleBgmId' has a wrong offset!");
static_assert(offsetof(FATSaveSystemBgmSelect, bIsNewMark) == 0x000010, "Member 'FATSaveSystemBgmSelect::bIsNewMark' has a wrong offset!");

// ScriptStruct ATExt.ATSaveSystemOption
// 0x026C (0x026C - 0x0000)
struct FATSaveSystemOption final
{
public:
	int32                                         SkillPaletteWait;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HiddenMinimap;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PadVibration;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraSpeed;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraControlHorizontal;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraControlVertical;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LanguageVoice;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableSubtitle;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeBgm;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeSe;                                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeVoice;                                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeMovie;                                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconDesign;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplaySize;                                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayWidth;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayHeight;                                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AantiAliasing;                                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VSYNC;                                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindowMode;                                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RenderRate;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KpiAgree;                                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATSaveSystemBgmSelect                 BgmSelect;                                         // 0x0058(0x0210)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PerformanceModeSetting;                            // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveSystemOption) == 0x000004, "Wrong alignment on FATSaveSystemOption");
static_assert(sizeof(FATSaveSystemOption) == 0x00026C, "Wrong size on FATSaveSystemOption");
static_assert(offsetof(FATSaveSystemOption, SkillPaletteWait) == 0x000000, "Member 'FATSaveSystemOption::SkillPaletteWait' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, HiddenMinimap) == 0x000004, "Member 'FATSaveSystemOption::HiddenMinimap' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, PadVibration) == 0x000008, "Member 'FATSaveSystemOption::PadVibration' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, CameraSpeed) == 0x00000C, "Member 'FATSaveSystemOption::CameraSpeed' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, CameraControlHorizontal) == 0x000010, "Member 'FATSaveSystemOption::CameraControlHorizontal' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, CameraControlVertical) == 0x000014, "Member 'FATSaveSystemOption::CameraControlVertical' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, LanguageVoice) == 0x000018, "Member 'FATSaveSystemOption::LanguageVoice' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, EnableSubtitle) == 0x00001C, "Member 'FATSaveSystemOption::EnableSubtitle' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, VolumeBgm) == 0x000020, "Member 'FATSaveSystemOption::VolumeBgm' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, VolumeSe) == 0x000024, "Member 'FATSaveSystemOption::VolumeSe' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, VolumeVoice) == 0x000028, "Member 'FATSaveSystemOption::VolumeVoice' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, VolumeMovie) == 0x00002C, "Member 'FATSaveSystemOption::VolumeMovie' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, IconDesign) == 0x000030, "Member 'FATSaveSystemOption::IconDesign' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, DisplaySize) == 0x000034, "Member 'FATSaveSystemOption::DisplaySize' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, DisplayWidth) == 0x000038, "Member 'FATSaveSystemOption::DisplayWidth' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, DisplayHeight) == 0x00003C, "Member 'FATSaveSystemOption::DisplayHeight' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, AantiAliasing) == 0x000040, "Member 'FATSaveSystemOption::AantiAliasing' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, ShadowQuality) == 0x000044, "Member 'FATSaveSystemOption::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, VSYNC) == 0x000048, "Member 'FATSaveSystemOption::VSYNC' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, WindowMode) == 0x00004C, "Member 'FATSaveSystemOption::WindowMode' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, RenderRate) == 0x000050, "Member 'FATSaveSystemOption::RenderRate' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, KpiAgree) == 0x000054, "Member 'FATSaveSystemOption::KpiAgree' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, BgmSelect) == 0x000058, "Member 'FATSaveSystemOption::BgmSelect' has a wrong offset!");
static_assert(offsetof(FATSaveSystemOption, PerformanceModeSetting) == 0x000268, "Member 'FATSaveSystemOption::PerformanceModeSetting' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameAtrociousDefeatParty
// 0x0010 (0x0010 - 0x0000)
struct FATSaveGameAtrociousDefeatParty final
{
public:
	TArray<class FName>                           IdArray;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameAtrociousDefeatParty) == 0x000008, "Wrong alignment on FATSaveGameAtrociousDefeatParty");
static_assert(sizeof(FATSaveGameAtrociousDefeatParty) == 0x000010, "Wrong size on FATSaveGameAtrociousDefeatParty");
static_assert(offsetof(FATSaveGameAtrociousDefeatParty, IdArray) == 0x000000, "Member 'FATSaveGameAtrociousDefeatParty::IdArray' has a wrong offset!");

// ScriptStruct ATExt.SkillCameraInfo
// 0x002C (0x002C - 0x0000)
struct FSkillCameraInfo
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistStart;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistEnd;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterStart;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterEnd;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotStart;                                          // 0x0014(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotEnd;                                            // 0x0020(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillCameraInfo) == 0x000004, "Wrong alignment on FSkillCameraInfo");
static_assert(sizeof(FSkillCameraInfo) == 0x00002C, "Wrong size on FSkillCameraInfo");
static_assert(offsetof(FSkillCameraInfo, Duration) == 0x000000, "Member 'FSkillCameraInfo::Duration' has a wrong offset!");
static_assert(offsetof(FSkillCameraInfo, DistStart) == 0x000004, "Member 'FSkillCameraInfo::DistStart' has a wrong offset!");
static_assert(offsetof(FSkillCameraInfo, DistEnd) == 0x000008, "Member 'FSkillCameraInfo::DistEnd' has a wrong offset!");
static_assert(offsetof(FSkillCameraInfo, CenterStart) == 0x00000C, "Member 'FSkillCameraInfo::CenterStart' has a wrong offset!");
static_assert(offsetof(FSkillCameraInfo, CenterEnd) == 0x000010, "Member 'FSkillCameraInfo::CenterEnd' has a wrong offset!");
static_assert(offsetof(FSkillCameraInfo, RotStart) == 0x000014, "Member 'FSkillCameraInfo::RotStart' has a wrong offset!");
static_assert(offsetof(FSkillCameraInfo, RotEnd) == 0x000020, "Member 'FSkillCameraInfo::RotEnd' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillZFighter
// 0x0010 (0x0018 - 0x0008)
struct FCommunitySkillZFighter final : public FTableRowBase
{
public:
	class FName                                   BuffId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SupportBuffId;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunitySkillZFighter) == 0x000008, "Wrong alignment on FCommunitySkillZFighter");
static_assert(sizeof(FCommunitySkillZFighter) == 0x000018, "Wrong size on FCommunitySkillZFighter");
static_assert(offsetof(FCommunitySkillZFighter, BuffId) == 0x000008, "Member 'FCommunitySkillZFighter::BuffId' has a wrong offset!");
static_assert(offsetof(FCommunitySkillZFighter, SupportBuffId) == 0x000010, "Member 'FCommunitySkillZFighter::SupportBuffId' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillZFighterList
// 0x0108 (0x0110 - 0x0008)
struct FCommunitySkillZFighterList final : public FTableRowBase
{
public:
	struct FCommunitySkillZFighter                SkillTbl[0xB];                                     // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunitySkillZFighterList) == 0x000008, "Wrong alignment on FCommunitySkillZFighterList");
static_assert(sizeof(FCommunitySkillZFighterList) == 0x000110, "Wrong size on FCommunitySkillZFighterList");
static_assert(offsetof(FCommunitySkillZFighterList, SkillTbl) == 0x000008, "Member 'FCommunitySkillZFighterList::SkillTbl' has a wrong offset!");

// ScriptStruct ATExt.ATFishingBaitSaveData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FATFishingBaitSaveData final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Count;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATFishingBaitSaveData) == 0x000008, "Wrong alignment on FATFishingBaitSaveData");
static_assert(sizeof(FATFishingBaitSaveData) == 0x000018, "Wrong size on FATFishingBaitSaveData");
static_assert(offsetof(FATFishingBaitSaveData, RowName) == 0x000000, "Member 'FATFishingBaitSaveData::RowName' has a wrong offset!");
static_assert(offsetof(FATFishingBaitSaveData, ItemId) == 0x000008, "Member 'FATFishingBaitSaveData::ItemId' has a wrong offset!");
static_assert(offsetof(FATFishingBaitSaveData, Count) == 0x000010, "Member 'FATFishingBaitSaveData::Count' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameFishing
// 0x0168 (0x0168 - 0x0000)
struct FATSaveGameFishing final
{
public:
	struct FATFishingBaitSaveData                 BaitData[0xF];                                     // 0x0000(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameFishing) == 0x000008, "Wrong alignment on FATSaveGameFishing");
static_assert(sizeof(FATSaveGameFishing) == 0x000168, "Wrong size on FATSaveGameFishing");
static_assert(offsetof(FATSaveGameFishing, BaitData) == 0x000000, "Member 'FATSaveGameFishing::BaitData' has a wrong offset!");

// ScriptStruct ATExt.ATABPChangerRequest
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FATABPChangerRequest final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATABPChangerRequest) == 0x000008, "Wrong alignment on FATABPChangerRequest");
static_assert(sizeof(FATABPChangerRequest) == 0x000010, "Wrong size on FATABPChangerRequest");

// ScriptStruct ATExt.CommunityCategoryParam
// 0x0098 (0x00A0 - 0x0008)
struct FCommunityCategoryParam final : public FTableRowBase
{
public:
	class FName                                   JName;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameId;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeaderId;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank1;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank2;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank3;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank4;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank5;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank6;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank7;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank8;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvRangeRank9;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommMaxLv;                                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId01;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId02;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId03;                                     // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId04;                                     // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId05;                                     // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId06;                                     // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId07;                                     // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId08;                                     // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId09;                                     // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillId10;                                     // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommSkillIdOver;                                   // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityCategoryParam) == 0x000008, "Wrong alignment on FCommunityCategoryParam");
static_assert(sizeof(FCommunityCategoryParam) == 0x0000A0, "Wrong size on FCommunityCategoryParam");
static_assert(offsetof(FCommunityCategoryParam, JName) == 0x000008, "Member 'FCommunityCategoryParam::JName' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, NameId) == 0x000010, "Member 'FCommunityCategoryParam::NameId' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LeaderId) == 0x000018, "Member 'FCommunityCategoryParam::LeaderId' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank1) == 0x000020, "Member 'FCommunityCategoryParam::LvRangeRank1' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank2) == 0x000024, "Member 'FCommunityCategoryParam::LvRangeRank2' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank3) == 0x000028, "Member 'FCommunityCategoryParam::LvRangeRank3' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank4) == 0x00002C, "Member 'FCommunityCategoryParam::LvRangeRank4' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank5) == 0x000030, "Member 'FCommunityCategoryParam::LvRangeRank5' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank6) == 0x000034, "Member 'FCommunityCategoryParam::LvRangeRank6' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank7) == 0x000038, "Member 'FCommunityCategoryParam::LvRangeRank7' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank8) == 0x00003C, "Member 'FCommunityCategoryParam::LvRangeRank8' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, LvRangeRank9) == 0x000040, "Member 'FCommunityCategoryParam::LvRangeRank9' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommMaxLv) == 0x000044, "Member 'FCommunityCategoryParam::CommMaxLv' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId01) == 0x000048, "Member 'FCommunityCategoryParam::CommSkillId01' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId02) == 0x000050, "Member 'FCommunityCategoryParam::CommSkillId02' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId03) == 0x000058, "Member 'FCommunityCategoryParam::CommSkillId03' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId04) == 0x000060, "Member 'FCommunityCategoryParam::CommSkillId04' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId05) == 0x000068, "Member 'FCommunityCategoryParam::CommSkillId05' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId06) == 0x000070, "Member 'FCommunityCategoryParam::CommSkillId06' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId07) == 0x000078, "Member 'FCommunityCategoryParam::CommSkillId07' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId08) == 0x000080, "Member 'FCommunityCategoryParam::CommSkillId08' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId09) == 0x000088, "Member 'FCommunityCategoryParam::CommSkillId09' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillId10) == 0x000090, "Member 'FCommunityCategoryParam::CommSkillId10' has a wrong offset!");
static_assert(offsetof(FCommunityCategoryParam, CommSkillIdOver) == 0x000098, "Member 'FCommunityCategoryParam::CommSkillIdOver' has a wrong offset!");

// ScriptStruct ATExt.DownCheckInfo
// 0x0008 (0x0008 - 0x0000)
struct FDownCheckInfo final
{
public:
	float                                         DownRatio;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDownCheckInfo) == 0x000004, "Wrong alignment on FDownCheckInfo");
static_assert(sizeof(FDownCheckInfo) == 0x000008, "Wrong size on FDownCheckInfo");
static_assert(offsetof(FDownCheckInfo, DownRatio) == 0x000000, "Member 'FDownCheckInfo::DownRatio' has a wrong offset!");

// ScriptStruct ATExt.SoulEmTableInfo
// 0x0010 (0x0010 - 0x0000)
struct FSoulEmTableInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UATSoulEmblem*                          SoulEmIns;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoulEmTableInfo) == 0x000008, "Wrong alignment on FSoulEmTableInfo");
static_assert(sizeof(FSoulEmTableInfo) == 0x000010, "Wrong size on FSoulEmTableInfo");
static_assert(offsetof(FSoulEmTableInfo, SoulEmIns) == 0x000008, "Member 'FSoulEmTableInfo::SoulEmIns' has a wrong offset!");

// ScriptStruct ATExt.DlcConsumableInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDlcConsumableInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlcOwnershipState                            State;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Stock;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlcConsumableInfo) == 0x000008, "Wrong alignment on FDlcConsumableInfo");
static_assert(sizeof(FDlcConsumableInfo) == 0x000010, "Wrong size on FDlcConsumableInfo");
static_assert(offsetof(FDlcConsumableInfo, ID) == 0x000000, "Member 'FDlcConsumableInfo::ID' has a wrong offset!");
static_assert(offsetof(FDlcConsumableInfo, State) == 0x000008, "Member 'FDlcConsumableInfo::State' has a wrong offset!");
static_assert(offsetof(FDlcConsumableInfo, Stock) == 0x00000C, "Member 'FDlcConsumableInfo::Stock' has a wrong offset!");

// ScriptStruct ATExt.DlcPersistentInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDlcPersistentInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlcOwnershipState                            State;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDlcPersistentInfo) == 0x000008, "Wrong alignment on FDlcPersistentInfo");
static_assert(sizeof(FDlcPersistentInfo) == 0x000010, "Wrong size on FDlcPersistentInfo");
static_assert(offsetof(FDlcPersistentInfo, ID) == 0x000000, "Member 'FDlcPersistentInfo::ID' has a wrong offset!");
static_assert(offsetof(FDlcPersistentInfo, State) == 0x000008, "Member 'FDlcPersistentInfo::State' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameDlc
// 0x0148 (0x0148 - 0x0000)
struct FATSaveGameDlc final
{
public:
	TMap<class FName, struct FDlcConsumableInfo>  ConsumableItemMap;                                 // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlcPersistentInfo>  QuestMap;                                          // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlcPersistentInfo>  CarddassMap;                                       // 0x00A0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlcPersistentInfo>  OtherMap;                                          // 0x00F0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsPalyDlcFreezer;                                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameDlc) == 0x000008, "Wrong alignment on FATSaveGameDlc");
static_assert(sizeof(FATSaveGameDlc) == 0x000148, "Wrong size on FATSaveGameDlc");
static_assert(offsetof(FATSaveGameDlc, ConsumableItemMap) == 0x000000, "Member 'FATSaveGameDlc::ConsumableItemMap' has a wrong offset!");
static_assert(offsetof(FATSaveGameDlc, QuestMap) == 0x000050, "Member 'FATSaveGameDlc::QuestMap' has a wrong offset!");
static_assert(offsetof(FATSaveGameDlc, CarddassMap) == 0x0000A0, "Member 'FATSaveGameDlc::CarddassMap' has a wrong offset!");
static_assert(offsetof(FATSaveGameDlc, OtherMap) == 0x0000F0, "Member 'FATSaveGameDlc::OtherMap' has a wrong offset!");
static_assert(offsetof(FATSaveGameDlc, IsPalyDlcFreezer) == 0x000140, "Member 'FATSaveGameDlc::IsPalyDlcFreezer' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillAdultList
// 0x0018 (0x0020 - 0x0008)
struct FCommunitySkillAdultList final : public FTableRowBase
{
public:
	class FName                                   BuffId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FeverRate;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShopBuyRate;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShopSellRate;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunitySkillAdultList) == 0x000008, "Wrong alignment on FCommunitySkillAdultList");
static_assert(sizeof(FCommunitySkillAdultList) == 0x000020, "Wrong size on FCommunitySkillAdultList");
static_assert(offsetof(FCommunitySkillAdultList, BuffId) == 0x000008, "Member 'FCommunitySkillAdultList::BuffId' has a wrong offset!");
static_assert(offsetof(FCommunitySkillAdultList, FeverRate) == 0x000010, "Member 'FCommunitySkillAdultList::FeverRate' has a wrong offset!");
static_assert(offsetof(FCommunitySkillAdultList, ShopBuyRate) == 0x000014, "Member 'FCommunitySkillAdultList::ShopBuyRate' has a wrong offset!");
static_assert(offsetof(FCommunitySkillAdultList, ShopSellRate) == 0x000018, "Member 'FCommunitySkillAdultList::ShopSellRate' has a wrong offset!");

// ScriptStruct ATExt.MonitoringSlotSkill
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FMonitoringSlotSkill final
{
public:
	class FName                                   SkillId[0x14];                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonitoringSlotSkill) == 0x000008, "Wrong alignment on FMonitoringSlotSkill");
static_assert(sizeof(FMonitoringSlotSkill) == 0x0000A0, "Wrong size on FMonitoringSlotSkill");
static_assert(offsetof(FMonitoringSlotSkill, SkillId) == 0x000000, "Member 'FMonitoringSlotSkill::SkillId' has a wrong offset!");

// ScriptStruct ATExt.MonitoringCommon
// 0x03F8 (0x03F8 - 0x0000)
struct FMonitoringCommon final
{
public:
	TMap<int32, int32>                            CountMenu;                                         // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CountDevelopShop[0x2];                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      CountTrainingShop;                                 // 0x0058(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, uint32>                     CountTime;                                         // 0x00A8(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CountStartMiniGameAirCar;                          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountGoalMiniGameAirCar;                           // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountStartMiniGameTwinFoot;                        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountGoalMiniGameTwinFoot;                         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountStartMiniGameBaseBall;                        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountGoalMiniGameBaseBall;                         // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountGoalMiniGameBaseBallHomeRun;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      CountCooking;                                      // 0x0118(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      CountCookingCourse;                                // 0x0168(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CountDestroyedEnemiesBase;                         // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountFieldMemories;                                // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountUseItemInBattle;                              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    CountLandmark;                                     // 0x01C8(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      CountSkillInvocation;                              // 0x0218(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       SkillOpen;                                         // 0x0268(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      TotalItem;                                         // 0x02B8(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      CountBoughtItemByShop;                             // 0x0308(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      CountItemUsed;                                     // 0x0358(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FMonitoringSlotSkill>      HasSkills;                                         // 0x03A8(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonitoringCommon) == 0x000008, "Wrong alignment on FMonitoringCommon");
static_assert(sizeof(FMonitoringCommon) == 0x0003F8, "Wrong size on FMonitoringCommon");
static_assert(offsetof(FMonitoringCommon, CountMenu) == 0x000000, "Member 'FMonitoringCommon::CountMenu' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountDevelopShop) == 0x000050, "Member 'FMonitoringCommon::CountDevelopShop' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountTrainingShop) == 0x000058, "Member 'FMonitoringCommon::CountTrainingShop' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountTime) == 0x0000A8, "Member 'FMonitoringCommon::CountTime' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountStartMiniGameAirCar) == 0x0000F8, "Member 'FMonitoringCommon::CountStartMiniGameAirCar' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountGoalMiniGameAirCar) == 0x0000FC, "Member 'FMonitoringCommon::CountGoalMiniGameAirCar' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountStartMiniGameTwinFoot) == 0x000100, "Member 'FMonitoringCommon::CountStartMiniGameTwinFoot' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountGoalMiniGameTwinFoot) == 0x000104, "Member 'FMonitoringCommon::CountGoalMiniGameTwinFoot' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountStartMiniGameBaseBall) == 0x000108, "Member 'FMonitoringCommon::CountStartMiniGameBaseBall' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountGoalMiniGameBaseBall) == 0x00010C, "Member 'FMonitoringCommon::CountGoalMiniGameBaseBall' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountGoalMiniGameBaseBallHomeRun) == 0x000110, "Member 'FMonitoringCommon::CountGoalMiniGameBaseBallHomeRun' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountCooking) == 0x000118, "Member 'FMonitoringCommon::CountCooking' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountCookingCourse) == 0x000168, "Member 'FMonitoringCommon::CountCookingCourse' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountDestroyedEnemiesBase) == 0x0001B8, "Member 'FMonitoringCommon::CountDestroyedEnemiesBase' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountFieldMemories) == 0x0001BC, "Member 'FMonitoringCommon::CountFieldMemories' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountUseItemInBattle) == 0x0001C0, "Member 'FMonitoringCommon::CountUseItemInBattle' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountLandmark) == 0x0001C8, "Member 'FMonitoringCommon::CountLandmark' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountSkillInvocation) == 0x000218, "Member 'FMonitoringCommon::CountSkillInvocation' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, SkillOpen) == 0x000268, "Member 'FMonitoringCommon::SkillOpen' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, TotalItem) == 0x0002B8, "Member 'FMonitoringCommon::TotalItem' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountBoughtItemByShop) == 0x000308, "Member 'FMonitoringCommon::CountBoughtItemByShop' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, CountItemUsed) == 0x000358, "Member 'FMonitoringCommon::CountItemUsed' has a wrong offset!");
static_assert(offsetof(FMonitoringCommon, HasSkills) == 0x0003A8, "Member 'FMonitoringCommon::HasSkills' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillTable
// 0x0008 (0x0010 - 0x0008)
struct FCommunitySkillTable final : public FTableRowBase
{
public:
	class FName                                   BuffId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunitySkillTable) == 0x000008, "Wrong alignment on FCommunitySkillTable");
static_assert(sizeof(FCommunitySkillTable) == 0x000010, "Wrong size on FCommunitySkillTable");
static_assert(offsetof(FCommunitySkillTable, BuffId) == 0x000008, "Member 'FCommunitySkillTable::BuffId' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillTableList
// 0x00B0 (0x00B8 - 0x0008)
struct FCommunitySkillTableList final : public FTableRowBase
{
public:
	struct FCommunitySkillTable                   SkillTbl[0xB];                                     // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunitySkillTableList) == 0x000008, "Wrong alignment on FCommunitySkillTableList");
static_assert(sizeof(FCommunitySkillTableList) == 0x0000B8, "Wrong size on FCommunitySkillTableList");
static_assert(offsetof(FCommunitySkillTableList, SkillTbl) == 0x000008, "Member 'FCommunitySkillTableList::SkillTbl' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillAdventureParam
// 0x0008 (0x0010 - 0x0008)
struct FCommunitySkillAdventureParam final : public FTableRowBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunitySkillAdventureParam) == 0x000008, "Wrong alignment on FCommunitySkillAdventureParam");
static_assert(sizeof(FCommunitySkillAdventureParam) == 0x000010, "Wrong size on FCommunitySkillAdventureParam");
static_assert(offsetof(FCommunitySkillAdventureParam, Value) == 0x000008, "Member 'FCommunitySkillAdventureParam::Value' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameBattle
// 0x0018 (0x0018 - 0x0000)
struct FATSaveGameBattle final
{
public:
	TArray<EOnceDirectionType>                    ExecutedOnceDirectionList;                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	EOptionDifficulty                             Difficulty;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameBattle) == 0x000008, "Wrong alignment on FATSaveGameBattle");
static_assert(sizeof(FATSaveGameBattle) == 0x000018, "Wrong size on FATSaveGameBattle");
static_assert(offsetof(FATSaveGameBattle, ExecutedOnceDirectionList) == 0x000000, "Member 'FATSaveGameBattle::ExecutedOnceDirectionList' has a wrong offset!");
static_assert(offsetof(FATSaveGameBattle, Difficulty) == 0x000010, "Member 'FATSaveGameBattle::Difficulty' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillAdventure
// 0x0010 (0x0018 - 0x0008)
struct FCommunitySkillAdventure final : public FTableRowBase
{
public:
	class FName                                   BuffId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemEffectUpRate;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunitySkillAdventure) == 0x000008, "Wrong alignment on FCommunitySkillAdventure");
static_assert(sizeof(FCommunitySkillAdventure) == 0x000018, "Wrong size on FCommunitySkillAdventure");
static_assert(offsetof(FCommunitySkillAdventure, BuffId) == 0x000008, "Member 'FCommunitySkillAdventure::BuffId' has a wrong offset!");
static_assert(offsetof(FCommunitySkillAdventure, ItemEffectUpRate) == 0x000010, "Member 'FCommunitySkillAdventure::ItemEffectUpRate' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillAdventureList
// 0x0110 (0x0118 - 0x0008)
struct FCommunitySkillAdventureList final : public FTableRowBase
{
public:
	float                                         OxygenGaugeValueBase;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommunitySkillAdventure               SkillTbl[0xB];                                     // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunitySkillAdventureList) == 0x000008, "Wrong alignment on FCommunitySkillAdventureList");
static_assert(sizeof(FCommunitySkillAdventureList) == 0x000118, "Wrong size on FCommunitySkillAdventureList");
static_assert(offsetof(FCommunitySkillAdventureList, OxygenGaugeValueBase) == 0x000008, "Member 'FCommunitySkillAdventureList::OxygenGaugeValueBase' has a wrong offset!");
static_assert(offsetof(FCommunitySkillAdventureList, SkillTbl) == 0x000010, "Member 'FCommunitySkillAdventureList::SkillTbl' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillCooking
// 0x0018 (0x0020 - 0x0008)
struct FCommunitySkillCooking final : public FTableRowBase
{
public:
	class FName                                   BuffId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffTimeRate;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessRate;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StatusUpBonusRate;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunitySkillCooking) == 0x000008, "Wrong alignment on FCommunitySkillCooking");
static_assert(sizeof(FCommunitySkillCooking) == 0x000020, "Wrong size on FCommunitySkillCooking");
static_assert(offsetof(FCommunitySkillCooking, BuffId) == 0x000008, "Member 'FCommunitySkillCooking::BuffId' has a wrong offset!");
static_assert(offsetof(FCommunitySkillCooking, BuffTimeRate) == 0x000010, "Member 'FCommunitySkillCooking::BuffTimeRate' has a wrong offset!");
static_assert(offsetof(FCommunitySkillCooking, SuccessRate) == 0x000014, "Member 'FCommunitySkillCooking::SuccessRate' has a wrong offset!");
static_assert(offsetof(FCommunitySkillCooking, StatusUpBonusRate) == 0x000018, "Member 'FCommunitySkillCooking::StatusUpBonusRate' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillCookingList
// 0x0160 (0x0168 - 0x0008)
struct FCommunitySkillCookingList final : public FTableRowBase
{
public:
	struct FCommunitySkillCooking                 SkillTbl[0xB];                                     // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunitySkillCookingList) == 0x000008, "Wrong alignment on FCommunitySkillCookingList");
static_assert(sizeof(FCommunitySkillCookingList) == 0x000168, "Wrong size on FCommunitySkillCookingList");
static_assert(offsetof(FCommunitySkillCookingList, SkillTbl) == 0x000008, "Member 'FCommunitySkillCookingList::SkillTbl' has a wrong offset!");

// ScriptStruct ATExt.EventBattleCharacterTable
// 0x0030 (0x0038 - 0x0008)
struct FEventBattleCharacterTable final : public FTableRowBase
{
public:
	class FName                                   CharaCategory;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaId;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationId;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FormID;                                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AuraId;                                            // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StatusTableSuffix;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleAISuffix;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleTalkID;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventBattleCharacterTable) == 0x000008, "Wrong alignment on FEventBattleCharacterTable");
static_assert(sizeof(FEventBattleCharacterTable) == 0x000038, "Wrong size on FEventBattleCharacterTable");
static_assert(offsetof(FEventBattleCharacterTable, CharaCategory) == 0x000008, "Member 'FEventBattleCharacterTable::CharaCategory' has a wrong offset!");
static_assert(offsetof(FEventBattleCharacterTable, CharaId) == 0x000010, "Member 'FEventBattleCharacterTable::CharaId' has a wrong offset!");
static_assert(offsetof(FEventBattleCharacterTable, VariationId) == 0x000018, "Member 'FEventBattleCharacterTable::VariationId' has a wrong offset!");
static_assert(offsetof(FEventBattleCharacterTable, FormID) == 0x000019, "Member 'FEventBattleCharacterTable::FormID' has a wrong offset!");
static_assert(offsetof(FEventBattleCharacterTable, AuraId) == 0x00001A, "Member 'FEventBattleCharacterTable::AuraId' has a wrong offset!");
static_assert(offsetof(FEventBattleCharacterTable, Level) == 0x00001C, "Member 'FEventBattleCharacterTable::Level' has a wrong offset!");
static_assert(offsetof(FEventBattleCharacterTable, StatusTableSuffix) == 0x000020, "Member 'FEventBattleCharacterTable::StatusTableSuffix' has a wrong offset!");
static_assert(offsetof(FEventBattleCharacterTable, BattleAISuffix) == 0x000028, "Member 'FEventBattleCharacterTable::BattleAISuffix' has a wrong offset!");
static_assert(offsetof(FEventBattleCharacterTable, BattleTalkID) == 0x000030, "Member 'FEventBattleCharacterTable::BattleTalkID' has a wrong offset!");

// ScriptStruct ATExt.CommunityBoardLinkInfo
// 0x00E0 (0x00E8 - 0x0008)
struct FCommunityBoardLinkInfo final : public FTableRowBase
{
public:
	int32                                         ReleaseLevel;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link1;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link2;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link3;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link4;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link5;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link6;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link7;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link8;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link9;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Link10;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PanelOffset;                                       // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PanelScale;                                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LineSOffset[0xA];                                  // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LineEOffset[0xA];                                  // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityBoardLinkInfo) == 0x000008, "Wrong alignment on FCommunityBoardLinkInfo");
static_assert(sizeof(FCommunityBoardLinkInfo) == 0x0000E8, "Wrong size on FCommunityBoardLinkInfo");
static_assert(offsetof(FCommunityBoardLinkInfo, ReleaseLevel) == 0x000008, "Member 'FCommunityBoardLinkInfo::ReleaseLevel' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link1) == 0x00000C, "Member 'FCommunityBoardLinkInfo::Link1' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link2) == 0x000010, "Member 'FCommunityBoardLinkInfo::Link2' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link3) == 0x000014, "Member 'FCommunityBoardLinkInfo::Link3' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link4) == 0x000018, "Member 'FCommunityBoardLinkInfo::Link4' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link5) == 0x00001C, "Member 'FCommunityBoardLinkInfo::Link5' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link6) == 0x000020, "Member 'FCommunityBoardLinkInfo::Link6' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link7) == 0x000024, "Member 'FCommunityBoardLinkInfo::Link7' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link8) == 0x000028, "Member 'FCommunityBoardLinkInfo::Link8' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link9) == 0x00002C, "Member 'FCommunityBoardLinkInfo::Link9' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, Link10) == 0x000030, "Member 'FCommunityBoardLinkInfo::Link10' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, PanelOffset) == 0x000034, "Member 'FCommunityBoardLinkInfo::PanelOffset' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, PanelScale) == 0x00003C, "Member 'FCommunityBoardLinkInfo::PanelScale' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, ZOrder) == 0x000044, "Member 'FCommunityBoardLinkInfo::ZOrder' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, LineSOffset) == 0x000048, "Member 'FCommunityBoardLinkInfo::LineSOffset' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLinkInfo, LineEOffset) == 0x000098, "Member 'FCommunityBoardLinkInfo::LineEOffset' has a wrong offset!");

// ScriptStruct ATExt.CommunityBoardLayout
// 0x0100 (0x0108 - 0x0008)
struct FCommunityBoardLayout final : public FTableRowBase
{
public:
	int32                                         Col1;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col2;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col3;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col4;                                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col5;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col6;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col7;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col8;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col9;                                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col10;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col11;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col12;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col13;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col14;                                             // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col15;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col16;                                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col17;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col18;                                             // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col19;                                             // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col20;                                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col21;                                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col22;                                             // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col23;                                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col24;                                             // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col25;                                             // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col26;                                             // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col27;                                             // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col28;                                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col29;                                             // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col30;                                             // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col31;                                             // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col32;                                             // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col33;                                             // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col34;                                             // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col35;                                             // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col36;                                             // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col37;                                             // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col38;                                             // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col39;                                             // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col40;                                             // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col41;                                             // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col42;                                             // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col43;                                             // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col44;                                             // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col45;                                             // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col46;                                             // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col47;                                             // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col48;                                             // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col49;                                             // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col50;                                             // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col51;                                             // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col52;                                             // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col53;                                             // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col54;                                             // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col55;                                             // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col56;                                             // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col57;                                             // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col58;                                             // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col59;                                             // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col60;                                             // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col61;                                             // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col62;                                             // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col63;                                             // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Col64;                                             // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityBoardLayout) == 0x000008, "Wrong alignment on FCommunityBoardLayout");
static_assert(sizeof(FCommunityBoardLayout) == 0x000108, "Wrong size on FCommunityBoardLayout");
static_assert(offsetof(FCommunityBoardLayout, Col1) == 0x000008, "Member 'FCommunityBoardLayout::Col1' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col2) == 0x00000C, "Member 'FCommunityBoardLayout::Col2' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col3) == 0x000010, "Member 'FCommunityBoardLayout::Col3' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col4) == 0x000014, "Member 'FCommunityBoardLayout::Col4' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col5) == 0x000018, "Member 'FCommunityBoardLayout::Col5' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col6) == 0x00001C, "Member 'FCommunityBoardLayout::Col6' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col7) == 0x000020, "Member 'FCommunityBoardLayout::Col7' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col8) == 0x000024, "Member 'FCommunityBoardLayout::Col8' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col9) == 0x000028, "Member 'FCommunityBoardLayout::Col9' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col10) == 0x00002C, "Member 'FCommunityBoardLayout::Col10' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col11) == 0x000030, "Member 'FCommunityBoardLayout::Col11' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col12) == 0x000034, "Member 'FCommunityBoardLayout::Col12' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col13) == 0x000038, "Member 'FCommunityBoardLayout::Col13' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col14) == 0x00003C, "Member 'FCommunityBoardLayout::Col14' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col15) == 0x000040, "Member 'FCommunityBoardLayout::Col15' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col16) == 0x000044, "Member 'FCommunityBoardLayout::Col16' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col17) == 0x000048, "Member 'FCommunityBoardLayout::Col17' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col18) == 0x00004C, "Member 'FCommunityBoardLayout::Col18' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col19) == 0x000050, "Member 'FCommunityBoardLayout::Col19' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col20) == 0x000054, "Member 'FCommunityBoardLayout::Col20' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col21) == 0x000058, "Member 'FCommunityBoardLayout::Col21' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col22) == 0x00005C, "Member 'FCommunityBoardLayout::Col22' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col23) == 0x000060, "Member 'FCommunityBoardLayout::Col23' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col24) == 0x000064, "Member 'FCommunityBoardLayout::Col24' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col25) == 0x000068, "Member 'FCommunityBoardLayout::Col25' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col26) == 0x00006C, "Member 'FCommunityBoardLayout::Col26' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col27) == 0x000070, "Member 'FCommunityBoardLayout::Col27' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col28) == 0x000074, "Member 'FCommunityBoardLayout::Col28' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col29) == 0x000078, "Member 'FCommunityBoardLayout::Col29' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col30) == 0x00007C, "Member 'FCommunityBoardLayout::Col30' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col31) == 0x000080, "Member 'FCommunityBoardLayout::Col31' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col32) == 0x000084, "Member 'FCommunityBoardLayout::Col32' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col33) == 0x000088, "Member 'FCommunityBoardLayout::Col33' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col34) == 0x00008C, "Member 'FCommunityBoardLayout::Col34' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col35) == 0x000090, "Member 'FCommunityBoardLayout::Col35' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col36) == 0x000094, "Member 'FCommunityBoardLayout::Col36' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col37) == 0x000098, "Member 'FCommunityBoardLayout::Col37' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col38) == 0x00009C, "Member 'FCommunityBoardLayout::Col38' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col39) == 0x0000A0, "Member 'FCommunityBoardLayout::Col39' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col40) == 0x0000A4, "Member 'FCommunityBoardLayout::Col40' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col41) == 0x0000A8, "Member 'FCommunityBoardLayout::Col41' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col42) == 0x0000AC, "Member 'FCommunityBoardLayout::Col42' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col43) == 0x0000B0, "Member 'FCommunityBoardLayout::Col43' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col44) == 0x0000B4, "Member 'FCommunityBoardLayout::Col44' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col45) == 0x0000B8, "Member 'FCommunityBoardLayout::Col45' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col46) == 0x0000BC, "Member 'FCommunityBoardLayout::Col46' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col47) == 0x0000C0, "Member 'FCommunityBoardLayout::Col47' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col48) == 0x0000C4, "Member 'FCommunityBoardLayout::Col48' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col49) == 0x0000C8, "Member 'FCommunityBoardLayout::Col49' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col50) == 0x0000CC, "Member 'FCommunityBoardLayout::Col50' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col51) == 0x0000D0, "Member 'FCommunityBoardLayout::Col51' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col52) == 0x0000D4, "Member 'FCommunityBoardLayout::Col52' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col53) == 0x0000D8, "Member 'FCommunityBoardLayout::Col53' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col54) == 0x0000DC, "Member 'FCommunityBoardLayout::Col54' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col55) == 0x0000E0, "Member 'FCommunityBoardLayout::Col55' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col56) == 0x0000E4, "Member 'FCommunityBoardLayout::Col56' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col57) == 0x0000E8, "Member 'FCommunityBoardLayout::Col57' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col58) == 0x0000EC, "Member 'FCommunityBoardLayout::Col58' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col59) == 0x0000F0, "Member 'FCommunityBoardLayout::Col59' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col60) == 0x0000F4, "Member 'FCommunityBoardLayout::Col60' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col61) == 0x0000F8, "Member 'FCommunityBoardLayout::Col61' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col62) == 0x0000FC, "Member 'FCommunityBoardLayout::Col62' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col63) == 0x000100, "Member 'FCommunityBoardLayout::Col63' has a wrong offset!");
static_assert(offsetof(FCommunityBoardLayout, Col64) == 0x000104, "Member 'FCommunityBoardLayout::Col64' has a wrong offset!");

// ScriptStruct ATExt.ATSaveCharacterCookingBuff
// 0x000C (0x000C - 0x0000)
struct FATSaveCharacterCookingBuff final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeMax;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveCharacterCookingBuff) == 0x000004, "Wrong alignment on FATSaveCharacterCookingBuff");
static_assert(sizeof(FATSaveCharacterCookingBuff) == 0x00000C, "Wrong size on FATSaveCharacterCookingBuff");
static_assert(offsetof(FATSaveCharacterCookingBuff, Rate) == 0x000000, "Member 'FATSaveCharacterCookingBuff::Rate' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterCookingBuff, Time) == 0x000004, "Member 'FATSaveCharacterCookingBuff::Time' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterCookingBuff, TimeMax) == 0x000008, "Member 'FATSaveCharacterCookingBuff::TimeMax' has a wrong offset!");

// ScriptStruct ATExt.LinkBonusParam
// 0x0050 (0x0058 - 0x0008)
struct FLinkBonusParam final : public FTableRowBase
{
public:
	class FName                                   JName;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameId;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaveNo;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FormationNum;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlusBonus;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LinkMemberId1;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkMemberId2;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkMemberId3;                                     // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkMemberId4;                                     // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkMemberId5;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkMemberId6;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinkBonusParam) == 0x000008, "Wrong alignment on FLinkBonusParam");
static_assert(sizeof(FLinkBonusParam) == 0x000058, "Wrong size on FLinkBonusParam");
static_assert(offsetof(FLinkBonusParam, JName) == 0x000008, "Member 'FLinkBonusParam::JName' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, NameId) == 0x000010, "Member 'FLinkBonusParam::NameId' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, SaveNo) == 0x000018, "Member 'FLinkBonusParam::SaveNo' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, FormationNum) == 0x00001C, "Member 'FLinkBonusParam::FormationNum' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, PlusBonus) == 0x000020, "Member 'FLinkBonusParam::PlusBonus' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, LinkMemberId1) == 0x000028, "Member 'FLinkBonusParam::LinkMemberId1' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, LinkMemberId2) == 0x000030, "Member 'FLinkBonusParam::LinkMemberId2' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, LinkMemberId3) == 0x000038, "Member 'FLinkBonusParam::LinkMemberId3' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, LinkMemberId4) == 0x000040, "Member 'FLinkBonusParam::LinkMemberId4' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, LinkMemberId5) == 0x000048, "Member 'FLinkBonusParam::LinkMemberId5' has a wrong offset!");
static_assert(offsetof(FLinkBonusParam, LinkMemberId6) == 0x000050, "Member 'FLinkBonusParam::LinkMemberId6' has a wrong offset!");

// ScriptStruct ATExt.SoulEmData
// 0x004C (0x004C - 0x0000)
struct alignas(0x04) FSoulEmData final
{
public:
	uint8                                         Pad_0[0x4C];                                       // 0x0000(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoulEmData) == 0x000004, "Wrong alignment on FSoulEmData");
static_assert(sizeof(FSoulEmData) == 0x00004C, "Wrong size on FSoulEmData");

// ScriptStruct ATExt.ATSaveGameExtermination
// 0x00A8 (0x00A8 - 0x0000)
struct FATSaveGameExtermination final
{
public:
	TSet<class FName>                             DestroyBastion;                                    // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TSet<class FName>                             BattleEndBastion;                                  // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameExtermination) == 0x000008, "Wrong alignment on FATSaveGameExtermination");
static_assert(sizeof(FATSaveGameExtermination) == 0x0000A8, "Wrong size on FATSaveGameExtermination");
static_assert(offsetof(FATSaveGameExtermination, DestroyBastion) == 0x000000, "Member 'FATSaveGameExtermination::DestroyBastion' has a wrong offset!");
static_assert(offsetof(FATSaveGameExtermination, BattleEndBastion) == 0x000050, "Member 'FATSaveGameExtermination::BattleEndBastion' has a wrong offset!");

// ScriptStruct ATExt.CommunitySkillParam
// 0x0028 (0x0030 - 0x0008)
struct FCommunitySkillParam final : public FTableRowBase
{
public:
	class FName                                   JName;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameId;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CommCategoryId;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DescId;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Group;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunitySkillParam) == 0x000008, "Wrong alignment on FCommunitySkillParam");
static_assert(sizeof(FCommunitySkillParam) == 0x000030, "Wrong size on FCommunitySkillParam");
static_assert(offsetof(FCommunitySkillParam, JName) == 0x000008, "Member 'FCommunitySkillParam::JName' has a wrong offset!");
static_assert(offsetof(FCommunitySkillParam, NameId) == 0x000010, "Member 'FCommunitySkillParam::NameId' has a wrong offset!");
static_assert(offsetof(FCommunitySkillParam, CommCategoryId) == 0x000018, "Member 'FCommunitySkillParam::CommCategoryId' has a wrong offset!");
static_assert(offsetof(FCommunitySkillParam, DescId) == 0x000020, "Member 'FCommunitySkillParam::DescId' has a wrong offset!");
static_assert(offsetof(FCommunitySkillParam, Group) == 0x000028, "Member 'FCommunitySkillParam::Group' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameOption
// 0x0001 (0x0001 - 0x0000)
struct FATSaveGameOption final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameOption) == 0x000001, "Wrong alignment on FATSaveGameOption");
static_assert(sizeof(FATSaveGameOption) == 0x000001, "Wrong size on FATSaveGameOption");

// ScriptStruct ATExt.ATSaveGameAtrocious
// 0x0168 (0x0168 - 0x0000)
struct FATSaveGameAtrocious final
{
public:
	EATAtrociousSaveState                         PhaseComplete[0x20];                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FATSaveGameAtrociousDefeatParty> DefeatPartyMap;                                    // 0x0080(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         CoolTime;                                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        NoticeBit;                                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        Laps;                                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        DefeatEnemyNum;                                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EATAtrociousSaveState                         PhaseCompleteDlc5[0x20];                           // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        NoticeBitDlc5;                                     // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        LapsDlc5;                                          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameAtrocious) == 0x000008, "Wrong alignment on FATSaveGameAtrocious");
static_assert(sizeof(FATSaveGameAtrocious) == 0x000168, "Wrong size on FATSaveGameAtrocious");
static_assert(offsetof(FATSaveGameAtrocious, PhaseComplete) == 0x000000, "Member 'FATSaveGameAtrocious::PhaseComplete' has a wrong offset!");
static_assert(offsetof(FATSaveGameAtrocious, DefeatPartyMap) == 0x000080, "Member 'FATSaveGameAtrocious::DefeatPartyMap' has a wrong offset!");
static_assert(offsetof(FATSaveGameAtrocious, CoolTime) == 0x0000D0, "Member 'FATSaveGameAtrocious::CoolTime' has a wrong offset!");
static_assert(offsetof(FATSaveGameAtrocious, NoticeBit) == 0x0000D4, "Member 'FATSaveGameAtrocious::NoticeBit' has a wrong offset!");
static_assert(offsetof(FATSaveGameAtrocious, Laps) == 0x0000D8, "Member 'FATSaveGameAtrocious::Laps' has a wrong offset!");
static_assert(offsetof(FATSaveGameAtrocious, DefeatEnemyNum) == 0x0000DC, "Member 'FATSaveGameAtrocious::DefeatEnemyNum' has a wrong offset!");
static_assert(offsetof(FATSaveGameAtrocious, PhaseCompleteDlc5) == 0x0000E0, "Member 'FATSaveGameAtrocious::PhaseCompleteDlc5' has a wrong offset!");
static_assert(offsetof(FATSaveGameAtrocious, NoticeBitDlc5) == 0x000160, "Member 'FATSaveGameAtrocious::NoticeBitDlc5' has a wrong offset!");
static_assert(offsetof(FATSaveGameAtrocious, LapsDlc5) == 0x000164, "Member 'FATSaveGameAtrocious::LapsDlc5' has a wrong offset!");

// ScriptStruct ATExt.SoulEmCharacterParam
// 0x0120 (0x0128 - 0x0008)
struct FSoulEmCharacterParam final : public FTableRowBase
{
public:
	class FName                                   JName;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameId;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplacementId;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaveNo;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECOMMUNITY_CATEGORY                           GoodCommId;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProfileId01;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileId02;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestId02;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileId03;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestId03;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedVoiceId01;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedVoiceId02;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedVoiceId03;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseVoiceId01;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseVoiceId02;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LinkBonusId01;                                     // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkBonusId02;                                     // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkBonusId03;                                     // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkBonusId04;                                     // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkBonusId05;                                     // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkBonusId06;                                     // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkBonusId07;                                     // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkBonusId08;                                     // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavDef;                                            // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavRewardBorder01;                                 // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FavRewardItemId01;                                 // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavRewardItemNum01;                                // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavRewardBorder02;                                 // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FavRewardItemId02;                                 // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavRewardItemNum02;                                // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavRewardBorder03;                                 // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FavRewardItemId03;                                 // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavRewardItemNum03;                                // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityDefLv01;                                  // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityMaxLv01;                                  // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityDefLv02;                                  // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityMaxLv02;                                  // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityDefLv03;                                  // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityMaxLv03;                                  // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityDefLv04;                                  // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityMaxLv04;                                  // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityDefLv05;                                  // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityMaxLv05;                                  // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityDefLv06;                                  // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityMaxLv06;                                  // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityDefLv07;                                  // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityMaxLv07;                                  // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UniqueId;                                          // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExtendProgressCharacter;                         // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoulEmCharacterParam) == 0x000008, "Wrong alignment on FSoulEmCharacterParam");
static_assert(sizeof(FSoulEmCharacterParam) == 0x000128, "Wrong size on FSoulEmCharacterParam");
static_assert(offsetof(FSoulEmCharacterParam, JName) == 0x000008, "Member 'FSoulEmCharacterParam::JName' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, NameId) == 0x000010, "Member 'FSoulEmCharacterParam::NameId' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, ReplacementId) == 0x000018, "Member 'FSoulEmCharacterParam::ReplacementId' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, SaveNo) == 0x000020, "Member 'FSoulEmCharacterParam::SaveNo' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, GoodCommId) == 0x000024, "Member 'FSoulEmCharacterParam::GoodCommId' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, ProfileId01) == 0x000028, "Member 'FSoulEmCharacterParam::ProfileId01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, ProfileId02) == 0x000030, "Member 'FSoulEmCharacterParam::ProfileId02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, QuestId02) == 0x000038, "Member 'FSoulEmCharacterParam::QuestId02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, ProfileId03) == 0x000040, "Member 'FSoulEmCharacterParam::ProfileId03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, QuestId03) == 0x000048, "Member 'FSoulEmCharacterParam::QuestId03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, SelectedVoiceId01) == 0x000050, "Member 'FSoulEmCharacterParam::SelectedVoiceId01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, SelectedVoiceId02) == 0x000054, "Member 'FSoulEmCharacterParam::SelectedVoiceId02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, SelectedVoiceId03) == 0x000058, "Member 'FSoulEmCharacterParam::SelectedVoiceId03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, ItemUseVoiceId01) == 0x00005C, "Member 'FSoulEmCharacterParam::ItemUseVoiceId01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, ItemUseVoiceId02) == 0x000060, "Member 'FSoulEmCharacterParam::ItemUseVoiceId02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, LinkBonusId01) == 0x000068, "Member 'FSoulEmCharacterParam::LinkBonusId01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, LinkBonusId02) == 0x000070, "Member 'FSoulEmCharacterParam::LinkBonusId02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, LinkBonusId03) == 0x000078, "Member 'FSoulEmCharacterParam::LinkBonusId03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, LinkBonusId04) == 0x000080, "Member 'FSoulEmCharacterParam::LinkBonusId04' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, LinkBonusId05) == 0x000088, "Member 'FSoulEmCharacterParam::LinkBonusId05' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, LinkBonusId06) == 0x000090, "Member 'FSoulEmCharacterParam::LinkBonusId06' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, LinkBonusId07) == 0x000098, "Member 'FSoulEmCharacterParam::LinkBonusId07' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, LinkBonusId08) == 0x0000A0, "Member 'FSoulEmCharacterParam::LinkBonusId08' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavDef) == 0x0000A8, "Member 'FSoulEmCharacterParam::FavDef' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardBorder01) == 0x0000AC, "Member 'FSoulEmCharacterParam::FavRewardBorder01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardItemId01) == 0x0000B0, "Member 'FSoulEmCharacterParam::FavRewardItemId01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardItemNum01) == 0x0000B8, "Member 'FSoulEmCharacterParam::FavRewardItemNum01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardBorder02) == 0x0000BC, "Member 'FSoulEmCharacterParam::FavRewardBorder02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardItemId02) == 0x0000C0, "Member 'FSoulEmCharacterParam::FavRewardItemId02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardItemNum02) == 0x0000C8, "Member 'FSoulEmCharacterParam::FavRewardItemNum02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardBorder03) == 0x0000CC, "Member 'FSoulEmCharacterParam::FavRewardBorder03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardItemId03) == 0x0000D0, "Member 'FSoulEmCharacterParam::FavRewardItemId03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, FavRewardItemNum03) == 0x0000D8, "Member 'FSoulEmCharacterParam::FavRewardItemNum03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityDefLv01) == 0x0000DC, "Member 'FSoulEmCharacterParam::CommunityDefLv01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityMaxLv01) == 0x0000E0, "Member 'FSoulEmCharacterParam::CommunityMaxLv01' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityDefLv02) == 0x0000E4, "Member 'FSoulEmCharacterParam::CommunityDefLv02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityMaxLv02) == 0x0000E8, "Member 'FSoulEmCharacterParam::CommunityMaxLv02' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityDefLv03) == 0x0000EC, "Member 'FSoulEmCharacterParam::CommunityDefLv03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityMaxLv03) == 0x0000F0, "Member 'FSoulEmCharacterParam::CommunityMaxLv03' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityDefLv04) == 0x0000F4, "Member 'FSoulEmCharacterParam::CommunityDefLv04' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityMaxLv04) == 0x0000F8, "Member 'FSoulEmCharacterParam::CommunityMaxLv04' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityDefLv05) == 0x0000FC, "Member 'FSoulEmCharacterParam::CommunityDefLv05' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityMaxLv05) == 0x000100, "Member 'FSoulEmCharacterParam::CommunityMaxLv05' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityDefLv06) == 0x000104, "Member 'FSoulEmCharacterParam::CommunityDefLv06' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityMaxLv06) == 0x000108, "Member 'FSoulEmCharacterParam::CommunityMaxLv06' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityDefLv07) == 0x00010C, "Member 'FSoulEmCharacterParam::CommunityDefLv07' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, CommunityMaxLv07) == 0x000110, "Member 'FSoulEmCharacterParam::CommunityMaxLv07' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, UniqueId) == 0x000118, "Member 'FSoulEmCharacterParam::UniqueId' has a wrong offset!");
static_assert(offsetof(FSoulEmCharacterParam, IsExtendProgressCharacter) == 0x000120, "Member 'FSoulEmCharacterParam::IsExtendProgressCharacter' has a wrong offset!");

// ScriptStruct ATExt.SoulEmItemPreference
// 0x00C8 (0x00D0 - 0x0008)
struct FSoulEmItemPreference final : public FTableRowBase
{
public:
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_001;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_002;                                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_003;                                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_004;                                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_005;                                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_006;                                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_007;                                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_008;                                  // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_009;                                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_010;                                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_011;                                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_012;                                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_013;                                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_014;                                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_015;                                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_016;                                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_017;                                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_018;                                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_019;                                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_020;                                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_021;                                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_022;                                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_023;                                  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_024;                                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_025;                                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_026;                                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_027;                                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_028;                                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_029;                                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_030;                                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_031;                                  // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_032;                                  // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_033;                                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_034;                                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_035;                                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_036;                                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_037;                                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_038;                                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_039;                                  // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_040;                                  // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_041;                                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_042;                                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_043;                                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_044;                                  // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_045;                                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_046;                                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_047;                                  // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_048;                                  // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_049;                                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_050;                                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_051;                                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_052;                                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_053;                                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_054;                                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_055;                                  // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_056;                                  // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_057;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_058;                                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_059;                                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_060;                                  // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_061;                                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_062;                                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_063;                                  // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_064;                                  // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_065;                                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_066;                                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_067;                                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_068;                                  // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_069;                                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_070;                                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_071;                                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_072;                                  // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_073;                                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_074;                                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_075;                                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_076;                                  // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_077;                                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_078;                                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_079;                                  // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_080;                                  // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_081;                                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_082;                                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_083;                                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_084;                                  // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_085;                                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_086;                                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_087;                                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_088;                                  // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_089;                                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_090;                                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_091;                                  // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_092;                                  // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_093;                                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_094;                                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_095;                                  // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_096;                                  // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_097;                                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_098;                                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_099;                                  // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_100;                                  // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_101;                                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_102;                                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_103;                                  // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_104;                                  // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_105;                                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_106;                                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_107;                                  // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_108;                                  // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_109;                                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_110;                                  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_111;                                  // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_112;                                  // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_113;                                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_114;                                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_115;                                  // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_116;                                  // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_117;                                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_118;                                  // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_119;                                  // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_120;                                  // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_121;                                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_122;                                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_123;                                  // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_124;                                  // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_125;                                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_126;                                  // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_127;                                  // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_128;                                  // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_129;                                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_130;                                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_131;                                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_132;                                  // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_133;                                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_134;                                  // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_135;                                  // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_136;                                  // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_137;                                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_138;                                  // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_139;                                  // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_140;                                  // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_141;                                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_142;                                  // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_143;                                  // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_144;                                  // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_145;                                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_146;                                  // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_147;                                  // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_148;                                  // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_149;                                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_150;                                  // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_151;                                  // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_152;                                  // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_153;                                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_154;                                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_155;                                  // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_156;                                  // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_157;                                  // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_158;                                  // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_159;                                  // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_160;                                  // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_161;                                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_162;                                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_163;                                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_164;                                  // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_165;                                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_166;                                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_167;                                  // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_168;                                  // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_169;                                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_170;                                  // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_171;                                  // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_172;                                  // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_173;                                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_174;                                  // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_175;                                  // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_176;                                  // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_177;                                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_178;                                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_179;                                  // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_180;                                  // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_181;                                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_182;                                  // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_183;                                  // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_184;                                  // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_185;                                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_186;                                  // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_187;                                  // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_188;                                  // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_189;                                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_190;                                  // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_191;                                  // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_192;                                  // 0x00C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_193;                                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_194;                                  // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_195;                                  // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_196;                                  // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_197;                                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_198;                                  // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_199;                                  // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESOUL_EM_PREFERENCE                           SOUL_EM_CHAR_200;                                  // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoulEmItemPreference) == 0x000008, "Wrong alignment on FSoulEmItemPreference");
static_assert(sizeof(FSoulEmItemPreference) == 0x0000D0, "Wrong size on FSoulEmItemPreference");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_001) == 0x000008, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_001' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_002) == 0x000009, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_002' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_003) == 0x00000A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_003' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_004) == 0x00000B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_004' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_005) == 0x00000C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_005' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_006) == 0x00000D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_006' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_007) == 0x00000E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_007' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_008) == 0x00000F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_008' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_009) == 0x000010, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_009' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_010) == 0x000011, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_010' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_011) == 0x000012, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_011' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_012) == 0x000013, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_012' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_013) == 0x000014, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_013' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_014) == 0x000015, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_014' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_015) == 0x000016, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_015' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_016) == 0x000017, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_016' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_017) == 0x000018, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_017' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_018) == 0x000019, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_018' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_019) == 0x00001A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_019' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_020) == 0x00001B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_020' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_021) == 0x00001C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_021' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_022) == 0x00001D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_022' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_023) == 0x00001E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_023' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_024) == 0x00001F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_024' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_025) == 0x000020, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_025' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_026) == 0x000021, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_026' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_027) == 0x000022, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_027' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_028) == 0x000023, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_028' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_029) == 0x000024, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_029' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_030) == 0x000025, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_030' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_031) == 0x000026, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_031' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_032) == 0x000027, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_032' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_033) == 0x000028, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_033' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_034) == 0x000029, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_034' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_035) == 0x00002A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_035' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_036) == 0x00002B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_036' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_037) == 0x00002C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_037' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_038) == 0x00002D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_038' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_039) == 0x00002E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_039' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_040) == 0x00002F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_040' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_041) == 0x000030, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_041' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_042) == 0x000031, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_042' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_043) == 0x000032, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_043' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_044) == 0x000033, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_044' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_045) == 0x000034, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_045' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_046) == 0x000035, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_046' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_047) == 0x000036, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_047' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_048) == 0x000037, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_048' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_049) == 0x000038, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_049' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_050) == 0x000039, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_050' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_051) == 0x00003A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_051' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_052) == 0x00003B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_052' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_053) == 0x00003C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_053' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_054) == 0x00003D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_054' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_055) == 0x00003E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_055' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_056) == 0x00003F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_056' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_057) == 0x000040, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_057' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_058) == 0x000041, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_058' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_059) == 0x000042, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_059' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_060) == 0x000043, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_060' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_061) == 0x000044, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_061' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_062) == 0x000045, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_062' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_063) == 0x000046, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_063' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_064) == 0x000047, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_064' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_065) == 0x000048, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_065' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_066) == 0x000049, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_066' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_067) == 0x00004A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_067' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_068) == 0x00004B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_068' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_069) == 0x00004C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_069' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_070) == 0x00004D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_070' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_071) == 0x00004E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_071' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_072) == 0x00004F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_072' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_073) == 0x000050, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_073' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_074) == 0x000051, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_074' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_075) == 0x000052, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_075' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_076) == 0x000053, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_076' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_077) == 0x000054, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_077' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_078) == 0x000055, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_078' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_079) == 0x000056, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_079' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_080) == 0x000057, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_080' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_081) == 0x000058, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_081' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_082) == 0x000059, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_082' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_083) == 0x00005A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_083' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_084) == 0x00005B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_084' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_085) == 0x00005C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_085' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_086) == 0x00005D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_086' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_087) == 0x00005E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_087' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_088) == 0x00005F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_088' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_089) == 0x000060, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_089' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_090) == 0x000061, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_090' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_091) == 0x000062, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_091' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_092) == 0x000063, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_092' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_093) == 0x000064, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_093' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_094) == 0x000065, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_094' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_095) == 0x000066, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_095' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_096) == 0x000067, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_096' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_097) == 0x000068, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_097' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_098) == 0x000069, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_098' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_099) == 0x00006A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_099' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_100) == 0x00006B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_100' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_101) == 0x00006C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_101' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_102) == 0x00006D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_102' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_103) == 0x00006E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_103' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_104) == 0x00006F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_104' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_105) == 0x000070, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_105' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_106) == 0x000071, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_106' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_107) == 0x000072, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_107' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_108) == 0x000073, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_108' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_109) == 0x000074, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_109' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_110) == 0x000075, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_110' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_111) == 0x000076, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_111' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_112) == 0x000077, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_112' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_113) == 0x000078, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_113' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_114) == 0x000079, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_114' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_115) == 0x00007A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_115' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_116) == 0x00007B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_116' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_117) == 0x00007C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_117' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_118) == 0x00007D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_118' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_119) == 0x00007E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_119' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_120) == 0x00007F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_120' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_121) == 0x000080, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_121' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_122) == 0x000081, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_122' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_123) == 0x000082, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_123' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_124) == 0x000083, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_124' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_125) == 0x000084, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_125' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_126) == 0x000085, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_126' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_127) == 0x000086, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_127' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_128) == 0x000087, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_128' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_129) == 0x000088, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_129' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_130) == 0x000089, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_130' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_131) == 0x00008A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_131' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_132) == 0x00008B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_132' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_133) == 0x00008C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_133' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_134) == 0x00008D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_134' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_135) == 0x00008E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_135' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_136) == 0x00008F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_136' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_137) == 0x000090, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_137' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_138) == 0x000091, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_138' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_139) == 0x000092, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_139' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_140) == 0x000093, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_140' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_141) == 0x000094, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_141' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_142) == 0x000095, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_142' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_143) == 0x000096, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_143' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_144) == 0x000097, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_144' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_145) == 0x000098, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_145' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_146) == 0x000099, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_146' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_147) == 0x00009A, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_147' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_148) == 0x00009B, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_148' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_149) == 0x00009C, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_149' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_150) == 0x00009D, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_150' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_151) == 0x00009E, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_151' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_152) == 0x00009F, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_152' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_153) == 0x0000A0, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_153' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_154) == 0x0000A1, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_154' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_155) == 0x0000A2, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_155' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_156) == 0x0000A3, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_156' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_157) == 0x0000A4, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_157' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_158) == 0x0000A5, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_158' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_159) == 0x0000A6, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_159' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_160) == 0x0000A7, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_160' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_161) == 0x0000A8, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_161' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_162) == 0x0000A9, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_162' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_163) == 0x0000AA, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_163' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_164) == 0x0000AB, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_164' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_165) == 0x0000AC, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_165' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_166) == 0x0000AD, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_166' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_167) == 0x0000AE, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_167' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_168) == 0x0000AF, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_168' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_169) == 0x0000B0, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_169' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_170) == 0x0000B1, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_170' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_171) == 0x0000B2, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_171' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_172) == 0x0000B3, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_172' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_173) == 0x0000B4, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_173' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_174) == 0x0000B5, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_174' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_175) == 0x0000B6, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_175' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_176) == 0x0000B7, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_176' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_177) == 0x0000B8, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_177' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_178) == 0x0000B9, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_178' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_179) == 0x0000BA, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_179' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_180) == 0x0000BB, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_180' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_181) == 0x0000BC, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_181' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_182) == 0x0000BD, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_182' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_183) == 0x0000BE, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_183' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_184) == 0x0000BF, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_184' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_185) == 0x0000C0, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_185' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_186) == 0x0000C1, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_186' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_187) == 0x0000C2, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_187' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_188) == 0x0000C3, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_188' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_189) == 0x0000C4, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_189' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_190) == 0x0000C5, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_190' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_191) == 0x0000C6, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_191' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_192) == 0x0000C7, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_192' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_193) == 0x0000C8, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_193' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_194) == 0x0000C9, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_194' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_195) == 0x0000CA, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_195' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_196) == 0x0000CB, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_196' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_197) == 0x0000CC, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_197' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_198) == 0x0000CD, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_198' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_199) == 0x0000CE, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_199' has a wrong offset!");
static_assert(offsetof(FSoulEmItemPreference, SOUL_EM_CHAR_200) == 0x0000CF, "Member 'FSoulEmItemPreference::SOUL_EM_CHAR_200' has a wrong offset!");

// ScriptStruct ATExt.ATDataAssetCarParameterAreaInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FATDataAssetCarParameterAreaInfo final
{
public:
	class FName                                   CarGroupName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityForSpawn;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CarSpeedMin;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CarSpeedMax;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATDataAssetCarParameterAreaInfo) == 0x000008, "Wrong alignment on FATDataAssetCarParameterAreaInfo");
static_assert(sizeof(FATDataAssetCarParameterAreaInfo) == 0x000018, "Wrong size on FATDataAssetCarParameterAreaInfo");
static_assert(offsetof(FATDataAssetCarParameterAreaInfo, CarGroupName) == 0x000000, "Member 'FATDataAssetCarParameterAreaInfo::CarGroupName' has a wrong offset!");
static_assert(offsetof(FATDataAssetCarParameterAreaInfo, DensityForSpawn) == 0x000008, "Member 'FATDataAssetCarParameterAreaInfo::DensityForSpawn' has a wrong offset!");
static_assert(offsetof(FATDataAssetCarParameterAreaInfo, CarSpeedMin) == 0x00000C, "Member 'FATDataAssetCarParameterAreaInfo::CarSpeedMin' has a wrong offset!");
static_assert(offsetof(FATDataAssetCarParameterAreaInfo, CarSpeedMax) == 0x000010, "Member 'FATDataAssetCarParameterAreaInfo::CarSpeedMax' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameCrossTalk
// 0x00A0 (0x00A0 - 0x0000)
struct FATSaveGameCrossTalk final
{
public:
	TSet<class FName>                             AlreadyTalk;                                       // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameCrossTalk) == 0x000008, "Wrong alignment on FATSaveGameCrossTalk");
static_assert(sizeof(FATSaveGameCrossTalk) == 0x0000A0, "Wrong size on FATSaveGameCrossTalk");
static_assert(offsetof(FATSaveGameCrossTalk, AlreadyTalk) == 0x000000, "Member 'FATSaveGameCrossTalk::AlreadyTalk' has a wrong offset!");

// ScriptStruct ATExt.ReferenceToTalkAnimAssetInstance
// 0x0008 (0x0008 - 0x0000)
struct FReferenceToTalkAnimAssetInstance final
{
public:
	TSubclassOf<class UTalkAnimInstance>          TalkAnimBP;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReferenceToTalkAnimAssetInstance) == 0x000008, "Wrong alignment on FReferenceToTalkAnimAssetInstance");
static_assert(sizeof(FReferenceToTalkAnimAssetInstance) == 0x000008, "Wrong size on FReferenceToTalkAnimAssetInstance");
static_assert(offsetof(FReferenceToTalkAnimAssetInstance, TalkAnimBP) == 0x000000, "Member 'FReferenceToTalkAnimAssetInstance::TalkAnimBP' has a wrong offset!");

// ScriptStruct ATExt.LoadingTalkAnimAsset
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FLoadingTalkAnimAsset final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingTalkAnimAsset) == 0x000008, "Wrong alignment on FLoadingTalkAnimAsset");
static_assert(sizeof(FLoadingTalkAnimAsset) == 0x000028, "Wrong size on FLoadingTalkAnimAsset");

// ScriptStruct ATExt.ATSaveGameBattleCrowd
// 0x000C (0x000C - 0x0000)
struct FATSaveGameBattleCrowd final
{
public:
	int32                                         EndlessKillNum;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ScoreAttackNum;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RemainingTime;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameBattleCrowd) == 0x000004, "Wrong alignment on FATSaveGameBattleCrowd");
static_assert(sizeof(FATSaveGameBattleCrowd) == 0x00000C, "Wrong size on FATSaveGameBattleCrowd");
static_assert(offsetof(FATSaveGameBattleCrowd, EndlessKillNum) == 0x000000, "Member 'FATSaveGameBattleCrowd::EndlessKillNum' has a wrong offset!");
static_assert(offsetof(FATSaveGameBattleCrowd, ScoreAttackNum) == 0x000004, "Member 'FATSaveGameBattleCrowd::ScoreAttackNum' has a wrong offset!");
static_assert(offsetof(FATSaveGameBattleCrowd, RemainingTime) == 0x000008, "Member 'FATSaveGameBattleCrowd::RemainingTime' has a wrong offset!");

// ScriptStruct ATExt.ATDataAssetTalkAnimationInfo
// 0x0030 (0x0030 - 0x0000)
struct FATDataAssetTalkAnimationInfo final
{
public:
	class FName                                   MasterId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TalkAnimBP;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATDataAssetTalkAnimationInfo) == 0x000008, "Wrong alignment on FATDataAssetTalkAnimationInfo");
static_assert(sizeof(FATDataAssetTalkAnimationInfo) == 0x000030, "Wrong size on FATDataAssetTalkAnimationInfo");
static_assert(offsetof(FATDataAssetTalkAnimationInfo, MasterId) == 0x000000, "Member 'FATDataAssetTalkAnimationInfo::MasterId' has a wrong offset!");
static_assert(offsetof(FATDataAssetTalkAnimationInfo, TalkAnimBP) == 0x000008, "Member 'FATDataAssetTalkAnimationInfo::TalkAnimBP' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameLinkBounus
// 0x0400 (0x0400 - 0x0000)
struct FATSaveGameLinkBounus final
{
public:
	int32                                         LinkBonusOccured[0x80];                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewFlg[0x80];                                      // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameLinkBounus) == 0x000004, "Wrong alignment on FATSaveGameLinkBounus");
static_assert(sizeof(FATSaveGameLinkBounus) == 0x000400, "Wrong size on FATSaveGameLinkBounus");
static_assert(offsetof(FATSaveGameLinkBounus, LinkBonusOccured) == 0x000000, "Member 'FATSaveGameLinkBounus::LinkBonusOccured' has a wrong offset!");
static_assert(offsetof(FATSaveGameLinkBounus, NewFlg) == 0x000200, "Member 'FATSaveGameLinkBounus::NewFlg' has a wrong offset!");

// ScriptStruct ATExt.ATSaveCharacterStatus
// 0x0020 (0x0020 - 0x0000)
struct FATSaveCharacterStatus final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Exp;                                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitPoint;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicPoint;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SparkingPoint;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveCharacterStatus) == 0x000008, "Wrong alignment on FATSaveCharacterStatus");
static_assert(sizeof(FATSaveCharacterStatus) == 0x000020, "Wrong size on FATSaveCharacterStatus");
static_assert(offsetof(FATSaveCharacterStatus, Level) == 0x000000, "Member 'FATSaveCharacterStatus::Level' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterStatus, Exp) == 0x000008, "Member 'FATSaveCharacterStatus::Exp' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterStatus, HitPoint) == 0x000010, "Member 'FATSaveCharacterStatus::HitPoint' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterStatus, MagicPoint) == 0x000014, "Member 'FATSaveCharacterStatus::MagicPoint' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterStatus, SparkingPoint) == 0x000018, "Member 'FATSaveCharacterStatus::SparkingPoint' has a wrong offset!");

// ScriptStruct ATExt.ATSaveCharacterBoost
// 0x0018 (0x0018 - 0x0000)
struct FATSaveCharacterBoost final
{
public:
	int32                                         HitPoint;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicPoint;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShortOffensivePow;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShortDefensivePow;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LongOffensivePow;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LongDefensivePow;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveCharacterBoost) == 0x000004, "Wrong alignment on FATSaveCharacterBoost");
static_assert(sizeof(FATSaveCharacterBoost) == 0x000018, "Wrong size on FATSaveCharacterBoost");
static_assert(offsetof(FATSaveCharacterBoost, HitPoint) == 0x000000, "Member 'FATSaveCharacterBoost::HitPoint' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterBoost, MagicPoint) == 0x000004, "Member 'FATSaveCharacterBoost::MagicPoint' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterBoost, ShortOffensivePow) == 0x000008, "Member 'FATSaveCharacterBoost::ShortOffensivePow' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterBoost, ShortDefensivePow) == 0x00000C, "Member 'FATSaveCharacterBoost::ShortDefensivePow' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterBoost, LongOffensivePow) == 0x000010, "Member 'FATSaveCharacterBoost::LongOffensivePow' has a wrong offset!");
static_assert(offsetof(FATSaveCharacterBoost, LongDefensivePow) == 0x000014, "Member 'FATSaveCharacterBoost::LongDefensivePow' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameIndividualCharacter
// 0x02A8 (0x02A8 - 0x0000)
struct FATSaveGameIndividualCharacter final
{
public:
	TStructCycleFixup<struct FSkillSaveInfo, 0x0178, 0x08> SkillInfo;                                         // 0x0000(0x0178)(NativeAccessSpecifierPublic)
	int32                                         VariationId;                                       // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FormID;                                            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SparkingID;                                        // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATSaveCharacterBuff                   OtherBuffList[0xE];                                // 0x0188(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FATSaveCharacterStatus                 Status;                                            // 0x0268(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveCharacterBoost                  Boost;                                             // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameIndividualCharacter) == 0x000008, "Wrong alignment on FATSaveGameIndividualCharacter");
static_assert(sizeof(FATSaveGameIndividualCharacter) == 0x0002A8, "Wrong size on FATSaveGameIndividualCharacter");
static_assert(offsetof(FATSaveGameIndividualCharacter, SkillInfo) == 0x000000, "Member 'FATSaveGameIndividualCharacter::SkillInfo' has a wrong offset!");
static_assert(offsetof(FATSaveGameIndividualCharacter, VariationId) == 0x000178, "Member 'FATSaveGameIndividualCharacter::VariationId' has a wrong offset!");
static_assert(offsetof(FATSaveGameIndividualCharacter, FormID) == 0x00017C, "Member 'FATSaveGameIndividualCharacter::FormID' has a wrong offset!");
static_assert(offsetof(FATSaveGameIndividualCharacter, SparkingID) == 0x000180, "Member 'FATSaveGameIndividualCharacter::SparkingID' has a wrong offset!");
static_assert(offsetof(FATSaveGameIndividualCharacter, OtherBuffList) == 0x000188, "Member 'FATSaveGameIndividualCharacter::OtherBuffList' has a wrong offset!");
static_assert(offsetof(FATSaveGameIndividualCharacter, Status) == 0x000268, "Member 'FATSaveGameIndividualCharacter::Status' has a wrong offset!");
static_assert(offsetof(FATSaveGameIndividualCharacter, Boost) == 0x000288, "Member 'FATSaveGameIndividualCharacter::Boost' has a wrong offset!");

// ScriptStruct ATExt.MonitoringProgress
// 0x00B8 (0x00B8 - 0x0000)
struct FMonitoringProgress final
{
public:
	TMap<class FString, struct FATSaveGameIndividualCharacter> ClearStat;                                         // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TotalGetMoney;                                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSubMoney;                                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalGetDMedal;                                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalUsedDMedal;                                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalWinner;                                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            CountField;                                        // 0x0068(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonitoringProgress) == 0x000008, "Wrong alignment on FMonitoringProgress");
static_assert(sizeof(FMonitoringProgress) == 0x0000B8, "Wrong size on FMonitoringProgress");
static_assert(offsetof(FMonitoringProgress, ClearStat) == 0x000000, "Member 'FMonitoringProgress::ClearStat' has a wrong offset!");
static_assert(offsetof(FMonitoringProgress, TotalGetMoney) == 0x000050, "Member 'FMonitoringProgress::TotalGetMoney' has a wrong offset!");
static_assert(offsetof(FMonitoringProgress, TotalSubMoney) == 0x000054, "Member 'FMonitoringProgress::TotalSubMoney' has a wrong offset!");
static_assert(offsetof(FMonitoringProgress, TotalGetDMedal) == 0x000058, "Member 'FMonitoringProgress::TotalGetDMedal' has a wrong offset!");
static_assert(offsetof(FMonitoringProgress, TotalUsedDMedal) == 0x00005C, "Member 'FMonitoringProgress::TotalUsedDMedal' has a wrong offset!");
static_assert(offsetof(FMonitoringProgress, TotalWinner) == 0x000060, "Member 'FMonitoringProgress::TotalWinner' has a wrong offset!");
static_assert(offsetof(FMonitoringProgress, CountField) == 0x000068, "Member 'FMonitoringProgress::CountField' has a wrong offset!");

// ScriptStruct ATExt.FlashBackParam
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFlashBackParam final
{
public:
	class FName                                   DemoId;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyLife;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTeleportDistMin;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportTargetDist;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlashBackParam) == 0x000008, "Wrong alignment on FFlashBackParam");
static_assert(sizeof(FFlashBackParam) == 0x000018, "Wrong size on FFlashBackParam");
static_assert(offsetof(FFlashBackParam, DemoId) == 0x000000, "Member 'FFlashBackParam::DemoId' has a wrong offset!");
static_assert(offsetof(FFlashBackParam, EnemyLife) == 0x000008, "Member 'FFlashBackParam::EnemyLife' has a wrong offset!");
static_assert(offsetof(FFlashBackParam, StartTeleportDistMin) == 0x00000C, "Member 'FFlashBackParam::StartTeleportDistMin' has a wrong offset!");
static_assert(offsetof(FFlashBackParam, TeleportTargetDist) == 0x000010, "Member 'FFlashBackParam::TeleportTargetDist' has a wrong offset!");

// ScriptStruct ATExt.HiddenMobInfo
// 0x0008 (0x0008 - 0x0000)
struct FHiddenMobInfo final
{
public:
	bool                                          bPhaseHidden;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NPhaseHidden;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHiddenMobInfo) == 0x000004, "Wrong alignment on FHiddenMobInfo");
static_assert(sizeof(FHiddenMobInfo) == 0x000008, "Wrong size on FHiddenMobInfo");
static_assert(offsetof(FHiddenMobInfo, bPhaseHidden) == 0x000000, "Member 'FHiddenMobInfo::bPhaseHidden' has a wrong offset!");
static_assert(offsetof(FHiddenMobInfo, NPhaseHidden) == 0x000004, "Member 'FHiddenMobInfo::NPhaseHidden' has a wrong offset!");

// ScriptStruct ATExt.MobArrangeParameter
// 0x0014 (0x0014 - 0x0000)
struct FMobArrangeParameter final
{
public:
	float                                         DistanceMin;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceMax;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightMin;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightMax;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Num;                                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMobArrangeParameter) == 0x000004, "Wrong alignment on FMobArrangeParameter");
static_assert(sizeof(FMobArrangeParameter) == 0x000014, "Wrong size on FMobArrangeParameter");
static_assert(offsetof(FMobArrangeParameter, DistanceMin) == 0x000000, "Member 'FMobArrangeParameter::DistanceMin' has a wrong offset!");
static_assert(offsetof(FMobArrangeParameter, DistanceMax) == 0x000004, "Member 'FMobArrangeParameter::DistanceMax' has a wrong offset!");
static_assert(offsetof(FMobArrangeParameter, HeightMin) == 0x000008, "Member 'FMobArrangeParameter::HeightMin' has a wrong offset!");
static_assert(offsetof(FMobArrangeParameter, HeightMax) == 0x00000C, "Member 'FMobArrangeParameter::HeightMax' has a wrong offset!");
static_assert(offsetof(FMobArrangeParameter, Num) == 0x000010, "Member 'FMobArrangeParameter::Num' has a wrong offset!");

// ScriptStruct ATExt.GroupBattleReinforceTable
// 0x0050 (0x0058 - 0x0008)
struct FGroupBattleReinforceTable final : public FTableRowBase
{
public:
	class FName                                   CharaIndex;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharaIncrement;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReinforceCount;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BossID;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextPhaseID;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CondPhaseID;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupBattleReinforceCondition                CondType1;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CondValue1;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupBattleReinforceCondition                CondType2;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CondValue2;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupBattleReinforceCondition                CondType3;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CondValue3;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupBattleReinforceCondition                CondType4;                                         // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CondValue4;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupBattleReinforceTable) == 0x000008, "Wrong alignment on FGroupBattleReinforceTable");
static_assert(sizeof(FGroupBattleReinforceTable) == 0x000058, "Wrong size on FGroupBattleReinforceTable");
static_assert(offsetof(FGroupBattleReinforceTable, CharaIndex) == 0x000008, "Member 'FGroupBattleReinforceTable::CharaIndex' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, bCharaIncrement) == 0x000010, "Member 'FGroupBattleReinforceTable::bCharaIncrement' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, Priority) == 0x000014, "Member 'FGroupBattleReinforceTable::Priority' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, ReinforceCount) == 0x000018, "Member 'FGroupBattleReinforceTable::ReinforceCount' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, BossID) == 0x000020, "Member 'FGroupBattleReinforceTable::BossID' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, NextPhaseID) == 0x000028, "Member 'FGroupBattleReinforceTable::NextPhaseID' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondPhaseID) == 0x000030, "Member 'FGroupBattleReinforceTable::CondPhaseID' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondType1) == 0x000038, "Member 'FGroupBattleReinforceTable::CondType1' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondValue1) == 0x00003C, "Member 'FGroupBattleReinforceTable::CondValue1' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondType2) == 0x000040, "Member 'FGroupBattleReinforceTable::CondType2' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondValue2) == 0x000044, "Member 'FGroupBattleReinforceTable::CondValue2' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondType3) == 0x000048, "Member 'FGroupBattleReinforceTable::CondType3' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondValue3) == 0x00004C, "Member 'FGroupBattleReinforceTable::CondValue3' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondType4) == 0x000050, "Member 'FGroupBattleReinforceTable::CondType4' has a wrong offset!");
static_assert(offsetof(FGroupBattleReinforceTable, CondValue4) == 0x000054, "Member 'FGroupBattleReinforceTable::CondValue4' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameMinigame
// 0x01B8 (0x01B8 - 0x0000)
struct FATSaveGameMinigame final
{
public:
	TStructCycleFixup<struct FMiniGameRaceSaveInfo, 0x0060, 0x08> MiniGameRaceSaveInfo;                              // 0x0000(0x0060)(NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FMiniGameBaseBallSaveInfo, 0x00B0, 0x08> MiniGameBaseBallInfo;                              // 0x0060(0x00B0)(NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FMiniGameQuizSaveInfo, 0x0001, 0x01> MiniGameQuizInfo;                                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TStructCycleFixup<struct FMiniGameFishingSaveInfo, 0x00A0, 0x08> MiniGameFishingSaveInfo;                           // 0x0118(0x00A0)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameMinigame) == 0x000008, "Wrong alignment on FATSaveGameMinigame");
static_assert(sizeof(FATSaveGameMinigame) == 0x0001B8, "Wrong size on FATSaveGameMinigame");
static_assert(offsetof(FATSaveGameMinigame, MiniGameRaceSaveInfo) == 0x000000, "Member 'FATSaveGameMinigame::MiniGameRaceSaveInfo' has a wrong offset!");
static_assert(offsetof(FATSaveGameMinigame, MiniGameBaseBallInfo) == 0x000060, "Member 'FATSaveGameMinigame::MiniGameBaseBallInfo' has a wrong offset!");
static_assert(offsetof(FATSaveGameMinigame, MiniGameQuizInfo) == 0x000110, "Member 'FATSaveGameMinigame::MiniGameQuizInfo' has a wrong offset!");
static_assert(offsetof(FATSaveGameMinigame, MiniGameFishingSaveInfo) == 0x000118, "Member 'FATSaveGameMinigame::MiniGameFishingSaveInfo' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameCommunityBoard
// 0x0204 (0x0204 - 0x0000)
struct FATSaveGameCommunityBoard final
{
public:
	bool                                          bUnlocked;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CommLv;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PanelSoulEmSNo[0x7F];                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameCommunityBoard) == 0x000004, "Wrong alignment on FATSaveGameCommunityBoard");
static_assert(sizeof(FATSaveGameCommunityBoard) == 0x000204, "Wrong size on FATSaveGameCommunityBoard");
static_assert(offsetof(FATSaveGameCommunityBoard, bUnlocked) == 0x000000, "Member 'FATSaveGameCommunityBoard::bUnlocked' has a wrong offset!");
static_assert(offsetof(FATSaveGameCommunityBoard, CommLv) == 0x000004, "Member 'FATSaveGameCommunityBoard::CommLv' has a wrong offset!");
static_assert(offsetof(FATSaveGameCommunityBoard, PanelSoulEmSNo) == 0x000008, "Member 'FATSaveGameCommunityBoard::PanelSoulEmSNo' has a wrong offset!");

// ScriptStruct ATExt.MonitoringArea
// 0x0080 (0x0080 - 0x0000)
struct FMonitoringArea final
{
public:
	TArray<int32>                                 CountZOrb;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CountLostItem;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountCatchFruit;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOreDeposit;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountHuntAnimal;                                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountHuntDinosaur;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountCatchFish;                                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountBonfire;                                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      CountFishing;                                      // 0x0030(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonitoringArea) == 0x000008, "Wrong alignment on FMonitoringArea");
static_assert(sizeof(FMonitoringArea) == 0x000080, "Wrong size on FMonitoringArea");
static_assert(offsetof(FMonitoringArea, CountZOrb) == 0x000000, "Member 'FMonitoringArea::CountZOrb' has a wrong offset!");
static_assert(offsetof(FMonitoringArea, CountLostItem) == 0x000010, "Member 'FMonitoringArea::CountLostItem' has a wrong offset!");
static_assert(offsetof(FMonitoringArea, CountCatchFruit) == 0x000014, "Member 'FMonitoringArea::CountCatchFruit' has a wrong offset!");
static_assert(offsetof(FMonitoringArea, CountOreDeposit) == 0x000018, "Member 'FMonitoringArea::CountOreDeposit' has a wrong offset!");
static_assert(offsetof(FMonitoringArea, CountHuntAnimal) == 0x00001C, "Member 'FMonitoringArea::CountHuntAnimal' has a wrong offset!");
static_assert(offsetof(FMonitoringArea, CountHuntDinosaur) == 0x000020, "Member 'FMonitoringArea::CountHuntDinosaur' has a wrong offset!");
static_assert(offsetof(FMonitoringArea, CountCatchFish) == 0x000024, "Member 'FMonitoringArea::CountCatchFish' has a wrong offset!");
static_assert(offsetof(FMonitoringArea, CountBonfire) == 0x000028, "Member 'FMonitoringArea::CountBonfire' has a wrong offset!");
static_assert(offsetof(FMonitoringArea, CountFishing) == 0x000030, "Member 'FMonitoringArea::CountFishing' has a wrong offset!");

// ScriptStruct ATExt.MonitoringSavePack
// 0x0498 (0x0498 - 0x0000)
struct FMonitoringSavePack final
{
public:
	struct FMonitoringCommon                      MonitoringCommon;                                  // 0x0000(0x03F8)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FMonitoringProgress> MonitoringProgress;                                // 0x03F8(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMonitoringArea>   MonitoringArea;                                    // 0x0448(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonitoringSavePack) == 0x000008, "Wrong alignment on FMonitoringSavePack");
static_assert(sizeof(FMonitoringSavePack) == 0x000498, "Wrong size on FMonitoringSavePack");
static_assert(offsetof(FMonitoringSavePack, MonitoringCommon) == 0x000000, "Member 'FMonitoringSavePack::MonitoringCommon' has a wrong offset!");
static_assert(offsetof(FMonitoringSavePack, MonitoringProgress) == 0x0003F8, "Member 'FMonitoringSavePack::MonitoringProgress' has a wrong offset!");
static_assert(offsetof(FMonitoringSavePack, MonitoringArea) == 0x000448, "Member 'FMonitoringSavePack::MonitoringArea' has a wrong offset!");

// ScriptStruct ATExt.SubQuestCameraOffset
// 0x0028 (0x0028 - 0x0000)
struct FSubQuestCameraOffset final
{
public:
	struct FVector                                StartCameraOffset;                                 // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndCameraOffset;                                   // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalOffset;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               NpcRotation;                                       // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubQuestCameraOffset) == 0x000004, "Wrong alignment on FSubQuestCameraOffset");
static_assert(sizeof(FSubQuestCameraOffset) == 0x000028, "Wrong size on FSubQuestCameraOffset");
static_assert(offsetof(FSubQuestCameraOffset, StartCameraOffset) == 0x000000, "Member 'FSubQuestCameraOffset::StartCameraOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraOffset, EndCameraOffset) == 0x00000C, "Member 'FSubQuestCameraOffset::EndCameraOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraOffset, bLocalOffset) == 0x000018, "Member 'FSubQuestCameraOffset::bLocalOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraOffset, NpcRotation) == 0x00001C, "Member 'FSubQuestCameraOffset::NpcRotation' has a wrong offset!");

// ScriptStruct ATExt.SubQuestCameraTable
// 0x00D8 (0x00E0 - 0x0008)
struct FSubQuestCameraTable final : public FTableRowBase
{
public:
	class UCameraAnim*                            RefQuestReceiveCameraAnimation;                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                            RefQuestReceiveCameraAnimationLP;                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                            RefQuestStartCameraAnimation;                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                            RefQuestStartCameraAnimationLP;                    // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                            RefQuestCompCameraAnimation;                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                            RefQuestCompCameraAnimationLP;                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReceiveCameraDuration;                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartCameraOffset;                                 // 0x003C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndCameraOffset;                                   // 0x0048(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalOffset;                                      // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               NpcRotation;                                       // 0x0058(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSubQuestCameraOffset                  ReceiveOffset;                                     // 0x0064(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSubQuestCameraOffset                  StartOffset;                                       // 0x008C(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSubQuestCameraOffset                  CompleteOffset;                                    // 0x00B4(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FixViewFrame;                                      // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubQuestCameraTable) == 0x000008, "Wrong alignment on FSubQuestCameraTable");
static_assert(sizeof(FSubQuestCameraTable) == 0x0000E0, "Wrong size on FSubQuestCameraTable");
static_assert(offsetof(FSubQuestCameraTable, RefQuestReceiveCameraAnimation) == 0x000008, "Member 'FSubQuestCameraTable::RefQuestReceiveCameraAnimation' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, RefQuestReceiveCameraAnimationLP) == 0x000010, "Member 'FSubQuestCameraTable::RefQuestReceiveCameraAnimationLP' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, RefQuestStartCameraAnimation) == 0x000018, "Member 'FSubQuestCameraTable::RefQuestStartCameraAnimation' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, RefQuestStartCameraAnimationLP) == 0x000020, "Member 'FSubQuestCameraTable::RefQuestStartCameraAnimationLP' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, RefQuestCompCameraAnimation) == 0x000028, "Member 'FSubQuestCameraTable::RefQuestCompCameraAnimation' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, RefQuestCompCameraAnimationLP) == 0x000030, "Member 'FSubQuestCameraTable::RefQuestCompCameraAnimationLP' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, ReceiveCameraDuration) == 0x000038, "Member 'FSubQuestCameraTable::ReceiveCameraDuration' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, StartCameraOffset) == 0x00003C, "Member 'FSubQuestCameraTable::StartCameraOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, EndCameraOffset) == 0x000048, "Member 'FSubQuestCameraTable::EndCameraOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, bLocalOffset) == 0x000054, "Member 'FSubQuestCameraTable::bLocalOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, NpcRotation) == 0x000058, "Member 'FSubQuestCameraTable::NpcRotation' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, ReceiveOffset) == 0x000064, "Member 'FSubQuestCameraTable::ReceiveOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, StartOffset) == 0x00008C, "Member 'FSubQuestCameraTable::StartOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, CompleteOffset) == 0x0000B4, "Member 'FSubQuestCameraTable::CompleteOffset' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraTable, FixViewFrame) == 0x0000DC, "Member 'FSubQuestCameraTable::FixViewFrame' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameCollection
// 0x2F38 (0x2F38 - 0x0000)
struct FATSaveGameCollection final
{
public:
	TMap<EAnimalID, int32>                        AnimalCaptureCount;                                // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EFishID, int32>                          FishCaptureCount;                                  // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ECollectionMiniGame, int32>              MiniGamePlayCount;                                 // 0x00A0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    MiniGamePlayArea;                                  // 0x00F0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            BattleWinCount;                                    // 0x0140(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ECHARACTER_TYPE, int32>                  EnemyKillCount;                                    // 0x0190(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EBgmCode, int32>                         BgmPlayCount;                                      // 0x01E0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    SkillUseCount;                                     // 0x0230(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    NpcTalkCount;                                      // 0x0280(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    TownVisitCount;                                    // 0x02D0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    FieldMemoriesCount;                                // 0x0320(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ItemHealCount[0x100];                              // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemBentoCount[0x100];                             // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMeterialCount[0x100];                          // 0x0B70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemBaitCount[0x100];                              // 0x0F70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDevelopCount[0x100];                           // 0x1370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemChipCount[0x100];                              // 0x1770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemPresentCount[0x100];                           // 0x1B70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemImportantCount[0x100];                         // 0x1F70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemRecipeCount[0x100];                            // 0x2370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCarddassCount[0x100];                          // 0x2770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FruitsCount;                                       // 0x2B70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OreCount;                                          // 0x2B74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrbCount;                                         // 0x2B78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReleasedCollection;                               // 0x2B7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7D[0x3];                                     // 0x2B7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FCollectionOpenFlag> StoryOpenFlag;                                     // 0x2B80(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> DiagramOpenFlag;                                   // 0x2BD0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> CharacterOpenFlag;                                 // 0x2C20(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> WorldOpenFlag;                                     // 0x2C70(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> AnimalOpenFlag;                                    // 0x2CC0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> VehicleOpenFlag;                                   // 0x2D10(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> ItemOpenFlag;                                      // 0x2D60(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> TermOpenFlag;                                      // 0x2DB0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> CardOpenFlag;                                      // 0x2E00(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> DemoOpenFlag;                                      // 0x2E50(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FCollectionOpenFlag> BgmOpenFlag;                                       // 0x2EA0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   NavigationTarget;                                  // 0x2EF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NavigationTargetFlag;                              // 0x2EF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Focus;                                             // 0x2EFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EFD[0x3];                                     // 0x2EFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CompleteFlag[0xD];                                 // 0x2F00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F34[0x4];                                     // 0x2F34(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameCollection) == 0x000008, "Wrong alignment on FATSaveGameCollection");
static_assert(sizeof(FATSaveGameCollection) == 0x002F38, "Wrong size on FATSaveGameCollection");
static_assert(offsetof(FATSaveGameCollection, AnimalCaptureCount) == 0x000000, "Member 'FATSaveGameCollection::AnimalCaptureCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, FishCaptureCount) == 0x000050, "Member 'FATSaveGameCollection::FishCaptureCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, MiniGamePlayCount) == 0x0000A0, "Member 'FATSaveGameCollection::MiniGamePlayCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, MiniGamePlayArea) == 0x0000F0, "Member 'FATSaveGameCollection::MiniGamePlayArea' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, BattleWinCount) == 0x000140, "Member 'FATSaveGameCollection::BattleWinCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, EnemyKillCount) == 0x000190, "Member 'FATSaveGameCollection::EnemyKillCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, BgmPlayCount) == 0x0001E0, "Member 'FATSaveGameCollection::BgmPlayCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, SkillUseCount) == 0x000230, "Member 'FATSaveGameCollection::SkillUseCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, NpcTalkCount) == 0x000280, "Member 'FATSaveGameCollection::NpcTalkCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, TownVisitCount) == 0x0002D0, "Member 'FATSaveGameCollection::TownVisitCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, FieldMemoriesCount) == 0x000320, "Member 'FATSaveGameCollection::FieldMemoriesCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemHealCount) == 0x000370, "Member 'FATSaveGameCollection::ItemHealCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemBentoCount) == 0x000770, "Member 'FATSaveGameCollection::ItemBentoCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemMeterialCount) == 0x000B70, "Member 'FATSaveGameCollection::ItemMeterialCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemBaitCount) == 0x000F70, "Member 'FATSaveGameCollection::ItemBaitCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemDevelopCount) == 0x001370, "Member 'FATSaveGameCollection::ItemDevelopCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemChipCount) == 0x001770, "Member 'FATSaveGameCollection::ItemChipCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemPresentCount) == 0x001B70, "Member 'FATSaveGameCollection::ItemPresentCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemImportantCount) == 0x001F70, "Member 'FATSaveGameCollection::ItemImportantCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemRecipeCount) == 0x002370, "Member 'FATSaveGameCollection::ItemRecipeCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemCarddassCount) == 0x002770, "Member 'FATSaveGameCollection::ItemCarddassCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, FruitsCount) == 0x002B70, "Member 'FATSaveGameCollection::FruitsCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, OreCount) == 0x002B74, "Member 'FATSaveGameCollection::OreCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ZOrbCount) == 0x002B78, "Member 'FATSaveGameCollection::ZOrbCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, bReleasedCollection) == 0x002B7C, "Member 'FATSaveGameCollection::bReleasedCollection' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, StoryOpenFlag) == 0x002B80, "Member 'FATSaveGameCollection::StoryOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, DiagramOpenFlag) == 0x002BD0, "Member 'FATSaveGameCollection::DiagramOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, CharacterOpenFlag) == 0x002C20, "Member 'FATSaveGameCollection::CharacterOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, WorldOpenFlag) == 0x002C70, "Member 'FATSaveGameCollection::WorldOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, AnimalOpenFlag) == 0x002CC0, "Member 'FATSaveGameCollection::AnimalOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, VehicleOpenFlag) == 0x002D10, "Member 'FATSaveGameCollection::VehicleOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, ItemOpenFlag) == 0x002D60, "Member 'FATSaveGameCollection::ItemOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, TermOpenFlag) == 0x002DB0, "Member 'FATSaveGameCollection::TermOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, CardOpenFlag) == 0x002E00, "Member 'FATSaveGameCollection::CardOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, DemoOpenFlag) == 0x002E50, "Member 'FATSaveGameCollection::DemoOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, BgmOpenFlag) == 0x002EA0, "Member 'FATSaveGameCollection::BgmOpenFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, NavigationTarget) == 0x002EF0, "Member 'FATSaveGameCollection::NavigationTarget' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, NavigationTargetFlag) == 0x002EF8, "Member 'FATSaveGameCollection::NavigationTargetFlag' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, Focus) == 0x002EFC, "Member 'FATSaveGameCollection::Focus' has a wrong offset!");
static_assert(offsetof(FATSaveGameCollection, CompleteFlag) == 0x002F00, "Member 'FATSaveGameCollection::CompleteFlag' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameAndroidAssault
// 0x00A0 (0x00A0 - 0x0000)
struct FATSaveGameAndroidAssault final
{
public:
	TSet<class FName>                             ActiveAreaTable;                                   // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FName, float>                      ReactiveCountTable;                                // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameAndroidAssault) == 0x000008, "Wrong alignment on FATSaveGameAndroidAssault");
static_assert(sizeof(FATSaveGameAndroidAssault) == 0x0000A0, "Wrong size on FATSaveGameAndroidAssault");
static_assert(offsetof(FATSaveGameAndroidAssault, ActiveAreaTable) == 0x000000, "Member 'FATSaveGameAndroidAssault::ActiveAreaTable' has a wrong offset!");
static_assert(offsetof(FATSaveGameAndroidAssault, ReactiveCountTable) == 0x000050, "Member 'FATSaveGameAndroidAssault::ReactiveCountTable' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameParty
// 0x0003 (0x0003 - 0x0000)
struct FATSaveGameParty final
{
public:
	ECHARACTER_TYPE                               CharacterType;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               SupportCharacter[0x2];                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameParty) == 0x000001, "Wrong alignment on FATSaveGameParty");
static_assert(sizeof(FATSaveGameParty) == 0x000003, "Wrong size on FATSaveGameParty");
static_assert(offsetof(FATSaveGameParty, CharacterType) == 0x000000, "Member 'FATSaveGameParty::CharacterType' has a wrong offset!");
static_assert(offsetof(FATSaveGameParty, SupportCharacter) == 0x000001, "Member 'FATSaveGameParty::SupportCharacter' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameQuestCharacter
// 0x0028 (0x0028 - 0x0000)
struct FATSaveGameQuestCharacter final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TalkID;                                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MobIconType;                                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TalkTimesNum;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBalloonTalk;                                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameQuestCharacter) == 0x000008, "Wrong alignment on FATSaveGameQuestCharacter");
static_assert(sizeof(FATSaveGameQuestCharacter) == 0x000028, "Wrong size on FATSaveGameQuestCharacter");
static_assert(offsetof(FATSaveGameQuestCharacter, Name) == 0x000000, "Member 'FATSaveGameQuestCharacter::Name' has a wrong offset!");
static_assert(offsetof(FATSaveGameQuestCharacter, TalkID) == 0x000008, "Member 'FATSaveGameQuestCharacter::TalkID' has a wrong offset!");
static_assert(offsetof(FATSaveGameQuestCharacter, MobIconType) == 0x000018, "Member 'FATSaveGameQuestCharacter::MobIconType' has a wrong offset!");
static_assert(offsetof(FATSaveGameQuestCharacter, TalkTimesNum) == 0x00001C, "Member 'FATSaveGameQuestCharacter::TalkTimesNum' has a wrong offset!");
static_assert(offsetof(FATSaveGameQuestCharacter, bShowBalloonTalk) == 0x000020, "Member 'FATSaveGameQuestCharacter::bShowBalloonTalk' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameCharacter
// 0x18E78 (0x18E78 - 0x0000)
struct FATSaveGameCharacter final
{
public:
	int32                                         Money;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MoneyDlc3;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MoneyDLC4;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MoneyDLC5;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MoneyDLC6;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ZOrbNum[0x6];                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SubgameZOrbNum[0x18];                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATSaveGameIndividualCharacter         Character[0x80];                                   // 0x0090(0x02A8)(NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       Party;                                             // 0x15490(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       PartyBeforReplaying;                               // 0x15493(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       PartyOriginal;                                     // 0x15496(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       PartyDlc2;                                         // 0x15499(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       PartyDlc3;                                         // 0x1549C(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       PartyDLC4;                                         // 0x1549F(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       PartyDLC4Additional;                               // 0x154A2(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       PartyDLC5;                                         // 0x154A5(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       PartyDLC6;                                         // 0x154A8(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_154AB[0x5];                                    // 0x154AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATSaveGameQuestCharacter              QuestChar[0x15E];                                  // 0x154B0(0x0028)(NativeAccessSpecifierPrivate)
	ECHARACTER_TYPE                               AccompanyChara;                                    // 0x18B60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18B61[0x3];                                    // 0x18B61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GenericFlg;                                        // 0x18B64(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FATSaveCharacterCookingBuff            CookingBuffList[0xC];                              // 0x18B68(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveCharacterCookingBuff            DLC3CookingBuffList[0xC];                          // 0x18BF8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveCharacterCookingBuff            DLC4CookingBuffList[0xC];                          // 0x18C88(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveCharacterCookingBuff            DLC5CookingBuffList[0xC];                          // 0x18D18(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveCharacterCookingBuff            DLC6CookingBuffList[0xC];                          // 0x18DA8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bIsAvailableTrunks;                                // 0x18E38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18E39[0x3];                                    // 0x18E39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOxygenGaugeValue;                                 // 0x18E3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsInWaterLocation;                                // 0x18E40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18E41[0x3];                                    // 0x18E41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VInWaterLocation;                                  // 0x18E44(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                VInEmergencyWaterSurfaceLocation;                  // 0x18E50(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FOxygenGaugeValueOriginal;                         // 0x18E5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsInWaterLocationOriginal;                        // 0x18E60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18E61[0x3];                                    // 0x18E61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VInWaterLocationOriginal;                          // 0x18E64(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       FirstPartyTeam;                                    // 0x18E70(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FATSaveGameParty                       SecondPartyTeam;                                   // 0x18E73(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18E76[0x2];                                    // 0x18E76(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameCharacter) == 0x000008, "Wrong alignment on FATSaveGameCharacter");
static_assert(sizeof(FATSaveGameCharacter) == 0x018E78, "Wrong size on FATSaveGameCharacter");
static_assert(offsetof(FATSaveGameCharacter, Money) == 0x000000, "Member 'FATSaveGameCharacter::Money' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, MoneyDlc3) == 0x000004, "Member 'FATSaveGameCharacter::MoneyDlc3' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, MoneyDLC4) == 0x000008, "Member 'FATSaveGameCharacter::MoneyDLC4' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, MoneyDLC5) == 0x00000C, "Member 'FATSaveGameCharacter::MoneyDLC5' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, MoneyDLC6) == 0x000010, "Member 'FATSaveGameCharacter::MoneyDLC6' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, ZOrbNum) == 0x000014, "Member 'FATSaveGameCharacter::ZOrbNum' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, SubgameZOrbNum) == 0x00002C, "Member 'FATSaveGameCharacter::SubgameZOrbNum' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, Character) == 0x000090, "Member 'FATSaveGameCharacter::Character' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, Party) == 0x015490, "Member 'FATSaveGameCharacter::Party' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, PartyBeforReplaying) == 0x015493, "Member 'FATSaveGameCharacter::PartyBeforReplaying' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, PartyOriginal) == 0x015496, "Member 'FATSaveGameCharacter::PartyOriginal' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, PartyDlc2) == 0x015499, "Member 'FATSaveGameCharacter::PartyDlc2' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, PartyDlc3) == 0x01549C, "Member 'FATSaveGameCharacter::PartyDlc3' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, PartyDLC4) == 0x01549F, "Member 'FATSaveGameCharacter::PartyDLC4' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, PartyDLC4Additional) == 0x0154A2, "Member 'FATSaveGameCharacter::PartyDLC4Additional' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, PartyDLC5) == 0x0154A5, "Member 'FATSaveGameCharacter::PartyDLC5' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, PartyDLC6) == 0x0154A8, "Member 'FATSaveGameCharacter::PartyDLC6' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, QuestChar) == 0x0154B0, "Member 'FATSaveGameCharacter::QuestChar' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, AccompanyChara) == 0x018B60, "Member 'FATSaveGameCharacter::AccompanyChara' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, GenericFlg) == 0x018B64, "Member 'FATSaveGameCharacter::GenericFlg' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, CookingBuffList) == 0x018B68, "Member 'FATSaveGameCharacter::CookingBuffList' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, DLC3CookingBuffList) == 0x018BF8, "Member 'FATSaveGameCharacter::DLC3CookingBuffList' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, DLC4CookingBuffList) == 0x018C88, "Member 'FATSaveGameCharacter::DLC4CookingBuffList' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, DLC5CookingBuffList) == 0x018D18, "Member 'FATSaveGameCharacter::DLC5CookingBuffList' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, DLC6CookingBuffList) == 0x018DA8, "Member 'FATSaveGameCharacter::DLC6CookingBuffList' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, bIsAvailableTrunks) == 0x018E38, "Member 'FATSaveGameCharacter::bIsAvailableTrunks' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, FOxygenGaugeValue) == 0x018E3C, "Member 'FATSaveGameCharacter::FOxygenGaugeValue' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, bIsInWaterLocation) == 0x018E40, "Member 'FATSaveGameCharacter::bIsInWaterLocation' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, VInWaterLocation) == 0x018E44, "Member 'FATSaveGameCharacter::VInWaterLocation' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, VInEmergencyWaterSurfaceLocation) == 0x018E50, "Member 'FATSaveGameCharacter::VInEmergencyWaterSurfaceLocation' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, FOxygenGaugeValueOriginal) == 0x018E5C, "Member 'FATSaveGameCharacter::FOxygenGaugeValueOriginal' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, bIsInWaterLocationOriginal) == 0x018E60, "Member 'FATSaveGameCharacter::bIsInWaterLocationOriginal' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, VInWaterLocationOriginal) == 0x018E64, "Member 'FATSaveGameCharacter::VInWaterLocationOriginal' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, FirstPartyTeam) == 0x018E70, "Member 'FATSaveGameCharacter::FirstPartyTeam' has a wrong offset!");
static_assert(offsetof(FATSaveGameCharacter, SecondPartyTeam) == 0x018E73, "Member 'FATSaveGameCharacter::SecondPartyTeam' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameSoulEmblem
// 0x0820 (0x0820 - 0x0000)
struct FATSaveGameSoulEmblem final
{
public:
	bool                                          bFormatted;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockState;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewFlg;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetNo;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FavorRate;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkBonusPlus;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsUnlockReward[0x7F];                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsLeader;                                          // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkBonusEnable[0x80];                             // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommProficiency[0x80];                             // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommProficiencyMaxOverItem[0x80];                  // 0x061C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BelongBoard;                                       // 0x081C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameSoulEmblem) == 0x000004, "Wrong alignment on FATSaveGameSoulEmblem");
static_assert(sizeof(FATSaveGameSoulEmblem) == 0x000820, "Wrong size on FATSaveGameSoulEmblem");
static_assert(offsetof(FATSaveGameSoulEmblem, bFormatted) == 0x000000, "Member 'FATSaveGameSoulEmblem::bFormatted' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, UnlockState) == 0x000004, "Member 'FATSaveGameSoulEmblem::UnlockState' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, NewFlg) == 0x000008, "Member 'FATSaveGameSoulEmblem::NewFlg' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, GetNo) == 0x00000C, "Member 'FATSaveGameSoulEmblem::GetNo' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, FavorRate) == 0x000010, "Member 'FATSaveGameSoulEmblem::FavorRate' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, Rarity) == 0x000014, "Member 'FATSaveGameSoulEmblem::Rarity' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, LinkBonusPlus) == 0x000018, "Member 'FATSaveGameSoulEmblem::LinkBonusPlus' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, IsUnlockReward) == 0x00001C, "Member 'FATSaveGameSoulEmblem::IsUnlockReward' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, IsLeader) == 0x000218, "Member 'FATSaveGameSoulEmblem::IsLeader' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, LinkBonusEnable) == 0x00021C, "Member 'FATSaveGameSoulEmblem::LinkBonusEnable' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, CommProficiency) == 0x00041C, "Member 'FATSaveGameSoulEmblem::CommProficiency' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, CommProficiencyMaxOverItem) == 0x00061C, "Member 'FATSaveGameSoulEmblem::CommProficiencyMaxOverItem' has a wrong offset!");
static_assert(offsetof(FATSaveGameSoulEmblem, BelongBoard) == 0x00081C, "Member 'FATSaveGameSoulEmblem::BelongBoard' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameCommunity
// 0x71208 (0x71208 - 0x0000)
struct FATSaveGameCommunity final
{
public:
	bool                                          bFormatted;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PayoutGetNo;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATSaveGameSoulEmblem                  SoulEmData[0x80];                                  // 0x0008(0x0820)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FATSaveGameCommunityBoard              CommBoard[0x80];                                   // 0x41008(0x0204)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FATSaveGameLinkBounus                  LinkBonus[0x80];                                   // 0x51208(0x0400)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameCommunity) == 0x000004, "Wrong alignment on FATSaveGameCommunity");
static_assert(sizeof(FATSaveGameCommunity) == 0x071208, "Wrong size on FATSaveGameCommunity");
static_assert(offsetof(FATSaveGameCommunity, bFormatted) == 0x000000, "Member 'FATSaveGameCommunity::bFormatted' has a wrong offset!");
static_assert(offsetof(FATSaveGameCommunity, PayoutGetNo) == 0x000004, "Member 'FATSaveGameCommunity::PayoutGetNo' has a wrong offset!");
static_assert(offsetof(FATSaveGameCommunity, SoulEmData) == 0x000008, "Member 'FATSaveGameCommunity::SoulEmData' has a wrong offset!");
static_assert(offsetof(FATSaveGameCommunity, CommBoard) == 0x041008, "Member 'FATSaveGameCommunity::CommBoard' has a wrong offset!");
static_assert(offsetof(FATSaveGameCommunity, LinkBonus) == 0x051208, "Member 'FATSaveGameCommunity::LinkBonus' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameCondition
// 0x2000 (0x2000 - 0x0000)
struct FATSaveGameCondition final
{
public:
	struct FQuestCondition                        Conditions[0x100];                                 // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameCondition) == 0x000008, "Wrong alignment on FATSaveGameCondition");
static_assert(sizeof(FATSaveGameCondition) == 0x002000, "Wrong size on FATSaveGameCondition");
static_assert(offsetof(FATSaveGameCondition, Conditions) == 0x000000, "Member 'FATSaveGameCondition::Conditions' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameDragonball
// 0x0118 (0x0118 - 0x0000)
struct FATSaveGameDragonball final
{
public:
	int32                                         TotalWishCount;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            CurrentWishCount;                                  // 0x0008(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FName, bool>                       bReviveCharacter;                                  // 0x0058(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FTimespan                              LastUsePlayTime;                                   // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 DisplayedIdList;                                   // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bDragonBallReuseMessage;                           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            WishedCount;                                       // 0x00C8(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameDragonball) == 0x000008, "Wrong alignment on FATSaveGameDragonball");
static_assert(sizeof(FATSaveGameDragonball) == 0x000118, "Wrong size on FATSaveGameDragonball");
static_assert(offsetof(FATSaveGameDragonball, TotalWishCount) == 0x000000, "Member 'FATSaveGameDragonball::TotalWishCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameDragonball, CurrentWishCount) == 0x000008, "Member 'FATSaveGameDragonball::CurrentWishCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameDragonball, bReviveCharacter) == 0x000058, "Member 'FATSaveGameDragonball::bReviveCharacter' has a wrong offset!");
static_assert(offsetof(FATSaveGameDragonball, LastUsePlayTime) == 0x0000A8, "Member 'FATSaveGameDragonball::LastUsePlayTime' has a wrong offset!");
static_assert(offsetof(FATSaveGameDragonball, DisplayedIdList) == 0x0000B0, "Member 'FATSaveGameDragonball::DisplayedIdList' has a wrong offset!");
static_assert(offsetof(FATSaveGameDragonball, bDragonBallReuseMessage) == 0x0000C0, "Member 'FATSaveGameDragonball::bDragonBallReuseMessage' has a wrong offset!");
static_assert(offsetof(FATSaveGameDragonball, WishedCount) == 0x0000C8, "Member 'FATSaveGameDragonball::WishedCount' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameEnemiesBaseNode
// 0x0002 (0x0002 - 0x0000)
struct FATSaveGameEnemiesBaseNode final
{
public:
	int8                                          InvalidCount;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBroken;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameEnemiesBaseNode) == 0x000001, "Wrong alignment on FATSaveGameEnemiesBaseNode");
static_assert(sizeof(FATSaveGameEnemiesBaseNode) == 0x000002, "Wrong size on FATSaveGameEnemiesBaseNode");
static_assert(offsetof(FATSaveGameEnemiesBaseNode, InvalidCount) == 0x000000, "Member 'FATSaveGameEnemiesBaseNode::InvalidCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameEnemiesBaseNode, IsBroken) == 0x000001, "Member 'FATSaveGameEnemiesBaseNode::IsBroken' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameEnemiesBase
// 0x0190 (0x0190 - 0x0000)
struct FATSaveGameEnemiesBase final
{
public:
	struct FATSaveGameEnemiesBaseNode             EnemiesBase[0xC8];                                 // 0x0000(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameEnemiesBase) == 0x000001, "Wrong alignment on FATSaveGameEnemiesBase");
static_assert(sizeof(FATSaveGameEnemiesBase) == 0x000190, "Wrong size on FATSaveGameEnemiesBase");
static_assert(offsetof(FATSaveGameEnemiesBase, EnemiesBase) == 0x000000, "Member 'FATSaveGameEnemiesBase::EnemiesBase' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameFieldMemories
// 0x00A0 (0x00A0 - 0x0000)
struct FATSaveGameFieldMemories final
{
public:
	TMap<class FName, EFieldMemoriesFoundStatus>  FoundStatus;                                       // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, EFieldMemoriesFoundStatus>  DLC6FoundStatus;                                   // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameFieldMemories) == 0x000008, "Wrong alignment on FATSaveGameFieldMemories");
static_assert(sizeof(FATSaveGameFieldMemories) == 0x0000A0, "Wrong size on FATSaveGameFieldMemories");
static_assert(offsetof(FATSaveGameFieldMemories, FoundStatus) == 0x000000, "Member 'FATSaveGameFieldMemories::FoundStatus' has a wrong offset!");
static_assert(offsetof(FATSaveGameFieldMemories, DLC6FoundStatus) == 0x000050, "Member 'FATSaveGameFieldMemories::DLC6FoundStatus' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameFutureVision
// 0x0010 (0x0010 - 0x0000)
struct FATSaveGameFutureVision final
{
public:
	TArray<class FName>                           VolumeId;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameFutureVision) == 0x000008, "Wrong alignment on FATSaveGameFutureVision");
static_assert(sizeof(FATSaveGameFutureVision) == 0x000010, "Wrong size on FATSaveGameFutureVision");
static_assert(offsetof(FATSaveGameFutureVision, VolumeId) == 0x000000, "Member 'FATSaveGameFutureVision::VolumeId' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameImportantLog
// 0x1F90 (0x1F90 - 0x0000)
struct FATSaveGameImportantLog final
{
public:
	int32                                         SkillTreeLogSend[0x7D0];                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      SubQuestLogSend;                                   // 0x1F40(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameImportantLog) == 0x000008, "Wrong alignment on FATSaveGameImportantLog");
static_assert(sizeof(FATSaveGameImportantLog) == 0x001F90, "Wrong size on FATSaveGameImportantLog");
static_assert(offsetof(FATSaveGameImportantLog, SkillTreeLogSend) == 0x000000, "Member 'FATSaveGameImportantLog::SkillTreeLogSend' has a wrong offset!");
static_assert(offsetof(FATSaveGameImportantLog, SubQuestLogSend) == 0x001F40, "Member 'FATSaveGameImportantLog::SubQuestLogSend' has a wrong offset!");

// ScriptStruct ATExt.PlayerLocation
// 0x0058 (0x0058 - 0x0000)
struct FPlayerLocation final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSetLocation;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bFloating;                                         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveCategory;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MoveGear;                                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bInDoor;                                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InDoorName;                                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   InDoorLevel;                                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RestrictMovePresetType;                            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         RestrictMovePresetType_Original;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRevertToOriginal;                                 // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerLocation) == 0x000008, "Wrong alignment on FPlayerLocation");
static_assert(sizeof(FPlayerLocation) == 0x000058, "Wrong size on FPlayerLocation");
static_assert(offsetof(FPlayerLocation, LevelName) == 0x000000, "Member 'FPlayerLocation::LevelName' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, bSetLocation) == 0x000010, "Member 'FPlayerLocation::bSetLocation' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, Location) == 0x000014, "Member 'FPlayerLocation::Location' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, Rotation) == 0x000020, "Member 'FPlayerLocation::Rotation' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, bFloating) == 0x00002C, "Member 'FPlayerLocation::bFloating' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, MoveCategory) == 0x000030, "Member 'FPlayerLocation::MoveCategory' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, MoveGear) == 0x000034, "Member 'FPlayerLocation::MoveGear' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, bInDoor) == 0x000038, "Member 'FPlayerLocation::bInDoor' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, InDoorName) == 0x000040, "Member 'FPlayerLocation::InDoorName' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, InDoorLevel) == 0x000048, "Member 'FPlayerLocation::InDoorLevel' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, RestrictMovePresetType) == 0x000050, "Member 'FPlayerLocation::RestrictMovePresetType' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, RestrictMovePresetType_Original) == 0x000051, "Member 'FPlayerLocation::RestrictMovePresetType_Original' has a wrong offset!");
static_assert(offsetof(FPlayerLocation, bRevertToOriginal) == 0x000052, "Member 'FPlayerLocation::bRevertToOriginal' has a wrong offset!");

// ScriptStruct ATExt.QuestProgress
// 0x0920 (0x0920 - 0x0000)
struct FQuestProgress final
{
public:
	TArray<class FName>                           CompletedQuestIdList;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRequestQuestInfo>              ReceivedQuestList;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableReplayingQuest;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsResetStartPointToTimeMachine;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProgressIdBeforReplaying;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseIdBeforReplaying;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RetryProgress;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapNameBeforReplaying;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationBeforReplaying;                            // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubQuestStartToStoryReplay;                     // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RetrySubQuestId;                                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetrySubQuestPhaseNo;                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerLocation                        PlayerLocation;                                    // 0x0068(0x0058)(NativeAccessSpecifierPublic)
	struct FPlayerLocation                        PlayerLocation_Original;                           // 0x00C0(0x0058)(NativeAccessSpecifierPublic)
	struct FPlayerLocation                        PlayerLocation_DLC3;                               // 0x0118(0x0058)(NativeAccessSpecifierPublic)
	bool                                          bAdoptionPlayerLocation_DLC3;                      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerLocation                        PlayerLocation_DLC4;                               // 0x0178(0x0058)(NativeAccessSpecifierPublic)
	bool                                          bAdoptionPlayerLocation_DLC4;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerLocation                        PlayerLocation_DLC4Additional;                     // 0x01D8(0x0058)(NativeAccessSpecifierPublic)
	bool                                          bAdoptionPlayerLocation_DLC4Additional;            // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayingDLC4Additional;                          // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232[0x6];                                      // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerLocation                        PlayerLocation_DLC5;                               // 0x0238(0x0058)(NativeAccessSpecifierPublic)
	bool                                          bAdoptionPlayerLocation_DLC5;                      // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerLocation                        PlayerLocation_DLC6;                               // 0x0298(0x0058)(NativeAccessSpecifierPublic)
	bool                                          bAdoptionPlayerLocation_DLC6;                      // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnToMainStory;                                // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlayingDlcId;                                      // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestInfo_Main;               // 0x0300(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestInfo_Sub;                // 0x0380(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestExtendInfo_Main;         // 0x0400(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestExtendInfo_Sub;          // 0x0480(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestDLC4Info_Main;           // 0x0500(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestDLC4Info_Sub;            // 0x0580(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestDLC5Info_Main;           // 0x0600(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestDLC5Info_Sub;            // 0x0680(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestDLC6Info_Main;           // 0x0700(0x0080)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08> LastShowNavigation_UIQuestDLC6Info_Sub;            // 0x0780(0x0080)(NativeAccessSpecifierPublic)
	TMap<class FName, TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08>> LastShowNavigation_UIQuestDLCInfo_Main;            // 0x0800(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, TStructCycleFixup<struct FUIQuestInfo, 0x0080, 0x08>> LastShowNavigation_UIQuestDLCInfo_Sub;             // 0x0850(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      QuestCompletedCount;                               // 0x08A0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   LevelName_Dlc2;                                    // 0x08F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreviouslyPlayedDlcId;                             // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName_Dlc3;                                    // 0x0900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName_DLC4;                                    // 0x0908(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName_DLC5;                                    // 0x0910(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName_DLC6;                                    // 0x0918(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestProgress) == 0x000008, "Wrong alignment on FQuestProgress");
static_assert(sizeof(FQuestProgress) == 0x000920, "Wrong size on FQuestProgress");
static_assert(offsetof(FQuestProgress, CompletedQuestIdList) == 0x000000, "Member 'FQuestProgress::CompletedQuestIdList' has a wrong offset!");
static_assert(offsetof(FQuestProgress, ReceivedQuestList) == 0x000010, "Member 'FQuestProgress::ReceivedQuestList' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bEnableReplayingQuest) == 0x000020, "Member 'FQuestProgress::bEnableReplayingQuest' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bIsResetStartPointToTimeMachine) == 0x000021, "Member 'FQuestProgress::bIsResetStartPointToTimeMachine' has a wrong offset!");
static_assert(offsetof(FQuestProgress, ProgressIdBeforReplaying) == 0x000028, "Member 'FQuestProgress::ProgressIdBeforReplaying' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PhaseIdBeforReplaying) == 0x000030, "Member 'FQuestProgress::PhaseIdBeforReplaying' has a wrong offset!");
static_assert(offsetof(FQuestProgress, RetryProgress) == 0x000038, "Member 'FQuestProgress::RetryProgress' has a wrong offset!");
static_assert(offsetof(FQuestProgress, MapNameBeforReplaying) == 0x000040, "Member 'FQuestProgress::MapNameBeforReplaying' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LocationBeforReplaying) == 0x000048, "Member 'FQuestProgress::LocationBeforReplaying' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bIsSubQuestStartToStoryReplay) == 0x000054, "Member 'FQuestProgress::bIsSubQuestStartToStoryReplay' has a wrong offset!");
static_assert(offsetof(FQuestProgress, RetrySubQuestId) == 0x000058, "Member 'FQuestProgress::RetrySubQuestId' has a wrong offset!");
static_assert(offsetof(FQuestProgress, RetrySubQuestPhaseNo) == 0x000060, "Member 'FQuestProgress::RetrySubQuestPhaseNo' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PlayerLocation) == 0x000068, "Member 'FQuestProgress::PlayerLocation' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PlayerLocation_Original) == 0x0000C0, "Member 'FQuestProgress::PlayerLocation_Original' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PlayerLocation_DLC3) == 0x000118, "Member 'FQuestProgress::PlayerLocation_DLC3' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bAdoptionPlayerLocation_DLC3) == 0x000170, "Member 'FQuestProgress::bAdoptionPlayerLocation_DLC3' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PlayerLocation_DLC4) == 0x000178, "Member 'FQuestProgress::PlayerLocation_DLC4' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bAdoptionPlayerLocation_DLC4) == 0x0001D0, "Member 'FQuestProgress::bAdoptionPlayerLocation_DLC4' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PlayerLocation_DLC4Additional) == 0x0001D8, "Member 'FQuestProgress::PlayerLocation_DLC4Additional' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bAdoptionPlayerLocation_DLC4Additional) == 0x000230, "Member 'FQuestProgress::bAdoptionPlayerLocation_DLC4Additional' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bIsPlayingDLC4Additional) == 0x000231, "Member 'FQuestProgress::bIsPlayingDLC4Additional' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PlayerLocation_DLC5) == 0x000238, "Member 'FQuestProgress::PlayerLocation_DLC5' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bAdoptionPlayerLocation_DLC5) == 0x000290, "Member 'FQuestProgress::bAdoptionPlayerLocation_DLC5' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PlayerLocation_DLC6) == 0x000298, "Member 'FQuestProgress::PlayerLocation_DLC6' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bAdoptionPlayerLocation_DLC6) == 0x0002F0, "Member 'FQuestProgress::bAdoptionPlayerLocation_DLC6' has a wrong offset!");
static_assert(offsetof(FQuestProgress, bReturnToMainStory) == 0x0002F1, "Member 'FQuestProgress::bReturnToMainStory' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PlayingDlcId) == 0x0002F8, "Member 'FQuestProgress::PlayingDlcId' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestInfo_Main) == 0x000300, "Member 'FQuestProgress::LastShowNavigation_UIQuestInfo_Main' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestInfo_Sub) == 0x000380, "Member 'FQuestProgress::LastShowNavigation_UIQuestInfo_Sub' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestExtendInfo_Main) == 0x000400, "Member 'FQuestProgress::LastShowNavigation_UIQuestExtendInfo_Main' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestExtendInfo_Sub) == 0x000480, "Member 'FQuestProgress::LastShowNavigation_UIQuestExtendInfo_Sub' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestDLC4Info_Main) == 0x000500, "Member 'FQuestProgress::LastShowNavigation_UIQuestDLC4Info_Main' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestDLC4Info_Sub) == 0x000580, "Member 'FQuestProgress::LastShowNavigation_UIQuestDLC4Info_Sub' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestDLC5Info_Main) == 0x000600, "Member 'FQuestProgress::LastShowNavigation_UIQuestDLC5Info_Main' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestDLC5Info_Sub) == 0x000680, "Member 'FQuestProgress::LastShowNavigation_UIQuestDLC5Info_Sub' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestDLC6Info_Main) == 0x000700, "Member 'FQuestProgress::LastShowNavigation_UIQuestDLC6Info_Main' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestDLC6Info_Sub) == 0x000780, "Member 'FQuestProgress::LastShowNavigation_UIQuestDLC6Info_Sub' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestDLCInfo_Main) == 0x000800, "Member 'FQuestProgress::LastShowNavigation_UIQuestDLCInfo_Main' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LastShowNavigation_UIQuestDLCInfo_Sub) == 0x000850, "Member 'FQuestProgress::LastShowNavigation_UIQuestDLCInfo_Sub' has a wrong offset!");
static_assert(offsetof(FQuestProgress, QuestCompletedCount) == 0x0008A0, "Member 'FQuestProgress::QuestCompletedCount' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LevelName_Dlc2) == 0x0008F0, "Member 'FQuestProgress::LevelName_Dlc2' has a wrong offset!");
static_assert(offsetof(FQuestProgress, PreviouslyPlayedDlcId) == 0x0008F8, "Member 'FQuestProgress::PreviouslyPlayedDlcId' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LevelName_Dlc3) == 0x000900, "Member 'FQuestProgress::LevelName_Dlc3' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LevelName_DLC4) == 0x000908, "Member 'FQuestProgress::LevelName_DLC4' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LevelName_DLC5) == 0x000910, "Member 'FQuestProgress::LevelName_DLC5' has a wrong offset!");
static_assert(offsetof(FQuestProgress, LevelName_DLC6) == 0x000918, "Member 'FQuestProgress::LevelName_DLC6' has a wrong offset!");

// ScriptStruct ATExt.DragonballItem
// 0x0020 (0x0020 - 0x0000)
struct FDragonballItem final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Area;                                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawned;                                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpawnedPointId;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonballItem) == 0x000008, "Wrong alignment on FDragonballItem");
static_assert(sizeof(FDragonballItem) == 0x000020, "Wrong size on FDragonballItem");
static_assert(offsetof(FDragonballItem, Num) == 0x000000, "Member 'FDragonballItem::Num' has a wrong offset!");
static_assert(offsetof(FDragonballItem, Area) == 0x000004, "Member 'FDragonballItem::Area' has a wrong offset!");
static_assert(offsetof(FDragonballItem, bSpawned) == 0x000008, "Member 'FDragonballItem::bSpawned' has a wrong offset!");
static_assert(offsetof(FDragonballItem, SpawnedPointId) == 0x000010, "Member 'FDragonballItem::SpawnedPointId' has a wrong offset!");

// ScriptStruct ATExt.PaletteItemInfo
// 0x0018 (0x0018 - 0x0000)
struct FPaletteItemInfo final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetItemNum;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaletteItemInfo) == 0x000008, "Wrong alignment on FPaletteItemInfo");
static_assert(sizeof(FPaletteItemInfo) == 0x000018, "Wrong size on FPaletteItemInfo");
static_assert(offsetof(FPaletteItemInfo, ItemId) == 0x000000, "Member 'FPaletteItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FPaletteItemInfo, SetItemNum) == 0x000010, "Member 'FPaletteItemInfo::SetItemNum' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameItem
// 0x250A0 (0x250A0 - 0x0000)
struct FATSaveGameItem final
{
public:
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvHeal[0x100];                                // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvBento[0x100];                               // 0x0C00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvMeterial[0x100];                            // 0x1800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvBait[0x100];                                // 0x2400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvDevelop[0x100];                             // 0x3000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvChip[0x100];                                // 0x3C00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvPresent[0x100];                             // 0x4800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvImportant[0x200];                           // 0x5400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvRecipe[0x100];                              // 0x6C00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> ItemInvCarddass[0x100];                            // 0x7800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvHeal[0x100];                            // 0x8400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvBento[0x100];                           // 0x9000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvMeterial[0x100];                        // 0x9C00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvBait[0x100];                            // 0xA800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvDevelop[0x100];                         // 0xB400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvChip[0x100];                            // 0xC000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvPresent[0x100];                         // 0xCC00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvImportant[0x100];                       // 0xD800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC3ItemInvRecipe[0x100];                          // 0xE400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvHeal[0x100];                            // 0xF000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvBento[0x100];                           // 0xFC00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvMeterial[0x100];                        // 0x10800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvBait[0x100];                            // 0x11400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvDevelop[0x100];                         // 0x12000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvChip[0x100];                            // 0x12C00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvPresent[0x100];                         // 0x13800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvImportant[0x100];                       // 0x14400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC4ItemInvRecipe[0x100];                          // 0x15000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvHeal[0x100];                            // 0x15C00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvBento[0x100];                           // 0x16800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvMeterial[0x100];                        // 0x17400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvBait[0x100];                            // 0x18000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvDevelop[0x100];                         // 0x18C00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvChip[0x100];                            // 0x19800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvPresent[0x100];                         // 0x1A400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvImportant[0x200];                       // 0x1B000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC5ItemInvRecipe[0x100];                          // 0x1C800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvHeal[0x100];                            // 0x1D400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvBento[0x100];                           // 0x1E000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvMeterial[0x100];                        // 0x1EC00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvBait[0x100];                            // 0x1F800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvDevelop[0x100];                         // 0x20400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvChip[0x100];                            // 0x21000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvPresent[0x100];                         // 0x21C00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvImportant[0x200];                       // 0x22800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FItemInventory, 0x000C, 0x04> DLC6ItemInvRecipe[0x100];                          // 0x24000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint32                                        ItemPalette[0x4];                                  // 0x24C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDragonballItem                        DragonballItems[0x7];                              // 0x24C10(0x0020)(NativeAccessSpecifierPublic)
	struct FDragonballItem                        DLC5DragonballItems[0x7];                          // 0x24CF0(0x0020)(NativeAccessSpecifierPublic)
	struct FDragonballItem                        ReplayPreDragonballItems[0x7];                     // 0x24DD0(0x0020)(NativeAccessSpecifierPublic)
	uint8                                         Pad_24EB0[0x7];                                    // 0x24EB0(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsReplayDragonballFunc;                            // 0x24EB7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReplayDragonballEnableSpawn;                     // 0x24EB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EB9[0x7];                                    // 0x24EB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaletteItemInfo                       PaletteItems[0x4];                                 // 0x24EC0(0x0018)(NativeAccessSpecifierPrivate)
	struct FPaletteItemInfo                       DLC3PaletteItems[0x4];                             // 0x24F20(0x0018)(NativeAccessSpecifierPrivate)
	struct FPaletteItemInfo                       DLC4PaletteItems[0x4];                             // 0x24F80(0x0018)(NativeAccessSpecifierPrivate)
	struct FPaletteItemInfo                       DLC5PaletteItems[0x4];                             // 0x24FE0(0x0018)(NativeAccessSpecifierPrivate)
	struct FPaletteItemInfo                       DLC6PaletteItems[0x4];                             // 0x25040(0x0018)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameItem) == 0x000008, "Wrong alignment on FATSaveGameItem");
static_assert(sizeof(FATSaveGameItem) == 0x0250A0, "Wrong size on FATSaveGameItem");
static_assert(offsetof(FATSaveGameItem, ItemInvHeal) == 0x000000, "Member 'FATSaveGameItem::ItemInvHeal' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvBento) == 0x000C00, "Member 'FATSaveGameItem::ItemInvBento' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvMeterial) == 0x001800, "Member 'FATSaveGameItem::ItemInvMeterial' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvBait) == 0x002400, "Member 'FATSaveGameItem::ItemInvBait' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvDevelop) == 0x003000, "Member 'FATSaveGameItem::ItemInvDevelop' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvChip) == 0x003C00, "Member 'FATSaveGameItem::ItemInvChip' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvPresent) == 0x004800, "Member 'FATSaveGameItem::ItemInvPresent' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvImportant) == 0x005400, "Member 'FATSaveGameItem::ItemInvImportant' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvRecipe) == 0x006C00, "Member 'FATSaveGameItem::ItemInvRecipe' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemInvCarddass) == 0x007800, "Member 'FATSaveGameItem::ItemInvCarddass' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvHeal) == 0x008400, "Member 'FATSaveGameItem::DLC3ItemInvHeal' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvBento) == 0x009000, "Member 'FATSaveGameItem::DLC3ItemInvBento' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvMeterial) == 0x009C00, "Member 'FATSaveGameItem::DLC3ItemInvMeterial' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvBait) == 0x00A800, "Member 'FATSaveGameItem::DLC3ItemInvBait' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvDevelop) == 0x00B400, "Member 'FATSaveGameItem::DLC3ItemInvDevelop' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvChip) == 0x00C000, "Member 'FATSaveGameItem::DLC3ItemInvChip' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvPresent) == 0x00CC00, "Member 'FATSaveGameItem::DLC3ItemInvPresent' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvImportant) == 0x00D800, "Member 'FATSaveGameItem::DLC3ItemInvImportant' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3ItemInvRecipe) == 0x00E400, "Member 'FATSaveGameItem::DLC3ItemInvRecipe' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvHeal) == 0x00F000, "Member 'FATSaveGameItem::DLC4ItemInvHeal' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvBento) == 0x00FC00, "Member 'FATSaveGameItem::DLC4ItemInvBento' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvMeterial) == 0x010800, "Member 'FATSaveGameItem::DLC4ItemInvMeterial' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvBait) == 0x011400, "Member 'FATSaveGameItem::DLC4ItemInvBait' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvDevelop) == 0x012000, "Member 'FATSaveGameItem::DLC4ItemInvDevelop' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvChip) == 0x012C00, "Member 'FATSaveGameItem::DLC4ItemInvChip' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvPresent) == 0x013800, "Member 'FATSaveGameItem::DLC4ItemInvPresent' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvImportant) == 0x014400, "Member 'FATSaveGameItem::DLC4ItemInvImportant' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4ItemInvRecipe) == 0x015000, "Member 'FATSaveGameItem::DLC4ItemInvRecipe' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvHeal) == 0x015C00, "Member 'FATSaveGameItem::DLC5ItemInvHeal' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvBento) == 0x016800, "Member 'FATSaveGameItem::DLC5ItemInvBento' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvMeterial) == 0x017400, "Member 'FATSaveGameItem::DLC5ItemInvMeterial' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvBait) == 0x018000, "Member 'FATSaveGameItem::DLC5ItemInvBait' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvDevelop) == 0x018C00, "Member 'FATSaveGameItem::DLC5ItemInvDevelop' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvChip) == 0x019800, "Member 'FATSaveGameItem::DLC5ItemInvChip' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvPresent) == 0x01A400, "Member 'FATSaveGameItem::DLC5ItemInvPresent' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvImportant) == 0x01B000, "Member 'FATSaveGameItem::DLC5ItemInvImportant' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5ItemInvRecipe) == 0x01C800, "Member 'FATSaveGameItem::DLC5ItemInvRecipe' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvHeal) == 0x01D400, "Member 'FATSaveGameItem::DLC6ItemInvHeal' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvBento) == 0x01E000, "Member 'FATSaveGameItem::DLC6ItemInvBento' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvMeterial) == 0x01EC00, "Member 'FATSaveGameItem::DLC6ItemInvMeterial' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvBait) == 0x01F800, "Member 'FATSaveGameItem::DLC6ItemInvBait' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvDevelop) == 0x020400, "Member 'FATSaveGameItem::DLC6ItemInvDevelop' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvChip) == 0x021000, "Member 'FATSaveGameItem::DLC6ItemInvChip' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvPresent) == 0x021C00, "Member 'FATSaveGameItem::DLC6ItemInvPresent' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvImportant) == 0x022800, "Member 'FATSaveGameItem::DLC6ItemInvImportant' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6ItemInvRecipe) == 0x024000, "Member 'FATSaveGameItem::DLC6ItemInvRecipe' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ItemPalette) == 0x024C00, "Member 'FATSaveGameItem::ItemPalette' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DragonballItems) == 0x024C10, "Member 'FATSaveGameItem::DragonballItems' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5DragonballItems) == 0x024CF0, "Member 'FATSaveGameItem::DLC5DragonballItems' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, ReplayPreDragonballItems) == 0x024DD0, "Member 'FATSaveGameItem::ReplayPreDragonballItems' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, IsReplayDragonballFunc) == 0x024EB7, "Member 'FATSaveGameItem::IsReplayDragonballFunc' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, IsReplayDragonballEnableSpawn) == 0x024EB8, "Member 'FATSaveGameItem::IsReplayDragonballEnableSpawn' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, PaletteItems) == 0x024EC0, "Member 'FATSaveGameItem::PaletteItems' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC3PaletteItems) == 0x024F20, "Member 'FATSaveGameItem::DLC3PaletteItems' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC4PaletteItems) == 0x024F80, "Member 'FATSaveGameItem::DLC4PaletteItems' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC5PaletteItems) == 0x024FE0, "Member 'FATSaveGameItem::DLC5PaletteItems' has a wrong offset!");
static_assert(offsetof(FATSaveGameItem, DLC6PaletteItems) == 0x025040, "Member 'FATSaveGameItem::DLC6PaletteItems' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameMarker
// 0x0010 (0x0010 - 0x0000)
struct FATSaveGameMarker final
{
public:
	bool                                          bExists;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaIndex                                    AreaIndex;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerMarkerPos3D;                                 // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameMarker) == 0x000004, "Wrong alignment on FATSaveGameMarker");
static_assert(sizeof(FATSaveGameMarker) == 0x000010, "Wrong size on FATSaveGameMarker");
static_assert(offsetof(FATSaveGameMarker, bExists) == 0x000000, "Member 'FATSaveGameMarker::bExists' has a wrong offset!");
static_assert(offsetof(FATSaveGameMarker, AreaIndex) == 0x000001, "Member 'FATSaveGameMarker::AreaIndex' has a wrong offset!");
static_assert(offsetof(FATSaveGameMarker, PlayerMarkerPos3D) == 0x000004, "Member 'FATSaveGameMarker::PlayerMarkerPos3D' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameOnline
// 0x0001 (0x0001 - 0x0000)
struct FATSaveGameOnline final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameOnline) == 0x000001, "Wrong alignment on FATSaveGameOnline");
static_assert(sizeof(FATSaveGameOnline) == 0x000001, "Wrong size on FATSaveGameOnline");

// ScriptStruct ATExt.ATSaveGamePillarThrow
// 0x0004 (0x0004 - 0x0000)
struct FATSaveGamePillarThrow final
{
public:
	float                                         FlyingDistance;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGamePillarThrow) == 0x000004, "Wrong alignment on FATSaveGamePillarThrow");
static_assert(sizeof(FATSaveGamePillarThrow) == 0x000004, "Wrong size on FATSaveGamePillarThrow");
static_assert(offsetof(FATSaveGamePillarThrow, FlyingDistance) == 0x000000, "Member 'FATSaveGamePillarThrow::FlyingDistance' has a wrong offset!");

// ScriptStruct ATExt.ATSaveKPIEventBattleParam_SkillUseCount
// 0x0004 (0x0004 - 0x0000)
struct FATSaveKPIEventBattleParam_SkillUseCount final
{
public:
	int32                                         UseCnt;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveKPIEventBattleParam_SkillUseCount) == 0x000004, "Wrong alignment on FATSaveKPIEventBattleParam_SkillUseCount");
static_assert(sizeof(FATSaveKPIEventBattleParam_SkillUseCount) == 0x000004, "Wrong size on FATSaveKPIEventBattleParam_SkillUseCount");
static_assert(offsetof(FATSaveKPIEventBattleParam_SkillUseCount, UseCnt) == 0x000000, "Member 'FATSaveKPIEventBattleParam_SkillUseCount::UseCnt' has a wrong offset!");

// ScriptStruct ATExt.ATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt
// 0x0100 (0x0100 - 0x0000)
struct FATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt final
{
public:
	struct FATSaveKPIEventBattleParam_SkillUseCount SkillUseCnt[0x40];                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt) == 0x000004, "Wrong alignment on FATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt");
static_assert(sizeof(FATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt) == 0x000100, "Wrong size on FATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt");
static_assert(offsetof(FATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt, SkillUseCnt) == 0x000000, "Member 'FATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt::SkillUseCnt' has a wrong offset!");

// ScriptStruct ATExt.ATSaveKPIEventBattleParam
// 0x2004 (0x2004 - 0x0000)
struct FATSaveKPIEventBattleParam final
{
public:
	int32                                         LoseCnt;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATSaveKPIEventBattleParam_PlayableCharaSkillUseCnt CharaSkillUseCnt[0x20];                            // 0x0004(0x0100)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveKPIEventBattleParam) == 0x000004, "Wrong alignment on FATSaveKPIEventBattleParam");
static_assert(sizeof(FATSaveKPIEventBattleParam) == 0x002004, "Wrong size on FATSaveKPIEventBattleParam");
static_assert(offsetof(FATSaveKPIEventBattleParam, LoseCnt) == 0x000000, "Member 'FATSaveKPIEventBattleParam::LoseCnt' has a wrong offset!");
static_assert(offsetof(FATSaveKPIEventBattleParam, CharaSkillUseCnt) == 0x000004, "Member 'FATSaveKPIEventBattleParam::CharaSkillUseCnt' has a wrong offset!");

// ScriptStruct ATExt.ATSaveKPIEventBattle
// 0x200400 (0x200400 - 0x0000)
struct FATSaveKPIEventBattle final
{
public:
	struct FATSaveKPIEventBattleParam             ATSaveKPIEventBattleParam[0x100];                  // 0x0000(0x2004)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveKPIEventBattle) == 0x000004, "Wrong alignment on FATSaveKPIEventBattle");
static_assert(sizeof(FATSaveKPIEventBattle) == 0x200400, "Wrong size on FATSaveKPIEventBattle");
static_assert(offsetof(FATSaveKPIEventBattle, ATSaveKPIEventBattleParam) == 0x000000, "Member 'FATSaveKPIEventBattle::ATSaveKPIEventBattleParam' has a wrong offset!");

// ScriptStruct ATExt.SubQuestCameraBlendParam
// 0x0008 (0x0010 - 0x0008)
struct FSubQuestCameraBlendParam final : public FTableRowBase
{
public:
	float                                         StartCameraDuration;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndCameraDuration;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubQuestCameraBlendParam) == 0x000008, "Wrong alignment on FSubQuestCameraBlendParam");
static_assert(sizeof(FSubQuestCameraBlendParam) == 0x000010, "Wrong size on FSubQuestCameraBlendParam");
static_assert(offsetof(FSubQuestCameraBlendParam, StartCameraDuration) == 0x000008, "Member 'FSubQuestCameraBlendParam::StartCameraDuration' has a wrong offset!");
static_assert(offsetof(FSubQuestCameraBlendParam, EndCameraDuration) == 0x00000C, "Member 'FSubQuestCameraBlendParam::EndCameraDuration' has a wrong offset!");

// ScriptStruct ATExt.BattleResult
// 0x0006 (0x0006 - 0x0000)
struct FBattleResult final
{
public:
	uint16                                        ClearTime;                                         // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MaxCombo;                                          // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DamageTaken;                                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x1];                                        // 0x0005(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleResult) == 0x000002, "Wrong alignment on FBattleResult");
static_assert(sizeof(FBattleResult) == 0x000006, "Wrong size on FBattleResult");
static_assert(offsetof(FBattleResult, ClearTime) == 0x000000, "Member 'FBattleResult::ClearTime' has a wrong offset!");
static_assert(offsetof(FBattleResult, MaxCombo) == 0x000002, "Member 'FBattleResult::MaxCombo' has a wrong offset!");
static_assert(offsetof(FBattleResult, DamageTaken) == 0x000004, "Member 'FBattleResult::DamageTaken' has a wrong offset!");

// ScriptStruct ATExt.EpisodeResult
// 0x0004 (0x0004 - 0x0000)
struct FEpisodeResult final
{
public:
	bool                                          IsCleared;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rank;                                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubQuestClear;                                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubQuestTotal;                                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpisodeResult) == 0x000001, "Wrong alignment on FEpisodeResult");
static_assert(sizeof(FEpisodeResult) == 0x000004, "Wrong size on FEpisodeResult");
static_assert(offsetof(FEpisodeResult, IsCleared) == 0x000000, "Member 'FEpisodeResult::IsCleared' has a wrong offset!");
static_assert(offsetof(FEpisodeResult, Rank) == 0x000001, "Member 'FEpisodeResult::Rank' has a wrong offset!");
static_assert(offsetof(FEpisodeResult, SubQuestClear) == 0x000002, "Member 'FEpisodeResult::SubQuestClear' has a wrong offset!");
static_assert(offsetof(FEpisodeResult, SubQuestTotal) == 0x000003, "Member 'FEpisodeResult::SubQuestTotal' has a wrong offset!");

// ScriptStruct ATExt.ChapterResult
// 0x0040 (0x0040 - 0x0000)
struct FChapterResult final
{
public:
	struct FEpisodeResult                         EpisodeResult[0x10];                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChapterResult) == 0x000001, "Wrong alignment on FChapterResult");
static_assert(sizeof(FChapterResult) == 0x000040, "Wrong size on FChapterResult");
static_assert(offsetof(FChapterResult, EpisodeResult) == 0x000000, "Member 'FChapterResult::EpisodeResult' has a wrong offset!");

// ScriptStruct ATExt.QuestNotificationStatus
// 0x0018 (0x0018 - 0x0000)
struct FQuestNotificationStatus final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayed;                                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestNotificationStatus) == 0x000008, "Wrong alignment on FQuestNotificationStatus");
static_assert(sizeof(FQuestNotificationStatus) == 0x000018, "Wrong size on FQuestNotificationStatus");
static_assert(offsetof(FQuestNotificationStatus, ID) == 0x000000, "Member 'FQuestNotificationStatus::ID' has a wrong offset!");
static_assert(offsetof(FQuestNotificationStatus, bPlayed) == 0x000010, "Member 'FQuestNotificationStatus::bPlayed' has a wrong offset!");

// ScriptStruct ATExt.GameProgress
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FGameProgress final
{
public:
	class FName                                   MainCurrent;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainCurrentPhase;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExtendCurrent;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtendCurrentPhase;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DLC4Current;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLC4CurrentPhase;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DLC5Current;                                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLC5CurrentPhase;                                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DLC6Current;                                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLC6CurrentPhase;                                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeerusStarTransition;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameProgress) == 0x000008, "Wrong alignment on FGameProgress");
static_assert(sizeof(FGameProgress) == 0x000050, "Wrong size on FGameProgress");
static_assert(offsetof(FGameProgress, MainCurrent) == 0x000000, "Member 'FGameProgress::MainCurrent' has a wrong offset!");
static_assert(offsetof(FGameProgress, MainCurrentPhase) == 0x000008, "Member 'FGameProgress::MainCurrentPhase' has a wrong offset!");
static_assert(offsetof(FGameProgress, ExtendCurrent) == 0x000010, "Member 'FGameProgress::ExtendCurrent' has a wrong offset!");
static_assert(offsetof(FGameProgress, ExtendCurrentPhase) == 0x000018, "Member 'FGameProgress::ExtendCurrentPhase' has a wrong offset!");
static_assert(offsetof(FGameProgress, DLC4Current) == 0x000020, "Member 'FGameProgress::DLC4Current' has a wrong offset!");
static_assert(offsetof(FGameProgress, DLC4CurrentPhase) == 0x000028, "Member 'FGameProgress::DLC4CurrentPhase' has a wrong offset!");
static_assert(offsetof(FGameProgress, DLC5Current) == 0x000030, "Member 'FGameProgress::DLC5Current' has a wrong offset!");
static_assert(offsetof(FGameProgress, DLC5CurrentPhase) == 0x000038, "Member 'FGameProgress::DLC5CurrentPhase' has a wrong offset!");
static_assert(offsetof(FGameProgress, DLC6Current) == 0x000040, "Member 'FGameProgress::DLC6Current' has a wrong offset!");
static_assert(offsetof(FGameProgress, DLC6CurrentPhase) == 0x000048, "Member 'FGameProgress::DLC6CurrentPhase' has a wrong offset!");
static_assert(offsetof(FGameProgress, bBeerusStarTransition) == 0x00004C, "Member 'FGameProgress::bBeerusStarTransition' has a wrong offset!");

// ScriptStruct ATExt.ItemTraderStatus
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FItemTraderStatus final
{
public:
	float                                         CurrentReceiveIntervalSecond;                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReceiveIntervalSecond;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReceivableItemId;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReceivableCount;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdatable;                                        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItemMax;                                          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemTraderStatus) == 0x000008, "Wrong alignment on FItemTraderStatus");
static_assert(sizeof(FItemTraderStatus) == 0x000018, "Wrong size on FItemTraderStatus");
static_assert(offsetof(FItemTraderStatus, CurrentReceiveIntervalSecond) == 0x000000, "Member 'FItemTraderStatus::CurrentReceiveIntervalSecond' has a wrong offset!");
static_assert(offsetof(FItemTraderStatus, ReceiveIntervalSecond) == 0x000004, "Member 'FItemTraderStatus::ReceiveIntervalSecond' has a wrong offset!");
static_assert(offsetof(FItemTraderStatus, ReceivableItemId) == 0x000008, "Member 'FItemTraderStatus::ReceivableItemId' has a wrong offset!");
static_assert(offsetof(FItemTraderStatus, ReceivableCount) == 0x000010, "Member 'FItemTraderStatus::ReceivableCount' has a wrong offset!");
static_assert(offsetof(FItemTraderStatus, bUpdatable) == 0x000014, "Member 'FItemTraderStatus::bUpdatable' has a wrong offset!");
static_assert(offsetof(FItemTraderStatus, bItemMax) == 0x000015, "Member 'FItemTraderStatus::bItemMax' has a wrong offset!");

// ScriptStruct ATExt.LevelCondition
// 0x0050 (0x0050 - 0x0000)
struct FLevelCondition final
{
public:
	TMap<class FString, class FString>            Collection;                                        // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLevelCondition) == 0x000008, "Wrong alignment on FLevelCondition");
static_assert(sizeof(FLevelCondition) == 0x000050, "Wrong size on FLevelCondition");
static_assert(offsetof(FLevelCondition, Collection) == 0x000000, "Member 'FLevelCondition::Collection' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameProgress
// 0x1D98 (0x1D98 - 0x0000)
struct FATSaveGameProgress final
{
public:
	struct FBattleResult                          BattleResults[0x100];                              // 0x0000(0x0006)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FChapterResult                         ChapterResult[0x10];                               // 0x0600(0x0040)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FMissionProgressUserData, 0x0050, 0x08> MissionProgress;                                   // 0x0A00(0x0050)(NativeAccessSpecifierPublic)
	struct FQuestProgress                         QuestProgress;                                     // 0x0A50(0x0920)(NativeAccessSpecifierPublic)
	struct FGameProgress                          GameProgress;                                      // 0x1370(0x0050)(NoDestructor, NativeAccessSpecifierPublic)
	struct FItemTraderStatus                      ItemTraderStatus;                                  // 0x13C0(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FQuestNotificationStatus               QuestNotificationStatus[0x64];                     // 0x13D8(0x0018)(NativeAccessSpecifierPublic)
	struct FLevelCondition                        LevelCondition;                                    // 0x1D38(0x0050)(NativeAccessSpecifierPublic)
	TArray<class FString>                         FlagRequestInWorldMap;                             // 0x1D88(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameProgress) == 0x000008, "Wrong alignment on FATSaveGameProgress");
static_assert(sizeof(FATSaveGameProgress) == 0x001D98, "Wrong size on FATSaveGameProgress");
static_assert(offsetof(FATSaveGameProgress, BattleResults) == 0x000000, "Member 'FATSaveGameProgress::BattleResults' has a wrong offset!");
static_assert(offsetof(FATSaveGameProgress, ChapterResult) == 0x000600, "Member 'FATSaveGameProgress::ChapterResult' has a wrong offset!");
static_assert(offsetof(FATSaveGameProgress, MissionProgress) == 0x000A00, "Member 'FATSaveGameProgress::MissionProgress' has a wrong offset!");
static_assert(offsetof(FATSaveGameProgress, QuestProgress) == 0x000A50, "Member 'FATSaveGameProgress::QuestProgress' has a wrong offset!");
static_assert(offsetof(FATSaveGameProgress, GameProgress) == 0x001370, "Member 'FATSaveGameProgress::GameProgress' has a wrong offset!");
static_assert(offsetof(FATSaveGameProgress, ItemTraderStatus) == 0x0013C0, "Member 'FATSaveGameProgress::ItemTraderStatus' has a wrong offset!");
static_assert(offsetof(FATSaveGameProgress, QuestNotificationStatus) == 0x0013D8, "Member 'FATSaveGameProgress::QuestNotificationStatus' has a wrong offset!");
static_assert(offsetof(FATSaveGameProgress, LevelCondition) == 0x001D38, "Member 'FATSaveGameProgress::LevelCondition' has a wrong offset!");
static_assert(offsetof(FATSaveGameProgress, FlagRequestInWorldMap) == 0x001D88, "Member 'FATSaveGameProgress::FlagRequestInWorldMap' has a wrong offset!");

// ScriptStruct ATExt.GroupBattleResult
// 0x0006 (0x0006 - 0x0000)
struct FGroupBattleResult final
{
public:
	uint16                                        ClearTime;                                         // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DamageTaken;                                       // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DefeatEnemy;                                       // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupBattleResult) == 0x000002, "Wrong alignment on FGroupBattleResult");
static_assert(sizeof(FGroupBattleResult) == 0x000006, "Wrong size on FGroupBattleResult");
static_assert(offsetof(FGroupBattleResult, ClearTime) == 0x000000, "Member 'FGroupBattleResult::ClearTime' has a wrong offset!");
static_assert(offsetof(FGroupBattleResult, DamageTaken) == 0x000002, "Member 'FGroupBattleResult::DamageTaken' has a wrong offset!");
static_assert(offsetof(FGroupBattleResult, DefeatEnemy) == 0x000004, "Member 'FGroupBattleResult::DefeatEnemy' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameRiding
// 0x0988 (0x0988 - 0x0000)
struct FATSaveGameRiding final
{
public:
	TStructCycleFixup<struct FRidingStatus, 0x0260, 0x08> RidingStatus[0x2];                                 // 0x0000(0x0260)(NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FRidingStatus, 0x0260, 0x08> DlcTrunksRidingStatus[0x2];                        // 0x04C0(0x0260)(NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          DlcTrunksFirstLoad;                                // 0x0980(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_981[0x7];                                      // 0x0981(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameRiding) == 0x000008, "Wrong alignment on FATSaveGameRiding");
static_assert(sizeof(FATSaveGameRiding) == 0x000988, "Wrong size on FATSaveGameRiding");
static_assert(offsetof(FATSaveGameRiding, RidingStatus) == 0x000000, "Member 'FATSaveGameRiding::RidingStatus' has a wrong offset!");
static_assert(offsetof(FATSaveGameRiding, DlcTrunksRidingStatus) == 0x0004C0, "Member 'FATSaveGameRiding::DlcTrunksRidingStatus' has a wrong offset!");
static_assert(offsetof(FATSaveGameRiding, DlcTrunksFirstLoad) == 0x000980, "Member 'FATSaveGameRiding::DlcTrunksFirstLoad' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameShop
// 0x2FDA (0x2FDA - 0x0000)
struct FATSaveGameShop final
{
public:
	TStructCycleFixup<struct FShopInfoSaveData, 0x0023, 0x01> ShopInfoSaveData[0x46];                            // 0x0000(0x0023)(NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FShopInfoSaveData, 0x0023, 0x01> ShopInfoSaveDataForDlc3[0x46];                     // 0x0992(0x0023)(NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FShopInfoSaveData, 0x0023, 0x01> ShopInfoSaveDataForDLC4[0x46];                     // 0x1324(0x0023)(NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FShopInfoSaveData, 0x0023, 0x01> ShopInfoSaveDataForDLC5[0x46];                     // 0x1CB6(0x0023)(NoDestructor, NativeAccessSpecifierPrivate)
	TStructCycleFixup<struct FShopInfoSaveData, 0x0023, 0x01> ShopInfoSaveDataForDLC6[0x46];                     // 0x2648(0x0023)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameShop) == 0x000001, "Wrong alignment on FATSaveGameShop");
static_assert(sizeof(FATSaveGameShop) == 0x002FDA, "Wrong size on FATSaveGameShop");
static_assert(offsetof(FATSaveGameShop, ShopInfoSaveData) == 0x000000, "Member 'FATSaveGameShop::ShopInfoSaveData' has a wrong offset!");
static_assert(offsetof(FATSaveGameShop, ShopInfoSaveDataForDlc3) == 0x000992, "Member 'FATSaveGameShop::ShopInfoSaveDataForDlc3' has a wrong offset!");
static_assert(offsetof(FATSaveGameShop, ShopInfoSaveDataForDLC4) == 0x001324, "Member 'FATSaveGameShop::ShopInfoSaveDataForDLC4' has a wrong offset!");
static_assert(offsetof(FATSaveGameShop, ShopInfoSaveDataForDLC5) == 0x001CB6, "Member 'FATSaveGameShop::ShopInfoSaveDataForDLC5' has a wrong offset!");
static_assert(offsetof(FATSaveGameShop, ShopInfoSaveDataForDLC6) == 0x002648, "Member 'FATSaveGameShop::ShopInfoSaveDataForDLC6' has a wrong offset!");

// ScriptStruct ATExt.ATGamePlayedTime
// 0x000C (0x000C - 0x0000)
struct FATGamePlayedTime final
{
public:
	float                                         Hour;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minute;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Second;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATGamePlayedTime) == 0x000004, "Wrong alignment on FATGamePlayedTime");
static_assert(sizeof(FATGamePlayedTime) == 0x00000C, "Wrong size on FATGamePlayedTime");
static_assert(offsetof(FATGamePlayedTime, Hour) == 0x000000, "Member 'FATGamePlayedTime::Hour' has a wrong offset!");
static_assert(offsetof(FATGamePlayedTime, Minute) == 0x000004, "Member 'FATGamePlayedTime::Minute' has a wrong offset!");
static_assert(offsetof(FATGamePlayedTime, Second) == 0x000008, "Member 'FATGamePlayedTime::Second' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameSystem
// 0x0010 (0x0010 - 0x0000)
struct FATSaveGameSystem final
{
public:
	uint32                                        Version;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FATGamePlayedTime                      GamePlayedTime;                                    // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameSystem) == 0x000004, "Wrong alignment on FATSaveGameSystem");
static_assert(sizeof(FATSaveGameSystem) == 0x000010, "Wrong size on FATSaveGameSystem");
static_assert(offsetof(FATSaveGameSystem, Version) == 0x000000, "Member 'FATSaveGameSystem::Version' has a wrong offset!");
static_assert(offsetof(FATSaveGameSystem, GamePlayedTime) == 0x000004, "Member 'FATSaveGameSystem::GamePlayedTime' has a wrong offset!");

// ScriptStruct ATExt.CharacterPartsLoadData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FCharacterPartsLoadData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterPartsLoadData) == 0x000004, "Wrong alignment on FCharacterPartsLoadData");
static_assert(sizeof(FCharacterPartsLoadData) == 0x000008, "Wrong size on FCharacterPartsLoadData");

// ScriptStruct ATExt.PartyTemp
// 0x0003 (0x0003 - 0x0000)
struct FPartyTemp final
{
public:
	ECHARACTER_TYPE                               Member[0x3];                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyTemp) == 0x000001, "Wrong alignment on FPartyTemp");
static_assert(sizeof(FPartyTemp) == 0x000003, "Wrong size on FPartyTemp");
static_assert(offsetof(FPartyTemp, Member) == 0x000000, "Member 'FPartyTemp::Member' has a wrong offset!");

// ScriptStruct ATExt.SaveTrainingInfo
// 0x0002 (0x0002 - 0x0000)
struct FSaveTrainingInfo final
{
public:
	bool                                          IsClear;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLook;                                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveTrainingInfo) == 0x000001, "Wrong alignment on FSaveTrainingInfo");
static_assert(sizeof(FSaveTrainingInfo) == 0x000002, "Wrong size on FSaveTrainingInfo");
static_assert(offsetof(FSaveTrainingInfo, IsClear) == 0x000000, "Member 'FSaveTrainingInfo::IsClear' has a wrong offset!");
static_assert(offsetof(FSaveTrainingInfo, IsLook) == 0x000001, "Member 'FSaveTrainingInfo::IsLook' has a wrong offset!");

// ScriptStruct ATExt.AreaChangeInfo
// 0x0090 (0x0090 - 0x0000)
struct FAreaChangeInfo final
{
public:
	bool                                          bEnableAreaChangeTraining;                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnBackTraining;                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCleardTraining;                                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFadeInAfterAreaChange;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          TrainingTypeId;                                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TrainingActorFindId;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapNameBeforTraining;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrainingEventBattleId;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrainingEventQuestId;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocationBeforTraining;                             // 0x0030(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MoveCategory;                                      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECHARACTER_TYPE                               TempLeader;                                        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECHARACTER_TYPE>                       PrevPartyMenber;                                   // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  BattleMissionSuccess;                              // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaChangeInfo) == 0x000010, "Wrong alignment on FAreaChangeInfo");
static_assert(sizeof(FAreaChangeInfo) == 0x000090, "Wrong size on FAreaChangeInfo");
static_assert(offsetof(FAreaChangeInfo, bEnableAreaChangeTraining) == 0x000000, "Member 'FAreaChangeInfo::bEnableAreaChangeTraining' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, bTurnBackTraining) == 0x000001, "Member 'FAreaChangeInfo::bTurnBackTraining' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, bCleardTraining) == 0x000002, "Member 'FAreaChangeInfo::bCleardTraining' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, bShouldFadeInAfterAreaChange) == 0x000003, "Member 'FAreaChangeInfo::bShouldFadeInAfterAreaChange' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, TrainingTypeId) == 0x000004, "Member 'FAreaChangeInfo::TrainingTypeId' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, TrainingActorFindId) == 0x000008, "Member 'FAreaChangeInfo::TrainingActorFindId' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, MapNameBeforTraining) == 0x000010, "Member 'FAreaChangeInfo::MapNameBeforTraining' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, TrainingEventBattleId) == 0x000018, "Member 'FAreaChangeInfo::TrainingEventBattleId' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, TrainingEventQuestId) == 0x000020, "Member 'FAreaChangeInfo::TrainingEventQuestId' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, LocationBeforTraining) == 0x000030, "Member 'FAreaChangeInfo::LocationBeforTraining' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, MoveCategory) == 0x000060, "Member 'FAreaChangeInfo::MoveCategory' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, TempLeader) == 0x000064, "Member 'FAreaChangeInfo::TempLeader' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, PrevPartyMenber) == 0x000068, "Member 'FAreaChangeInfo::PrevPartyMenber' has a wrong offset!");
static_assert(offsetof(FAreaChangeInfo, BattleMissionSuccess) == 0x000078, "Member 'FAreaChangeInfo::BattleMissionSuccess' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameTraining
// 0x0590 (0x0590 - 0x0000)
struct FATSaveGameTraining final
{
public:
	int32                                         TrainingRoomLevel;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IsNewTrainingParam;                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bIsFinishedAwakeSuperPassiveTutorial;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECHARACTER_TYPE, struct FPartyTemp>      TabPartyTemp;                                      // 0x0020(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         SimuratorClearData[0x64];                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      SuperTrainingClearDataGoku[0x32];                  // 0x0200(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      SuperTrainingClearDataVegeta[0x32];                // 0x0264(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      BreakThroughClearDataGoku[0x32];                   // 0x02C8(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      BreakThroughClearDataVegeta[0x32];                 // 0x032C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      ChallengeToGodOfDestructionData;                   // 0x0390(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      ChallengeToGodOfDestructionDataGokuForDlcBeerus;   // 0x0392(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      ChallengeToGodOfDestructionDataVegetaForDlcBeerus; // 0x0394(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      ChallengeToGodOfDestructionDataGokuForDlcFreezer;  // 0x0396(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      ChallengeToGodOfDestructionDataVegetaForDlcFreezer; // 0x0398(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      ChallengeFreezerFClearData[0x32];                  // 0x039A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      CrowdTrainingClearData[0xA];                       // 0x03FE(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      DLC3EndContentChallengeData[0xA];                  // 0x0412(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_426[0xA];                                      // 0x0426(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAreaChangeInfo                        DLC4AreaChangeTrainingInfo;                        // 0x0430(0x0090)(NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      DLC4EndContentChallengeData[0xC];                  // 0x04C0(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      DLC5EndContentChallengeData[0x17];                 // 0x04D8(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      DLC6EndContentChallengeData[0x20];                 // 0x0506(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSaveTrainingInfo                      MainStoryExChallengeData[0x24];                    // 0x0546(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58E[0x2];                                      // 0x058E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameTraining) == 0x000010, "Wrong alignment on FATSaveGameTraining");
static_assert(sizeof(FATSaveGameTraining) == 0x000590, "Wrong size on FATSaveGameTraining");
static_assert(offsetof(FATSaveGameTraining, TrainingRoomLevel) == 0x000000, "Member 'FATSaveGameTraining::TrainingRoomLevel' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, IsNewTrainingParam) == 0x000008, "Member 'FATSaveGameTraining::IsNewTrainingParam' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, bIsFinishedAwakeSuperPassiveTutorial) == 0x000018, "Member 'FATSaveGameTraining::bIsFinishedAwakeSuperPassiveTutorial' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, TabPartyTemp) == 0x000020, "Member 'FATSaveGameTraining::TabPartyTemp' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, SimuratorClearData) == 0x000070, "Member 'FATSaveGameTraining::SimuratorClearData' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, SuperTrainingClearDataGoku) == 0x000200, "Member 'FATSaveGameTraining::SuperTrainingClearDataGoku' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, SuperTrainingClearDataVegeta) == 0x000264, "Member 'FATSaveGameTraining::SuperTrainingClearDataVegeta' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, BreakThroughClearDataGoku) == 0x0002C8, "Member 'FATSaveGameTraining::BreakThroughClearDataGoku' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, BreakThroughClearDataVegeta) == 0x00032C, "Member 'FATSaveGameTraining::BreakThroughClearDataVegeta' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, ChallengeToGodOfDestructionData) == 0x000390, "Member 'FATSaveGameTraining::ChallengeToGodOfDestructionData' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, ChallengeToGodOfDestructionDataGokuForDlcBeerus) == 0x000392, "Member 'FATSaveGameTraining::ChallengeToGodOfDestructionDataGokuForDlcBeerus' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, ChallengeToGodOfDestructionDataVegetaForDlcBeerus) == 0x000394, "Member 'FATSaveGameTraining::ChallengeToGodOfDestructionDataVegetaForDlcBeerus' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, ChallengeToGodOfDestructionDataGokuForDlcFreezer) == 0x000396, "Member 'FATSaveGameTraining::ChallengeToGodOfDestructionDataGokuForDlcFreezer' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, ChallengeToGodOfDestructionDataVegetaForDlcFreezer) == 0x000398, "Member 'FATSaveGameTraining::ChallengeToGodOfDestructionDataVegetaForDlcFreezer' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, ChallengeFreezerFClearData) == 0x00039A, "Member 'FATSaveGameTraining::ChallengeFreezerFClearData' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, CrowdTrainingClearData) == 0x0003FE, "Member 'FATSaveGameTraining::CrowdTrainingClearData' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, DLC3EndContentChallengeData) == 0x000412, "Member 'FATSaveGameTraining::DLC3EndContentChallengeData' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, DLC4AreaChangeTrainingInfo) == 0x000430, "Member 'FATSaveGameTraining::DLC4AreaChangeTrainingInfo' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, DLC4EndContentChallengeData) == 0x0004C0, "Member 'FATSaveGameTraining::DLC4EndContentChallengeData' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, DLC5EndContentChallengeData) == 0x0004D8, "Member 'FATSaveGameTraining::DLC5EndContentChallengeData' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, DLC6EndContentChallengeData) == 0x000506, "Member 'FATSaveGameTraining::DLC6EndContentChallengeData' has a wrong offset!");
static_assert(offsetof(FATSaveGameTraining, MainStoryExChallengeData) == 0x000546, "Member 'FATSaveGameTraining::MainStoryExChallengeData' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameTreasureNode
// 0x0001 (0x0001 - 0x0000)
struct FATSaveGameTreasureNode final
{
public:
	bool                                          bTaken;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveGameTreasureNode) == 0x000001, "Wrong alignment on FATSaveGameTreasureNode");
static_assert(sizeof(FATSaveGameTreasureNode) == 0x000001, "Wrong size on FATSaveGameTreasureNode");
static_assert(offsetof(FATSaveGameTreasureNode, bTaken) == 0x000000, "Member 'FATSaveGameTreasureNode::bTaken' has a wrong offset!");

// ScriptStruct ATExt.BreakableObjectParam
// 0x0002 (0x0002 - 0x0000)
struct FBreakableObjectParam final
{
public:
	bool                                          IsBroken;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrokenReason                                 BrokenReason;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreakableObjectParam) == 0x000001, "Wrong alignment on FBreakableObjectParam");
static_assert(sizeof(FBreakableObjectParam) == 0x000002, "Wrong size on FBreakableObjectParam");
static_assert(offsetof(FBreakableObjectParam, IsBroken) == 0x000000, "Member 'FBreakableObjectParam::IsBroken' has a wrong offset!");
static_assert(offsetof(FBreakableObjectParam, BrokenReason) == 0x000001, "Member 'FBreakableObjectParam::BrokenReason' has a wrong offset!");

// ScriptStruct ATExt.ReplayEventItemInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FReplayEventItemInfo final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DecSkip;                                           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplayEventItemInfo) == 0x000008, "Wrong alignment on FReplayEventItemInfo");
static_assert(sizeof(FReplayEventItemInfo) == 0x000010, "Wrong size on FReplayEventItemInfo");
static_assert(offsetof(FReplayEventItemInfo, ItemId) == 0x000000, "Member 'FReplayEventItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FReplayEventItemInfo, ItemNum) == 0x000008, "Member 'FReplayEventItemInfo::ItemNum' has a wrong offset!");
static_assert(offsetof(FReplayEventItemInfo, DecSkip) == 0x00000C, "Member 'FReplayEventItemInfo::DecSkip' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameTreasure
// 0x0E90 (0x0E90 - 0x0000)
struct FATSaveGameTreasure final
{
public:
	struct FATSaveGameTreasureNode                DMedal[0x1F4];                                     // 0x0000(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	struct FATSaveGameTreasureNode                DLC3DMedal[0x1F4];                                 // 0x01F4(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	struct FATSaveGameTreasureNode                DLC4DMedal[0x1F4];                                 // 0x03E8(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	struct FATSaveGameTreasureNode                DLC5DMedal[0x1F4];                                 // 0x05DC(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	struct FATSaveGameTreasureNode                DLC6DMedal[0x1F4];                                 // 0x07D0(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	struct FATSaveGameTreasureNode                EventItem[0x2BC];                                  // 0x09C4(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	struct FBreakableObjectParam                  BreakableObjectItem[0x64];                         // 0x0C80(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	struct FReplayEventItemInfo                   ReplayEventItemInfo[0x10];                         // 0x0D48(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReplayTreasure[0x10];                              // 0x0E48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReplayTreasureFunc;                              // 0x0E88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E89[0x7];                                      // 0x0E89(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameTreasure) == 0x000008, "Wrong alignment on FATSaveGameTreasure");
static_assert(sizeof(FATSaveGameTreasure) == 0x000E90, "Wrong size on FATSaveGameTreasure");
static_assert(offsetof(FATSaveGameTreasure, DMedal) == 0x000000, "Member 'FATSaveGameTreasure::DMedal' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, DLC3DMedal) == 0x0001F4, "Member 'FATSaveGameTreasure::DLC3DMedal' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, DLC4DMedal) == 0x0003E8, "Member 'FATSaveGameTreasure::DLC4DMedal' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, DLC5DMedal) == 0x0005DC, "Member 'FATSaveGameTreasure::DLC5DMedal' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, DLC6DMedal) == 0x0007D0, "Member 'FATSaveGameTreasure::DLC6DMedal' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, EventItem) == 0x0009C4, "Member 'FATSaveGameTreasure::EventItem' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, BreakableObjectItem) == 0x000C80, "Member 'FATSaveGameTreasure::BreakableObjectItem' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, ReplayEventItemInfo) == 0x000D48, "Member 'FATSaveGameTreasure::ReplayEventItemInfo' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, ReplayTreasure) == 0x000E48, "Member 'FATSaveGameTreasure::ReplayTreasure' has a wrong offset!");
static_assert(offsetof(FATSaveGameTreasure, IsReplayTreasureFunc) == 0x000E88, "Member 'FATSaveGameTreasure::IsReplayTreasureFunc' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameTrophy
// 0x0060 (0x0060 - 0x0000)
struct FATSaveGameTrophy final
{
public:
	TMap<class FString, int32>                    AchievementCount;                                  // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AteCourseRecipe;                                   // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameTrophy) == 0x000008, "Wrong alignment on FATSaveGameTrophy");
static_assert(sizeof(FATSaveGameTrophy) == 0x000060, "Wrong size on FATSaveGameTrophy");
static_assert(offsetof(FATSaveGameTrophy, AchievementCount) == 0x000000, "Member 'FATSaveGameTrophy::AchievementCount' has a wrong offset!");
static_assert(offsetof(FATSaveGameTrophy, AteCourseRecipe) == 0x000050, "Member 'FATSaveGameTrophy::AteCourseRecipe' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameTurtleSchool
// 0x0058 (0x0058 - 0x0000)
struct FATSaveGameTurtleSchool final
{
public:
	bool                                          bOpenTurtleSchoolTraining;                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOpenSubjugation;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DisplayedIdList;                                   // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ClearedMissionIdList;                              // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bIsMainStoryDisplayPromptLog;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NonReportMissionIdList;                            // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ReceivedHermitRewardId;                            // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         MissionClearCount;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveGameTurtleSchool) == 0x000008, "Wrong alignment on FATSaveGameTurtleSchool");
static_assert(sizeof(FATSaveGameTurtleSchool) == 0x000058, "Wrong size on FATSaveGameTurtleSchool");
static_assert(offsetof(FATSaveGameTurtleSchool, bOpenTurtleSchoolTraining) == 0x000000, "Member 'FATSaveGameTurtleSchool::bOpenTurtleSchoolTraining' has a wrong offset!");
static_assert(offsetof(FATSaveGameTurtleSchool, bOpenSubjugation) == 0x000001, "Member 'FATSaveGameTurtleSchool::bOpenSubjugation' has a wrong offset!");
static_assert(offsetof(FATSaveGameTurtleSchool, DisplayedIdList) == 0x000008, "Member 'FATSaveGameTurtleSchool::DisplayedIdList' has a wrong offset!");
static_assert(offsetof(FATSaveGameTurtleSchool, ClearedMissionIdList) == 0x000018, "Member 'FATSaveGameTurtleSchool::ClearedMissionIdList' has a wrong offset!");
static_assert(offsetof(FATSaveGameTurtleSchool, bIsMainStoryDisplayPromptLog) == 0x000028, "Member 'FATSaveGameTurtleSchool::bIsMainStoryDisplayPromptLog' has a wrong offset!");
static_assert(offsetof(FATSaveGameTurtleSchool, NonReportMissionIdList) == 0x000030, "Member 'FATSaveGameTurtleSchool::NonReportMissionIdList' has a wrong offset!");
static_assert(offsetof(FATSaveGameTurtleSchool, ReceivedHermitRewardId) == 0x000040, "Member 'FATSaveGameTurtleSchool::ReceivedHermitRewardId' has a wrong offset!");
static_assert(offsetof(FATSaveGameTurtleSchool, MissionClearCount) == 0x000050, "Member 'FATSaveGameTurtleSchool::MissionClearCount' has a wrong offset!");

// ScriptStruct ATExt.ATHave
// 0x0002 (0x0002 - 0x0000)
struct FATHave final
{
public:
	uint16                                        M_have;                                            // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATHave) == 0x000002, "Wrong alignment on FATHave");
static_assert(sizeof(FATHave) == 0x000002, "Wrong size on FATHave");
static_assert(offsetof(FATHave, M_have) == 0x000000, "Member 'FATHave::M_have' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameTutorial
// 0x0400 (0x0400 - 0x0000)
struct FATSaveGameTutorial final
{
public:
	struct FATHave                                HaveState[0x100];                                  // 0x0000(0x0002)(NativeAccessSpecifierPrivate)
	struct FATHave                                HaveStateEx[0x100];                                // 0x0200(0x0002)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameTutorial) == 0x000002, "Wrong alignment on FATSaveGameTutorial");
static_assert(sizeof(FATSaveGameTutorial) == 0x000400, "Wrong size on FATSaveGameTutorial");
static_assert(offsetof(FATSaveGameTutorial, HaveState) == 0x000000, "Member 'FATSaveGameTutorial::HaveState' has a wrong offset!");
static_assert(offsetof(FATSaveGameTutorial, HaveStateEx) == 0x000200, "Member 'FATSaveGameTutorial::HaveStateEx' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameWindRoad
// 0x0010 (0x0010 - 0x0000)
struct FATSaveGameWindRoad final
{
public:
	TArray<class FName>                           RareWindRoadList;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameWindRoad) == 0x000008, "Wrong alignment on FATSaveGameWindRoad");
static_assert(sizeof(FATSaveGameWindRoad) == 0x000010, "Wrong size on FATSaveGameWindRoad");
static_assert(offsetof(FATSaveGameWindRoad, RareWindRoadList) == 0x000000, "Member 'FATSaveGameWindRoad::RareWindRoadList' has a wrong offset!");

// ScriptStruct ATExt.ATSaveGameZOrb
// 0x6000 (0x6000 - 0x0000)
struct FATSaveGameZOrb final
{
public:
	int32                                         RespawnTimeData[0xC00];                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RespawnTimeDataEx[0xC00];                          // 0x3000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FATSaveGameZOrb) == 0x000004, "Wrong alignment on FATSaveGameZOrb");
static_assert(sizeof(FATSaveGameZOrb) == 0x006000, "Wrong size on FATSaveGameZOrb");
static_assert(offsetof(FATSaveGameZOrb, RespawnTimeData) == 0x000000, "Member 'FATSaveGameZOrb::RespawnTimeData' has a wrong offset!");
static_assert(offsetof(FATSaveGameZOrb, RespawnTimeDataEx) == 0x003000, "Member 'FATSaveGameZOrb::RespawnTimeDataEx' has a wrong offset!");

// ScriptStruct ATExt.ATSaveSystemDlc
// 0x0014 (0x0014 - 0x0000)
struct FATSaveSystemDlc final
{
public:
	uint32                                        DlcVarsion;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHiddenDlcInfo;                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        DLCInfoNotifiedFlags;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DLCMenuNotifiedFlags;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InstallDLCEvenOnceFlags;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveSystemDlc) == 0x000004, "Wrong alignment on FATSaveSystemDlc");
static_assert(sizeof(FATSaveSystemDlc) == 0x000014, "Wrong size on FATSaveSystemDlc");
static_assert(offsetof(FATSaveSystemDlc, DlcVarsion) == 0x000000, "Member 'FATSaveSystemDlc::DlcVarsion' has a wrong offset!");
static_assert(offsetof(FATSaveSystemDlc, IsHiddenDlcInfo) == 0x000004, "Member 'FATSaveSystemDlc::IsHiddenDlcInfo' has a wrong offset!");
static_assert(offsetof(FATSaveSystemDlc, DLCInfoNotifiedFlags) == 0x000008, "Member 'FATSaveSystemDlc::DLCInfoNotifiedFlags' has a wrong offset!");
static_assert(offsetof(FATSaveSystemDlc, DLCMenuNotifiedFlags) == 0x00000C, "Member 'FATSaveSystemDlc::DLCMenuNotifiedFlags' has a wrong offset!");
static_assert(offsetof(FATSaveSystemDlc, InstallDLCEvenOnceFlags) == 0x000010, "Member 'FATSaveSystemDlc::InstallDLCEvenOnceFlags' has a wrong offset!");

// ScriptStruct ATExt.ATSaveSystemHeader
// 0xE090 (0xE090 - 0x0000)
struct FATSaveSystemHeader final
{
public:
	uint32                                        LevelNum;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EpisodeNum;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ChapterNum;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PartNum;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          AreaID;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              PlayTime;                                          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CharacterName[0x20];                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MainCurrent[0x20];                                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ThumbnailBin[0x7000];                              // 0x0068(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ProgressID[0x20];                                  // 0xE068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PlayingDlc;                                        // 0xE088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E089[0x7];                                     // 0xE089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveSystemHeader) == 0x000008, "Wrong alignment on FATSaveSystemHeader");
static_assert(sizeof(FATSaveSystemHeader) == 0x00E090, "Wrong size on FATSaveSystemHeader");
static_assert(offsetof(FATSaveSystemHeader, LevelNum) == 0x000000, "Member 'FATSaveSystemHeader::LevelNum' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, EpisodeNum) == 0x000004, "Member 'FATSaveSystemHeader::EpisodeNum' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, ChapterNum) == 0x000008, "Member 'FATSaveSystemHeader::ChapterNum' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, PartNum) == 0x00000C, "Member 'FATSaveSystemHeader::PartNum' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, AreaID) == 0x000010, "Member 'FATSaveSystemHeader::AreaID' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, PlayTime) == 0x000018, "Member 'FATSaveSystemHeader::PlayTime' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, Timestamp) == 0x000020, "Member 'FATSaveSystemHeader::Timestamp' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, CharacterName) == 0x000028, "Member 'FATSaveSystemHeader::CharacterName' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, MainCurrent) == 0x000048, "Member 'FATSaveSystemHeader::MainCurrent' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, ThumbnailBin) == 0x000068, "Member 'FATSaveSystemHeader::ThumbnailBin' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, ProgressID) == 0x00E068, "Member 'FATSaveSystemHeader::ProgressID' has a wrong offset!");
static_assert(offsetof(FATSaveSystemHeader, PlayingDlc) == 0x00E088, "Member 'FATSaveSystemHeader::PlayingDlc' has a wrong offset!");

// ScriptStruct ATExt.ATSaveSystemInputAssign
// 0x01E0 (0x01E0 - 0x0000)
struct alignas(0x08) FATSaveSystemInputAssign final
{
public:
	class FName                                   Walk;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Move_Up;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Move_Left;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Move_Down;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Move_Right;                                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Boost;                                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoostUp;                                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Jump;                                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Fly_Rolling;                                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Fly_Ascend;                                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Fly_Descend;                                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KiSearch;                                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetCursor;                                      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KiBlust;                                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapChange;                                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ride;                                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Ride_Off;                                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RideChange_Left;                                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RideChange_Right;                                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MineralRadar;                                      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Car_Forward;                                       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Car_Reverse;                                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Car_ChangeView;                                    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Car_Sound_Left;                                    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Car_Sound_Right;                                   // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseBall_Swing;                                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FastForward;                                       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkAutoFeed;                                      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Boost;                                      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_HighBoost;                                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_TargetChange_Left;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_TargetChange_Right;                         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_TargetCancel;                               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_MeleeAtk;                                   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_KiAtk;                                      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_KiRecover;                                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_MoveMode;                                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Guard;                                      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Zcombo;                                     // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_FormChange_Palette;                         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Support_Palette;                            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_ActiveSkill_Palette;                        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Item_Palette;                               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Palette_Up;                                 // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Palette_Left;                               // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Palette_Down;                               // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Battle_Palette_Right;                              // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECFKeyboardLayoutType                         Keyboard_Type;                                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Controller_Btn_B;                                  // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_X;                                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_A;                                  // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_Y;                                  // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_LB;                                 // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_LT;                                 // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_L3;                                 // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_RB;                                 // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_RT;                                 // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_R3;                                 // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_Start;                              // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Controller_Btn_Back;                               // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATSaveSystemInputAssign) == 0x000008, "Wrong alignment on FATSaveSystemInputAssign");
static_assert(sizeof(FATSaveSystemInputAssign) == 0x0001E0, "Wrong size on FATSaveSystemInputAssign");
static_assert(offsetof(FATSaveSystemInputAssign, Walk) == 0x000000, "Member 'FATSaveSystemInputAssign::Walk' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Move_Up) == 0x000008, "Member 'FATSaveSystemInputAssign::Move_Up' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Move_Left) == 0x000010, "Member 'FATSaveSystemInputAssign::Move_Left' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Move_Down) == 0x000018, "Member 'FATSaveSystemInputAssign::Move_Down' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Move_Right) == 0x000020, "Member 'FATSaveSystemInputAssign::Move_Right' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Boost) == 0x000028, "Member 'FATSaveSystemInputAssign::Boost' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, BoostUp) == 0x000030, "Member 'FATSaveSystemInputAssign::BoostUp' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Jump) == 0x000038, "Member 'FATSaveSystemInputAssign::Jump' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Fly_Rolling) == 0x000040, "Member 'FATSaveSystemInputAssign::Fly_Rolling' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Fly_Ascend) == 0x000048, "Member 'FATSaveSystemInputAssign::Fly_Ascend' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Fly_Descend) == 0x000050, "Member 'FATSaveSystemInputAssign::Fly_Descend' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, KiSearch) == 0x000058, "Member 'FATSaveSystemInputAssign::KiSearch' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, TargetCursor) == 0x000060, "Member 'FATSaveSystemInputAssign::TargetCursor' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, KiBlust) == 0x000068, "Member 'FATSaveSystemInputAssign::KiBlust' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, MapChange) == 0x000070, "Member 'FATSaveSystemInputAssign::MapChange' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Ride) == 0x000078, "Member 'FATSaveSystemInputAssign::Ride' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Ride_Off) == 0x000080, "Member 'FATSaveSystemInputAssign::Ride_Off' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, RideChange_Left) == 0x000088, "Member 'FATSaveSystemInputAssign::RideChange_Left' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, RideChange_Right) == 0x000090, "Member 'FATSaveSystemInputAssign::RideChange_Right' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, MineralRadar) == 0x000098, "Member 'FATSaveSystemInputAssign::MineralRadar' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Car_Forward) == 0x0000A0, "Member 'FATSaveSystemInputAssign::Car_Forward' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Car_Reverse) == 0x0000A8, "Member 'FATSaveSystemInputAssign::Car_Reverse' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Car_ChangeView) == 0x0000B0, "Member 'FATSaveSystemInputAssign::Car_ChangeView' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Car_Sound_Left) == 0x0000B8, "Member 'FATSaveSystemInputAssign::Car_Sound_Left' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Car_Sound_Right) == 0x0000C0, "Member 'FATSaveSystemInputAssign::Car_Sound_Right' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, BaseBall_Swing) == 0x0000C8, "Member 'FATSaveSystemInputAssign::BaseBall_Swing' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, FastForward) == 0x0000D0, "Member 'FATSaveSystemInputAssign::FastForward' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, TalkAutoFeed) == 0x0000D8, "Member 'FATSaveSystemInputAssign::TalkAutoFeed' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Boost) == 0x0000E0, "Member 'FATSaveSystemInputAssign::Battle_Boost' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_HighBoost) == 0x0000E8, "Member 'FATSaveSystemInputAssign::Battle_HighBoost' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_TargetChange_Left) == 0x0000F0, "Member 'FATSaveSystemInputAssign::Battle_TargetChange_Left' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_TargetChange_Right) == 0x0000F8, "Member 'FATSaveSystemInputAssign::Battle_TargetChange_Right' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_TargetCancel) == 0x000100, "Member 'FATSaveSystemInputAssign::Battle_TargetCancel' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_MeleeAtk) == 0x000108, "Member 'FATSaveSystemInputAssign::Battle_MeleeAtk' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_KiAtk) == 0x000110, "Member 'FATSaveSystemInputAssign::Battle_KiAtk' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_KiRecover) == 0x000118, "Member 'FATSaveSystemInputAssign::Battle_KiRecover' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_MoveMode) == 0x000120, "Member 'FATSaveSystemInputAssign::Battle_MoveMode' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Guard) == 0x000128, "Member 'FATSaveSystemInputAssign::Battle_Guard' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Zcombo) == 0x000130, "Member 'FATSaveSystemInputAssign::Battle_Zcombo' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_FormChange_Palette) == 0x000138, "Member 'FATSaveSystemInputAssign::Battle_FormChange_Palette' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Support_Palette) == 0x000140, "Member 'FATSaveSystemInputAssign::Battle_Support_Palette' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_ActiveSkill_Palette) == 0x000148, "Member 'FATSaveSystemInputAssign::Battle_ActiveSkill_Palette' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Item_Palette) == 0x000150, "Member 'FATSaveSystemInputAssign::Battle_Item_Palette' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Palette_Up) == 0x000158, "Member 'FATSaveSystemInputAssign::Battle_Palette_Up' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Palette_Left) == 0x000160, "Member 'FATSaveSystemInputAssign::Battle_Palette_Left' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Palette_Down) == 0x000168, "Member 'FATSaveSystemInputAssign::Battle_Palette_Down' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Battle_Palette_Right) == 0x000170, "Member 'FATSaveSystemInputAssign::Battle_Palette_Right' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Keyboard_Type) == 0x000178, "Member 'FATSaveSystemInputAssign::Keyboard_Type' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_B) == 0x000180, "Member 'FATSaveSystemInputAssign::Controller_Btn_B' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_X) == 0x000188, "Member 'FATSaveSystemInputAssign::Controller_Btn_X' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_A) == 0x000190, "Member 'FATSaveSystemInputAssign::Controller_Btn_A' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_Y) == 0x000198, "Member 'FATSaveSystemInputAssign::Controller_Btn_Y' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_LB) == 0x0001A0, "Member 'FATSaveSystemInputAssign::Controller_Btn_LB' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_LT) == 0x0001A8, "Member 'FATSaveSystemInputAssign::Controller_Btn_LT' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_L3) == 0x0001B0, "Member 'FATSaveSystemInputAssign::Controller_Btn_L3' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_RB) == 0x0001B8, "Member 'FATSaveSystemInputAssign::Controller_Btn_RB' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_RT) == 0x0001C0, "Member 'FATSaveSystemInputAssign::Controller_Btn_RT' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_R3) == 0x0001C8, "Member 'FATSaveSystemInputAssign::Controller_Btn_R3' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_Start) == 0x0001D0, "Member 'FATSaveSystemInputAssign::Controller_Btn_Start' has a wrong offset!");
static_assert(offsetof(FATSaveSystemInputAssign, Controller_Btn_Back) == 0x0001D8, "Member 'FATSaveSystemInputAssign::Controller_Btn_Back' has a wrong offset!");

// ScriptStruct ATExt.ATSaveSystemUser
// 0x0088 (0x0088 - 0x0000)
struct FATSaveSystemUser final
{
public:
	uint32                                        Version;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LastSaveSlot;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MostEpisodeNum;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MostChapterNum;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MostPartNum;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEulaAgree;                                       // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPrivacyPolicy;                                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKpiNotice;                                       // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPrivacyPolicyW180;                               // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKpiNoticeW180;                                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, EDlcNoticeState>            DlcNoticeMap;                                      // 0x0020(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        NoticeType;                                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAlreadyReadTcgTipsTitle;                         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAlreadyUpdatedLinkedBonusesForPatchOneDotSeven;  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NewTCGNoticesFlag;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCompletedProgressActivity;                     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SaveGameConsole;                                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEvenOnceBNID;                                    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATSaveSystemUser) == 0x000008, "Wrong alignment on FATSaveSystemUser");
static_assert(sizeof(FATSaveSystemUser) == 0x000088, "Wrong size on FATSaveSystemUser");
static_assert(offsetof(FATSaveSystemUser, Version) == 0x000000, "Member 'FATSaveSystemUser::Version' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, LastSaveSlot) == 0x000004, "Member 'FATSaveSystemUser::LastSaveSlot' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, MostEpisodeNum) == 0x000008, "Member 'FATSaveSystemUser::MostEpisodeNum' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, MostChapterNum) == 0x00000C, "Member 'FATSaveSystemUser::MostChapterNum' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, MostPartNum) == 0x000010, "Member 'FATSaveSystemUser::MostPartNum' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, IsEulaAgree) == 0x000014, "Member 'FATSaveSystemUser::IsEulaAgree' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, IsPrivacyPolicy) == 0x000015, "Member 'FATSaveSystemUser::IsPrivacyPolicy' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, IsKpiNotice) == 0x000016, "Member 'FATSaveSystemUser::IsKpiNotice' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, IsPrivacyPolicyW180) == 0x000017, "Member 'FATSaveSystemUser::IsPrivacyPolicyW180' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, IsKpiNoticeW180) == 0x000018, "Member 'FATSaveSystemUser::IsKpiNoticeW180' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, DlcNoticeMap) == 0x000020, "Member 'FATSaveSystemUser::DlcNoticeMap' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, NoticeType) == 0x000070, "Member 'FATSaveSystemUser::NoticeType' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, IsAlreadyReadTcgTipsTitle) == 0x000074, "Member 'FATSaveSystemUser::IsAlreadyReadTcgTipsTitle' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, IsAlreadyUpdatedLinkedBonusesForPatchOneDotSeven) == 0x000075, "Member 'FATSaveSystemUser::IsAlreadyUpdatedLinkedBonusesForPatchOneDotSeven' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, NewTCGNoticesFlag) == 0x000078, "Member 'FATSaveSystemUser::NewTCGNoticesFlag' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, bHasCompletedProgressActivity) == 0x00007C, "Member 'FATSaveSystemUser::bHasCompletedProgressActivity' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, SaveGameConsole) == 0x000080, "Member 'FATSaveSystemUser::SaveGameConsole' has a wrong offset!");
static_assert(offsetof(FATSaveSystemUser, IsEvenOnceBNID) == 0x000084, "Member 'FATSaveSystemUser::IsEvenOnceBNID' has a wrong offset!");

// ScriptStruct ATExt.CharacterChangeData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCharacterChangeData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterChangeData) == 0x000008, "Wrong alignment on FCharacterChangeData");
static_assert(sizeof(FCharacterChangeData) == 0x000028, "Wrong size on FCharacterChangeData");

// ScriptStruct ATExt.CharacterLoadData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FCharacterLoadData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterLoadData) == 0x000008, "Wrong alignment on FCharacterLoadData");
static_assert(sizeof(FCharacterLoadData) == 0x000018, "Wrong size on FCharacterLoadData");

// ScriptStruct ATExt.CharacterPartsChangeData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FCharacterPartsChangeData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterPartsChangeData) == 0x000004, "Wrong alignment on FCharacterPartsChangeData");
static_assert(sizeof(FCharacterPartsChangeData) == 0x000008, "Wrong size on FCharacterPartsChangeData");

// ScriptStruct ATExt.ATTournamentFieldParam
// 0x0010 (0x0010 - 0x0000)
struct FATTournamentFieldParam final
{
public:
	float                                         BarrierSizeFB;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrierSizeLR;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrierSizeUD;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrierLimitOffset;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATTournamentFieldParam) == 0x000004, "Wrong alignment on FATTournamentFieldParam");
static_assert(sizeof(FATTournamentFieldParam) == 0x000010, "Wrong size on FATTournamentFieldParam");
static_assert(offsetof(FATTournamentFieldParam, BarrierSizeFB) == 0x000000, "Member 'FATTournamentFieldParam::BarrierSizeFB' has a wrong offset!");
static_assert(offsetof(FATTournamentFieldParam, BarrierSizeLR) == 0x000004, "Member 'FATTournamentFieldParam::BarrierSizeLR' has a wrong offset!");
static_assert(offsetof(FATTournamentFieldParam, BarrierSizeUD) == 0x000008, "Member 'FATTournamentFieldParam::BarrierSizeUD' has a wrong offset!");
static_assert(offsetof(FATTournamentFieldParam, BarrierLimitOffset) == 0x00000C, "Member 'FATTournamentFieldParam::BarrierLimitOffset' has a wrong offset!");

// ScriptStruct ATExt.TipsSpec
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTipsSpec final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyLifeRate;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTipsSpec) == 0x000008, "Wrong alignment on FTipsSpec");
static_assert(sizeof(FTipsSpec) == 0x000010, "Wrong size on FTipsSpec");
static_assert(offsetof(FTipsSpec, ID) == 0x000000, "Member 'FTipsSpec::ID' has a wrong offset!");
static_assert(offsetof(FTipsSpec, EnemyLifeRate) == 0x000008, "Member 'FTipsSpec::EnemyLifeRate' has a wrong offset!");
static_assert(offsetof(FTipsSpec, WaitTime) == 0x00000C, "Member 'FTipsSpec::WaitTime' has a wrong offset!");

// ScriptStruct ATExt.BattleBossSkillCameraParam
// 0x0018 (0x0018 - 0x0000)
struct FBattleBossSkillCameraParam final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CamHeightAdd;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAdd;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfView;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtRateMin;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtRateMax;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleBossSkillCameraParam) == 0x000004, "Wrong alignment on FBattleBossSkillCameraParam");
static_assert(sizeof(FBattleBossSkillCameraParam) == 0x000018, "Wrong size on FBattleBossSkillCameraParam");
static_assert(offsetof(FBattleBossSkillCameraParam, Distance) == 0x000000, "Member 'FBattleBossSkillCameraParam::Distance' has a wrong offset!");
static_assert(offsetof(FBattleBossSkillCameraParam, CamHeightAdd) == 0x000004, "Member 'FBattleBossSkillCameraParam::CamHeightAdd' has a wrong offset!");
static_assert(offsetof(FBattleBossSkillCameraParam, PitchAdd) == 0x000008, "Member 'FBattleBossSkillCameraParam::PitchAdd' has a wrong offset!");
static_assert(offsetof(FBattleBossSkillCameraParam, FieldOfView) == 0x00000C, "Member 'FBattleBossSkillCameraParam::FieldOfView' has a wrong offset!");
static_assert(offsetof(FBattleBossSkillCameraParam, LookAtRateMin) == 0x000010, "Member 'FBattleBossSkillCameraParam::LookAtRateMin' has a wrong offset!");
static_assert(offsetof(FBattleBossSkillCameraParam, LookAtRateMax) == 0x000014, "Member 'FBattleBossSkillCameraParam::LookAtRateMax' has a wrong offset!");

// ScriptStruct ATExt.ViewParamCpl008BSkill002
// 0x0014 (0x0014 - 0x0000)
struct FViewParamCpl008BSkill002 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightMin;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightMax;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtRateMin;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtRateMax;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FViewParamCpl008BSkill002) == 0x000004, "Wrong alignment on FViewParamCpl008BSkill002");
static_assert(sizeof(FViewParamCpl008BSkill002) == 0x000014, "Wrong size on FViewParamCpl008BSkill002");
static_assert(offsetof(FViewParamCpl008BSkill002, Distance) == 0x000000, "Member 'FViewParamCpl008BSkill002::Distance' has a wrong offset!");
static_assert(offsetof(FViewParamCpl008BSkill002, HeightMin) == 0x000004, "Member 'FViewParamCpl008BSkill002::HeightMin' has a wrong offset!");
static_assert(offsetof(FViewParamCpl008BSkill002, HeightMax) == 0x000008, "Member 'FViewParamCpl008BSkill002::HeightMax' has a wrong offset!");
static_assert(offsetof(FViewParamCpl008BSkill002, LookAtRateMin) == 0x00000C, "Member 'FViewParamCpl008BSkill002::LookAtRateMin' has a wrong offset!");
static_assert(offsetof(FViewParamCpl008BSkill002, LookAtRateMax) == 0x000010, "Member 'FViewParamCpl008BSkill002::LookAtRateMax' has a wrong offset!");

// ScriptStruct ATExt.ViewParamCpl008BSkill005
// 0x0014 (0x0014 - 0x0000)
struct FViewParamCpl008BSkill005 final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightMin;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightMax;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtRateMin;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtRateMax;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FViewParamCpl008BSkill005) == 0x000004, "Wrong alignment on FViewParamCpl008BSkill005");
static_assert(sizeof(FViewParamCpl008BSkill005) == 0x000014, "Wrong size on FViewParamCpl008BSkill005");
static_assert(offsetof(FViewParamCpl008BSkill005, Distance) == 0x000000, "Member 'FViewParamCpl008BSkill005::Distance' has a wrong offset!");
static_assert(offsetof(FViewParamCpl008BSkill005, HeightMin) == 0x000004, "Member 'FViewParamCpl008BSkill005::HeightMin' has a wrong offset!");
static_assert(offsetof(FViewParamCpl008BSkill005, HeightMax) == 0x000008, "Member 'FViewParamCpl008BSkill005::HeightMax' has a wrong offset!");
static_assert(offsetof(FViewParamCpl008BSkill005, LookAtRateMin) == 0x00000C, "Member 'FViewParamCpl008BSkill005::LookAtRateMin' has a wrong offset!");
static_assert(offsetof(FViewParamCpl008BSkill005, LookAtRateMax) == 0x000010, "Member 'FViewParamCpl008BSkill005::LookAtRateMax' has a wrong offset!");

}

