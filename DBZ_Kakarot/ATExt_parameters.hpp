#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ATExt

#include "Basic.hpp"

#include "AT_structs.hpp"


namespace SDK::Params
{

// Function ATExt.ATEventBattle0300070MainPhase.StartFinishBlow
// 0x0008 (0x0008 - 0x0000)
struct ATEventBattle0300070MainPhase_StartFinishBlow final
{
public:
	class AAT_Character*                          EnemyChara;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattle0300070MainPhase_StartFinishBlow) == 0x000008, "Wrong alignment on ATEventBattle0300070MainPhase_StartFinishBlow");
static_assert(sizeof(ATEventBattle0300070MainPhase_StartFinishBlow) == 0x000008, "Wrong size on ATEventBattle0300070MainPhase_StartFinishBlow");
static_assert(offsetof(ATEventBattle0300070MainPhase_StartFinishBlow, EnemyChara) == 0x000000, "Member 'ATEventBattle0300070MainPhase_StartFinishBlow::EnemyChara' has a wrong offset!");

// Function ATExt.ATCharacterCpl102Base.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterCpl102Base_OnChangeAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterCpl102Base_OnChangeAction) == 0x000008, "Wrong alignment on ATCharacterCpl102Base_OnChangeAction");
static_assert(sizeof(ATCharacterCpl102Base_OnChangeAction) == 0x000010, "Wrong size on ATCharacterCpl102Base_OnChangeAction");
static_assert(offsetof(ATCharacterCpl102Base_OnChangeAction, InCharacter) == 0x000000, "Member 'ATCharacterCpl102Base_OnChangeAction::InCharacter' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl102Base_OnChangeAction, InActionIdPrev) == 0x000008, "Member 'ATCharacterCpl102Base_OnChangeAction::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl102Base_OnChangeAction, InActionIdNext) == 0x00000C, "Member 'ATCharacterCpl102Base_OnChangeAction::InActionIdNext' has a wrong offset!");

// Function ATExt.ATSceneBattleGameOverMenu.OnEndGameOverUI
// 0x0004 (0x0004 - 0x0000)
struct ATSceneBattleGameOverMenu_OnEndGameOverUI final
{
public:
	EGameoverSelectType                           SelectType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATSceneBattleGameOverMenu_OnEndGameOverUI) == 0x000004, "Wrong alignment on ATSceneBattleGameOverMenu_OnEndGameOverUI");
static_assert(sizeof(ATSceneBattleGameOverMenu_OnEndGameOverUI) == 0x000004, "Wrong size on ATSceneBattleGameOverMenu_OnEndGameOverUI");
static_assert(offsetof(ATSceneBattleGameOverMenu_OnEndGameOverUI, SelectType) == 0x000000, "Member 'ATSceneBattleGameOverMenu_OnEndGameOverUI::SelectType' has a wrong offset!");

// Function ATExt.ATEventBattleFinishBlowMainPhase.OnFaceActionEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleFinishBlowMainPhase_OnFaceActionEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleFinishBlowMainPhase_OnFaceActionEvent) == 0x000008, "Wrong alignment on ATEventBattleFinishBlowMainPhase_OnFaceActionEvent");
static_assert(sizeof(ATEventBattleFinishBlowMainPhase_OnFaceActionEvent) == 0x000108, "Wrong size on ATEventBattleFinishBlowMainPhase_OnFaceActionEvent");
static_assert(offsetof(ATEventBattleFinishBlowMainPhase_OnFaceActionEvent, EvParam) == 0x000000, "Member 'ATEventBattleFinishBlowMainPhase_OnFaceActionEvent::EvParam' has a wrong offset!");

// Function ATExt.ATSceneFree.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ATSceneFree_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             Timing;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueFlag;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneFree_OnDemoTiming) == 0x000004, "Wrong alignment on ATSceneFree_OnDemoTiming");
static_assert(sizeof(ATSceneFree_OnDemoTiming) == 0x000018, "Wrong size on ATSceneFree_OnDemoTiming");
static_assert(offsetof(ATSceneFree_OnDemoTiming, Type) == 0x000000, "Member 'ATSceneFree_OnDemoTiming::Type' has a wrong offset!");
static_assert(offsetof(ATSceneFree_OnDemoTiming, Timing) == 0x000001, "Member 'ATSceneFree_OnDemoTiming::Timing' has a wrong offset!");
static_assert(offsetof(ATSceneFree_OnDemoTiming, Name_0) == 0x000008, "Member 'ATSceneFree_OnDemoTiming::Name_0' has a wrong offset!");
static_assert(offsetof(ATSceneFree_OnDemoTiming, bContinueFlag) == 0x000010, "Member 'ATSceneFree_OnDemoTiming::bContinueFlag' has a wrong offset!");

// Function ATExt.ATSceneFree.OnQuestEventBegin
// 0x0010 (0x0010 - 0x0000)
struct ATSceneFree_OnQuestEventBegin final
{
public:
	class FName                                   PhaseID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_PHASE_TYPE                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneFree_OnQuestEventBegin) == 0x000004, "Wrong alignment on ATSceneFree_OnQuestEventBegin");
static_assert(sizeof(ATSceneFree_OnQuestEventBegin) == 0x000010, "Wrong size on ATSceneFree_OnQuestEventBegin");
static_assert(offsetof(ATSceneFree_OnQuestEventBegin, PhaseID) == 0x000000, "Member 'ATSceneFree_OnQuestEventBegin::PhaseID' has a wrong offset!");
static_assert(offsetof(ATSceneFree_OnQuestEventBegin, Type) == 0x000008, "Member 'ATSceneFree_OnQuestEventBegin::Type' has a wrong offset!");

// Function ATExt.ATSceneFree.OnQuestPhaseBegin
// 0x0010 (0x0010 - 0x0000)
struct ATSceneFree_OnQuestPhaseBegin final
{
public:
	class FName                                   PhaseID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_PHASE_TYPE                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneFree_OnQuestPhaseBegin) == 0x000004, "Wrong alignment on ATSceneFree_OnQuestPhaseBegin");
static_assert(sizeof(ATSceneFree_OnQuestPhaseBegin) == 0x000010, "Wrong size on ATSceneFree_OnQuestPhaseBegin");
static_assert(offsetof(ATSceneFree_OnQuestPhaseBegin, PhaseID) == 0x000000, "Member 'ATSceneFree_OnQuestPhaseBegin::PhaseID' has a wrong offset!");
static_assert(offsetof(ATSceneFree_OnQuestPhaseBegin, Type) == 0x000008, "Member 'ATSceneFree_OnQuestPhaseBegin::Type' has a wrong offset!");

// Function ATExt.ATSceneDemoBase.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ATSceneDemoBase_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             Timing;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueFlag;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneDemoBase_OnDemoTiming) == 0x000004, "Wrong alignment on ATSceneDemoBase_OnDemoTiming");
static_assert(sizeof(ATSceneDemoBase_OnDemoTiming) == 0x000018, "Wrong size on ATSceneDemoBase_OnDemoTiming");
static_assert(offsetof(ATSceneDemoBase_OnDemoTiming, Type) == 0x000000, "Member 'ATSceneDemoBase_OnDemoTiming::Type' has a wrong offset!");
static_assert(offsetof(ATSceneDemoBase_OnDemoTiming, Timing) == 0x000001, "Member 'ATSceneDemoBase_OnDemoTiming::Timing' has a wrong offset!");
static_assert(offsetof(ATSceneDemoBase_OnDemoTiming, Name_0) == 0x000008, "Member 'ATSceneDemoBase_OnDemoTiming::Name_0' has a wrong offset!");
static_assert(offsetof(ATSceneDemoBase_OnDemoTiming, bContinueFlag) == 0x000010, "Member 'ATSceneDemoBase_OnDemoTiming::bContinueFlag' has a wrong offset!");

// Function ATExt.ATLake.Init
// 0x0018 (0x0018 - 0x0000)
struct ATLake_Init final
{
public:
	class UPostProcessComponent*                  PostProcessComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   LakeMesh;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   UnderLakeMesh;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLake_Init) == 0x000008, "Wrong alignment on ATLake_Init");
static_assert(sizeof(ATLake_Init) == 0x000018, "Wrong size on ATLake_Init");
static_assert(offsetof(ATLake_Init, PostProcessComponent) == 0x000000, "Member 'ATLake_Init::PostProcessComponent' has a wrong offset!");
static_assert(offsetof(ATLake_Init, LakeMesh) == 0x000008, "Member 'ATLake_Init::LakeMesh' has a wrong offset!");
static_assert(offsetof(ATLake_Init, UnderLakeMesh) == 0x000010, "Member 'ATLake_Init::UnderLakeMesh' has a wrong offset!");

// Function ATExt.ATLake.Update
// 0x0018 (0x0018 - 0x0000)
struct ATLake_Update final
{
public:
	class UPostProcessComponent*                  PostProcessComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   LakeMesh;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   UnderLakeMesh;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATLake_Update) == 0x000008, "Wrong alignment on ATLake_Update");
static_assert(sizeof(ATLake_Update) == 0x000018, "Wrong size on ATLake_Update");
static_assert(offsetof(ATLake_Update, PostProcessComponent) == 0x000000, "Member 'ATLake_Update::PostProcessComponent' has a wrong offset!");
static_assert(offsetof(ATLake_Update, LakeMesh) == 0x000008, "Member 'ATLake_Update::LakeMesh' has a wrong offset!");
static_assert(offsetof(ATLake_Update, UnderLakeMesh) == 0x000010, "Member 'ATLake_Update::UnderLakeMesh' has a wrong offset!");

// Function ATExt.ATCharacterCpl011C.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterCpl011C_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterCpl011C_OnActionChange) == 0x000008, "Wrong alignment on ATCharacterCpl011C_OnActionChange");
static_assert(sizeof(ATCharacterCpl011C_OnActionChange) == 0x000010, "Wrong size on ATCharacterCpl011C_OnActionChange");
static_assert(offsetof(ATCharacterCpl011C_OnActionChange, InCharacter) == 0x000000, "Member 'ATCharacterCpl011C_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl011C_OnActionChange, InActionIdPrev) == 0x000008, "Member 'ATCharacterCpl011C_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl011C_OnActionChange, InActionIdNext) == 0x00000C, "Member 'ATCharacterCpl011C_OnActionChange::InActionIdNext' has a wrong offset!");

// Function ATExt.ATCharacterCpl030.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterCpl030_OnChangeAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterCpl030_OnChangeAction) == 0x000008, "Wrong alignment on ATCharacterCpl030_OnChangeAction");
static_assert(sizeof(ATCharacterCpl030_OnChangeAction) == 0x000010, "Wrong size on ATCharacterCpl030_OnChangeAction");
static_assert(offsetof(ATCharacterCpl030_OnChangeAction, InCharacter) == 0x000000, "Member 'ATCharacterCpl030_OnChangeAction::InCharacter' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl030_OnChangeAction, InActionIdPrev) == 0x000008, "Member 'ATCharacterCpl030_OnChangeAction::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl030_OnChangeAction, InActionIdNext) == 0x00000C, "Member 'ATCharacterCpl030_OnChangeAction::InActionIdNext' has a wrong offset!");

// Function ATExt.ATCharacterCpl040.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterCpl040_OnChangeAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterCpl040_OnChangeAction) == 0x000008, "Wrong alignment on ATCharacterCpl040_OnChangeAction");
static_assert(sizeof(ATCharacterCpl040_OnChangeAction) == 0x000010, "Wrong size on ATCharacterCpl040_OnChangeAction");
static_assert(offsetof(ATCharacterCpl040_OnChangeAction, InCharacter) == 0x000000, "Member 'ATCharacterCpl040_OnChangeAction::InCharacter' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl040_OnChangeAction, InActionIdPrev) == 0x000008, "Member 'ATCharacterCpl040_OnChangeAction::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl040_OnChangeAction, InActionIdNext) == 0x00000C, "Member 'ATCharacterCpl040_OnChangeAction::InActionIdNext' has a wrong offset!");

// Function ATExt.ATCommunityManager.CTExec
// 0x0010 (0x0010 - 0x0000)
struct ATCommunityManager_CTExec final
{
public:
	int32                                         InTestCase;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TestId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCommunityManager_CTExec) == 0x000004, "Wrong alignment on ATCommunityManager_CTExec");
static_assert(sizeof(ATCommunityManager_CTExec) == 0x000010, "Wrong size on ATCommunityManager_CTExec");
static_assert(offsetof(ATCommunityManager_CTExec, InTestCase) == 0x000000, "Member 'ATCommunityManager_CTExec::InTestCase' has a wrong offset!");
static_assert(offsetof(ATCommunityManager_CTExec, TestId) == 0x000008, "Member 'ATCommunityManager_CTExec::TestId' has a wrong offset!");

// Function ATExt.ATCommunityManager.OnLoadData
// 0x0001 (0x0001 - 0x0000)
struct ATCommunityManager_OnLoadData final
{
public:
	bool                                          bIsSuccess;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCommunityManager_OnLoadData) == 0x000001, "Wrong alignment on ATCommunityManager_OnLoadData");
static_assert(sizeof(ATCommunityManager_OnLoadData) == 0x000001, "Wrong size on ATCommunityManager_OnLoadData");
static_assert(offsetof(ATCommunityManager_OnLoadData, bIsSuccess) == 0x000000, "Member 'ATCommunityManager_OnLoadData::bIsSuccess' has a wrong offset!");

// Function ATExt.ATCharacterCpl067.OnChangeAction
// 0x0010 (0x0010 - 0x0000)
struct ATCharacterCpl067_OnChangeAction final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATCharacterCpl067_OnChangeAction) == 0x000008, "Wrong alignment on ATCharacterCpl067_OnChangeAction");
static_assert(sizeof(ATCharacterCpl067_OnChangeAction) == 0x000010, "Wrong size on ATCharacterCpl067_OnChangeAction");
static_assert(offsetof(ATCharacterCpl067_OnChangeAction, InCharacter) == 0x000000, "Member 'ATCharacterCpl067_OnChangeAction::InCharacter' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl067_OnChangeAction, InActionIdPrev) == 0x000008, "Member 'ATCharacterCpl067_OnChangeAction::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ATCharacterCpl067_OnChangeAction, InActionIdNext) == 0x00000C, "Member 'ATCharacterCpl067_OnChangeAction::InActionIdNext' has a wrong offset!");

// Function ATExt.ATTalkAnimLoader.CompleteLoad
// 0x0008 (0x0008 - 0x0000)
struct ATTalkAnimLoader_CompleteLoad final
{
public:
	class UATDataAssetTalkAnimAsyncLoad*          Loader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATTalkAnimLoader_CompleteLoad) == 0x000008, "Wrong alignment on ATTalkAnimLoader_CompleteLoad");
static_assert(sizeof(ATTalkAnimLoader_CompleteLoad) == 0x000008, "Wrong size on ATTalkAnimLoader_CompleteLoad");
static_assert(offsetof(ATTalkAnimLoader_CompleteLoad, Loader) == 0x000000, "Member 'ATTalkAnimLoader_CompleteLoad::Loader' has a wrong offset!");

// Function ATExt.ATSceneFreeLoadBase.OnQuestEventBegin
// 0x0010 (0x0010 - 0x0000)
struct ATSceneFreeLoadBase_OnQuestEventBegin final
{
public:
	class FName                                   PhaseID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_PHASE_TYPE                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneFreeLoadBase_OnQuestEventBegin) == 0x000004, "Wrong alignment on ATSceneFreeLoadBase_OnQuestEventBegin");
static_assert(sizeof(ATSceneFreeLoadBase_OnQuestEventBegin) == 0x000010, "Wrong size on ATSceneFreeLoadBase_OnQuestEventBegin");
static_assert(offsetof(ATSceneFreeLoadBase_OnQuestEventBegin, PhaseID) == 0x000000, "Member 'ATSceneFreeLoadBase_OnQuestEventBegin::PhaseID' has a wrong offset!");
static_assert(offsetof(ATSceneFreeLoadBase_OnQuestEventBegin, Type) == 0x000008, "Member 'ATSceneFreeLoadBase_OnQuestEventBegin::Type' has a wrong offset!");

// Function ATExt.ATEventBattle0103002MainPhase.OnFaceActionEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattle0103002MainPhase_OnFaceActionEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattle0103002MainPhase_OnFaceActionEvent) == 0x000008, "Wrong alignment on ATEventBattle0103002MainPhase_OnFaceActionEvent");
static_assert(sizeof(ATEventBattle0103002MainPhase_OnFaceActionEvent) == 0x000108, "Wrong size on ATEventBattle0103002MainPhase_OnFaceActionEvent");
static_assert(offsetof(ATEventBattle0103002MainPhase_OnFaceActionEvent, EvParam) == 0x000000, "Member 'ATEventBattle0103002MainPhase_OnFaceActionEvent::EvParam' has a wrong offset!");

// Function ATExt.ATEventBattleB0400010MainPhase01.OnFaceActionEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleB0400010MainPhase01_OnFaceActionEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleB0400010MainPhase01_OnFaceActionEvent) == 0x000008, "Wrong alignment on ATEventBattleB0400010MainPhase01_OnFaceActionEvent");
static_assert(sizeof(ATEventBattleB0400010MainPhase01_OnFaceActionEvent) == 0x000108, "Wrong size on ATEventBattleB0400010MainPhase01_OnFaceActionEvent");
static_assert(offsetof(ATEventBattleB0400010MainPhase01_OnFaceActionEvent, EvParam) == 0x000000, "Member 'ATEventBattleB0400010MainPhase01_OnFaceActionEvent::EvParam' has a wrong offset!");

// Function ATExt.ATEventBattleB0400010MainPhase01.OnVisionBegin
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleB0400010MainPhase01_OnVisionBegin final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleB0400010MainPhase01_OnVisionBegin) == 0x000008, "Wrong alignment on ATEventBattleB0400010MainPhase01_OnVisionBegin");
static_assert(sizeof(ATEventBattleB0400010MainPhase01_OnVisionBegin) == 0x000108, "Wrong size on ATEventBattleB0400010MainPhase01_OnVisionBegin");
static_assert(offsetof(ATEventBattleB0400010MainPhase01_OnVisionBegin, EvParam) == 0x000000, "Member 'ATEventBattleB0400010MainPhase01_OnVisionBegin::EvParam' has a wrong offset!");

// Function ATExt.ATEventBattleB0400010MainPhase01.OnVisionEnd
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleB0400010MainPhase01_OnVisionEnd final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleB0400010MainPhase01_OnVisionEnd) == 0x000008, "Wrong alignment on ATEventBattleB0400010MainPhase01_OnVisionEnd");
static_assert(sizeof(ATEventBattleB0400010MainPhase01_OnVisionEnd) == 0x000108, "Wrong size on ATEventBattleB0400010MainPhase01_OnVisionEnd");
static_assert(offsetof(ATEventBattleB0400010MainPhase01_OnVisionEnd, EvParam) == 0x000000, "Member 'ATEventBattleB0400010MainPhase01_OnVisionEnd::EvParam' has a wrong offset!");

// Function ATExt.ATEventBattleB0500010CMainPhase01.OnFaceActionEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleB0500010CMainPhase01_OnFaceActionEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleB0500010CMainPhase01_OnFaceActionEvent) == 0x000008, "Wrong alignment on ATEventBattleB0500010CMainPhase01_OnFaceActionEvent");
static_assert(sizeof(ATEventBattleB0500010CMainPhase01_OnFaceActionEvent) == 0x000108, "Wrong size on ATEventBattleB0500010CMainPhase01_OnFaceActionEvent");
static_assert(offsetof(ATEventBattleB0500010CMainPhase01_OnFaceActionEvent, EvParam) == 0x000000, "Member 'ATEventBattleB0500010CMainPhase01_OnFaceActionEvent::EvParam' has a wrong offset!");

// Function ATExt.ATEventBattleB0600010AMainPhase01.OnQteActionEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleB0600010AMainPhase01_OnQteActionEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleB0600010AMainPhase01_OnQteActionEvent) == 0x000008, "Wrong alignment on ATEventBattleB0600010AMainPhase01_OnQteActionEvent");
static_assert(sizeof(ATEventBattleB0600010AMainPhase01_OnQteActionEvent) == 0x000108, "Wrong size on ATEventBattleB0600010AMainPhase01_OnQteActionEvent");
static_assert(offsetof(ATEventBattleB0600010AMainPhase01_OnQteActionEvent, EvParam) == 0x000000, "Member 'ATEventBattleB0600010AMainPhase01_OnQteActionEvent::EvParam' has a wrong offset!");

// Function ATExt.ATEventBattleB0600030BMainPhase01.OnFaceActionEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleB0600030BMainPhase01_OnFaceActionEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleB0600030BMainPhase01_OnFaceActionEvent) == 0x000008, "Wrong alignment on ATEventBattleB0600030BMainPhase01_OnFaceActionEvent");
static_assert(sizeof(ATEventBattleB0600030BMainPhase01_OnFaceActionEvent) == 0x000108, "Wrong size on ATEventBattleB0600030BMainPhase01_OnFaceActionEvent");
static_assert(offsetof(ATEventBattleB0600030BMainPhase01_OnFaceActionEvent, EvParam) == 0x000000, "Member 'ATEventBattleB0600030BMainPhase01_OnFaceActionEvent::EvParam' has a wrong offset!");

// Function ATExt.ATEventBattleB0600030BMainPhase01.OnRushQteEndEvent
// 0x0108 (0x0108 - 0x0000)
struct ATEventBattleB0600030BMainPhase01_OnRushQteEndEvent final
{
public:
	struct FEventParam                            EvParam;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ATEventBattleB0600030BMainPhase01_OnRushQteEndEvent) == 0x000008, "Wrong alignment on ATEventBattleB0600030BMainPhase01_OnRushQteEndEvent");
static_assert(sizeof(ATEventBattleB0600030BMainPhase01_OnRushQteEndEvent) == 0x000108, "Wrong size on ATEventBattleB0600030BMainPhase01_OnRushQteEndEvent");
static_assert(offsetof(ATEventBattleB0600030BMainPhase01_OnRushQteEndEvent, EvParam) == 0x000000, "Member 'ATEventBattleB0600030BMainPhase01_OnRushQteEndEvent::EvParam' has a wrong offset!");

// Function ATExt.ATGeneralBattleDirectionPhase.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ATGeneralBattleDirectionPhase_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    DemoType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             DemoTiming;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DemoName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFlag;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATGeneralBattleDirectionPhase_OnDemoTiming) == 0x000004, "Wrong alignment on ATGeneralBattleDirectionPhase_OnDemoTiming");
static_assert(sizeof(ATGeneralBattleDirectionPhase_OnDemoTiming) == 0x000018, "Wrong size on ATGeneralBattleDirectionPhase_OnDemoTiming");
static_assert(offsetof(ATGeneralBattleDirectionPhase_OnDemoTiming, DemoType) == 0x000000, "Member 'ATGeneralBattleDirectionPhase_OnDemoTiming::DemoType' has a wrong offset!");
static_assert(offsetof(ATGeneralBattleDirectionPhase_OnDemoTiming, DemoTiming) == 0x000001, "Member 'ATGeneralBattleDirectionPhase_OnDemoTiming::DemoTiming' has a wrong offset!");
static_assert(offsetof(ATGeneralBattleDirectionPhase_OnDemoTiming, DemoName) == 0x000008, "Member 'ATGeneralBattleDirectionPhase_OnDemoTiming::DemoName' has a wrong offset!");
static_assert(offsetof(ATGeneralBattleDirectionPhase_OnDemoTiming, ContinueFlag) == 0x000010, "Member 'ATGeneralBattleDirectionPhase_OnDemoTiming::ContinueFlag' has a wrong offset!");

// Function ATExt.ATSceneEvent.OnDemoTiming
// 0x0018 (0x0018 - 0x0000)
struct ATSceneEvent_OnDemoTiming final
{
public:
	EDEMO_TYPE                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEMO_TIMING_TYPE                             Timing;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueFlag;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneEvent_OnDemoTiming) == 0x000004, "Wrong alignment on ATSceneEvent_OnDemoTiming");
static_assert(sizeof(ATSceneEvent_OnDemoTiming) == 0x000018, "Wrong size on ATSceneEvent_OnDemoTiming");
static_assert(offsetof(ATSceneEvent_OnDemoTiming, Type) == 0x000000, "Member 'ATSceneEvent_OnDemoTiming::Type' has a wrong offset!");
static_assert(offsetof(ATSceneEvent_OnDemoTiming, Timing) == 0x000001, "Member 'ATSceneEvent_OnDemoTiming::Timing' has a wrong offset!");
static_assert(offsetof(ATSceneEvent_OnDemoTiming, Name_0) == 0x000008, "Member 'ATSceneEvent_OnDemoTiming::Name_0' has a wrong offset!");
static_assert(offsetof(ATSceneEvent_OnDemoTiming, bContinueFlag) == 0x000010, "Member 'ATSceneEvent_OnDemoTiming::bContinueFlag' has a wrong offset!");

// Function ATExt.ATSceneEvent.OnQuestEventEnd
// 0x0010 (0x0010 - 0x0000)
struct ATSceneEvent_OnQuestEventEnd final
{
public:
	class FName                                   PhaseID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_PHASE_TYPE                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneEvent_OnQuestEventEnd) == 0x000004, "Wrong alignment on ATSceneEvent_OnQuestEventEnd");
static_assert(sizeof(ATSceneEvent_OnQuestEventEnd) == 0x000010, "Wrong size on ATSceneEvent_OnQuestEventEnd");
static_assert(offsetof(ATSceneEvent_OnQuestEventEnd, PhaseID) == 0x000000, "Member 'ATSceneEvent_OnQuestEventEnd::PhaseID' has a wrong offset!");
static_assert(offsetof(ATSceneEvent_OnQuestEventEnd, Type) == 0x000008, "Member 'ATSceneEvent_OnQuestEventEnd::Type' has a wrong offset!");

// Function ATExt.ATSceneEvent.OnQuestPhaseBegin
// 0x0010 (0x0010 - 0x0000)
struct ATSceneEvent_OnQuestPhaseBegin final
{
public:
	class FName                                   PhaseID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_PHASE_TYPE                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneEvent_OnQuestPhaseBegin) == 0x000004, "Wrong alignment on ATSceneEvent_OnQuestPhaseBegin");
static_assert(sizeof(ATSceneEvent_OnQuestPhaseBegin) == 0x000010, "Wrong size on ATSceneEvent_OnQuestPhaseBegin");
static_assert(offsetof(ATSceneEvent_OnQuestPhaseBegin, PhaseID) == 0x000000, "Member 'ATSceneEvent_OnQuestPhaseBegin::PhaseID' has a wrong offset!");
static_assert(offsetof(ATSceneEvent_OnQuestPhaseBegin, Type) == 0x000008, "Member 'ATSceneEvent_OnQuestPhaseBegin::Type' has a wrong offset!");

// Function ATExt.ATSceneGeneralTalk.OnQuestPhaseEnd
// 0x0010 (0x0010 - 0x0000)
struct ATSceneGeneralTalk_OnQuestPhaseEnd final
{
public:
	class FName                                   PhaseID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQUEST_PHASE_TYPE                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ATSceneGeneralTalk_OnQuestPhaseEnd) == 0x000004, "Wrong alignment on ATSceneGeneralTalk_OnQuestPhaseEnd");
static_assert(sizeof(ATSceneGeneralTalk_OnQuestPhaseEnd) == 0x000010, "Wrong size on ATSceneGeneralTalk_OnQuestPhaseEnd");
static_assert(offsetof(ATSceneGeneralTalk_OnQuestPhaseEnd, PhaseID) == 0x000000, "Member 'ATSceneGeneralTalk_OnQuestPhaseEnd::PhaseID' has a wrong offset!");
static_assert(offsetof(ATSceneGeneralTalk_OnQuestPhaseEnd, Type) == 0x000008, "Member 'ATSceneGeneralTalk_OnQuestPhaseEnd::Type' has a wrong offset!");

// Function ATExt.ViewActorCookDemo.ChangeCameraAnim
// 0x0010 (0x0010 - 0x0000)
struct ViewActorCookDemo_ChangeCameraAnim final
{
public:
	class UCameraAnim*                            CameraAnim;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ViewActorCookDemo_ChangeCameraAnim) == 0x000008, "Wrong alignment on ViewActorCookDemo_ChangeCameraAnim");
static_assert(sizeof(ViewActorCookDemo_ChangeCameraAnim) == 0x000010, "Wrong size on ViewActorCookDemo_ChangeCameraAnim");
static_assert(offsetof(ViewActorCookDemo_ChangeCameraAnim, CameraAnim) == 0x000000, "Member 'ViewActorCookDemo_ChangeCameraAnim::CameraAnim' has a wrong offset!");
static_assert(offsetof(ViewActorCookDemo_ChangeCameraAnim, bLoop) == 0x000008, "Member 'ViewActorCookDemo_ChangeCameraAnim::bLoop' has a wrong offset!");

// Function ATExt.ViewActorCpl011BSkill004.OnActionChange
// 0x0010 (0x0010 - 0x0000)
struct ViewActorCpl011BSkill004_OnActionChange final
{
public:
	class AAT_Character*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdPrev;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InActionIdNext;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ViewActorCpl011BSkill004_OnActionChange) == 0x000008, "Wrong alignment on ViewActorCpl011BSkill004_OnActionChange");
static_assert(sizeof(ViewActorCpl011BSkill004_OnActionChange) == 0x000010, "Wrong size on ViewActorCpl011BSkill004_OnActionChange");
static_assert(offsetof(ViewActorCpl011BSkill004_OnActionChange, InCharacter) == 0x000000, "Member 'ViewActorCpl011BSkill004_OnActionChange::InCharacter' has a wrong offset!");
static_assert(offsetof(ViewActorCpl011BSkill004_OnActionChange, InActionIdPrev) == 0x000008, "Member 'ViewActorCpl011BSkill004_OnActionChange::InActionIdPrev' has a wrong offset!");
static_assert(offsetof(ViewActorCpl011BSkill004_OnActionChange, InActionIdNext) == 0x00000C, "Member 'ViewActorCpl011BSkill004_OnActionChange::InActionIdNext' has a wrong offset!");

// Function ATExt.ViewActorCpl011BSkill004.OnUpdateAnimation
// 0x0001 (0x0001 - 0x0000)
struct ViewActorCpl011BSkill004_OnUpdateAnimation final
{
public:
	EATCharacterMoveState                         InMoveType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ViewActorCpl011BSkill004_OnUpdateAnimation) == 0x000001, "Wrong alignment on ViewActorCpl011BSkill004_OnUpdateAnimation");
static_assert(sizeof(ViewActorCpl011BSkill004_OnUpdateAnimation) == 0x000001, "Wrong size on ViewActorCpl011BSkill004_OnUpdateAnimation");
static_assert(offsetof(ViewActorCpl011BSkill004_OnUpdateAnimation, InMoveType) == 0x000000, "Member 'ViewActorCpl011BSkill004_OnUpdateAnimation::InMoveType' has a wrong offset!");

// Function ATExt.ViewActorDirection.CalcCameraFlip
// 0x0010 (0x0010 - 0x0000)
struct ViewActorDirection_CalcCameraFlip final
{
public:
	class AAT_CharacterBase*                      PDirecter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ViewActorDirection_CalcCameraFlip) == 0x000008, "Wrong alignment on ViewActorDirection_CalcCameraFlip");
static_assert(sizeof(ViewActorDirection_CalcCameraFlip) == 0x000010, "Wrong size on ViewActorDirection_CalcCameraFlip");
static_assert(offsetof(ViewActorDirection_CalcCameraFlip, PDirecter) == 0x000000, "Member 'ViewActorDirection_CalcCameraFlip::PDirecter' has a wrong offset!");
static_assert(offsetof(ViewActorDirection_CalcCameraFlip, ReturnValue) == 0x000008, "Member 'ViewActorDirection_CalcCameraFlip::ReturnValue' has a wrong offset!");

// Function ATExt.ViewActorHuntingDino.CalcCameraFlip
// 0x0010 (0x0010 - 0x0000)
struct ViewActorHuntingDino_CalcCameraFlip final
{
public:
	class AAT_CharacterBase*                      PDirecter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ViewActorHuntingDino_CalcCameraFlip) == 0x000008, "Wrong alignment on ViewActorHuntingDino_CalcCameraFlip");
static_assert(sizeof(ViewActorHuntingDino_CalcCameraFlip) == 0x000010, "Wrong size on ViewActorHuntingDino_CalcCameraFlip");
static_assert(offsetof(ViewActorHuntingDino_CalcCameraFlip, PDirecter) == 0x000000, "Member 'ViewActorHuntingDino_CalcCameraFlip::PDirecter' has a wrong offset!");
static_assert(offsetof(ViewActorHuntingDino_CalcCameraFlip, ReturnValue) == 0x000008, "Member 'ViewActorHuntingDino_CalcCameraFlip::ReturnValue' has a wrong offset!");

}

